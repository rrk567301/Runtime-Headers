@class NSURL, NSMutableDictionary, NSNumber, NSDate, NSObject, NSDictionary, NSTimeZone, NSMutableArray, NSString, NSSet, PHImportAssetFilePresenter, PFMetadata, AVAssetImageGenerator, NSData, NSArray, UTType, PHImportSource;
@protocol OS_dispatch_queue;

@interface PHImportAsset : NSObject <PHImportDuplicateCheckerItem> {
    PHImportSource *_strongSource;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _metadataLock;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _hashLock;
    NSDictionary *_userMetadata;
    NSDictionary *_userInfo;
    NSString *_basenameForOriginalAdjustment;
}

@property (nonatomic) char treatAsUnsupportedRAW;
@property (nonatomic) struct CGSize { double width; double height; } imageSize;
@property (retain, nonatomic) AVAssetImageGenerator *imageGenerator;
@property (retain, nonatomic) PFMetadata *metadata;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *loadSidecars;
@property (nonatomic) char sidecarsLoaded;
@property (retain, nonatomic) NSString *importIdentifier;
@property (retain, nonatomic) PHImportAssetFilePresenter *filePresenter;
@property (nonatomic) unsigned long long cachedHash;
@property (retain, nonatomic) NSString *uuid;
@property (retain, nonatomic) NSURL *url;
@property (readonly, nonatomic) NSURL *securityScopedURL;
@property (readonly, nonatomic) NSString *parentFolderPath;
@property (retain, nonatomic) UTType *contentType;
@property (retain, nonatomic) NSString *fileName;
@property (retain, nonatomic) NSString *createdFileName;
@property (nonatomic) unsigned long long fileSize;
@property (retain, nonatomic) NSDate *fileCreationDate;
@property (retain, nonatomic) NSDate *fileModificationDate;
@property (retain, nonatomic) NSString *fileExtension;
@property (nonatomic) unsigned long long copyMethod;
@property (retain, nonatomic) NSData *fileData;
@property (nonatomic) unsigned char fileLocation;
@property (readonly, weak, nonatomic) PHImportSource *source;
@property (nonatomic) long long resourceType;
@property (nonatomic) unsigned long long resourceSubType;
@property (retain, nonatomic) NSMutableDictionary *sidecarAssetsByType;
@property (retain, nonatomic) NSMutableArray *relatedBurstAssets;
@property (retain, nonatomic) PHImportAsset *burstPick;
@property (readonly, nonatomic) NSArray *sidecarAssets;
@property (retain, nonatomic) NSDictionary *customAssetProperties;
@property (readonly, nonatomic) NSObject *redactedFileNameDescription;
@property (readonly, nonatomic) id representedObject;
@property (readonly, nonatomic) unsigned long long approximateBytesRequiredToImport;
@property (readonly, nonatomic) NSSet *duplicateAssets;
@property (retain, nonatomic) PHImportAsset *rawAsset;
@property (retain, nonatomic) PHImportAsset *videoComplement;
@property (retain, nonatomic) PHImportAsset *largeRender;
@property (retain, nonatomic) PHImportAsset *largeMovieRender;
@property (retain, nonatomic) PHImportAsset *spatialOverCapture;
@property (retain, nonatomic) PHImportAsset *base;
@property (retain, nonatomic) PHImportAsset *thumbnailRender;
@property (retain, nonatomic) PHImportAsset *miniRender;
@property (retain, nonatomic) PHImportAsset *audioAsset;
@property (readonly, nonatomic) unsigned long long assetSizeIncludingRelatedAssets;
@property (readonly, nonatomic) NSDate *creationDate;
@property (readonly, nonatomic) NSTimeZone *timeZone;
@property (readonly, nonatomic) unsigned int orientation;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } exifPixelSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } orientedPixelSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } transformedPixelSize;
@property (nonatomic) struct CGSize { double width; double height; } thumbnailSize;
@property (readonly, nonatomic) NSString *burstUUID;
@property (readonly, nonatomic) NSNumber *durationTimeInterval;
@property (readonly, nonatomic) NSString *cameraMake;
@property (readonly, nonatomic) NSString *cameraModel;
@property (readonly, nonatomic) NSString *formattedCameraModel;
@property (readonly, nonatomic) NSString *lensModel;
@property (readonly, nonatomic) NSNumber *flashFired;
@property (readonly, nonatomic) NSNumber *whiteBalance;
@property (readonly, nonatomic) NSNumber *meteringMode;
@property (readonly, nonatomic) NSNumber *iso;
@property (readonly, nonatomic) NSNumber *focalLength;
@property (readonly, nonatomic) NSNumber *focalLengthIn35mm;
@property (readonly, nonatomic) NSNumber *digitalZoomRatio;
@property (readonly, nonatomic) NSNumber *exposureBias;
@property (readonly, nonatomic) NSNumber *fNumber;
@property (readonly, nonatomic) NSNumber *exposureTime;
@property (readonly, nonatomic) NSString *codec;
@property (readonly, nonatomic) NSNumber *fps;
@property (readonly, nonatomic) NSNumber *sampleRate;
@property (readonly, nonatomic) NSNumber *bitrate;
@property (readonly, nonatomic) NSNumber *trackFormat;
@property (readonly, nonatomic) NSString *title;
@property (readonly, nonatomic) NSSet *keywordTitles;
@property (readonly, nonatomic) NSString *assetDescription;
@property (readonly, nonatomic) NSString *accessibilityDescription;
@property (readonly, nonatomic) char isDeviceAsset;
@property (readonly, nonatomic) char isViewable;
@property (readonly, nonatomic) char isTagged;
@property (readonly, nonatomic) char canReference;
@property (readonly, nonatomic) char canDelete;
@property (readonly, nonatomic) char hasAudioAttachment;
@property (readonly, nonatomic) char isImage;
@property (readonly, nonatomic) char isMovie;
@property (readonly, nonatomic) char isSloMo;
@property (readonly, nonatomic) char isAudio;
@property (readonly, nonatomic) char isJPEG;
@property (readonly, nonatomic) char isJPEG2000;
@property (readonly, nonatomic) char isRAW;
@property (readonly, nonatomic) char isJpegPlusRAW;
@property (readonly, nonatomic) char isTIFF;
@property (readonly, nonatomic) char isHEIF;
@property (readonly, nonatomic) char isGIF;
@property (readonly, nonatomic) char isPNG;
@property (readonly, nonatomic) char isPDF;
@property (readonly, nonatomic) char isPSD;
@property (readonly, nonatomic) char isAVCHD;
@property (readonly, nonatomic) char isSidecar;
@property (readonly, nonatomic) char isTimelapse;
@property (readonly, nonatomic) char isHDR;
@property (readonly, nonatomic) char isSDOF;
@property (readonly, nonatomic) char isBurst;
@property (readonly, nonatomic) char isGrouped;
@property (readonly, nonatomic) char isLivePhoto;
@property (readonly) id avchdAssetId;
@property (readonly) id originatingAssetID;
@property (readonly) id fingerprint;
@property (readonly) id nameKey;
@property (readonly) id sizeKey;
@property (readonly) NSDate *dateKey;
@property char isDuplicate;
@property (retain) NSDate *lastDuplicateCheck;
@property (retain) NSMutableDictionary *duplicates;
@property unsigned char duplicateStateConfidence;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (char)directoryExists:(id)a0;
+ (id)assetFileForURL:(id)a0 source:(id)a1;
+ (id)assetFileForURL:(id)a0 source:(id)a1 withUuid:(id)a2;
+ (void)determineIfTIFFIsRAW:(id)a0 url:(id)a1;
+ (char)fileExists:(id)a0;
+ (char)isOriginalAdjustmentData:(id)a0;
+ (char)isValidAsSidecar:(id)a0;
+ (id)loadDatesForAssetSequence:(id)a0 atEnd:(id /* block */)a1;
+ (id)loadDatesForAssets:(id)a0 atEnd:(id /* block */)a1;
+ (void)logImageDateFileDateDifferencesForAsset:(id)a0;

- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (id)userInfo;
- (void)setUserInfo:(id)a0;
- (id)initWithSource:(id)a0;
- (id)resourceTypes;
- (char)isPrimary;
- (void)_setMetadata:(id)a0;
- (struct CGSize { double x0; double x1; })cropEXIFThumbSize:(struct CGSize { double x0; double x1; })a0 originalSize:(struct CGSize { double x0; double x1; })a1;
- (void)_accessMetadata:(id /* block */)a0;
- (void)_addRelatedRecordsToRecord:(id)a0 primaryRecord:(id)a1;
- (char)_loadMetadataIfNecessaryForURL:(id)a0 options:(unsigned short)a1;
- (void)_loadSidecarFiles;
- (void)addBurstAsset:(id)a0;
- (void)addSidecarAsset:(id)a0;
- (id)adjustmentSecondarySidecar;
- (id)adjustmentSidecar;
- (struct CGImage { } *)avThumbnailOfSize:(unsigned long long)a0 canceler:(id)a1 error:(id *)a2;
- (id)basenameForOriginalAdjustmentData;
- (int)burstPickType;
- (char)canPreserveFolderStructure;
- (struct CGSize { double x0; double x1; })cgImageSize;
- (id)checkForSidecarWithExtension:(id)a0;
- (void)configureSidecarTypeForExtension:(id)a0;
- (char)configureWithContentType:(id)a0 supportedMediaType:(unsigned char)a1;
- (id)copyFromURL:(id)a0 toURL:(id)a1;
- (void)copyToURL:(id)a0 completionHandler:(id /* block */)a1;
- (id)descriptionWithPrefix:(id)a0;
- (id)duplicateAssetsForLibrary:(id)a0;
- (id)groupingUUID;
- (char)hasAdjustments;
- (char)hasOriginalResourceType;
- (struct CGImage { } *)imageThumbnailOfSize:(unsigned long long)a0 canceler:(id)a1 error:(id *)a2;
- (id)importRecordForPrimaryAsset;
- (id)initWithSource:(id)a0 url:(id)a1 type:(id)a2 supportedMediaType:(unsigned char)a3 uuid:(id)a4;
- (char)isAdjustmentSecondaryData;
- (char)isAppropriateForUI;
- (char)isBase;
- (char)isEqualToImportAsset:(id)a0;
- (char)isOriginalAdjustmentData;
- (char)isRender;
- (char)isRepresentation;
- (char)isSpatialOverCapture;
- (char)isValidForReference;
- (char)isVideoComplementOf:(id)a0;
- (id)livePhotoPairingIdentifier;
- (void)loadMetadataAsync:(id /* block */)a0;
- (void)loadMetadataSync;
- (void)loadSidecarFiles;
- (id)makeImportIdentifier;
- (id)originalAdjustmentSidecar;
- (char)performAdditionalLivePhotoChecksOnImageAsset:(id)a0;
- (id)relatedAssets;
- (unsigned long long)relatedBytes;
- (struct CGImage { } *)removeBlackBarsFromExifThumbnail:(struct CGImage { } *)a0 fullSize:(struct CGSize { double x0; double x1; })a1;
- (void)removeSidecarAsset:(id)a0;
- (void)setDuplicates:(id)a0 forLibrary:(id)a1;
- (void)setUserMetadata:(id)a0;
- (char)shouldPreserveUUID;
- (unsigned long long)sidecarAssetBytes;
- (id)sidecarInfoDictionaries;
- (id)sidecarInfoDictionary;
- (id)slmSidecar;
- (id)spatialOverCaptureIdentifier;
- (id)stripMarkerFromName:(id)a0 markerLocation:(unsigned long long)a1;
- (void)takeAsVideoComplement:(id)a0;
- (id)thumbnailForSize:(unsigned long long)a0 atEnd:(id /* block */)a1;
- (id)thumbnailForSize:(unsigned long long)a0 priority:(unsigned char)a1 atEnd:(id /* block */)a2;
- (void)thumbnailUsingRequest:(id)a0 atEnd:(id /* block */)a1;
- (void)updateIsRAW:(char)a0 contentType:(id)a1;
- (id)userMetadata;
- (id)validateMetadataForImportRecord:(id)a0;
- (id)xmpSidecar;

@end
