@interface HDRImageConverter : NSObject

+ (id)computeToneMappingCurveFromLumaGainHistogram:(const struct { unsigned int x0[32][32]; } *)a0;
+ (struct __CFUUID { } *)createUUIDFromLumaGainHistogram:(const struct { unsigned int x0[32][32]; } *)a0;
+ (id)flexGTCTableDataFromCurveArray:(id)a0 min:(float)a1 max:(float)a2;
+ (id)imageConverterWithOptions:(id)a0;

- (char)canProcessPixelBufferWithAttributes:(id)a0;
- (char)computeLumaGainHistogram:(SEL)a0 scale:(struct { unsigned int x0[32][32]; } *)a1 image:(struct __CVBuffer { } *)a2 transform:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x2; } x1; } *)a3 gainMap:(struct __CVBuffer { } *)a4 transform:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { } x1; } x0; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x1; } x1; } *)a5;
- (char)convertImage:(id)a0 toImage:(id)a1;
- (char)convertImage:(struct __CVBuffer { } *)a0 transform:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x2; } x1; } *)a1 alternate:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x2; } x1; } *)a2 gainMap:(struct __CVBuffer { } *)a3 transform:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { } x1; } x0; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x1; } x1; } *)a4 alternate:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { } x1; } x0; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x1; } x1; } *)a5 toImage:(struct __CVBuffer { } *)a6 transform:(const struct { struct { struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x2; } x0; struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; } x1; } *)a7 gainMap:(struct __CVBuffer { } *)a8 transform:(const struct { struct { struct { int x0; struct { } x1; } x0; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x1; BOOL x2; } x0; struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; } x1; } *)a9;
- (char)convertImage:(struct __CVBuffer { } *)a0 transform:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x2; } x1; } *)a1 alternate:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x2; } x1; } *)a2 toImage:(struct __CVBuffer { } *)a3 transform:(const struct { struct { struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x2; } x0; struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; } x1; } *)a4 gainMap:(struct __CVBuffer { } *)a5 transform:(const struct { struct { struct { int x0; struct { } x1; } x0; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x1; BOOL x2; } x0; struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; } x1; } *)a6;
- (char)convertImage:(struct __CVBuffer { } *)a0 transform:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x2; } x1; } *)a1 gainMap:(struct __CVBuffer { } *)a2 transform:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { } x1; } x0; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x1; } x1; } *)a3 toImage:(struct __CVBuffer { } *)a4 transform:(const struct { struct { struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x2; } x0; struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; } x1; } *)a5;
- (char)convertImage:(struct __CVBuffer { } *)a0 transform:(const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x2; } x1; } *)a1 toImage:(struct __CVBuffer { } *)a2 transform:(const struct { struct { struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x2; } x0; struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; } x1; } *)a3;
- (id)generateToneMappingCurveForImage:(id)a0 targetHeadroom:(double)a1;
- (char)isPixelFormatSupported:(unsigned int)a0;
- (char)isYCCMatrixSupported:(id)a0;

@end
