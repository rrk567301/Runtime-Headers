@interface HDRInputTransform : HDRTransform {
    struct { unsigned int flags; struct { struct { int type; struct { void /* unknown type, empty encoding */ scale; void /* unknown type, empty encoding */ offset; } range; struct { void /* unknown type, empty encoding */ columns[3]; } yccMatrix; struct { void /* unknown type, empty encoding */ columns[3]; } affineTransform; } pixel; struct { struct { int type; struct { float a; float b; float c; float d; float e; float f; float g; float gamma; void /* unknown type, empty encoding */ luma; } params; void *lut; } trc; struct { int type; struct { float a; float b; float c; float d; float e; float f; float g; float gamma; void /* unknown type, empty encoding */ luma; } params; void *lut; struct { struct { void /* unknown type, empty encoding */ columns[3]; } matrix; BOOL identity; } mat; struct { int type; struct { float a; float b; float c; float d; float e; float f; float g; float gamma; void /* unknown type, empty encoding */ luma; } params; void *lut; } trc; } tm; struct { struct { void /* unknown type, empty encoding */ columns[3]; } matrix; BOOL identity; } rgb; } color; } image; struct { struct { int type; struct { void /* unknown type, empty encoding */ scale; void /* unknown type, empty encoding */ offset; } range; struct { void /* unknown type, empty encoding */ columns[3]; } yccMatrix; struct { void /* unknown type, empty encoding */ columns[3]; } affineTransform; } pixel; struct { struct { int type; struct { void /* unknown type, empty encoding */ gamma; void /* unknown type, empty encoding */ a; void /* unknown type, empty encoding */ b; void /* unknown type, empty encoding */ c; void /* unknown type, empty encoding */ d; void /* unknown type, empty encoding */ scale; } params; } gm; struct { struct { void /* unknown type, empty encoding */ columns[3]; } matrix; BOOL identity; } color; } gain; } gainMap; } t;
}

@property (readonly, nonatomic) struct { unsigned int x0; struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x2; } x1; } x1; struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { } x1; } x0; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x1; } x1; } x2; } *storage;
@property (readonly, nonatomic) const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x0; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x3; struct { int x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; void *x2; } x4; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x2; } x1; } *image;
@property (readonly, nonatomic) const struct { struct { int x0; struct { } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct { void /* unknown type, empty encoding */ x0[3]; } x3; } x0; struct { struct { int x0; struct { } x1; } x0; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; } x1; } x1; } *gainMap;

- (void)dealloc;
- (id)description;
- (unsigned int)flags;

@end
