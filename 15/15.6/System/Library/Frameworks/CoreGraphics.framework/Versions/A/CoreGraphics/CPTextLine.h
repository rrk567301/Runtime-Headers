@class NSArray, CPCharSequence;

@interface CPTextLine : CPTextObject <CPDisposable> {
    CPCharSequence *charSequence;
    struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *wordArray;
    unsigned int wordCount;
    struct CPInlineContainer { unsigned int x0; id x1; struct CPInlineContainer *x2; } *inlineList;
    int lineNumber;
    int columnNumber;
    double baseline;
    char baseLineIsNull;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } normalizedBounds;
    char hasBeenSplit;
    char hasBeenProcessed;
    char maySplit;
    char hasTabs;
    NSArray *columnBreaks;
    NSArray *xsegments;
    int levels;
    float maximumLetterGap;
    float maximumWordGap;
    int tabsBefore;
    char irregular;
    struct CPPDFStyle { struct CGColor *x0; struct CGColorSpace *x1; struct CGColor *x2; struct CGColorSpace *x3; double x4; double x5; unsigned char x6; unsigned char x7; int x8; double x9; id x10; double x11; struct CGPDFObject *x12; struct CGPDFObject *x13; struct CGColor *x14; struct CPPDFStyle *x15; } *uniformStyle;
    unsigned short uniformStyleFlags;
    double monospaceWidth;
    unsigned int *spacesBefore;
    char disposed;
}

@property (nonatomic) unsigned int leftSpacerIndex;
@property (nonatomic) unsigned int rightSpacerIndex;
@property (nonatomic) char isListItem;
@property (nonatomic) unsigned int listSpacerIndex;
@property (nonatomic) char lineBreakAfter;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)finalize;
- (id)init;
- (id)attributes;
- (void)dispose;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (id)properties;
- (unsigned int)wordCount;
- (void)recomputeLevels;
- (void)accept:(id)a0;
- (char)hasTabs;
- (int)align;
- (struct CGPoint { double x0; double x1; })anchor;
- (void)anchorChunk:(id)a0 atWordIndex:(unsigned int)a1;
- (long long)baseLineAscending:(id)a0;
- (long long)baseLineDescending:(id)a0;
- (long long)baseLineDescendingApprox:(id)a0;
- (double)baseline;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsOfWordAtIndex:(unsigned int)a0;
- (char)changesFontAt:(id)a0;
- (id)charSequence;
- (id)columnBreaks;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)firstWord;
- (void)fitBoundsToChildren;
- (char)hasBeenProcessed;
- (char)hasBeenSplit;
- (char)hasDropCap;
- (char)hasJustifiedAlignment;
- (char)hyphenated;
- (unsigned int)inlineCount;
- (struct CPInlineContainer { unsigned int x0; id x1; struct CPInlineContainer *x2; } *)inlineList;
- (char)irregular;
- (char)isIndivisible;
- (char)isMonospaced;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)lastWord;
- (int)levels;
- (char)mapToWordPairs:(void /* function */ *)a0 passing:(void *)a1;
- (char)mapToWordPairsWithIndex:(void /* function */ *)a0 passing:(void *)a1;
- (char)mapToWords:(void /* function */ *)a0 passing:(void *)a1;
- (char)mapToWordsWithIndex:(void /* function */ *)a0 passing:(void *)a1;
- (float)maximumLetterGap;
- (float)maximumWordGap;
- (double)medianFontSize;
- (double)monospaceWidth;
- (id)newTextLineFromWordAt:(unsigned int)a0 lengthInWords:(unsigned int)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })normalizedBounds;
- (char)overlapsHorizontally:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)overlapsWith:(id)a0;
- (void)recomputeBaseline;
- (char)removeTextLines:(id)a0 whereTrue:(void /* function */ *)a1 passing:(void *)a2;
- (double)rotationAngle;
- (void)setBaseline:(double)a0;
- (void)setBaselineToNull;
- (void)setCharSequence:(id)a0;
- (void)setColumnBreaks:(id)a0;
- (void)setHasBeenProcessed:(char)a0;
- (void)setHasBeenSplit:(char)a0;
- (void)setHasTabs:(char)a0;
- (void)setIrregular:(char)a0;
- (void)setLevels:(int)a0;
- (void)setMaximumLetterGap:(float)a0;
- (void)setMaximumWordGap:(float)a0;
- (void)setSpaces:(unsigned int)a0 beforeWordAtIndex:(unsigned int)a1;
- (void)setTabsBefore:(int)a0;
- (unsigned int)spacesBeforeWordAtIndex:(unsigned int)a0;
- (char)styleIsUniform:(struct CPPDFStyle **)a0 styleFlags:(unsigned short)a1;
- (int)tabsBefore;
- (long long)topIsAbove:(id)a0;
- (void)translateObjectYBy:(double)a0;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)wordArray;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)wordArrayOfSize:(unsigned int)a0;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)wordAtIndex:(unsigned int)a0;
- (long long)zOrder;

@end
