@class NSString;

@interface NSNumber : NSValue <NSFetchRequestResult, RBSProcessIdentifier>

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) struct { unsigned char x0 : 8; unsigned char x1 : 4; unsigned char x2 : 1; unsigned char x3 : 1; unsigned int x4 : 18; unsigned short x5[8]; } decimalValue;
@property (readonly) char charValue;
@property (readonly) unsigned char unsignedCharValue;
@property (readonly) short shortValue;
@property (readonly) unsigned short unsignedShortValue;
@property (readonly) int intValue;
@property (readonly) unsigned int unsignedIntValue;
@property (readonly) long long longValue;
@property (readonly) unsigned long long unsignedLongValue;
@property (readonly) long long longLongValue;
@property (readonly) unsigned long long unsignedLongLongValue;
@property (readonly) float floatValue;
@property (readonly) double doubleValue;
@property (readonly) char boolValue;
@property (readonly) long long integerValue;
@property (readonly) unsigned long long unsignedIntegerValue;
@property (readonly, copy) NSString *stringValue;

+ (id)allocWithZone:(struct _NSZone { } *)a0;
+ (void)initialize;
+ (id)numberWithBool:(char)a0;
+ (id)numberWithDouble:(double)a0;
+ (id)numberWithLongLong:(long long)a0;
+ (id)numberWithUnsignedChar:(unsigned char)a0;
+ (char)supportsSecureCoding;
+ (id)numberWithLong:(long long)a0;
+ (id)numberWithFloat:(float)a0;
+ (id)numberWithInt:(int)a0;
+ (id)numberWithUnsignedInt:(unsigned int)a0;
+ (id)numberWithUnsignedInteger:(unsigned long long)a0;
+ (id)numberWithUnsignedLong:(unsigned long long)a0;
+ (id)numberWithUnsignedLongLong:(unsigned long long)a0;
+ (id)numberWithUnsignedShort:(unsigned short)a0;
+ (id)numberWithInteger:(long long)a0;
+ (id)numberWithShort:(short)a0;
+ (id)_scriptingNumberWithDescriptor:(id)a0;
+ (id)numberWithChar:(char)a0;
+ (id)_scriptingBooleanWithDescriptor:(id)a0;
+ (id)_scriptingIntegerWithDescriptor:(id)a0;
+ (id)_scriptingRealWithDescriptor:(id)a0;
+ (id)_scriptingTypeWithDescriptor:(id)a0;

- (double)bs_CGFloatValue;
- (char)matchesProcess:(id)a0;
- (int)rbs_pid;
- (id)processPredicate;
- (id)CA_interpolateValue:(id)a0 byFraction:(float)a1;
- (id)CA_addValue:(id)a0 multipliedBy:(int)a1;
- (struct Object { void /* function */ **x0; struct Atomic { struct { int x0; } x0; } x1; unsigned char x2 : 8; unsigned int x3 : 24; } *)CA_copyRenderValue;
- (double)CA_distanceToValue:(id)a0;
- (unsigned long long)CA_copyNumericValue:(double *)a0;
- (unsigned long long)CA_numericValueCount;
- (id)CA_roundToIntegerFromValue:(id)a0;
- (id)CAMLType;
- (id)CA_interpolateValues:(id)a0 :(id)a1 :(id)a2 interpolator:(const struct ValueInterpolator { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; BOOL x14; } *)a3;
- (void)encodeWithCAMLWriter:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (char)isEqual:(id)a0;
- (id)initWithDouble:(double)a0;
- (id)initWithChar:(char)a0;
- (id)initWithInt:(int)a0;
- (id)initWithLong:(long long)a0;
- (id)initWithLongLong:(long long)a0;
- (id)initWithShort:(short)a0;
- (id)initWithUnsignedChar:(unsigned char)a0;
- (id)initWithUnsignedInt:(unsigned int)a0;
- (id)initWithUnsignedLongLong:(unsigned long long)a0;
- (id)initWithUnsignedShort:(unsigned short)a0;
- (char)isNSNumber__;
- (long long)_cfNumberType;
- (unsigned long long)_cfTypeID;
- (BOOL)_getCString:(char *)a0 length:(int)a1 multiplier:(double)a2;
- (unsigned char)_getValue:(void *)a0 forType:(long long)a1;
- (long long)_reverseCompare:(id)a0;
- (Class)classForCoder;
- (long long)compare:(id)a0;
- (id)descriptionWithLocale:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (char)isEqualToNumber:(id)a0;
- (id)redactedDescription;
- (char)_allowsDirectEncoding;
- (int)_scriptingAlternativeValueRankWithDescriptor:(id)a0;
- (id)_scriptingBooleanDescriptor;
- (id)_scriptingIntegerDescriptor;
- (id)_scriptingNumberDescriptor;
- (id)_scriptingRealDescriptor;
- (id)_scriptingTypeDescriptor;
- (id)initWithBool:(char)a0;
- (id)initWithFloat:(float)a0;
- (id)initWithInteger:(long long)a0;
- (id)initWithUnsignedInteger:(unsigned long long)a0;
- (id)initWithUnsignedLong:(unsigned long long)a0;

@end
