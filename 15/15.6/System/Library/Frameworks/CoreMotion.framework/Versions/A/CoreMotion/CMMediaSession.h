@class CMMotionActivityManager, NSString, CMHeadphoneActivityManager, NSOperationQueue, NSObject, CMDistributedSensingManager, CMMotionContextSession, NSUserDefaults;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface CMMediaSession : NSObject <CMDistributedSensingDelegate> {
    struct unique_ptr<CMHeadTrackingService, std::default_delete<CMHeadTrackingService>> { struct __compressed_pair<CMHeadTrackingService *, std::default_delete<CMHeadTrackingService>> { struct CMHeadTrackingService *__value_; } __ptr_; } _headTrackingService;
    struct Dispatcher { void /* function */ **x0; id x1; } *_deviceMotionDispatcher;
    struct Dispatcher { void /* function */ **x0; id x1; } *_accessoryDeviceMotionDispatcher;
    struct Dispatcher { void /* function */ **x0; id x1; } *_accessoryDeviceMotionConfigDispatcher;
    struct Dispatcher { void /* function */ **x0; id x1; } *_accessoryDeviceMotionInEarStatusDispatcher;
    struct Dispatcher { void /* function */ **x0; id x1; } *_accessoryMonitorDispatcher;
    NSObject<OS_dispatch_queue> *_clientQueue;
    id /* block */ _clientHandler;
    BOOL _started;
    int _clientMode;
    int _scheme;
    struct CMOQuaternion { float elements[4]; } _q_bf;
    BOOL _useHeadToHeadsetTransformationEstimator;
    BOOL _disable2IMU;
    double _lidAngle;
    int _displayCount;
    int _maxDisplayCount;
    int _schemePrev;
    BOOL _simulateCameraOnOffRequest;
    BOOL _simulatePeriodicCameraBurst;
    BOOL _hasUserDefaultTrackingScheme;
    BOOL _bypassCameraController;
    BOOL _bypassWalkingAwayDistractedViewing;
    struct UnTimesyncedAuxSampleHelper { unsigned int totalUnsyncedSamples; unsigned int totalUnsyncedOutlierSamples; double auxAndSrcSensorTimeOffset; struct CMFixedSizeQueue<double, 10UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[8]; struct CMQueueStorage<double, 10UL> { char buffer[72]; } fStorage; } auxAndSrcSensorTimeOffsetBuffer; } _unsyncedAuxHelper;
    struct unique_ptr<CMMediaSessionAnalyticsTracker, std::default_delete<CMMediaSessionAnalyticsTracker>> { struct __compressed_pair<CMMediaSessionAnalyticsTracker *, std::default_delete<CMMediaSessionAnalyticsTracker>> { struct CMMediaSessionAnalyticsTracker *__value_; } __ptr_; } _analyticsTracker;
    int _previousBTZState;
    double _lastInBTZTime;
    int _previousMotionActivityType;
    int _previousHeadphoneMotionActivityType;
    double _lastAccessoryDMTime;
    int _previousTracking1IMU;
    BOOL _previousCTState;
    BOOL _previousCTBodyTurnState;
    BOOL _previousHeadTurnState;
    double _lastExitCTTime;
    float _lastAngleBetweenCurrentBoresightToDefault;
    BOOL _previousTrackingEnabled;
    double _lastDistractedViewingStartTime;
    double _lastDistractedViewingEndTime;
    BOOL _previousSrcMoving;
    BOOL _previousAuxMoving;
    BOOL _previousSteadyStatePedestrian;
    BOOL _previousKeepBoresightCentered;
    int _lastTrackingDisableRoute;
    struct CAFwdPredictorError { unsigned long long timestamp; float errorRad; } _lastCAFwdPredictorError;
    int _analyticsClientMode;
    struct AudioAccessorySample { struct { struct CMOQuaternion { float elements[4]; } quaternion; struct CMVector<float, 3UL> { float elements[3]; } rotationRate; struct CMVector<float, 3UL> { float elements[3]; } biasCovariance; struct CMVector<float, 3UL> { float elements[3]; } userAcceleration; struct Status { unsigned short bits; } status; } auxDM; unsigned long long sensorTime; double timestamp; double arrivalTimestamp; struct CMVector<float, 3UL> { float elements[3]; } filteredAcceleration; float quiescentNoise; int quiescentMode; unsigned int sequenceNumber; int sensorLocation; int timeSyncStatus; unsigned long long btcTimestamp; double sampleLatency; float gyroBias[3]; BOOL isGyroBiasValid; unsigned char activity; BOOL isActivityValid; BOOL isInEar; } _lastAudioAccessorySample;
    unsigned long long _lastAccessoryTimestamp;
    unsigned long long _lastSourceTimestampMicroSeconds;
    unsigned long long _lastStateTimestamp;
    unsigned long long _lastPresentationTimestamp;
    double _lastListenerOrientationGenerationTimestampSeconds;
    char _trackingEstimatesStagnated;
    char _logForReplay;
    double _printPoseTimer;
    char _enableJBLThreshold;
    char _verboseLogging;
    double _accessorySampleTimer;
    int _accessorySamplesPerSecond;
    CMMotionActivityManager *_activityManager;
    NSOperationQueue *_activityQueue;
    CMHeadphoneActivityManager *_headphoneActivityManager;
    NSOperationQueue *_headphoneActivityQueue;
    CMDistributedSensingManager *_vehicleStateManager;
    struct unique_ptr<CLSettings, std::default_delete<CLSettings>> { struct __compressed_pair<CLSettings *, std::default_delete<CLSettings>> { struct CLSettings *__value_; } __ptr_; } _motionSettings;
    NSUserDefaults *_motionDefaults;
    double _minQuiescentPeriodForBTZ;
    int _notify50HzPoseDecimator;
    unsigned long long _lastFacePoseTimestampUs;
    unsigned long long _anchorUpdateIntervalUs;
    float _cameraControllerPeriodicBurstPulseWidthSeconds;
    float _cameraControllerPeriodicBurstTotalWidthSeconds;
    float _correspondenceThresholdDegrees;
    NSObject<OS_dispatch_source> *_emulatedSourceDMTimer;
    NSObject<OS_dispatch_queue> *_emulatedSourceDMTimerQueue;
    double _sessionStartTime;
    double _firstAccessoryDMTime;
    double _firstValidPoseTime;
    double _lastTimesyncLostTime;
    struct unique_ptr<CMSpatialLogger, std::default_delete<CMSpatialLogger>> { struct __compressed_pair<CMSpatialLogger *, std::default_delete<CMSpatialLogger>> { struct CMSpatialLogger *__value_; } __ptr_; } _logger;
    int _inEarStatus;
    char _inEarStatusGatingEnabled;
    int _jitterBufferLevelNotificationToken;
    NSObject<OS_dispatch_source> *_jitterBufferLevelInitialUpdateTimer;
    unsigned short _jitterBufferLevel;
    unsigned short _jitterBufferLevelThreshold;
    char _sitStandDetectorEnabled;
    BOOL _userSettingFwdPredictorEnabled;
    float _renderingOverheadSeconds;
    char _motionContextSessonEnabled;
    char _humanMotionLearningModelEnabled;
    CMMotionContextSession *_mcSession;
    BOOL _userSettingBypassAmbienceBedForE2ELatencyTesting;
    struct CMOQuaternion { float elements[4]; } _cameraToSourceAlignment;
    struct CMVector<float, 3UL> { float elements[3]; } _offsetFromDisplayCenterToFrontCameraInSourceFrameMeters;
    unsigned long long _lastRequestingCameraTimestampUs;
    unsigned long long _lastResetCamControllerTimersTimestampUs;
    unsigned long long _firstFacePoseInCameraRequestTimestampUs;
}

@property (class, readonly, nonatomic) double defaultFaceToDevicePitchAngle;

@property unsigned int accessoryIMUSampleRate;
@property float prevAmbienceBedRoll;
@property BOOL returnDefaultPose;
@property BOOL returnRandomPose;
@property BOOL alwaysNotify50HzPose;
@property (copy) NSString *mcLogPath;
@property (nonatomic, getter=isRequestingCameraOn) char requestingCameraOn;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (char)_isAvailable;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id).cxx_construct;
- (id)_initWithOptions:(id)a0;
- (void)_reset;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (char)_start;
- (void)_stop;
- (void)_logEvent:(id)a0;
- (void)_startDefaultsPreferenceUpdater;
- (void)_updateMinQuiescentPeriodForBTZ;
- (int)_createPoseFromListenerOrientation:(const struct ListenerOrientation { struct CMOQuaternion { float x0[4]; } x0; struct CMOQuaternion { float x0[4]; } x1; unsigned long long x2; unsigned long long x3; BOOL x4; BOOL x5; } *)a0 Pose:(id *)a1;
- (void)_disableLoggingForReplay;
- (char)_disallowOpportunisticAnchorTrackingForFTClients:(int)a0 clientMode:(int)a1;
- (void)_emulatedSourceDMUpdate;
- (void)_enableLoggingForReplayWithFilenamePrefix:(id)a0 filePath:(id)a1;
- (void)_feedAccessoryConfig:(const void *)a0;
- (void)_feedAccessoryDeviceMotion:(const void *)a0;
- (void)_feedAccessoryInEarStatus:(const int *)a0;
- (void)_feedActiveAudioRouteChangedEvent;
- (void)_feedAdaptiveLatencyJitterBufferLevel;
- (void)_feedDisplayCount:(unsigned int)a0;
- (void)_feedFaceKitData:(id)a0 timestamp:(double)a1;
- (void)_feedLidAngle:(double)a0;
- (void)_feedPoseAnchor:(const struct Sample { double x0; struct { double x0; int x1; int x2; struct { double x0; double x1; double x2; double x3; } x3; struct { float x0; float x1; float x2; } x4; float x5; float x6; float x7; float x8; float x9; unsigned int x10; struct { float x0; float x1; float x2; } x11; struct { float x0; float x1; float x2; } x12; struct { float x0; float x1; float x2; } x13; float x14; unsigned int x15; int x16; float x17; int x18; } x1; } *)a0 facePoseError:(struct { float x0; BOOL x1; BOOL x2; int x3; double x4; } *)a1 lidAngleDeg:(float)a2;
- (void)_feedPredictorEstimates;
- (void)_feedScreenUnlockedEvent:(char)a0;
- (void)_feedSourceDeviceIMU:(const struct Sample { double x0; struct { struct { double x0; double x1; double x2; double x3; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; struct { float x0; float x1; float x2; } x3; int x4; BOOL x5; BOOL x6; BOOL x7; float x8; BOOL x9; BOOL x10; int x11; } x1; struct { float x0; struct { float x0; float x1; float x2; } x1; } x2; BOOL x3; unsigned int x4; unsigned char x5; struct Status { unsigned short x0; } x6; float x7; } *)a0;
- (unsigned long long)_getAuxSampleTimestamp:(const void *)a0 currentTime:(double)a1;
- (struct AudioAccessorySample { struct { struct CMOQuaternion { float x0[4]; } x0; struct CMVector<float, 3UL> { float x0[3]; } x1; struct CMVector<float, 3UL> { float x0[3]; } x2; struct CMVector<float, 3UL> { float x0[3]; } x3; struct Status { unsigned short x0; } x4; } x0; unsigned long long x1; double x2; double x3; struct CMVector<float, 3UL> { float x0[3]; } x4; float x5; int x6; unsigned int x7; int x8; int x9; unsigned long long x10; double x11; float x12[3]; BOOL x13; unsigned char x14; BOOL x15; BOOL x16; })_getLastAudioAccessorySample;
- (int)_mapCMMediaSessionClientModeToRelDMClientMode:(long long)a0;
- (void)_notifyClientHandler;
- (void)_readFrontCameraToDisplayCenterOffset;
- (void)_setFixedTransforms:(const struct CMOQuaternion { float x0[4]; } *)a0;
- (void)_setTrackingSchemeInternal:(int)a0;
- (void)_startHeadTracking;
- (void)_startJitterBufferLevelMonitor;
- (void)_startJitterBufferLevelRetryTimer;
- (char)_startPoseUpdatesToQueue:(id)a0 andHandler:(id /* block */)a1;
- (void)_startSourceDMTimer;
- (void)_stopDefaultsPreferenceUpdater;
- (void)_stopHeadTracking;
- (void)_stopJitterBufferLevelMonitor;
- (void)_stopJitterBufferLevelRetryTimer;
- (void)_stopSourceDMTimer;
- (void)_triggerUserInteractedWithDeviceEvent;
- (void)_updateAnchorIntervalSettings;
- (void)_updateCameraControllerParameters;
- (void)_updateClientMode:(long long)a0;
- (void)_updateTrackingScheme:(long long)a0;
- (void)_updateTrackingSchemeSettings;
- (void)_updateUseFwdPredictionUserSettings;
- (void)_updateUseHeadToHeadsetTransformationEstimator;
- (void)_updateUserSettings;
- (void)distributedSensingManager:(id)a0 didFailToSubscribeToVehicleState:(id)a1;
- (void)distributedSensingManager:(id)a0 didUpdateVehicleState:(id)a1;
- (void)feedPoseAnchorWithAttitude:(struct { double x0; double x1; double x2; double x3; })a0 position:(struct CMVector<float, 3UL> { float x0[3]; })a1 lidAngleDeg:(float)a2 numberOfDetectedFaces:(int)a3 timestampUs:(unsigned long long)a4;

@end
