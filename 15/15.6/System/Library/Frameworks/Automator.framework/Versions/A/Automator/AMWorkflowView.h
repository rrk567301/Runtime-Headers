@class AMHeaderViewController, NSString, NSArray, NSUndoManager, AMWorkflowController, NSMutableArray, AMVariablesEditorWindowController;

@interface AMWorkflowView : NSView <AMWorkflowControllerDelegate> {
    id _unused;
    id _variablesEditorController;
    id _showWhenRunController;
    id _future[4];
}

@property (copy) NSString *messageString;
@property unsigned long long draggingIndex;
@property struct __AMWorkflowViewFlags { unsigned char ignoreSubviewFrameChanges : 1; unsigned char editingEnabled : 1; unsigned int reserved : 30; } flags;
@property struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } selectionRect;
@property (retain) NSArray *draggedActionViews;
@property (retain) NSMutableArray *actionViewControllers;
@property (readonly, nonatomic) AMVariablesEditorWindowController *variablesEditorController;
@property (readonly, nonatomic) NSMutableArray *actionViews;
@property (readonly, nonatomic) char _isEditable;
@property (readonly, nonatomic) NSArray *selectedActionViews;
@property (readonly, nonatomic) NSArray *_visibleActionViews;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } actionViewsFrame;
@property (readonly, nonatomic) NSUndoManager *_undoManager;
@property (readonly, nonatomic) AMHeaderViewController *_headerViewController;
@property (weak, nonatomic, setter=_setWorkflowController:) AMWorkflowController *_workflowController;
@property (getter=isEditable) char editable;
@property (weak, nonatomic) AMWorkflowController *workflowController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (void).cxx_destruct;
- (void)reset:(id)a0;
- (id)actions;
- (void)draggingExited:(id)a0;
- (void)encodeRestorableStateWithCoder:(id)a0;
- (void)_close;
- (char)acceptsFirstResponder;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (char)accessibilityIsAttributeSettable:(id)a0;
- (char)accessibilityIsIgnored;
- (void)addAction:(id)a0;
- (void)awakeFromNib;
- (void)concludeDragOperation:(id)a0;
- (void)copy:(id)a0;
- (void)cut:(id)a0;
- (void)deselectAll:(id)a0;
- (void)draggingEnded:(id)a0;
- (unsigned long long)draggingEntered:(id)a0;
- (unsigned long long)draggingUpdated:(id)a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)isFlipped;
- (void)keyDown:(id)a0;
- (void)mouseDown:(id)a0;
- (void)paste:(id)a0;
- (char)performDragOperation:(id)a0;
- (char)prepareForDragOperation:(id)a0;
- (char)requiresConstraintBasedLayout;
- (void)restoreStateWithCoder:(id)a0;
- (void)selectAll:(id)a0;
- (void)updateConstraints;
- (char)validateMenuItem:(id)a0;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (void)modified;
- (void)addActions:(id)a0;
- (void)removeAction:(id)a0;
- (id)pasteboardTypes;
- (void)deleteAll:(id)a0;
- (void)_addAction:(id)a0;
- (id)connectors;
- (void)addActionsInPasteboard:(id)a0 atIndex:(unsigned long long)a1;
- (void)dragViewStarted;
- (void)scrollToAction:(id)a0;
- (void)actionViewDidChangeConnections:(id)a0;
- (unsigned long long)indexOfSubview:(id)a0;
- (id)subviewAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)_actionConstraints;
- (void)_clearHeaderView;
- (void)_selectActionView:(id)a0;
- (void)_setActionConstraints:(id)a0;
- (void)_setHeaderViewController:(id)a0;
- (void)_uniqueSelectActionView:(id)a0;
- (void)_updateHeaderView;
- (void)actionViewDidChangeInput:(id)a0;
- (void)actionViewDidChangeOutput:(id)a0;
- (void)actionViewWasModified:(id)a0;
- (void)actionViewWasRenamed:(id)a0;
- (id)addActionWithBundleID:(id)a0 atIndex:(unsigned long long)a1 withParameters:(id)a2;
- (void)addActionWithoutOpening:(id)a0;
- (void)addActionsFromDescriptions:(id)a0 atIndex:(unsigned long long)a1;
- (void)addHeaderView:(id)a0;
- (void)addVariablesInPasteboard:(id)a0 atIndex:(unsigned long long)a1 draggingInfo:(id)a2;
- (void)closeDetailsWindow;
- (void)collapseAll:(id)a0;
- (char)copyActions:(id)a0 withPasteboard:(id)a1;
- (void)deleteActionView:(id)a0;
- (void)deleteActionViews:(id)a0;
- (void)deselectActionView:(id)a0;
- (void)disableActionView:(id)a0;
- (void)disableActionViews:(id)a0;
- (unsigned long long)dragOperationForDraggingInfo:(id)a0;
- (void)dragSelectWithEvent:(id)a0;
- (void)duplicateActionView:(id)a0;
- (void)duplicateActionViews:(id)a0;
- (void)editVariable:(id)a0;
- (void)editVariable:(id)a0 withControl:(id)a1;
- (void)enableActionView:(id)a0;
- (void)enableActionViews:(id)a0;
- (void)expandAll:(id)a0;
- (void)extendSelectionToActionView:(id)a0;
- (void)invalidateActionLayout;
- (void)invalidateActionView:(id)a0;
- (void)loadWorkflow:(id)a0;
- (char)makeActionViewFirstResponderIfPossible:(id)a0;
- (void)moveActionAtIndex:(unsigned long long)a0 toIndex:(unsigned long long)a1;
- (void)moveActionViewDown:(id)a0;
- (void)moveActionViewUp:(id)a0;
- (void)moveActionViewsDown:(id)a0;
- (void)moveActionViewsUp:(id)a0;
- (id)objectsIntersectingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)pasteWithPasteboard:(id)a0;
- (void)redisplayAction:(id)a0;
- (void)releaseActionView:(id)a0;
- (void)removeActionView:(id)a0;
- (void)removeHeaderView:(id)a0;
- (void)renameActionView:(id)a0;
- (void)selectActionView:(id)a0 byExtendingSelection:(char)a1;
- (void)selectActionViews:(id)a0;
- (void)selectAllToAction:(id)a0;
- (void)selectNextActionAfterIndex:(unsigned long long)a0;
- (void)showActionViewInFinder:(id)a0;
- (void)showActionViewInLibrary:(id)a0;
- (void)toggleActionViewInputIgnored:(id)a0;
- (void)toggleActionViewsEnabled:(id)a0;
- (void)toggleActionViewsResults:(id)a0;
- (id)viewForAction:(id)a0;
- (void)workflowController:(id)a0 didError:(id)a1;
- (void)workflowController:(id)a0 didRunAction:(id)a1;
- (void)workflowController:(id)a0 willRunAction:(id)a1;
- (void)workflowControllerDidStop:(id)a0;
- (void)workflowControllerWillRun:(id)a0;
- (void)workflowControllerWillStep:(id)a0;

@end
