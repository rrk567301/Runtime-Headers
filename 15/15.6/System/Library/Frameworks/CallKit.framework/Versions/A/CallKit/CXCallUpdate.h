@class NSUUID, NSString, CXSandboxExtendedURL, CXAccount, NSSet, NSMutableDictionary, NSDictionary, CXHandle, CXParticipant, CXHandoffContext, CXCallTokens, CXScreenShareAttributes;

@interface CXCallUpdate : NSObject <CXCopying, NSSecureCoding, NSCopying>

@property (class, readonly) char supportsSecureCoding;

@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } accessorLock;
@property (nonatomic) struct CXCallUpdateHasSet { unsigned char account : 1; unsigned char activeRemoteParticipant : 1; unsigned char remoteHandle : 1; unsigned char localizedCallerName : 1; unsigned char localizedCallerImageURL : 1; unsigned char emergency : 1; unsigned char failureExpected : 1; unsigned char supportsEmergencyFallback : 1; unsigned char usingBaseband : 1; unsigned char blocked : 1; unsigned char ttyType : 1; unsigned char supportsTTYWithVoice : 1; unsigned char mayRequireBreakBeforeMake : 1; unsigned char hasVideo : 1; unsigned char audioCategory : 1; unsigned char audioMode : 1; unsigned char audioInterruptionProvider : 1; unsigned char audioInterruptionOperationMode : 1; unsigned char verificationStatus : 1; unsigned char priority : 1; unsigned char requiresInCallSounds : 1; unsigned char inCallSoundRegion : 1; unsigned char supportsHolding : 1; unsigned char supportsGrouping : 1; unsigned char supportsUngrouping : 1; unsigned char supportsDTMF : 1; unsigned char supportsDTMFUpdates : 1; unsigned char supportsUnambiguousMultiPartyState : 1; unsigned char supportsAddCall : 1; unsigned char supportsSendingToVoicemail : 1; unsigned char videoStreamToken : 1; unsigned char callTokens : 1; unsigned char initiator : 1; unsigned char crossDeviceIdentifier : 1; unsigned char ISOCountryCode : 1; unsigned char localSenderIdentityUUID : 1; unsigned char localSenderIdentityAccountUUID : 1; unsigned char localMemberHandleValue : 1; unsigned char localSenderSubscriptionIdentifier : 1; unsigned char participantGroupUUID : 1; unsigned char remoteParticipantHandles : 1; unsigned char otherInvitedHandles : 1; unsigned char activeRemoteParticipantHandles : 1; unsigned char handoffContext : 1; unsigned char screenShareAttributes : 1; unsigned char context : 1; unsigned char prefersExclusiveAccessToCellularNetwork : 1; unsigned char remoteUplinkMuted : 1; unsigned char shouldSuppressInCallUI : 1; unsigned char requiresAuthentication : 1; unsigned char mutuallyExclusiveCall : 1; unsigned char junkConfidence : 1; unsigned char identificationCategory : 1; unsigned char conversation : 1; unsigned char mixesVoiceWithMedia : 1; unsigned char prefersToPlayDuringWombat : 1; unsigned char mediaPlaybackOnExternalDevice : 1; unsigned char oneToOneModeEnabled : 1; unsigned char sharingScreen : 1; unsigned char bluetoothAudioFormat : 1; unsigned char ignoresBluetoothDeviceUID : 1; unsigned char serviceStatus : 1; unsigned char transmissionMode : 1; unsigned char accessoryButtonEventsEnabled : 1; unsigned char sendingVideo : 1; unsigned char hasBeenRedirected : 1; unsigned char isKnownCaller : 1; unsigned char filteredOutReason : 1; unsigned char silencingUserInfo : 1; unsigned char isReRing : 1; unsigned char suppressRingtone : 1; unsigned char callSubType : 1; unsigned char supportsScreening : 1; unsigned char screenSharingIntention : 1; unsigned char screenSharingType : 1; } hasSet;
@property (retain, nonatomic) NSUUID *UUID;
@property (retain, nonatomic) CXParticipant *activeRemoteParticipant;
@property (nonatomic, getter=isBlocked) char blocked;
@property (nonatomic, getter=isEmergency) char emergency;
@property (nonatomic, getter=isFailureExpected) char failureExpected;
@property (nonatomic) char supportsEmergencyFallback;
@property (nonatomic, getter=isUsingBaseband) char usingBaseband;
@property (nonatomic) char mayRequireBreakBeforeMake;
@property (nonatomic, setter=setTTYType:) long long ttyType;
@property (nonatomic) char supportsTTYWithVoice;
@property (nonatomic) char requiresInCallSounds;
@property (nonatomic) long long inCallSoundRegion;
@property (copy, nonatomic) NSString *audioCategory;
@property (copy, nonatomic) NSString *audioMode;
@property (nonatomic) long long audioInterruptionProvider;
@property (nonatomic) long long audioInterruptionOperationMode;
@property (nonatomic) long long verificationStatus;
@property (nonatomic) long long priority;
@property (copy, nonatomic) NSString *crossDeviceIdentifier;
@property (retain, nonatomic) CXAccount *account;
@property (copy, nonatomic) NSString *ISOCountryCode;
@property (copy, nonatomic) NSUUID *localSenderIdentityUUID;
@property (copy, nonatomic) NSUUID *localSenderIdentityAccountUUID;
@property (copy, nonatomic) NSString *localSenderSubscriptionIdentifier;
@property (copy, nonatomic) NSString *localMemberHandleValue;
@property (copy, nonatomic) CXHandle *initiator;
@property (retain, nonatomic) NSUUID *participantGroupUUID;
@property (copy, nonatomic) NSSet *remoteParticipantHandles;
@property (copy, nonatomic) NSSet *otherInvitedHandles;
@property (copy, nonatomic) NSSet *activeRemoteParticipantHandles;
@property (retain, nonatomic) CXHandoffContext *handoffContext;
@property (retain, nonatomic) CXScreenShareAttributes *screenShareAttributes;
@property (copy, nonatomic) NSDictionary *context;
@property (nonatomic) char prefersExclusiveAccessToCellularNetwork;
@property (nonatomic, getter=isRemoteUplinkMuted) char remoteUplinkMuted;
@property (nonatomic) char shouldSuppressInCallUI;
@property (nonatomic, getter=isMutuallyExclusiveCall) char mutuallyExclusiveCall;
@property (nonatomic) long long junkConfidence;
@property (nonatomic) long long identificationCategory;
@property (nonatomic) char supportsUnambiguousMultiPartyState;
@property (nonatomic) char supportsAddCall;
@property (nonatomic) char supportsSendingToVoicemail;
@property (nonatomic) char isUnderlyingLinksConnected;
@property (nonatomic) char supportsScreening;
@property (nonatomic) long long screenSharingIntention;
@property (nonatomic) long long videoStreamToken;
@property (copy, nonatomic) CXCallTokens *callTokens;
@property (nonatomic) char requiresAuthentication;
@property (nonatomic, getter=isConversation) char conversation;
@property (nonatomic) char mixesVoiceWithMedia;
@property (nonatomic) char prefersToPlayDuringWombat;
@property (nonatomic) char mediaPlaybackOnExternalDevice;
@property (nonatomic) char ignoresBluetoothDeviceUID;
@property (nonatomic, getter=isSharingScreen) char sharingScreen;
@property (nonatomic, getter=isOneToOneModeEnabled) char oneToOneModeEnabled;
@property (nonatomic) long long bluetoothAudioFormat;
@property (nonatomic, getter=isSendingVideo) char sendingVideo;
@property (nonatomic) char hasBeenRedirected;
@property (nonatomic) char isReRing;
@property (nonatomic) char suppressRingtone;
@property (nonatomic) long long callSubType;
@property (nonatomic) char isKnownCaller;
@property (nonatomic) int filteredOutReason;
@property (retain, nonatomic) NSMutableDictionary *silencingUserInfo;
@property (nonatomic) long long screenSharingType;
@property (copy, nonatomic) CXSandboxExtendedURL *localizedCallerImageURL;
@property (nonatomic) long long serviceStatus;
@property (nonatomic) long long transmissionMode;
@property (nonatomic) char accessoryButtonEventsEnabled;
@property (nonatomic) char supportsDTMFUpdates;
@property (copy, nonatomic) CXHandle *remoteHandle;
@property (copy, nonatomic) NSString *localizedCallerName;
@property (nonatomic) char supportsHolding;
@property (nonatomic) char supportsGrouping;
@property (nonatomic) char supportsUngrouping;
@property (nonatomic) char supportsDTMF;
@property (nonatomic) char hasVideo;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)callUpdateWithDefaultValuesSet;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (char)conversation;
- (char)emergency;
- (char)blocked;
- (id)sanitizedCopy;
- (id)sanitizedCopyWithZone:(struct _NSZone { } *)a0;
- (char)failureExpected;
- (char)mutuallyExclusiveCall;
- (char)oneToOneModeEnabled;
- (char)remoteUplinkMuted;
- (char)sendingVideo;
- (char)sharingScreen;
- (void)updateCopy:(id)a0 withZone:(struct _NSZone { } *)a1;
- (void)updateSanitizedCopy:(id)a0 withZone:(struct _NSZone { } *)a1;
- (void)updateWithUpdate:(id)a0;
- (char)usingBaseband;

@end
