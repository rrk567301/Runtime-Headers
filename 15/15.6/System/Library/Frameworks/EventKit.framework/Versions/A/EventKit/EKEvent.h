@class NSURL, EKImage, NSDate, EKEventStore, EKSuggestedEventInfo, EKVirtualConference, EKCalendarDate, EKParticipant, NSMutableArray, NSString, NSSet, EKColor, EKRecurrenceIdentifier, NSArray, NSNumber, EKStructuredLocation, NSDateComponents;

@interface EKEvent : EKCalendarItem <EKJunkInvitationProtocol_Private, CalDateRangeProtocol> {
    EKStructuredLocation *_cachedLocationPrediction;
    NSDate *_cachedLocationPredictionExpirationDate;
    char _locationPredictionFrozen;
    char _locationPredictionAllowed;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _locationPredictionLock;
    NSMutableArray *_virtualConferenceURLsToInvalidateOnCommit;
}

@property (retain, nonatomic) NSArray *locations;
@property (readonly, nonatomic) NSArray *locationsWithoutPrediction;
@property (copy, nonatomic) EKCalendarDate *occurrenceStartDate;
@property (copy, nonatomic) EKCalendarDate *occurrenceEndDate;
@property (nonatomic) char occurrenceIsAllDay;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;
@property (copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;
@property (nonatomic) char requiresDetachDueToSnoozedAlarm;
@property (nonatomic) int clearModifiedFlags;
@property (retain, nonatomic) NSString *appEntityIdentifierOverride;
@property (retain, nonatomic) NSDate *endDateUnadjustedForLegacyClients;
@property (readonly, nonatomic) EKRecurrenceIdentifier *recurrenceIdentifier;
@property (readonly, nonatomic) NSString *appEntityIdentifier;
@property (readonly, nonatomic) NSDate *recurrenceDate;
@property (readonly, nonatomic) NSString *eventOccurrenceID;
@property (nonatomic) long long privacyLevel;
@property (readonly, nonatomic) char locationIsAConferenceRoom;
@property (readonly, nonatomic) double duration;
@property (nonatomic) double travelTime;
@property (readonly, nonatomic) NSDate *startDateIncludingTravel;
@property (readonly, nonatomic) char isStartDateDirty;
@property (readonly, nonatomic) char isEndDateDirty;
@property (readonly, nonatomic) char allowsTravelTimeModifications;
@property (readonly, nonatomic) char allowsAllDayModifications;
@property (retain, nonatomic) EKStructuredLocation *travelStartLocation;
@property (retain, nonatomic) EKStructuredLocation *endLocation;
@property (readonly, nonatomic) char automaticLocationGeocodingAllowed;
@property (nonatomic) char needsGeocoding;
@property (nonatomic) long long travelAdvisoryBehavior;
@property (readonly, nonatomic) char travelAdvisoryBehaviorIsEffectivelyEnabled;
@property (readonly, nonatomic) char eligibleForTravelAdvisories;
@property (readonly, nonatomic) char potentiallyEligibleForTravelAdvisories;
@property (retain, nonatomic) EKSuggestedEventInfo *suggestionInfo;
@property (readonly, nonatomic) NSString *locationWithoutPrediction;
@property (readonly, nonatomic) EKStructuredLocation *preferredLocationWithoutPrediction;
@property (retain, nonatomic) NSDate *proposedStartDate;
@property (readonly, nonatomic) NSDate *proposedEndDate;
@property (readonly, nonatomic) char allowsProposedTimeModifications;
@property (readonly, nonatomic) char allowsResponseCommentModifications;
@property (readonly, nonatomic) char allowsClearingCommentsAsOrganizer;
@property (nonatomic) char isPhantom;
@property (nonatomic) char isOriginalItemPhantom;
@property (nonatomic) unsigned long long cachedJunkStatus;
@property (readonly, nonatomic) char isSignificantlyDetached;
@property (readonly, nonatomic) char isSignificantlyDetachedIgnoringParticipation;
@property (retain, nonatomic) EKImage *image;
@property (retain, nonatomic) EKColor *color;
@property (nonatomic) char completed;
@property (readonly, nonatomic) NSString *birthdayContactName;
@property (readonly, nonatomic) char hasCustomRecurrence;
@property (readonly, nonatomic) NSDate *originalStartDate;
@property (readonly, nonatomic) NSString *UUID;
@property (retain, nonatomic) NSURL *conferenceURL;
@property (nonatomic) char preventConferenceURLDetection;
@property (readonly, nonatomic) NSURL *externalURL;
@property (readonly, nonatomic) NSString *showEventURLString;
@property (readonly, nonatomic) char isEditable;
@property (readonly, nonatomic) char isPrivateEventSharedToMe;
@property (readonly, nonatomic) NSURL *launchURL;
@property (nonatomic) long long participationStatus;
@property (readonly, nonatomic) long long pendingParticipationStatus;
@property (readonly, nonatomic) char allowsParticipationStatusModifications;
@property (readonly, nonatomic) char currentUserMayActAsOrganizer;
@property (readonly, nonatomic) long long currentUserGeneralizedParticipantRole;
@property (readonly, nonatomic, getter=isCurrentUserInvitedAttendee) char currentUserInvitedAttendee;
@property (readonly, nonatomic) char allowsAvailabilityModifications;
@property (readonly, nonatomic) char allowsPrivacyLevelModifications;
@property (retain, nonatomic) NSDate *participationStatusModifiedDate;
@property (readonly, nonatomic) char supportsParticipationStatusModificationsWithoutNotification;
@property (nonatomic) long long status;
@property (nonatomic) unsigned long long invitationStatus;
@property (nonatomic) char isAlerted;
@property (nonatomic) char dateChanged;
@property (nonatomic) char timeChanged;
@property (nonatomic) char titleChanged;
@property (nonatomic) char locationChanged;
@property (nonatomic) char videoConferenceChanged;
@property (nonatomic) char recurrenceChanged;
@property (nonatomic) char attendeeComment;
@property (nonatomic) char attendeeStatus;
@property (nonatomic) char attendeeProposedStartDate;
@property (nonatomic) char attendeeDeclinedStartDate;
@property (nonatomic) char attendeeReplyChanged;
@property (nonatomic) int externalTrackingStatus;
@property (readonly, copy, nonatomic) NSDate *initialStartDate;
@property (readonly, copy, nonatomic) NSDate *initialEndDate;
@property (readonly, nonatomic) char isMaster;
@property (readonly, nonatomic) char isMasterOrDetachedOccurrence;
@property (readonly, nonatomic) char isStatusDirty;
@property (readonly, nonatomic) char isAllDayDirty;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property (readonly, nonatomic) double durationIncludingTravel;
@property (readonly, nonatomic) long long travelRoutingMode;
@property (readonly, nonatomic) char canBeRespondedTo;
@property (readonly, nonatomic) char canDetachSingleOccurrence;
@property (readonly, nonatomic) char hasAttachmentChanges;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDate;
@property (readonly, nonatomic) EKCalendarDate *endCalendarDate;
@property (readonly, nonatomic) NSDateComponents *startDateComponents;
@property (nonatomic) long long locationPredictionState;
@property (readonly, nonatomic) char hasPredictedLocation;
@property (nonatomic) char firedTTL;
@property (readonly, nonatomic) char responseMustApplyToAll;
@property (nonatomic) unsigned long long junkStatus;
@property (nonatomic) unsigned long long flags;
@property (copy, nonatomic) NSSet *actions;
@property (readonly, nonatomic) char isMainOccurrence;
@property (readonly, nonatomic, getter=isPrivacySet) char privacySet;
@property (copy, nonatomic) NSString *recurrenceSet;
@property (retain, nonatomic) EKVirtualConference *virtualConference;
@property (retain, nonatomic) NSString *virtualConferenceTextRepresentation;
@property (nonatomic) long long specialDayType;
@property (readonly, nonatomic) char isUndetached;
@property (readonly, nonatomic) char isReminderIntegrationEvent;
@property (readonly, nonatomic) char isIntegrationEvent;
@property (readonly, nonatomic) char allowsNonzeroDuration;
@property (readonly, nonatomic) unsigned long long reminderOccurrenceType;
@property (readonly, nonatomic) NSString *eventIdentifier;
@property (nonatomic, getter=isAllDay) char allDay;
@property (copy, nonatomic) NSDate *startDate;
@property (copy, nonatomic) NSDate *endDate;
@property (copy, nonatomic) EKStructuredLocation *structuredLocation;
@property (readonly, nonatomic) EKParticipant *organizer;
@property (nonatomic) long long availability;
@property (readonly, nonatomic) char isDetached;
@property (readonly, nonatomic) NSDate *occurrenceDate;
@property (readonly, nonatomic) NSString *birthdayContactIdentifier;
@property (readonly, nonatomic) long long birthdayPersonID;
@property (readonly, nonatomic) NSString *birthdayPersonUniqueID;
@property (readonly, nonatomic) NSString *sendersEmail;
@property (readonly, nonatomic) NSString *sendersPhoneNumber;
@property (readonly, nonatomic) char supportsJunkReporting;
@property (readonly, nonatomic) EKEventStore *eventStore;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)eventWithEventStore:(id)a0;
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;
+ (id)knownKeysToSkipForFutureChanges;
+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;
+ (id)knownRelationshipMultiValueKeys;
+ (char)_allowSlicingFromDetachedOccurrence;
+ (id)_basicChangesRequiringSpanAll;
+ (char)_calendarsAreSharedToMeInSameSourceAndHaveSameOwner:(id)a0;
+ (long long)_coercedEventAvailabilityForDesiredAvailability:(long long)a0 supportedAvailabilities:(unsigned long long)a1;
+ (void)_detachOrSliceEvent:(id)a0 withSpan:(long long)a1 savingEvent:(id)a2 withOriginalStartDate:(id)a3 newStartDate:(id)a4;
+ (long long)_eventAvailabilityForParticipantStatus:(long long)a0 supportedEventAvailabilities:(unsigned long long)a1 isAllDayEvent:(char)a2;
+ (id)_locationStringForLocations:(id)a0;
+ (id)_modifiedNotificationUserInfoWithIdentifier:(id)a0 forRevert:(char)a1;
+ (char)_notDetachedOccurrenceOfEvent:(id)a0 existsInDateRangeWithStartDate:(id)a1 endDate:(id)a2 inTimeZone:(id)a3;
+ (id)_relatedCachedTimeKeys;
+ (char)_validateSpanForRemove:(long long)a0 error:(id *)a1;
+ (long long)ekWeekDayFromVCSWeekDay:(unsigned long long)a0;
+ (id)eventFromICSEvent:(id)a0 inStore:(id)a1;
+ (id)externalUriScheme;
+ (Class)frozenClass;
+ (id)generateUniqueIDWithEvent:(id)a0 originalEvent:(id)a1 calendar:(id)a2;
+ (char)isMultiDayTimedEventWithStartDate:(id)a0 endDate:(id)a1 allDay:(char)a2 inCalendar:(id)a3;
+ (id)knownKeysToUseForFutureChanges;
+ (id)knownPerUserPropertyKeys;
+ (id)knownRelationshipSingleValueKeys;
+ (id)knownRequireRSVPKeys;
+ (id)knownSingleValueKeysForComparison;
+ (id)uniqueIDForDetachedOccurrenceOfEvent:(id)a0 withOriginalStartDate:(id)a1 timeZone:(id)a2 allDay:(char)a3;

- (id)init;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (id)URL;
- (void)setCalendar:(id)a0;
- (void)setTimeZone:(id)a0;
- (void)setURL:(id)a0;
- (void)setTitle:(id)a0;
- (void)reset;
- (char)_reset;
- (id)title;
- (void)rollback;
- (id)constraints;
- (id)endLocation;
- (char)isFloating;
- (long long)selfParticipantStatus;
- (id)uniqueId;
- (char)validate:(id *)a0;
- (char)refresh;
- (void)setNotes:(id)a0;
- (long long)compareStartDateWithEvent:(id)a0;
- (id)initWithEventStore:(id)a0;
- (id)structuredLocation;
- (id)recurrenceRule;
- (void)setRecurrenceRule:(id)a0;
- (void)setRecurrenceRules:(id)a0;
- (BOOL)shouldHaveDefaultAlarms;
- (id)externalURI;
- (char)isBirthday;
- (void)setOriginalStartDate:(id)a0;
- (unsigned long long)entityType;
- (void)setEndLocation:(id)a0;
- (void)setStructuredLocation:(id)a0;
- (void)addEventAction:(id)a0;
- (char)isMultiDayTimedEventInCalendar:(id)a0;
- (void)markAsCommitted;
- (id)responseComment;
- (id)startOfDayForEndDateInCalendar:(id)a0;
- (void)updateWithVCSEntity:(id)a0 inCalendar:(id)a1;
- (void)_adjustAvailabilityAfterMovingOrCopyingFromCalendar:(id)a0 toCalendar:(id)a1;
- (void)_invalidateRecurrenceIdentifier;
- (char)_multiValueRelatedObject:(id)a0 isAlsoASingleValueRelatedObjectForKey:(id)a1;
- (char)changingAllDayPropertyIsAllowed;
- (void)markAsUndeleted;
- (void)setInvitationChangedProperties:(unsigned int)a0;
- (void)setNotesCommon:(id)a0;
- (void)setRecurrenceRuleFromICSString:(id)a0;
- (id)suggestedStartDateForCurrentRecurrenceRuleWithSimulatedNowDate:(id)a0;
- (void)_addNewAttendeesToRecentsIfNeeded;
- (void)_addOrganizerToRecentsIfNeeded;
- (void)_adjustAfterMovingOrCopyingFromOldCalendar:(id)a0 toNewCalendar:(id)a1 cachedConstraintsForOldCalendar:(id)a2 savingItem:(id)a3;
- (void)_adjustAlarmsAfterMovingOrCopyingFromCalendar:(id)a0 toCalendar:(id)a1;
- (void)_adjustAttachmentsAfterMovingOrCopyingFromCalendar:(id)a0 toCalendar:(id)a1 cachedConstraintsForOldCalendar:(id)a2 savingItem:(id)a3;
- (void)_adjustAttendeesAfterMovingOrCopyingFromCalendar:(id)a0 toCalendar:(id)a1;
- (id)_adjustDateIfFloatingForDate:(id)a0;
- (void)_adjustExternalFieldsAfterMovingOrCopyingFromCalendar:(id)a0 toCalendar:(id)a1 cachedConstraintsForOldCalendar:(id)a2;
- (void)_adjustPrivacyAfterMovingOrCopyingFromCalendar:(id)a0 toCalendar:(id)a1 cachedConstraintsForOldCalendar:(id)a2 savingItem:(id)a3;
- (void)_adjustRecurrenceRulesAfterMovingOrCopyingFromCalendar:(id)a0 toCalendar:(id)a1 notes:(id)a2;
- (void)_adjustScheduleAgentAfterMovingOrCopyingFromCalendar:(id)a0 toCalendar:(id)a1 cachedConstraintsForOldCalendar:(id)a2;
- (void)_adjustTimeZoneAfterMovingOrCopyingToCalendar:(id)a0 notes:(id)a1;
- (void)_adjustURLAfterMovingOrCopyingToCalendar:(id)a0 notes:(id)a1;
- (void)_applyTimeChangesToMaster;
- (void)_assignAllAttachmentsNewIdentities;
- (char)_attemptToUpdateComplexRecurrenceRule;
- (id)_buildConferenceStringFromNotesWithoutConference:(id)a0 serializedConference:(id)a1;
- (id)_calculateDurationWithStart:(id)a0 end:(id)a1 allDay:(char)a2;
- (char)_canMoveOrCopyFromCalendar:(id)a0 toCalendar:(id)a1 allowedRequirements:(long long)a2 error:(id *)a3;
- (void)_cancelDetachedEvents;
- (char)_cancelWithSpan:(long long)a0 error:(id *)a1;
- (char)_changesRequireDetachOrSlice;
- (char)_checkStartDateConstraintAgainstDate:(struct { int x0; char x1; char x2; char x3; char x4; double x5; })a0 timeZone:(id)a1 error:(id *)a2;
- (void)_clearAttendeeChangedFlags;
- (void)_clearExceptionDatesAndUpdateDetachedOriginalDates:(id)a0;
- (void)_clearLocationPredictionCacheIfNotFrozen;
- (void)_clearOriginalDateFields;
- (id)_committedEndDate;
- (id)_committedStartDate;
- (id)_conferenceRoomDisplayStrings;
- (char)_couldBeJunkCommon;
- (id)_defaultAlarmOffset;
- (void)_deleteErrorIfInvalid;
- (void)_deleteFromOccurrenceDateOnward:(id)a0 includeSlices:(char)a1;
- (void)_deleteThisOccurrence;
- (void)_deleteWithSpan:(long long)a0;
- (void)_detachOrSliceWithSpan:(long long)a0 withOriginalStartDate:(id)a1 newStartDate:(id)a2;
- (id)_detectConferenceURL;
- (char)_detectedConferenceURLOnBackingObjectMayBeInvalid;
- (char)_diff:(id)a0 isDifferentFromCommittedEventHelperRequiresReschedule:(char)a1;
- (void)_duplicateAddedAttachmentsToDetachedEvents:(id)a0;
- (id)_ekRecurrenceRuleFromICSRecurrenceRule:(id)a0;
- (id)_ekRecurrenceRuleFromVCSRecurrenceRule:(id)a0;
- (char)_eligibleForTravelAdvisoriesIncludePotential:(char)a0;
- (char)_eventIsTheOnlyRemainingOccurrence;
- (id)_eventKitPropertyKeyForCalendarItemErrorPropertyKey:(id)a0;
- (void)_extendConferenceURLExpirationDateToDate:(id)a0;
- (char)_fetchedEventIsConflict:(id)a0 forStartDate:(id)a1 endDate:(id)a2;
- (void)_filterExceptionDatesAndDetachments;
- (id)_generateNewUniqueID;
- (char)_hasAbsoluteAlarms;
- (char)_hasBasicChangesRequiringSpanAll;
- (char)_hasExternalIDOrDeliverySource;
- (char)_hasOrHadRecurrenceRule;
- (char)_hasRecurrenceRuleChangeRequiringSpanAll;
- (unsigned long long)_integrationType;
- (char)_invitationChangedPropertyForFlag:(unsigned int)a0;
- (char)_isAllDay;
- (char)_isOnlyChangeToAttendeesSelfAttendeeParticipationStatus;
- (char)_isOriginalOccurrenceStartDateSameAsCommittedStartDate;
- (char)_isParticipationStatusDirty;
- (char)_isSignificantlyDetachedComparedToMaster:(id)a0 shouldIgnorePartStat:(char)a1;
- (char)_isSimpleRepeatingEvent;
- (char)_isValidAttendee:(id)a0 forCalendar:(id)a1 selfAttendeeIsValid:(char)a2;
- (id)_keysToChangeForDuplicateWithOptions:(long long)a0;
- (id)_lastRecurrenceDate;
- (id)_leftoversInDates:(id)a0 withGeneratedDates:(id)a1;
- (id)_legacyEventIdentifier;
- (char)_needsAttendeePartStatReset;
- (id)_nextReminderOccurrenceDate;
- (char)_noRemainingEarlierOccurrences;
- (id)_nsCalendar;
- (id)_occurrenceDatesForCount:(unsigned long long)a0;
- (char)_occurrenceExistsOnDate:(id)a0 timeZone:(id)a1;
- (id)_originallyCommittedVirtualConference;
- (long long)_parentParticipationStatus;
- (id)_pinDate:(id)a0 withPinMode:(unsigned long long)a1;
- (id)_prioritizedConferencesSources;
- (void)_propagateChangesToDetachedEvents:(id)a0 originalItemBeforeSave:(id)a1 startDateOffset:(id)a2 duration:(id)a3 calendar:(id)a4;
- (void)_propagateChangesToSlice:(id)a0 originalItemBeforeSave:(id)a1 startDateOffset:(id)a2 duration:(id)a3 calendar:(id)a4 updateRecurrenceEnd:(char)a5;
- (void)_recursivelyAssignAllAttachmentsNewIdentities;
- (void)_removeInvalidAlarmsDuringSave;
- (char)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (char)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (char)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (char)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (char)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (char)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (void)_resetInternalStateWithForce:(char)a0;
- (void)_respondToProposedTimeFromAttendee:(id)a0 shouldAccept:(char)a1;
- (char)_revertIncludingCoCommits:(char)a0;
- (void)_saveUndeletedDetachedOccurrence;
- (char)_saveUndetachedOccurrenceWithError:(id *)a0;
- (void)_setEndDateUnadjustedForLegacyClients:(id)a0 allowSettingIfNotEditable:(char)a1;
- (void)_setInvitationChangedProperty:(char)a0 forFlag:(unsigned int)a1;
- (void)_setInvitationStatusAlertedIfNecessary;
- (void)_setInvitationStatusUnalertedIfNecessary;
- (void)_setNextCachedReminderOccurrenceDate:(id)a0;
- (void)_setStartDate:(id)a0 andClearProposedTimes:(char)a1 allowSettingIfNotEditable:(char)a2;
- (char)_settingTimeZoneChangesStartEndDates;
- (char)_shouldAlertInviteeDeclines;
- (char)_shouldCancelInsteadOfDeleteWithSpan:(long long)a0;
- (char)_shouldDeclineInsteadOfDelete;
- (char)_shouldPreserveFutureWhenSlicingWithStartDate:(id)a0 newStartDate:(id)a1;
- (void)_snoozeAlarm:(id)a0 withTimeIntervalFromNow:(double)a1 orTargetDate:(id)a2 pinsTriggerToStartDate:(char)a3;
- (char)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)a0 forDate:(id)a1;
- (id)_travelTimeInternalDescription;
- (void)_updateEndDateForDate:(id)a0 withAdjustmentMode:(unsigned long long)a1;
- (void)_updateEndDateForDate:(id)a0 withAdjustmentMode:(unsigned long long)a1 adjustStartDate:(char)a2;
- (id)_updateMasterDate:(id)a0 forChangeToOccurrenceDate:(id)a1 fromOriginalOccurrenceDate:(id)a2;
- (void)_updateModifiedProperties;
- (void)_updateModifiedPropertiesForThisEventAndAllDetachments;
- (id)_updatePredictedLocationCacheIfNeeded;
- (void)_updateRecurrenceEndDateForEvent:(id)a0 calendar:(id)a1 withOffset:(id)a2;
- (void)_updateRecurrenceEndDatesWithAdjustmentMode:(unsigned long long)a0;
- (void)_updateSelfAttendeeToMatchSelfAttendee:(id)a0;
- (void)_updateSelfFromDetachedEventIfNeededForDelete;
- (void)_updateStartDateForDate:(id)a0 withAdjustmentMode:(unsigned long long)a1;
- (void)_updateStartDateForDate:(id)a0 withAdjustmentMode:(unsigned long long)a1 adjustEndDate:(char)a2;
- (void)_updateUUIDForNewParticipants;
- (void)_updateVideoConferenceOnlyModified;
- (char)_userAddressesRepresentInvitedAttendee:(id)a0 checkEmailAddresses:(char)a1;
- (char)_validateDatesAndRecurrencesGivenSpan:(long long)a0 error:(id *)a1;
- (void)_willSave;
- (void)acceptProposedTimeNotificationFromAttendee:(id)a0;
- (void)addConferenceRooms:(id)a0;
- (void)adjustedDatesForDate:(id)a0 persistedDateIsInUTC:(char)a1 withAdjustmentMode:(unsigned long long)a2 pinMode:(unsigned long long)a3 outClientCalendarDate:(id *)a4 outPersistedDate:(id *)a5;
- (id)adjustedPersistedDateForDate:(id)a0 withAdjustmentMode:(unsigned long long)a1 pinMode:(unsigned long long)a2 clientCalendarDate:(id *)a3;
- (char)allowsAttendeesModifications;
- (char)allowsCalendarModifications;
- (char)allowsRecurrenceModificationsForSpan:(long long)a0;
- (char)allowsSpansOtherThanThisEvent;
- (void)applyChangesFromEvent:(id)a0 toEvent:(id)a1 ignoringDifferencesFrom:(id)a2;
- (char)attendeeReplyChanged;
- (id)attendeesNotIncludingOrganizer;
- (id)attendeesNotIncludingOrganizerOrLocationsOrResources;
- (id)birthdayID;
- (unsigned long long)cachedJunkStatus;
- (char)canForward;
- (char)canMoveOrCopyToCalendar:(id)a0 fromCalendar:(id)a1 error:(id *)a2;
- (char)canMoveToCalendar:(id)a0 fromCalendar:(id)a1 allowedRequirements:(long long)a2 error:(id *)a3;
- (char)canMoveToCalendar:(id)a0 fromCalendar:(id)a1 error:(id *)a2;
- (char)canWeInferUpdateToComplexRecurrenceRule;
- (void)clearCachedTimeValues;
- (void)clearDetectedConferenceURL;
- (void)clearIntegrationType;
- (void)clearInvitationStatus;
- (void)clearNextCachedReminderOccurrenceDate;
- (void)clearParsedConference;
- (void)clearVirtualConferenceURLsQueuedForInvalidation;
- (id)coCommitEvents;
- (id)committedConstraints;
- (id)committedCopy;
- (id)committedValueForKey:(id)a0;
- (long long)compareOriginalStartDateWithEvent:(id)a0;
- (long long)compareStartDateIncludingTravelWithEvent:(id)a0;
- (id)conferenceURLDetected;
- (id)conferenceURLDetectedString;
- (id)conferenceURLForDisplay;
- (char)conferenceURLForDisplayCached;
- (id)conferenceURLString;
- (void)confirmPredictedLocation:(id)a0;
- (char)conformsToRecurrenceRules:(id)a0;
- (id)copyToCalendar:(id)a0 withOptions:(long long)a1;
- (char)couldBeJunk;
- (unsigned long long)countOfAttendeeProposedTimes;
- (long long)daysSpannedInCalendar:(id)a0;
- (void)declineProposedTimeNotificationFromAttendee:(id)a0;
- (id)defaultAlarm;
- (id)defaultAlarms;
- (id)diffFromCommitted;
- (char)disallowProposeNewTime;
- (void)dismissAcceptedProposeNewTimeNotification;
- (void)dismissAttendeeRepliedNotification;
- (id)displayNotes;
- (id)duplicateWithOptions:(long long)a0;
- (char)durationOverlapsRecurrenceInterval;
- (id)earliestOccurrenceEndingAfter:(id)a0;
- (id)earliestOccurrenceEndingAfter:(id)a0 excludeSignificantDetachments:(char)a1 excludeCanceledDetachments:(char)a2 excludeDeclinedDetachments:(char)a3;
- (id)effectiveTimeZone;
- (id)endDateRaw;
- (char)flag:(unsigned long long)a0;
- (void)forceLocationPredictionUpdate;
- (void)forceSetTimeZone:(id)a0;
- (char)futureOccurrencesCannotBeAffectedByChangingStartDateToDate:(id)a0;
- (char)hasADateChangeAndComplexRecurrenceWeDontKnowHowToUpdate;
- (char)hasAttendeeProposedTimes;
- (char)hasChangesRequiringSpanAll;
- (char)hasValidEventAction;
- (id)initWithPersistentObject:(id)a0;
- (id)initWithPersistentObject:(id)a0 objectForCopy:(id)a1;
- (id)initWithPersistentObject:(id)a0 occurrenceDate:(id)a1;
- (void)invalidateRemovedVirtualConferences;
- (void)invalidateVirtualConferenceURLIfNeededOnCommit:(id)a0;
- (unsigned int)invitationChangedProperties;
- (char)isAttendeeSameAsOrganizer:(id)a0;
- (char)isDifferentAndHasForwardedAttendeesWithDiff:(id)a0;
- (char)isDifferentAndHasNewProposedTimeWithDiff:(id)a0;
- (char)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)a0;
- (char)isDifferentAndModifiedAttendeesWithDiff:(id)a0;
- (char)isDifferentAndRequiresRSVPWithDiff:(id)a0;
- (char)isDifferentAndRequiresRescheduleWithDiff:(id)a0;
- (char)isDifferentExceptingPerUserPropertiesWithDiff:(id)a0;
- (char)isDifferentFromCommittedEventAndHasUnscheduledAttendees;
- (char)isDifferentFromCommittedEventAndRequiresRSVP;
- (char)isDifferentFromCommittedEventAndRequiresReschedule;
- (char)isDifferentWithDiff:(id)a0;
- (char)isEqual:(id)a0 comparingKeys:(id)a1;
- (char)isFirstOccurrence;
- (char)isFirstOccurrenceIncludingSlices;
- (char)isOnlyOccurrence;
- (char)isOrWasIntegrationEvent;
- (char)isOrWasPartOfRecurringSeries;
- (char)isOutOfOrderWithEventInSeries;
- (char)isProposedTimeEvent;
- (char)isTentative;
- (char)isValidAttendee:(id)a0 forCalendar:(id)a1;
- (id)lunarCalendarString;
- (void)makeRecurrenceEndCountBased;
- (void)makeRecurrenceEndDateBased;
- (void)markAsSaved;
- (void)markAsUndetachedWithStartDate:(id)a0 endDate:(id)a1;
- (void)markEventAsAttendeeForward;
- (id)masterEvent;
- (id)nextOccurrence;
- (id)nextOccurrenceOrDetachmentAfter:(id)a0;
- (char)overlapsWithOrIsSameDayAsEventInSeries;
- (void)overrideEndDate:(id)a0;
- (void)overrideStartDate:(id)a0;
- (void)parsedConference:(id *)a0 andNotes:(id *)a1;
- (char)phantomMaster;
- (void)postModifiedNotification;
- (void)postModifiedNotificationWithUserInfo:(id)a0;
- (id)potentialConflictOccurrenceDatesInTimePeriod:(double *)a0;
- (void)prefetchAttendeesWithAdditionalProperties:(id)a0;
- (id)previousOccurrence;
- (id)previousOccurrenceOrDetachmentBefore:(id)a0;
- (id)previouslySavedCopy;
- (id)privacyDescription;
- (id)privacyLevelString;
- (id)privacySafeIntegrationEventDescription;
- (id)propertiesThatCanBeModifiedOnReadOnlyCalendars;
- (void)rebaseSkippingRelationProperties:(id)a0;
- (void)rebaseSkippingRelationProperties:(id)a0 toEventStore:(id)a1;
- (void)rebaseToEventStore:(id)a0;
- (char)refreshAndNotify:(char)a0;
- (char)refreshIfRefreshableAndNotify:(char)a0;
- (void)rejectPredictedLocation;
- (void)removeConferenceRooms:(id)a0;
- (void)removeEventAction:(id)a0;
- (void)removeServerRefreshRelatedProperties;
- (char)removeWithSpan:(long long)a0 error:(id *)a1;
- (long long)requirementsToMoveFromCalendar:(id)a0 toCalendar:(id)a1;
- (long long)requirementsToMoveToCalendar:(id)a0;
- (char)requiresCopyToMoveFromCalendar:(id)a0 toCalendar:(id)a1;
- (char)requiresDetach;
- (char)revert;
- (id)roomAttendees;
- (char)saveWithSpan:(long long)a0 error:(id *)a1;
- (id)scanForConflicts;
- (char)seriesHasOutOfOrderEvents;
- (char)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;
- (char)serverSupportedProposeNewTime;
- (void)setBirthdayContact:(id)a0;
- (void)setBirthdayContactIdentifier:(id)a0;
- (void)setCachedJunkStatus:(unsigned long long)a0;
- (void)setConferenceURLString:(id)a0;
- (void)setDisplayNotes:(id)a0;
- (void)setEndDateRaw:(id)a0;
- (void)setFlag:(unsigned long long)a0 value:(char)a1;
- (void)setIsJunk:(char)a0 shouldSave:(char)a1;
- (void)setLocationPredictionAllowed:(char)a0;
- (void)setLunarCalendarString:(id)a0;
- (void)setPhantomMaster:(char)a0;
- (void)setPredictedLocationFrozen:(char)a0;
- (void)setPrivacyLevelWithoutVerifyingPrivacyModificationsAllowed:(long long)a0;
- (void)setResponseComment:(id)a0;
- (void)setSpecialDayString:(id)a0;
- (void)setStartDateComponentsPreservingDuration:(id)a0;
- (void)setStartDateRaw:(id)a0;
- (void)setStructuredLocation:(id)a0 preserveConferenceRooms:(char)a1;
- (void)setURLCommon:(id)a0;
- (id)singleRecurrenceRule;
- (id)snapshotCopyWithPropertyKeysToCopy:(id)a0 propertyKeysToSkip:(id)a1;
- (void)snoozeAlarm:(id)a0 untilTargetDate:(id)a1;
- (void)snoozeAlarm:(id)a0 untilTargetDate:(id)a1 pinsTriggerToStartDate:(char)a2;
- (void)snoozeAlarm:(id)a0 withTimeIntervalFromNow:(double)a1;
- (void)snoozeAlarm:(id)a0 withTimeIntervalFromNow:(double)a1 pinsTriggerToStartDate:(char)a2;
- (id)specialDayString;
- (id)specificIdentifier;
- (id)startDateForRecurrence;
- (id)startDateRaw;
- (id)startOfDayForStartDateInCalendar:(id)a0;
- (id)suggestedStartDateForCurrentRecurrenceRule;
- (char)supportsAddingAttachments;
- (void)updateDefaultAlarms;
- (char)updateEventToEvent:(id)a0;
- (char)updateEventToEvent:(id)a0 commit:(char)a1;
- (char)updateWithGeocodedMapItemAndSaveWithCommit:(id)a0 eventStore:(id)a1 error:(id *)a2;
- (char)validateOccurrenceDateStillMatchesRecurrenceRules;
- (char)validateRecurrenceRule:(id)a0 error:(id *)a1;
- (char)validateWithSpan:(long long)a0 error:(id *)a1;

@end
