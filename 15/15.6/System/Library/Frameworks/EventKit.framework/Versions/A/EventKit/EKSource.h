@class NSError, NSString, NSURL, REMObjectID, NSSet, EKSourceConstraints, NSDictionary, EKSyncError, NSDate, EKAvailabilityCache, NSNumber;

@interface EKSource : EKObject {
    EKAvailabilityCache *_availabilityCache;
}

@property (readonly, nonatomic) char hasOwnerEmailAddress;
@property (copy, nonatomic) NSString *delegatedAccountOwnerStoreID;
@property (copy, nonatomic) NSString *externalID;
@property (readonly, nonatomic) NSSet *allCalendars;
@property (readonly, nonatomic) int displayOrderForNewCalendar;
@property (readonly, nonatomic) NSString *symbolicColorForNewCalendar;
@property (nonatomic, getter=isEnabled) char enabled;
@property (readonly, nonatomic) char isFacebookSource;
@property (readonly, nonatomic) char supportsCalendarCreation;
@property (readonly, nonatomic) char constraintSupportsAvailabilityRequests;
@property (readonly, nonatomic) char supportsTaskCalendarCreation;
@property (readonly, nonatomic) char supportsReminderActions;
@property (readonly, nonatomic) EKSourceConstraints *constraints;
@property (readonly, nonatomic) char isWritable;
@property (readonly, nonatomic) char isReadable;
@property (nonatomic) char readOnly;
@property (readonly, nonatomic) char supportsEventCalendarCreation;
@property (readonly, nonatomic) char isEnabledForEvents;
@property (readonly, nonatomic) REMObjectID *remAccountObjectID;
@property (readonly, nonatomic) NSError *sourceError;
@property (readonly, nonatomic) NSError *sourceOrEventError;
@property (readonly, nonatomic) char syncs;
@property (nonatomic) int displayOrder;
@property (copy, nonatomic) NSString *ownerName;
@property (readonly, nonatomic, getter=isPrimaryLocalSource) char primaryLocalSource;
@property (readonly, nonatomic, getter=isNestedLocalSource) char nestedLocalSource;
@property (copy, nonatomic) NSNumber *defaultAlarmOffset;
@property (copy, nonatomic) NSNumber *defaultAllDayAlarmOffset;
@property (copy, nonatomic) NSString *externalModificationTag;
@property (copy, nonatomic) NSString *title;
@property (copy, nonatomic) NSString *notes;
@property (copy, nonatomic) NSString *creatorBundleID;
@property (copy, nonatomic) NSString *creatorCodeSigningIdentity;
@property (nonatomic) char onlyCreatorCanModify;
@property (copy, nonatomic) NSString *appGroupIdentifier;
@property (readonly, nonatomic) char wantsCommentPromptWhenDeclining;
@property (nonatomic) long long preferredEventPrivateValue;
@property (nonatomic) long long strictestEventPrivateValue;
@property (readonly, nonatomic) NSURL *serverURL;
@property (readonly, nonatomic) NSString *serverHost;
@property (readonly, nonatomic) long long serverPort;
@property (readonly, nonatomic) char serverUsesSSL;
@property (readonly, nonatomic) NSSet *ownerAddresses;
@property (readonly, nonatomic) NSString *preferredOwnerAddress;
@property (readonly, nonatomic) char isPrimaryAppleAccount;
@property (nonatomic) char wasMigrated;
@property (retain, nonatomic) NSString *sourceIdentifier;
@property (nonatomic) long long sourceType;
@property (nonatomic) char showsNotifications;
@property (retain, nonatomic) NSString *constraintsDescriptionPath;
@property (retain, nonatomic) NSString *constraintsName;
@property (retain, nonatomic) NSString *constraintsDescriptionPathForUnitTesting;
@property (nonatomic) char allowsTasks;
@property (nonatomic) char allowsEvents;
@property (nonatomic) char allowsCalendarAddDeleteModify;
@property (nonatomic) char supportsSharedCalendars;
@property (nonatomic) char supportsAlarmAcknowledgedDate;
@property (nonatomic) char supportsPrivateEvents;
@property (nonatomic) char prohibitsPrivateEventsWithAttendees;
@property (nonatomic) char requiresSamePrivacyLevelAcrossRecurrenceSeries;
@property (nonatomic) char supportsAvailabilityRequests;
@property (nonatomic) char supportsIgnoringEventsInAvailabilityRequests;
@property (nonatomic) char supportsLocationDirectorySearches;
@property (nonatomic) char allowsProposeNewTime;
@property (nonatomic) char prohibitsICSImport;
@property (nonatomic) char isFacebook;
@property (nonatomic) char prohibitsDetachmentOnCommentChange;
@property (nonatomic) char prohibitsMultipleDaysInMonthlyRecurrence;
@property (nonatomic) char prohibitsMultipleMonthsInYearlyRecurrence;
@property (nonatomic) char prohibitsYearlyRecurrenceInterval;
@property (nonatomic) char usesSelfAttendee;
@property (nonatomic) char snoozeAlarmRequiresDetach;
@property (nonatomic) char supportsDelegation;
@property (nonatomic) char supportsDelegateEnumeration;
@property (nonatomic) char prohibitsSlicingEventsWithAttendees;
@property (nonatomic) char supportsEventForwarding;
@property (nonatomic) char requiresOccurrencesConformToRecurrenceRule;
@property (nonatomic) char supportsAttachments;
@property (nonatomic) char supportsClearingPrivateComments;
@property (nonatomic) char supportsPush;
@property (nonatomic) char supportsTravelTime;
@property (nonatomic) char allowsPrivateEventAccessByDelegate;
@property (nonatomic) char supportsInvitationModificationsWithoutNotification;
@property (readonly, nonatomic) NSString *personaIdentifier;
@property (retain, nonatomic) NSDictionary *cachedExternalInfo;
@property (readonly, nonatomic) unsigned long long lastSyncError;
@property (readonly, copy, nonatomic) NSDictionary *lastSyncErrorUserInfo;
@property (retain, nonatomic) EKSyncError *syncError;
@property (retain, nonatomic) NSDate *lastSyncStartDate;
@property (retain, nonatomic) NSDate *lastSyncEndDate;
@property (readonly, nonatomic) char isSyncing;
@property (nonatomic) int flags;
@property (nonatomic) int flags2;
@property (nonatomic) char isInMainWindow;
@property (nonatomic) char isInSeparateWindow;
@property (nonatomic) char doesSyncDefaultAlarmsToServer;
@property (readonly, nonatomic) char supportsAvailability;
@property (nonatomic) long long sourceTypeRaw;
@property (readonly, nonatomic) NSSet *calendars;
@property (readonly, nonatomic) char isDelegate;

+ (id)_eventKitBundle;
+ (long long)_calEventPrivacyLevelToEKPrivacyLevel:(int)a0;
+ (int)_ekPrivacyLevelToCalEventPrivacyLevel:(long long)a0;
+ (Class)frozenClass;
+ (char)isWeakRelationship;
+ (id)knownIdentityKeysForComparison;
+ (id)knownRelationshipSingleValueKeys;
+ (id)knownSingleValueKeysForComparison;
+ (id)primaryLocalSourceID;
+ (id)sourceWithEventStore:(id)a0;

- (id)description;
- (void).cxx_destruct;
- (id)UUID;
- (char)remove:(id *)a0;
- (char)_reset;
- (void)setUUID:(id)a0;
- (char)disabled;
- (char)save:(id *)a0;
- (void)setDisabled:(char)a0;
- (char)validate:(id *)a0;
- (char)refresh;
- (id)calendarsForEntityType:(unsigned long long)a0;
- (id)calendarWithExternalIdentifier:(id)a0;
- (void)setFlag2:(int)a0 value:(char)a1;
- (unsigned int)_adjustedDisplayOrder;
- (id)_calDAVOfficeHoursFromEKOfficeHours:(id)a0;
- (id)_constraintsInternal;
- (id)_convertTypeOfOwnerAddresses:(id)a0 toSet:(char)a1;
- (void)_copyInitialDefaultAlarmSettingsIfNeeded;
- (void)_countCalendarItemsOfCalType:(int)a0 resultHandler:(id /* block */)a1;
- (id)_ekOfficeHoursFromCalDAVOfficeHours:(id)a0;
- (id)_nsErrorFromSyncError:(id)a0 event:(id)a1;
- (void)_resetInternalStateWithForce:(char)a0;
- (void)_setConstraintsNameWithoutValidation:(id)a0;
- (char)_shouldCopyDefaultAlarmsFromLocalSource;
- (char)_validateClientCanModifySources:(id *)a0;
- (id)availabilityCache;
- (id)cachedExternalInfoData;
- (void)countCalendarItemsOfType:(unsigned long long)a0 resultHandler:(id /* block */)a1;
- (void)countCalendarItemsWithResultHandler:(id /* block */)a0;
- (id)externalInfoForKey:(id)a0;
- (void)fetchOfficeHoursWithCompletion:(id /* block */)a0 onQueue:(id)a1;
- (char)flag2:(int)a0;
- (char)flag:(int)a0;
- (int)managedConfigurationAccountAccess;
- (id)pendingPersonaIdentifierForNewSource;
- (int)preferredEventPrivateValueRaw;
- (id)readWriteCalendarsForEntityType:(unsigned long long)a0;
- (char)removeCalendarItemsOlderThanDate:(id)a0 entityTypeMask:(unsigned long long)a1 error:(id *)a2;
- (void)setCachedExternalInfoData:(id)a0;
- (void)setFlag:(int)a0 value:(char)a1;
- (void)setLastSyncError:(unsigned long long)a0 userInfo:(id)a1;
- (void)setOfficeHours:(id)a0 withCompletion:(id /* block */)a1 onQueue:(id)a2;
- (void)setPendingPersonaIdentifierForNewSource:(id)a0;
- (void)setPreferredEventPrivateValueRaw:(int)a0;
- (void)setStrictestEventPrivateValueRaw:(int)a0;
- (int)strictestEventPrivateValueRaw;
- (char)supportsCalendarTaskCreation;

@end
