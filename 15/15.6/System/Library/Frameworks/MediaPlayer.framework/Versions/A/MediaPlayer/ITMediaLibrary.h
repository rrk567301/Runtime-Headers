@class NSArray, ITLibrary, NSMutableArray;

@interface ITMediaLibrary : NSObject {
    NSMutableArray *_mediaItems;
    struct unordered_map<unsigned long long, ITMediaItem *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, ITMediaItem *>>> { struct __hash_table<std::__hash_value_type<unsigned long long, ITMediaItem *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaItem *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaItem *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, ITMediaItem *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaItem *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaItem *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaItem *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaItem *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaItem *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaItem *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaItem *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaItem *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaItem *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaItem *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaItem *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _mediaItemsMap;
    NSMutableArray *_mediaItemCollections;
    struct unordered_map<unsigned long long, ITMediaCollection *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, ITMediaCollection *>>> { struct __hash_table<std::__hash_value_type<unsigned long long, ITMediaCollection *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaCollection *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaCollection *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, ITMediaCollection *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaCollection *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaCollection *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaCollection *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaCollection *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaCollection *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaCollection *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaCollection *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaCollection *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaCollection *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaCollection *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaCollection *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _mediaItemCollectionsMap;
    NSMutableArray *_playlists;
    struct unordered_map<unsigned long long, ITMediaPlaylist *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, ITMediaPlaylist *>>> { struct __hash_table<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaPlaylist *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _playlistsMap;
    NSMutableArray *_artists;
    struct unordered_map<unsigned long long, ITMediaArtist *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, ITMediaArtist *>>> { struct __hash_table<std::__hash_value_type<unsigned long long, ITMediaArtist *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaArtist *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaArtist *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, ITMediaArtist *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaArtist *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaArtist *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaArtist *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaArtist *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaArtist *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaArtist *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaArtist *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaArtist *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaArtist *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaArtist *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaArtist *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _artistsMap;
    NSMutableArray *_albums;
    struct unordered_map<unsigned long long, ITMediaAlbum *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, ITMediaAlbum *>>> { struct __hash_table<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaAlbum *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaAlbum *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, ITMediaAlbum *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbum *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaAlbum *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaAlbum *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _albumsMap;
    struct unordered_map<unsigned long long, ITMediaAlbumArtist *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, ITMediaAlbumArtist *>>> { struct __hash_table<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaAlbumArtist *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _albumArtistsMap;
    NSMutableArray *_genres;
    struct unordered_map<unsigned long long, ITMediaGenre *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, ITMediaGenre *>>> { struct __hash_table<std::__hash_value_type<unsigned long long, ITMediaGenre *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaGenre *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaGenre *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, ITMediaGenre *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaGenre *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaGenre *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaGenre *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaGenre *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaGenre *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaGenre *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaGenre *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaGenre *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaGenre *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaGenre *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaGenre *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _genresMap;
    NSMutableArray *_composers;
    struct unordered_map<unsigned long long, ITMediaComposer *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, ITMediaComposer *>>> { struct __hash_table<std::__hash_value_type<unsigned long long, ITMediaComposer *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaComposer *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaComposer *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, ITMediaComposer *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaComposer *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaComposer *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaComposer *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaComposer *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaComposer *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaComposer *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaComposer *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaComposer *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, ITMediaComposer *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaComposer *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, ITMediaComposer *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _composersMap;
    struct unordered_map<unsigned short, unsigned long, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, unsigned long>>> { struct __hash_table<std::__hash_value_type<unsigned short, unsigned long>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, unsigned long>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, unsigned long>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, unsigned long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned long>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned long>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, unsigned long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned long>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, unsigned long>, std::hash<unsigned short>, std::equal_to<unsigned short>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, unsigned long>, std::equal_to<unsigned short>, std::hash<unsigned short>>> { float __value_; } __p3_; } __table_; } mSectionMap;
}

@property (readonly, nonatomic) unsigned long long mediaTypes;
@property (readonly, nonatomic) unsigned long long playlistAttributes;
@property (nonatomic) char needsReload;
@property (readonly, nonatomic) ITLibrary *itLibrary;
@property (readonly, nonatomic) NSArray *mediaItems;
@property (readonly, nonatomic) NSArray *playlists;
@property (readonly, nonatomic) NSArray *artists;
@property (readonly, nonatomic) NSArray *albums;
@property (readonly, nonatomic) NSArray *genres;
@property (readonly, nonatomic) NSArray *composers;
@property (readonly, nonatomic) NSMutableArray *albumArtists;
@property (readonly, nonatomic) unsigned long long currentRevision;
@property (readonly, nonatomic) NSArray *localizedSectionIndexTitles;

- (void).cxx_destruct;
- (id).cxx_construct;
- (id)initWithLibrary:(id)a0;
- (id)albumArtistForIdentifier:(unsigned long long)a0;
- (id)albumForIdentifier:(unsigned long long)a0;
- (id)artistForIdentifier:(unsigned long long)a0;
- (id)collectionForIdentifier:(unsigned long long)a0 groupingType:(long long)a1;
- (id)composerForIdentifier:(unsigned long long)a0;
- (unsigned long long)countAlbumItems:(unsigned long long)a0;
- (unsigned long long)countArtistItems:(unsigned long long)a0;
- (unsigned long long)countComposerItems:(unsigned long long)a0;
- (unsigned long long)countPlaylistItems:(unsigned long long)a0;
- (id)genreForIdentifier:(unsigned long long)a0;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)a0;
- (id)mediaItemCollectionForIdentifier:(unsigned long long)a0;
- (id)mediaItemForIdentifier:(unsigned long long)a0;
- (char)playlistContainsMediaItem:(unsigned long long)a0 forMediaItemIdentifier:(unsigned long long)a1;
- (id)playlistForIdentifier:(unsigned long long)a0;
- (void)reloadLibrary;
- (void)reloadLibraryIfNeeded;
- (unsigned long long)sectionIndexForString:(id)a0;
- (char)shouldIncludePlaylist:(id)a0;

@end
