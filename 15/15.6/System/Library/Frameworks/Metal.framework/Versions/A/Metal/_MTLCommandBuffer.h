@class NSError, NSString, _MTLCommandQueue, NSArray, NSMutableDictionary, NSDictionary, NSMutableArray;
@protocol MTLDeadlineProfile, MTLCommandBuffer, MTLCommandEncoder, MTLLogState, MTLCommandQueue, MTLBuffer;

@interface _MTLCommandBuffer : _MTLObjectWithLabel {
    id<MTLCommandEncoder> _currentCommandEncoder;
    struct MTLDispatch { struct MTLDispatch *x0; id /* block */ x1; } *_scheduledDispatchList;
    struct MTLDispatch { struct MTLDispatch *x0; id /* block */ x1; } *_scheduledDispatchListTail;
    struct MTLDispatch { struct MTLDispatch *x0; id /* block */ x1; } *_completedDispatchList;
    struct MTLDispatch { struct MTLDispatch *x0; id /* block */ x1; } *_completedDispatchListTail;
    struct MTLSyncDispatch { struct MTLSyncDispatch *x0; id /* block */ x1; } *_syncDispatchList;
    struct MTLSyncDispatch { struct MTLSyncDispatch *x0; id /* block */ x1; } *_syncDispatchListTail;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _mutex;
    struct _opaque_pthread_cond_t { long long __sig; char __opaque[40]; } _completedCond;
    struct _opaque_pthread_cond_t { long long __sig; char __opaque[40]; } _scheduledCond;
    unsigned long long _creationTime;
    unsigned long long _enqueueTime;
    unsigned long long _commitTime;
    unsigned long long _submitToKernelTime;
    unsigned long long _submitToHardwareTime;
    unsigned long long _completionInterruptTime;
    unsigned long long _completionHandlerEnqueueTime;
    unsigned long long _completionHandlerExecutionTime;
    NSError *_error;
    BOOL _skipRender;
    BOOL _profilingEnabled;
    BOOL _scheduledCallbacksDone;
    BOOL _completedCallbacksDone;
    char _strongObjectReferences;
    NSDictionary *_profilingResults;
    NSMutableDictionary *_userDictionary;
    unsigned long long _kernelStartTime;
    unsigned long long _kernelEndTime;
    unsigned long long _gpuStartTime;
    unsigned long long _gpuEndTime;
    unsigned long long _numRequestedCounters;
    unsigned long long _numInternalSampleCounters;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _sampleLock;
    char _wakeOnCommit;
    NSMutableArray *_retainedObjects;
    char _needsCommandBufferSemaphoreSignal;
    id<MTLLogState> _logState;
    unsigned long long _labelTraceID;
    id /* block */ _perfSampleHandlerBlock;
    unsigned long long _samplesPerStorageBlock;
    unsigned long long _totalNumStatSamples;
    NSMutableArray *_sampleStorage;
    struct MTLStatSampleRec { void *x0; unsigned long long x1; unsigned long long x2[0]; } *_samples;
    struct MTLStatSampleRec { void *x0; unsigned long long x1; unsigned long long x2[0]; } *_currentSample;
    BOOL _hasPresent;
    id<MTLBuffer> _progressBuffer;
    unsigned int _progressOffset;
    BOOL _creatingProgressEncoder;
    BOOL _needsFrameworkAssistedErrorTracking;
    NSMutableArray *_encoderInfos;
    NSArray *_logs;
    unsigned long long _numPresentWaits;
    BOOL _requiresBindingLogState;
    char _didComplete;
}

@property (readonly) char retainedReferences;
@property (readonly) char synchronousDebugMode;
@property (readonly) _MTLCommandQueue<MTLCommandQueue> *commandQueue;
@property (readonly) unsigned long long status;
@property (copy) NSString *label;
@property (readonly) NSError *error;
@property (getter=isProfilingEnabled) char profilingEnabled;
@property (readonly) NSDictionary *profilingResults;
@property (readonly) unsigned long long globalTraceObjectID;
@property (nonatomic) id<MTLBuffer> privateData;
@property (nonatomic) unsigned long long privateDataOffset;
@property (nonatomic) id<MTLBuffer> privateLoggingBuffer;
@property (retain, nonatomic) NSArray *logs;
@property (readonly, nonatomic) double kernelStartTime;
@property (readonly, nonatomic) double kernelEndTime;
@property (readonly, nonatomic) double GPUStartTime;
@property (readonly, nonatomic) double GPUEndTime;
@property (readonly, nonatomic) NSMutableDictionary *userDictionary;
@property (nonatomic, getter=isStatEnabled) char StatEnabled;
@property (nonatomic) unsigned long long numThisCommandBuffer;
@property (nonatomic) unsigned long long numEncoders;
@property (readonly, nonatomic, getter=getListIndex) unsigned long long listIndex;
@property (nonatomic, getter=getStatOptions) unsigned long long StatOptions;
@property (nonatomic, getter=getStatLocations) unsigned long long StatLocations;
@property (nonatomic) _MTLCommandBuffer<MTLCommandBuffer> *statCommandBuffer;
@property (nonatomic) unsigned long long internalCounterSampleSize;
@property (nonatomic) char ownedByParallelEncoder;
@property (nonatomic) char sharedIndirectionTable;
@property (readonly, retain) id<MTLDeadlineProfile> deadlineProfile;
@property (nonatomic) unsigned long long errorOptions;

+ (void)initialize;

- (void)dealloc;
- (id)description;
- (void)addSynchronizationNotification:(id /* block */)a0;
- (void)enqueue;
- (void)pushDebugGroup:(id)a0;
- (void)useInternalResidencySets:(const id *)a0 count:(unsigned long long)a1;
- (id)accelerationStructureCommandEncoder;
- (id)accelerationStructureCommandEncoderWithDescriptor:(id)a0;
- (void)addCompletedHandler:(id /* block */)a0;
- (void)addScheduledHandler:(id /* block */)a0;
- (id)blitCommandEncoderWithDescriptor:(id)a0;
- (void)commit;
- (void)commitAndHold;
- (char)commitAndWaitUntilSubmitted;
- (char)commitAndWaitUntilSubmittedWithDeadline:(unsigned long long)a0;
- (void)commitWithDeadline:(unsigned long long)a0;
- (id)computeCommandEncoderWithDescriptor:(id)a0;
- (id)computeCommandEncoderWithDispatchType:(unsigned long long)a0;
- (void)configWithCommandBufferDescriptor:(id)a0;
- (void *)debugBufferContentsWithLength:(unsigned long long *)a0;
- (void)encodeConditionalAbortEvent:(id)a0;
- (void)encodeDashboardFinalizeForResourceGroup:(id)a0 dashboard:(unsigned long long)a1 value:(unsigned long long)a2 forIndex:(unsigned long long)a3;
- (void)encodeDashboardFinalizeForResourceGroup:(id)a0 dashboard:(unsigned long long)a1 values:(const unsigned long long *)a2 indices:(const unsigned long long *)a3 count:(unsigned long long)a4;
- (void)encodeDashboardTagForResourceGroup:(id)a0;
- (void)encodeSignalEvent:(id)a0 value:(unsigned long long)a1 agentMask:(unsigned long long)a2;
- (void)executeSynchronizationNotifications:(int)a0;
- (void)executeSynchronizationNotifications:(int)a0 scope:(unsigned long long)a1 resources:(const id *)a2 count:(unsigned long long)a3;
- (id)formattedDescription:(unsigned long long)a0;
- (char)isCommitted;
- (void)popDebugGroup;
- (void)presentDrawable:(id)a0;
- (void)presentDrawable:(id)a0 afterMinimumDuration:(double)a1;
- (void)presentDrawable:(id)a0 atTime:(double)a1;
- (void)presentDrawable:(id)a0 options:(id)a1;
- (id)resourceStateCommandEncoderWithDescriptor:(id)a0;
- (void)setResponsibleTaskIDs:(const unsigned int *)a0 count:(unsigned int)a1;
- (char)skipRender;
- (void)useInternalResidencySet:(id)a0;
- (void)useResidencySet:(id)a0;
- (void)useResidencySets:(const id *)a0 count:(unsigned long long)a1;
- (void)waitUntilCompleted;
- (void)waitUntilScheduled;
- (void)_addRetainedObject:(id)a0;
- (void)bindLogState;
- (void)commitAndReset;
- (void)didCompleteWithStartTime:(unsigned long long)a0 endTime:(unsigned long long)a1 error:(id)a2;
- (void)didSchedule:(unsigned long long)a0 error:(id)a1;
- (void)didScheduleWithStartTime:(unsigned long long)a0 endTime:(unsigned long long)a1 error:(id)a2;
- (unsigned long long)getAndIncrementNumEncoders;
- (void)getDriverEncoderInfoData:(id)a0;
- (void)initProgressTracking;
- (id)initWithQueue:(id)a0 retainedReferences:(char)a1;
- (id)initWithQueue:(id)a0 retainedReferences:(char)a1 synchronousDebugMode:(char)a2;
- (void)kernelSubmitTime;
- (struct MTLStatSampleRec { void *x0; unsigned long long x1; unsigned long long x2[0]; } *)newSample;
- (void)postProcessCommandbuffer;
- (void)postProcessSamples:(struct MTLStatSampleRec { void *x0; unsigned long long x1; unsigned long long x2[0]; } *)a0 toUserDst:(unsigned long long *)a1 numSamples:(unsigned long long)a2;
- (void)processEncoderInfos;
- (id)progressTrackingBlitCommandEncoder;
- (id)progressTrackingComputeCommandEncoder;
- (id)progressTrackingRenderCommandEncoder;
- (void)runPerfCounterCallbackWithBlock:(id /* block */)a0;
- (void)setCommitted:(char)a0;
- (void)setCurrentCommandEncoder:(id)a0;
- (void)signalCommandBufferAvailable;

@end
