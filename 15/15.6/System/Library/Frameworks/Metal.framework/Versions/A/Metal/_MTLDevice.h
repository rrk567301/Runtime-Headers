@class MTLCompiler, NSDictionary, NSObject, MTLTargetDeviceArchitecture, NSMutableArray, MTLArchitecture, MTLDeviceFeatureQueries, MTLLoader, NSString, MTLGPUBVHBuilder, MTLLogStateDescriptor, NSArray, MTLResourceListPool;
@protocol MTLComputePipelineState, OS_dispatch_data, MTLLogState, OS_dispatch_queue, MTLRenderPipelineState;

@interface _MTLDevice : NSObject {
    struct { unsigned int maxFramebufferStorageBits; unsigned int linearTextureArrayAlignmentBytes; unsigned int linearTextureArrayAlignmentSlice; unsigned int maxTileBuffers; unsigned int maxTileTextures; unsigned int maxTileSamplers; unsigned int maxTileInlineDataSize; unsigned int minTilePixels; unsigned int maxColorAttachments; unsigned int maxVertexAttributes; unsigned int maxVertexBuffers; unsigned int maxVertexTextures; unsigned int maxVertexSamplers; unsigned int maxVertexInlineDataSize; unsigned int maxInterpolants; unsigned int maxFragmentBuffers; unsigned int maxFragmentTextures; unsigned int maxFragmentSamplers; unsigned int maxFragmentInlineDataSize; unsigned int maxComputeBuffers; unsigned int maxComputeTextures; unsigned int maxComputeSamplers; unsigned int maxComputeInlineDataSize; unsigned int maxComputeLocalMemorySizes; unsigned int maxTotalComputeThreadsPerThreadgroup; unsigned int maxComputeThreadgroupMemory; float maxLineWidth; float maxPointSize; unsigned int maxVisibilityQueryOffset; unsigned int padmaxBufferLength; unsigned int minConstantBufferAlignmentBytes; unsigned int minBufferNoCopyAlignmentBytes; unsigned int maxTextureWidth1D; unsigned int maxTextureWidth2D; unsigned int maxTextureHeight2D; unsigned int maxTextureWidth3D; unsigned int maxTextureHeight3D; unsigned int maxTextureDepth3D; unsigned int maxTextureDimensionCube; unsigned int maxTextureLayers; unsigned int linearTextureAlignmentBytes; unsigned int iosurfaceTextureAlignmentBytes; unsigned int iosurfaceReadOnlyTextureAlignmentBytes; unsigned int deviceLinearTextureAlignmentBytes; unsigned int deviceLinearReadOnlyTextureAlignmentBytes; unsigned int maxFunctionConstantIndices; unsigned int maxComputeThreadgroupMemoryAlignmentBytes; unsigned int maxInterpolatedComponents; unsigned int maxTessellationFactor; unsigned int maxIndirectBuffers; unsigned int maxIndirectTextures; unsigned int maxIndirectSamplers; unsigned int maxIndirectSamplersPerDevice; unsigned int maxFenceInstances; unsigned int maxViewportCount; unsigned int maxCustomSamplePositions; unsigned int maxVertexAmplificationFactor; unsigned int maxVertexAmplificationCount; unsigned int maxTextureBufferWidth; unsigned int maxComputeAttributes; unsigned int maxIOCommandsInFlight; unsigned int maxPredicatedNestingDepth; unsigned int maxAccelerationStructureLevels; unsigned int maxConstantBufferArguments; unsigned long long maxBufferLength; } _limits;
    void *_supportedGPUFamilies;
    NSObject<OS_dispatch_queue> *_pipelineSerializationQueue;
    char _hasInitSerializationPaths;
    struct MTLCompilerConnectionManager { void /* function */ **x0; int x1; BOOL x2; int x3; } *_compilerConnectionManager;
    NSMutableArray *_progressTrackBufferStack;
    BOOL _needsEncoderTypeMatchingProgressBlits;
    id<MTLRenderPipelineState> _progressTrackRenderPipeline;
    id<MTLComputePipelineState> _progressTrackComputePipeline;
    id<MTLComputePipelineState> _emulationObjectPrefixSumPSO;
    id<MTLComputePipelineState> _emulationNoObjectPrefixSumPSO;
    id<MTLComputePipelineState> _emulationMeshPrefixSum1PSO;
    id<MTLComputePipelineState> _emulationMeshPrefixSum2PSO;
    id<MTLComputePipelineState> _emulationMeshPrefixSum3PSO;
    MTLDeviceFeatureQueries *_featureQueries;
    MTLLogStateDescriptor *_logStateDescriptor;
    _Atomic int _commandQueueCount;
    _Atomic unsigned int _commandQueueID;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _commandQueueWaitLock;
    NSMutableArray *_nextCommandQueueAllowedDateBuffer;
    unsigned int _kRateLimitCriticalCommandQueues;
    double _kRateLimitTimePenalty;
    BOOL _kRateLimitEnabled;
    BOOL _kRateLimitShouldOnlyLogOnce;
    void *_libraryBuilder;
    struct MTLPipelineLibraryBuilder { id x0; id x1; } *_pipelineLibraryBuilder;
    void *_pipelineCollection;
    NSString *_pipelineDescriptorsOutputFile;
    NSString *_librariesOutputDirectory;
    char _collectAllLibraries;
    char _gpuAssertionsEnabled;
    MTLLoader *_dynamicLoader;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _GPUBVHBuilderLock;
    MTLGPUBVHBuilder *_GPUBVHBuilder;
    MTLResourceListPool *_akIOResourceListPool;
    struct once_flag { unsigned long long __state_; } _initProgressTrackingOnceToken;
    struct once_flag { unsigned long long __state_; } _initMeshShaderEmulatorPrefixSumKernelsOnceToken;
    NSDictionary *_pluginData;
    NSObject<OS_dispatch_data> *_serializedPluginData;
    struct MTLArchiveMapDB { struct MDB_env *x0; unsigned int x1; BOOL x2; BOOL x3; } *_recompiledBinaryArchiveMap;
    struct MTLArchiveUsageDB { struct MDB_env *x0; unsigned int x1; BOOL x2; BOOL x3; } *_binaryArchiveUsage;
    BOOL _isFirstParty;
    BOOL _isPlugin;
    BOOL _enableAssetUpgraderDaemon;
    MTLArchitecture *_architecture;
    struct once_flag { unsigned long long __state_; } _initConnectionOnceToken;
    BOOL _workaroundNewLibraryWithSourceImplicitInvariantPosition;
    BOOL _workaroundNewLibraryWithSourceReplaceFastMathWithRelaxedMath;
    struct once_flag { unsigned long long __state_; } _initDefaultLogState;
}

@property (readonly) char workaroundNewLibraryWithSourceImplicitInvariantPosition;
@property (readonly) char workaroundNewLibraryWithSourceReplaceFastMathWithRelaxedMath;
@property (readonly, nonatomic) char supportsBufferlessClientStorageTexture;
@property (readonly, nonatomic) char supportsComputeMemoryBarrier;
@property (readonly, nonatomic) char supportsRenderMemoryBarrier;
@property (readonly, nonatomic) char supportsPartialRenderMemoryBarrier;
@property (readonly, nonatomic) char supportsArgumentBuffersTier2;
@property (readonly, nonatomic) char supportsReadWriteTextureArgumentsTier2;
@property (readonly, nonatomic) char supportsStreamingCodecSignaling;
@property (readonly, nonatomic) char supportsProgrammableSamplePositions;
@property (readonly, nonatomic) char supportsLargeFramebufferConfigs;
@property (readonly, nonatomic) char supportsCustomBorderColor;
@property (readonly, nonatomic) char supportsSamplerAddressModeClampToHalfBorder;
@property (readonly, nonatomic) char supportsBCTextureCompression;
@property (readonly, nonatomic) char supports3DBCTextures;
@property (readonly, nonatomic) char supportsRGBA10A2Gamma;
@property (readonly, nonatomic) char supportsBGR10A2;
@property (readonly, nonatomic) char supportsPrimitiveRestartOverride;
@property (readonly, nonatomic) char supportsGlobalVariableRelocation;
@property (readonly, nonatomic) char supportsGlobalVariableRelocationRender;
@property (readonly, nonatomic) char supportsGlobalVariableRelocationCompute;
@property (readonly, nonatomic) char supportsTLS;
@property (readonly, nonatomic) char supportsGlobalVariableBindings;
@property (readonly, nonatomic) char supportsGlobalVariableBindingInDylibs;
@property (readonly, nonatomic) char supports32bpcMSAATextures;
@property (readonly, nonatomic) char supports32BitMSAA;
@property (readonly, nonatomic) char supports32BitFloatFiltering;
@property (readonly, nonatomic) char supportsQueryTextureLOD;
@property (readonly, nonatomic) char supportsVertexAmplification;
@property (readonly, nonatomic) char supportsSamplerReductionMode;
@property (readonly, nonatomic) char supportsPlacementHeaps;
@property (readonly, nonatomic) char supportsOpenCLTextureWriteSwizzles;
@property (readonly, nonatomic) char supportsPullModelInterpolation;
@property (readonly, nonatomic) char supportsInt64;
@property (readonly, nonatomic) char supportsFixedLinePointFillDepthGradient;
@property (readonly, nonatomic) char supportsLateEvalEvent;
@property (readonly, nonatomic) char supportsNonZeroTextureWriteLOD;
@property (readonly, nonatomic) char supportsSharedTextureHandles;
@property (readonly, nonatomic) char supportsBufferPrefetchStatistics;
@property (readonly, nonatomic) char supportsLimitedYUVFormats;
@property (readonly, nonatomic) char supportsNonPrivateDepthStencilTextures;
@property (readonly, nonatomic) char supportsNonPrivateMSAATextures;
@property (readonly, nonatomic) char supportsSharedStorageHeapResources;
@property (readonly, nonatomic) char supportsSharedStorageTextures;
@property (readonly, nonatomic) char supportsLinearTextureFromSharedBuffer;
@property (readonly, nonatomic) char supportsPipelineLibraries;
@property (readonly, nonatomic) char supportsFragmentOnlyEncoders;
@property (readonly, nonatomic) char supportsBufferWithIOSurface;
@property (readonly, nonatomic) char supportsProgrammableBlending;
@property (readonly, nonatomic) char supportsRenderToLinearTextures;
@property (readonly, nonatomic) char supportsMemorylessRenderTargets;
@property (readonly, nonatomic) char supportsFastMathInfNaNPropagation;
@property (readonly, nonatomic) char supportsInvariantVertexPosition;
@property (readonly, nonatomic) char supportsShaderLODAverage;
@property (readonly, nonatomic) char supportsRelaxedTextureViewRequirements;
@property (readonly, nonatomic) char supportsSeparateDepthStencil;
@property (readonly, nonatomic) char supportsGPUStatistics;
@property (readonly, nonatomic) char supportsCompressedTextureViewSPI;
@property (readonly, nonatomic) char supportsRenderTargetTextureRotation;
@property (readonly, nonatomic) char supportsDynamicControlPointCount;
@property (readonly, nonatomic) char supportsIABHashForTools;
@property (readonly, nonatomic) char supportsBinaryArchives;
@property (readonly, nonatomic) char supportsBinaryLibraries;
@property (readonly, nonatomic) char supportsDeadlineProfile;
@property (readonly, nonatomic) char supportsFillTexture;
@property (readonly, nonatomic) char supportsSetThreadgroupPackingDisabled;
@property (readonly, nonatomic) char supportsASTCTextureCompression;
@property (readonly, nonatomic) char supportsExtendedYUVFormats;
@property (readonly, nonatomic) char supportsPublicXR10Formats;
@property (readonly, nonatomic) char supportsSRGBwrites;
@property (readonly, nonatomic) char supportsDepthClipMode;
@property (readonly, nonatomic) char supportsResourceHeaps;
@property (readonly, nonatomic) char supportsArgumentBuffers;
@property (readonly, nonatomic) char supportsPacked32TextureBufferWrites;
@property (readonly, nonatomic) char supports3DASTCTextures;
@property (readonly, nonatomic) char supportsExtendedXR10Formats;
@property (readonly, nonatomic) char supportsFragmentBufferWrites;
@property (readonly, nonatomic) char supportsCountingOcclusionQuery;
@property (readonly, nonatomic) char supportsBaseVertexInstanceDrawing;
@property (readonly, nonatomic) char supportsIndirectDrawAndDispatch;
@property (readonly, nonatomic) char supportsTessellation;
@property (readonly, nonatomic) char supportsReadWriteBufferArguments;
@property (readonly, nonatomic) char supportsArrayOfTextures;
@property (readonly, nonatomic) char supportsArrayOfSamplers;
@property (readonly, nonatomic) char supportsCombinedMSAAStoreAndResolveAction;
@property (readonly, nonatomic) char supportsMutableTier1ArgumentBuffers;
@property (readonly, nonatomic) char supportsSamplerCompareFunction;
@property (readonly, nonatomic) char supportsMSAADepthResolve;
@property (readonly, nonatomic) char supportsMSAAStencilResolve;
@property (readonly, nonatomic) char supportsMSAADepthResolveFilter;
@property (readonly, nonatomic) char supportsGFXIndirectCommandBuffers;
@property (readonly, nonatomic) char supportsCMPIndirectCommandBuffers;
@property (readonly, nonatomic) char supportsIndirectStageInRegion;
@property (readonly, nonatomic) char supportsIndirectTextures;
@property (readonly, nonatomic) char supportsNorm16BCubicFiltering;
@property (readonly, nonatomic) char supportsTextureOutOfBoundsReads;
@property (readonly, nonatomic) char supportsTextureSwizzle;
@property (readonly, nonatomic) char supportsAlphaYUVFormats;
@property (readonly, nonatomic) char supportsMemoryOrderAtomics;
@property (readonly, nonatomic) char supportsQuadGroup;
@property (readonly, nonatomic) char supportsRenderTextureWrites;
@property (readonly, nonatomic) char supportsImageBlocks;
@property (readonly, nonatomic) char supportsTileShaders;
@property (readonly, nonatomic) char supportsImageBlockSampleCoverageControl;
@property (readonly, nonatomic) char supportsNativeHardwareFP16;
@property (readonly, nonatomic) char supportsPostDepthCoverage;
@property (readonly, nonatomic) char supportsMipLevelsSmallerThanBlockSize;
@property (readonly, nonatomic) char supportsNonUniformThreadgroupSize;
@property (readonly, nonatomic) char supportsReadWriteTextureArguments;
@property (readonly, nonatomic) char supportsReadWriteTextureCubeArguments;
@property (readonly, nonatomic) char supportsTextureCubeArray;
@property (readonly, nonatomic) char supportsQuadShufflesAndBroadcast;
@property (readonly, nonatomic) char supportsConcurrentComputeDispatch;
@property (readonly, nonatomic) char supportsRenderPassWithoutRenderTarget;
@property (readonly, nonatomic) char supportsRasterOrderGroups;
@property (readonly, nonatomic) char supportsRasterOrderGroupsColorAttachment;
@property (readonly, nonatomic) char supportsDynamicAttributeStride;
@property (readonly, nonatomic) char supportsLinearTexture2DArray;
@property (readonly, nonatomic) char supportsNonSquareTileShaders;
@property (readonly, nonatomic) char supportsSeparateVisibilityAndShadingRate;
@property (readonly, nonatomic) char supports2DLinearTexArraySPI;
@property (readonly, nonatomic) char supportsLayeredRendering;
@property (readonly, nonatomic) char supportsViewportAndScissorArray;
@property (readonly, nonatomic) char supportsIndirectTessellation;
@property (readonly, nonatomic) char supportsMSAAStencilResolveFilter;
@property (readonly, nonatomic) char supportsStencilFeedback;
@property (readonly, nonatomic) char supportsFP32TessFactors;
@property (readonly, nonatomic) char supportsUnalignedVertexFetch;
@property (readonly, nonatomic) char supportsExtendedVertexFormats;
@property (readonly, nonatomic) char supportsResourceDetachBacking;
@property (readonly, nonatomic) char supportsBufferWithAddressRanges;
@property (readonly, nonatomic) char supportsHeapWithAddressRanges;
@property (readonly, nonatomic) char supportsSIMDGroup;
@property (readonly, nonatomic) char supportsShaderMinLODClamp;
@property (readonly, nonatomic) char supportsSIMDShufflesAndBroadcast;
@property (readonly, nonatomic) char supportsWritableArrayOfTextures;
@property (readonly, nonatomic) char supportsVariableRateRasterization;
@property (readonly, nonatomic) char supportsYCBCRFormats;
@property (readonly, nonatomic) char supportsYCBCRFormatsPQ;
@property (readonly, nonatomic) char supportsYCBCRFormats12;
@property (readonly, nonatomic) char supportsYCBCRFormatsXR;
@property (readonly, nonatomic) char supportsASTCHDRTextureCompression;
@property (readonly, nonatomic) char supportsSparseTextures;
@property (readonly, nonatomic) char supportsSparseHeaps;
@property (readonly, nonatomic) char supportsIndirectWritableTextures;
@property (readonly, nonatomic) char supportsFunctionPointers;
@property (readonly, nonatomic) char supportsDynamicLibraries;
@property (readonly, nonatomic) char supportsStatefulDynamicLibraries;
@property (readonly, nonatomic) char supportsRenderDynamicLibraries;
@property (readonly, nonatomic) char supportsFunctionPointersFromRender;
@property (readonly, nonatomic) char supportsSharedFunctionTables;
@property (readonly, nonatomic) char supportsRaytracingFromRender;
@property (readonly, nonatomic) char supportsPrimitiveMotionBlur;
@property (readonly, nonatomic) char supportsRayTracingExtendedVertexFormats;
@property (readonly, nonatomic) char supportsHeapAccelerationStructureAllocation;
@property (readonly, nonatomic) char supportsRayTracingPerPrimitiveData;
@property (readonly, nonatomic) char supportsRayTracingTraversalMetrics;
@property (readonly, nonatomic) char supportsRayTracingBuffersFromTables;
@property (readonly, nonatomic) char supportsRayTracingAccelerationStructureCPUDeserialization;
@property (readonly, nonatomic) char supportsRayTracingMultiLevelInstancing;
@property (readonly, nonatomic) char supportsRayTracingIndirectInstanceAccelerationStructureBuild;
@property (readonly, nonatomic) char supportsRayTracingGPUTableUpdateBuffers;
@property (readonly, nonatomic) char supportsRayTracingCurves;
@property (readonly, nonatomic) char supportsShaderBarycentricCoordinates;
@property (readonly, nonatomic) char supportsBlackOrWhiteSamplerBorderColors;
@property (readonly, nonatomic) char supportsMirrorClampToEdgeSamplerMode;
@property (readonly, nonatomic) char supportsSIMDReduction;
@property (readonly, nonatomic) char supportsDepthClipModeClampExtended;
@property (readonly, nonatomic) char supportsTexture2DMultisampleArray;
@property (readonly, nonatomic) char supportsForceSeamsOnCubemaps;
@property (readonly, nonatomic) char supportsFloat16BCubicFiltering;
@property (readonly, nonatomic) char supportsFloat16InfNanFiltering;
@property (readonly, nonatomic) char supportsRTZRounding;
@property (readonly, nonatomic) char supportsAnisoSampleFix;
@property (readonly, nonatomic) char supportsYCBCRPackedFormatsPQ;
@property (readonly, nonatomic) char supportsYCBCRPackedFormats12;
@property (readonly, nonatomic) char supportsYCBCRPackedFormatsXR;
@property (readonly, nonatomic) char supportsBufferBoundsChecking;
@property (readonly, nonatomic) char supportsForkJoin;
@property (readonly, nonatomic) char supportsDevicePartitioning;
@property (readonly, nonatomic) char supportsComputeCompressedTextureWrite;
@property (readonly, nonatomic) char supportsSIMDGroupMatrix;
@property (readonly, nonatomic) char supportsInterchangeTiled;
@property (readonly, nonatomic) char supportsQuadReduction;
@property (readonly, nonatomic) char supportsVirtualSubstreams;
@property (readonly, nonatomic) char supportsSIMDShuffleAndFill;
@property (readonly, nonatomic) char supportsBfloat16Format;
@property (readonly, nonatomic) char supportsSparseDepthAttachments;
@property (readonly, nonatomic) char supportsAtomicUlongVoidMinMax;
@property (readonly, nonatomic) char supportsLossyCompression;
@property (readonly, nonatomic) char supportsAtomicFloat;
@property (readonly, nonatomic) char supportsMeshShaders;
@property (readonly, nonatomic) char supportsFunctionPointersFromMesh;
@property (readonly, nonatomic) char supportsMeshShadersInICB;
@property (readonly, nonatomic) char supportsMeshRenderDynamicLibraries;
@property (readonly, nonatomic) char supportsBfloat16Buffers;
@property (readonly, nonatomic) char supportsCommandBufferJump;
@property (readonly, nonatomic) char supportsColorSpaceConversionMatrixSelection;
@property (readonly, nonatomic) char supportsPerPlaneCompression;
@property (readonly, nonatomic) char supportsConditionalLoadStore;
@property (readonly, nonatomic) char supportsStackOverflowErrorCode;
@property (readonly, nonatomic) char supportsRayTracingICBs;
@property (readonly, nonatomic) char supportsPerformanceStateAssertion;
@property (readonly, nonatomic) char supportsExplicitVisibilityGroups;
@property (readonly, nonatomic) char supportsRayTracingMatrixLayout;
@property (readonly, nonatomic) char supportsRayTracingDirectIntersectionResultAccess;
@property (readonly, nonatomic) char supportsRayTracingPerComponentMotionInterpolation;
@property (readonly, nonatomic) char supportsExtendedSamplerLODBiasRange;
@property (readonly, nonatomic) char supportsDeviceCoherency;
@property (readonly) NSString *name;
@property char shaderDebugInfoCaching;
@property (readonly) unsigned long long bufferRobustnessSupport;
@property (readonly) unsigned long long deviceCreationFlags;
@property (readonly) const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; float x26; float x27; unsigned int x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; unsigned int x59; unsigned int x60; unsigned int x61; unsigned int x62; unsigned int x63; unsigned long long x64; } *limits;
@property (readonly) unsigned long long globalTraceObjectID;
@property (readonly) unsigned long long maxFramebufferStorageBits;
@property (readonly) unsigned long long linearTextureArrayAlignmentBytes;
@property (readonly) unsigned long long linearTextureArrayAlignmentSlice;
@property (readonly) unsigned long long maxTileBuffers;
@property (readonly) unsigned long long maxTileTextures;
@property (readonly) unsigned long long maxTileSamplers;
@property (readonly) unsigned long long maxTileInlineDataSize;
@property (readonly) unsigned long long minTilePixels;
@property (readonly) unsigned long long maxColorAttachments;
@property (readonly) unsigned long long maxVertexAttributes;
@property (readonly) unsigned long long maxVertexBuffers;
@property (readonly) unsigned long long maxVertexTextures;
@property (readonly) unsigned long long maxVertexSamplers;
@property (readonly) unsigned long long maxVertexInlineDataSize;
@property (readonly) unsigned long long maxInterpolants;
@property (readonly) unsigned long long maxFragmentBuffers;
@property (readonly) unsigned long long maxFragmentTextures;
@property (readonly) unsigned long long maxFragmentSamplers;
@property (readonly) unsigned long long maxFragmentInlineDataSize;
@property (readonly) unsigned long long maxComputeBuffers;
@property (readonly) unsigned long long maxComputeTextures;
@property (readonly) unsigned long long maxComputeSamplers;
@property (readonly) unsigned long long maxComputeInlineDataSize;
@property (readonly) unsigned long long maxComputeLocalMemorySizes;
@property (readonly) unsigned long long maxTotalComputeThreadsPerThreadgroup;
@property (readonly) unsigned long long maxComputeThreadgroupMemory;
@property (readonly) float maxLineWidth;
@property (readonly) float maxPointSize;
@property (readonly) unsigned long long maxVisibilityQueryOffset;
@property (readonly) unsigned long long minConstantBufferAlignmentBytes;
@property (readonly) unsigned long long minBufferNoCopyAlignmentBytes;
@property (readonly) unsigned long long maxTextureWidth1D;
@property (readonly) unsigned long long maxTextureWidth2D;
@property (readonly) unsigned long long maxTextureHeight2D;
@property (readonly) unsigned long long maxTextureWidth3D;
@property (readonly) unsigned long long maxTextureHeight3D;
@property (readonly) unsigned long long maxTextureDepth3D;
@property (readonly) unsigned long long maxTextureDimensionCube;
@property (readonly) unsigned long long maxTextureLayers;
@property (readonly) unsigned long long linearTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long maxFunctionConstantIndices;
@property (readonly) unsigned long long maxComputeThreadgroupMemoryAlignmentBytes;
@property (readonly) unsigned long long maxInterpolatedComponents;
@property (readonly) unsigned long long maxTessellationFactor;
@property (readonly) unsigned long long maxIndirectBuffers;
@property (readonly) unsigned long long maxIndirectTextures;
@property (readonly) unsigned long long maxIndirectSamplers;
@property (readonly) unsigned long long maxIndirectSamplersPerDevice;
@property (readonly) unsigned long long maxFenceInstances;
@property (readonly) unsigned long long maxViewportCount;
@property (readonly) unsigned long long maxCustomSamplePositions;
@property (readonly) unsigned long long maxVertexAmplificationFactor;
@property (readonly) unsigned long long maxVertexAmplificationCount;
@property (readonly) unsigned long long maxTextureBufferWidth;
@property (readonly) unsigned long long maxComputeAttributes;
@property (readonly) unsigned long long maxIOCommandsInFlight;
@property (readonly) unsigned long long maxPredicatedNestingDepth;
@property (readonly) unsigned long long maxAccelerationStructureLevels;
@property (readonly) unsigned long long maxConstantBufferArguments;
@property (readonly) unsigned long long maxBufferLength;
@property (readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property (readonly) NSObject<OS_dispatch_queue> *concurrentQueue;
@property (readonly) unsigned int acceleratorPort;
@property (readonly) int llvmVersion;
@property (readonly) MTLCompiler *compiler;
@property (readonly) struct IndirectArgumentBufferCapabilities { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned int x3 : 29; } indirectArgumentBufferCapabilities;
@property (readonly) unsigned long long readWriteTextureSupport;
@property (readonly) unsigned long long argumentBuffersSupport;
@property (readonly, getter=areRasterOrderGroupsSupported) char rasterOrderGroupsSupported;
@property (readonly, getter=isFloat32FilteringSupported) char float32FilteringSupported;
@property (readonly, getter=isBCTextureCompressionSupported) char BCTextureCompressionSupported;
@property (readonly, getter=isMsaa32bSupported) char msaa32bSupported;
@property (readonly, getter=isRGB10A2GammaSupported) char RGB10A2GammaSupported;
@property (readonly, getter=areBarycentricCoordsSupported) char barycentricCoordsSupported;
@property (readonly, getter=isRTZRoundingSupported) char RTZRoundingSupported;
@property (readonly) long long defaultTextureWriteRoundingMode;
@property (readonly, getter=isAnisoSampleFixSupported) char AnisoSampleFixSupported;
@property (readonly, getter=isFixedLinePointFillDepthGradientSupported) char FixedLinePointFillDepthGradientSupported;
@property (readonly) unsigned long long sparseTexturesSupport;
@property (readonly) unsigned long long sparseTileSizeInBytes;
@property (readonly) unsigned long long maxArgumentBufferSamplerCount;
@property (readonly) unsigned long long samplerReductionModeSupport;
@property (getter=areGPUAssertionsEnabled, setter=setGPUAssertionsEnabled:) char gpuAssertionsEnabled;
@property (getter=areWritableHeapsEnabled, setter=setWritableHeapsEnabled:) char writableHeapsEnabled;
@property (readonly, getter=isLargeMRTSupported) char largeMRTSupported;
@property (readonly) unsigned long long maxRasterizationRateLayerCount;
@property (readonly) NSArray *counterSets;
@property (readonly, getter=isPlacementHeapSupported) char placementHeapSupported;
@property (nonatomic) unsigned long long commandBufferErrorOptions;
@property (readonly) char supportsRaytracing;
@property (readonly) MTLGPUBVHBuilder *GPUBVHBuilder;
@property (readonly) char requiresRaytracingEmulation;
@property (readonly) unsigned long long latestSupportedGenericBVHVersion;
@property (readonly) const struct MTLTargetDeviceArch { unsigned long long x0; unsigned int x1; char *x2; } *targetDeviceInfo;
@property (readonly) MTLTargetDeviceArchitecture *targetDeviceArchitecture;
@property (readonly) char requiresMeshShaderEmulation;
@property (copy, nonatomic) NSDictionary *pluginData;
@property (readonly, nonatomic) long long currentPerformanceState;
@property (readonly) unsigned long long maxConcurrentExecutingCompilationTasks;
@property char shouldMaximizeConcurrentCompilation;
@property (readonly) unsigned long long maximumConcurrentCompilationTaskCount;
@property (readonly) unsigned long long maxAccelerationStructureTraversalDepth;
@property (readonly) char requiresBFloat16Emulation;
@property (readonly, nonatomic) id<MTLLogState> defaultLogState;

+ (char)featureProfile:(unsigned long long)a0 supportsFeatureSet:(unsigned long long)a1;
+ (char)useNewMaxThreadsPerThreadgroupBehavior;
+ (char)useNewPreciseFunctionBehavior;
+ (char)useNewPrimitiveRestartBehavior;

- (void)dealloc;
- (id)description;
- (id)init;
- (id).cxx_construct;
- (id)vendorName;
- (id)newCommandQueue;
- (id)newDynamicLibraryFromURL:(id)a0 error:(id *)a1;
- (void)newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (char)supportsFamily:(long long)a0;
- (id)newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)newDynamicLibraryWithURL:(id)a0 error:(id *)a1;
- (id)newLibraryWithDescriptor:(id)a0 error:(id *)a1;
- (id)newSharedTextureWithDescriptor:(id)a0;
- (id)_deviceWrapper;
- (char)_registerInterestNotification;
- (void)_removeRequested;
- (void)_setDeviceWrapper:(id)a0;
- (void)_wasRemoved;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })accelerationStructureSizesWithDescriptor:(id)a0;
- (void)allowLibrariesFromOtherPlatforms;
- (id)architecture;
- (char)areProgrammableSamplePositionsSupported;
- (unsigned long long)commandQueueLimit;
- (void)compileVisibleFunction:(id)a0 withDescriptor:(id)a1 completionHandler:(id /* block */)a2;
- (void)compileVisibleFunction:(id)a0 withDescriptor:(id)a1 destinationBinaryArchive:(id)a2 error:(id *)a3;
- (void)compileVisibleFunction:(id)a0 withDescriptor:(id)a1 error:(id *)a2;
- (void)compilerPropagatesThreadPriority:(BOOL)a0;
- (void)convertSparsePixelRegions:(const struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } *)a0 toTileRegions:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } *)a1 withTileSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a2 alignmentMode:(unsigned long long)a3 numRegions:(unsigned long long)a4;
- (void)convertSparseTileRegions:(const struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } *)a0 toPixelRegions:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } *)a1 withTileSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a2 numRegions:(unsigned long long)a3;
- (id)counterSets;
- (unsigned long long)currentCommandQueueCount;
- (void)deserializeCompileTimeStats:(id)a0 addToDictionary:(id)a1;
- (void)deserializeInstanceAccelerationStructure:(id)a0 fromBytes:(const void *)a1 primitiveAccelerationStructures:(id)a2 withDescriptor:(id)a3;
- (id)deserializeInstanceAccelerationStructureFromBytes:(void *)a0 primitiveAccelerationStructures:(id)a1 withDescriptor:(id)a2;
- (void)deserializePrimitiveAccelerationStructure:(id)a0 fromBytes:(const void *)a1 withDescriptor:(id)a2;
- (id)deserializePrimitiveAccelerationStructureFromBytes:(void *)a0 withDescriptor:(id)a1;
- (char)deviceOrFeatureProfileSupportsFeatureSet:(unsigned long long)a0;
- (char)deviceSupportsFeatureSet:(unsigned long long)a0;
- (id)endCollectingPipelineDescriptors;
- (id)familyName;
- (id)formattedDescription:(unsigned long long)a0;
- (struct os_unfair_lock_s { unsigned int x0; } *)getBVHBuilderLock;
- (struct MTLCompilerConnectionManager { void /* function */ **x0; int x1; BOOL x2; int x3; } *)getCompilerConnectionManager:(int)a0;
- (void)getDefaultSamplePositions:(struct { float x0; float x1; } *)a0 count:(unsigned long long)a1;
- (id)getMostCompatibleArchitecture:(id)a0;
- (id)getRawBVHBuilderPtr;
- (void *)getShaderCacheKeys;
- (unsigned long long)getSupportedCommandBufferErrorOptions;
- (struct { unsigned long long x0; unsigned long long x1; })heapAccelerationStructureSizeAndAlignWithDescriptor:(id)a0;
- (struct { unsigned long long x0; unsigned long long x1; })heapAccelerationStructureSizeAndAlignWithSize:(unsigned long long)a0;
- (struct IndirectArgumentBufferCapabilities { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned int x3 : 29; })indirectArgumentBufferCapabilities;
- (char)isASTCPixelFormatsSupported;
- (char)isClampToHalfBorderSupported;
- (char)isCompatibleWithAccelerationStructure:(struct { unsigned int x0; unsigned int x1; })a0;
- (char)isCustomBorderColorSupported;
- (char)isFramebufferReadSupported;
- (char)isMagicMipmapSupported;
- (char)isQuadDataSharingSupported;
- (char)isVendorSliceCompatibleWithDeploymentTarget:(unsigned int)a0 platform:(unsigned int)a1 sdkVersion:(unsigned int)a2 compilerPluginVersion:(unsigned int)a3;
- (struct { unsigned int x0; unsigned int x1; })libraryCacheStats;
- (id)loadDynamicLibrariesForComputeDescriptor:(id)a0 error:(id *)a1;
- (id)loadDynamicLibrariesForComputeDescriptor:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (id)loadDynamicLibrariesForFunction:(id)a0 insertLibraries:(id)a1 error:(id *)a2;
- (id)loadDynamicLibrariesForFunction:(id)a0 insertLibraries:(id)a1 options:(unsigned long long)a2 error:(id *)a3;
- (id)lookupRecompiledBinaryArchive:(id)a0;
- (unsigned long long)maxRasterizationRateLayerCount;
- (unsigned int)maximumComputeSubstreams;
- (unsigned long long)minLinearTextureAlignmentForPixelFormat:(unsigned long long)a0;
- (unsigned long long)minLinearTextureBaseAddressAlignmentForDescriptor:(id)a0;
- (unsigned long long)minLinearTexturePitchAlignmentForDescriptor:(id)a0 mustMatchExactly:(unsigned long long *)a1;
- (unsigned long long)minimumLinearTextureAlignmentForPixelFormat:(unsigned long long)a0;
- (id)motionEstimatorCapabilities;
- (id)newAccelerationStructureWithBuffer:(id)a0 offset:(unsigned long long)a1;
- (id)newAccelerationStructureWithBuffer:(id)a0 offset:(unsigned long long)a1 resourceIndex:(unsigned long long)a2;
- (id)newAccelerationStructureWithDescriptor:(id)a0;
- (id)newAccelerationStructureWithSize:(unsigned long long)a0;
- (id)newAccelerationStructureWithSize:(unsigned long long)a0 resourceIndex:(unsigned long long)a1;
- (id)newAccelerationStructureWithSize:(unsigned long long)a0 withDescriptor:(id)a1;
- (id)newArgumentEncoderWithArguments:(id)a0;
- (id)newArgumentEncoderWithArguments:(id)a0 structType:(id *)a1;
- (id)newArgumentEncoderWithBufferBinding:(id)a0;
- (id)newArgumentEncoderWithLayout:(id)a0;
- (id)newBinaryArchiveWithDescriptor:(id)a0 error:(id *)a1;
- (id)newBinaryLibraryWithOptions:(unsigned long long)a0 url:(id)a1 error:(id *)a2;
- (id)newCommandQueueWithDescriptor:(id)a0;
- (id)newCommandQueueWithMaxCommandBufferCount:(unsigned long long)a0;
- (id)newComputePipelineDescriptorWithSerializedData:(id)a0 deserializationContext:(id)a1;
- (void)newComputePipelineStateWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)newComputePipelineStateWithDescriptor:(id)a0 error:(id *)a1;
- (void)newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (void)newComputePipelineStateWithFunction:(id)a0 completionHandler:(id /* block */)a1;
- (id)newComputePipelineStateWithFunction:(id)a0 error:(id *)a1;
- (void)newComputePipelineStateWithFunction:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newComputePipelineStateWithFunction:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)newComputePipelineStateWithImageFilterFunctionsSPI:(id)a0 imageFilterFunctionInfo:(const struct { BOOL x0; unsigned long long x1; struct *x2; } *)a1 error:(id *)a2;
- (id)newCounterSampleBufferWithDescriptor:(id)a0 error:(id *)a1;
- (id)newDagStringWithGraphs:(id)a0;
- (id)newDefaultLibrary;
- (id)newDefaultLibraryWithBundle:(id)a0 error:(id *)a1;
- (id)newDynamicLibrary:(id)a0 computeDescriptor:(id)a1 error:(id *)a2;
- (id)newDynamicLibrary:(id)a0 error:(id *)a1;
- (id)newDynamicLibraryWithDescriptor:(id)a0 error:(id *)a1;
- (id)newDynamicLibraryWithURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (id)newEvent;
- (id)newEventWithOptions:(long long)a0;
- (id)newFunctionWithGLCoreIR:(void *)a0 functionType:(unsigned long long)a1;
- (id)newFunctionWithGLCoreIR:(void *)a0 inputsDescription:(id)a1 functionType:(unsigned long long)a2;
- (id)newFunctionWithGLESIR:(void *)a0 functionType:(unsigned long long)a1;
- (id)newFunctionWithGLESIR:(void *)a0 inputsDescription:(id)a1 functionType:(unsigned long long)a2;
- (id)newFunctionWithGLIR:(void *)a0 functionType:(unsigned long long)a1;
- (id)newFunctionWithGLIR:(void *)a0 inputsDescription:(id)a1 functionType:(unsigned long long)a2;
- (id)newIOCommandQueueWithDescriptor:(id)a0 error:(id *)a1;
- (id)newIOFileHandleWithURL:(id)a0 compressionMethod:(long long)a1 error:(id *)a2;
- (id)newIOFileHandleWithURL:(id)a0 error:(id *)a1;
- (id)newIOHandleWithURL:(id)a0 compressionMethod:(long long)a1 error:(id *)a2;
- (id)newIOHandleWithURL:(id)a0 compressionType:(long long)a1 error:(id *)a2;
- (id)newIOHandleWithURL:(id)a0 error:(id *)a1;
- (id)newLateEvalEvent;
- (id)newLibraryWithCIFilters:(id)a0 imageFilterFunctionInfo:(const struct { BOOL x0; unsigned long long x1; struct *x2; } *)a1 error:(id *)a2;
- (id)newLibraryWithDAG:(id)a0 functions:(id)a1 error:(id *)a2;
- (id)newLibraryWithData:(id)a0 error:(id *)a1;
- (void)newLibraryWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)newLibraryWithDescriptorSPI:(id)a0 error:(id *)a1;
- (id)newLibraryWithFile:(id)a0 error:(id *)a1;
- (id)newLibraryWithImageFilterFunctionsSPI:(id)a0 imageFilterFunctionInfo:(const struct { BOOL x0; unsigned long long x1; struct *x2; } *)a1 error:(id *)a2;
- (void)newLibraryWithSource:(id)a0 options:(id)a1 completionHandler:(id /* block */)a2;
- (id)newLibraryWithSource:(id)a0 options:(id)a1 error:(id *)a2;
- (void)newLibraryWithStitchedDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)newLibraryWithStitchedDescriptor:(id)a0 error:(id *)a1;
- (id)newLibraryWithStitchedDescriptorSPI:(id)a0 error:(id *)a1;
- (id)newLibraryWithURL:(id)a0 error:(id *)a1;
- (id)newLogStateWithDescriptor:(id)a0 error:(id *)a1;
- (id)newPerformanceStateAssertion:(long long)a0 error:(id *)a1;
- (id)newPipelineLibraryWithFilePath:(id)a0 error:(id *)a1;
- (void)newPrecompiledComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 pipelineCache:(id)a2 completionHandler:(id /* block */)a3;
- (void)newPrecompiledRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 pipelineCache:(id)a2 completionHandler:(id /* block */)a3;
- (id)newProfileWithExecutionSize:(unsigned long long)a0;
- (id)newRasterizationRateMapWithDescriptor:(id)a0;
- (id)newRenderPipelineDescriptorWithSerializedData:(id)a0 deserializationContext:(id)a1;
- (void)newRenderPipelineStateWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)newRenderPipelineStateWithDescriptor:(id)a0 error:(id *)a1;
- (id)newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)newRenderPipelineStateWithMeshDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)newRenderPipelineStateWithMeshDescriptor:(id)a0 error:(id *)a1;
- (void)newRenderPipelineStateWithMeshDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newRenderPipelineStateWithMeshDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)newResidencySetWithDescriptor:(id)a0 error:(id *)a1;
- (id)newSharedEvent;
- (id)newSharedEventWithHandle:(id)a0;
- (id)newSharedEventWithMachPort:(unsigned int)a0;
- (id)newSharedEventWithOptions:(long long)a0;
- (id)newSharedTextureWithHandle:(id)a0;
- (id)newSharedTextureWithHandle:(id)a0 withResourceIndex:(unsigned long long)a1;
- (id)newStructTypeWithSerializedData:(id)a0;
- (id)newTextureWithDescriptor:(id)a0 iosurface:(struct __IOSurface { } *)a1 plane:(unsigned long long)a2 slice:(unsigned long long)a3;
- (id)newTextureWithSurface:(unsigned long long)a0 buffer:(unsigned long long)a1;
- (id)newTileRenderPipelineDescriptorWithSerializedData:(id)a0 deserializationContext:(id)a1;
- (id)newUncachedIOFileHandleWithURL:(id)a0 compressionMethod:(long long)a1 error:(id *)a2;
- (id)newUncachedIOFileHandleWithURL:(id)a0 error:(id *)a1;
- (id)newUncachedIOHandleWithURL:(id)a0 compressionType:(long long)a1 error:(id *)a2;
- (id)newUncachedIOHandleWithURL:(id)a0 error:(id *)a1;
- (struct { unsigned int x0; unsigned int x1; })pipelineCacheStats;
- (id)productName;
- (unsigned long long)requiredLinearTextureBytesPerRowForDescriptor:(id)a0;
- (void)sampleTimestamps:(unsigned long long *)a0 gpuTimestamp:(unsigned long long *)a1;
- (unsigned long long)samplerReductionModeSupport;
- (id)serializeComputePipelineDescriptor:(id)a0;
- (id)serializeRenderPipelineDescriptor:(id)a0;
- (id)serializeStructType:(id)a0;
- (id)serializeStructType:(id)a0 version:(unsigned int)a1;
- (id)serializeTileRenderPipelineDescriptor:(id)a0;
- (char)setCompilerProcessesCount:(int)a0;
- (void)setRawBVHBuilderPtr:(id)a0;
- (unsigned long long)sparseTileSizeInBytes;
- (unsigned long long)sparseTileSizeInBytesForSparsePageSize:(long long)a0;
- (void)startCollectingPipelineDescriptors;
- (void)startCollectingPipelineDescriptorsUsingPrefixForNames:(id)a0;
- (char)supportsCounterSampling:(unsigned long long)a0;
- (char)supportsFeatureSet:(unsigned long long)a0;
- (char)supportsPrimitiveType:(unsigned long long)a0;
- (char)supportsRasterizationRateMapWithLayerCount:(unsigned long long)a0;
- (char)supportsTextureSampleCount:(unsigned long long)a0;
- (char)supportsTextureWriteFPRoundingMode:(long long)a0;
- (char)supportsTextureWriteRoundingMode:(long long)a0;
- (void)unloadShaderCaches;
- (char)validateDynamicLibrary:(id)a0 state:(char)a1 error:(id *)a2;
- (char)validateDynamicLibraryDescriptor:(id)a0 error:(id *)a1;
- (char)validateDynamicLibraryURL:(id)a0 error:(id *)a1;
- (void)writeMeshShaderEmulatorDataStructureHeader:(struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28[4]; } *)a0 meshShaderPSO:(id)a1 scalingFactor:(unsigned long long)a2;
- (id)_newDescriptorForSharedTexture:(struct __IOSurface { } *)a0;
- (void)freeVisibleFunctionKey:(void *)a0 keySize:(unsigned long long)a1;
- (id)pipelinePerformanceStatisticsWithTileVariant:(id)a0 compileTimeOutput:(id)a1;
- (void)freeComputeFunctionKey:(void *)a0 keySize:(unsigned long long)a1;
- (void)initWorkarounds;
- (id)newDynamicLibraryError:(unsigned long long)a0 message:(id)a1;
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)a0 fragmentVariant:(id)a1;
- (void)_decrementCommandQueueCount;
- (void)_incrementCommandQueueCount;
- (id)_newDynamicLibraryWithDescriptor:(id)a0 computeDescriptor:(id)a1 error:(id *)a2;
- (void)_purgeDevice;
- (BOOL)_rateLimitQueueCreation;
- (void)addCompileTimeStatisticsForBinaryFunction:(const struct MTLBinaryRequestReply { unsigned long long x0; id x1; struct *x2; id x3; struct *x4; id x5; struct *x6; id x7; struct *x8; id x9; id x10; id x11; struct *x12; id x13; id x14; } *)a0;
- (id)akIOResourceListPool;
- (id)allocResidencySet;
- (void *)computeFunctionKeyWithComputePipelineDescriptor:(id)a0 options:(unsigned long long)a1 keySize:(unsigned long long *)a2;
- (id)computeResourceBindingIndexRemappingTableWithVariant:(id)a0;
- (id)computeVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (void)deserializeInstanceAccelerationStructureFromBytes:(const void *)a0 toBuffer:(id)a1 primitiveAccelerationStructures:(id)a2 forAccelerationStructure:(id)a3;
- (void)deserializePrimitiveAccelerationStructureFromBytes:(const void *)a0 toBuffer:(id)a1 forAccelerationStructure:(id)a2;
- (void)dumpPipelineDescriptorsIfRequested;
- (void *)fragmentFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 previousStateVariant:(id)a2 fragmentKeySize:(unsigned long long *)a3;
- (id)fragmentResourceBindingIndexRemappingTableWithVariant:(id)a0;
- (id)fragmentVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (void)freeComputeLibraryKey:(void *)a0 libraryKeySize:(unsigned long long)a1;
- (void)freeFragmentFunctionKey:(void *)a0 fragmentKeySize:(unsigned long long)a1;
- (void)freeMeshFunctionDriverData:(void *)a0 meshFunctionDriverDataSize:(unsigned long long)a1;
- (void)freeMeshFunctionKey:(void *)a0 meshKeySize:(unsigned long long)a1;
- (void)freeObjectFunctionDriverData:(void *)a0 objectFunctionDriverDataSize:(unsigned long long)a1;
- (void)freeObjectFunctionKey:(void *)a0 objectKeySize:(unsigned long long)a1;
- (void)freeTileFunctionKey:(void *)a0 keySize:(unsigned long long)a1;
- (void)freeTranslatedDriverCompilerOptions:(char **)a0 compilerOptionsSize:(unsigned long long)a1;
- (void)freeVertexFunctionDriverData:(void *)a0 vertexFunctionDriverDataSize:(unsigned long long)a1;
- (void)freeVertexFunctionKey:(void *)a0 vertexKeySize:(unsigned long long)a1;
- (char *)getComputeFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (char *)getComputeFunctionId:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 compilerOptionsSize:(unsigned long long)a3;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forComputeVariant:(id)a3;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forObjectVariant:(id)a3 meshVariant:(id)a4 fragmentVariant:(id)a5;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forTileVariant:(id)a3;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forVertexVariant:(id)a3 fragmentVariant:(id)a4;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 stride:(unsigned int *)a3 forComputeVariant:(id)a4;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 stride:(unsigned int *)a3 forObjectVariant:(id)a4 meshVariant:(id)a5 fragmentVariant:(id)a6;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 stride:(unsigned int *)a3 forTileVariant:(id)a4;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 stride:(unsigned int *)a3 forVertexVariant:(id)a4 fragmentVariant:(id)a5;
- (char *)getFragmentFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (char *)getIntersectionFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (void *)getMeshFunctionDriverData:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 nextStageVariant:(id)a3 driverDataSize:(unsigned long long *)a4;
- (char *)getMeshFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (void *)getObjectFunctionDriverData:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 nextStageVariant:(id)a3 driverDataSize:(unsigned long long *)a4;
- (char *)getObjectFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (void *)getVertexFunctionDriverData:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 nextStageVariant:(id)a3 driverDataSize:(unsigned long long *)a4;
- (char *)getVertexFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (char *)getVertexFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2 compiledFragmentVariant:(id)a3;
- (char *)getVertexFunctionId:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 compilerOptionsSize:(unsigned long long)a3 compiledFragmentVariant:(id)a4;
- (char *)getVisibleFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (void)initDefaultLogState;
- (void)initFeatureQueries;
- (void)initGPUFamilySupport;
- (void)initLimits;
- (void)initMeshShaderEmulatorPrefixSumKernels;
- (void)initProgressTracking;
- (void)initSerializationPaths;
- (id)initWithAcceleratorPort:(unsigned int)a0;
- (char)isCollectingLibraries;
- (char)isCollectingPipelines;
- (void *)libraryKeyWithComputePipelineDescriptor:(id)a0 options:(unsigned long long)a1 keySize:(unsigned long long *)a2;
- (void *)meshFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 nextStageVariant:(id)a2 meshKeySize:(unsigned long long *)a3;
- (id)meshResourceBindingIndexRemappingTableWithVariant:(id)a0;
- (id)newComputePipelineWithDescriptor:(id)a0 variant:(id)a1;
- (id)newComputePipelineWithDescriptor:(id)a0 variant:(id)a1 errorMessage:(id *)a2;
- (id)newComputeVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (id)newFragmentVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (id)newLibraryWithDescriptor:(id)a0 destinationBinaryArchive:(id)a1 error:(id *)a2;
- (id)newLibraryWithFunctionArray:(id)a0 error:(id *)a1;
- (id)newLibraryWithStitchedDescriptor:(id)a0 destinationBinaryArchive:(id)a1 error:(id *)a2;
- (id)newMeshRenderPipelineDescriptorWithSerializedData:(id)a0 deserializationContext:(id)a1;
- (id)newMeshVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (id)newObjectVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (id)newRasterizationRateMapWithScreenSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 layerCount:(unsigned long long)a1 layers:(const id *)a2;
- (id)newRenderPipelineWithDescriptor:(id)a0 objectVariant:(id)a1 meshVariant:(id)a2 fragmentVariant:(id)a3 errorMessage:(id *)a4;
- (id)newRenderPipelineWithDescriptor:(id)a0 vertexVariant:(id)a1 fragmentVariant:(id)a2;
- (id)newRenderPipelineWithDescriptor:(id)a0 vertexVariant:(id)a1 fragmentVariant:(id)a2 errorMessage:(id *)a3;
- (id)newRenderPipelineWithTileDescriptor:(id)a0 tileVariant:(id)a1 errorMessage:(id *)a2;
- (id)newTileVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1 functionType:(unsigned long long)a2;
- (char **)newTranslatedDriverCompilerOptions:(id)a0 compilerOptionsSize:(unsigned long long *)a1;
- (id)newVertexVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (void *)objectFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 nextStageVariant:(id)a2 objectKeySize:(unsigned long long *)a3;
- (id)objectResourceBindingIndexRemappingTableWithVariant:(id)a0;
- (unsigned long long)optionsForPipelineLibrarySerialization;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned long x5 : 59; })pipelineFlagsWithComputeVariant:(id)a0;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; unsigned char x10 : 1; unsigned long x11 : 53; })pipelineFlagsWithObjectVariant:(id)a0 meshVariant:(id)a1 fragmentVariant:(id)a2;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; unsigned char x10 : 1; unsigned long x11 : 53; })pipelineFlagsWithTileVariant:(id)a0;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; unsigned char x10 : 1; unsigned long x11 : 53; })pipelineFlagsWithVertexVariant:(id)a0 fragmentVariant:(id)a1;
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)a0;
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)a0 compileTimeOutput:(id)a1;
- (id)pipelinePerformanceStatisticsWithObjectVariant:(id)a0 meshVariant:(id)a1 fragmentVariant:(id)a2 objectCompileTimeOutput:(id)a3 meshCompileTimeOutput:(id)a4 fragmentCompileTimeOutput:(id)a5;
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)a0 fragmentVariant:(id)a1 vertexCompileTimeOutput:(id)a2 fragmentCompileTimeOutput:(id)a3;
- (id)prepareVisibleFunctionRequest:(id)a0 withDescriptor:(id)a1 sync:(BOOL)a2;
- (void)recordBinaryArchiveUsage:(id)a0;
- (void)registerComputePipelineDescriptor:(id)a0;
- (void)registerMeshRenderPipelineDescriptor:(id)a0;
- (void)registerRenderPipelineDescriptor:(id)a0;
- (void)registerTileRenderPipelineDescriptor:(id)a0;
- (void)releaseCacheEntry:(struct MTLLibraryContainer { struct MTLPipelineCollection *x0; _Atomic int x1; struct { unsigned char x0[32]; } x2; struct MTLLibraryData *x3; id x4; id x5; id x6; id x7; id x8; } *)a0;
- (id)resolveCounters:(id)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)serializeMeshRenderPipelineDescriptor:(id)a0;
- (void)startCollectingPipelineDescriptorsFromLibrary:(id)a0 filePath:(id)a1;
- (void *)tileFunctionKeyWithTilePipelineDescriptor:(id)a0 options:(unsigned long long)a1 keySize:(unsigned long long *)a2;
- (id)tileResourceBindingIndexRemappingTableWithVariant:(id)a0;
- (void *)vertexFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 nextStageVariant:(id)a2 vertexKeySize:(unsigned long long *)a3;
- (id)vertexResourceBindingIndexRemappingTableWithVariant:(id)a0;
- (id)vertexVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (void *)visibleFunctionKey:(id)a0 withFunctionDescriptor:(id)a1 keySize:(unsigned long long *)a2;

@end
