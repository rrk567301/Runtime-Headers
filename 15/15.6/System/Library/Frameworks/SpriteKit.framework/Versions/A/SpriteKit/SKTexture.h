@class NSObject, NSString, NSArray, CIFilter, SKTextureCache, SKTextureAtlas;
@protocol OS_dispatch_queue;

@interface SKTexture : NSObject <NSCopying, NSSecureCoding> {
    char _shouldGenerateMipmaps;
    char _didGenerateMipmaps;
    char _isPath;
    char _isData;
    NSString *_imgName;
    NSArray *_searchPaths;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _textRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _textCoords;
    char _disableAlpha;
    char _isRotated;
    char _isFlipped;
    int _alignment;
    int _rowLength;
    CIFilter *_filter;
    SKTexture *_originalTexture;
    unsigned int _textureTarget;
    SKTextureCache *_textureCache;
    NSObject<OS_dispatch_queue> *_textureSyncQueue;
}

@property (class, readonly) char supportsSecureCoding;

@property (readonly, nonatomic) struct CGSize { double x0; double x1; } pixelSize;
@property (nonatomic) unsigned int textureTarget;
@property (nonatomic) char isRotated;
@property (nonatomic) char isFlipped;
@property (readonly, nonatomic) char hasAlpha;
@property (nonatomic) int wrapMode;
@property (readonly, nonatomic) NSString *imageNameOrPath;
@property (copy, nonatomic) NSString *accessibilityLabel;
@property char performFullCapture;
@property (readonly, nonatomic) char isRepeatable;
@property (nonatomic) struct CGPoint { double x; double y; } cropScale;
@property (nonatomic) struct CGPoint { double x; double y; } cropOffset;
@property (copy, nonatomic) NSString *originalAtlasName;
@property (retain, nonatomic) SKTextureAtlas *rootAtlas;
@property (copy, nonatomic) NSString *subTextureName;
@property (readonly, nonatomic) unsigned int *alphaMap;
@property (readonly, nonatomic) struct CGSize { double width; double height; } alphaMapSize;
@property (nonatomic, getter=_needsExtrusionWorkaround) char needsExtrusionWorkaround;
@property (nonatomic) long long filteringMode;
@property (nonatomic) char usesMipmaps;

+ (id)preloadQueue;
+ (id)textureWithData:(id)a0 size:(struct CGSize { double x0; double x1; })a1;
+ (id)_textureByTransferingData:(char *)a0 size:(struct CGSize { double x0; double x1; })a1;
+ (id)_cachedTextureNames;
+ (void)_reloadTextureCacheForImageNamed:(id)a0;
+ (id)_textureByTransferingData:(char *)a0 size:(struct CGSize { double x0; double x1; })a1 rowLength:(unsigned int)a2 alignment:(unsigned int)a3;
+ (id)_textureWithGLTextureId:(unsigned int)a0 size:(struct CGSize { double x0; double x1; })a1;
+ (id)_textureWithImageNamed:(id)a0;
+ (id)lookupTextureCacheForName:(id)a0;
+ (void)preloadTextures:(id)a0 withCompletionHandler:(id /* block */)a1;
+ (void)registerTextureCache:(id)a0 forName:(id)a1;
+ (id)textureNoiseWithSmoothness:(double)a0 size:(struct CGSize { double x0; double x1; })a1 grayscale:(char)a2;
+ (id)textureVectorNoiseWithSmoothness:(double)a0 size:(struct CGSize { double x0; double x1; })a1;
+ (id)textureWithCGImage:(struct CGImage { } *)a0;
+ (id)textureWithCGImage:(struct CGImage { } *)a0 pointSize:(struct CGSize { double x0; double x1; })a1;
+ (id)textureWithData:(id)a0 size:(struct CGSize { double x0; double x1; })a1 flipped:(char)a2;
+ (id)textureWithData:(id)a0 size:(struct CGSize { double x0; double x1; })a1 rowLength:(unsigned int)a2 alignment:(unsigned int)a3;
+ (id)textureWithIOSurfaceID:(unsigned int)a0 width:(unsigned int)a1 height:(unsigned int)a2 format:(unsigned int)a3;
+ (id)textureWithImage:(id)a0;
+ (id)textureWithImageNamed:(id)a0;
+ (id)textureWithImageNamed:(id)a0 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
+ (id)textureWithImagePath:(id)a0;
+ (id)textureWithMetalTexture:(id)a0;
+ (id)textureWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inTexture:(id)a1;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (id)init;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (struct CGSize { double x0; double x1; })size;
- (struct CGImage { } *)CGImage;
- (void)commonInit;
- (id)metalTexture;
- (id)initWithImagePath:(id)a0;
- (id)initWithImageNamed:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textureRect;
- (int)glTextureId;
- (struct shared_ptr<jet_texture> { struct jet_texture *x0; struct __shared_weak_count *x1; })_backingTexture;
- (id)imgName;
- (int)_convert_jet_texture_format_to_ci_format:(unsigned int)a0;
- (id)_copyImageData;
- (struct CGImage { } *)_createCGImage;
- (void)_ensureImageData;
- (id)_generateNormalMap:(double)a0 contrast:(double)a1 multiPass:(unsigned long long)a2;
- (id)_initWithGLTextureId:(unsigned int)a0 size:(struct CGSize { double x0; double x1; })a1;
- (struct CGImage { } *)_newTextureFromGLCache;
- (void)_savePngFromGLCache:(id)a0;
- (void)_setImageName:(id)a0;
- (id)_textureCache;
- (void)initTextureCacheWithImageData;
- (id)initWithBackingTetxure:(struct shared_ptr<jet_texture> { struct jet_texture *x0; struct __shared_weak_count *x1; })a0;
- (id)initWithBackingTetxure:(struct shared_ptr<jet_texture> { struct jet_texture *x0; struct __shared_weak_count *x1; })a0 logicalWidth:(float)a1 height:(float)a2;
- (char)isEqualToTexture:(id)a0;
- (void)loadImageData;
- (void)loadImageDataFromCGImage:(struct CGImage { } *)a0 pointsSize:(struct CGSize { double x0; double x1; })a1;
- (char)loadImageDataFromPVRData:(id)a0;
- (char)loadImageDataFromPVRGZData:(id)a0;
- (void)preloadWithCompletionHandler:(id /* block */)a0;
- (void)setIsData:(char)a0;
- (void)setTextureDimension:(const struct CGSize { double x0; double x1; } *)a0 withPixelSize:(const struct CGSize { double x0; double x1; } *)a1;
- (id)textureByApplyingCIFilter:(id)a0;
- (id)textureByGeneratingNormalMap;
- (id)textureByGeneratingNormalMapWithSmoothness:(double)a0 contrast:(double)a1;

@end
