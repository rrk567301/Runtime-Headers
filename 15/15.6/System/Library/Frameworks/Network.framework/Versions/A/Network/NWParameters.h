@class NSUUID, NSString, NSArray, NSURL, NSSet, NSData, NSDictionary, NSObject, NWAddressEndpoint, NWInterface;
@protocol OS_nw_parameters;

@interface NWParameters : NSObject <NWPrettyDescription, NSSecureCoding, NSCopying>

@property (class, readonly) char supportsSecureCoding;

@property (retain) NSObject<OS_nw_parameters> *internalParameters;
@property (nonatomic) char indefinite;
@property (nonatomic) char noProxy;
@property (readonly, nonatomic, getter=isValid) char valid;
@property (readonly, nonatomic, getter=isDryRun) char dryRun;
@property (readonly, nonatomic) char prohibitCellular;
@property (nonatomic) char prohibitFallback;
@property (nonatomic, getter=isDiscretionary) char discretionary;
@property (nonatomic) char allowSocketAccess;
@property (retain, nonatomic) NSUUID *parentID;
@property (readonly, nonatomic) NSArray *parentIDs;
@property (retain, nonatomic) NSSet *SSLCipherSuitesInternal;
@property (nonatomic) unsigned long long minimumSSLProtocolVersionInternal;
@property (nonatomic) unsigned long long maximumSSLProtocolVersionInternal;
@property (readonly, nonatomic) unsigned char transportProtocol;
@property (nonatomic) char keepAlive;
@property (nonatomic) unsigned long long keepAliveIdleTime;
@property (nonatomic) unsigned long long keepAliveInterval;
@property (nonatomic) char keepAliveOffload;
@property (nonatomic) char httpsProxyIsOpaque;
@property (nonatomic) char httpsProxyOverTLS;
@property (nonatomic) char attachProtocolListener;
@property (nonatomic) char prohibitJoiningProtocols;
@property (nonatomic) char allowJoiningConnectedFd;
@property (nonatomic) char allowDuplicateStateUpdates;
@property (nonatomic) char trustInvalidCertificates;
@property (readonly, copy, nonatomic) NSString *privateDescription;
@property (readonly, nonatomic) unsigned char ipProtocol;
@property (nonatomic) int pid;
@property (nonatomic) unsigned int uid;
@property (copy, nonatomic) NSUUID *processUUID;
@property (copy, nonatomic) NSUUID *effectiveProcessUUID;
@property (copy, nonatomic) NSString *effectiveBundleID;
@property (nonatomic) char useLongOutstandingQueries;
@property (nonatomic) char ignoreResolverStats;
@property (nonatomic) char useAWDL;
@property (nonatomic) char useP2P;
@property (nonatomic) char resolvePTR;
@property (nonatomic) char multipath;
@property (nonatomic) int multipathService;
@property (nonatomic) char multipathForceEnable;
@property (nonatomic) unsigned char requiredAddressFamily;
@property (copy, nonatomic) NSURL *url;
@property (readonly, nonatomic) NSURL *sanitizedURL;
@property (copy, nonatomic) NSDictionary *proxyConfiguration;
@property (retain, nonatomic) NWAddressEndpoint *localAddress;
@property (nonatomic) char reuseLocalAddress;
@property (retain, nonatomic) NWInterface *requiredInterface;
@property (nonatomic) long long requiredInterfaceType;
@property (nonatomic) long long requiredInterfaceSubtype;
@property (nonatomic) long long requiredCompanionProxyInterfaceType;
@property (nonatomic) char enableTFO;
@property (nonatomic) char enableTFONoCookie;
@property (nonatomic) char fastOpenForceEnable;
@property (retain, nonatomic) NSData *metadata;
@property (nonatomic) char prohibitRoaming;
@property (copy, nonatomic) NSArray *protocolTransforms;
@property (nonatomic) char allowUnusableAddresses;
@property (nonatomic) char preferNoProxy;
@property (copy, nonatomic) NSString *account;
@property (nonatomic) unsigned long long dataMode;
@property (nonatomic) unsigned long long trafficClass;
@property (nonatomic) char prohibitExpensivePaths;
@property (nonatomic) char prohibitConstrainedPaths;
@property (nonatomic) char reduceBuffering;
@property (nonatomic) char disableNagleAlgorithm;
@property (nonatomic) char enableTLS;
@property (copy, nonatomic) NSData *TLSSessionID;
@property (copy, nonatomic) NSSet *SSLCipherSuites;
@property (nonatomic) unsigned long long minimumSSLProtocolVersion;
@property (nonatomic) unsigned long long maximumSSLProtocolVersion;

+ (id)parametersWithCParameters:(id)a0;
+ (id)parametersWithProtocolBufferData:(id)a0;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (unsigned long long)hash;
- (id)init;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)copyCParameters;
- (void)avoidNetworkAgentWithDomain:(id)a0 type:(id)a1;
- (void)avoidNetworkAgentWithUUID:(id)a0;
- (char)copyEffectiveAuditToken:(struct { unsigned int x0[8]; } *)a0;
- (id)copyRequiredAgentsDescription;
- (id)createProtocolBufferObject;
- (id)descriptionWithIndent:(int)a0 showFullContent:(char)a1;
- (char)hasDelegatedPIDForOriginatingPID:(int)a0;
- (char)hasDelegatedProcessUUID;
- (char)hasNonEmptyProxyConfiguration;
- (char)hasPreferredNetworkAgents;
- (char)hasProhibitedNetworkAgents;
- (char)hasRequiredNetworkAgents;
- (id)initWithParameters:(id)a0;
- (void)preferNetworkAgentWithDomain:(id)a0 type:(id)a1;
- (void)preferNetworkAgentWithUUID:(id)a0;
- (void)prohibitInterface:(id)a0;
- (void)prohibitInterfaceSubtype:(long long)a0;
- (void)prohibitInterfaceType:(long long)a0;
- (void)prohibitNetworkAgentWithUUID:(id)a0;
- (void)prohibitNetworkAgentsWithDomain:(id)a0 type:(id)a1;
- (void)requireNetworkAgentWithDomain:(id)a0 type:(id)a1;
- (void)requireNetworkAgentWithUUID:(id)a0;
- (void)setInitialDataPayload:(id)a0;
- (void)setProtocolAtLevel:(unsigned long long)a0 protocol:(struct nw_protocol_identifier { char x0[32]; int x1; int x2; } *)a1;
- (void)setSourceApplicationWithBundleID:(id)a0;
- (void)setSourceApplicationWithToken:(struct { unsigned int x0[8]; })a0;
- (unsigned short)tlsVersionWithSSLProtocol:(int)a0;

@end
