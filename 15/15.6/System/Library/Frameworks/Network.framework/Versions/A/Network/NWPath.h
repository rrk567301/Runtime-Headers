@class NSUUID, NSString, NSArray, NWAdvertiseDescriptor, NWBrowseDescriptor, NSObject, NWInterface, NWEndpoint, NWParameters;
@protocol OS_nw_path;

@interface NWPath : NSObject <NWPrettyDescription>

@property (readonly) NSObject<OS_nw_path> *internalPath;
@property (readonly, nonatomic) unsigned int fallbackInterfaceIndex;
@property (readonly, nonatomic) char fallbackIsWeak;
@property (readonly, nonatomic) char fallbackEligible;
@property (readonly, nonatomic) char fallbackIsPreferred;
@property (readonly, nonatomic) NSArray *dnsServersAsStrings;
@property (readonly, nonatomic) NSArray *gateways;
@property (readonly, nonatomic) NSArray *groupMembers;
@property (readonly, nonatomic) NSArray *flows;
@property (readonly, nonatomic) NSString *statusAsString;
@property (readonly, nonatomic) NWInterface *connectedInterface;
@property (readonly, nonatomic, getter=isListener) char listener;
@property (readonly, nonatomic, getter=isViable) char viable;
@property (readonly, nonatomic) char hasProxySettings;
@property (readonly, nonatomic) NSArray *overrideDNSServers;
@property (readonly, nonatomic) NSArray *overrideDNSServersAsStrings;
@property (readonly, nonatomic) NSArray *overrideDNSSearchDomains;
@property (readonly, nonatomic) NSUUID *clientID;
@property (readonly, nonatomic) NWInterface *interface;
@property (readonly, nonatomic) NWInterface *scopedInterface;
@property (readonly, nonatomic) NWInterface *fallbackInterface;
@property (readonly, nonatomic, getter=isFlowDivert) char flowDivert;
@property (readonly, nonatomic) unsigned int flowDivertControlUnit;
@property (readonly, nonatomic) unsigned int flowDivertAggregateUnit;
@property (readonly, nonatomic, getter=isFiltered) char filtered;
@property (readonly, nonatomic) unsigned int filterControlUnit;
@property (readonly, nonatomic) int dnsServiceID;
@property (readonly, nonatomic, getter=isLocal) char local;
@property (readonly, nonatomic, getter=isDirect) char direct;
@property (readonly, nonatomic) unsigned int policyID;
@property (readonly, nonatomic, getter=isRoaming) char roaming;
@property (readonly, nonatomic) long long mtu;
@property (readonly, nonatomic) long long maximumDatagramSize;
@property (readonly, nonatomic) unsigned long long secondsSinceInterfaceChange;
@property (readonly, nonatomic) long long reason;
@property (readonly, nonatomic) NSString *reasonDescription;
@property (readonly, copy, nonatomic) NSString *privateDescription;
@property (readonly, nonatomic) NWParameters *derivedParameters;
@property (readonly, nonatomic) char supportsIPv4;
@property (readonly, nonatomic) char supportsIPv6;
@property (readonly, nonatomic) char supportsDNS;
@property (readonly, nonatomic, getter=isEligibleForCrazyIvan46) char eligibleForCrazyIvan46;
@property (readonly, nonatomic) NWEndpoint *endpoint;
@property (readonly, nonatomic) NWParameters *parameters;
@property (readonly, nonatomic) NWEndpoint *effectiveLocalEndpoint;
@property (readonly, nonatomic) NWEndpoint *effectiveRemoteEndpoint;
@property (readonly, nonatomic) NSArray *proxySettings;
@property (readonly, nonatomic) NSArray *dnsServers;
@property (readonly, nonatomic) NSArray *dnsSearchDomains;
@property (readonly, nonatomic) char hasBrowseDescriptor;
@property (readonly, nonatomic) NWBrowseDescriptor *browseDescriptor;
@property (readonly, nonatomic) char hasAdvertiseDescriptor;
@property (readonly, nonatomic) NWAdvertiseDescriptor *advertiseDescriptor;
@property (readonly, nonatomic, getter=isPerAppVPN) char perAppVPN;
@property (readonly, nonatomic) char hasKernelExtensionFilter;
@property (readonly, nonatomic) char hasCustomPFRules;
@property (readonly, nonatomic) char hasApplicationLevelFirewall;
@property (readonly, nonatomic) char hasParentalControls;
@property (readonly, nonatomic) NSObject<OS_nw_path> *cPath;
@property (readonly, nonatomic) long long status;
@property (readonly, nonatomic, getter=isExpensive) char expensive;
@property (readonly, nonatomic, getter=isConstrained) char constrained;

+ (id)allClientIDs;
+ (id)createStringFromStatus:(long long)a0;
+ (id)pathForClientID:(id)a0;
+ (id)pathForClientID:(id)a0 parametersTLV:(id)a1 pathResultTLV:(id)a2;
+ (id)pathWithProtocolBufferData:(id)a0;

- (id)description;
- (id)init;
- (void).cxx_destruct;
- (id)initWithPath:(id)a0;
- (id)copyDNSSearchDomains:(char)a0;
- (id)copyDNSServerEndpoints:(char)a0;
- (id)copyDNSServersStrings:(id)a0;
- (id)copyDataFromNetworkAgentWithDomain:(id)a0 type:(id)a1;
- (id)copyFlowDivertToken;
- (id)createProtocolBufferObject;
- (id)delegateInterface;
- (id)descriptionWithIndent:(int)a0 showFullContent:(char)a1;
- (id)genericNetworkAgentsWithDomain:(id)a0 type:(id)a1;
- (char)hasUnsatisfiedFallbackAgent;
- (id)inactiveNetworkAgentUUIDsOnlyVoluntary:(char)a0;
- (char)isEqualToPath:(id)a0;
- (char)isLinkQualityAbort;
- (char)isListenerInterfaceSpecific;
- (char)isUltraConstrained;
- (id)networkAgentsOfType:(Class)a0;
- (char)shouldProbeConnectivity;
- (char)unsatisfiedVoluntaryAgentMatchesAddress:(id)a0 triggerImmediately:(char *)a1;
- (char)usesInterfaceType:(long long)a0;
- (char)usesNetworkAgent:(id)a0;
- (char)usesNetworkAgentType:(Class)a0;

@end
