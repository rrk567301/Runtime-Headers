@class NSLayoutGuide, NSPressureConfiguration, NSDictionary, NSColor, NSLayoutXAxisAnchor, NSMutableSet, NSMutableArray, NSWritingToolsCoordinator, _NSViewLayoutAux, CIFilter, CALayer, _NSViewAnimator, NSCandidateListTouchBarItem, NSLayoutYAxisAnchor, NSScrollView, NSURL, NSTextInputContext, _NSTrackingAreaViewHelper, NSBezierPath, NSSurface, NSArray, NSAppearance, NSMenu, NSLayoutRect, _NSBindingAdaptor, NSColorSpace, NSString, NSMenuItem, NSViewController, NSLayoutDimension, NSPSMatrix, NSShadow, NSFunctionRow, NSWindow;
@protocol NSAppearanceCustomization, _NSDisplayLinkInfoProvider, NSContentStyle, NSObject, NSViewRoot;

@interface NSView : NSResponder <NSAppearanceCustomizationInternal, NSISVariableDelegate, NSLayoutItem, NSISEngineDelegate, NSAKLayoutItem, NSLayoutSpacingItem, _NSDisplayLinkInfoProvider, CALayerDelegate, NSAnimatablePropertyContainer, NSUserInterfaceItemIdentification, NSDraggingDestination, NSAppearanceCustomization, NSAccessibilityElement, NSAccessibility> {
    _NSTrackingAreaViewHelper *_trackingAreaHelper;
    NSPSMatrix *_frameMatrix;
    NSView *_superview;
    NSMutableSet *_dragTypes;
    id<NSViewRoot> _viewRoot;
    unsigned char _cachedIsFlipped : 1;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _bounds;
    NSArray *_subviews;
    CALayer *_layer;
    NSWindow *_window;
    struct __VFlags { unsigned char aboutToResize : 1; unsigned char isOpaque : 1; unsigned char unused3 : 5; unsigned char hasNotMessedWithIsFlipped : 1; unsigned char ignoreHitTest : 1; unsigned char unused4 : 1; unsigned char needsDisplayForBounds : 1; unsigned char isFlipped : 1; unsigned char removingWithoutInvalidation : 1; unsigned char needsBoundsChangeNote : 1; unsigned char boundsChangeNotesSuspended : 1; unsigned char unused2 : 1; unsigned char needsFrameChangeNote : 1; unsigned char frameChangeNotesSuspended : 1; unsigned char canDrawSubviewsIntoLayer : 1; unsigned char allowsVibrancy : 2; unsigned char needsDisplay : 1; unsigned char alwaysAllowVibrantBlendStyle : 1; unsigned char autoresizeSubviews : 1; unsigned char autosizing : 6; unsigned char rotatedOrScaledFromBase : 1; unsigned char rotatedFromBase : 1; } _vFlags;
    struct { unsigned char _liveResizeActive : 1; unsigned char _hidden : 1; unsigned char _hiddenOrHasHiddenAncestor : 1; unsigned char _focusRingType : 2; unsigned char _drawWithTintWhenHidden : 1; unsigned char _impactsWindowMoving : 1; unsigned char _drawsOwnDescendants : 1; unsigned char _drawnByAncestor : 1; unsigned char _setFrameWillAutoInvalidate : 1; unsigned char _revealoverComputationEnabled : 1; unsigned char _revealoverComputationNeeded : 1; unsigned char _revealoversWanted : 1; unsigned char _hasDrawDelegate : 1; unsigned char _ignoreForKeyViewLoop : 1; unsigned char _searchingForKeyViewReplacement : 1; unsigned char _wantsLayer : 1; unsigned char _dontSuppressLayerAnimation : 1; unsigned char _canDrawConcurrently : 1; unsigned char _displayingForWindowDisplay : 1; unsigned char _implementsViewWillDraw : 1; } _atomicFlags;
    unsigned char _appkitManagesLayer : 1;
    unsigned char _shouldRemoveAtEndOfAnimation : 1;
    unsigned char _didLoseHiddenAncestor : 1;
    unsigned char _didGainHiddenAncestor : 1;
    unsigned char _hasDrawMatrix : 1;
    unsigned char _detachingFromWindow : 1;
    unsigned char _drawsNothing : 1;
    unsigned char _registeredForGeometryInWindowDidChangeNotificationForInclusiveLayerDescendant : 1;
    unsigned char _overridesNeedsDisplay : 1;
    unsigned char _someDescendantMightOverrideNeedsDisplay : 1;
    unsigned char _checkedIfWebFrameView : 1;
    unsigned char _isWebFrameView : 1;
    unsigned char _layersFrozenForTransplant : 1;
    unsigned char _anyDescendantCanDrawConcurrently : 1;
    unsigned char _layerContentsRedrawPolicy : 3;
    unsigned char _layerContentsPlacement : 4;
    unsigned char _vibrantBlendingStyleForSubtree : 2;
    unsigned char _cachedEffectiveVibrantBlendingStyle : 2;
    unsigned char _isOpenGLBased : 1;
    unsigned char _acceptsIndirectTouches : 1;
    unsigned char _acceptsDirectTouches : 1;
    unsigned char _wantsRestingTouches : 1;
    unsigned char _liveAnimationActive : 1;
    unsigned char _automaticFocusRingDisabled : 1;
    unsigned char _requestedExtraUpdateConstraints : 1;
    unsigned char _layoutIsClean : 1;
    unsigned char _subviewLayoutIsClean : 1;
    unsigned char _layingOutFromConstraints : 1;
    unsigned char _hasInvalidRestorableState : 1;
    unsigned char _hasEverHadInvalidRestorableState : 1;
    unsigned char _layoutFlushingDisabled : 1;
    unsigned char _contentSizeConstraintsAreClean : 1;
    unsigned char _constraintsAreClean : 1;
    unsigned char _subviewLayoutConstraintsAreClean : 1;
    unsigned char _wantsBestResolutionOpenGLSurface : 2;
    unsigned char _hasInputContext : 1;
    unsigned char _checkedForInputContext : 1;
    unsigned char _supportsDirectLayerContentsCache : 2;
    unsigned char _animatingFrameSize : 1;
    unsigned char _hasIncompatibleAppearanceOverride : 1;
    unsigned char _dontArchiveAsSubview : 1;
    unsigned char _usesPointIntegralizationForLayout : 1;
    unsigned char _hasCanDrawSubviewsIntoLayerAncestor : 1;
    unsigned char _hasAutoCanDrawSubviewsIntoLayer : 1;
    unsigned short _needsDisplayInRectNotificationsCount : 11;
    unsigned char _overridesViewLayout : 1;
    unsigned char _overridesResizeSubviewsWithOldSize : 1;
    unsigned char _overridesBaselineOffsetsAtSize : 1;
    unsigned char _overridesWillUpdateConstraintsForSubtree : 1;
    unsigned char _layingOut : 1;
    unsigned char _hasAutoSetWantsLayer : 1;
    unsigned char _backgroundFiltersUseCIFilter : 1;
    unsigned char _contentFiltersUseCIFilter : 1;
    unsigned char _compositingFilterIsCIFilter : 1;
    unsigned char _layerUsesCIFilter : 1;
    unsigned char _hasSuspendedWindowServerLayerHosting : 1;
    unsigned char _clipsToBounds : 1;
    unsigned char _willInvalidateFocus : 1;
    unsigned char _hasAccessibilityUIElementSpecifier : 1;
    unsigned char _isScrolling : 1;
    unsigned char _hasCachedVisibleRect : 1;
    unsigned char _descendantHasCachedVisibleRect : 1;
    unsigned char _isMagnifying : 1;
    unsigned char _gesturesEnabled : 1;
    unsigned char _excludeSubviewsInCacheDisplayInRect : 1;
    unsigned char _hasVibrancyFilter : 1;
    unsigned char _isInclusiveLayerBacked : 1;
    unsigned char _setBackgroundColor : 1;
    unsigned char _deferredNeedsDisplay : 1;
    unsigned char _enumeratingGeometryInWindowSensitiveSubviewsCount : 4;
    unsigned char _needsZOrderDidChangeNotificationCount : 4;
    unsigned char _userInterfaceLayoutDirection : 2;
    unsigned char _userInterfaceLayoutDirectionPropagatesToDescendants : 1;
    unsigned int _descendantCount : 20;
    unsigned int _zOrder : 20;
    unsigned char _enumeratingSubviewsCount : 6;
    unsigned char _hasCachedEffectiveContentStyle : 1;
    unsigned char _horizontalContentSizeConstraintActive : 1;
    unsigned char _verticalContentSizeConstraintActive : 1;
    unsigned char _needsUpdateVibrancy : 1;
    unsigned char _needsUpdateVibrancyBelow : 1;
    unsigned short _nextKeyViewRefCount : 14;
    unsigned short _previousKeyViewRefCount : 14;
    unsigned char _isVisibleRect : 1;
    unsigned char _menuWasSet : 1;
    unsigned char _hasToolTip : 1;
    unsigned char _cachedEffectiveAppearanceIsValid : 1;
    unsigned char _allowsGroupBlending : 1;
    unsigned char _inNonRootLayerBackedWindow : 1;
    unsigned char _hasObservationTrackingDictionary : 1;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _atomicFlagsLock;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _atomicPropertiesLock;
    unsigned long long _needsGeometryInWindowDidChangeNotificationCount;
    NSMutableSet *_geometryInWindowSensitiveSubviews;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cachedVisibleRect;
    _NSBindingAdaptor *_bindingAdaptor;
    NSMenu *_menu;
    _NSViewLayoutAux *_layoutAux;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _errorOffsets;
    _NSViewAnimator *_animator;
    NSDictionary *_animationsDictionary;
    double _alphaValue;
    NSArray *_contentFilters;
    NSArray *_backgroundFilters;
    CIFilter *_compositingFilter;
    NSShadow *_shadow;
    unsigned int _userInterfaceItemIdentifierInternalNumber;
    unsigned int _layoutTransactionSeed;
    NSString *_userInterfaceItemIdentifier;
    NSBezierPath *_clipPath;
    id /* block */ _updateLayerHandler;
    NSAppearance *_cachedEffectiveAppearance;
    id<NSContentStyle> _contentStyle;
    id<NSContentStyle> _cachedEffectiveContentStyle;
    double _cornerRadius;
    NSColor *_backgroundColor;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _preparedContentRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _committedPreparedContentRect;
    NSViewController *_viewController;
    NSMutableArray *_gestureRecognizers;
    NSView *_ancestorWithLayerForLastLayerGeometryUpdate;
    id<NSObject> _antialiasThresholdChangedNotificationObserver;
    NSArray *_drawingCalloutDependencyContexts;
}

@property (class, nonatomic, readonly) Class _intelligenceRemoteContextWrapperClass;
@property (class, readonly) char mightNeedToClipToBoundsBecauseOfSomeOtherProperty;
@property (class, readonly) char clipsToBounds;
@property (class, readonly) NSView *focusView;
@property (class, readonly) NSMenu *defaultMenu;
@property (class, readonly, getter=isCompatibleWithResponsiveScrolling) char compatibleWithResponsiveScrolling;

@property (nonatomic, readonly) Class _intelligenceBaseClass;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _intelligenceVisibleBounds;
@property (nonatomic, readonly) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } _intelligenceRemoteTransform;
@property (nonatomic, readonly) NSArray *_appIntentsAnnotationsDebugDescription;
@property (nonatomic, readonly) char _intelligenceCollectRemote;
@property (readonly) char _managesOpenGLDrawable;
@property (readonly, copy) NSArray *trackingAreas;
@property (readonly, getter=isDrawingFindIndicator) char drawingFindIndicator;
@property (readonly, nonatomic) long long _lfld_count;
@property (readonly, nonatomic) NSMutableArray *_lfld_geometryChangeRecords;
@property (readonly, nonatomic) NSMutableArray *_lfld_variableChangeRecords;
@property (readonly, nonatomic) NSString *_lfld_currentLayoutMethodName;
@property (readonly, nonatomic) NSMutableSet *_lfld_setNeedsLayoutCallStacks;
@property (readonly) NSMenuItem *enclosingMenuItem;
@property (retain, setter=_setSurface:) NSSurface *_surface;
@property (retain, setter=_setSurfaceColorSpace:) NSColorSpace *_surfaceColorSpace;
@property (retain) NSPressureConfiguration *pressureConfiguration;
@property (readonly, copy) NSString *recursiveDescription;
@property char wantsExtendedDynamicRangeOpenGLSurface;
@property (retain) NSWritingToolsCoordinator *writingToolsCoordinator;
@property (setter=_setViewController:) NSViewController *_viewController;
@property (copy, setter=_setClipPath:) NSBezierPath *_clipPath;
@property (setter=_setViewController:) NSViewController *_viewController;
@property (readonly) long long _presentationState;
@property (copy) id<NSContentStyle> contentStyle;
@property (readonly, copy) id<NSContentStyle> effectiveContentStyle;
@property (readonly) char _inSelectedTableRow;
@property (readonly) char _titlebarIsForcingDisplayOfDividers;
@property (readonly) char _allowRolloverInToolbarControls;
@property (readonly) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } touchBarHitTestInsets;
@property (copy) NSColor *fontSmoothingBackgroundColor;
@property (copy, setter=_setAppEntityIdentifier:) NSString *_appEntityIdentifier;
@property (copy, setter=_setAppIntentIdentifier:) NSString *_appIntentIdentifier;
@property (readonly, copy) NSArray *registeredDraggedTypes;
@property (readonly) id<NSViewRoot> _viewRoot;
@property (readonly, getter=isInFullScreenMode) char inFullScreenMode;
@property (readonly, weak) NSFunctionRow *functionRow;
@property (readonly) id<_NSDisplayLinkInfoProvider> _parentDisplayLinkInfoProvider;
@property (readonly) char _shouldPauseDisplayLink;
@property (readonly) int _displayIDForDisplayLink;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) NSCandidateListTouchBarItem *candidateListTouchBarItem;
@property (readonly, getter=isInTouchBar) char inTouchBar;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (setter=nsli_setPiercingToken:) unsigned long long nsli_piercingToken;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (copy) NSString *identifier;
@property (readonly) NSLayoutXAxisAnchor *leadingAnchor;
@property (readonly) NSLayoutXAxisAnchor *trailingAnchor;
@property (readonly) NSLayoutXAxisAnchor *leftAnchor;
@property (readonly) NSLayoutXAxisAnchor *rightAnchor;
@property (readonly) NSLayoutYAxisAnchor *topAnchor;
@property (readonly) NSLayoutYAxisAnchor *bottomAnchor;
@property (readonly) NSLayoutDimension *widthAnchor;
@property (readonly) NSLayoutDimension *heightAnchor;
@property (readonly) NSLayoutXAxisAnchor *centerXAnchor;
@property (readonly) NSLayoutYAxisAnchor *centerYAnchor;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (readonly) char hasAmbiguousLayout;
@property (readonly, copy) NSArray *layoutGuides;
@property (readonly) NSLayoutGuide *layoutMarginsGuide;
@property (readonly) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } safeAreaInsets;
@property struct NSEdgeInsets { double x0; double x1; double x2; double x3; } additionalSafeAreaInsets;
@property (readonly) NSLayoutGuide *safeAreaLayoutGuide;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } safeAreaRect;
@property (readonly) NSLayoutGuide *layoutMarginsGuide;
@property (readonly) NSLayoutRect *alignmentLayoutRect;
@property (readonly) id<NSAppearanceCustomization> _effectiveAppearanceParent;
@property (retain) NSAppearance *appearance;
@property (readonly) NSAppearance *effectiveAppearance;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) double _titlebarOverhang;
@property (readonly) char _layoutHeightDependsOnWidth;
@property (readonly) unsigned long long _axesForDerivingIntrinsicContentSizeFromLayoutSize;
@property (readonly) char _wantsConstraintBasedLayout;
@property (readonly) char worksWhenModal;
@property unsigned long long compositingOperation;
@property (copy) id /* block */ updateLayerHandler;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _renderedContentRect;
@property (readonly) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } _backingTransform;
@property (setter=_setAllowsGroupBlending:) char _allowsGroupBlending;
@property (setter=_setVibrantBlendingStyleForSubtree:) unsigned long long _vibrantBlendingStyleForSubtree;
@property (retain, nonatomic, setter=_setInternalAppIntentsIntelligenceProvider:) id _internalAppIntentsIntelligenceProvider;
@property (setter=_setUserInterfaceLayoutDirectionPropagatesToDescendants:) char _userInterfaceLayoutDirectionPropagatesToDescendants;
@property (setter=_setUsesNonVibrantAppearance:) char _usesNonVibrantAppearance;
@property (readonly) NSAppearance *_preferredAppearance;
@property (retain) NSView *maskView;
@property (readonly) int _vibrancyBlendMode;
@property (setter=_setAlwaysAllowsVibrantBlendingStyle:) char _alwaysAllowsVibrantBlendingStyle;
@property (nonatomic, setter=_setSemanticContext:) long long _semanticContext;
@property (readonly, nonatomic) long long _effectiveSemanticContext;
@property char wantsExtendedDynamicRange;
@property (readonly) double backingScaleFactor;
@property (readonly) NSColorSpace *colorSpace;
@property char shouldBeArchived;
@property (copy) NSColor *backgroundColor;
@property double cornerRadius;
@property (setter=_setCornerRadius:) double _cornerRadius;
@property char ignoreHitTest;
@property (nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } frameTransform;
@property (readonly) long long _focusRingAnimationType;
@property (readonly) NSWindow *window;
@property (readonly) NSView *superview;
@property (copy) NSArray *subviews;
@property (readonly) NSView *opaqueAncestor;
@property (getter=isHidden) char hidden;
@property (readonly, getter=isHiddenOrHasHiddenAncestor) char hiddenOrHasHiddenAncestor;
@property (readonly) char wantsDefaultClipping;
@property char postsFrameChangedNotifications;
@property char autoresizesSubviews;
@property unsigned long long autoresizingMask;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property double frameRotation;
@property double frameCenterRotation;
@property double boundsRotation;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (readonly, getter=isFlipped) char flipped;
@property (readonly, getter=isRotatedFromBase) char rotatedFromBase;
@property (readonly, getter=isRotatedOrScaledFromBase) char rotatedOrScaledFromBase;
@property (readonly, getter=isOpaque) char opaque;
@property char canDrawConcurrently;
@property (readonly) char canDraw;
@property char needsDisplay;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } visibleRect;
@property (readonly) long long tag;
@property (readonly) char needsPanelToBecomeKey;
@property (readonly) char mouseDownCanMoveWindow;
@property char acceptsTouchEvents;
@property char wantsRestingTouches;
@property long long layerContentsRedrawPolicy;
@property long long layerContentsPlacement;
@property char wantsLayer;
@property (retain) CALayer *layer;
@property (readonly) char wantsUpdateLayer;
@property char canDrawSubviewsIntoLayer;
@property char needsLayout;
@property double alphaValue;
@property char layerUsesCoreImageFilters;
@property (copy) NSArray *backgroundFilters;
@property (retain) CIFilter *compositingFilter;
@property (copy) NSArray *contentFilters;
@property (copy) NSShadow *shadow;
@property char clipsToBounds;
@property char postsBoundsChangedNotifications;
@property (readonly) NSScrollView *enclosingScrollView;
@property (copy) NSString *toolTip;
@property (readonly) char inLiveResize;
@property (readonly) char preservesContentDuringLiveResize;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } rectPreservedDuringLiveResize;
@property (readonly) NSTextInputContext *inputContext;
@property long long userInterfaceLayoutDirection;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } preparedContentRect;
@property (readonly) char allowsVibrancy;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy) NSDictionary *animations;
@property (copy) NSString *identifier;
@property (retain) NSAppearance *appearance;
@property (readonly) NSAppearance *effectiveAppearance;
@property (getter=isAccessibilityElement) char accessibilityElement;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } accessibilityFrame;
@property (getter=isAccessibilityFocused) char accessibilityFocused;
@property struct CGPoint { double x0; double x1; } accessibilityActivationPoint;
@property (weak) id accessibilityTopLevelUIElement;
@property (copy) NSURL *accessibilityURL;
@property (retain) id accessibilityValue;
@property (copy) NSString *accessibilityValueDescription;
@property (copy) NSArray *accessibilityVisibleChildren;
@property (copy) NSString *accessibilitySubrole;
@property (copy) NSString *accessibilityTitle;
@property (weak) id accessibilityTitleUIElement;
@property (copy) NSArray *accessibilityNextContents;
@property long long accessibilityOrientation;
@property (retain) id accessibilityOverflowButton;
@property (weak) id accessibilityParent;
@property (copy) NSString *accessibilityPlaceholderValue;
@property (copy) NSArray *accessibilityPreviousContents;
@property (copy) NSString *accessibilityRole;
@property (copy) NSString *accessibilityRoleDescription;
@property (retain) id accessibilitySearchButton;
@property (retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected) char accessibilitySelected;
@property (copy) NSArray *accessibilitySelectedChildren;
@property (copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (retain) id accessibilityShownMenu;
@property (retain) id accessibilityMinValue;
@property (retain) id accessibilityMaxValue;
@property (copy) NSArray *accessibilityLinkedUIElements;
@property (weak) id accessibilityWindow;
@property (copy) NSString *accessibilityIdentifier;
@property (copy) NSString *accessibilityHelp;
@property (copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityExpanded) char accessibilityExpanded;
@property (getter=isAccessibilityEdited) char accessibilityEdited;
@property (getter=isAccessibilityEnabled) char accessibilityEnabled;
@property (copy) NSArray *accessibilityChildren;
@property (copy) NSArray *accessibilityChildrenInNavigationOrder;
@property (retain) id accessibilityClearButton;
@property (retain) id accessibilityCancelButton;
@property (getter=isAccessibilityProtectedContent) char accessibilityProtectedContent;
@property (copy) NSArray *accessibilityContents;
@property (copy) NSString *accessibilityLabel;
@property (getter=isAccessibilityAlternateUIVisible) char accessibilityAlternateUIVisible;
@property (copy) NSArray *accessibilitySharedFocusElements;
@property (getter=isAccessibilityRequired) char accessibilityRequired;
@property (copy) NSArray *accessibilityCustomRotors;
@property (copy) NSArray *accessibilityUserInputLabels;
@property (copy) NSArray *accessibilityAttributedUserInputLabels;
@property (retain) id accessibilityApplicationFocusedUIElement;
@property (retain) id accessibilityMainWindow;
@property (getter=isAccessibilityHidden) char accessibilityHidden;
@property (getter=isAccessibilityFrontmost) char accessibilityFrontmost;
@property (retain) id accessibilityFocusedWindow;
@property (copy) NSArray *accessibilityWindows;
@property (weak) id accessibilityExtrasMenuBar;
@property (weak) id accessibilityMenuBar;
@property (copy) NSArray *accessibilityColumnTitles;
@property (getter=isAccessibilityOrderedByRow) char accessibilityOrderedByRow;
@property long long accessibilityHorizontalUnits;
@property long long accessibilityVerticalUnits;
@property (copy) NSString *accessibilityHorizontalUnitDescription;
@property (copy) NSString *accessibilityVerticalUnitDescription;
@property (copy) NSArray *accessibilityHandles;
@property (retain) id accessibilityWarningValue;
@property (retain) id accessibilityCriticalValue;
@property (getter=isAccessibilityDisclosed) char accessibilityDisclosed;
@property (weak) id accessibilityDisclosedByRow;
@property (retain) id accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel;
@property (copy) NSArray *accessibilityMarkerUIElements;
@property (retain) id accessibilityMarkerValues;
@property (retain) id accessibilityMarkerGroupUIElement;
@property long long accessibilityUnits;
@property (copy) NSString *accessibilityUnitDescription;
@property long long accessibilityRulerMarkerType;
@property (copy) NSString *accessibilityMarkerTypeDescription;
@property (retain) id accessibilityHorizontalScrollBar;
@property (retain) id accessibilityVerticalScrollBar;
@property (copy) NSArray *accessibilityAllowedValues;
@property (copy) NSArray *accessibilityLabelUIElements;
@property float accessibilityLabelValue;
@property (copy) NSArray *accessibilitySplitters;
@property (retain) id accessibilityDecrementButton;
@property (retain) id accessibilityIncrementButton;
@property (copy) NSArray *accessibilityTabs;
@property (retain) id accessibilityHeader;
@property long long accessibilityColumnCount;
@property long long accessibilityRowCount;
@property long long accessibilityIndex;
@property (copy) NSArray *accessibilityColumns;
@property (copy) NSArray *accessibilityRows;
@property (copy) NSArray *accessibilityVisibleRows;
@property (copy) NSArray *accessibilitySelectedRows;
@property (copy) NSArray *accessibilityVisibleColumns;
@property (copy) NSArray *accessibilitySelectedColumns;
@property long long accessibilitySortDirection;
@property (copy) NSArray *accessibilityRowHeaderUIElements;
@property (copy) NSArray *accessibilitySelectedCells;
@property (copy) NSArray *accessibilityVisibleCells;
@property (copy) NSArray *accessibilityColumnHeaderUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityRowIndexRange;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityColumnIndexRange;
@property long long accessibilityInsertionPointLineNumber;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySharedCharacterRange;
@property (copy) NSArray *accessibilitySharedTextUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityVisibleCharacterRange;
@property long long accessibilityNumberOfCharacters;
@property (copy) NSString *accessibilitySelectedText;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySelectedTextRange;
@property (copy) NSArray *accessibilitySelectedTextRanges;
@property (retain) id accessibilityToolbarButton;
@property (getter=isAccessibilityModal) char accessibilityModal;
@property (retain) id accessibilityProxy;
@property (getter=isAccessibilityMain) char accessibilityMain;
@property (retain) id accessibilityFullScreenButton;
@property (retain) id accessibilityGrowArea;
@property (copy) NSString *accessibilityDocument;
@property (retain) id accessibilityDefaultButton;
@property (retain) id accessibilityCloseButton;
@property (retain) id accessibilityZoomButton;
@property (retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized) char accessibilityMinimized;
@property (copy) NSArray *accessibilityCustomActions;

+ (id)new;
+ (void)initialize;
+ (void)_antialiasThresholdChanged:(id)a0;
+ (id)_briefDescriptionCodeDescription;
+ (Class)_classToCheckForRequiresConstraintBasedLayout;
+ (void)_debug_clearLayoutFrameChangeCount;
+ (void)_debug_incrementLayoutFrameChangeCount;
+ (int)_debug_layoutFrameChangeCount;
+ (char)_debug_layoutFrameChangeFlag;
+ (void)_debug_setLayoutFrameChangeFlag:(char)a0;
+ (char)_debug_shouldReportUnnecessaryLayoutCalls;
+ (Class)_dynamicToolTipManagerClass;
+ (id)_findFirstKeyViewInDirection:(unsigned long long)a0 forKeyLoopGroupingView:(id)a1;
+ (id)_hiddenViewsTint;
+ (void)_performWithoutAnimation:(id /* block */)a0;
+ (id)_rvItemForResult:(id)a0;
+ (void)_setHiddenViewsTint:(id)a0;
+ (void)_setShowsAlignmentRects:(char)a0;
+ (void)_setShowsAllDrawing:(char)a0;
+ (void)_setShowsAllViews:(char)a0;
+ (void)_setShowsWMInfo:(char)a0;
+ (void)_setShowsWindowOcclusionState:(char)a0;
+ (char)automaticallyNotifiesObserversOfHidden;
+ (char)automaticallyNotifiesObserversOfHiddenOrHasHiddenAncestor;
+ (char)automaticallyNotifiesObserversOfWantsLayer;
+ (char)automaticallyNotifiesObserversOf_recommendedDrawableSize;
+ (char)automaticallyNotifiesObserversOf_titlebarOverhang;
+ (char)automaticallyNotifiesObserversOf_userInterfaceLayoutDirectionPropagatesToDescendants;
+ (id)defaultAnimationForKey:(id)a0;
+ (unsigned long long)defaultFocusRingType;
+ (long long)default_semanticContext;
+ (id)keyPathsForValuesAffectingAlignmentRectInsets;
+ (id)keyPathsForValuesAffectingFunctionRow;
+ (id)keyPathsForValuesAffectingUserInterfaceLayoutDirection;
+ (id)keyPathsForValuesInvalidatingConstraints;
+ (id)keyPathsForValuesInvalidatingDisplay;
+ (id)keyPathsForValuesInvalidatingIntrinsicContentSize;
+ (id)keyPathsForValuesInvalidatingLayout;
+ (char)requiresConstraintBasedLayout;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)didChangeValueForKey:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)prepareForReuse;
- (id)menu;
- (void)layout;
- (void)setValue:(id)a0 forKeyPath:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_alignmentFrame;
- (id)_childRuleNodes;
- (id)_collectionViewLayoutAttributes;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRectFromSuperview:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 test:(char)a1;
- (void)_didMeasureMinSizeForFullscreen;
- (void)_drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 clip:(char)a1;
- (id)_heightVariable;
- (id)_recursiveConstraintsWithDepth:(long long)a0;
- (id)_recursiveSetDefaultKeyViewLoop;
- (void)_registerForDraggedTypes:(id)a0 later:(char)a1;
- (void)_removeSubview:(id)a0;
- (id)_rvPresentingContextAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (id)_screenAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_setAutomaticFocusRingDisabled:(char)a0;
- (void)_setEffectiveSurfaceColorSpace:(id)a0;
- (void)_setHasToolTip:(char)a0;
- (void)_setLiveResize:(char)a0;
- (void)_setupCrossFadeFromView:(id)a0 toView:(id)a1;
- (void)_updateVibrancy;
- (id)_vibrancyFilter;
- (void)_viewWillDisappearBecauseHidden;
- (id)accessibilityActionDescription:(id)a0;
- (void)addConstraints:(id)a0;
- (void)addLayoutGuide:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })centerScanRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)display;
- (id)displayLinkWithTarget:(id)a0 selector:(SEL)a1;
- (void)draggingExited:(id)a0;
- (char)isDescendantOf:(id)a0;
- (char)knowsPageRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a0;
- (char)nsis_shouldIntegralizeVariable:(id)a0;
- (id)nsli_layoutRect;
- (void)rightMouseDown:(id)a0;
- (void)setFrameOrigin:(struct CGPoint { double x0; double x1; })a0;
- (void)setNextKeyView:(id)a0;
- (char)shouldDrawColor;
- (void)viewDidChangeBackingProperties:(id)a0;
- (id)visibleAccessibleOrLeafSubviews;
- (id)_accessibilityEnclosingTableRow;
- (id)_accessibilityParentForSubview:(id)a0;
- (id)_bindingAdaptor;
- (void)_didRemoveLayer;
- (void)_discardEngine:(id)a0;
- (void)_enableTrackingRectsIfNotHidden;
- (char)_isKeyLoopGroup;
- (void)_markAsDequeued;
- (void)_maybeCheckForAmbiguityForItem:(id)a0;
- (id)_recursiveFindDefaultButtonCell;
- (id)_replacementConstraintForConstraint:(id)a0 whenReplacingView:(id)a1 withView:(id)a2;
- (void)_setDontSuppressLayerAnimation:(char)a0;
- (void)_setSurfaceBackedOpenGLContext:(id)a0;
- (void)_updateLayerShadowColorFromView;
- (void)_updateViewRoot;
- (void)_viewWillBePiercedByConstraint:(id)a0;
- (char)_wantsHeartBeat;
- (id)deepestAccessibilityDescendants;
- (void)displayIfNeeded;
- (void)endPage;
- (char)gesturesEnabled;
- (char)nsli_descriptionIncludesPointer;
- (id)previousKeyView;
- (void)removeConstraintWithIdentifier:(id)a0;
- (id)reuseIdentifier;
- (void)setUserInterfaceItemIdentifier:(id)a0;
- (unsigned int)_CAViewFlags;
- (void)_abortEditingIfFirstResponderIsASubview;
- (id)_accessibilityBasicHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)_accessibilityEnclosingTableView;
- (char)_accessibilityIsTableViewDescendant;
- (void)_accessibilityShowMenu:(id)a0;
- (id)_accessibilityUIElementSpecifier;
- (void)_addChildRuleNode:(id)a0;
- (void)_addRevealoverIfNecessaryForCell:(id)a0 cellRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_addSubview:(id)a0;
- (void)_addToOrphanList;
- (long long)_addToolTipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 displayDelegate:(id)a1 displayInfo:(id)a2;
- (long long)_addTrackingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 owner:(id)a1 userData:(void *)a2 assumeInside:(char)a3 useTrackingNum:(long long)a4;
- (void)_addTrackingRects:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 owner:(id)a1 userDataList:(void **)a2 assumeInsideList:(char *)a3 trackingNums:(long long *)a4 count:(long long)a5;
- (void)_adjustLayoutForResolutionChangeToRetina:(char)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_alignmentBounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_alignmentBoundsForPopover;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_alignmentRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)_allowAutoresizingMaskFixupDueToSuperOverridingResizeSubviews;
- (char)_allowDynamicContentSizeChangesWhileScrolling;
- (char)_allowImplicitInclusiveLayeringForResponsiveScrolling;
- (char)_allowRoundingToChangeSize;
- (char)_allowsContextMenuForSelection;
- (char)_allowsContextMenus;
- (char)_allowsEngineHostPreferredSizeConstraints;
- (id)_ancestorForStartOfDisplayRecursion;
- (id)_ancestorViewsDescription;
- (id)_ancestorViewsDescriptionForLogging:(char)a0;
- (id)_ancestorWithLayer;
- (char)_animatingFrameSize;
- (Class)_animatorClass;
- (char)_appearanceSensitiveIsOpaque;
- (char)_arePreferredAttributesValid;
- (void)_asyncDragImage:(id)a0 at:(struct CGPoint { double x0; double x1; })a1 offset:(struct CGSize { double x0; double x1; })a2 event:(id)a3 pasteboard:(id)a4 source:(id)a5 slideBack:(char)a6;
- (char)_attemptConcurrentViewDrawingForSelfAndDescendants;
- (char)_autoDrawConcurrently;
- (id)_autolayoutTrace;
- (char)_automaticFocusRingDisabled;
- (id)_autoresizingConstraints;
- (struct CGPoint { double x0; double x1; })_autoscrollAmountForEvent:(id)a0;
- (struct CGPoint { double x0; double x1; })_autoscrollAmountForTouch:(id)a0;
- (struct CGPoint { double x0; double x1; })_autoscrollAmountForWindowPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_autoscrollForDraggingInfo:(id)a0 timeDelta:(double)a1;
- (double)_autoscrollScreenEdgeFactorFromPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)_backgroundColorForFontSmoothing;
- (double)_backingScaleFactorForDrawing;
- (double)_baseScaleFactor;
- (struct { double x0; double x1; })_baselineOffsetsAtSize:(struct CGSize { double x0; double x1; })a0;
- (void)_beginAnimatingFrame;
- (void)_betterCacheDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toBitmapImageRep:(id)a1;
- (id)_bitmapImageRepForCachingDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 colorSpace:(id)a1;
- (id)_bitmapImageRepForCachingDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 colorSpace:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundsForAlignmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_briefDescription;
- (id)_briefDescriptionForLogging:(char)a0;
- (void)_buildLayerTreeFromRoot;
- (id)_buttonOfClass:(Class)a0 action:(SEL)a1;
- (void)_calcHeightsWithMargin:(const struct CGSize { double x0; double x1; } *)a0 operation:(id)a1;
- (double)_calcMarginSize:(struct CGSize { double x0; double x1; } *)a0 operation:(id)a1;
- (void)_calcWidthsWithMargin:(const struct CGSize { double x0; double x1; } *)a0 operation:(id)a1;
- (struct CGSize { double x0; double x1; })_calculateEngineHostPreferredSize;
- (void)_calculateSubviewAlignmentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 superviewAlignmentBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 forAutoresizingMask:(unsigned long long)a2;
- (char)_canCopyOnScroll;
- (char)_canShowExpansionTooltips;
- (char)_canSubtreeUseInclusiveLayersAutomatically;
- (id)_classSetToIgnoreForAuditing;
- (Class)_classToCheckForWantsUpdateLayer;
- (void)_clearHasBeenCommittedIfNeededOrForced:(char)a0;
- (void)_clearPostponedSurfaceSync;
- (void)_clearRememberedEditingFirstResponder;
- (id)_clipViewAncestor;
- (void)_clipViewAncestorDidScroll:(id)a0;
- (void)_clipViewAncestorWillScroll:(id)a0;
- (char)_clipViewShouldClipFocusRing;
- (void)_collectDescendantsNeedingLayout:(id)a0;
- (void)_collectDescendantsNeedingUpdateConstraints:(id)a0;
- (id)_collectedViewsWaitingForConstraintsFinished;
- (unsigned long long)_collectionViewReusableViewFlags;
- (void)_commonAwake;
- (void)_complainAboutImproperDeclaredConstraintInvalidation;
- (void)_compositeHiddenViewHighlight;
- (void)_computeBounds;
- (long long)_computedUserInterfaceLayoutDirection;
- (void)_concludeDefaultKeyLoopComputation;
- (id)_constraintsArray;
- (id)_constraintsEquivalentToAutoresizingMask;
- (id)_constraintsReferencingItem:(id)a0;
- (void)_constraints_snipDangliesWithForce:(char)a0;
- (void)_constraints_subviewDidChangeSuperview:(id)a0;
- (void)_constraints_subviewWillChangeSuperview:(id)a0;
- (void)_constraints_viewGeometryDidChange;
- (struct CGSize { double x0; double x1; })_contentCompressionResistancePriorities;
- (char)_contentHuggingDefault_isUsuallyFixedHeight;
- (char)_contentHuggingDefault_isUsuallyFixedWidth;
- (struct CGSize { double x0; double x1; })_contentHuggingPriorities;
- (id)_contentSizeConstraints;
- (id)_contextForLockFocus:(char)a0;
- (id)_contextMenuTargetForEvent:(id)a0;
- (struct CGPoint { double x0; double x1; })_convertPoint:(struct CGPoint { double x0; double x1; })a0 fromAncestor:(id)a1;
- (struct CGPoint { double x0; double x1; })_convertPoint:(struct CGPoint { double x0; double x1; })a0 toAncestor:(id)a1;
- (struct CGPoint { double x0; double x1; })_convertPointFromIntegralizationSpace:(struct CGPoint { double x0; double x1; })a0;
- (char)_convertPointFromSuperview:(struct CGPoint { double x0; double x1; } *)a0 test:(char)a1;
- (struct CGPoint { double x0; double x1; })_convertPointToIntegralizationSpace:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })_convertPointToSuperview:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromAncestor:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toAncestor:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRectFromIntegralizationSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRectToIntegralizationSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRectToSuperview:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })_convertSizeFromIntegralizationSpace:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })_convertSizeToIntegralizationSpace:(struct CGSize { double x0; double x1; })a0;
- (char)_copyForCurrentOperation;
- (id)_copySubviewsInOrderOfDisplay;
- (id)_crackPoint:(struct CGPoint { double x0; double x1; } *)a0;
- (id)_crackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (id)_crackSize:(struct CGSize { double x0; double x1; } *)a0;
- (id)_createLayer;
- (void)_createLayerAndInitialize;
- (struct CGPoint { double x0; double x1; })_currentScrollVelocity;
- (void)_debug_showKeyboardUILoop;
- (id)_declaredConstraints;
- (char)_defaultClipsToBoundsBehavior;
- (struct CGSize { double x0; double x1; })_defaultContentCompressionResistancePriorities;
- (struct CGSize { double x0; double x1; })_defaultContentHuggingPriorities;
- (long long)_defaultLayerContentsRedrawPolicy;
- (id)_defaultLayoutDescription;
- (void)_delayedEnableRevealoverComputationAfterScrollWheel:(id)a0;
- (long long)_depthFirstCompare:(id)a0;
- (id)_descendantWithAmbiguousLayout;
- (id)_descendantsPassingTest:(id /* block */)a0;
- (id)_descriptionForLayoutTrace;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_desiredLayerBounds;
- (double)_desiredSurfaceResolution;
- (void)_didChangeAutoSetWantsLayer:(char)a0;
- (void)_didChangeHostsAutolayoutEngineTo:(char)a0;
- (void)_didEndMagnifying;
- (void)_didEndScrolling;
- (void)_didMagnify;
- (void)_didRestoreUserActivity:(id)a0;
- (void)_dirtyAutomaticInclusiveLayersInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_dirtyRect;
- (void)_disableNeedsDisplayInRectNotifications;
- (void)_disableTrackingArea:(id)a0;
- (void)_disableTrackingRectsIfHidden;
- (void)_dismissGestureRecognizers;
- (void)_displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isVisibleRect:(char)a1 rectIsVisibleRectForView:(id)a2;
- (void)_doCrossFadeFromView:(id)a0 toView:(id)a1;
- (void)_doSlideAnimation:(unsigned long long)a0 fromView:(id)a1 toView:(id)a2;
- (char)_dontSuppressLayerAnimation;
- (id)_dragTypes;
- (id)_drawDelegate;
- (void)_drawExpansionToolTipInView:(id)a0 usingCell:(id)a1;
- (void)_drawFocusRingDebugAroundRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_drawMetricsOverlays;
- (void)_drawOverlayRegion:(id)a0;
- (void)_drawRectAsLayerTree:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)_drawRectIfEmpty;
- (char)_drawRectIfEmptyWhenSubviewsCoverDirtyRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_drawRectWithObservationTracking:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_drawScrollViewFocusRing:(id)a0 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 needsFullDisplay:(char)a2;
- (char)_drawView:(id)a0;
- (void)_drawViewBackingLayer:(id)a0 inContext:(struct CGContext { } *)a1 drawingHandler:(id /* block */)a2;
- (char)_drawnByAncestor;
- (char)_drawsNothing;
- (char)_drawsOwnDescendants;
- (char)_drawsWithTintWhenHidden;
- (id)_dumpDisplayList;
- (id)_dumpLayer;
- (id)_dynamicToolTipManager;
- (unsigned long long)_edgesPropagatingSafeAreaInsetsToSubviews;
- (id)_editingFirstResponderIfIsASubview;
- (unsigned long long)_effectiveAutoresizingMask;
- (void)_effectiveAutoresizingMask_autoresizesSubviewsChanged;
- (double)_effectiveBackingScaleFactorForLayout;
- (unsigned long long)_effectiveFocusRingType;
- (void)_enableNeedsDisplayInRectNotifications;
- (void)_enableOrDisableTrackingAreas;
- (void)_enableTrackingArea:(id)a0;
- (char)_encapsulatesSubtreeLayout;
- (id)_enclosingMenuItem;
- (id)_enclosingScrollViewIfDocumentView;
- (id)_encodedLayerTree;
- (void)_endAnimatingFrame;
- (void)_endEditingIfFirstResponderIsASubview;
- (void)_endLiveAnimation;
- (void)_endLiveResize;
- (void)_endLiveResizeAsTopLevel;
- (void)_engageAutolayout;
- (id)_engineHostConstraints;
- (char)_engineHostingPreferredSizeConstraintsNeedUpdating;
- (id)_engineHostingView;
- (void)_ensureSubviewNextKeyViewsAreSubviews;
- (char)_enumerateVisibleDescendantsThatOverlapRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inFrontOfSubview:(id)a1 recurseUp:(char)a2 usingBlock:(id /* block */)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_expandAndConstrainRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 byAmount:(struct CGSize { double x0; double x1; })a1;
- (void)_finalize;
- (id)_findControlWithStringValuePrefix:(id)a0;
- (id)_findLastViewInKeyViewLoop;
- (id)_findLastViewInKeyViewLoopStartingAtView:(id)a0;
- (id)_findViewPassingTest:(id /* block */)a0;
- (void)_finishDecodingLayoutGuideConnections:(id)a0;
- (void)_finishTwoPassConstraintsUpdateIfNeeded;
- (void)_finishedAnimatingScroll;
- (void)_finishedMakingConnections;
- (char)_focusFromView:(id)a0 withContext:(id)a1;
- (id)_focusInto:(id)a0 withClip:(char)a1;
- (id)_focusRingBleedRegion;
- (id)_focusRingClipAncestor;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_focusRingVisibleRect;
- (void)_forceUpdateLayerTreeRenderer;
- (long long)_frameAnimationCount;
- (id)_frameLayoutItem;
- (void)_gainedDescendantThatCanDrawConcurrently;
- (id)_gatherFocusStateInto:(id)a0 upTo:(id)a1 withContext:(id)a2;
- (id)_generateDraggingImageComponentWithKey:(id)a0 withMainDragView:(id)a1;
- (id)_gestureRecognizers;
- (id)_getDrawMatrix;
- (void)_getPageHeaderRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 pageFooterRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 forBorderSize:(struct CGSize { double x0; double x1; })a2;
- (void)_handleBoundsChangeForSubview:(id)a0;
- (void)_handleFrameChangeForSubview:(id)a0;
- (char)_hasActiveDragTypes;
- (char)_hasAutoCanDrawSubviewsIntoLayer;
- (char)_hasAutoSetWantsLayer;
- (char)_hasBaselineOffsetsAtSize;
- (char)_hasCanDrawSubviewsIntoLayerAncestor;
- (char)_hasCanDrawSubviewsIntoLayerOrAncestor;
- (char)_hasDrawMatrix;
- (char)_hasEverHadInvalidRestorableState;
- (char)_hasExplicitSurfaceColorSpace;
- (char)_hasInvalidRestorableState;
- (char)_hasLegacyExternalFocusRingThatWasNormallyDrawnManually;
- (char)_hasRectangularFocusRingAroundFrame;
- (char)_hasToolTip;
- (id)_highlightColorForCell:(id)a0;
- (id)_hitTest:(struct CGPoint { double x0; double x1; } *)a0 dragTypes:(id)a1;
- (id)_hitTest:(struct CGPoint { double x0; double x1; })a0 ignoringResizeRegion:(char)a1;
- (id)_hitTestForEvent:(id)a0;
- (id)_hitTestToBlockWindowResizing:(struct CGPoint { double x0; double x1; })a0 forResizeDirection:(long long)a1;
- (id)_hostedLayoutEngineOverride;
- (char)_hostsAutolayoutEngine;
- (char)_ignoreAudit;
- (char)_ignoreForKeyViewLoop;
- (char)_impactsWindowMoving;
- (char)_inLiveResize;
- (void)_informContainerThatSubviewsNeedLayout;
- (void)_informContainerThatSubviewsNeedUpdateConstraints;
- (id)_inputContext;
- (void)_insertMissingSubviewLayers;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_insetVisibleRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_integralizationSpaceAlignedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(unsigned long long)a1;
- (void)_intelligenceCollectContentIn:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 collector:(id)a1;
- (void)_intelligenceCollectElementFor:(id)a0 in:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 using:(id)a2 transformToRoot:(id /* block */)a3;
- (void)_intelligenceCollectRemoteContentInVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 remoteContextWrapper:(id)a1;
- (void)_intelligenceCollectSubelementsIn:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 using:(id)a1 transformToRoot:(id /* block */)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_interactiveBounds;
- (void)_internalSetAppearance:(id)a0;
- (struct CGSize { double x0; double x1; })_intrinsicContentFrameSize;
- (void)_intrinsicContentSizeInvalidatedForChildView:(id)a0;
- (void)_invalidateAllRevealovers;
- (void)_invalidateAutoresizingConstraints;
- (void)_invalidateCursorRects;
- (void)_invalidateEffectiveVibrantBlendingStyle;
- (void)_invalidateEngineHostConstraints;
- (void)_invalidateEngineHostingPreferredSizeConstraints;
- (void)_invalidateFocus;
- (id)_invalidateGStatesForTree;
- (void)_invalidateIntrinsicContentSizeDirtyingConstraints:(char)a0;
- (void)_invalidatePreferredAttributes;
- (char)_isAncestorOf:(id)a0;
- (char)_isAncestorOfViewIdenticalTo:(void *)a0;
- (char)_isContainedInMenu;
- (char)_isDiagonallyRotatedOrScaledFromBase;
- (char)_isFirstResponder;
- (char)_isHiddenForReuse;
- (char)_isInclusiveLayerBacked;
- (char)_isLayerBacked;
- (char)_isLayingOut;
- (char)_isLeafNodeWithPotentialAccessibilityChildren;
- (char)_isMagnifying;
- (char)_isResizingFromLayout;
- (char)_isScrolling;
- (char)_isUserInterfaceLayoutDirectionExplicitlySet;
- (char)_isViewRoot;
- (id)_kitAppearance;
- (char)_knowsPagesFirst:(long long *)a0 last:(long long *)a1;
- (id)_layerBackedOpenGLContext;
- (id)_layerTreeDescription;
- (struct _CAView { } *)_layerTreeRenderer;
- (void)_layoutAtSubtreeLevelIfNeeded;
- (void)_layoutAtWindowLevelIfNeeded;
- (id)_layoutDebuggingIdentifier;
- (char)_layoutDescendsToSubviewsOnAllFrameSizeChanges;
- (id)_layoutDescriptionIfDifferentFromDefault;
- (id)_layoutEngine;
- (char)_layoutEngine_didAddLayoutConstraint:(id)a0 integralizationAdjustment:(double)a1 mutuallyExclusiveConstraints:(id *)a2;
- (void)_layoutEngine_willRemoveLayoutConstraint:(id)a0;
- (void)_layoutEngine_windowDidChange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_layoutFrame;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_layoutMargins;
- (id)_layoutMarginsGuideIfExists;
- (struct CGSize { double x0; double x1; })_layoutSizeThatFits:(struct CGSize { double x0; double x1; })a0 fixedAxes:(unsigned long long)a1;
- (void)_layoutSublayersOfLayer:(id)a0;
- (void)_layoutSubtreeIfNeededAndAllowTemporaryEngine:(char)a0;
- (void)_layoutSubtreeIfNeededNoEngineCreation;
- (void)_layoutSubtreeWithOldSize:(struct CGSize { double x0; double x1; })a0;
- (id)_layoutVariablesWithAmbiguousValue;
- (void)_layoutWithObservationTracking;
- (void)_lfld_addGeometryChangeRecordWithPropertyName:(id)a0 value:(id)a1;
- (void)_lfld_addSetNeedsLayoutCallStack:(id)a0;
- (void)_lfld_addVariableChangeRecordForVariable:(id)a0 inLayoutEngine:(id)a1;
- (id)_lfld_description;
- (void)_lfld_discardLastCurrentLayoutMethodName;
- (void)_lfld_incrementCount;
- (id)_lfld_minimalDescription;
- (void)_lfld_prepareToResetCountIfNecessary;
- (void)_lfld_pushCurrentLayoutMethodName:(id)a0;
- (void)_lfld_resetCount;
- (void)_logViewsThatNeedLayoutOrUpdateConstraints;
- (id)_makeAndStoreDrawMatrix;
- (id)_makeEngineHostConstraints;
- (void)_makeOrUpdateContentSizeWidthConstraint:(id *)a0 heightConstraint:(id *)a1;
- (void)_makeRememberedOrNewEditingSubviewBecomeFirstResponder;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_marginsInsetsForSafeAreaInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)_markRememberedEditingFirstResponderIfIsASubview;
- (char)_mayHaveVisibleDescendantsThatOverlapRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inFrontOfSubview:(id)a1;
- (void)_measureWithTemporaryConstraints:(id)a0 suspendingSystemConstraints:(char)a1 withOptimizedEngineBlock:(id /* block */)a2;
- (id)_menuItemsForRevealItem:(id)a0 contextual:(char)a1 options:(id)a2 locationInWindow:(struct CGPoint { double x0; double x1; })a3;
- (id)_minXVariable;
- (id)_minYVariable;
- (struct CGSize { double x0; double x1; })_minimumFrameSize;
- (id)_nearestAncestorOfClass:(Class)a0;
- (char)_needsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)_needsLayoutEngine;
- (char)_needsLayoutForAnimation;
- (char)_needsRedisplayOnFrameChange;
- (id)_nextResponderForEvent:(id)a0;
- (id)_nonTAMICConstraints;
- (void)_noteDeclaredConstraintWasManuallyRemoved:(id)a0;
- (void)_notePreferredAppearanceDidChange;
- (id)_ns_observationTrackingDictionary;
- (void)_ns_setObservationTrackingDictionary:(id)a0;
- (void)_nsib_setUsesPointIntegralizationForLayout:(char)a0;
- (char)_nsib_usesPointIntegralizationForLayout;
- (id)_observerForChangesInGeometryInWindow:(id /* block */)a0;
- (void)_oldDisplayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isVisibleRect:(char)a1 rectIsVisibleRectForView:(id)a2;
- (void)_omitFalsePositiveKeyViewCandidates:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_opaqueRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_opaqueRectForWindowMoveWhenInTitlebar;
- (id)_openGLContextForCurrentLayerBackingState;
- (void)_orderFrontSurfacesIfNotHidden;
- (void)_orderOutTheSurfaceIfHidden;
- (id)_pageHeaderAndFooterTextAttributes;
- (id)_parentalLayoutEngine;
- (void)_parentalLayoutEngineDidChangeTo:(id)a0;
- (void)_performAnimated:(char)a0 actions:(id /* block */)a1;
- (void)_performAnimatedAction:(id /* block */)a0;
- (char)_performKeyEquivalent:(id)a0 conditionally:(char)a1;
- (id)_persistentUIChildren;
- (id)_persistentUIIdentifier;
- (id)_persistentUIWindow;
- (void)_populateEngineWithConstraintsForViewSubtree:(id)a0 forComputingFittingSizeOfView:(id)a1;
- (void)_populateRecursiveConstraintIdentifiersWithMapping:(id)a0;
- (void)_postBoundsChangeNotification;
- (void)_postFrameChangeNotification;
- (char)_potentiallyHasDanglyConstraints;
- (struct CGSize { double x0; double x1; })_preferredAutolayoutEngineToUserScalingCoefficients;
- (id)_preferredLayoutAttributesFittingAttributes:(id)a0;
- (void)_prepareForDefaultKeyLoopComputation;
- (void)_prepareForTwoPassConstraintsUpdateIfNeeded;
- (id)_pressureConfigurationTrackingAreaCreateIfNeeded:(char)a0;
- (id)_primitiveContentCompressionResistancePrioritiesValue;
- (id)_primitiveContentHuggingPrioritiesValue;
- (void)_primitiveSetDefaultNextKeyView:(id)a0;
- (void)_primitiveSetNextKeyView:(id)a0;
- (void)_primitiveSetNextKeyView:(id)a0 includeInDefaultLoop:(char)a1;
- (void)_primitiveSetPreviousKeyView:(id)a0;
- (char)_printForCurrentOperation;
- (float)_priorityForEngineHostConstraints;
- (double)_provideTotalScaleFactorForPrintOperation:(id)a0;
- (char)_reallyCanDrawConcurrently;
- (char)_reallyNeedsDisplayForBounds;
- (void)_rebuildLayoutFromScratch;
- (struct CGSize { double x0; double x1; })_recommendedDrawableSize;
- (void)_recurseSublayersLookingForViewsWithDirtyRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_recursive:(char)a0 displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inContext:(id)a2 stopAtLayerBackedViews:(char)a3;
- (id)_recursiveAutolayoutTraceAtLevel:(long long)a0;
- (void)_recursiveBreakKeyViewLoop;
- (void)_recursiveClearViewWillDidDisappearOnMoveToWindow;
- (void)_recursiveDisplayAllDirtyWithLockFocus:(char)a0 visRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_recursiveDisplayDescendantsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_recursiveDisplayRectIfNeededIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isVisibleRect:(char)a1 rectIsVisibleRectForView:(id)a2 topView:(char)a3;
- (void)_recursiveDisplaySelfAndDescendantsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_recursiveEnsureSubviewNextKeyViewsAreSubviewsOf:(id)a0;
- (void)_recursiveFreezeLayersBeforeTransplant;
- (void)_recursiveGainedDescendantThatOverridesNeedsDisplay;
- (void)_recursiveGainedHiddenAncestorBySwitchingWindow:(char)a0;
- (void)_recursiveGainedHiddenAncestorDuringUnarchiving;
- (void)_recursiveGatherAllKeyViewCandidatesInArray:(id)a0;
- (void)_recursiveLostHiddenAncestorBySwitchingWindow:(char)a0;
- (void)_recursiveMarkInclusiveLayerDirtyInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_recursiveOrderFrontSurfacesForNonHiddenViews;
- (void)_recursiveSendViewDidChangeAppearance:(id)a0;
- (void)_recursiveSetNeedsDisplay:(char)a0;
- (long long)_recursiveSubConstraintsCountIncludeEncapsulated:(char)a0;
- (void)_recursiveThawLayersAfterTransplant;
- (void)_recursiveTickleNeedsDisplay;
- (void)_recursiveWindowDidEnableToolTipCreationAndDisplay;
- (void)_recursivelyInvalidateCachedContentStyle;
- (id)_referencingConstraints;
- (id)_regionBeingDrawn;
- (struct CGSRegionObject { } *)_regionForOpaqueDescendants:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forMove:(char)a1;
- (struct CGSRegionObject { } *)_regionForOpaqueDescendants:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forMove:(char)a1 forUnderTitlebar:(char)a2;
- (void)_registerDraggingForiOSMacContext:(unsigned int)a0;
- (void)_releaseBindingAdaptor;
- (void)_removeAllRevealovers;
- (void)_removeChildRuleNode:(id)a0;
- (void)_removeFromKeyViewLoop;
- (void)_removeIBGeneratedPrototypingConstraints;
- (void)_removeLayerFromSuperlayer;
- (void)_removeLayerIfOwnedByAppKit;
- (void)_removeNextPointersToMe;
- (void)_removePreviousPointersToMe;
- (void)_removeTrackingRects:(long long *)a0 count:(long long)a1;
- (void)_renderCurrentPageForPrintOperation:(id)a0;
- (void)_renderLayerInContext:(id)a0;
- (void)_replaceSubview:(id)a0 with:(id)a1 rememberAndResetEditingFirstResponder:(char)a2 abortEditingIfNecessary:(char)a3;
- (void)_requestExtraUpdateConstraints;
- (void)_requestUpdateConstraintsFinishedForView:(id)a0;
- (id)_resetCursorRects;
- (void)_resetSupportsDirectLayerContentsCache;
- (void)_resetThePreparedContentRectKeepingAsMuchOverdrawAsPossible;
- (void)_resetThePreparedContentRectToTheVisibleRect;
- (void)_resetUpdateConstraintsPassCounter;
- (id)_responderDebugDescription;
- (void)_revealItemFromString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 options:(id)a2 baselineOriginProvider:(id /* block */)a3;
- (id)_revealoverInfoForCell:(id)a0 cellRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)_revertGestureRecognizerPressureConfigurationForEvent:(id)a0;
- (void)_rootLayerBackWindowIfNeeded;
- (id)_rootView;
- (id)_rootmostLayerTreeHostAncestor;
- (id)_rvDocumentContextWithOptions:(id)a0 item:(id)a1;
- (id)_rvItemForAttributedString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)_rvPresenter;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_safeAreaInsetsForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inSuperview:(id)a1;
- (id)_safeAreaLayoutGuideIfExists;
- (void)_safeSubviewEnumerationWithHandler:(id /* block */)a0;
- (void)_scrollPoint:(const struct CGPoint { double x0; double x1; } *)a0 fromView:(id)a1;
- (char)_scrollRectToVisible:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 fromView:(id)a1;
- (void)_scrollViewDidScrollBounds;
- (void)_sendViewWillDraw;
- (void)_setAllowsEngineHostPreferredSizeConstraints:(char)a0;
- (void)_setAnimatingFrameSize:(char)a0;
- (void)_setBackgroundStyleForSubtree:(long long)a0;
- (void)_setBaseCollectionViewLayoutAttributes:(id)a0;
- (void)_setBaselineOffsetFromBottomMayBeReferenced:(char)a0;
- (void)_setBindingAdaptor:(id)a0;
- (void)_setCollectionViewLayoutAttributes:(id)a0;
- (void)_setCollectionViewReusableViewFlags:(unsigned long long)a0;
- (void)_setContentCompressionResistancePriorities:(struct CGSize { double x0; double x1; })a0;
- (void)_setContentHuggingPriorities:(struct CGSize { double x0; double x1; })a0;
- (void)_setContentSizeConstraints:(id)a0;
- (void)_setDeclaredConstraints:(id)a0;
- (void)_setDefaultKeyViewLoop;
- (void)_setDrawDelegate:(id)a0;
- (void)_setDrawsOwnDescendants:(char)a0;
- (void)_setDrawsWithTintWhenHidden:(char)a0;
- (void)_setEngineHostConstraints:(id)a0;
- (void)_setHasExplicitSurfaceColorSpace:(char)a0;
- (void)_setHasInvalidRestorableState:(char)a0;
- (void)_setHidden:(char)a0 setNeedsDisplay:(char)a1;
- (void)_setHiddenForReuse:(char)a0;
- (void)_setHostsAutolayoutEngine:(char)a0;
- (void)_setIgnoreForKeyViewLoop:(char)a0;
- (void)_setImpactsWindowMoving:(char)a0;
- (void)_setKeyboardFocusRingNeedsDisplayAroundPerimeter;
- (void)_setKeyboardFocusRingNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 force:(char)a1;
- (void)_setLayerBackedOpenGLContext:(id)a0;
- (void)_setLayerNeedsDisplayInViewRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setLayerTreeRenderer:(struct _CAView { } *)a0;
- (void)_setLayoutEngine:(id)a0;
- (void)_setLayoutIsClean:(char)a0;
- (void)_setNeedsPostponedSurfaceSync;
- (void)_setOpenGLContext:(id)a0;
- (void)_setPotentiallyHasDanglyConstraints:(char)a0;
- (void)_setPrimitiveContentCompressionResistancePrioritiesValue:(id)a0;
- (void)_setPrimitiveContentHuggingPrioritiesValue:(id)a0;
- (void)_setReuseIdentifier:(id)a0;
- (void)_setRevealoversDirty:(char)a0;
- (void)_setSubviewsIvar:(id)a0;
- (void)_setSuperview:(id)a0;
- (void)_setSupportsDirectLayerContentsCache:(char)a0;
- (void)_setTrackingAreasDirty:(unsigned long long)a0;
- (void)_setWantsRevealovers:(char)a0;
- (void)_setWantsToHostAutolayoutEngine:(char)a0;
- (void)_setWindow:(id)a0;
- (void)_setWindowNeedsDisplayInViewsDrawableRect;
- (void)_setupConstraintsForGuide:(id)a0 withInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a1;
- (void)_setupFocusStateForDrawing;
- (void)_setupMarginsConstraintsIfNeeded;
- (void)_setupSafeAreaConstraintsIfNeeded;
- (void)_setupSlideAnimation:(unsigned long long)a0 fromView:(id)a1 toView:(id)a2;
- (void)_setupViewLayoutInvalidatorIfNecessary;
- (char)_shouldAutoFlattenLayerTree;
- (char)_shouldAutoscrollForDraggingInfo:(id)a0;
- (char)_shouldAutoscrollForEvent:(id)a0;
- (char)_shouldComputeRevealovers;
- (char)_shouldDetermineOpaqueRegionForMoves;
- (char)_shouldFixupChildAutoresizingMaskOnResizeSubviewsOverride;
- (char)_shouldPrintByCallingDrawRect;
- (char)_shouldUseTrackingAreasForToolTips;
- (void)_showAllDrawingDrawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)_showMenuForEvent:(id)a0;
- (char)_showingFocusRingAroundEnclosingScrollView:(id)a0;
- (id)_singleCell;
- (void)_snipConstraintsToAnchor:(id)a0;
- (void)_startLiveAnimation;
- (void)_startLiveResize;
- (void)_startLiveResizeAsTopLevel;
- (void)_startLiveResizeCacheOK:(char)a0;
- (id)_startingWindowForSendAction:(SEL)a0;
- (id)_subtreeDescription;
- (id)_subtreeDescriptionForLogging:(char)a0;
- (id)_subtreeDescriptionWithDepth:(long long)a0 forLogging:(char)a1;
- (void)_subview:(id)a0 valueOfVariable:(id)a1 didChangeInEngine:(id)a2;
- (id)_subviews;
- (id)_subviewsExcludingHiddenViews;
- (id)_subviewsIvar;
- (int)_supportsDirectLayerContentsCache;
- (id)_surfaceBackedOpenGLContext;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_surfaceBounds;
- (char)_surfaceInheritsWindowOpaqueShape;
- (void)_surfaceMoved:(id)a0;
- (void)_surfaceResized:(id)a0;
- (void)_syncSurfaceIfPostponed;
- (void)_synchronizeEffectivePressureConfiguration;
- (void)_toolTipManagerWillRecomputeToolTipsByRemoving:(char)a0 adding:(char)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_toolTipRectForCell:(id)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_trackingAreaRootDidChange;
- (void)_trackingAreaRootWillChange;
- (long long)_trackingAreasDirty;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_transformFromView:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_transformToView:(id)a0;
- (char)_treeHasDragTypes;
- (char)_tryToAddConstraint:(id)a0 integralizationAdjustment:(double)a1 mutuallyExclusiveConstraints:(id *)a2;
- (char)_tryToAddConstraint:(id)a0 mutuallyExclusiveConstraints:(id *)a1;
- (char)_tryToAddConstraint:(id)a0 roundingAdjustment:(double)a1 mutuallyExclusiveConstraints:(id *)a2;
- (char)_tryToEncapsulateSubtreeLayout;
- (void)_unregisterDraggingForiOSMacContext:(unsigned int)a0;
- (void)_updateAllLayerPropertiesFromView;
- (void)_updateAutoresizingConstraints;
- (void)_updateConstraintsAtWindowLevelIfNeeded;
- (void)_updateConstraintsFinished;
- (void)_updateConstraintsForAlignmentRectChange;
- (void)_updateConstraintsForGuide:(id)a0 withInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a1;
- (char)_updateConstraintsForLayoutCheckingDirtyBits:(char)a0 creatingEngine:(char)a1;
- (void)_updateConstraintsForSubtreeIfNeededCollectingViewsWithInvalidBaselines:(id *)a0;
- (void)_updateConstraintsWithObservationTracking;
- (void)_updateContentSizeConstraints;
- (void)_updateDeclaredConstraints;
- (void)_updateDeclaredRules;
- (void)_updateDragRegionForHiddenStateChange;
- (void)_updateDrawDelegateForAlphaValue;
- (void)_updateDrawsNothing;
- (void)_updateEngineHostConstraints;
- (void)_updateEngineHostPreferredSizeConstraintsIfNeeded;
- (void)_updateExistingEngineHostConstraints;
- (void)_updateHostedAutolayoutEngineForPossiblyNewEngineScalingCoefficients;
- (char)_updateInheritedSurfaceColorSpace;
- (void)_updateLayerBackgroundColorFromView;
- (void)_updateLayerBackgroundFiltersFromView;
- (void)_updateLayerCanDrawConcurrentlyFromView;
- (void)_updateLayerCompositingFilterFromView;
- (void)_updateLayerContentsGravityFromView;
- (void)_updateLayerCornerRadiusFromView;
- (void)_updateLayerFiltersFromView;
- (void)_updateLayerGeometryForSelfAndSubviews;
- (void)_updateLayerGeometryFromView;
- (void)_updateLayerHiddenFromView;
- (void)_updateLayerMaskFromView;
- (void)_updateLayerMasksToBoundsFromView;
- (void)_updateLayerMetricsOverlays;
- (void)_updateLayerOpacityFromView;
- (void)_updateLayerShadowFromView;
- (void)_updateLayerWithObservationTracking;
- (void)_updateLayoutDependentMetricsIfNeeded;
- (void)_updateLayoutGuidesAsNecessary;
- (void)_updateLayoutMarginsGuideConstraintsIfNecessary;
- (void)_updateOpenGLViewport;
- (void)_updateSafeAreaLayoutGuideConstraintsIfNecessary;
- (void)_updateSimpleAutoresizingConstraintsInPlace:(id)a0 forAutoresizingMask:(unsigned long long)a1;
- (void)_updateSuggestedContentRect;
- (void)_updateSuggestedContentRectForVisibleRectChange;
- (void)_updateSuggestedContentRectToValue:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_updateSurfaceResolution;
- (void)_updateSurfaceWhenInAnInclusiveLayer;
- (void)_updateTrackingAreas;
- (void)_updateTrackingAreasWithInvalidCursorRects:(char)a0;
- (char)_useCoreAnimationFrameChanges;
- (char)_useCoreAnimationFrameOriginChanges;
- (char)_usesCustomLayer;
- (char)_usesEngineHostingConstraints;
- (char)_usingAlternateHighlightColorForCell:(id)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)_validRememberedEditingFirstResponder;
- (void)_verifyConstraintsForCurrentFrame;
- (void)_viewDidAppearBecauseUnhidden;
- (void)_viewDidChangeAppearance:(id)a0;
- (void)_viewDidDisappearBecauseHidden;
- (void)_viewDidDrawInLayer:(id)a0 inContext:(struct CGContext { } *)a1;
- (id)_viewForFirstBaselineLayout;
- (id)_viewForLastBaselineLayout;
- (void)_viewWillAppearBecauseUnhidden;
- (id)_visibleDescendants;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleRectExcludingTitlebarInCoordinateSystemForView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleRectForPopover;
- (void)_visitSubviewsWithBlock:(id /* block */)a0;
- (char)_wantsHeaderView;
- (char)_wantsPreferredSizeConstraintsWhenEngineHosting;
- (char)_wantsPrepareContentRect;
- (char)_wantsRevealovers;
- (char)_wantsToHostAutolayoutEngine;
- (char)_wantsTouchesForEvent:(id)a0;
- (char)_wasDequeued;
- (id)_widthVariable;
- (void)_willBeginMagnifying;
- (void)_willBeginScrolling;
- (void)_willChangeHostsAutolayoutEngineTo:(char)a0;
- (char)_willDrawFocusRingAroundEnclosingScrollView;
- (void)_willMeasureMinSizeForFullscreen;
- (void)_willUpdateConstraintsForSubtree;
- (void)_windowChangedKeyState;
- (void)_windowDidOrderOffScreen;
- (void)_windowDidOrderOnScreen;
- (char)_windowResizeMouseLocationIsInVisibleScrollerThumb:(struct CGPoint { double x0; double x1; })a0;
- (void)_windowWillOrderOffScreen;
- (void)_windowWillOrderOnScreen;
- (void)_withAutomaticEngineOptimizationDisabled:(id /* block */)a0;
- (char)acceptsFirstMouse:(id)a0;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityAuditContrast;
- (id)accessibilityAuditHierarchy;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityAuditLabel;
- (id)accessibilityAuditParent;
- (id)accessibilityAuditPotentialChildren;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (void)accessibilityDrawFocusRing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFocusRingMaskBounds;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrame;
- (id)accessibilityHelpAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)accessibilityHorizontalUnitDescriptionAttribute;
- (char)accessibilityIsAttributeSettable:(id)a0;
- (char)accessibilityIsChildrenAttributeSettable;
- (char)accessibilityIsFocusedAttributeSettable;
- (char)accessibilityIsHelpAttributeSettable;
- (char)accessibilityIsIgnored;
- (char)accessibilityIsParentAttributeSettable;
- (char)accessibilityIsPositionAttributeSettable;
- (char)accessibilityIsRoleAttributeSettable;
- (char)accessibilityIsRoleDescriptionAttributeSettable;
- (char)accessibilityIsSizeAttributeSettable;
- (char)accessibilityIsTopLevelUIElementAttributeSettable;
- (char)accessibilityIsWindowAttributeSettable;
- (id)accessibilityParent;
- (id)accessibilityParentAttribute;
- (void)accessibilityPerformAction:(id)a0;
- (void)accessibilityPopUpMenuClosed:(id)a0 accessibilityParent:(id)a1;
- (void)accessibilityPopUpMenuCreated:(id)a0 forSubview:(id)a1 returningAccessibilityParent:(id *)a2;
- (void)accessibilityPopUpMenuCreated:(id)a0 returningAccessibilityParent:(id *)a1;
- (id)accessibilityPopUpMenuParent:(id)a0;
- (id)accessibilityPositionAttribute;
- (id)accessibilityRoleAttribute;
- (id)accessibilityRoleDescriptionAttribute;
- (id)accessibilitySectionsAttribute;
- (void)accessibilitySetFocusedAttribute:(id)a0;
- (void)accessibilitySetValue:(id)a0 forAttribute:(id)a1;
- (char)accessibilityShouldSendNotification:(id)a0;
- (char)accessibilityShouldUseUniqueId;
- (id)accessibilitySizeAttribute;
- (char)accessibilitySupportsOverriddenAttributes;
- (id)accessibilityTopLevelUIElementAttribute;
- (id)accessibilityVerticalUnitDescriptionAttribute;
- (double)accessibilityVisibleArea;
- (id)accessibilityWindowAttribute;
- (struct CGPoint { double x0; double x1; })accessibilityWindowPointForShowMenu;
- (id)actionForLayer:(id)a0 forKey:(id)a1;
- (void)addConstraint:(id)a0;
- (void)addCursorRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 cursor:(id)a1;
- (void)addGestureRecognizer:(id)a0;
- (void)addSubview:(id)a0;
- (void)addSubview:(id)a0 positioned:(long long)a1 relativeTo:(id)a2;
- (void)addToPageSetup;
- (long long)addToolTipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 owner:(id)a1 userData:(void *)a2;
- (void)addTrackingArea:(id)a0;
- (long long)addTrackingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 owner:(id)a1 userData:(void *)a2 assumeInside:(char)a3;
- (void)adjustPageHeightNew:(double *)a0 top:(double)a1 bottom:(double)a2 limit:(double)a3;
- (void)adjustPageWidthNew:(double *)a0 left:(double)a1 right:(double)a2 limit:(double)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustScroll:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRectForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (void)allocateGState;
- (unsigned long long)allowedTouchTypes;
- (id)ancestorSharedWithView:(id)a0;
- (id)animationForKey:(id)a0;
- (id)animator;
- (char)autoscroll:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })backingAlignedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(unsigned long long)a1;
- (double)baselineOffsetFromBottom;
- (void)beginDocument;
- (id)beginDraggingSessionWithItems:(id)a0 event:(id)a1 source:(id)a2;
- (void)beginPage:(long long)a0 label:(id)a1 bBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 fonts:(id)a3;
- (void)beginPageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 atPlacement:(struct CGPoint { double x0; double x1; })a1;
- (void)beginPageSetupRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 placement:(struct CGPoint { double x0; double x1; })a1;
- (void)beginPrologueBBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 creationDate:(id)a1 createdBy:(id)a2 fonts:(id)a3 forWhom:(id)a4 pages:(long long)a5 title:(id)a6;
- (void)beginSetup;
- (void)beginTrailer;
- (id)bitmapImageRepForCachingDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })boundsOrigin;
- (struct CGSize { double x0; double x1; })boundsSize;
- (void)cacheDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toBitmapImageRep:(id)a1;
- (void)cacheDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toBitmapImageRep:(id)a1 includeSubviews:(char)a2;
- (char)canBecomeKeyView;
- (char)canSmoothFontsInLayer;
- (long long)compareGeometry:(id)a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })computedSafeAreaInsets;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })computedSafeAreaRect;
- (char)computed_allowRolloverInToolbarControls;
- (long long)computed_effectiveSemanticContext;
- (char)computed_inSelectedTableRow;
- (char)computed_titlebarIsForcingDisplayOfDividers;
- (void)concludeDragOperation:(id)a0;
- (id)constraintForIdentifier:(id)a0;
- (id)constraints;
- (id)constraintsAffectingLayoutForOrientation:(long long)a0;
- (id)constraintsAffectingLayoutForOrientation:(long long)a0 ofItem:(id)a1;
- (void)constraintsDidChangeInEngine:(id)a0;
- (float)contentCompressionResistancePriorityForOrientation:(long long)a0;
- (float)contentHuggingPriorityForOrientation:(long long)a0;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 fromView:(id)a1;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toView:(id)a1;
- (struct CGPoint { double x0; double x1; })convertPointFromBacking:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointFromBase:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointFromLayer:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointToBacking:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointToBase:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointToLayer:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromBacking:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromBase:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromLayer:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToBacking:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToBase:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToLayer:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })convertSize:(struct CGSize { double x0; double x1; })a0 fromView:(id)a1;
- (struct CGSize { double x0; double x1; })convertSize:(struct CGSize { double x0; double x1; })a0 toView:(id)a1;
- (struct CGSize { double x0; double x1; })convertSizeFromBacking:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })convertSizeFromBase:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })convertSizeFromLayer:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })convertSizeToBacking:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })convertSizeToBase:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })convertSizeToLayer:(struct CGSize { double x0; double x1; })a0;
- (void)cursorUpdate:(id)a0;
- (id)dataWithEPSInsideRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)dataWithPDFInsideRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)declaredLayoutConstraints;
- (id)declaredLayoutRules;
- (id)designatedFocusRingView;
- (void)didAddSubview:(id)a0;
- (void)didBecomeActiveFirstResponder;
- (void)didCloseMenu:(id)a0 withEvent:(id)a1;
- (void)didResignActiveFirstResponder;
- (void)disableGeometryInWindowDidChangeNotification;
- (void)disableLayoutFlushing;
- (void)discardCursorRects;
- (void)displayIfNeededIgnoringOpacity;
- (void)displayIfNeededInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)displayIfNeededInRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)displayIgnoringOpacity;
- (id)displayLinkWithHandler:(id /* block */)a0;
- (void)displayRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inContext:(id)a1;
- (char)dragFile:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 slideBack:(char)a2 event:(id)a3;
- (void)dragImage:(id)a0 at:(struct CGPoint { double x0; double x1; })a1 offset:(struct CGSize { double x0; double x1; })a2 event:(id)a3 pasteboard:(id)a4 source:(id)a5 slideBack:(char)a6;
- (char)dragPromisedFilesOfTypes:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 source:(id)a2 slideBack:(char)a3 event:(id)a4;
- (unsigned long long)draggingEntered:(id)a0;
- (unsigned long long)draggingUpdated:(id)a0;
- (void)drawFocusRingMask;
- (void)drawLayer:(id)a0 inContext:(struct CGContext { } *)a1;
- (void)drawOverlayRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawPageBorderWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawSheetBorderWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)effectiveAppearanceDidChange;
- (void)enableGeometryInWindowDidChangeNotification;
- (void)enableLayoutFlushing;
- (void)endDocument;
- (void)endHeaderComments;
- (void)endPageSetup;
- (void)endPrologue;
- (void)endSetup;
- (void)endTrailer;
- (id)engine:(id)a0 markerForConstraintToBreakAmongConstraints:(id)a1;
- (void)engine:(id)a0 willBreakConstraint:(id)a1 dueToMutuallyExclusiveConstraints:(id)a2;
- (char)enterFullScreenMode:(id)a0 withOptions:(id)a1;
- (void)exerciseAmbiguityInLayout;
- (void)exitFullScreenModeWithOptions:(id)a0;
- (id)firstBaselineAnchor;
- (double)firstBaselineOffsetFromTop;
- (struct CGSize { double x0; double x1; })fittingSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBounds;
- (unsigned long long)focusRingType;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForAlignmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })frameOrigin;
- (struct CGSize { double x0; double x1; })frameSize;
- (long long)gState;
- (void)geometryInWindowDidChange;
- (char)gestureRecognizerShouldBegin:(id)a0;
- (id)gestureRecognizers;
- (void)getRectsBeingDrawn:(const struct CGRect **)a0 count:(long long *)a1;
- (void)getRectsExposedDuringLiveResize:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; }[4])a0 count:(long long *)a1;
- (id)headerView;
- (void)heartBeat:(struct { double x0; double x1; double x2; struct { unsigned char x0 : 1; unsigned int x1 : 31; } x3; } *)a0;
- (double)heightAdjustLimit;
- (void)helpRequested:(id)a0;
- (void)hideActiveFirstResponderIndication;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)imageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)interpretKeyEvents:(id)a0;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (void)invalidateConstraints;
- (void)invalidateIntrinsicContentSize;
- (void)invalidateIntrinsicContentSizeForCell:(id)a0;
- (char)isHorizontalContentSizeConstraintActive;
- (char)isSubviewFirstResponderOfItsWindow;
- (char)isVerticalContentSizeConstraintActive;
- (char)knowsPagesFirst:(long long *)a0 last:(long long *)a1;
- (id)lastBaselineAnchor;
- (double)lastBaselineOffsetFromBottom;
- (id)layoutRect;
- (void)layoutSubtreeIfNeeded;
- (struct CGPoint { double x0; double x1; })locationOfPrintRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)lockFocus;
- (char)lockFocusIfCanDraw;
- (char)lockFocusIfCanDrawInContext:(id)a0;
- (id)loggingDescription;
- (id)makeBackingLayer;
- (void)measureMin:(struct CGSize { double x0; double x1; } *)a0 max:(struct CGSize { double x0; double x1; } *)a1 ideal:(struct CGSize { double x0; double x1; } *)a2;
- (void)measureMin:(struct CGSize { double x0; double x1; } *)a0 max:(struct CGSize { double x0; double x1; } *)a1 ideal:(struct CGSize { double x0; double x1; } *)a2 stretchingPriority:(float)a3;
- (id)menuForEvent:(id)a0;
- (char)mouse:(struct CGPoint { double x0; double x1; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (char)needsToDrawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)needsUpdateConstraints;
- (id)nextEventMatchingMask:(unsigned long long)a0;
- (id)nextEventMatchingMask:(unsigned long long)a0 untilDate:(id)a1 inMode:(id)a2 dequeue:(char)a3;
- (id)nextKeyView;
- (id)nextValidKeyView;
- (void)noteFocusRingMaskChanged;
- (id)ns_containerWidgetType;
- (id)ns_widgetType;
- (id)nsis_descriptionOfVariable:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })nsis_frame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })nsis_frameInEngine:(id)a0 forLayoutGuide:(id)a1 withRounding:(char)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })nsis_layoutRectFromHostingViewInEngine:(id)a0;
- (int)nsis_orientationHintForVariable:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })nsis_rawAlignmentRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })nsis_unroundedFrame;
- (void)nsis_valueOfVariable:(id)a0 didChangeInEngine:(id)a1;
- (char)nsis_valueOfVariableIsUserObservable:(id)a0;
- (void)nsli_addConstraint:(id)a0;
- (void)nsli_addConstraint:(id)a0 mutuallyExclusiveConstraints:(id *)a1;
- (id)nsli_ancestorSharedWithItem:(id)a0;
- (unsigned long long)nsli_autoresizingMask;
- (id)nsli_boundsHeightVariable;
- (id)nsli_boundsWidthVariable;
- (char)nsli_canHostIndependentVariableAnchor;
- (id)nsli_constraintWithAnchor:(id)a0 relatedBy:(long long)a1 toAnchor:(id)a2 withSystemSpacingMultipliedBy:(double)a3;
- (struct CGSize { double x0; double x1; })nsli_convertSizeFromEngineSpace:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })nsli_convertSizeToEngineSpace:(struct CGSize { double x0; double x1; })a0;
- (char)nsli_defaultResolvedValue:(double *)a0 forSymbolicConstant:(id)a1 inConstraint:(id)a2 error:(id *)a3;
- (id)nsli_description;
- (struct CGSize { double x0; double x1; })nsli_engineToUserScalingCoefficients;
- (struct CGSize { double x0; double x1; })nsli_engineToUserScalingCoefficientsInEngine:(id)a0;
- (id)nsli_heightVariable;
- (id)nsli_installedConstraints;
- (char)nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:(id)a0;
- (char)nsli_isFlipped;
- (char)nsli_isRTL;
- (id)nsli_itemDescribingLayoutDirectionForConstraint:(id)a0 toItem:(id)a1;
- (id)nsli_layoutAnchorForAttribute:(long long)a0;
- (id)nsli_layoutEngine;
- (char)nsli_lowerAttribute:(int)a0 intoExpression:(id)a1 withCoefficient:(double)a2 container:(id)a3;
- (char)nsli_lowerAttribute:(int)a0 intoExpression:(id)a1 withCoefficient:(double)a2 forConstraint:(id)a3;
- (char)nsli_lowerAttribute:(int)a0 intoExpression:(id)a1 withCoefficient:(double)a2 forConstraint:(id)a3 onBehalfOfLayoutGuide:(id)a4;
- (char)nsli_lowersExpressionRelativeToConstraintContainer;
- (id)nsli_minXVariable;
- (id)nsli_minYVariable;
- (char)nsli_removeConstraint:(id)a0;
- (char)nsli_resolvedValue:(double *)a0 forSymbolicConstant:(id)a1 inConstraint:(id)a2 error:(id *)a3;
- (id)nsli_superitem;
- (void)nsli_swapContainerForOutgoingConstraint:(id)a0 toIncomingConstraint:(id)a1;
- (id)nsli_widthVariable;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })overlayBounds;
- (id)pageFooter;
- (id)pageHeader;
- (char)performDragOperation:(id)a0;
- (char)performKeyEquivalent:(id)a0;
- (char)performMnemonic:(id)a0;
- (id)preferredLayoutAttributesFittingAttributes:(id)a0;
- (void)prepareContentInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)prepareForDragOperation:(id)a0;
- (void)prepareForMenu:(id)a0 withEvent:(id)a1;
- (void)prepareMenu:(id)a0 withEvent:(id)a1;
- (id)previousValidKeyView;
- (void)print:(id)a0;
- (id)printJobTitle;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForPage:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForSmartMagnificationAtPoint:(struct CGPoint { double x0; double x1; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)recursiveConstraintDescription;
- (id)recursiveConstraintIdentifierDescription;
- (void)registerForDraggedTypes:(id)a0;
- (oneway void)releaseGState;
- (void)reloadToolTip:(long long)a0;
- (void)removeAllGestureRecognizers;
- (void)removeAllToolTips;
- (void)removeConstraint:(id)a0;
- (void)removeConstraints:(id)a0;
- (void)removeCursorRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 cursor:(id)a1;
- (void)removeFromSuperview;
- (void)removeFromSuperviewWithoutNeedingDisplay;
- (void)removeGestureRecognizer:(id)a0;
- (void)removeLayoutGuide:(id)a0;
- (void)removeToolTip:(long long)a0;
- (void)removeTrackingArea:(id)a0;
- (void)removeTrackingRect:(long long)a0;
- (void)renewGState;
- (void)replaceSubview:(id)a0 with:(id)a1;
- (void)replaceSubview:(id)a0 with:(id)a1 options:(unsigned long long)a2 completionHandler:(id /* block */)a3;
- (void)resetCursorRects;
- (void)resizeSubviewsWithOldSize:(struct CGSize { double x0; double x1; })a0;
- (void)resizeWithOldSuperviewSize:(struct CGSize { double x0; double x1; })a0;
- (id)revealContext:(id)a0 rectsForItem:(id)a1;
- (void)rotateByAngle:(double)a0;
- (void)scaleUnitSquareToSize:(struct CGSize { double x0; double x1; })a0;
- (void)scrollPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)scrollPoint:(const struct CGPoint { double x0; double x1; } *)a0 fromView:(id)a1;
- (void)scrollRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 by:(struct CGSize { double x0; double x1; })a1;
- (char)scrollRectToVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)scrollWheel:(id)a0;
- (void)sendEvent:(id)a0;
- (void)setAllowedTouchTypes:(unsigned long long)a0;
- (void)setAllowsVibrancy:(char)a0;
- (void)setBoundsOrigin:(struct CGPoint { double x0; double x1; })a0;
- (void)setBoundsSize:(struct CGSize { double x0; double x1; })a0;
- (void)setContentCompressionResistancePriority:(float)a0 forOrientation:(long long)a1;
- (void)setContentHuggingPriority:(float)a0 forOrientation:(long long)a1;
- (void)setFlipped:(char)a0;
- (void)setFocusRingType:(unsigned long long)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setGestureRecognizers:(id)a0;
- (void)setGesturesEnabled:(char)a0;
- (void)setHorizontalContentSizeConstraintActive:(char)a0;
- (void)setKeyboardFocusRingNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setMenu:(id)a0;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setNeedsUpdateConstraints:(char)a0;
- (void)setNextResponder:(id)a0;
- (void)setOpaque:(char)a0;
- (void)setTranslatesAutoresizingMaskIntoConstraints:(char)a0;
- (void)setUpGState;
- (void)setUsesConstraintsInsteadOfAutoresizing:(char)a0;
- (void)setVerticalContentSizeConstraintActive:(char)a0;
- (void)setWantsBestResolutionOpenGLSurface:(char)a0;
- (char)shouldDelayWindowOrderingForEvent:(id)a0;
- (char)shouldSetFontSmoothingBackgroundColor;
- (void)showActiveFirstResponderIndication;
- (void)showContextMenuForSelection:(id)a0;
- (void)showDefinitionForAttributedString:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)showDefinitionForAttributedString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 options:(id)a2 baselineOriginProvider:(id /* block */)a3;
- (void)solutionDidChangeInEngine:(id)a0;
- (void)sortSubviewsUsingBlock:(id /* block */)a0;
- (void)sortSubviewsUsingFunction:(void /* function */ *)a0 context:(void *)a1;
- (struct CGSize { double x0; double x1; })systemLayoutSizeFittingSize:(struct CGSize { double x0; double x1; })a0 withHorizontalFittingPriority:(float)a1 verticalFittingPriority:(float)a2;
- (char)textLayerShouldEnableFontSmoothing:(id)a0;
- (void)trackEventsMatchingMask:(unsigned long long)a0 timeout:(double)a1 mode:(id)a2 handler:(id /* block */)a3;
- (void)translateOriginToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)translateRectsNeedingDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 by:(struct CGSize { double x0; double x1; })a1;
- (char)translatesAutoresizingMaskIntoConstraints;
- (void)unlockFocus;
- (void)unregisterDraggedTypes;
- (void)updateConstraints;
- (void)updateConstraintsForSubtreeIfNeeded;
- (void)updateLayer;
- (void)updateTrackingAreas;
- (id)userInterfaceItemIdentifier;
- (char)usesConstraintsInsteadOfAutoresizing;
- (void)view:(id)a0 customToolTip:(long long)a1 drawInView:(id)a2 displayInfo:(id)a3;
- (char)view:(id)a0 customToolTip:(long long)a1 fadeOutAllowedForToolTipWithDisplayInfo:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })view:(id)a0 customToolTip:(long long)a1 frameForToolTipWithDisplayInfo:(id)a2;
- (void)viewDidChangeBackingProperties;
- (void)viewDidChangeEffectiveAppearance;
- (void)viewDidEndLiveResize;
- (void)viewDidHide;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)viewDidUnhide;
- (void)viewWillDraw;
- (void)viewWillMoveToSuperview:(id)a0;
- (void)viewWillMoveToWindow:(id)a0;
- (void)viewWillStartLiveResize;
- (id)viewWithTag:(long long)a0;
- (char)wantsBestResolutionOpenGLSurface;
- (double)widthAdjustLimit;
- (void)willOpenMenu:(id)a0 withEvent:(id)a1;
- (void)willRemoveSubview:(id)a0;
- (void)willSendMenuNeedsUpdate:(id)a0 withEvent:(id)a1;
- (void)writeEPSInsideRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toPasteboard:(id)a1;
- (void)writePDFInsideRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toPasteboard:(id)a1;

@end
