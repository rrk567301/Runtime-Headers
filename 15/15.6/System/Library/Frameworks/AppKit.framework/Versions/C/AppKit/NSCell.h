@class NSURL, NSMutableDictionary, NSControl, NSMenu, NSTouch, NSFont, NSString, NSImage, CUIStyleEffectConfiguration, NSAttributedString, NSFormatter, NSTimer, NSArray, NSView;
@protocol NSObject;

@interface NSCell : NSObject <_NSControlEventTrackable, _NSControlValueAccessing, NSCopying, NSCoding, NSUserInterfaceItemIdentification, NSAccessibilityElement, NSAccessibility> {
    id _contents;
    struct __CFlags { unsigned char state : 1; unsigned char highlighted : 1; unsigned char disabled : 1; unsigned char editable : 1; unsigned char type : 2; unsigned char vCentered : 1; unsigned char hCentered : 1; unsigned char bordered : 1; unsigned char bezeled : 1; unsigned char selectable : 1; unsigned char scrollable : 1; unsigned char continuous : 1; unsigned char actOnMouseDown : 1; unsigned char isLeaf : 1; unsigned char invalidObjectValue : 1; unsigned char invalidFont : 1; unsigned char lineBreakMode : 3; unsigned char inTableView : 1; unsigned char allowsAppearanceEffects : 1; unsigned char singleLineMode : 1; unsigned char actOnMouseDragged : 1; unsigned char isLoaded : 1; unsigned char truncateLastLine : 1; unsigned char dontActOnMouseUp : 1; unsigned char isWhite : 1; unsigned char useUserKeyEquivalent : 1; unsigned char showsFirstResponder : 1; unsigned char focusRingType : 2; unsigned char wasSelectable : 1; unsigned char hasInvalidObject : 1; unsigned char allowsEditingTextAttributes : 1; unsigned char importsGraphics : 1; unsigned char alignment : 3; unsigned char layoutDirectionRTL : 1; unsigned char backgroundStyle : 3; unsigned char cellReserved2 : 4; unsigned char refusesFirstResponder : 1; unsigned char needsHighlightedText : 1; unsigned char dontAllowsUndo : 1; unsigned char currentlyEditing : 1; unsigned char allowsMixedState : 1; unsigned char inMixedState : 1; unsigned char sendsActionOnEndEditing : 1; unsigned char inSendAction : 1; unsigned char menuWasSet : 1; unsigned char controlTint : 3; unsigned char controlSize : 2; unsigned char branchImageDisabled : 1; unsigned char drawingInRevealover : 1; unsigned char needsHighlightedTextHint : 1; } _cFlags;
    NSControl *_controlView;
    NSImage *_image;
    NSFont *_font;
    NSMutableDictionary *_textAttributes;
    NSFormatter *_formatter;
    id<NSObject> _representedObject;
    NSString *_userInterfaceItemIdentifier;
    NSMenu *_menu;
    long long _cachedAttributedStringGeneration;
    NSAttributedString *_cachedAttributedStringValue;
    NSTouch *_trackingTouch;
    NSTimer *_touchContinuousTimer;
    struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *_overrideTextBoundingRect;
    double _fallbackBackingScaleFactor;
    long long _fallbackBezelPresentationState;
    long long _fallbackSemanticContext;
    unsigned char _writingDirection : 2;
    unsigned char _backgroundStyleIsSet : 1;
    unsigned char _imageInterpolation : 3;
    unsigned char _hasMouseTrackingInfo : 1;
    unsigned char _okToTrack : 1;
    unsigned char _fontWasExplicitlySet : 1;
}

@property (class, readonly) char prefersTrackingUntilMouseUp;
@property (class, readonly) NSMenu *defaultMenu;

@property long long backgroundStyle;
@property (readonly) long long interiorBackgroundStyle;
@property unsigned long long controlTint;
@property (readonly) CUIStyleEffectConfiguration *styleEffectConfiguration;
@property (readonly) char _wantsToObserveInTableView;
@property NSView *controlView;
@property unsigned long long type;
@property long long state;
@property (weak) id target;
@property SEL action;
@property long long tag;
@property (copy) NSString *title;
@property (readonly, getter=isOpaque) char opaque;
@property (getter=isEnabled) char enabled;
@property (getter=isContinuous) char continuous;
@property (getter=isEditable) char editable;
@property (getter=isSelectable) char selectable;
@property (getter=isBordered) char bordered;
@property (getter=isBezeled) char bezeled;
@property (getter=isScrollable) char scrollable;
@property (getter=isHighlighted) char highlighted;
@property long long alignment;
@property char wraps;
@property (retain) NSFont *font;
@property (readonly, copy) NSString *keyEquivalent;
@property (retain) NSFormatter *formatter;
@property (copy) id objectValue;
@property (readonly) char hasValidObjectValue;
@property (copy) NSString *stringValue;
@property int intValue;
@property float floatValue;
@property double doubleValue;
@property long long integerValue;
@property (retain) NSImage *image;
@property unsigned long long controlSize;
@property (retain) id representedObject;
@property (readonly) struct CGSize { double x0; double x1; } cellSize;
@property (readonly) long long mouseDownFlags;
@property (retain) NSMenu *menu;
@property char sendsActionOnEndEditing;
@property long long baseWritingDirection;
@property unsigned long long lineBreakMode;
@property char allowsUndo;
@property char truncatesLastVisibleLine;
@property long long userInterfaceLayoutDirection;
@property char usesSingleLineMode;
@property (readonly) char isEnabled;
@property (readonly) char isContinuous;
@property (readonly) unsigned long long sendActionOnMask;
@property (setter=_setInSendAction:) char _inSendAction;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy) NSAttributedString *attributedStringValue;
@property (copy) NSString *identifier;
@property (getter=isAccessibilityElement) char accessibilityElement;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } accessibilityFrame;
@property (getter=isAccessibilityFocused) char accessibilityFocused;
@property struct CGPoint { double x0; double x1; } accessibilityActivationPoint;
@property (weak) id accessibilityTopLevelUIElement;
@property (copy) NSURL *accessibilityURL;
@property (retain) id accessibilityValue;
@property (copy) NSString *accessibilityValueDescription;
@property (copy) NSArray *accessibilityVisibleChildren;
@property (copy) NSString *accessibilitySubrole;
@property (copy) NSString *accessibilityTitle;
@property (weak) id accessibilityTitleUIElement;
@property (copy) NSArray *accessibilityNextContents;
@property long long accessibilityOrientation;
@property (retain) id accessibilityOverflowButton;
@property (weak) id accessibilityParent;
@property (copy) NSString *accessibilityPlaceholderValue;
@property (copy) NSArray *accessibilityPreviousContents;
@property (copy) NSString *accessibilityRole;
@property (copy) NSString *accessibilityRoleDescription;
@property (retain) id accessibilitySearchButton;
@property (retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected) char accessibilitySelected;
@property (copy) NSArray *accessibilitySelectedChildren;
@property (copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (retain) id accessibilityShownMenu;
@property (retain) id accessibilityMinValue;
@property (retain) id accessibilityMaxValue;
@property (copy) NSArray *accessibilityLinkedUIElements;
@property (weak) id accessibilityWindow;
@property (copy) NSString *accessibilityIdentifier;
@property (copy) NSString *accessibilityHelp;
@property (copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityExpanded) char accessibilityExpanded;
@property (getter=isAccessibilityEdited) char accessibilityEdited;
@property (getter=isAccessibilityEnabled) char accessibilityEnabled;
@property (copy) NSArray *accessibilityChildren;
@property (copy) NSArray *accessibilityChildrenInNavigationOrder;
@property (retain) id accessibilityClearButton;
@property (retain) id accessibilityCancelButton;
@property (getter=isAccessibilityProtectedContent) char accessibilityProtectedContent;
@property (copy) NSArray *accessibilityContents;
@property (copy) NSString *accessibilityLabel;
@property (getter=isAccessibilityAlternateUIVisible) char accessibilityAlternateUIVisible;
@property (copy) NSArray *accessibilitySharedFocusElements;
@property (getter=isAccessibilityRequired) char accessibilityRequired;
@property (copy) NSArray *accessibilityCustomRotors;
@property (copy) NSArray *accessibilityUserInputLabels;
@property (copy) NSArray *accessibilityAttributedUserInputLabels;
@property (retain) id accessibilityApplicationFocusedUIElement;
@property (retain) id accessibilityMainWindow;
@property (getter=isAccessibilityHidden) char accessibilityHidden;
@property (getter=isAccessibilityFrontmost) char accessibilityFrontmost;
@property (retain) id accessibilityFocusedWindow;
@property (copy) NSArray *accessibilityWindows;
@property (weak) id accessibilityExtrasMenuBar;
@property (weak) id accessibilityMenuBar;
@property (copy) NSArray *accessibilityColumnTitles;
@property (getter=isAccessibilityOrderedByRow) char accessibilityOrderedByRow;
@property long long accessibilityHorizontalUnits;
@property long long accessibilityVerticalUnits;
@property (copy) NSString *accessibilityHorizontalUnitDescription;
@property (copy) NSString *accessibilityVerticalUnitDescription;
@property (copy) NSArray *accessibilityHandles;
@property (retain) id accessibilityWarningValue;
@property (retain) id accessibilityCriticalValue;
@property (getter=isAccessibilityDisclosed) char accessibilityDisclosed;
@property (weak) id accessibilityDisclosedByRow;
@property (retain) id accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel;
@property (copy) NSArray *accessibilityMarkerUIElements;
@property (retain) id accessibilityMarkerValues;
@property (retain) id accessibilityMarkerGroupUIElement;
@property long long accessibilityUnits;
@property (copy) NSString *accessibilityUnitDescription;
@property long long accessibilityRulerMarkerType;
@property (copy) NSString *accessibilityMarkerTypeDescription;
@property (retain) id accessibilityHorizontalScrollBar;
@property (retain) id accessibilityVerticalScrollBar;
@property (copy) NSArray *accessibilityAllowedValues;
@property (copy) NSArray *accessibilityLabelUIElements;
@property float accessibilityLabelValue;
@property (copy) NSArray *accessibilitySplitters;
@property (retain) id accessibilityDecrementButton;
@property (retain) id accessibilityIncrementButton;
@property (copy) NSArray *accessibilityTabs;
@property (retain) id accessibilityHeader;
@property long long accessibilityColumnCount;
@property long long accessibilityRowCount;
@property long long accessibilityIndex;
@property (copy) NSArray *accessibilityColumns;
@property (copy) NSArray *accessibilityRows;
@property (copy) NSArray *accessibilityVisibleRows;
@property (copy) NSArray *accessibilitySelectedRows;
@property (copy) NSArray *accessibilityVisibleColumns;
@property (copy) NSArray *accessibilitySelectedColumns;
@property long long accessibilitySortDirection;
@property (copy) NSArray *accessibilityRowHeaderUIElements;
@property (copy) NSArray *accessibilitySelectedCells;
@property (copy) NSArray *accessibilityVisibleCells;
@property (copy) NSArray *accessibilityColumnHeaderUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityRowIndexRange;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityColumnIndexRange;
@property long long accessibilityInsertionPointLineNumber;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySharedCharacterRange;
@property (copy) NSArray *accessibilitySharedTextUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityVisibleCharacterRange;
@property long long accessibilityNumberOfCharacters;
@property (copy) NSString *accessibilitySelectedText;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySelectedTextRange;
@property (copy) NSArray *accessibilitySelectedTextRanges;
@property (retain) id accessibilityToolbarButton;
@property (getter=isAccessibilityModal) char accessibilityModal;
@property (retain) id accessibilityProxy;
@property (getter=isAccessibilityMain) char accessibilityMain;
@property (retain) id accessibilityFullScreenButton;
@property (retain) id accessibilityGrowArea;
@property (copy) NSString *accessibilityDocument;
@property (retain) id accessibilityDefaultButton;
@property (retain) id accessibilityCloseButton;
@property (retain) id accessibilityZoomButton;
@property (retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized) char accessibilityMinimized;
@property (copy) NSArray *accessibilityCustomActions;

+ (void)initialize;
+ (char)_copiesContents;
+ (id)_cuiCatalogKey;
+ (id)_cuiStyleEffectsKey;
+ (id)_sharedStringDrawingContext;
+ (id)_stringDrawingContext;
+ (unsigned long long)defaultFocusRingType;

- (void)dealloc;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (long long)compare:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (char)_hitTestForTouch:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (void)_invalidateFont;
- (void)_setFallbackBackingScaleFactor:(double)a0;
- (void)_setMouseTrackingInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ofView:(id)a1;
- (char)_validateEntryString:(id)a0 uiHandled:(char *)a1;
- (void)_viewDidChangeGeometryInWindow:(id)a0;
- (id)accessibilityActionDescription:(id)a0;
- (id)accessibilityElementWithParent:(id)a0;
- (id)accessibilityLastContentSibling;
- (id)accessibilityNextContentSibling;
- (id)accessibilitySelectedTextRanges;
- (char)drawsBackground;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })expansionFrameWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (char)importsGraphics;
- (char)isAccessibilityAutoInteractable;
- (char)isAccessibilitySelectorAllowed:(SEL)a0;
- (void)setAccessibilityCustomChoosers:(id)a0;
- (void)setAccessibilityMinimizeButton:(id)a0;
- (void)setAccessibilityTitleUIElement:(id)a0;
- (void)setAllowsAppearanceTextEffects:(char)a0;
- (id)_attributedStringValue:(id)a0 invalid:(char)a1;
- (struct { double x0; double x1; })_baselinePairWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 flipped:(char)a1;
- (void)_cell_setRefusesFirstResponder:(char)a0;
- (char)_controlStartTrackingAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)_convertToText:(id)a0;
- (void)_drawHighlightWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (long long)_fallbackBezelPresentationState;
- (id)_textAttributes;
- (char)_wantsHeartBeat;
- (id)accessibilityCellForColumn:(long long)a0 row:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrameInParentSpace;
- (id)accessibilityHeaderForRowIndex:(long long)a0;
- (long long)accessibilityNumberOfCharacters;
- (void)accessibilitySetValueAttribute:(id)a0;
- (char)continueTrackingGesture:(id)a0 inView:(id)a1;
- (id)deepestAccessibilityDescendants;
- (id)highlightColorWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)setAccessibilityDisclosedByRow:(id)a0;
- (void)setAccessibilityOverflowButton:(id)a0;
- (void)setAccessibilityVisibleColumns:(id)a0;
- (void)setAllowsEditingTextAttributes:(char)a0;
- (void)setUserInterfaceItemIdentifier:(id)a0;
- (char)_accessibilityIsTableViewDescendant;
- (id)_accessibilityLabel;
- (void)_accessibilityShowMenu:(id)a0;
- (void)_accessibilityShowMenu:(id)a0 withProxy:(id)a1;
- (struct CGPoint { double x0; double x1; })_accessibilityWindowPointForShowMenuWithProxy:(id)a0;
- (char)_allowsContextMenus;
- (char)_allowsStyledTextForColor:(id)a0;
- (char)_allowsTextTighteningInView:(id)a0;
- (id)_attributedStringForEditing;
- (void)_autoflipUnarchivedProperties;
- (double)_backingScaleFactorInView:(id)a0;
- (char)_beginVibrantBlendGroupIfNecessaryForControlView:(id)a0;
- (long long)_bezelPresentationStateInView:(id)a0;
- (id)_cachedAttributedStringValue;
- (id)_cachedAttributedStringWithGeneration:(long long)a0;
- (id)_cachedLineRef;
- (char)_canCacheAttributedStringValue;
- (char)_cell_isEditable;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_centerInnerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_characterRangeForPoint:(struct CGPoint { double x0; double x1; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (void)_clearAttributedStringCache;
- (void)_clearEditingTextView:(id)a0;
- (void)_clearMouseTracking;
- (id)_contents;
- (id)_controlContentStyleInView:(id)a0;
- (char)_controlContinueTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (void)_controlContinueTrackingPeriodically:(id)a0 inView:(id)a1;
- (char)_controlContinueTrackingPressure:(id)a0 inView:(id)a1;
- (void)_controlStopTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 mouseIsUp:(char)a3;
- (void)_controlViewDidChangeEffectiveAppearance:(id)a0;
- (void)_controlViewDidChangeEffectiveSemanticContext:(id)a0;
- (char)_customForegroundColorInTitle:(id)a0;
- (id)_defaultImageHints;
- (id)_defaultPlaceholderString;
- (char)_delegateValidation:(id)a0 object:(id)a1 uiHandled:(char *)a2;
- (void)_displaySomeWindowsIfNeeded:(id)a0;
- (void)_drawCellForDragWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_drawFocusRingWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_drawLiveResizeHighlightWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (id)_effectiveAppearanceInView:(id)a0;
- (id)_effectiveContentStyleForCellInView:(id)a0;
- (unsigned long long)_effectiveFocusRingType;
- (void)_effectiveFontDidChangeTo:(id)a0;
- (long long)_effectiveSemanticContextInControlView:(id)a0;
- (void)_endVibrantBlendGroup;
- (char)_externalContextSeemsLikelyToBeRaised;
- (double)_fallbackBackingScaleFactor;
- (long long)_fallbackSemanticContext;
- (void)_finishedMakingConnections;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_focusRingFrameForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 cellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)_formatObjectValue:(id)a0 invalid:(char)a1;
- (char)_hasAppearanceTextEffectsWithAttributedString:(id)a0;
- (char)_hasAttributedStringValue;
- (char)_hasGuardedBehavior;
- (char)_hasKeyAppearanceInView:(id)a0;
- (char)_hasTrackingGestureOverride;
- (char)_hitTestForTrackMouseEvent:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (id)_imageComponentIfNonEmptyImagePortion:(id)a0 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 key:(id)a2;
- (long long)_initialBackgroundStyleCompatibilityGuess;
- (long long)_initialBackgroundStyleCompatibilityGuessIgnoringExternalContext;
- (long long)_integerValue;
- (long long)_interiorContentPresentationStateInView:(id)a0;
- (long long)_interiorContentStateInView:(id)a0;
- (long long)_interiorContentValueInView:(id)a0;
- (void)_invalidateEffectiveFont;
- (void)_invalidateObjectValue;
- (char)_isAnimatingDefaultCell;
- (char)_isButtonTitleCell;
- (char)_isEditingTextView:(id)a0;
- (unsigned long long)_lineBreakMode;
- (unsigned long long)_lineBreakModeForCurrentConfiguration;
- (unsigned long long)_lineBreakStrategyForCurrentConfiguration;
- (id)_maybeSwapSystemFontForFont:(id)a0;
- (double)_minimumPressDuration;
- (id)_mouseTrackingInfo;
- (char)_needRedrawOnWindowChangedKeyState;
- (char)_needsHighlightedTextHint;
- (char)_objectValue:(id *)a0 forString:(id)a1;
- (char)_objectValue:(id *)a0 forString:(id)a1 errorDescription:(id *)a2;
- (char)_performKeyEquivalent:(id)a0 conditionally:(char)a1;
- (id)_placeholderAttributedString;
- (id)_placeholderString;
- (id)_preferredFontForFont:(id)a0;
- (char)_prefersTrackingWhenDisabled;
- (id)_pressureConfigurationIfNeeded;
- (void)_redrawDueToWindowChangedKeyStateInView:(id)a0;
- (void)_restartEditingWithTextView:(id)a0;
- (id)_selectOrEdit:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 inView:(id)a1 target:(id)a2 editor:(id)a3 event:(id)a4 start:(long long)a5 end:(long long)a6;
- (char)_sendActionFrom:(id)a0;
- (void)_sendActionsForEvents:(unsigned long long)a0 view:(id)a1;
- (void)_setAcceptsFirstResponder:(char)a0;
- (void)_setCachedAttributedStringValue:(id)a0;
- (void)_setCachedLineRef:(id)a0;
- (void)_setContents:(id)a0;
- (void)_setControlView:(id)a0;
- (void)_setCurrentlyEditing:(char)a0;
- (void)_setEditingTextView:(id)a0;
- (void)_setFallbackBezelPresentationState:(long long)a0;
- (void)_setFallbackSemanticContext:(long long)a0;
- (void)_setFieldEditorFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setHorizontallyCentered:(char)a0;
- (void)_setIntegerValue:(long long)a0;
- (void)_setLineBreakMode:(unsigned long long)a0;
- (void)_setMouseDownFlags:(long long)a0;
- (void)_setMouseTrackingInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ofView:(id)a1 withConfiguration:(id)a2;
- (void)_setMouseTrackingInfo:(id)a0;
- (void)_setNeedsHighlightedTextHint:(char)a0;
- (void)_setNeedsStateUpdate:(id)a0;
- (void)_setPlaceholderAttributedString:(id)a0;
- (void)_setPlaceholderString:(id)a0;
- (void)_setTextAttributeParaStyleNeedsRecalc;
- (void)_setTouchContinuousTimer:(id)a0;
- (void)_setTrackingTouch:(id)a0;
- (void)_setVerticallyCentered:(char)a0;
- (char)_shouldHighlightCellWhenSelected;
- (char)_shouldRedrawOnIdenticalObjectValueChanges;
- (char)_shouldSendActionForEventType:(unsigned long long)a0;
- (char)_shouldSetHighlightToFlag:(char)a0;
- (char)_shouldUseStyledTextInView:(id)a0 withBackgroundStyle:(long long)a1;
- (char)_skipsSynchronizationForEditingTextView:(id)a0;
- (id)_stringDrawingContext;
- (id)_stringForEditing;
- (void)_synchronizeTextView:(id)a0;
- (id)_textAttributesWithInteriorBackgroundStyle:(long long)a0;
- (char)_textDimsWhenDisabled;
- (unsigned long long)_textHitTest:(struct CGPoint { double x0; double x1; })a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (id)_touchContinuousTimer;
- (id)_trackingTouch;
- (long long)_typesetterBehavior;
- (id)_unformattedAttributedStringValue:(id)a0;
- (id)_updateInvalidatedObjectValue:(id)a0;
- (void)_updateTableViewContextForControlView:(id)a0;
- (char)_useHitTestInTrackMouse;
- (id)_useUserKeyEquivalent;
- (char)_usesUserKeyEquivalent;
- (char)_usingAlternateHighlightColorWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_validateEditing:(id)a0;
- (int)_vibrancyBlendModeForControlView:(id)a0;
- (void)_windowChangedKeyStateWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_withTemporarilySuppressedContents:(id /* block */)a0;
- (char)acceptsFirstResponder;
- (id)accessibilityActionNames;
- (struct CGPoint { double x0; double x1; })accessibilityActivationPoint;
- (id)accessibilityAllowedValues;
- (id)accessibilityApplicationFocusedUIElement;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityAttributedStringForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)accessibilityAttributedStringForRangeAttributeForParameter:(id)a0;
- (id)accessibilityAttributedUserInputLabels;
- (id)accessibilityAuditContrast;
- (id)accessibilityAuditHierarchy;
- (id)accessibilityAuditIssues;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityAuditLabel;
- (id)accessibilityAuditParent;
- (id)accessibilityBoundsForRangeAttributeForParameter:(id)a0;
- (id)accessibilityCancelButton;
- (id)accessibilityChartDescriptor;
- (id)accessibilityChildren;
- (id)accessibilityChildrenInNavigationOrder;
- (id)accessibilityClearButton;
- (id)accessibilityCloseButton;
- (long long)accessibilityColumnCount;
- (id)accessibilityColumnHeaderUIElements;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityColumnIndexRange;
- (id)accessibilityColumnTitles;
- (id)accessibilityColumns;
- (long long)accessibilityContainerType;
- (id)accessibilityContentSiblingAbove;
- (id)accessibilityContentSiblingBelow;
- (id)accessibilityContents;
- (id)accessibilityCriticalValue;
- (id)accessibilityCurrentEditor;
- (id)accessibilityCustomActions;
- (id)accessibilityCustomChoosers;
- (id)accessibilityCustomContent;
- (id)accessibilityCustomRotors;
- (id)accessibilityDecrementButton;
- (id)accessibilityDefaultButton;
- (id)accessibilityDisclosedByRow;
- (id)accessibilityDisclosedRows;
- (long long)accessibilityDisclosureLevel;
- (id)accessibilityDocument;
- (void)accessibilityDrawFocusRing;
- (id)accessibilityEmbeddedImageDescription;
- (id)accessibilityEnabledAttribute;
- (id)accessibilityExtrasMenuBar;
- (id)accessibilityFilename;
- (id)accessibilityFirstContentSibling;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityFocusedWindow;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrameForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)accessibilityFullScreenButton;
- (id)accessibilityFunctionRowTopLevelElements;
- (id)accessibilityGrowArea;
- (id)accessibilityHandles;
- (id)accessibilityHeader;
- (id)accessibilityHeaderForColumnIndex:(long long)a0;
- (id)accessibilityHeaderGroup;
- (id)accessibilityHelp;
- (id)accessibilityHelpAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)accessibilityHorizontalScrollBar;
- (id)accessibilityHorizontalUnitDescription;
- (id)accessibilityHorizontalUnitDescriptionAttribute;
- (long long)accessibilityHorizontalUnits;
- (id)accessibilityIdentifier;
- (id)accessibilityIncrementButton;
- (long long)accessibilityIndex;
- (long long)accessibilityInsertionPointLineNumber;
- (id)accessibilityInsertionPointLineNumberAttribute;
- (char)accessibilityIsAttributeSettable:(id)a0;
- (char)accessibilityIsEnabledAttributeSettable;
- (char)accessibilityIsFocusedAttributeSettable;
- (char)accessibilityIsHelpAttributeSettable;
- (char)accessibilityIsIgnored;
- (char)accessibilityIsInsertionPointLineNumberAttributeSettable;
- (char)accessibilityIsNumberOfCharactersAttributeSettable;
- (char)accessibilityIsParentAttributeSettable;
- (char)accessibilityIsPositionAttributeSettable;
- (char)accessibilityIsRoleAttributeSettable;
- (char)accessibilityIsRoleDescriptionAttributeSettable;
- (char)accessibilityIsSelectedTextAttributeSettable;
- (char)accessibilityIsSelectedTextRangeAttributeSettable;
- (char)accessibilityIsSizeAttributeSettable;
- (char)accessibilityIsTopLevelUIElementAttributeSettable;
- (char)accessibilityIsValueAttributeSettable;
- (char)accessibilityIsVisibleCharacterRangeAttributeSettable;
- (char)accessibilityIsWindowAttributeSettable;
- (id)accessibilityLabel;
- (id)accessibilityLabelUIElements;
- (float)accessibilityLabelValue;
- (struct CGPoint { double x0; double x1; })accessibilityLayoutPointForScreenPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })accessibilityLayoutSizeForScreenSize:(struct CGSize { double x0; double x1; })a0;
- (long long)accessibilityLineForIndex:(long long)a0;
- (id)accessibilityLineForIndexAttributeForParameter:(id)a0;
- (id)accessibilityLinkedUIElements;
- (id)accessibilityMainWindow;
- (id)accessibilityMarkerGroupUIElement;
- (id)accessibilityMarkerTypeDescription;
- (id)accessibilityMarkerUIElements;
- (id)accessibilityMarkerValues;
- (id)accessibilityMaxValue;
- (id)accessibilityMenuBar;
- (id)accessibilityMinValue;
- (id)accessibilityMinimizeButton;
- (id)accessibilityNextContents;
- (id)accessibilityNumberOfCharactersAttribute;
- (long long)accessibilityOrientation;
- (id)accessibilityOverflowButton;
- (char)accessibilityOverridesAlwaysTakePrecedence;
- (id)accessibilityParent;
- (id)accessibilityParentAttribute;
- (id)accessibilityPath;
- (void)accessibilityPerformAction:(id)a0;
- (char)accessibilityPerformCancel;
- (char)accessibilityPerformConfirm;
- (char)accessibilityPerformDecrement;
- (char)accessibilityPerformDelete;
- (char)accessibilityPerformIncrement;
- (char)accessibilityPerformPick;
- (char)accessibilityPerformPress;
- (char)accessibilityPerformRaise;
- (char)accessibilityPerformShowAlternateUI;
- (char)accessibilityPerformShowDefaultUI;
- (char)accessibilityPerformShowMenu;
- (id)accessibilityPlaceholderValue;
- (id)accessibilityPositionAttribute;
- (void)accessibilityPostNotification:(id)a0;
- (id)accessibilityPreferredLanguage;
- (id)accessibilityPreviousContentSibling;
- (id)accessibilityPreviousContents;
- (id)accessibilityProxy;
- (id)accessibilityRTFForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)accessibilityRTFForRangeAttributeForParameter:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityRangeForIndex:(long long)a0;
- (id)accessibilityRangeForIndexAttributeForParameter:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityRangeForLine:(long long)a0;
- (id)accessibilityRangeForLineAttributeForParameter:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityRangeForPosition:(struct CGPoint { double x0; double x1; })a0;
- (id)accessibilityRangeForPositionAttributeForParameter:(id)a0;
- (id)accessibilityResultsForSearchPredicate:(id)a0;
- (id)accessibilityRole;
- (id)accessibilityRoleAttribute;
- (id)accessibilityRoleDescription;
- (id)accessibilityRoleDescriptionAttribute;
- (long long)accessibilityRowCount;
- (id)accessibilityRowHeaderUIElements;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityRowIndexRange;
- (id)accessibilityRows;
- (long long)accessibilityRulerMarkerType;
- (struct CGPoint { double x0; double x1; })accessibilityScreenPointForLayoutPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })accessibilityScreenSizeForLayoutSize:(struct CGSize { double x0; double x1; })a0;
- (id)accessibilitySearchButton;
- (id)accessibilitySearchMenu;
- (id)accessibilitySections;
- (id)accessibilitySectionsAttribute;
- (id)accessibilitySelectedCells;
- (id)accessibilitySelectedChildren;
- (id)accessibilitySelectedColumns;
- (id)accessibilitySelectedRows;
- (id)accessibilitySelectedText;
- (id)accessibilitySelectedTextAttribute;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilitySelectedTextRange;
- (id)accessibilitySelectedTextRangeAttribute;
- (id)accessibilityServesAsTitleForUIElements;
- (void)accessibilitySetFocusedAttribute:(id)a0;
- (void)accessibilitySetSelectedTextAttribute:(id)a0;
- (void)accessibilitySetSelectedTextRangeAttribute:(id)a0;
- (void)accessibilitySetValue:(id)a0 forAttribute:(id)a1;
- (void)accessibilitySetVisibleCharacterRangeAttribute:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilitySharedCharacterRange;
- (id)accessibilitySharedFocusElements;
- (id)accessibilitySharedTextUIElements;
- (char)accessibilityShouldSendNotification:(id)a0;
- (char)accessibilityShouldUseUniqueId;
- (id)accessibilityShownMenu;
- (id)accessibilitySizeAttribute;
- (long long)accessibilitySortDirection;
- (id)accessibilitySplitters;
- (id)accessibilityStringForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)accessibilityStringForRangeAttributeForParameter:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityStyleRangeForIndex:(long long)a0;
- (id)accessibilityStyleRangeForIndexAttributeForParameter:(id)a0;
- (id)accessibilitySubrole;
- (char)accessibilitySupportsOverriddenAttributes;
- (id)accessibilityTabs;
- (id)accessibilityTitle;
- (id)accessibilityTitleUIElement;
- (id)accessibilityToolbarButton;
- (id)accessibilityTopLevelUIElement;
- (id)accessibilityTopLevelUIElementAttribute;
- (id)accessibilityURL;
- (id)accessibilityUnitDescription;
- (long long)accessibilityUnits;
- (id)accessibilityUserInputLabels;
- (id)accessibilityValue;
- (id)accessibilityValueAttribute;
- (id)accessibilityValueDescription;
- (id)accessibilityVerticalScrollBar;
- (id)accessibilityVerticalUnitDescription;
- (id)accessibilityVerticalUnitDescriptionAttribute;
- (long long)accessibilityVerticalUnits;
- (id)accessibilityVisibleCells;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityVisibleCharacterRange;
- (id)accessibilityVisibleCharacterRangeAttribute;
- (id)accessibilityVisibleChildren;
- (id)accessibilityVisibleColumns;
- (id)accessibilityVisibleRows;
- (id)accessibilityWarningValue;
- (id)accessibilityWindow;
- (id)accessibilityWindowAttribute;
- (struct CGPoint { double x0; double x1; })accessibilityWindowPointForShowMenu;
- (id)accessibilityWindows;
- (id)accessibilityZoomButton;
- (char)allowsAppearanceTextEffects;
- (char)allowsDefaultTighteningForTruncation;
- (char)allowsEditingTextAttributes;
- (char)allowsEditingTokens;
- (char)allowsMixedState;
- (char)cachesLineRef;
- (void)calcDrawInfo:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)canSmoothFontsInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forLayerBackedView:(id)a1;
- (void)cancelTrackingAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (long long)cellAttribute:(unsigned long long)a0;
- (struct CGSize { double x0; double x1; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)continueTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (void)continueTrackingPeriodicEvent:(id)a0 inView:(id)a1;
- (id)draggingImageComponentsWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawWithExpansionFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)editWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1 editor:(id)a2 delegate:(id)a3 event:(id)a4;
- (void)endEditing:(id)a0;
- (long long)entryType;
- (id)fieldEditorForView:(id)a0;
- (id)fieldEditorTextContainer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (unsigned long long)focusRingType;
- (unsigned long long)fontDilationStyle;
- (void)getPeriodicDelay:(float *)a0 interval:(float *)a1;
- (void)heartBeat:(struct { double x0; double x1; double x2; struct { unsigned char x0 : 1; unsigned int x1 : 31; } x3; } *)a0;
- (void)highlight:(char)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (unsigned long long)hitTestForEvent:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (unsigned long long)imageInterpolation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })imageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)initImageCell:(id)a0;
- (id)initTextCell:(id)a0;
- (char)isAccessibilityEnhancedUserInterface;
- (char)isAccessibilityMimicNativeView;
- (char)isEntryAcceptable:(id)a0;
- (char)keyDown:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (char)keyUp:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (void)layoutLayerWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (id)menuForEvent:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (id)mnemonic;
- (unsigned long long)mnemonicLocation;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (long long)nextState;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })opaqueRectForTitleBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)performClick:(id)a0;
- (char)refusesFirstResponder;
- (void)resetCursorRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)selectWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1 editor:(id)a2 delegate:(id)a3 start:(long long)a4 length:(long long)a5;
- (long long)sendActionOn:(unsigned long long)a0;
- (void)setAccessibilityActivationPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setAccessibilityAllowedValues:(id)a0;
- (void)setAccessibilityAlternateUIVisible:(char)a0;
- (void)setAccessibilityApplicationFocusedUIElement:(id)a0;
- (void)setAccessibilityAttributedUserInputLabels:(id)a0;
- (void)setAccessibilityAuditIssues:(id)a0;
- (void)setAccessibilityAutoInteractable:(char)a0;
- (void)setAccessibilityCancelButton:(id)a0;
- (void)setAccessibilityChartDescriptor:(id)a0;
- (void)setAccessibilityChildren:(id)a0;
- (void)setAccessibilityChildrenInNavigationOrder:(id)a0;
- (void)setAccessibilityClearButton:(id)a0;
- (void)setAccessibilityCloseButton:(id)a0;
- (void)setAccessibilityColumnCount:(long long)a0;
- (void)setAccessibilityColumnHeaderUIElements:(id)a0;
- (void)setAccessibilityColumnIndexRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilityColumnTitles:(id)a0;
- (void)setAccessibilityColumns:(id)a0;
- (void)setAccessibilityContainerType:(long long)a0;
- (void)setAccessibilityContentSiblingAbove:(id)a0;
- (void)setAccessibilityContentSiblingBelow:(id)a0;
- (void)setAccessibilityContents:(id)a0;
- (void)setAccessibilityCriticalValue:(id)a0;
- (void)setAccessibilityCustomActions:(id)a0;
- (void)setAccessibilityCustomContent:(id)a0;
- (void)setAccessibilityCustomRotors:(id)a0;
- (void)setAccessibilityDecrementButton:(id)a0;
- (void)setAccessibilityDefaultButton:(id)a0;
- (void)setAccessibilityDisclosed:(char)a0;
- (void)setAccessibilityDisclosedRows:(id)a0;
- (void)setAccessibilityDisclosureLevel:(long long)a0;
- (void)setAccessibilityDocument:(id)a0;
- (void)setAccessibilityEdited:(char)a0;
- (void)setAccessibilityElement:(char)a0;
- (void)setAccessibilityEmbeddedImageDescription:(id)a0;
- (void)setAccessibilityEnabled:(char)a0;
- (void)setAccessibilityEnhancedUserInterface:(char)a0;
- (void)setAccessibilityExpanded:(char)a0;
- (void)setAccessibilityExtrasMenuBar:(id)a0;
- (void)setAccessibilityFilename:(id)a0;
- (void)setAccessibilityFirstContentSibling:(id)a0;
- (void)setAccessibilityFocused:(char)a0;
- (void)setAccessibilityFocusedWindow:(id)a0;
- (void)setAccessibilityFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setAccessibilityFrameInParentSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setAccessibilityFrontmost:(char)a0;
- (void)setAccessibilityFullScreenButton:(id)a0;
- (void)setAccessibilityFunctionRowTopLevelElements:(id)a0;
- (void)setAccessibilityGrowArea:(id)a0;
- (void)setAccessibilityHandles:(id)a0;
- (void)setAccessibilityHeader:(id)a0;
- (void)setAccessibilityHeaderGroup:(id)a0;
- (void)setAccessibilityHelp:(id)a0;
- (void)setAccessibilityHidden:(char)a0;
- (void)setAccessibilityHorizontalScrollBar:(id)a0;
- (void)setAccessibilityHorizontalUnitDescription:(id)a0;
- (void)setAccessibilityHorizontalUnits:(long long)a0;
- (void)setAccessibilityIdentifier:(id)a0;
- (void)setAccessibilityIncrementButton:(id)a0;
- (void)setAccessibilityIndex:(long long)a0;
- (void)setAccessibilityInsertionPointLineNumber:(long long)a0;
- (void)setAccessibilityLabel:(id)a0;
- (void)setAccessibilityLabelUIElements:(id)a0;
- (void)setAccessibilityLabelValue:(float)a0;
- (void)setAccessibilityLastContentSibling:(id)a0;
- (void)setAccessibilityLinkedUIElements:(id)a0;
- (void)setAccessibilityMain:(char)a0;
- (void)setAccessibilityMainWindow:(id)a0;
- (void)setAccessibilityMarkerGroupUIElement:(id)a0;
- (void)setAccessibilityMarkerTypeDescription:(id)a0;
- (void)setAccessibilityMarkerUIElements:(id)a0;
- (void)setAccessibilityMarkerValues:(id)a0;
- (void)setAccessibilityMaxValue:(id)a0;
- (void)setAccessibilityMenuBar:(id)a0;
- (void)setAccessibilityMimicNativeView:(char)a0;
- (void)setAccessibilityMinValue:(id)a0;
- (void)setAccessibilityMinimized:(char)a0;
- (void)setAccessibilityModal:(char)a0;
- (void)setAccessibilityNextContents:(id)a0;
- (void)setAccessibilityNumberOfCharacters:(long long)a0;
- (void)setAccessibilityOrderedByRow:(char)a0;
- (void)setAccessibilityOrientation:(long long)a0;
- (void)setAccessibilityOverridesAlwaysTakePrecedence:(char)a0;
- (void)setAccessibilityParent:(id)a0;
- (void)setAccessibilityPath:(id)a0;
- (void)setAccessibilityPlaceholderValue:(id)a0;
- (void)setAccessibilityPreferredLanguage:(id)a0;
- (void)setAccessibilityPreviousContents:(id)a0;
- (void)setAccessibilityProtectedContent:(char)a0;
- (void)setAccessibilityProxy:(id)a0;
- (void)setAccessibilityRequired:(char)a0;
- (void)setAccessibilityRole:(id)a0;
- (void)setAccessibilityRoleDescription:(id)a0;
- (void)setAccessibilityRowCount:(long long)a0;
- (void)setAccessibilityRowHeaderUIElements:(id)a0;
- (void)setAccessibilityRowIndexRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilityRows:(id)a0;
- (void)setAccessibilityRulerMarkerType:(long long)a0;
- (void)setAccessibilitySearchButton:(id)a0;
- (void)setAccessibilitySearchMenu:(id)a0;
- (void)setAccessibilitySections:(id)a0;
- (void)setAccessibilitySelected:(char)a0;
- (void)setAccessibilitySelectedCells:(id)a0;
- (void)setAccessibilitySelectedChildren:(id)a0;
- (void)setAccessibilitySelectedColumns:(id)a0;
- (void)setAccessibilitySelectedRows:(id)a0;
- (void)setAccessibilitySelectedText:(id)a0;
- (void)setAccessibilitySelectedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilitySelectedTextRanges:(id)a0;
- (void)setAccessibilityServesAsTitleForUIElements:(id)a0;
- (void)setAccessibilitySharedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilitySharedFocusElements:(id)a0;
- (void)setAccessibilitySharedTextUIElements:(id)a0;
- (void)setAccessibilityShownMenu:(id)a0;
- (void)setAccessibilitySortDirection:(long long)a0;
- (void)setAccessibilitySplitters:(id)a0;
- (void)setAccessibilitySubrole:(id)a0;
- (void)setAccessibilityTabs:(id)a0;
- (void)setAccessibilityTitle:(id)a0;
- (void)setAccessibilityToolbarButton:(id)a0;
- (void)setAccessibilityTopLevelUIElement:(id)a0;
- (void)setAccessibilityURL:(id)a0;
- (void)setAccessibilityUnitDescription:(id)a0;
- (void)setAccessibilityUnits:(long long)a0;
- (void)setAccessibilityUserInputLabels:(id)a0;
- (void)setAccessibilityValue:(id)a0;
- (void)setAccessibilityValueDescription:(id)a0;
- (void)setAccessibilityVerticalScrollBar:(id)a0;
- (void)setAccessibilityVerticalUnitDescription:(id)a0;
- (void)setAccessibilityVerticalUnits:(long long)a0;
- (void)setAccessibilityVisibleCells:(id)a0;
- (void)setAccessibilityVisibleCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilityVisibleChildren:(id)a0;
- (void)setAccessibilityVisibleRows:(id)a0;
- (void)setAccessibilityWarningValue:(id)a0;
- (void)setAccessibilityWindow:(id)a0;
- (void)setAccessibilityWindows:(id)a0;
- (void)setAccessibilityZoomButton:(id)a0;
- (void)setAllowsDefaultTighteningForTruncation:(char)a0;
- (void)setAllowsMixedState:(char)a0;
- (void)setCellAttribute:(unsigned long long)a0 to:(long long)a1;
- (void)setDrawsBackground:(char)a0;
- (void)setEntryType:(long long)a0;
- (void)setFieldEditorTextContainer:(id)a0;
- (void)setFloatingPointFormat:(char)a0 left:(unsigned long long)a1 right:(unsigned long long)a2;
- (void)setFocusRingType:(unsigned long long)a0;
- (void)setImageInterpolation:(unsigned long long)a0;
- (void)setImportsGraphics:(char)a0;
- (void)setMnemonicLocation:(unsigned long long)a0;
- (void)setNextContentSibling:(id)a0;
- (void)setNextState;
- (void)setPreviousContentSibling:(id)a0;
- (void)setRefusesFirstResponder:(char)a0;
- (void)setShowsFirstResponder:(char)a0;
- (void)setTitleTextContainer:(id)a0;
- (void)setTitleWithMnemonic:(id)a0;
- (id)setUpFieldEditorAttributes:(id)a0;
- (char)showsFirstResponder;
- (char)startTrackingAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)stopTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 mouseIsUp:(char)a3;
- (void)takeDoubleValueFrom:(id)a0;
- (void)takeFloatValueFrom:(id)a0;
- (void)takeIntValueFrom:(id)a0;
- (void)takeIntegerValueFrom:(id)a0;
- (void)takeObjectValueFrom:(id)a0;
- (void)takeStringValueFrom:(id)a0;
- (unsigned long long)textAlignmentPolicy;
- (void)textDidChange:(id)a0;
- (char)textView:(id)a0 shouldChangeTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementString:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)titleTextContainer;
- (void)touchBeganAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)touchCancelledAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)touchEndedAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)touchMovedFrom:(struct CGPoint { double x0; double x1; })a0 to:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (char)trackMouse:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 untilMouseUp:(char)a3;
- (void)updateLayerWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)updateTrackingAreaWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (id)userInterfaceItemIdentifier;
- (char)wantsNotificationForMarkedText;
- (char)wantsUpdateLayerInView:(id)a0;

@end
