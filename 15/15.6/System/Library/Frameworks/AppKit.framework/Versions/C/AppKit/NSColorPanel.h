@class NSString, NSView, NSMutableArray, NSColor;

@interface NSColorPanel : NSPanel <NSTouchBarColorPickerViewControllerDelegate, NSWindowRestoration> {
    id _colorSwatch;
    id _accessoryContainerView;
    id _colorWell;
    NSMutableArray *_pickersWithLoadedViews;
    id _magnifyButton;
    id _middleView;
    id _opacitySlider;
    id _opacityText;
    id _opacityView;
    id _modalButtons;
    id _pickerView;
    id _customViewsList;
    id _customPickerList;
    id _currViewObject;
    id _bottomConstraint;
    id _accessoryView;
    SEL _action;
    struct CGSize { double width; double height; } _minColorPanelSize;
    struct CGSize { double width; double height; } _maxColorPanelSize;
    id _accessoryContainerViewHeight;
    id _opacityViewHeight;
    unsigned long long _colorSettingSuppressionCount;
    id _resizeDimple;
    char _handlingOpacityMoveAction;
    char _ignoreConstraints;
    char _continuous;
    char _stillInitializing;
    char _hasModalAppearance;
    id _opacityTextController;
    id _observedWindow;
    id _observedAppearanceTarget;
    char _showsAlpha;
    id _target;
}

@property (class, readonly) NSColorPanel *sharedColorPanel;
@property (class, readonly) char sharedColorPanelExists;

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isUsingModalAppearance) char usingModalAppearance;
@property id target;
@property SEL action;
@property (retain) NSView *accessoryView;
@property (getter=isContinuous) char continuous;
@property char showsAlpha;
@property long long mode;
@property (copy) NSColor *color;
@property (readonly) double alpha;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (char)ignoreModifierKeysWhileDragging;
+ (char)_dragColor:(id)a0 withEvent:(id)a1 fromView:(id)a2 source:(id)a3;
+ (char)dragColor:(id)a0 withEvent:(id)a1 fromView:(id)a2;
+ (unsigned long long)draggingSourceOperationMaskForLocal:(char)a0;
+ (id)keyPathsForValuesAffectingTouchBar;
+ (char)loadsExternalColorPickers;
+ (void)restoreWindowWithIdentifier:(id)a0 state:(id)a1 completionHandler:(id /* block */)a2;
+ (void)setLoadsExternalColorPickers:(char)a0;
+ (void)setPickerMask:(unsigned long long)a0;
+ (void)setPickerMode:(long long)a0;
+ (void)warmupExternalColorPickersIfNecessary;

- (void)dealloc;
- (char)conformsToProtocol:(id)a0;
- (id)init;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)_forceSetColor:(id)a0;
- (void)resignKeyWindow;
- (void)_resetOpacity:(id)a0 andForceSetColor:(char)a1;
- (void)becomeKeyWindow;
- (SEL)__action;
- (long long)__numberOfRowsToToggleVisibleInColorSwatch;
- (long long)__numberOfVisibleRowsInColorSwatch;
- (void)__setNumberOfRowsToToggleVisibleInColorSwatch:(long long)a0;
- (id)__target;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustedFrameForSaving:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustedFrameFromDefaults:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)_allowsColorSetting;
- (void)_appendColorPicker:(id)a0;
- (id)_arrayForPartialPinningFromArray:(id)a0;
- (void)_cancelKey:(id)a0;
- (void)_changeMinColorPanelSizeByDelta:(struct CGSize { double x0; double x1; })a0 compareWithOldMinSize:(char)a1 oldMinSize:(struct CGSize { double x0; double x1; })a2 setWindowFrame:(char)a3;
- (void)_changeMinColorPanelSizeByDelta:(struct CGSize { double x0; double x1; })a0 setWindowFrame:(char)a1;
- (void)_colorPanelDidLoad;
- (id)_colorPickers;
- (id)_colorSwatch;
- (void)_colorWellAcceptedColor:(id)a0;
- (char)_determinesMinSizeFromAccessoryView:(id)a0;
- (void)_endLiveResize;
- (void)_forceSendAction:(char)a0 notification:(char)a1 firstResponder:(char)a2;
- (double)_insertionOrderForPicker:(id)a0;
- (char)_isCurrentColorPicker:(id)a0;
- (id)_keyViewFollowingAccessoryView;
- (id)_keyViewFollowingModalButtons;
- (id)_keyViewFollowingOpacityViews;
- (id)_keyViewFollowingPickerViews;
- (id)_keyViewPrecedingAccesoryView;
- (id)_keyViewPrecedingModalButtons;
- (id)_keyViewPrecedingPickerViews;
- (void)_loadColorPickers;
- (void)_magnify:(id)a0;
- (void)_middleViewFrameChanged:(id)a0;
- (struct CGSize { double x0; double x1; })_newLegalSizeFromSize:(struct CGSize { double x0; double x1; })a0 force:(char)a1 roundDirection:(long long)a2;
- (struct CGSize { double x0; double x1; })_panelSizeExcludingToolbar;
- (id)_pickerView;
- (void)_pinViews:(id)a0;
- (id)_pinViews:(id)a0 resizeFlagsToLeaveAlone:(long long)a1;
- (id)_provideNewViewFor:(id)a0 initialViewRequest:(char)a1;
- (void)_removeColorPicker:(id)a0;
- (void)_resetOpacity:(id)a0;
- (void)_saveMode;
- (long long)_savedMode;
- (void)_selectFirstKeyView;
- (void)_sendActionAndNotification;
- (void)_set:(id)a0;
- (void)_setMinPickerContentSize:(struct CGSize { double x0; double x1; })a0;
- (void)_setNumVisibleSwatchRows:(long long)a0;
- (void)_setShowAlpha:(char)a0 andForce:(char)a1;
- (void)_setTitleFixedPointWindowFrame:(struct CGSize { double x0; double x1; })a0 display:(char)a1 animate:(char)a2;
- (void)_setUseModalAppearance:(char)a0;
- (void)_setUtilityWindow:(char)a0;
- (void)_setupButtonImageAndToolTips;
- (void)_sizeWindowForPicker:(id)a0;
- (id)_startingWindowForSendAction:(SEL)a0;
- (void)_stopModal:(id)a0;
- (void)_storeNewColorInColorWell:(id)a0;
- (void)_switchToAppropriateModeForColorIfNecessary:(id)a0;
- (void)_switchToPicker:(id)a0;
- (void)_switchViewForToolbarItem:(id)a0;
- (void)_syncSwatchSizeToSavedNumVisibleRows;
- (void)_timedAdjustTextControl:(id)a0;
- (id)_toolTipForColorPicker:(id)a0;
- (void)_unpinViews:(id)a0;
- (void)_unpinViews:(id)a0 resizeMasks:(id)a1;
- (void)_updateEffectiveAppearance;
- (void)_validateOpacitySlider;
- (void)_withColorSettingDisabled:(id /* block */)a0;
- (void)applicationDidBecomeActive:(id)a0;
- (void)attachColorList:(id)a0;
- (void)changeWindowFrameSizeByDelta:(struct CGSize { double x0; double x1; })a0 display:(char)a1 animate:(char)a2;
- (long long)colorMask;
- (void)colorPickerViewController:(id)a0 didSelectColor:(id)a1;
- (void)detachColorList:(id)a0;
- (id)initWithContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 styleMask:(unsigned long long)a1 backing:(unsigned long long)a2 defer:(char)a3;
- (void)insertNewline:(id)a0;
- (char)isViewOfPickerLoaded:(id)a0;
- (id)makeTouchBar;
- (id)setColorMask:(long long)a0;
- (void)setHidesOnDeactivate:(char)a0;
- (void)setViewOfPickerIsLoaded:(id)a0;

@end
