@class NSArray, NSString, NSView, NSAppearance, NSViewController, NSURL, NSWindow;
@protocol NSPopoverDelegate;

@interface NSPopover : NSResponder <_NSTransientUIElement, NSAppearanceCustomization, NSAccessibilityElement, NSAccessibility> {
    id _bindingAdaptor;
    id _delegate;
    id _visualRepresentation;
    NSViewController *_contentViewController;
    NSAppearance *_appearance;
    long long _behavior;
    id _popoverPrivateData;
    unsigned long long _preferredEdge;
    struct CGSize { double width; double height; } _contentSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _positioningRect;
    id _postCloseBlock;
    char _isInDetachingDrag;
    struct { unsigned char animates : 1; unsigned char positioningRectIsBounds : 1; unsigned char registeredAsTransient : 1; unsigned char registeredAsSemitransient : 1; unsigned char shown : 1; unsigned char toolbarHidesAnchor : 1; unsigned char closing : 1; unsigned char registeredForGeometryInWindowDidChange : 1; unsigned char registeredForEffectiveAppearanceDidChange : 1; unsigned char keepTopStable : 1; unsigned char implicitlyDetached : 1; unsigned char hidesDetachedWindowOnDeactivate : 1; unsigned char requiresCorrectContentAppearance : 1; unsigned char settingContentViewController : 1; unsigned int reserved : 18; } _flags;
}

@property (setter=_setRegisteredTransientBehavior:) long long _registeredTransientBehavior;
@property (readonly) long long _transientBehavior;
@property (readonly, getter=isDetached) char detached;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isShown) char shown;
@property (retain) NSView *positioningView;
@property (retain) NSWindow *positioningWindow;
@property (weak) id<NSPopoverDelegate> delegate;
@property (retain) NSAppearance *appearance;
@property (readonly) NSAppearance *effectiveAppearance;
@property long long behavior;
@property char animates;
@property (retain) NSViewController *contentViewController;
@property struct CGSize { double x0; double x1; } contentSize;
@property (readonly, getter=isDetached) char detached;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } positioningRect;
@property char hasFullSizeContent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isAccessibilityElement) char accessibilityElement;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } accessibilityFrame;
@property (getter=isAccessibilityFocused) char accessibilityFocused;
@property struct CGPoint { double x0; double x1; } accessibilityActivationPoint;
@property (weak) id accessibilityTopLevelUIElement;
@property (copy) NSURL *accessibilityURL;
@property (retain) id accessibilityValue;
@property (copy) NSString *accessibilityValueDescription;
@property (copy) NSArray *accessibilityVisibleChildren;
@property (copy) NSString *accessibilitySubrole;
@property (copy) NSString *accessibilityTitle;
@property (weak) id accessibilityTitleUIElement;
@property (copy) NSArray *accessibilityNextContents;
@property long long accessibilityOrientation;
@property (retain) id accessibilityOverflowButton;
@property (weak) id accessibilityParent;
@property (copy) NSString *accessibilityPlaceholderValue;
@property (copy) NSArray *accessibilityPreviousContents;
@property (copy) NSString *accessibilityRole;
@property (copy) NSString *accessibilityRoleDescription;
@property (retain) id accessibilitySearchButton;
@property (retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected) char accessibilitySelected;
@property (copy) NSArray *accessibilitySelectedChildren;
@property (copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (retain) id accessibilityShownMenu;
@property (retain) id accessibilityMinValue;
@property (retain) id accessibilityMaxValue;
@property (copy) NSArray *accessibilityLinkedUIElements;
@property (weak) id accessibilityWindow;
@property (copy) NSString *accessibilityIdentifier;
@property (copy) NSString *accessibilityHelp;
@property (copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityExpanded) char accessibilityExpanded;
@property (getter=isAccessibilityEdited) char accessibilityEdited;
@property (getter=isAccessibilityEnabled) char accessibilityEnabled;
@property (copy) NSArray *accessibilityChildren;
@property (copy) NSArray *accessibilityChildrenInNavigationOrder;
@property (retain) id accessibilityClearButton;
@property (retain) id accessibilityCancelButton;
@property (getter=isAccessibilityProtectedContent) char accessibilityProtectedContent;
@property (copy) NSArray *accessibilityContents;
@property (copy) NSString *accessibilityLabel;
@property (getter=isAccessibilityAlternateUIVisible) char accessibilityAlternateUIVisible;
@property (copy) NSArray *accessibilitySharedFocusElements;
@property (getter=isAccessibilityRequired) char accessibilityRequired;
@property (copy) NSArray *accessibilityCustomRotors;
@property (copy) NSArray *accessibilityUserInputLabels;
@property (copy) NSArray *accessibilityAttributedUserInputLabels;
@property (retain) id accessibilityApplicationFocusedUIElement;
@property (retain) id accessibilityMainWindow;
@property (getter=isAccessibilityHidden) char accessibilityHidden;
@property (getter=isAccessibilityFrontmost) char accessibilityFrontmost;
@property (retain) id accessibilityFocusedWindow;
@property (copy) NSArray *accessibilityWindows;
@property (weak) id accessibilityExtrasMenuBar;
@property (weak) id accessibilityMenuBar;
@property (copy) NSArray *accessibilityColumnTitles;
@property (getter=isAccessibilityOrderedByRow) char accessibilityOrderedByRow;
@property long long accessibilityHorizontalUnits;
@property long long accessibilityVerticalUnits;
@property (copy) NSString *accessibilityHorizontalUnitDescription;
@property (copy) NSString *accessibilityVerticalUnitDescription;
@property (copy) NSArray *accessibilityHandles;
@property (retain) id accessibilityWarningValue;
@property (retain) id accessibilityCriticalValue;
@property (getter=isAccessibilityDisclosed) char accessibilityDisclosed;
@property (weak) id accessibilityDisclosedByRow;
@property (retain) id accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel;
@property (copy) NSArray *accessibilityMarkerUIElements;
@property (retain) id accessibilityMarkerValues;
@property (retain) id accessibilityMarkerGroupUIElement;
@property long long accessibilityUnits;
@property (copy) NSString *accessibilityUnitDescription;
@property long long accessibilityRulerMarkerType;
@property (copy) NSString *accessibilityMarkerTypeDescription;
@property (retain) id accessibilityHorizontalScrollBar;
@property (retain) id accessibilityVerticalScrollBar;
@property (copy) NSArray *accessibilityAllowedValues;
@property (copy) NSArray *accessibilityLabelUIElements;
@property float accessibilityLabelValue;
@property (copy) NSArray *accessibilitySplitters;
@property (retain) id accessibilityDecrementButton;
@property (retain) id accessibilityIncrementButton;
@property (copy) NSArray *accessibilityTabs;
@property (retain) id accessibilityHeader;
@property long long accessibilityColumnCount;
@property long long accessibilityRowCount;
@property long long accessibilityIndex;
@property (copy) NSArray *accessibilityColumns;
@property (copy) NSArray *accessibilityRows;
@property (copy) NSArray *accessibilityVisibleRows;
@property (copy) NSArray *accessibilitySelectedRows;
@property (copy) NSArray *accessibilityVisibleColumns;
@property (copy) NSArray *accessibilitySelectedColumns;
@property long long accessibilitySortDirection;
@property (copy) NSArray *accessibilityRowHeaderUIElements;
@property (copy) NSArray *accessibilitySelectedCells;
@property (copy) NSArray *accessibilityVisibleCells;
@property (copy) NSArray *accessibilityColumnHeaderUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityRowIndexRange;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityColumnIndexRange;
@property long long accessibilityInsertionPointLineNumber;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySharedCharacterRange;
@property (copy) NSArray *accessibilitySharedTextUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityVisibleCharacterRange;
@property long long accessibilityNumberOfCharacters;
@property (copy) NSString *accessibilitySelectedText;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySelectedTextRange;
@property (copy) NSArray *accessibilitySelectedTextRanges;
@property (retain) id accessibilityToolbarButton;
@property (getter=isAccessibilityModal) char accessibilityModal;
@property (retain) id accessibilityProxy;
@property (getter=isAccessibilityMain) char accessibilityMain;
@property (retain) id accessibilityFullScreenButton;
@property (retain) id accessibilityGrowArea;
@property (copy) NSString *accessibilityDocument;
@property (retain) id accessibilityDefaultButton;
@property (retain) id accessibilityCloseButton;
@property (retain) id accessibilityZoomButton;
@property (retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized) char accessibilityMinimized;
@property (copy) NSArray *accessibilityCustomActions;

+ (struct CGSize { double x0; double x1; })defaultContentSize;

- (void)dealloc;
- (id)init;
- (id)_delegate;
- (void)close;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)detach;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)_accessibilityEstablishParentChildRelationshipForPopoverWindow:(id)a0;
- (SEL)_reactiveAction;
- (void)cancel:(id)a0;
- (char)hidesDetachedWindowOnDeactivate;
- (void)popoverDidShow:(id)a0;
- (id)_bindingAdaptor;
- (void)_dragWithEvent:(id)a0;
- (char)_validatePopoverFirstResponder:(id)a0;
- (void)recognizerDidCompleteAnimation:(id)a0;
- (char)_accessibilityShouldReportCancelAction;
- (void)_addForbiddenRectForBoundsOfView:(id)a0;
- (void)_applicationDidBecomeActive_detachedWindow:(id)a0;
- (void)_applicationDidResignActive_detachedWindow:(id)a0;
- (void)_beginPredeepAnimationAgainstPoint:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)_beginPredeepAnimationRelativeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ofView:(id)a1 preferredEdge:(unsigned long long)a2;
- (void)_cancelPredeepAnimation;
- (void)_closeForKeyDownEvent:(id)a0;
- (void)_closeForNonDragOrResizeClickWithEvent:(id)a0;
- (void)_closeForSheetPresentingOnWindow:(id)a0;
- (void)_closeForToolbarPresentingOnWindow:(id)a0;
- (long long)_closeReason;
- (void)_commonInit;
- (void)_completeDeepAnimation;
- (void)_completeShow;
- (struct CGPoint { double x0; double x1; })_computeAnchorPointForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_currentFrameOnScreenWithContentSize:(struct CGSize { double x0; double x1; })a0 outAnchorEdge:(unsigned long long *)a1;
- (void)_doPredeepAnimationWithProgress:(double)a0;
- (void)_dragFromScreenLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_executeClosingBlock;
- (unsigned long long)_externalRectEdgeToInternalAnchorEdge:(unsigned long long)a0 ofView:(id)a1;
- (void)_finalizeImplicitWindowDetach;
- (void)_finishClosingAndShouldNotify:(char)a0;
- (void)_geometryInWindowDidChangeForView:(id)a0;
- (char)_isAffectedByEventsInWindow:(id)a0;
- (long long)_legacyAppearance;
- (id)_makePopoverWindowIfNeeded;
- (void)_observeFullscreenChanges:(char)a0;
- (void)_popoverDidEnterFullscreen:(id)a0;
- (void)_popoverDidExitFullscreen:(id)a0;
- (id)_popoverFrame;
- (id)_popoverWindow;
- (char)_popoverWindow:(id)a0 fromConstraintsSetWindowFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (long long)_popoverWindowLevel;
- (id)_positioningView;
- (void)_queueClosingBlock:(id /* block */)a0;
- (void)_releaseDeepAnimation;
- (void)_removeAllForbiddenRects;
- (void)_repositionRelativeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ofView:(id)a1 preferredEdge:(unsigned long long)a2;
- (char)_requiresCorrectContentAppearance;
- (void)_resetClosingBlock;
- (void)_resetImplicitWindowDetach;
- (void)_setBindingAdaptor:(id)a0;
- (void)_setCloseReason:(long long)a0;
- (void)_setContentSize:(struct CGSize { double x0; double x1; })a0;
- (void)_setContentView:(id)a0 size:(struct CGSize { double x0; double x1; })a1 canAnimate:(char)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_setInitialWindowFrameFromContentSize;
- (void)_setLegacyAppearance:(long long)a0;
- (void)_setListenToEffectiveAppearanceDidChange:(char)a0;
- (void)_setListenToViewGeometryInWindowDidChange:(char)a0;
- (void)_setPopoverWindow:(id)a0;
- (void)_setRequiresCorrectContentAppearance:(char)a0;
- (char)_shouldStillBeVisibleRelativeToView:(id)a0;
- (char)_shouldUseNonVibrantAppearanceForContentView:(id)a0;
- (void)_updateAnchorPoint;
- (void)_updateAnchorPointForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 reshape:(char)a1;
- (void)_updateContentViewAndSizeFromViewController;
- (void)_updatePopoverWindowLevels;
- (void)_updateWindow:(id)a0 withContentViewController:(id)a1;
- (void)_updateWindowProperties;
- (char)_validatePopoverWindowFirstResponder;
- (char)accessibilityAllowsOverriddenAttributesWhenIgnored;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityAuditIssuesAttribute;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrame;
- (char)accessibilityIsAttributeSettable:(id)a0;
- (char)accessibilityIsIgnored;
- (id)accessibilityParent;
- (id)accessibilitySectionsAttribute;
- (void)accessibilitySetValue:(id)a0 forAttribute:(id)a1;
- (char)accessibilitySupportsOverriddenAttributes;
- (unsigned long long)anchorEdge;
- (struct CGSize { double x0; double x1; })anchorSize;
- (void)cancelOperation:(id)a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })contentInset;
- (id)customAppearance;
- (id)detachableWindowForPopover:(id)a0;
- (void)performClose:(id)a0;
- (void)popoverDidClose:(id)a0;
- (void)popoverDidDetach:(id)a0;
- (char)popoverShouldClose:(id)a0;
- (char)popoverShouldDetach:(id)a0;
- (void)popoverWillClose:(id)a0;
- (void)popoverWillShow:(id)a0;
- (unsigned long long)positioningOptions;
- (void)positioningViewGeometryInWindowDidChange:(id)a0;
- (void)recognizerDidCancelAnimation:(id)a0;
- (void)recognizerDidDismissAnimation:(id)a0;
- (void)recognizerDidUpdateAnimation:(id)a0;
- (void)recognizerWillBeginAnimation:(id)a0;
- (void)setAnchorEdge:(unsigned long long)a0;
- (void)setCustomAppearance:(id)a0;
- (void)setHidesDetachedWindowOnDeactivate:(char)a0;
- (void)setPositioningOptions:(unsigned long long)a0;
- (void)setShouldHideAnchor:(char)a0;
- (char)shouldHideAnchor;
- (void)showRelativeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ofView:(id)a1 preferredEdge:(unsigned long long)a2;
- (void)showRelativeToToolbarItem:(id)a0;
- (id)supplementalTargetForAction:(SEL)a0 sender:(id)a1;

@end
