@class NSTouchDevice, NSString, NSSet, NSGraphicsContext, NSTrackingArea, NSDictionary, NSWindow;
@protocol NSViewRoot;

@interface NSEvent : NSObject <NSCopying, NSCoding> {
    struct CGPoint { double x; double y; } _location;
    unsigned int _modifierFlags;
    NSWindow *_window;
    long long _windowNumber;
    union { struct { int eventNumber; int clickCount; float pressure; double deltaX; double deltaY; int subtype; short buttonNumber; short reserved1; int reserved2[3]; } mouse; struct { NSString *keys; NSString *unmodKeys; unsigned short keyCode; char isARepeat; int eventFlags; int reserved[5]; } key; struct { int eventNumber; long long trackingNumber; void *userData; int reserved[6]; } tracking; struct { double deltaX; double deltaY; double deltaZ; short subtype; short reserved1; int reserved2[6]; } scrollWheel; struct { double deltaX; double deltaY; double deltaZ; int reserved[7]; } axisGesture; struct { short subtype; char gestureEnded; char reserved; int value; float percentage; int reserved2[7]; } miscGesture; struct { int subtype; long long data1; long long data2; int reserved[6]; } misc; int tabletPointData[14]; int tabletProximityData[14]; } _data;
    void *_eventRef;
    unsigned long long _type;
    double _timestamp;
    id<NSViewRoot> _viewRoot;
    NSGraphicsContext *_context;
    struct __CGEvent { } *_cgEventRef;
    NSSet *_touches;
    long long _touchContextId;
    NSTouchDevice *_touchDevice;
    NSDictionary *_previousCoalescedTouches;
}

@property (class, getter=isMouseCoalescingEnabled) char mouseCoalescingEnabled;
@property (class, readonly, getter=isSwipeTrackingFromScrollEventsEnabled) char swipeTrackingFromScrollEventsEnabled;
@property (class, readonly) struct CGPoint { double x0; double x1; } mouseLocation;
@property (class, readonly) unsigned long long modifierFlags;
@property (class, readonly) unsigned long long pressedMouseButtons;
@property (class, readonly) double doubleClickInterval;
@property (class, readonly) double keyRepeatDelay;
@property (class, readonly) double keyRepeatInterval;

@property (readonly) unsigned long long type;
@property (readonly) unsigned long long modifierFlags;
@property (readonly) double timestamp;
@property (readonly, weak) NSWindow *window;
@property (readonly) long long windowNumber;
@property (readonly) NSGraphicsContext *context;
@property (readonly) long long clickCount;
@property (readonly) long long buttonNumber;
@property (readonly) long long eventNumber;
@property (readonly) float pressure;
@property (readonly) struct CGPoint { double x0; double x1; } locationInWindow;
@property (readonly) double deltaX;
@property (readonly) double deltaY;
@property (readonly) double deltaZ;
@property (readonly) char hasPreciseScrollingDeltas;
@property (readonly) double scrollingDeltaX;
@property (readonly) double scrollingDeltaY;
@property (readonly) unsigned long long momentumPhase;
@property (readonly, getter=isDirectionInvertedFromDevice) char directionInvertedFromDevice;
@property (readonly, copy) NSString *characters;
@property (readonly, copy) NSString *charactersIgnoringModifiers;
@property (readonly, getter=isARepeat) char ARepeat;
@property (readonly) unsigned short keyCode;
@property (readonly) long long trackingNumber;
@property (readonly) void *userData;
@property (readonly) NSTrackingArea *trackingArea;
@property (readonly) short subtype;
@property (readonly) long long data1;
@property (readonly) long long data2;
@property (readonly) const void *eventRef;
@property (readonly) struct __CGEvent { } *CGEvent;
@property (readonly) double magnification;
@property (readonly) unsigned long long deviceID;
@property (readonly) float rotation;
@property (readonly) long long absoluteX;
@property (readonly) long long absoluteY;
@property (readonly) long long absoluteZ;
@property (readonly) unsigned long long buttonMask;
@property (readonly) struct CGPoint { double x0; double x1; } tilt;
@property (readonly) float tangentialPressure;
@property (readonly) id vendorDefined;
@property (readonly) unsigned long long vendorID;
@property (readonly) unsigned long long tabletID;
@property (readonly) unsigned long long pointingDeviceID;
@property (readonly) unsigned long long systemTabletID;
@property (readonly) unsigned long long vendorPointingDeviceType;
@property (readonly) unsigned long long pointingDeviceSerialNumber;
@property (readonly) unsigned long long uniqueID;
@property (readonly) unsigned long long capabilityMask;
@property (readonly) unsigned long long pointingDeviceType;
@property (readonly, getter=isEnteringProximity) char enteringProximity;
@property (readonly) unsigned long long phase;
@property (readonly) long long stage;
@property (readonly) double stageTransition;
@property (readonly) unsigned long long associatedEventsMask;
@property (readonly) long long pressureBehavior;

+ (void)initialize;
+ (id)_delayedEventMatchingMask:(unsigned long long)a0 pull:(char)a1;
+ (void)_startConcurrentEventProcessing;
+ (void)_addCGEventBuffer:(id)a0;
+ (id)_addConcurrentEventMonitorMatchingMask:(unsigned long long)a0 identifier:(id)a1 handler:(id /* block */)a2;
+ (void)_clearCancelledTouches;
+ (void)_clearDFRTouches;
+ (void)_discardCursorEventsForWindowNumber:(long long)a0 criteria:(long long)a1;
+ (void)_discardEventsForTrackingArea:(id)a0;
+ (void)_discardEventsForTrackingArea:(id)a0 window:(id)a1;
+ (void)_discardEventsFromSubthread:(id)a0;
+ (void)_discardEventsMatchingMask:(unsigned long long)a0 beforeTime:(unsigned long long)a1 inQueue:(unsigned long long)a2;
+ (void)_discardEventsWithMask:(unsigned long long)a0 eventTime:(unsigned long long)a1;
+ (id)_eventWithCGSEvent:(void *)a0;
+ (id)_eventWithEventRefInternal:(const void *)a0;
+ (id)_eventWithTouches:(id)a0;
+ (id)_eventsCancellingTouchesForWindow:(id)a0;
+ (void)_fluidSwipeTrackingBehaviorChanged;
+ (char)_isConcurrentEventProcessingOn;
+ (char)_isConcurrentEventProcessingSupported:(id *)a0;
+ (char)_mouseButtonIsDown;
+ (id)_navigationEventWithCommand:(long long)a0 data:(long long)a1 windowNumber:(long long)a2;
+ (id)_quickLookEventWithLocation:(struct CGPoint { double x0; double x1; })a0 modifierFlags:(unsigned long long)a1 timestamp:(double)a2 windowNumber:(long long)a3 context:(id)a4 eventNumber:(long long)a5;
+ (void)_registerForConcurrentEventProcessing;
+ (void)_removeCGEventBuffer:(id)a0;
+ (void)_removeConcurrentEventMonitor:(id)a0;
+ (void)_resetDefaults;
+ (void)_resetDeviceCapabilityCaches;
+ (void)_resetDiscardMask;
+ (id)_sendEventToObservers:(id)a0;
+ (void)_setFakeForceForXCTestEnabled:(char)a0;
+ (void)_setSuppressesDirectTouchRouting:(char)a0;
+ (void)_stopPeriodicEventsForSource:(id)a0;
+ (id)_touchesFromSet:(id)a0 matchingPhase:(unsigned long long)a1 inView:(id)a2 includeResting:(char)a3;
+ (id)addGlobalMonitorForEventsMatchingMask:(unsigned long long)a0 handler:(id /* block */)a1;
+ (id)addLocalMonitorForEventsMatchingMask:(unsigned long long)a0 handler:(id /* block */)a1;
+ (id)addLocalMonitorForEventsMatchingMask:(unsigned long long)a0 placement:(long long)a1 handler:(id /* block */)a2;
+ (id)enterExitEventWithType:(unsigned long long)a0 location:(struct CGPoint { double x0; double x1; })a1 modifierFlags:(unsigned long long)a2 timestamp:(double)a3 windowNumber:(long long)a4 context:(id)a5 eventNumber:(long long)a6 trackingNumber:(long long)a7 userData:(void *)a8;
+ (id)eventWithCGEvent:(struct __CGEvent { } *)a0;
+ (id)eventWithEventRef:(const void *)a0;
+ (id)keyEventWithType:(unsigned long long)a0 location:(struct CGPoint { double x0; double x1; })a1 modifierFlags:(unsigned long long)a2 timestamp:(double)a3 windowNumber:(long long)a4 context:(id)a5 characters:(id)a6 charactersIgnoringModifiers:(id)a7 isARepeat:(char)a8 keyCode:(unsigned short)a9;
+ (id)mouseEventWithType:(unsigned long long)a0 location:(struct CGPoint { double x0; double x1; })a1 modifierFlags:(unsigned long long)a2 timestamp:(double)a3 windowNumber:(long long)a4 context:(id)a5 eventNumber:(long long)a6 clickCount:(long long)a7 pressure:(float)a8;
+ (id)otherEventWithType:(unsigned long long)a0 location:(struct CGPoint { double x0; double x1; })a1 modifierFlags:(unsigned long long)a2 timestamp:(double)a3 windowNumber:(long long)a4 context:(id)a5 subtype:(short)a6 data1:(long long)a7 data2:(long long)a8;
+ (void)removeMonitor:(id)a0;
+ (double)standardMagnificationThreshold;
+ (float)standardRotationThreshold;
+ (void)startPeriodicEventsAfterDelay:(double)a0 withPeriod:(double)a1;
+ (void)stopPeriodicEvents;

- (void)dealloc;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (double)progress;
- (struct { char x0[248]; })_cgsEventRecord;
- (long long)command;
- (char)_isTouchesEnded;
- (id)touchesForView:(id)a0;
- (unsigned long long)_buttonStateBits;
- (unsigned long long)_cgsEventTime;
- (id)_charactersApplyingModifiers:(unsigned long long)a0 carbonModifiers:(unsigned int)a1;
- (id)_commandModifiedCharacters;
- (char)_continuousScroll;
- (id)_currentEventWithLocationInWindow:(struct CGPoint { double x0; double x1; })a0 modifiers:(unsigned long long)a1;
- (id)_eventCancellingTouchIdentities:(id)a0;
- (id)_eventCancellingTouches;
- (double)_eventRecordDelta:(long long)a0;
- (void *)_eventRef;
- (const void *)_eventRefInternal;
- (id)_eventRelativeToViewRoot:(id)a0;
- (id)_eventRelativeToWindow:(id)a0;
- (id)_eventRemovingTouchIdentities:(id)a0;
- (id)_eventWithModifiers:(unsigned long long)a0;
- (id)_eventWithOnlyTouchIdentities:(id)a0;
- (id)_eventWithRetargetedLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_fixCommandAlphaShifts;
- (long long)_gestureAxis;
- (char)_hasAcceleratedScrollingDeltas;
- (char)_hasOptionKeyModifier;
- (id)_initCoalescingTouchEvents:(id)a0;
- (void)_initDigitizerTouchesFromIOHidEvent:(struct __IOHIDEvent { } *)a0 window:(id)a1 windowIsViewBridged:(char)a2 contextID:(long long)a3;
- (void)_initMTTouchesFromIOHidEvent:(struct __IOHIDEvent { } *)a0;
- (id)_initWithCGEvent:(struct __CGEvent { } *)a0 eventRef:(void *)a1;
- (id)_initWithEventRefInternal:(const void *)a0;
- (char)_isCommandPeriod;
- (char)_isDeadkey;
- (char)_isEscapeKeyEvent;
- (char)_isMiddleButtonEvent;
- (char)_isSpaceKeyEvent;
- (char)_isSynthesizedKeyEvent;
- (char)_isUserCancel;
- (char)_isVerticalWheelEvent;
- (char)_isWheelEvent;
- (char)_matchesKeyEquivalent:(id)a0 modifierMask:(unsigned long long)a1;
- (long long)_nxeventTime;
- (void)_postAtStart:(char)a0;
- (void)_postDelayed;
- (void)_postFromSubthread:(char)a0;
- (void)_resetScrollAcceleration;
- (char)_safari_isKeyEvent:(unsigned short)a0;
- (long long)_scrollCount;
- (long long)_scrollPhase;
- (void)_setEventRef:(void *)a0;
- (void)_setSynthesizedKeyEvent:(char)a0;
- (void)_setTouches:(id)a0;
- (id)_touchesMatchingIdentities:(id)a0;
- (id)_touchesMatchingPhase:(unsigned long long)a0 inView:(id)a1 includeResting:(char)a2;
- (void)_trackSwipeEventWithOptions:(unsigned long long)a0 dampenAmountThresholdMin:(double)a1 max:(double)a2 trackingDistance:(double)a3 axis:(long long)a4 velocityFilterClass:(Class)a5 usingHandler:(id /* block */)a6;
- (double)_unacceleratedScrollingDeltaX;
- (double)_unacceleratedScrollingDeltaY;
- (id)_unmodifiedCharacters;
- (struct CGSize { double x0; double x1; })_velocity;
- (id)_viewRoot;
- (id)allTouches;
- (id)charactersByApplyingModifiers:(unsigned long long)a0;
- (id)coalescedTouchesForTouch:(id)a0;
- (double)deviceDeltaX;
- (double)deviceDeltaY;
- (double)deviceDeltaZ;
- (double)gestureAmount;
- (long long)gestureAxis;
- (char)isGesture;
- (id)touchesMatchingPhase:(unsigned long long)a0 inView:(id)a1;
- (void)trackSwipeEventWithOptions:(unsigned long long)a0 dampenAmountThresholdMin:(double)a1 max:(double)a2 usingHandler:(id /* block */)a3;
- (struct CGSize { double x0; double x1; })velocity;

@end
