@class NSViewController, NSDictionary, NSPanel, NSView, NSArray, NSString;

@interface NSSpellChecker : NSObject <NSWindowRestoration> {
    id _guessesBrowser;
    id _wordField;
    id _languagePopUp;
    id _topLevelPanels;
    id _panel;
    id _correctButton;
    id _guessButton;
    id _ignoreButton;
    id _languagesBrowser;
    id _quotesBrowser;
    id _replacementsBrowser;
    id _defineButton;
    struct __scFlags { unsigned char autoShowGuesses : 1; unsigned char needDelayedGuess : 1; unsigned char unignoreInProgress : 1; unsigned char wordFieldEdited : 1; unsigned char inSpelling : 1; unsigned char reconnectSpelling : 1; unsigned char inGrammar : 1; unsigned char reconnectGrammar : 1; unsigned char languageIdentification : 1; unsigned char languagesHidden : 1; unsigned char quotesByLanguage : 1; unsigned char quotesAreCustom : 1; unsigned int _reserved : 20; } _scFlags;
    id _substitutionsPanel;
    id _learnButton;
    id _infoField;
    id _grammarControl;
}

@property (class, readonly) NSSpellChecker *sharedSpellChecker;
@property (class, readonly) char sharedSpellCheckerExists;
@property (class, readonly, getter=isAutomaticTextReplacementEnabled) char automaticTextReplacementEnabled;
@property (class, readonly, getter=isAutomaticSpellingCorrectionEnabled) char automaticSpellingCorrectionEnabled;
@property (class, readonly, getter=isAutomaticQuoteSubstitutionEnabled) char automaticQuoteSubstitutionEnabled;
@property (class, readonly, getter=isAutomaticDashSubstitutionEnabled) char automaticDashSubstitutionEnabled;
@property (class, readonly, getter=isAutomaticCapitalizationEnabled) char automaticCapitalizationEnabled;
@property (class, readonly, getter=isAutomaticPeriodSubstitutionEnabled) char automaticPeriodSubstitutionEnabled;
@property (class, readonly, getter=isAutomaticTextCompletionEnabled) char automaticTextCompletionEnabled;
@property (class, readonly, getter=isAutomaticInlinePredictionEnabled) char automaticInlinePredictionEnabled;

@property (readonly, copy) NSDictionary *userReplacementsDictionary;
@property (readonly) NSPanel *spellingPanel;
@property (retain) NSView *accessoryView;
@property (readonly) NSPanel *substitutionsPanel;
@property (retain) NSViewController *substitutionsPanelAccessoryViewController;
@property (readonly, copy) NSArray *availableLanguages;
@property (readonly, copy) NSArray *userPreferredLanguages;
@property char automaticallyIdentifiesLanguages;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_doubleSpaceReplacementAfterString:(id)a0;
+ (void)_finishRecordingTypingSession;
+ (id)_inputContextHistoryDictionary;
+ (id)_keyEventArray;
+ (id)_keyEventData;
+ (void)_noteInputContextHistory:(id)a0;
+ (void)_noteTextInputContext:(id)a0;
+ (void)_recordAcceptanceType:(id)a0 language:(id)a1 charactersTyped:(unsigned long long)a2 charactersAccepted:(unsigned long long)a3;
+ (void)_recordAutocorrectionEventType:(id)a0 language:(id)a1;
+ (void)_recordKeyDownEvent:(id)a0;
+ (void)_recordTypedWord:(id)a0 misspelled:(char)a1;
+ (char)_shouldPerformDoubleSpaceReplacementAfterString:(id)a0;
+ (char)_shouldRecognizeDoubleSpaceForKeyDownEvent:(id)a0;
+ (char)_shouldRecognizeDoubleSpaceForKeyDownEvent:(id)a0 andKeyDownEvent:(id)a1;
+ (char)_shouldRecognizeDoubleSpaceForKeyDownEvents:(id)a0;
+ (void)_startLoadOfScanner:(id)a0;
+ (id)correctionIndicatorUnderlineColor;
+ (char)grammarCheckingEnabled;
+ (char)isAutomaticGrammarCheckingEnabled;
+ (char)isAutomaticInlineCompletionEnabled;
+ (char)isAutomaticInlinePredictionBeingPresented;
+ (char)isAutomaticTextCompletionCollapsed;
+ (void)notifyInsertText:(id)a0 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
+ (void)notifySetMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
+ (void)restoreWindowWithIdentifier:(id)a0 state:(id)a1 completionHandler:(id /* block */)a2;
+ (long long)uniqueSpellDocumentTag;

- (id)init;
- (id)language;
- (char)setLanguage:(id)a0;
- (void)_normalizeUserDictionary:(id)a0;
- (void)_changeGrammar:(id)a0;
- (void)_initUI;
- (void)_learn:(id)a0;
- (void)_newDictionary:(id)a0;
- (void)_preflightTextCheckingForTypes:(unsigned long long)a0;
- (void)_setPreferredOrthographyIndexes;
- (char)hasLearnedWord:(id)a0;
- (void)_guess:(id)a0;
- (id)_spellingPanelCreatingIfNeeded:(char)a0;
- (void)dismissCorrectionBubbleForView:(id)a0;
- (id)guessesForWord:(id)a0;
- (void)makeCorrectionBubbleKeyForView:(id)a0;
- (void)_activateControl:(id)a0 forResponder:(id)a1 setSelector:(SEL)a2 toggleSelector:(SEL)a3;
- (void)_addCompletionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 replacementString:(id)a1 forRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 currentString:(id)a3 originalRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 completionStringWithSuffix:(id)a5 toResultDictionary:(id)a6;
- (void)_addReplacement:(id)a0;
- (void)_addSpellServer:(id)a0 withName:(id)a1;
- (void)_changeDictionaries:(id)a0;
- (void)_changeLanguage:(id)a0;
- (void)_changeLanguageFromMenu:(id)a0;
- (void)_changeQuotes:(id)a0;
- (void)_changeSubstitutions:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_checkGrammarOfString:(id)a0 startingAt:(long long)a1 language:(id)a2 wrap:(char)a3 inSpellDocumentWithTag:(long long)a4 details:(id *)a5 reconnectOnError:(char)a6;
- (char)_checkSpellingAndGrammarInString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 enclosingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 offset:(unsigned long long)a3 types:(unsigned long long)a4 options:(id)a5 orthography:(id)a6 inSpellDocumentWithTag:(long long)a7 mutableResults:(id)a8 wordCount:(long long *)a9;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_checkSpellingOfString:(id)a0 startingAt:(long long)a1 language:(id)a2 wrap:(char)a3 inSpellDocumentWithTag:(long long)a4 wordCount:(long long *)a5 reconnectOnError:(char)a6;
- (void)_chooseGuess:(id)a0;
- (id)_chosenSpellServer:(char)a0 launchIfNecessary:(char)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_chunkAndCheckGrammarInString:(id)a0 language:(id)a1 usingSpellServer:(id)a2 details:(id *)a3;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_chunkAndFindMisspelledWordInString:(id)a0 language:(id)a1 learnedDictionaries:(id)a2 wordCount:(long long *)a3 usingSpellServer:(id)a4;
- (void)_clearCurrentMarkedTextForClient:(id)a0 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)_clearLastCorrectionPanel;
- (void)_configureLanguages:(id)a0;
- (void)_configureLanguagesInWindow:(id)a0 completionHandler:(id /* block */)a1;
- (void)_configureLanguagesInWindow:(id)a0 editingPopUp:(id)a1 completionHandler:(id /* block */)a2;
- (void)_copyFromMenu:(id)a0;
- (void)_correct:(id)a0;
- (id)_defaultServerURL;
- (void)_define:(id)a0;
- (void)_defineFromMenu:(id)a0;
- (void)_deleteDictionaries:(id)a0;
- (void)_doUpdate:(id)a0;
- (id)_doubleQuoteString;
- (id)_extendedPostEditingResultsForResults:(id)a0 types:(unsigned long long)a1 options:(id)a2;
- (void)_fillLanguagePopUp:(id)a0;
- (char)_fillSpellCheckerPopupButton:(id)a0;
- (void)_findNext:(id)a0;
- (id)_findServerWithSelectedIndex;
- (id)_firstResponderForWindow:(id)a0;
- (void)_forget:(id)a0;
- (void)_getLanguageTitlesArray:(id *)a0 representedObjectsArray:(id *)a1 indexOfSelectedItem:(long long *)a2;
- (void)_getSingleQuotesArray:(id *)a0 indexOfSelectedItem:(long long *)a1 doubleQuotesArray:(id *)a2 indexOfSelectedItem:(long long *)a3;
- (long long)_guessLanguageIndex;
- (void)_hideLanguagePopUp;
- (void)_ignore:(id)a0;
- (char)_inSetupAssistant;
- (char)_inSystemPreferences;
- (long long)_indexOfItemInArray:(id)a0 forLanguage:(id)a1;
- (long long)_indexOfItemInPopUp:(id)a0 forLanguage:(id)a1;
- (long long)_indexOfPopupItemForLanguage:(id)a0;
- (void)_initializeLanguagesArraysAlreadyLockedFromLanguages:(id)a0 baseLanguages:(id)a1 multilingualIndex:(unsigned long long)a2;
- (void)_invalidatePredictionTimer;
- (char)_isValidMarkedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 forClient:(id)a1 currentString:(id)a2;
- (void)_languagePreferencesChanged:(char)a0;
- (id)_languageRepresentedObject;
- (char)_launchSpellChecker:(long long)a0 error:(id *)a1;
- (id)_learnOrForgetOrInvalidate:(long long)a0 word:(id)a1 dictionary:(id)a2 language:(id)a3 ephemeral:(long long)a4;
- (id)_legacyUserReplacementsDictionary;
- (id)_nameOfDictionaryForDocumentTag:(long long)a0;
- (id)_nameOfSupplementalDictionaryCreateIfNecessary:(char)a0;
- (id)_nonIgnoredDetailsForGrammarString:(id)a0 details:(id)a1 inSpellDocumentWithTag:(long long)a2;
- (id)_nonIgnoredGrammarCheckingResultForResult:(id)a0 stringToCheck:(id)a1 offset:(unsigned long long)a2 inSpellDocumentWithTag:(long long)a3;
- (void)_notePostEditingCorrectionsForResults:(id)a0 string:(id)a1 offset:(unsigned long long)a2;
- (void)_openDictionaries:(id)a0;
- (void)_openSystemPreferences:(id)a0;
- (id)_parseLocalRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 offset:(unsigned long long)a1 inString:(id)a2;
- (id)_postEditingGrammarCheckingResultsForString:(id)a0 offset:(unsigned long long)a1 types:(unsigned long long)a2 options:(id)a3 orthography:(id)a4;
- (id)_postEditingResultsFilteredUsingCacheForResults:(id)a0 string:(id)a1 offset:(unsigned long long)a2;
- (void)_predictionTimer:(id)a0;
- (void)_preflightChosenSpellServer;
- (char)_quoteStringsAreCustom;
- (void)_quotesPreferencesChanged;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeFromMarkingPredictionReplacingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 markedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 string:(id)a2 withString:(id)a3 currentString:(id)a4 useReplacementPrefix:(char)a5 andUnmarkText:(char)a6 handleSelectionChange:(char)a7 client:(id)a8;
- (void)_reallyChooseGuess:(id)a0;
- (void)_reallyResetReplacementPreferences;
- (void)_recordResponseForInlinePredictionDictionary:(id)a0;
- (void)_removeReplacement:(id)a0;
- (void)_removeSpellServerWithName:(id)a0;
- (void)_replaceAccessoryView:(id)a0 with:(id)a1 topView:(id)a2;
- (void)_replacementPreferencesChanged;
- (long long)_requestCandidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 offset:(unsigned long long)a1 inString:(id)a2 types:(unsigned long long)a3 options:(id)a4 inSpellDocumentWithTag:(long long)a5 completionHandler:(id /* block */)a6;
- (long long)_requestCheckingAndCandidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 types:(unsigned long long)a2 keyboardLanguage:(id)a3 bundleIdentifier:(id)a4 processID:(int)a5 options:(id)a6 inSpellDocumentWithTag:(long long)a7 completionHandler:(id /* block */)a8;
- (long long)_requestCheckingAndCandidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 types:(unsigned long long)a2 keyboardLanguage:(id)a3 processID:(int)a4 options:(id)a5 inSpellDocumentWithTag:(long long)a6 completionHandler:(id /* block */)a7;
- (long long)_requestCheckingOfString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 types:(unsigned long long)a2 options:(id)a3 inSpellDocumentWithTag:(long long)a4 waitUntilFinished:(char)a5 completionHandler:(id /* block */)a6;
- (void)_resetReplacementPreferences;
- (id)_responder;
- (id)_responderForSubstitutions;
- (void)_retryCandidateOperation:(id)a0;
- (long long)_selectedLanguageIndex;
- (void)_setDoubleQuoteString:(id)a0;
- (void)_setGuessLanguageIndex:(long long)a0;
- (void)_setGuesses:(id)a0;
- (char)_setLanguage:(id)a0;
- (void)_setLanguageRepresentedObject:(id)a0;
- (void)_setLastCorrectionPanelExplicitlyAccepted:(char)a0 rejected:(char)a1;
- (void)_setLastGuess:(id)a0;
- (void)_setSelectedLanguageIndex:(long long)a0;
- (void)_setSelectionString:(id)a0;
- (void)_setSingleQuoteString:(id)a0;
- (void)_setSingleQuotes:(id)a0 doubleQuotes:(id)a1;
- (void)_setSingleQuotes:(id)a0 doubleQuotes:(id)a1 useByLanguage:(id)a2 quotesBrowser:(id)a3 replacementsBrowser:(id)a4 addReplacement:(id)a5 removeReplacement:(id)a6;
- (void)_setTestCorrectionDictionary:(id)a0;
- (char)_shouldWriteLanguageSettingsToDefaults;
- (void)_showInlinePredictionForReplacingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 markedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 string:(id)a2 withString:(id)a3 view:(id)a4 client:(id)a5 lastReplacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a6 completeWordIndexes:(id)a7 resultDictionary:(id)a8 completionHandler:(id /* block */)a9;
- (void)_showLanguagePopUp;
- (id)_singleQuoteString;
- (id)_spellServerWithName:(id)a0;
- (id)_spellServers;
- (void)_startMonitoringKeyEvents;
- (long long)_tagForSelectedItem;
- (id)_textCheckingResultsFromSpellServerData:(id)a0;
- (id)_titleForSelectedItem;
- (void)_updateControl:(id)a0 forResponder:(id)a1 getSelector:(SEL)a2 setSelector:(SEL)a3 toggleSelector:(SEL)a4;
- (void)_updateGrammar;
- (void)_updateSingleQuotes:(id)a0 doubleQuotes:(id)a1 useByLanguage:(id)a2;
- (void)_updateSubstitutions;
- (char)_usePerAppLanguageIdentification;
- (id)_userDictionariesBySettingLanguageDictionaryName:(id)a0 documentDictionaryName:(id)a1;
- (void)_waitForPunctuationForReplacingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 softSpaceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 currentString:(id)a2 view:(id)a3 client:(id)a4;
- (void)_windowDidBecomeVisible:(id)a0;
- (void)_writeReplacementPreferences;
- (long long)adjustOffsetToNextWordBoundaryInString:(id)a0 startingAt:(long long)a1;
- (id)alternativesForPinyinInputString:(id)a0 inSpellDocumentWithTag:(long long)a1;
- (void)awakeFromNib;
- (void)cancelCorrectionBubbleForView:(id)a0;
- (void)cancelCorrectionIndicatorForView:(id)a0;
- (void)cancelSheet:(id)a0;
- (id)candidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 types:(unsigned long long)a2 options:(id)a3 offset:(unsigned long long)a4 orthography:(id)a5 inSpellDocumentWithTag:(long long)a6;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })checkGrammarOfString:(id)a0 startingAt:(long long)a1 language:(id)a2 wrap:(char)a3 inSpellDocumentWithTag:(long long)a4 details:(id *)a5;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })checkGrammarOfString:(id)a0 startingAt:(long long)a1 language:(id)a2 wrap:(char)a3 inSpellDocumentWithTag:(long long)a4 details:(id *)a5 reconnectOnError:(char)a6;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })checkSpellingOfString:(id)a0 startingAt:(long long)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })checkSpellingOfString:(id)a0 startingAt:(long long)a1 language:(id)a2 wrap:(char)a3 inSpellDocumentWithTag:(long long)a4 wordCount:(long long *)a5;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })checkSpellingOfString:(id)a0 startingAt:(long long)a1 language:(id)a2 wrap:(char)a3 inSpellDocumentWithTag:(long long)a4 wordCount:(long long *)a5 reconnectOnError:(char)a6;
- (id)checkString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 types:(unsigned long long)a2 options:(id)a3 inSpellDocumentWithTag:(long long)a4 orthography:(id *)a5 wordCount:(long long *)a6;
- (void)checkTextInDocument:(id)a0;
- (void)checkTextInSelection:(id)a0;
- (void)closeSpellDocumentWithTag:(long long)a0;
- (id)completionCandidateFromCandidates:(id)a0;
- (id)completionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 language:(id)a2 inSpellDocumentWithTag:(long long)a3;
- (id)completionLanguage;
- (id)completionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 language:(id)a2 inSpellDocumentWithTag:(long long)a3;
- (void)confirmSheet:(id)a0;
- (void)considerPostEditingResponse:(long long)a0 toCorrection:(id)a1 forWord:(id)a2 language:(id)a3;
- (char)control:(id)a0 textView:(id)a1 doCommandBySelector:(SEL)a2;
- (void)controlTextDidBeginEditing:(id)a0;
- (void)controlTextDidChange:(id)a0;
- (void)controlTextDidEndEditing:(id)a0;
- (id)correctionForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 language:(id)a2 inSpellDocumentWithTag:(long long)a3;
- (id)correctionIndicatorForView:(id)a0;
- (id)correctionPanelRangesForView:(id)a0;
- (long long)countWordsInString:(id)a0 language:(id)a1;
- (id)createCorrectionPanelForView:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 correctionTag:(long long)a2;
- (id)defaultEmojiReplacementsDictionary;
- (char)deletesAutospaceBeforeString:(id)a0 language:(id)a1;
- (char)deletesAutospaceBetweenString:(id)a0 andString:(id)a1 language:(id)a2;
- (void)dismissAuxiliaryWindows;
- (void)dismissCompletionForView:(id)a0;
- (void)dismissCorrection:(long long)a0 acceptCorrection:(char)a1;
- (void)dismissCorrectionIndicatorForView:(id)a0;
- (void)dismissCorrectionIndicatorUnderlines;
- (void)dismissCorrectionIndicatorUnderlinesForView:(id)a0;
- (void)dismissCorrectionWithTag:(long long)a0 andAccept:(char)a1;
- (void)dismissInlinePrediction;
- (void)forgetWord:(id)a0;
- (void)forgetWord:(id)a0 language:(id)a1;
- (id)guessLanguage;
- (id)guessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 language:(id)a2 inSpellDocumentWithTag:(long long)a3;
- (char)hasCorrectionPanelsForView:(id)a0;
- (void)ignoreWord:(id)a0 inSpellDocumentWithTag:(long long)a1;
- (id)ignoredWordsInSpellDocumentWithTag:(long long)a0;
- (char)insertsAutospaceAfterString:(id)a0 language:(id)a1;
- (char)isAutomaticCapitalizationEnabled;
- (char)isAutomaticDashSubstitutionEnabled;
- (char)isAutomaticInlineCompletionEnabled;
- (char)isAutomaticPeriodSubstitutionEnabled;
- (char)isAutomaticQuoteSubstitutionEnabled;
- (char)isAutomaticSpellingCorrectionEnabled;
- (char)isAutomaticTextCompletionCollapsed;
- (char)isAutomaticTextCompletionEnabled;
- (char)isAutomaticTextReplacementEnabled;
- (char)isSentenceCorrectionWord:(id)a0;
- (id)languageForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 orthography:(id)a2;
- (id)languageMenu;
- (void)learnWord:(id)a0;
- (void)learnWord:(id)a0 language:(id)a1;
- (id)menuForResult:(id)a0 string:(id)a1 options:(id)a2 atLocation:(struct CGPoint { double x0; double x1; })a3 inView:(id)a4;
- (id)nextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 language:(id)a2 inSpellDocumentWithTag:(long long)a3;
- (void)noteSentenceCorrectionResult:(id)a0 grammarResult:(id)a1 inString:(id)a2 offset:(unsigned long long)a3;
- (long long)numberOfRowsInTableView:(id)a0;
- (char)preventsAutocorrectionBeforeString:(id)a0 language:(id)a1;
- (void)recordAcceptedCandidateIndex:(unsigned long long)a0 inCandidates:(id)a1 firstCandidateIsTypedString:(char)a2;
- (void)recordResponse:(long long)a0 toCorrection:(id)a1 forWord:(id)a2 language:(id)a3 inSpellDocumentWithTag:(long long)a4;
- (void)recordResponse:(long long)a0 toCorrection:(id)a1 forWord:(id)a2 language:(id)a3 inSpellDocumentWithTag:(long long)a4 considerPostEditing:(char)a5;
- (void)recordResponse:(unsigned long long)a0 toGrammarDetail:(id)a1 language:(id)a2;
- (void)recordResponse:(unsigned long long)a0 toInlinePrediction:(id)a1 forPrefix:(id)a2 language:(id)a3;
- (void)recordSentenceCorrections:(id)a0;
- (void)removeCorrectionIndicatorUnderlines;
- (void)removeCorrectionIndicatorUnderlinesForView:(id)a0;
- (void)removeCorrectionPanel:(id)a0 forView:(id)a1 correctionTag:(long long)a2;
- (long long)requestCandidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 types:(unsigned long long)a2 options:(id)a3 inSpellDocumentWithTag:(long long)a4 completionHandler:(id /* block */)a5;
- (long long)requestCheckingOfString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 types:(unsigned long long)a2 options:(id)a3 inSpellDocumentWithTag:(long long)a4 completionHandler:(id /* block */)a5;
- (long long)requestGeneratedCandidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 offset:(unsigned long long)a1 inString:(id)a2 types:(unsigned long long)a3 completionHandler:(id /* block */)a4;
- (long long)requestGrammarCheckingOfString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 language:(id)a2 options:(id)a3 completionHandler:(id /* block */)a4;
- (char)result:(id)a0 isSentenceCorrectionInString:(id)a1;
- (void)setAdditionalTextReplacementsDictionary:(id)a0;
- (void)setAutomaticCapitalizationEnabled:(char)a0;
- (void)setAutomaticDashSubstitutionEnabled:(char)a0;
- (void)setAutomaticInlineCompletionEnabled:(char)a0;
- (void)setAutomaticInlinePredictionEnabled:(char)a0;
- (void)setAutomaticPeriodSubstitutionEnabled:(char)a0;
- (void)setAutomaticQuoteSubstitutionEnabled:(char)a0;
- (void)setAutomaticSpellingCorrectionEnabled:(char)a0;
- (void)setAutomaticTextCompletionCollapsed:(char)a0;
- (void)setAutomaticTextCompletionEnabled:(char)a0;
- (void)setAutomaticTextReplacementEnabled:(char)a0;
- (void)setCompletionLanguage:(id)a0;
- (char)setGuessLanguage:(id)a0;
- (void)setIgnoredWords:(id)a0 inSpellDocumentWithTag:(long long)a1;
- (void)setSupplementalWords:(id)a0;
- (void)setWordFieldStringValue:(id)a0;
- (void)setupGuessesBrowser;
- (void)sheetDidEnd:(id)a0 returnCode:(long long)a1;
- (char)shouldPredictAfterDelayForCandidate:(id)a0 replacingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 string:(id)a2 withString:(id)a3 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 view:(id)a5 client:(id)a6;
- (char)shouldShowCorrectionIndicatorUnderlineWithCorrection:(id)a0 forString:(id)a1 language:(id)a2;
- (void)showCompletion:(id)a0 forRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 client:(id)a2 completionHandler:(id /* block */)a3;
- (void)showCompletion:(id)a0 forRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 view:(id)a2 completionHandler:(id /* block */)a3;
- (void)showCompletionForCandidate:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 offset:(unsigned long long)a2 inString:(id)a3 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 view:(id)a5 client:(id)a6 completionHandler:(id /* block */)a7;
- (void)showCompletionForCandidate:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 offset:(unsigned long long)a2 inString:(id)a3 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 view:(id)a5 completionHandler:(id /* block */)a6;
- (long long)showCorrection:(id)a0 forStringInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 view:(id)a3 completionHandler:(id /* block */)a4;
- (long long)showCorrection:(id)a0 forStringInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 view:(id)a2 completionHandler:(id /* block */)a3;
- (void)showCorrectionBubbleOfType:(long long)a0 primaryString:(id)a1 alternativeStrings:(id)a2 forStringInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 view:(id)a4 completionHandler:(id /* block */)a5;
- (void)showCorrectionBubbleOfType:(long long)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 primaryString:(id)a2 alternativeStrings:(id)a3 forStringInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 view:(id)a5 completionHandler:(id /* block */)a6;
- (void)showCorrectionIndicatorOfType:(long long)a0 primaryString:(id)a1 alternativeStrings:(id)a2 forStringInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 view:(id)a4 completionHandler:(id /* block */)a5;
- (void)showCorrectionIndicatorOfType:(long long)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 primaryString:(id)a2 alternativeStrings:(id)a3 forStringInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 view:(id)a5 completionHandler:(id /* block */)a6;
- (void)showCorrectionIndicatorUnderlineForStringInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 view:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)showCorrectionIndicatorWithConfiguration:(id)a0;
- (void)showInlinePredictionForCandidates:(id)a0 client:(id)a1;
- (id)stringForInputString:(id)a0 language:(id)a1 inSpellDocumentWithTag:(long long)a2;
- (id)supplementalWords;
- (char)tableView:(id)a0 acceptDrop:(id)a1 row:(long long)a2 dropOperation:(unsigned long long)a3;
- (char)tableView:(id)a0 canDragRowsWithIndexes:(id)a1 atPoint:(struct CGPoint { double x0; double x1; })a2;
- (id)tableView:(id)a0 objectValueForTableColumn:(id)a1 row:(long long)a2;
- (void)tableView:(id)a0 setObjectValue:(id)a1 forTableColumn:(id)a2 row:(long long)a3;
- (char)tableView:(id)a0 shouldEditTableColumn:(id)a1 row:(long long)a2;
- (unsigned long long)tableView:(id)a0 validateDrop:(id)a1 proposedRow:(long long)a2 proposedDropOperation:(unsigned long long)a3;
- (void)tableView:(id)a0 willDisplayCell:(id)a1 forTableColumn:(id)a2 row:(long long)a3;
- (char)tableView:(id)a0 writeRowsWithIndexes:(id)a1 toPasteboard:(id)a2;
- (void)tableViewSelectionDidChange:(id)a0;
- (void)unlearnWord:(id)a0;
- (void)updateCorrectionIndicatorUnderlineForStringInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 view:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)updateCorrectionPanelForView:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)updateGrammar:(id)a0;
- (void)updatePanels;
- (void)updateSpellingPanelWithGrammarString:(id)a0 detail:(id)a1;
- (void)updateSpellingPanelWithMisspelledWord:(id)a0;
- (void)updateSpellingPanelWithMisspelledWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1;
- (id)userQuotesArrayForLanguage:(id)a0;
- (void)window:(id)a0 didDecodeRestorableState:(id)a1;
- (void)window:(id)a0 willEncodeRestorableState:(id)a1;
- (void)windowDidBecomeKey:(id)a0;
- (char)windowIsSpellingPanel:(id)a0;

@end
