@class NSStackView, NSToolbarPrimaryTitleContainerView, NSButton, NSWindowTitleController, NSToolbarTitleDocumentProxyAcceleratorView, CALayer, CAGradientLayer, NSFont, NSCell, NSString, NSToolbarTitleStackView, NSLayoutConstraint, NSWindow, CABackdropLayer, NSView, NSTextField;

@interface NSToolbarTitleView : NSView <NSToolbarViewLayoutItem> {
    NSWindow *_representedWindow;
    NSWindowTitleController *_titleController;
    unsigned long long _displayMode;
    long long _toolbarStyle;
    NSToolbarTitleStackView *_titleStack;
    NSStackView *_secondaryTitleStack;
    NSToolbarPrimaryTitleContainerView *_primaryTitleContainerView;
    NSToolbarTitleDocumentProxyAcceleratorView *_documentProxyButtonAcceleratorView;
    NSTextField *_subtitleTextField;
    NSTextField *_separatorField;
    NSTextField *_editingStateField;
    CABackdropLayer *_backdropLayer;
    CALayer *_maskLayer;
    CALayer *_solidLayer;
    CAGradientLayer *_gradientLayer;
    NSView *_hiddenFocusedView;
    NSLayoutConstraint *_centerConstraint;
    NSLayoutConstraint *_baselineConstraint;
    NSLayoutConstraint *_leadingConstraint;
    NSLayoutConstraint *_trailingConstraint;
    double _minimumInlineWindowTitleWidth;
    double _leadingTrailingPadding;
    id _proxyIconShiftKeyMonitor;
    id /* block */ _rolloverTimer;
    struct { unsigned char isEditing : 1; unsigned char inRolloverOverlayPosition : 1; unsigned char needsModeConfiguration : 1; } _flags;
}

@property char inRolloverOverlayPosition;
@property (weak) NSWindow *representedWindow;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } titleRect;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } maxTitleRect;
@property (readonly) NSFont *primaryTitleFont;
@property (readonly) NSButton *fileButton;
@property (readonly) NSTextField *titleTextField;
@property (readonly) struct CGSize { double x0; double x1; } expandedOverlaySize;
@property (readonly) NSCell *primaryTitleCell;
@property (readonly) NSCell *subtitleCell;
@property double minimumInlineWindowTitleWidth;
@property (setter=_setNeedsModeConfiguration:) char _needsModeConfiguration;
@property (readonly) char alwaysWantsOverflowTransitions;
@property (readonly) char participatesInOverflow;
@property (readonly) unsigned long long itemPosition;
@property (readonly) struct CGSize { double x0; double x1; } minSize;
@property (readonly) struct CGSize { double x0; double x1; } maxSize;
@property (readonly) char isSpace;
@property (readonly) long long priorityIndex;
@property (readonly) char wantsToBeCentered;
@property (readonly) struct CGSize { double x0; double x1; } preferredSize;
@property (readonly) struct CGSize { double x0; double x1; } contentClippingSize;
@property (readonly) struct CGSize { double x0; double x1; } compressedMinSize;
@property (readonly) double preferredZOrder;
@property (readonly) double preferredTrailingPosition;
@property (readonly) char isTitle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)layout;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)windowWillDrag:(id)a0;
- (void)_accessoryPopoverChangedVisibility;
- (char)_allowToolbarToStealEvent:(id)a0;
- (void)_beginRolloverTimer;
- (void)_beginToolbarEditingMode;
- (void)_cleanupProxyIconShiftKeyMonitorIfNecessary;
- (void)_endToolbarEditingMode;
- (void)_focusRingChanged:(id)a0;
- (char)_focusRingIntersectsTitle;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForGradientLayer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForSolidLayer;
- (void)_hideFocusRingIfNecessary;
- (char)_hitTestSubtitleWithEvent:(id)a0;
- (void)_installMask;
- (void)_layoutProxyAccelerator;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_mouseSensitiveTitleRevealRect;
- (void)_removeMask;
- (void)_removeRolloverTimer;
- (void)_resetRolloverTimer;
- (void)_setTitleController:(id)a0;
- (void)_showFocusRingIfNecessary;
- (void)_updateDocumentProxyAcceleratorWithEvent:(id)a0;
- (void)_updateRolloverWithEvent:(id)a0;
- (void)_updateTitleProperties;
- (void)_windowTitlePropertiesChanged:(id)a0;
- (char)accessibilityIsIgnored;
- (id)accessibilityRoleAttribute;
- (void)configureForLayoutInDisplayMode:(unsigned long long)a0 andSizeMode:(unsigned long long)a1 inToolbarView:(id)a2;
- (void)decrementVisibilityCount;
- (void)endTitleRename;
- (struct CGSize { double x0; double x1; })expandedTitleOnlyOverlaySize;
- (void)hideRollover;
- (void)hideRolloverAnimated:(char)a0;
- (void)incrementVisibilityCount;
- (long long)layerContentsRedrawPolicy;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void)mouseMoved:(id)a0;
- (char)needsExpansion;
- (double)partitionPosition;
- (void)prepareForTitleRename;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })proxyAcceleratorExclusionRect;
- (void)showRollover;
- (void)showRolloverAnimated:(char)a0;
- (void)updateConstraints;
- (void)updateLayer;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)a0;

@end
