@class NSMutableArray, NSString, NSURL, NSArray, NSSet, NSOperationQueue, NSFileVersion, NSMutableSet, NSWindow, NSDocument, NSDocumentRevisionsWindow, _NSDocumentRevisionsCache;

@interface NSDocumentRevisionsController : NSObject <NSFilePresenter> {
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } oldWindowRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } resizedWindowRect;
    unsigned long long oldWindowMask;
    unsigned long long oldWindowCollectionBehavior;
    long long oldWindowLevel;
    char oldIsMovable;
    unsigned long long oldPresentationOptions;
    char windowWasFullScreen;
    unsigned long long fullScreenTileParentSpaceID;
    char windowWasLeftTile;
    unsigned long long oldWMWindowType;
    NSDocument *originalDocument;
    NSWindow *originalDocumentWindow;
    NSWindow *revisionWindow;
    NSArray *inspectorWindows;
    long long windowSheetCount;
    char unfocusOriginalAfterSheet;
    char unfocusRevisionAfterSheet;
    char suppressUnfocusingOriginalAfterSheet;
    char revisionWindowWasKey;
    id starfield;
    NSDocumentRevisionsWindow *window;
    unsigned long long currentStackItemIndex;
    NSArray *otherWindowRestorationBlocks;
    char gotBackupVersions;
    char gotNonLocalVersions;
    NSMutableSet *versionSet;
    char observingRevisions;
    char hasAttemptedAsynchronousLookup;
    id /* block */ cancelAsyncVersionLookupBlock;
    char preloadRevisions;
    NSOperationQueue *asyncDocumentOpeningQueue;
    _NSDocumentRevisionsCache *revisionCache;
    unsigned long long windowFocusState;
    char ending;
    char reverting;
    char preparedForRevert;
    char needToRestoreLiveEnvironment;
    long long outcome;
    unsigned long long options;
    NSFileVersion *revertingToVersion;
    char scheduledCorrectionBlock;
    id /* block */ _eventMonitorUninstaller;
    NSMutableArray *_stackItems;
    NSMutableArray *_transitoryAnimations;
}

@property (readonly, copy) NSURL *presentedItemURL;
@property (readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property (readonly, copy) NSURL *primaryPresentedItemURL;
@property (readonly) NSSet *observedPresentedItemUbiquityAttributes;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)_hideOverlayScrollersForWindow:(id)a0;
+ (id)_descriptionForRevision:(id)a0;
+ (void)_hideOverlayScrollersForView:(id)a0;
+ (void)_setOverlayScrollersHidden:(char)a0 forView:(id)a1;
+ (void)_setOverlayScrollersHidden:(char)a0 forWindow:(id)a1;
+ (id)_windowForDocument:(id)a0;
+ (void)doOrderingWithoutAnimationForWindow:(id)a0 preventScrollerFlashing:(char)a1 withBlock:(id /* block */)a2;
+ (id)sharedController;

- (void).cxx_destruct;
- (id)_presentedItemTemporaryVersionStorageIdentifier;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)presentedItemDidGainVersion:(id)a0;
- (void)presentedItemDidLoseVersion:(id)a0;
- (void)presentedItemDidMoveToURL:(id)a0;
- (void)_evictRevision:(id)a0;
- (char)_windowHasSheet;
- (void)_startObservingSheetsForWindow:(id)a0;
- (void)_unfocusWindow:(id)a0;
- (void)startDownloadingCurrentVersion:(id)a0;
- (void)timelineAction:(id)a0;
- (id)_acquireDocumentForRevision:(id)a0;
- (void)_addRevisionToCache:(id)a0;
- (void)_animateDisplayFadeOut:(char)a0;
- (void)_animateInspectorWindows;
- (void)_appDidDeactivate:(id)a0;
- (void)_appWillTerminate:(id)a0;
- (char)_canDeleteCurrentVersion;
- (char)_canPreloadRevisions;
- (char)_canUnfocusWindow:(id)a0;
- (void)_checkShouldRevertToChosenVersionThenContinue:(id /* block */)a0;
- (void)_cleanupVisualizationState;
- (void)_closeAllRevisionDocuments;
- (void)_closeDrawers;
- (id)_cloudVersionPlaceholderView;
- (id)_currentDocument;
- (id)_currentStackItem;
- (void)_deleteAllVersions;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_destinationFrameForFinishAnimation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_destinationFrameForResizeAfterFinishAnimation;
- (id)_dictionaryForRevision:(id)a0;
- (void)_displayProgressPanelOnWindow:(id)a0 forDownloadingUbiquitousVersion:(id)a1 canceller:(id /* block */ *)a2;
- (void)_doDuplicateRevisionDocument:(id)a0 thenContinue:(id /* block */)a1;
- (void)_endVisualizationAfterDelay;
- (void)_finishedDownloadingNonLocalStackItem:(id)a0;
- (id)_focusAnimationForOriginalWindow:(char)a0 fromState:(int)a1 toState:(int)a2;
- (id)_focusAnimationFromState:(int)a0 toState:(int)a1;
- (void)_focusWindow:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForAnimatingWindowFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toSize:(struct CGSize { double x0; double x1; })a1;
- (void)_handleIntrusion;
- (void)_hideRevisionWindow;
- (void)_insertVersions:(id)a0;
- (id)_inspectorWindows;
- (void)_installEventTap;
- (char)_isKeyWindowAllowed:(id)a0;
- (char)_isWindowFocused:(id)a0;
- (void)_loadDocumentForStackItem:(id)a0 wait:(char)a1 completionBlock:(id /* block */)a2;
- (void)_loadSnapshotForStackItem:(id)a0 forceNew:(char)a1 wait:(char)a2 thenContinue:(id /* block */)a3;
- (unsigned long long)_nextRevisionIndexToPreload:(id)a0;
- (id)_originalDocument;
- (long long)_outcome;
- (void)_performFinishAnimationThenContinue:(id /* block */)a0 thenContinueWhenExited:(id /* block */)a1;
- (void)_performStartAnimation;
- (struct CGSize { double x0; double x1; })_preferredSizeForRevision:(id)a0;
- (void)_preloadNextRevision:(id)a0;
- (void)_preloadRevisionAtIndex:(unsigned long long)a0 thenContinue:(id /* block */)a1;
- (void)_prepareForFinishAnimationWithOutcome:(long long)a0;
- (char)_prepareForStartAnimation;
- (void)_preventWindowCycling;
- (void)_relinquishRevision:(id)a0;
- (void)_requestUIForStackItem:(id)a0 wait:(char)a1 thenContinue:(id /* block */)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_resizedOriginalDocumentWindowFrame;
- (void)_restoreLiveEnvironment;
- (void)_restoreWindowCycling;
- (id)_scheduleTransitoryAnimationOfWindow:(id)a0 startFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 endFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 startSize:(struct CGSize { double x0; double x1; })a3 endSize:(struct CGSize { double x0; double x1; })a4 hop:(char)a5 duration:(double)a6;
- (void)_setDocument:(id)a0 forRevision:(id)a1;
- (void)_setPreferredSize:(struct CGSize { double x0; double x1; })a0 forRevision:(id)a1;
- (void)_sheetDidEnd:(id)a0;
- (void)_sheetWillBegin:(id)a0;
- (char)_shouldHideTimelineForWindowFocusState:(int)a0;
- (void)_showRevisionWindow:(id)a0;
- (struct CGImage { } *)_snapshotForDocument:(id)a0;
- (id)_snapshotOfPlaceholderView:(id)a0;
- (void)_something:(id)a0 didSomethingSoContinue:(void *)a1;
- (id /* block */)_startAsynchronouslyFetchingVersionsForURL:(id)a0;
- (void)_startDownloadingStackItem:(id)a0 completionHandler:(id /* block */)a1;
- (void)_startIntrusionDetection;
- (void)_startObservingRevisions;
- (void)_startObservingWindowClosure;
- (void)_startObservingWindowFrameChanges;
- (void)_startPredownloadingNonLocalVersions;
- (void)_startPreloadingRevisions;
- (void)_startTransitoryAnimationsThenContinue:(id /* block */)a0;
- (void)_stopIntrusionDetection;
- (void)_stopObservingRevisions;
- (void)_stopObservingSheetsForWindow:(id)a0;
- (void)_stopObservingWindowClosure;
- (void)_stopObservingWindowFrameChanges;
- (void)_stopPreloadingRevisions;
- (struct CGImage { } *)_takeSnapshotOfWindow:(id)a0;
- (void)_unfocusWindowAfterSheetIfNecessary:(id)a0;
- (void)_uninstallEventTap;
- (void)_unshiftRevisionWindow;
- (void)_updateRevisionCacheCosts;
- (id)_versionLoadFailedPlaceholderView;
- (id)_versionsForDocument:(id)a0;
- (void)_willEvictRevision:(id)a0;
- (void)_windowDidBecomeKey:(id)a0;
- (void)_windowDidResize:(id)a0;
- (id)_windowForRevision:(id)a0;
- (void)_windowWillClose:(id)a0;
- (void)cacheWillEvictRevision:(id)a0;
- (char)canGoToNextVersion;
- (char)canGoToPreviousVersion;
- (unsigned long long)currentStackItemIndex;
- (void)discardAnyChangesToOldDocument;
- (void)duplicateCurrentRevision;
- (void)endVisualization;
- (void)endVisualizationOfDocument:(id)a0 thenContinue:(id /* block */)a1;
- (void)endVisualizationThenContinue:(id /* block */)a0;
- (void)endVisualizationWithOutcome:(long long)a0 thenContinueAfterAnimation:(id /* block */)a1;
- (void)endVisualizationWithOutcome:(long long)a0 thenContinueAfterAnimation:(id /* block */)a1 thenContinueWhenExited:(id /* block */)a2;
- (void)goToNextVersion:(id)a0;
- (void)goToPreviousVersion:(id)a0;
- (void)goToRevisionDidEnd;
- (void)goToRevisionWillBegin;
- (void)goToStackItemAtIndex:(unsigned long long)a0;
- (char)interceptsWindowClose:(id)a0;
- (char)isVisualizing;
- (char)isVisualizingDocument:(id)a0;
- (id)makeBackstopStackItems;
- (void)revertToCurrentRevision;
- (void)setCurrentStackItemIndex:(unsigned long long)a0;
- (id)stackItems;
- (void)startVisualizationWithDocument:(id)a0 options:(unsigned long long)a1 thenContinue:(id /* block */)a2;
- (void)takeOverWindow:(id)a0 forRevision:(id)a1;

@end
