@class NSWidgetView, NSString, NSPanGestureRecognizer, NSToolbarItem, NSToolbarLabelStack, NSToolbar, NSMutableArray, NSToolbarView, NSMapTable;

@interface NSToolbarItemViewer : NSView <NSGestureRecognizerDelegate, NSToolbarViewLayoutItem> {
    NSToolbarItem *_item;
    NSToolbarView *_toolbarView;
    NSToolbarLabelStack *_labelStack;
    long long _priorityIndex;
    NSMutableArray *_activeConstraints;
    struct CGSize { double width; double height; } _maxViewerSize;
    struct CGSize { double width; double height; } _minViewerSize;
    struct CGSize { double width; double height; } _scalableMinIconSize;
    struct CGSize { double width; double height; } _scalableMaxIconSize;
    double _preferredTrailingPosition;
    double _widthRequiredForLabelLayout;
    NSToolbarView *_savedToolbarView;
    NSToolbarItem *_savedItem;
    NSToolbar *_savedToolbar;
    NSWidgetView *_selectionWidget;
    NSMutableArray *_hiddenItemDecorationViews;
    NSPanGestureRecognizer *_panGR;
    NSMapTable *_toolTipsToItems;
    struct { unsigned char drawsIconPart : 1; unsigned char drawsLabelPart : 1; unsigned char iconAreaIncludesLabelArea : 1; unsigned char labelOnlyShowsAsPopupMenu : 1; unsigned char needsModeConfiguration : 1; unsigned char inPaletteView : 1; unsigned char returnFocusToWindowAfterClick : 1; unsigned char needsInitialAutovalidation : 1; unsigned char accessibilityAddedDescriptionToSubelements : 1; unsigned char configuringForLayout : 1; unsigned char needsPreferredTrailingPositionUpdate : 1; unsigned char pressed : 1; unsigned char rollover : 1; unsigned char needsViewerSizeUpdate : 1; unsigned char wantsToBeCentered : 1; unsigned char needsToolTipUpdate : 1; unsigned char inEditingMode : 1; } _tbivFlags;
}

@property long long priorityIndex;
@property (readonly) NSToolbarItem *item;
@property char transparentBackground;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (setter=_setNeedsModeConfiguration:) char _needsModeConfiguration;
@property (readonly) char alwaysWantsOverflowTransitions;
@property (readonly) char participatesInOverflow;
@property (readonly) unsigned long long itemPosition;
@property (readonly) struct CGSize { double x0; double x1; } minSize;
@property (readonly) struct CGSize { double x0; double x1; } maxSize;
@property (readonly) char isSpace;
@property (readonly) char wantsToBeCentered;
@property (readonly) struct CGSize { double x0; double x1; } preferredSize;
@property (readonly) struct CGSize { double x0; double x1; } contentClippingSize;
@property (readonly) struct CGSize { double x0; double x1; } compressedMinSize;
@property (readonly) double preferredZOrder;
@property (readonly) double preferredTrailingPosition;
@property (readonly) char isTitle;

- (void)dealloc;
- (char)respondsToSelector:(SEL)a0;
- (void).cxx_destruct;
- (void)layout;
- (id)accessibilityActionDescription:(id)a0;
- (void)setFrameOrigin:(struct CGPoint { double x0; double x1; })a0;
- (char)element:(id)a0 hasOverriddenAttribute:(id)a1;
- (struct CGSize { double x0; double x1; })sizeThatFitsProposedLayoutSize:(struct CGSize { double x0; double x1; })a0;
- (void)_accessibilityConfigureToolbarItem;
- (void)_accessibilityConfigureViewItemToolbarItem;
- (char)_accessibilityIsCommonToolbarButtonItem;
- (char)_accessibilityIsInCustomizationSheet;
- (char)_accessibilityIsSpaceOrSeparatorItem;
- (id)_accessibilityLabelElements;
- (void)_accessibilityOptionsChanged;
- (id)_accessibilityParentAdjustedFocusedUIElement:(id)a0;
- (id)_accessibilityParentAdjustedHitTestElement:(id)a0 atLocation:(id)a1;
- (void)_accessibilityShowMenu:(id)a0;
- (id)_accessibilityTitleElement;
- (id)_accessibilityToolbarItemLabel;
- (id)_accessibilityToolbarItemLabelAtIndex:(unsigned long long)a0;
- (long long)_accessibilityToolbarItemViewerConfiguration;
- (Class)_accessibilityToolbarItemViewerHelperClass;
- (char)_accessibilityTreatButtonAsToolbarButton:(id)a0;
- (char)_accessibilityTreatSegmentedControlAsToolbarButtons:(id)a0;
- (void)_beginToolbarEditingMode;
- (void)_endToolbarEditingMode;
- (char)_hasDescriptionForElement:(id)a0;
- (void)_intrinsicContentSizeInvalidatedForChildView:(id)a0;
- (void)_layoutSubtreeWithOldSize:(struct CGSize { double x0; double x1; })a0;
- (char)_needsLayoutEngine;
- (void)_setLayoutEngine:(id)a0;
- (id)_toolbarView;
- (void)_windowChangedKeyState;
- (char)acceptsFirstMouse:(id)a0;
- (char)acceptsFirstResponder;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityDescriptionAttribute;
- (id)accessibilityEnabledAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)accessibilityIdentifierAttribute;
- (char)accessibilityIsDescriptionAttributeSettable;
- (char)accessibilityIsEnabledAttributeSettable;
- (char)accessibilityIsFocusedAttributeSettable;
- (char)accessibilityIsIgnored;
- (char)accessibilityIsTitleAttributeSettable;
- (char)accessibilityIsValueAttributeSettable;
- (void)accessibilityPerformAction:(id)a0;
- (void)accessibilityPopUpMenuCreated:(id)a0 forSubview:(id)a1 returningAccessibilityParent:(id *)a2;
- (id)accessibilityRoleAttribute;
- (void)accessibilitySetFocusedAttribute:(id)a0;
- (id)accessibilityTitleAttribute;
- (id)accessibilityValueAttribute;
- (double)additionalWidthRequiredForProposedLayoutSize:(struct CGSize { double x0; double x1; })a0;
- (char)becomeFirstResponder;
- (void)configureForLayoutInDisplayMode:(unsigned long long)a0 andSizeMode:(unsigned long long)a1 inToolbarView:(id)a2;
- (void)constraintsDidChangeInEngine:(id)a0;
- (id)declaredLayoutConstraints;
- (void)decrementVisibilityCount;
- (void)drawFocusRingMask;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBounds;
- (char)gestureRecognizer:(id)a0 shouldAttemptToRecognizeWithEvent:(id)a1;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (void)incrementVisibilityCount;
- (id)initWithItem:(id)a0 forToolbarView:(id)a1;
- (void)mouseDown:(id)a0;
- (char)mouseDownCanMoveWindow;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void)mouseMoved:(id)a0;
- (void)mouseUp:(id)a0;
- (void)moveLeft:(id)a0;
- (void)moveRight:(id)a0;
- (char)needsPanelToBecomeKey;
- (void)pan:(id)a0;
- (char)resignFirstResponder;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setNeedsDisplay:(char)a0;
- (void)updateLayer;
- (id)view:(id)a0 stringForToolTip:(long long)a1 point:(struct CGPoint { double x0; double x1; })a2 userData:(void *)a3;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)viewWillDraw;

@end
