@class NSISVariable, NSString, NSView, NSLayoutYAxisAnchor, NSLayoutDimension, NSLayoutXAxisAnchor;

@interface NSLayoutGuide : NSObject <NSLayoutSpacingItem, NSCoding, NSUserInterfaceItemIdentification> {
    id _owningView;
    NSString *_identifier;
    NSISVariable *_minYVariable;
    NSISVariable *_minXVariable;
    NSISVariable *_widthVariable;
    NSISVariable *_heightVariable;
    NSLayoutXAxisAnchor *_left;
    NSLayoutXAxisAnchor *_right;
    NSLayoutXAxisAnchor *_leading;
    NSLayoutXAxisAnchor *_trailing;
    NSLayoutYAxisAnchor *_top;
    NSLayoutYAxisAnchor *_bottom;
    NSLayoutDimension *_width;
    NSLayoutDimension *_height;
    NSLayoutXAxisAnchor *_centerX;
    NSLayoutYAxisAnchor *_centerY;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _internalFrame;
    long long _piercingToken;
    id _systemConstraints;
    unsigned char _shouldBeArchived : 1;
    unsigned char _frameNeedsUpdate : 1;
    unsigned char _frameIsObserved : 1;
    unsigned char _lockedToOwner : 1;
    unsigned char _internalFrameDiverged : 1;
    unsigned int _reservedFlags : 27;
}

@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (weak) NSView *owningView;
@property (copy) NSString *identifier;
@property (readonly) NSLayoutXAxisAnchor *leadingAnchor;
@property (readonly) NSLayoutXAxisAnchor *trailingAnchor;
@property (readonly) NSLayoutXAxisAnchor *leftAnchor;
@property (readonly) NSLayoutXAxisAnchor *rightAnchor;
@property (readonly) NSLayoutYAxisAnchor *topAnchor;
@property (readonly) NSLayoutYAxisAnchor *bottomAnchor;
@property (readonly) NSLayoutDimension *widthAnchor;
@property (readonly) NSLayoutDimension *heightAnchor;
@property (readonly) NSLayoutXAxisAnchor *centerXAnchor;
@property (readonly) NSLayoutYAxisAnchor *centerYAnchor;
@property (readonly) char hasAmbiguousLayout;

+ (void)_allowingStaleFramesPerformBlock:(id /* block */)a0;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setObservationInfo:(void *)a0;
- (id)height;
- (id)width;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_alignmentFrame;
- (id)_heightVariable;
- (id)centerY;
- (id)leading;
- (char)nsis_shouldIntegralizeVariable:(id)a0;
- (id)nsli_layoutRect;
- (id)top;
- (void)_discardEngine:(id)a0;
- (id)centerX;
- (char)nsli_descriptionIncludesPointer;
- (void)_didMoveFromLayoutEngine:(id)a0 toEngine:(id)a1;
- (id)_minXVariable;
- (id)_minYVariable;
- (id)_referencingConstraints;
- (void)_snipReferencingConstraints;
- (void)_updateFrameIfNeeded;
- (void)_updateInternalFrameIfNeeded;
- (id)_widthVariable;
- (char)allowsNegativeSize;
- (id)bottom;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (id)constraintsAffectingLayoutForOrientation:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toView:(id)a1;
- (id)initAllowingNegativeSize;
- (char)isLockedToOwningView;
- (id)layoutRect;
- (id)left;
- (id)ns_containerWidgetType;
- (id)ns_widgetType;
- (id)nsis_descriptionOfVariable:(id)a0;
- (int)nsis_orientationHintForVariable:(id)a0;
- (void)nsis_valueOfVariable:(id)a0 didChangeInEngine:(id)a1;
- (char)nsis_valueOfVariableIsUserObservable:(id)a0;
- (void)nsli_addConstraint:(id)a0;
- (id)nsli_ancestorSharedWithItem:(id)a0;
- (unsigned long long)nsli_autoresizingMask;
- (id)nsli_boundsHeightVariable;
- (id)nsli_boundsWidthVariable;
- (id)nsli_constraintWithAnchor:(id)a0 relatedBy:(long long)a1 toAnchor:(id)a2 withSystemSpacingMultipliedBy:(double)a3;
- (struct CGSize { double x0; double x1; })nsli_convertSizeFromEngineSpace:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })nsli_convertSizeToEngineSpace:(struct CGSize { double x0; double x1; })a0;
- (char)nsli_defaultResolvedValue:(double *)a0 forSymbolicConstant:(id)a1 inConstraint:(id)a2 error:(id *)a3;
- (id)nsli_description;
- (id)nsli_heightVariable;
- (id)nsli_installedConstraints;
- (char)nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:(id)a0;
- (char)nsli_isFlipped;
- (char)nsli_isRTL;
- (id)nsli_itemDescribingLayoutDirectionForConstraint:(id)a0 toItem:(id)a1;
- (id)nsli_layoutEngine;
- (char)nsli_lowerAttribute:(int)a0 intoExpression:(id)a1 withCoefficient:(double)a2 container:(id)a3;
- (char)nsli_lowerAttribute:(int)a0 intoExpression:(id)a1 withCoefficient:(double)a2 forConstraint:(id)a3;
- (char)nsli_lowersExpressionRelativeToConstraintContainer;
- (double)nsli_marginOffsetForAttribute:(long long)a0;
- (id)nsli_minXVariable;
- (id)nsli_minYVariable;
- (unsigned long long)nsli_piercingToken;
- (char)nsli_removeConstraint:(id)a0;
- (char)nsli_resolvedValue:(double *)a0 forSymbolicConstant:(id)a1 inConstraint:(id)a2 error:(id *)a3;
- (void)nsli_setPiercingToken:(unsigned long long)a0;
- (id)nsli_superitem;
- (id)nsli_widthVariable;
- (void)removeFromOwningView;
- (id)right;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setLockedToOwningView:(char)a0;
- (void)setShouldBeArchived:(char)a0;
- (void)setSystemConstraints:(id)a0;
- (char)shouldBeArchived;
- (id)systemConstraints;
- (id)trailing;

@end
