@class NSMutableDictionary, NSData, NSColorSpace, NSMutableData, NSMutableArray;
@protocol NSObject;

@interface NSBitmapImageRep : NSImageRep <NSSecureCoding> {
    unsigned int _bytesPerRow;
    struct { unsigned char bitsPerPixel : 8; unsigned char isPlanar : 1; unsigned char explicitPlanes : 1; unsigned char imageSourceIsIndexed : 1; unsigned char dataLoaded : 1; unsigned char colorModel : 4; unsigned char tierTwoInfoIsLoaded : 1; unsigned char respectO : 1; unsigned short compressionFactor : 14; unsigned char imageNumber : 8; unsigned char bitmapFormat : 3; unsigned char cgImageIsPrimary : 1; unsigned int compression : 20; } _moreRepFlags;
    NSMutableData *_mutableDataBacking;
    NSMutableArray *_previousMutableDataBackings;
    NSMutableDictionary *_properties;
    NSData *_tiffData;
}

@property (class, readonly) char supportsSecureCoding;

@property (retain, setter=_setBacking:) id<NSObject> _backing;
@property (readonly) char *bitmapData;
@property (readonly, getter=isPlanar) char planar;
@property (readonly) long long samplesPerPixel;
@property (readonly) long long bitsPerPixel;
@property (readonly) long long bytesPerRow;
@property (readonly) long long bytesPerPlane;
@property (readonly) long long numberOfPlanes;
@property (readonly) unsigned long long bitmapFormat;
@property (readonly, copy) NSData *TIFFRepresentation;
@property (readonly) struct CGImage { } *CGImage;
@property (readonly) NSColorSpace *colorSpace;

+ (void)initialize;
+ (id)TIFFRepresentationOfImageRepsInArray:(id)a0 usingCompression:(unsigned long long)a1 factor:(float)a2;
+ (id)_imageRepsWithData:(id)a0 hfsFileType:(id)a1 extension:(id)a2 expandImageContentNow:(char)a3;
+ (char)currentThreadRespectOrientation;
+ (id)TIFFRepresentationOfImageRepsInArray:(id)a0;
+ (id)_imageRepWithData:(id)a0 hfsFileType:(id)a1 extension:(id)a2;
+ (id)_imagesFromIcon:(id)a0 inApp:(id)a1 zone:(struct _NSZone { } *)a2;
+ (id)_imagesFromURL:(id)a0 forImage:(id)a1 fileType:(id)a2 extension:(id)a3;
+ (id)_imagesWithData:(id)a0 hfsFileType:(id)a1 extension:(id)a2 zone:(struct _NSZone { } *)a3 expandImageContentNow:(char)a4;
+ (id)_imagesWithData:(id)a0 hfsFileType:(id)a1 extension:(id)a2 zone:(struct _NSZone { } *)a3 expandImageContentNow:(char)a4 includeAllReps:(char)a5;
+ (char)canInitWithData:(id)a0;
+ (char)defaultRespectOrientation;
+ (void)getTIFFCompressionTypes:(const unsigned long long **)a0 count:(long long *)a1;
+ (id)imageRepWithData:(id)a0;
+ (id)imageRepsWithData:(id)a0;
+ (id)imageUnfilteredFileTypes;
+ (id)imageUnfilteredPasteboardTypes;
+ (id)imageUnfilteredTypes;
+ (id)localizedNameForTIFFCompressionType:(unsigned long long)a0;
+ (id)representationOfImageRepsInArray:(id)a0 usingType:(unsigned long long)a1 properties:(id)a2;
+ (void)setDefaultRespectOrientation:(char)a0;
+ (void)withCurrentThreadRespectingOrientation:(char)a0 performBlock:(id /* block */)a1;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (id)init;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)initWithData:(id)a0;
- (void)setSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGImage { } *)CGImageForProposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 context:(id)a1 hints:(id)a2;
- (void)_setCGImageRef:(struct CGImage { } *)a0;
- (struct CGImage { } *)_getCGImageRefCreateIfNecessary;
- (id)TIFFRepresentationUsingCompression:(unsigned long long)a0 factor:(float)a1;
- (void)getPixel:(unsigned long long *)a0 atX:(long long)a1 y:(long long)a2;
- (void)setColor:(id)a0 atX:(long long)a1 y:(long long)a2;
- (void)setPixel:(unsigned long long *)a0 atX:(long long)a1 y:(long long)a2;
- (struct CGImage { } *)_CGImageRef;
- (struct CGImage { } *)_acquireRetainedCGImageRef;
- (void)_becomeBackedByCGImage:(struct CGImage { } *)a0;
- (unsigned long long)_bitmapFormat;
- (void)_bitmapImageRep_setColorSpaceName:(id)a0;
- (id)_bitmapImageReps;
- (void)_captureDrawing:(id /* block */)a0;
- (long long)_colorSpaceModel;
- (void)_fromCGImage:(struct CGImage { } *)a0 performBlockUsingMutableData:(id /* block */)a1;
- (long long)_imageNumber;
- (id)_initWithImageSource:(void *)a0 imageNumber:(long long)a1 properties:(struct __CFDictionary { } *)a2;
- (char)_isValid;
- (char)_loadTierOneInfoWithCGImage:(struct CGImage { } *)a0;
- (char)_loadTierOneInfoWithImageSource:(struct CGImageSource { } *)a0 imageNumber:(long long)a1 properties:(struct __CFDictionary { } *)a2;
- (char)_loadTierTwoInfoIfNotYetLoaded;
- (void)_loadTierTwoInfoWithCGImage:(struct CGImage { } *)a0;
- (long long)_numberOfColorComponentsNotIncludingAlpha;
- (void)_performBlockUsingBacking:(id /* block */)a0;
- (void)_performBlockUsingBackingCGImage:(id /* block */)a0;
- (void)_performBlockUsingBackingMutableData:(id /* block */)a0;
- (void)_retagBackingWithColorSpace:(id)a0;
- (void)_setImageNumber:(long long)a0;
- (void)_setSharedIdentifier:(long long)a0;
- (long long)_uncachedSize;
- (char)_wantsToBeCached;
- (void)_withoutChangingBackingPerformBlockUsingBackingCGImage:(id /* block */)a0;
- (void)_withoutChangingBackingPerformBlockUsingBackingMutableData:(id /* block */)a0;
- (id)bitmapImageRepByConvertingToColorSpace:(id)a0 renderingIntent:(long long)a1;
- (id)bitmapImageRepByRetaggingWithColorSpace:(id)a0;
- (char)canBeCompressedUsing:(unsigned long long)a0;
- (id)colorAtX:(long long)a0 y:(long long)a1;
- (id)colorSpaceName;
- (void)colorizeByMappingGray:(double)a0 toColor:(id)a1 blackMapping:(id)a2 whiteMapping:(id)a3;
- (char)draw;
- (void)getBitmapDataPlanes:(char **)a0;
- (void)getCompression:(unsigned long long *)a0 factor:(float *)a1;
- (long long)incrementalLoadFromData:(id)a0 complete:(char)a1;
- (id)initForIncrementalLoad;
- (id)initWithBitmapDataPlanes:(char **)a0 pixelsWide:(long long)a1 pixelsHigh:(long long)a2 bitsPerSample:(long long)a3 samplesPerPixel:(long long)a4 hasAlpha:(char)a5 isPlanar:(char)a6 colorSpaceName:(id)a7 bitmapFormat:(unsigned long long)a8 bytesPerRow:(long long)a9 bitsPerPixel:(long long)a10;
- (id)initWithBitmapDataPlanes:(char **)a0 pixelsWide:(long long)a1 pixelsHigh:(long long)a2 bitsPerSample:(long long)a3 samplesPerPixel:(long long)a4 hasAlpha:(char)a5 isPlanar:(char)a6 colorSpaceName:(id)a7 bytesPerRow:(long long)a8 bitsPerPixel:(long long)a9;
- (id)initWithCGImage:(struct CGImage { } *)a0;
- (id)initWithCIImage:(id)a0;
- (id)initWithFocusedViewRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)representationUsingType:(unsigned long long)a0 properties:(id)a1;
- (char)respectOrientation;
- (void)setColorSpaceName:(id)a0;
- (void)setCompression:(unsigned long long)a0 factor:(float)a1;
- (void)setProperty:(id)a0 withValue:(id)a1;
- (void)setRespectOrientation:(char)a0;
- (id)valueForProperty:(id)a0;

@end
