@class _NSScreenSharedInfo, NSArray, NSString, NSDictionary, NSColorSpace, NSCGSDisplay;
@protocol _NSDisplayLinkInfoProvider;

@interface NSScreen : NSObject <_NSDisplayLinkInfoProvider> {
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frame;
    int _depth;
    NSCGSDisplay *_display;
    _NSScreenSharedInfo *_sharedInfo;
    NSColorSpace *_colorSpace;
    NSString *_UUIDString;
    int _displayID;
}

@property (class, setter=_setFallbackBackingScaleFactor:) double _fallbackBackingScaleFactor;
@property (class, readonly) unsigned long long _displayChangeSeed;
@property (class, readonly, copy) NSArray *screens;
@property (class, readonly) NSScreen *mainScreen;
@property (class, readonly) NSScreen *deepestScreen;
@property (class, readonly) char screensHaveSeparateSpaces;

@property (readonly) id<_NSDisplayLinkInfoProvider> _parentDisplayLinkInfoProvider;
@property (readonly) char _shouldPauseDisplayLink;
@property (readonly) int _displayIDForDisplayLink;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) double _restingMenuBarHeight;
@property (readonly) double _revealedMenuBarHeight;
@property (readonly) double _layoutMenuBarHeight;
@property (readonly) double _layoutForcingRevealedMenuBarHeight;
@property (readonly, copy) NSString *_hwModel;
@property (readonly, copy) NSString *_UUIDString;
@property (readonly) int _displayID;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _layoutFrame;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _dockRect;
@property (readonly) char _dockHidden;
@property (readonly) long long _dockOrientation;
@property (readonly) long long maximumFramesPerSecond;
@property (readonly) double minimumRefreshInterval;
@property (readonly) double maximumRefreshInterval;
@property (readonly) double displayUpdateGranularity;
@property (readonly) double lastDisplayUpdateTimestamp;
@property (readonly) double maximumExtendedDynamicRangeColorComponentValue;
@property (readonly) double maximumPotentialExtendedDynamicRangeColorComponentValue;
@property (readonly) double maximumReferenceExtendedDynamicRangeColorComponentValue;
@property (readonly) long long maximumFramesPerSecond;
@property (readonly) double minimumRefreshInterval;
@property (readonly) double maximumRefreshInterval;
@property (readonly) double displayUpdateGranularity;
@property (readonly) double lastDisplayUpdateTimestamp;
@property (readonly) double maximumExtendedDynamicRangeColorComponentValue;
@property (readonly) double maximumPotentialExtendedDynamicRangeColorComponentValue;
@property (readonly) double maximumReferenceExtendedDynamicRangeColorComponentValue;
@property (readonly) int depth;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } visibleFrame;
@property (readonly, copy) NSDictionary *deviceDescription;
@property (readonly) NSColorSpace *colorSpace;
@property (readonly) const int *supportedWindowDepths;
@property (readonly) double backingScaleFactor;
@property (readonly, copy) NSString *localizedName;
@property (readonly) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } safeAreaInsets;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } auxiliaryTopLeftArea;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } auxiliaryTopRightArea;

+ (id)_screenAtPoint:(struct CGPoint { double x0; double x1; })a0;
+ (double)_backingScaleFactorForScreen:(id)a0;
+ (char)_captureAllScreens:(id *)a0;
+ (struct CGPoint { double x0; double x1; })_cgScreenPointForPoint:(struct CGPoint { double x0; double x1; })a0;
+ (id)_localizedNamesForDisplayIDs:(id)a0;
+ (char)_releaseAllCapturedScreens:(id *)a0;
+ (id)_screenForScreenNumber:(long long)a0;
+ (id)_screenForUUIDString:(id)a0;
+ (int)_shieldingWindowLevel;
+ (char)_spacePerDisplay;
+ (id)_zeroScreen;
+ (double)_zeroScreenHeight;
+ (char)_zeroScreenIsNew;

- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (id)_currentSetting;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_layoutFrameForSafeVisibleFrame;
- (id)displayLinkWithTarget:(id)a0 selector:(SEL)a1;
- (char)_hasStageFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (char)_isActiveScreen;
- (id)_availableSettings;
- (id)_bestSettingSimilarToSetting:(id)a0 exactMatch:(char *)a1;
- (id)_bestSettingWithBitsPerPixel:(int)a0 width:(int)a1 height:(int)a2 exactMatch:(char *)a3;
- (id)_bestSettingWithBitsPerPixel:(int)a0 width:(int)a1 height:(int)a2 refreshRate:(double)a3 exactMatch:(char *)a4;
- (char)_capture:(id *)a0;
- (id)_copy;
- (unsigned long long)_currentSpace;
- (char)_hasMenuBar:(char *)a0;
- (id)_initWithDisplay:(id)a0 sharedInfo:(id)a1;
- (char)_isCaptured;
- (char)_isZeroScreen;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_notchFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_notchFrameForSpace:(unsigned long long)a0;
- (char)_releaseCapture:(id *)a0;
- (struct CGSize { double x0; double x1; })_resolution;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_safeAreaFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_safeVisibleFrame;
- (long long)_screenNumber;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_stageFrame;
- (unsigned long long)_stageStyle;
- (char)_switchToSetting:(id)a0 error:(id *)a1;
- (void)_updateWithDisplay:(id)a0 sharedInfo:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })backingAlignedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(unsigned long long)a1;
- (id)bezelPath;
- (char)canRepresentDisplayGamut:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromBacking:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToBacking:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })devicePixelCounts;
- (id)displayLink1WithHandler:(id /* block */)a0;
- (id)displayLink1WithTarget:(id)a0 selector:(SEL)a1;
- (id)displayLinkWithHandler:(id /* block */)a0;
- (id)imageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)imageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 underWindow:(id)a1;
- (double)userSpaceScaleFactor;

@end
