@class NSView, NSString, NSImageSymbolConfiguration, NSSymbolContentTransition, NSAttributedString, NSFont, NSUserInterfaceCompressionOptions, NSColor, NSImage, NSObject, _NSButtonCellAux;
@protocol NSButtonVisualProvider, NSControlStateContentStyle;

@interface NSButtonCell : NSActionCell <_NSAcceleratorCell> {
    unsigned short _periodicDelay;
    unsigned short _periodicInterval;
    NSString *_altContents;
    NSString *_keyEquivalent;
    struct __BCFlags2 { unsigned char _legacyBezelStyle : 3; unsigned char showsBorderOnlyWhileMouseInside : 1; unsigned char mouseInside : 1; unsigned char _legacyBezelStyle2 : 1; unsigned char imageScaling : 2; unsigned int keyEquivalentModifierMask : 24; } _bcFlags2;
    struct __BCFlags { unsigned char __reserved : 1; unsigned char calculatingPreferredAppearance : 1; unsigned char alwaysRadioExclusive : 1; unsigned char leadingOrTrailing : 1; unsigned char __reserved3 : 1; unsigned char imageHugsTitle : 1; unsigned char __reserved2 : 1; unsigned char isDrawingFocus : 1; unsigned char useButtonImageSource : 1; unsigned char hasTitleTextField : 1; unsigned char isDrawingDisclosure : 1; unsigned char suppressAXValueChangeNote : 1; unsigned char doesNotDimImage : 1; unsigned char inset : 2; unsigned char transparent : 1; unsigned char inIntermediateDisclosure : 1; unsigned char __reserved4 : 2; unsigned char imageAndText : 1; unsigned char bottomOrLeft : 1; unsigned char horizontal : 1; unsigned char imageOverlaps : 1; unsigned char bordered : 1; unsigned char drawing : 1; unsigned char lightByGray : 1; unsigned char lightByBackground : 1; unsigned char lightByContents : 1; unsigned char changeGray : 1; unsigned char changeBackground : 1; unsigned char changeContents : 1; unsigned char pushIn : 1; } _bcFlags;
    NSImage *_normalImage;
    id _alternateImageOrKeyEquivalentFont;
    unsigned long long _bezelStyle;
    unsigned long long _buttonType;
    long long _resolvedButtonStyle;
    _NSButtonCellAux *_buttonCellAuxStorage;
    NSImageSymbolConfiguration *_symbolConfiguration;
    id<NSButtonVisualProvider> _visualProvider;
    unsigned char _usesContentView : 1;
    unsigned char _inFunctionRow : 1;
    unsigned char _inMetricsAppearance : 1;
    unsigned char _subclassWantsTemplateStylingSPI : 1;
}

@property (class, readonly) char _wrapFlexibleButtonText;

@property (retain, setter=_setImageWithMinimalSideEffects:) NSImage *_imageWithMinimalSideEffects;
@property (retain, setter=_setAlternateImageWithMinimalSideEffects:) NSImage *_alternateImageWithMinimalSideEffects;
@property (copy, setter=_setTitleWithMinimalSideEffects:) NSString *_titleWithMinimalSideEffects;
@property (copy, setter=_setAttributedTitleWithMinimalSideEffects:) NSAttributedString *_attributedTitleWithMinimalSideEffects;
@property (copy, setter=_setAlternateTitleWithMinimalSideEffects:) NSString *_alternateTitleWithMinimalSideEffects;
@property (copy, setter=_setAttributedAlternateTitleWithMinimalSideEffects:) NSAttributedString *_attributedAlternateTitleWithMinimalSideEffects;
@property unsigned long long gradientType;
@property (retain) NSFont *keyEquivalentFont;
@property (copy, setter=_setAltContents:) id _altContents;
@property (retain, setter=_setVisualProvider:) id<NSButtonVisualProvider> _visualProvider;
@property (readonly) id<NSButtonVisualProvider> _visualProviderIfExists;
@property (readonly) long long _resolvedButtonStyle;
@property (readonly) NSAttributedString *_displayedAttributedTitle;
@property (setter=_setMaximumNumberOfLines:) long long _maximumNumberOfLines;
@property (readonly) NSView *_internalImageView;
@property (readonly) NSView *_backgroundView;
@property char imageHugsTitle;
@property (readonly) NSSymbolContentTransition *defaultSymbolContentTransition;
@property (copy, setter=_setSymbolConfiguration:) NSImageSymbolConfiguration *_symbolConfiguration;
@property (readonly) NSImage *_resolvedImage;
@property (setter=_setAlwaysEnablesRadioButtonExclusivity:) char _alwaysEnablesRadioButtonExclusivity;
@property (setter=_setShowsDisclosureChevron:) char _showsDisclosureChevron;
@property (setter=_setShowsProgressIndicator:) char _showsProgressIndicator;
@property (getter=isSpringLoaded) char springLoaded;
@property (getter=isSpringLoadingEmphasized) char springLoadingEmphasized;
@property (readonly, getter=_isAnyAcceleratorButton) char _isAnyAcceleratorButton;
@property (readonly, getter=_isMultiLevelAcceleratorButton) char _multiLevelAcceleratorButton;
@property (readonly) char _wantsMultilineLayout;
@property (readonly) char _inToolbar;
@property (setter=_setToolbarAppearance:) long long _toolbarAppearance;
@property (readonly) char _shouldDrawWithRollover;
@property (setter=_setMouseInside:) char _mouseInside;
@property (copy) NSUserInterfaceCompressionOptions *compressionOptions;
@property (copy, setter=_setContentTintColor:) NSColor *_contentTintColor;
@property (copy, setter=_setBezelTintColor:) NSColor *_bezelTintColor;
@property (readonly) NSColor *_interiorBackgroundFillColor;
@property (setter=_setUsesContentView:) char _usesContentView;
@property (getter=_isGuarded, setter=_setGuarded:) char _guarded;
@property (setter=_setMinimumPressDuration:) double _minimumPressDuration;
@property (setter=_setHasDestructiveAction:) char _hasDestructiveAction;
@property (setter=_setUsesCautionaryAppearanceWhenActionIsDestructive:) char _usesCautionaryAppearanceWhenActionIsDestructive;
@property (copy, setter=_setControlStateContentStyleOverride:) NSObject<NSControlStateContentStyle> *_controlStateContentStyleOverride;
@property (readonly) char _alwaysHorizontallyCenterContent;
@property unsigned long long bezelStyle;
@property unsigned long long highlightsBy;
@property unsigned long long showsStateBy;
@property (copy) NSString *title;
@property (copy) NSAttributedString *attributedTitle;
@property (copy) NSString *alternateTitle;
@property (copy) NSAttributedString *attributedAlternateTitle;
@property (retain) NSImage *alternateImage;
@property unsigned long long imagePosition;
@property unsigned long long imageScaling;
@property (copy) NSString *keyEquivalent;
@property unsigned long long keyEquivalentModifierMask;
@property (getter=isTransparent) char transparent;
@property (readonly, getter=isOpaque) char opaque;
@property char imageDimsWhenDisabled;
@property char showsBorderOnlyWhileMouseInside;
@property (retain) id sound;
@property (copy) NSColor *backgroundColor;

+ (void)initialize;
+ (id)keyPathsForValuesAffecting_alternateTitleWithMinimalSideEffects;
+ (id)keyPathsForValuesAffecting_alternateImageWithMinimalSideEffects;
+ (long long)_buttonStyleWithStyleInfo:(struct { unsigned long long x0; long long x1; char x2; char x3; char x4; char x5; char x6; char x7; char x8; })a0;
+ (double)_defaultButtonCycleTime;
+ (double)_defaultButtonCycleValue;
+ (char)_drawsVerticallyCenteredTitle;
+ (void)_resetDefaultButtonCycleValue;
+ (void)_setDefaultButtonCycleTime:(float)a0;
+ (double)_standardPushButtonContentHeightForControlSize:(unsigned long long)a0;
+ (struct { struct CGSize { double x0; double x1; } x0; unsigned long long x1; double x2; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x3; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x4; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x5; })_standardPushButtonMetricsForControlSize:(unsigned long long)a0;
+ (Class)_visualProviderClass;
+ (Class)bezelConfigurationClass;
+ (id)keyPathsForValuesAffecting_attributedAlternateTitleWithMinimalSideEffects;
+ (id)keyPathsForValuesAffecting_attributedTitleWithMinimalSideEffects;
+ (id)keyPathsForValuesAffecting_imageWithMinimalSideEffects;
+ (id)keyPathsForValuesAffecting_titleWithMinimalSideEffects;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (double)doubleValue;
- (float)floatValue;
- (int)intValue;
- (void).cxx_destruct;
- (long long)compare:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (long long)integerValue;
- (void)setEnabled:(char)a0;
- (id)stringValue;
- (void)setAlignment:(long long)a0;
- (void)setImage:(id)a0;
- (void)setState:(long long)a0;
- (id)image;
- (void)setStringValue:(id)a0;
- (void)setObjectValue:(id)a0;
- (id)objectValue;
- (char)_preferAlternateContentForImage;
- (void)_setDestinationDisclosureState:(long long)a0;
- (void)_setMouseTrackingInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ofView:(id)a1;
- (id)accessibilityActionDescription:(id)a0;
- (void)setControlSize:(unsigned long long)a0;
- (void)setControlView:(id)a0;
- (void)setDoubleValue:(double)a0;
- (char)_configurationSupportsFormStyle;
- (long long)_contentBacking;
- (void)_convertToText:(id)a0;
- (id)_textAttributes;
- (char)continueTrackingGesture:(id)a0 inView:(id)a1;
- (void)setHighlighted:(char)a0;
- (void)_acceleratorTimerFired;
- (char)_acceptsFirstMouseForEvent:(id)a0 inView:(id)a1;
- (char)_accessibilityIncludeDescriptionAttribute;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_alignedTitleRectWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_alignmentRectInsetsForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (char)_allowsStyledTextForColor:(id)a0;
- (id)_alternateImageSynthesizedForCheckOrRadio:(char *)a0;
- (char)_alwaysShowBezelForCurrentBezelStyleAndState;
- (void)_autoflipUnarchivedProperties;
- (void)_axDifferentiateWithoutColorDidChange:(id)a0;
- (char)_axIsNonCheckboxToggleButton;
- (id)_backgroundColor;
- (void)_beginAcceleratorPeriodicActionsUsingLegacyHW:(char)a0;
- (id)_buttonCellAccessibilityRoleAttribute;
- (id)_buttonCellAux;
- (id)_buttonCellAuxAllocatingIfNeeded:(char)a0;
- (id)_buttonContentStyleInView:(id)a0;
- (id)_buttonImageSource;
- (unsigned long long)_buttonType;
- (char)_canBecomeDefaultButtonCell;
- (char)_canUseFocusRingMaskForText;
- (unsigned long long)_checkboxOrRadioImageStateInControlView:(id)a0;
- (Class)_classForOverrideCheck;
- (void)_clearButtonCellAux;
- (void)_clearMouseTracking;
- (void)_commonAwake;
- (void)_commonInit;
- (void)_configureAndDrawTitleWithCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 controlView:(id)a1;
- (char)_contentHuggingDefault_isUsuallyFixedHeight;
- (char)_contentHuggingDefault_isUsuallyFixedWidth;
- (void)_controlViewDidChangeEffectiveAppearance:(id)a0;
- (void)_controlViewDidChangeEffectiveSemanticContext:(id)a0;
- (void)_controlViewDidMoveToWindow:(id)a0;
- (struct __CFDictionary { } *)_coreUIBezelDrawOptionsWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct __CFString { } *)_coreUIWidgetName;
- (id)_currentImageInView:(id)a0;
- (id)_currentTitle;
- (long long)_destinationDisclosureState;
- (char)_disabledForDrawingContent;
- (id)_displayedAttributedAlternateTitle;
- (void)_doUserDisclosureExpandOrCollapseInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_effectiveButtonContentStyleForImageInView:(id)a0;
- (id)_effectiveButtonContentStyleForTextInView:(id)a0;
- (void)_effectiveFontDidChangeTo:(id)a0;
- (unsigned long long)_effectiveImagePositionBeforeCompression;
- (id)_effectiveSymbolConfiguration;
- (char)_eligibleForSeparatedContentSubviewsInView:(id)a0;
- (void)_endAcceleratorPeriodicActions;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_focusRingBoundsWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (char)_focusRingMaskDependsOnTogglableContent;
- (void)_getPreferredSymbolSize:(double *)a0 weight:(double *)a1 scale:(long long *)a2;
- (char)_hasAccessoryWidget;
- (char)_hasAnySeparatedContentSubviewsInView:(id)a0;
- (char)_hasButtonCellAux;
- (char)_hasGuardedBehavior;
- (char)_hasImage;
- (char)_hasProgressIndicator;
- (char)_hasRolloverBezelArt;
- (char)_hasRolloverContentArt;
- (char)_hasTallContentInView:(id)a0;
- (char)_hasTitle;
- (char)_hasVibrancyIncompatabilityInView:(id)a0 appearance:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_imageRectWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_imageRectWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 allowImageScaling:(char)a1;
- (id)_imageSynthesizedForCheckOrRadio:(char *)a0;
- (id)_imageView;
- (long long)_initialBackgroundStyleCompatibilityGuessIgnoringExternalContext;
- (long long)_interiorContentPresentationStateInView:(id)a0;
- (long long)_interiorContentStateInView:(id)a0;
- (long long)_interiorContentValueInView:(id)a0;
- (unsigned long long)_internalImagePosition;
- (void)_invalidateCachedAlternateTitleMetrics;
- (void)_invalidateCachedTitleMetrics;
- (char)_isDefaultButton;
- (char)_isDrawingDisclosure;
- (char)_isDrawingRedundantlyInView:(id)a0;
- (char)_isEligibleForContentTintColor;
- (char)_isEligibleForTintingBezel;
- (double)_leading;
- (unsigned long long)_lineBreakModeForCurrentConfiguration;
- (char)_needRedrawOnWindowChangedKeyState;
- (long long)_nextDisclosureState;
- (void)_preeffectBaseImage:(id *)a0 state:(unsigned long long *)a1 backgroundStyle:(int *)a2 inView:(id)a3;
- (char)_preferAlternateContent;
- (char)_preferOnArtForBezel;
- (id)_preferredAppearanceForAppearance:(id)a0 inView:(id)a1;
- (long long)_preferredFocusLocation;
- (id)_preferredFontForFont:(id)a0;
- (id)_pressureConfigurationIfNeeded;
- (void)_redisplayAnimatedInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_redrawDueToWindowChangedKeyStateInView:(id)a0;
- (void)_renderCurrentAnimationFrameInContext:(struct CGContext { } *)a0 atLocation:(struct CGPoint { double x0; double x1; })a1;
- (id)_resolvedAlternateImage;
- (char)_sendActionFrom:(id)a0;
- (void)_setAlternateImage:(id)a0 animatedInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)_setAlternateTitle:(id)a0 animatedInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)_setAttributedAlternateTitle:(id)a0 animatedInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)_setAttributedTitle:(id)a0 animatedInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)_setBackgroundColor:(id)a0;
- (void)_setBezelTintColor:(id)a0 animatedInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)_setButtonImageSource:(id)a0;
- (void)_setButtonType:(unsigned long long)a0 adjustingImage:(char)a1;
- (void)_setDefaultButtonIndicatorNeedsDisplay;
- (void)_setHighlighted:(char)a0 animated:(char)a1;
- (void)_setImage:(id)a0 animatedInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)_setImagePosition:(unsigned long long)a0 animatedInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)_setInternalImagePosition:(unsigned long long)a0;
- (void)_setIsDrawingDisclosure:(char)a0;
- (void)_setNextDisclosureState:(long long)a0;
- (void)_setState:(long long)a0 animated:(char)a1;
- (void)_setSubviewsNeedLayout;
- (void)_setTextAttributeParaStyleNeedsRecalc;
- (void)_setTitle:(id)a0 animatedInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)_setUsesCachedImage:(char)a0;
- (char)_shouldDrawBezel;
- (char)_shouldDrawDragged;
- (char)_shouldDrawTextWithDisabledAppearance;
- (char)_shouldDrawWithContentTintColorInView:(id)a0;
- (char)_shouldHighlightCellWhenSelected;
- (char)_shouldSendActionForEventType:(unsigned long long)a0;
- (char)_shouldSetHighlightToFlag:(char)a0;
- (char)_shouldShowFocus;
- (char)_shouldUseStyledTextInView:(id)a0 withBackgroundStyle:(long long)a1;
- (char)_shouldUseTextAppearanceInToolbar;
- (void)_startSound;
- (char)_stateAnimationRunning;
- (long long)_stateForDrawing;
- (id)_stringDrawingContext;
- (char)_subclassHasVibrancyIncompatibleDrawing;
- (char)_subclassOverridesAnyDrawMethodsAffectingVibrancy:(char *)a0;
- (char)_subclassOverridesDrawImage;
- (id)_textDimColor;
- (id)_textHighlightColor;
- (char)_titleContainsNewline;
- (struct CGSize { double x0; double x1; })_titleSizeWithSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_trackingBoundsWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_updateAllOtherButtonsInGroupToNotBeChecked;
- (void)_updateMouseInside:(char)a0;
- (void)_updateMouseTracking;
- (void)_updateSubviewsInView:(id)a0 includeTitleTextField:(char)a1;
- (void)_updateTemplateImageFillToColor:(struct CGColor { } *)a0 blendMode:(int)a1;
- (char)_useHitTestInTrackMouse;
- (char)_usesCachedImage;
- (int)_vibrancyBlendModeForControlView:(id)a0;
- (id)_visualProviderInView:(id)a0;
- (void)_visualProviderWithTemporaryControlView:(id)a0 perform:(id /* block */)a1;
- (char)_wantsBackgroundViewInView:(id)a0;
- (char)_wantsSeparatedContentSubviewsInView:(id)a0;
- (char)_wantsToUseFocusRingMask;
- (void)_windowChangedKeyStateWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (id)accessibilityActionNames;
- (id)accessibilityActivationPointAttribute;
- (id)accessibilityAttributeNames;
- (id)accessibilityDescriptionAttribute;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFocusRingBoundsForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)accessibilityIsDescriptionAttributeSettable;
- (char)accessibilityIsTitleAttributeSettable;
- (char)accessibilityIsValueAttributeSettable;
- (void)accessibilityPerformAction:(id)a0;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySubroleAttribute;
- (id)accessibilityTitleAttribute;
- (id)accessibilityValueAttribute;
- (id)alternateMnemonic;
- (unsigned long long)alternateMnemonicLocation;
- (id)attributedStringValue;
- (id)bezelConfigurationInView:(id)a0;
- (id)bezelConfigurationInView:(id)a0 appearance:(id)a1;
- (long long)cellAttribute:(unsigned long long)a0;
- (struct CGSize { double x0; double x1; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 compressionOptions:(id)a1;
- (char)continueTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (void)didChangeResolvedButtonStyleInControlView:(id)a0 oldButtonStyle:(long long)a1;
- (void)drawBezelWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawImage:(id)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })drawTitle:(id)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)getPeriodicDelay:(float *)a0 interval:(float *)a1;
- (void)highlight:(char)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (unsigned long long)hitTestForEvent:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })imageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)initImageCell:(id)a0;
- (id)initTextCell:(id)a0;
- (long long)interiorBackgroundStyle;
- (void)invalidateResolvedButtonStyleInControlView:(id)a0;
- (char)isBordered;
- (void)layoutLayerWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (long long)maxAcceleratorLevel;
- (id)mnemonic;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (long long)nextState;
- (void)performClick:(id)a0;
- (unsigned long long)sendActionOnMask;
- (void)setAlternateMnemonicLocation:(unsigned long long)a0;
- (void)setAlternateTitleWithMnemonic:(id)a0;
- (void)setAttributedStringValue:(id)a0;
- (void)setBackgroundStyle:(long long)a0;
- (void)setBordered:(char)a0;
- (void)setButtonType:(unsigned long long)a0;
- (void)setCellAttribute:(unsigned long long)a0 to:(long long)a1;
- (void)setFloatValue:(float)a0;
- (void)setIntValue:(int)a0;
- (void)setIntegerValue:(long long)a0;
- (void)setKeyEquivalentFont:(id)a0 size:(double)a1;
- (void)setMaxAcceleratorLevel:(long long)a0;
- (void)setPeriodicDelay:(float)a0 interval:(float)a1;
- (void)setTitleWithMnemonic:(id)a0;
- (void)setUserInterfaceLayoutDirection:(long long)a0;
- (char)startTrackingAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)stopTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 mouseIsUp:(char)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)touchEndedAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (char)trackMouse:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 untilMouseUp:(char)a3;
- (void)updateLayerWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)updateTrackingAreaWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (char)wantsUpdateLayerInView:(id)a0;

@end
