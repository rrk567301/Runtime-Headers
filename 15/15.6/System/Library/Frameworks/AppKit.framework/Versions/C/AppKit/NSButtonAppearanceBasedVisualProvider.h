@class NSView, NSWidgetView, NSButtonTextField, NSString, NSVisualEffectView, NSButtonImageView, NSButtonBezelConfiguration, NSButtonCell, NSMutableArray;

@interface NSButtonAppearanceBasedVisualProvider : NSObject <NSButtonVisualProvider> {
    NSView *_controlView;
    NSButtonBezelConfiguration *_bezelConfiguration;
    NSView *_backgroundView;
    NSVisualEffectView *_visualEffectView;
    NSButtonImageView *_imageView;
    NSButtonTextField *_textField;
    NSWidgetView *_accessoryWidgetView;
    NSMutableArray *_animatingOutImageViews;
    NSMutableArray *_animatingOutTextFields;
    struct { struct CGSize { double width; double height; } frameSize; unsigned long long scalableAxes; double baselineOffset; struct NSEdgeInsets { double top; double left; double bottom; double right; } alignmentRectInsets; struct NSEdgeInsets { double top; double left; double bottom; double right; } idealContentInsets; struct NSEdgeInsets { double top; double left; double bottom; double right; } maximumContentInsets; } _cachedArtworkMetrics;
    struct { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } boundingRect; double firstBaselineOffsetFromTop; double lastBaselineOffsetFromTop; } _cachedUnconstrainedTitleMetrics;
    struct { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } boundingRect; double firstBaselineOffsetFromTop; double lastBaselineOffsetFromTop; } _cachedUnconstrainedAlternateTitleMetrics;
    char _drawingFocusRing;
    char _subclassNeedsLegacyBorderlessTitleRect;
    char _subclassDisallowsTitleMetricCaching;
    char _subclassOverridesDrawingRectForBounds;
    char _inFunctionRow;
    char _inMetricsAppearance;
    char _controlViewIsControl;
    char _controlViewIsButton;
}

@property (readonly) NSView *backgroundView;
@property (readonly) NSButtonImageView *imageView;
@property (readonly) NSVisualEffectView *visualEffectView;
@property (readonly) NSButtonTextField *textField;
@property (readonly) NSWidgetView *accessoryWidgetView;
@property (readonly) NSView *_internalImageView;
@property (readonly) NSView *_backgroundViewIfExists;
@property (weak) NSButtonCell *buttonCell;
@property (weak) NSView *controlView;
@property (readonly) NSButtonBezelConfiguration *currentBezelConfiguration;
@property (readonly) char hasSubviews;
@property (readonly) long long contentBacking;
@property (readonly) long long interiorBackgroundStyle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (char)inFunctionRowWithConfiguration:(id)a0;
+ (char)_isEligibleForTintingBezelWithConfiguration:(id)a0 outCoreUIVariant:(const struct __CFString **)a1 outResolvedAppearance:(id *)a2;
+ (int)bezelBlendModeForConfiguration:(id)a0 cellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 outHasBezel:(char *)a2;
+ (struct __CFDictionary { } *)coreUIBezelDrawOptionsWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 flipped:(char)a1 drawingFocusRing:(char)a2 bezelConfiguration:(id)a3;
+ (struct __CFString { } *)coreUIWidgetNameForConfiguration:(id)a0;
+ (char)inMetricsAppearanceForConfiguration:(id)a0;
+ (unsigned long long)invalidationsForBezelConfigurationChange:(id)a0 oldConfiguration:(id)a1;
+ (struct CGSize { double x0; double x1; })minCellSizeIncrementForBezelConfiguration:(id)a0 compressionOptions:(id)a1;
+ (struct { struct CGSize { double x0; double x1; } x0; unsigned long long x1; double x2; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x3; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x4; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x5; })standardPushButtonMetricsForControlSize:(unsigned long long)a0;
+ (char)useGroupMetricsQuery;
+ (id)visualProviderForButtonCell:(id)a0;

- (void).cxx_destruct;
- (void)layout;
- (struct CGSize { double x0; double x1; })intrinsicContentSizeWithinSize:(struct CGSize { double x0; double x1; })a0;
- (void)removeTextField;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_titleRectForProposedTitleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)removeImageView;
- (char)_allowsTextTightening;
- (struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; double x1; double x2; })_combinedTitleMetricsWithinSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_imageAlignmentRectInImageRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 image:(id)a1;
- (double)_imageVerticalAdjustmentForBezel;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_imageViewFrameWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_invalidateCachedAlternateTitleMetrics;
- (void)_invalidateCachedTitleMetrics;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_titleRectForTitle:(id)a0 inProposedTitleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (struct CGSize { double x0; double x1; })_titleSpacing;
- (void)_unconstrainedImageOrProgressAlignmentSize:(struct CGSize { double x0; double x1; } *)a0 alignmentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessoryRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)accessoryWidgetOptions;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsetsForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)artworkBaselineOffsetFromFrameInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct { double x0; double x1; })baselineOffsetsAtSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bezelRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct { struct CGSize { double x0; double x1; } x0; unsigned long long x1; double x2; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x3; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x4; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x5; } *)cachedMetricsForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 compressionOptions:(id)a1;
- (id)checkboxOrRadioCUIOptionsMaskOnly:(char)a0;
- (id)checkboxOrRadioCUIOptionsWithMaskOnly:(char)a0;
- (void)checkboxOrRadioFrameSize:(struct CGSize { double x0; double x1; } *)a0 alignmentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a1;
- (struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x2; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x3; struct NSEdgeInsets { double x0; double x1; double x2; double x3; } x4; double x5; double x6; })contentMetricsInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 allowImageScaling:(char)a1 compactContent:(char)a2 compressionOptions:(id)a3;
- (id)contentViewIfExists;
- (struct __CFDictionary { } *)coreUIBezelDrawOptionsWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })coreUIWidgetFrameSizeForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawBezelWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawImage:(id)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })drawTitle:(id)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (int)effectiveVibrancyBlendModeForAppearance:(id)a0;
- (char)getIntrinsicArtworkSize:(struct CGSize { double x0; double x1; } *)a0 alignmentRectInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a1 idealContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a2 maxContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a3;
- (char)hasAccessoryWidget;
- (char)hasBezelTintWithConfiguration:(id)a0;
- (char)hasContentView;
- (char)hasTallContent;
- (void)idealContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a0 maximumContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a1 forRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)idealContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 maximumContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 forBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)imageOrProgressRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 titleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 forBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })imageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })imageViewFrame;
- (void)invalidateBezelConfiguration;
- (void)invalidateBezelConfigurationForDisplayOrLayout:(char)a0;
- (void)invalidateCachedArtworkMetrics;
- (void)layoutContentViewIfExists;
- (void)layoutViewsAnimatingOut;
- (void)layoutWithAnimation;
- (struct CGSize { double x0; double x1; })minCellSizeWithCompressionOptions:(id)a0;
- (id)preferredAppearanceForBezelConfiguration:(id)a0;
- (struct CGSize { double x0; double x1; })preferredBezelSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)preferredFontForFont:(id)a0;
- (id)progressIndicatorCUIOptions;
- (struct CGSize { double x0; double x1; })progressIndicatorSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })progressRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)removeAccessoryWidgetView;
- (void)removeBackgroundView;
- (void)removeContentView;
- (void)removeSubviews;
- (void)removeViewsAnimatingOut;
- (void)removeVisualEffectView;
- (char)shouldDrawAsDefaultButton;
- (char)shouldDrawAsTintedButton;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)titleTextIsScrollable;
- (void)updateAccessoryWidgetViewIfNeccessary;
- (void)updateBackgroundViewIfNeccessary;
- (void)updateBezelTintColorWithAnimation;
- (void)updateContentViewIfNecessary;
- (void)updateImageViewIfNecessaryUsingTransition:(id)a0;
- (void)updateImageViewWithAnimationMutationBlock:(id /* block */)a0;
- (void)updateSubviewsIncludeTitleTextField:(char)a0;
- (void)updateSubviewsWithAnimation;
- (void)updateTextFieldIfNecessary;
- (void)updateTextFieldWithAnimationMutationBlock:(id /* block */)a0;
- (void)updateVisualEffectViewIfNecessary;
- (unsigned long long)vibrantBlendingStyleForSubtree;
- (char)wantsImageView;
- (char)wantsVisualEffectView;

@end
