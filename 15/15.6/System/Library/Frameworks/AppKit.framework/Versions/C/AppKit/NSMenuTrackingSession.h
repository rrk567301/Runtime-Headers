@class NSMenuItem, NSString, NSView, NSMenu, NSWindow, NSObject, NSMutableSet, NSMutableArray, NSResponder, NSEvent;
@protocol NSSubmenuPresenting, NSMenuTrackingSessionDelegate;

@interface NSMenuTrackingSession : NSObject {
    NSResponder<NSSubmenuPresenting> *_rootImpl;
    NSResponder<NSSubmenuPresenting> *_trackedImpl;
    NSResponder<NSSubmenuPresenting> *_keyboardTrackedImpl;
    NSResponder<NSSubmenuPresenting> *_lastPresentedSubmenu;
    NSResponder<NSSubmenuPresenting> *_cachedImpl;
    NSView *_menuViewOnEntry;
    NSView *_previousMenuView;
    NSEvent *_cachedMouseExitedEvent;
    struct __CFRunLoopTimer { } *_classicTrackingTimer;
    struct __CFRunLoopTimer { } *_predictiveTrackingTimeoutTimer;
    struct __CFRunLoopTimer { } *_autodismissalTimer;
    long long _activeMenuTrackingMode;
    unsigned int _oldEventMask;
    unsigned int _focusTheftID;
    unsigned int _typingFocusTheftID;
    struct CGPoint { double x; double y; } _mousePointOnEntry;
    struct CGPoint { double x; double y; } _predictiveTrackingPreviousMouseLocation;
    struct CGPoint { double x; double y; } _mouseLocationOnMouseDown;
    double _previousTime;
    char _isTrackingActive;
    char _didLeaveOriginalItemSinceTrackingStarted;
    char _isMonitoringEvents;
    char _isPredictiveTrackingActive;
    char _isRunningEventLoop;
    char _isEventLoopCanceled;
    char _isAboutToDismissByMouseUp;
    char _isDismissing;
    char _needsRestoreEventMask;
    char _needsRestoreFocus;
    NSMenu *_rootMenu;
    NSMutableSet *_closedImpls;
    NSMutableSet *_dismissedImpls;
    NSMutableSet *_reuseSet;
    NSMenuItem *_itemAwaitingPerformAction;
    NSEvent *_reasonForPerformAction;
    NSMutableArray *_eventsDuringDismissal;
    NSEvent *_finalMouseUp;
    struct OpaqueEventHandlerRef { } *_appSwitchHandler;
    NSWindow *_rememberedKeyWindow;
    const long long *_rememberedWindowOrdering;
    long long _keyWindowProperties;
    unsigned long long _rememberedWindowOrderingCount;
    struct OpaqueTSMDocumentID { } *_savedTSMDocument;
    char _isPrecededByMouseDown;
    char _didRepostEventForContextualClick;
}

@property (class, weak, nonatomic) NSMenuTrackingSession *currentSession;

@property (weak) NSObject<NSMenuTrackingSessionDelegate> *delegate;
@property (readonly, nonatomic) double startTime;
@property (nonatomic) NSString *runLoopMode;
@property (readonly, nonatomic) NSMenuItem *selectedMenuItem;
@property (readonly) char isDismissing;
@property (readonly, weak) NSMenu *rootMenu;
@property (readonly) char allowsTracking;
@property char trackingCanceledBeforeStarted;

+ (char)allowsKeyMatchingWithoutModifiers;
+ (void)disableAutoDismissal;
+ (void)enableAutoDismissal:(double)a0;
+ (char)performKeyboardNavigation:(id)a0;

- (void)dealloc;
- (void).cxx_destruct;
- (void)classicTrackingThresholdReached;
- (void)_invalidateClassicTrackingTimer;
- (char)_mouseMovedDraggedEventHandler:(id)a0;
- (char)_arrowDownKeyEventHandler:(long long)a0;
- (char)_arrowLeftKeyEventHandler;
- (char)_arrowLeftTabEventHandler;
- (char)_arrowRightKeyEventHandler;
- (char)_arrowRightTabEventHandler;
- (char)_arrowUpKeyEventHandler:(long long)a0;
- (void)_autoDismissalTimerCallback;
- (char)_autodismissalAllowed;
- (char)_beginPredictiveTrackingAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_cancelPredictiveTracking;
- (char)_cancelPredictiveTrackingWithEvent:(id)a0;
- (char)_classicTypeSelectWithEvent:(id)a0;
- (void)_clearPreviousKeyWindowProperties;
- (char)_defaultActionEventHandler:(id)a0;
- (void)_disableAutoDismissal;
- (void)_enableAutoDismissal:(double)a0;
- (id)_findKeyWindowToRestoreFromSavedProperties;
- (id)_firstContextualImpl;
- (void)_handleAppDeactivateIfNeeded;
- (void)_invalidateAutodismissalTimer;
- (void)_invalidateCurrentSession;
- (void)_invalidatePredictiveTrackingTimeoutTimer;
- (char)_keyDownEventHandler:(id)a0;
- (char)_keyUpEventHandler:(id)a0;
- (char)_modifierFlagsChanged:(id)a0;
- (char)_mouseDownEventHandler:(id)a0;
- (char)_mouseEnteredExitedEventHandler:(id)a0;
- (char)_mouseUpEventHandler:(id)a0;
- (void)_performPreDispatchDismissalActions;
- (void)_recordPreviousKeyWindowProperties;
- (char)_repostMouseDownDueToSpecialCaseIfNeeded:(id)a0;
- (void)_resetClassicTrackingTimer;
- (void)_restorePreviousKeyWindowFromSavedProperties;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_screenRectForView:(id)a0;
- (void)_sendMouseMovedDragged:(id)a0;
- (void)_setupMenuTracking;
- (char)_shouldContinueTypeSelect:(id)a0;
- (void)_stopIntrusionDetection;
- (char)_tabSelectsAdjacentMenu;
- (void)_tearDownMenuTracking;
- (void)_updateTrackedImplForKeyboardTracking;
- (void)addToReuseQueue:(id)a0;
- (char)beginRemoteTrackingWithEvent:(id)a0;
- (void)beginTrackingSession;
- (void)disableWindowReusePurgingCache;
- (void)dismissAnimated:(char)a0;
- (void)enableWindowReuse;
- (void)endRemoteTracking;
- (char)handleEvent:(id)a0;
- (char)handleServiceHostedCustomViewEvent:(id)a0;
- (id)initWithImpl:(id)a0;
- (char)isWindowReuseAvailable;
- (char)mouseEntered:(id)a0 window:(id)a1;
- (char)mouseExited:(id)a0;
- (void)performActionUponDismissal:(id)a0;
- (void)removeFromReuseQueue:(id)a0;
- (void)sendBeginTrackingNotifications;
- (void)sendEndTrackingNotifications;
- (void)sendMenuClosedUponDismissal:(id)a0;
- (void)setMenuRepresentationUponDismissal:(id)a0;
- (void)startMonitoringEvents:(id)a0;
- (void)startRunningMenuEventLoop:(id)a0;
- (void)stopMonitoringEvents;
- (id)windowFromReuseQueue;

@end
