@class NSView, NSString, NSArray, NSAppearance, NSMenuItem, NSFont, NSURL;
@protocol NSMenuDelegate;

@interface NSMenu : NSObject <NSCopying, NSCoding, NSUserInterfaceItemIdentification, NSAppearanceCustomization, NSAccessibilityElement, NSAccessibility> {
    NSMenu *_supermenu;
    NSString *_title;
    id _itemArray;
    id _extra;
    struct __mFlags { unsigned char noAutoenable : 1; unsigned char inMain : 1; unsigned char internalPerformAction : 1; unsigned char condenseSeparators : 1; unsigned char disabled : 1; unsigned char ownedByPopUp : 1; unsigned char delegateNeedsUpdate : 1; unsigned char delegateUpdateItem : 1; unsigned char delegateHasKeyEquiv : 1; unsigned char delegateHasAltKeyEquiv : 1; unsigned char excludeMarkColumn : 1; unsigned char isContextualMenu : 1; unsigned char cmPluginMode : 2; unsigned char invertedCMPluginTypes : 2; unsigned char allowsDifferentSelection : 1; unsigned char noTopPadding : 1; unsigned char noBottomPadding : 1; unsigned char hasNCStyle : 1; unsigned char usesUserKeyEquivalents : 1; unsigned char shouldSuppressNextPopulateCall : 1; unsigned char shouldSuppressSimulatedOpenClose : 1; unsigned char shouldSuppressSelectedChildrenChanged : 1; unsigned char automaticallyInsertsWritingToolsItems : 1; unsigned char RESERVED : 7; } _mFlags;
    NSString *_uiid;
}

@property (class, readonly) char _isOutOfProcess;
@property (class, readonly) char _appKitMenusEnabled;
@property (class, readonly) double _revealedMenuBarHeight;

@property (setter=_setMenuServicesStartingRequestor:) id _menuServicesStartingRequestor;
@property (setter=_setCondensesSeparators:) char _condensesSeparators;
@property (setter=_setHasNCStyle:) char _hasNCStyle;
@property (setter=_setIndentationWidth:) unsigned long long _indentationWidth;
@property (readonly) NSView *_presentingView;
@property (setter=_setUsesUserKeyEquivalents:) char _usesUserKeyEquivalents;
@property (copy, setter=_setSelectionHandler:) id /* block */ _selectionHandler;
@property (weak, nonatomic, setter=_setNextMenu:) NSMenu *_nextMenu;
@property (readonly, weak, nonatomic) NSMenu *_previousMenu;
@property (readonly, nonatomic) NSMenu *_firstMenu;
@property (readonly) char _isFirstMenu;
@property (readonly) long long _numberOfMenuItemsIncludingLinkedMenus;
@property (setter=setTypingBehavior:) long long typingBehavior;
@property (setter=setHiddenInRepresentation:) char isHiddenInRepresentation;
@property (readonly) long long _effectiveSelectionMode;
@property (readonly) long long _effectiveTypingBehavior;
@property (setter=_setAllowsDifferentInitialPopupSelection:) char _allowsDifferentInitialPopupSelection;
@property (readonly) char isMainMenu;
@property (copy) NSString *title;
@property NSMenu *supermenu;
@property (copy) NSArray *itemArray;
@property (readonly) long long numberOfItems;
@property char autoenablesItems;
@property (weak) id<NSMenuDelegate> delegate;
@property (readonly) double menuBarHeight;
@property (readonly) NSMenuItem *highlightedItem;
@property double minimumWidth;
@property (readonly) struct CGSize { double x0; double x1; } size;
@property (retain) NSFont *font;
@property char allowsContextMenuPlugIns;
@property char automaticallyInsertsWritingToolsItems;
@property char showsStateColumn;
@property long long userInterfaceLayoutDirection;
@property (copy) NSString *identifier;
@property (retain) NSAppearance *appearance;
@property (readonly) NSAppearance *effectiveAppearance;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isAccessibilityElement) char accessibilityElement;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } accessibilityFrame;
@property (getter=isAccessibilityFocused) char accessibilityFocused;
@property struct CGPoint { double x0; double x1; } accessibilityActivationPoint;
@property (weak) id accessibilityTopLevelUIElement;
@property (copy) NSURL *accessibilityURL;
@property (retain) id accessibilityValue;
@property (copy) NSString *accessibilityValueDescription;
@property (copy) NSArray *accessibilityVisibleChildren;
@property (copy) NSString *accessibilitySubrole;
@property (copy) NSString *accessibilityTitle;
@property (weak) id accessibilityTitleUIElement;
@property (copy) NSArray *accessibilityNextContents;
@property long long accessibilityOrientation;
@property (retain) id accessibilityOverflowButton;
@property (weak) id accessibilityParent;
@property (copy) NSString *accessibilityPlaceholderValue;
@property (copy) NSArray *accessibilityPreviousContents;
@property (copy) NSString *accessibilityRole;
@property (copy) NSString *accessibilityRoleDescription;
@property (retain) id accessibilitySearchButton;
@property (retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected) char accessibilitySelected;
@property (copy) NSArray *accessibilitySelectedChildren;
@property (copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (retain) id accessibilityShownMenu;
@property (retain) id accessibilityMinValue;
@property (retain) id accessibilityMaxValue;
@property (copy) NSArray *accessibilityLinkedUIElements;
@property (weak) id accessibilityWindow;
@property (copy) NSString *accessibilityIdentifier;
@property (copy) NSString *accessibilityHelp;
@property (copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityExpanded) char accessibilityExpanded;
@property (getter=isAccessibilityEdited) char accessibilityEdited;
@property (getter=isAccessibilityEnabled) char accessibilityEnabled;
@property (copy) NSArray *accessibilityChildren;
@property (copy) NSArray *accessibilityChildrenInNavigationOrder;
@property (retain) id accessibilityClearButton;
@property (retain) id accessibilityCancelButton;
@property (getter=isAccessibilityProtectedContent) char accessibilityProtectedContent;
@property (copy) NSArray *accessibilityContents;
@property (copy) NSString *accessibilityLabel;
@property (getter=isAccessibilityAlternateUIVisible) char accessibilityAlternateUIVisible;
@property (copy) NSArray *accessibilitySharedFocusElements;
@property (getter=isAccessibilityRequired) char accessibilityRequired;
@property (copy) NSArray *accessibilityCustomRotors;
@property (copy) NSArray *accessibilityUserInputLabels;
@property (copy) NSArray *accessibilityAttributedUserInputLabels;
@property (retain) id accessibilityApplicationFocusedUIElement;
@property (retain) id accessibilityMainWindow;
@property (getter=isAccessibilityHidden) char accessibilityHidden;
@property (getter=isAccessibilityFrontmost) char accessibilityFrontmost;
@property (retain) id accessibilityFocusedWindow;
@property (copy) NSArray *accessibilityWindows;
@property (weak) id accessibilityExtrasMenuBar;
@property (weak) id accessibilityMenuBar;
@property (copy) NSArray *accessibilityColumnTitles;
@property (getter=isAccessibilityOrderedByRow) char accessibilityOrderedByRow;
@property long long accessibilityHorizontalUnits;
@property long long accessibilityVerticalUnits;
@property (copy) NSString *accessibilityHorizontalUnitDescription;
@property (copy) NSString *accessibilityVerticalUnitDescription;
@property (copy) NSArray *accessibilityHandles;
@property (retain) id accessibilityWarningValue;
@property (retain) id accessibilityCriticalValue;
@property (getter=isAccessibilityDisclosed) char accessibilityDisclosed;
@property (weak) id accessibilityDisclosedByRow;
@property (retain) id accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel;
@property (copy) NSArray *accessibilityMarkerUIElements;
@property (retain) id accessibilityMarkerValues;
@property (retain) id accessibilityMarkerGroupUIElement;
@property long long accessibilityUnits;
@property (copy) NSString *accessibilityUnitDescription;
@property long long accessibilityRulerMarkerType;
@property (copy) NSString *accessibilityMarkerTypeDescription;
@property (retain) id accessibilityHorizontalScrollBar;
@property (retain) id accessibilityVerticalScrollBar;
@property (copy) NSArray *accessibilityAllowedValues;
@property (copy) NSArray *accessibilityLabelUIElements;
@property float accessibilityLabelValue;
@property (copy) NSArray *accessibilitySplitters;
@property (retain) id accessibilityDecrementButton;
@property (retain) id accessibilityIncrementButton;
@property (copy) NSArray *accessibilityTabs;
@property (retain) id accessibilityHeader;
@property long long accessibilityColumnCount;
@property long long accessibilityRowCount;
@property long long accessibilityIndex;
@property (copy) NSArray *accessibilityColumns;
@property (copy) NSArray *accessibilityRows;
@property (copy) NSArray *accessibilityVisibleRows;
@property (copy) NSArray *accessibilitySelectedRows;
@property (copy) NSArray *accessibilityVisibleColumns;
@property (copy) NSArray *accessibilitySelectedColumns;
@property long long accessibilitySortDirection;
@property (copy) NSArray *accessibilityRowHeaderUIElements;
@property (copy) NSArray *accessibilitySelectedCells;
@property (copy) NSArray *accessibilityVisibleCells;
@property (copy) NSArray *accessibilityColumnHeaderUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityRowIndexRange;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityColumnIndexRange;
@property long long accessibilityInsertionPointLineNumber;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySharedCharacterRange;
@property (copy) NSArray *accessibilitySharedTextUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityVisibleCharacterRange;
@property long long accessibilityNumberOfCharacters;
@property (copy) NSString *accessibilitySelectedText;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySelectedTextRange;
@property (copy) NSArray *accessibilitySelectedTextRanges;
@property (retain) id accessibilityToolbarButton;
@property (getter=isAccessibilityModal) char accessibilityModal;
@property (retain) id accessibilityProxy;
@property (getter=isAccessibilityMain) char accessibilityMain;
@property (retain) id accessibilityFullScreenButton;
@property (retain) id accessibilityGrowArea;
@property (copy) NSString *accessibilityDocument;
@property (retain) id accessibilityDefaultButton;
@property (retain) id accessibilityCloseButton;
@property (retain) id accessibilityZoomButton;
@property (retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized) char accessibilityMinimized;
@property (copy) NSArray *accessibilityCustomActions;

+ (void)initialize;
+ (id)_menusWithName:(id)a0;
+ (char)_alwaysCallDelegateBeforeSidebandUpdaters;
+ (char)_alwaysInstallWindowTabItems;
+ (id)_captureKeyEquivalentsFromEvent:(id)a0 withOptions:(unsigned long long)a1;
+ (id)_captureKeyEquivalentsWithOptions:(unsigned long long)a0 inMode:(id)a1 finalEvent:(id *)a2 status:(long long *)a3 additionalEventProcessing:(id /* block */)a4;
+ (id)_contextMenuEvent;
+ (id)_contextMenuTarget;
+ (id)_currentTrackingInfo;
+ (void)_drawHelpResultsSeparatorInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 flags:(unsigned long long)a2;
+ (void)_drawOverlayForMenuHelpResultsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 flags:(unsigned long long)a2;
+ (id)_helpMenu;
+ (char)_menuBarIsDark;
+ (id)_menuItemWithKeyEquivalentMatchingEvent:(id)a0 inMenu:(id)a1 includingDisabledItems:(char)a2;
+ (id)_paletteWithColors:(id)a0 titles:(id)a1 templateImage:(id)a2 selectionHandler:(id /* block */)a3;
+ (void)_recursivelyRegisterMenuForKeyEquivalentUniquing:(id)a0;
+ (void)_recursivelyRegisterMenuItem:(id)a0 forKeyEquivalentUniquingInMenu:(id)a1;
+ (void)_recursivelyUnregisterMenuForKeyEquivalentUniquing:(id)a0;
+ (void)_recursivelyUnregisterMenuItem:(id)a0 forKeyEquivalentUniquingInMenu:(id)a1;
+ (void)_registerMenuForKeyEquivalentUniquing:(id)a0;
+ (void)_registerMenuItemForKeyEquivalentUniquing:(id)a0;
+ (void)_registerOneMenuForKeyEquivalentUniquing:(id)a0;
+ (char)_requestMenuBarVisibility:(char)a0 alreadyInState:(char *)a1 completionBlock:(id /* block */)a2;
+ (void)_restoreTornOffMenus;
+ (void)_saveTornOffMenus;
+ (void)_setAlwaysCallDelegateBeforeSidebandUpdaters:(char)a0;
+ (void)_setAlwaysInstallWindowTabItems:(char)a0;
+ (void)_setAppleMenuEnabled:(char)a0;
+ (void)_setContextMenuEvent:(id)a0;
+ (void)_setContextMenuTarget:(id)a0;
+ (void)_setHelpMenu:(id)a0;
+ (id)_sidecarServicesMenuWithOptions:(unsigned long long)a0;
+ (id)_sidecarServicesMenuWithTarget:(id)a0 action:(SEL)a1 options:(unsigned long long)a2;
+ (void)_unregisterMenuForKeyEquivalentUniquing:(id)a0;
+ (void)_unregisterMenuItemForKeyEquivalentUniquing:(id)a0;
+ (void)_unregisterOneMenuForKeyEquivalentUniquing:(id)a0;
+ (void)_updateMenuKeyCacheForDeletion:(id)a0 firstItem:(long long)a1 itemCount:(long long)a2;
+ (void)_updateMenuKeyCacheForInsertion:(id)a0 firstItem:(long long)a1 itemCount:(long long)a2;
+ (char)_validateCaptureKeyEquivalentsFromEvent:(id)a0 withOptions:(unsigned long long)a1;
+ (id)displayWindowWithImpl:(id)a0 display:(unsigned int)a1 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 aperture:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 scaleFactor:(double)a4;
+ (char)isDrawingLimitedCustomView:(char *)a0 isMenuItemFocused:(char *)a1;
+ (char)isMenuBarVisible;
+ (double)menuBarHeight;
+ (char)menuBarVisible;
+ (long long)menuTypeForEvent:(id)a0;
+ (struct _NSZone { } *)menuZone;
+ (id)paletteMenuWithColors:(id)a0 titles:(id)a1 selectionHandler:(id /* block */)a2;
+ (id)paletteMenuWithColors:(id)a0 titles:(id)a1 templateImage:(id)a2 selectionHandler:(id /* block */)a3;
+ (void)popUpContextMenu:(id)a0 withEvent:(id)a1 forView:(id)a2;
+ (void)popUpContextMenu:(id)a0 withEvent:(id)a1 forView:(id)a2 withFont:(id)a3;
+ (void)setMenuBarSettings:(id)a0 globalSettings:(id)a1;
+ (void)setMenuBarVisible:(char)a0;
+ (void)setMenuZone:(struct _NSZone { } *)a0;
+ (id)standardImportFromDeviceMenuWithOptions:(unsigned long long)a0;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)itemAtIndex:(long long)a0;
- (void)addItem:(id)a0;
- (id)initWithTitle:(id)a0;
- (id)uniqueIdentifier;
- (void)removeAllItems;
- (void)removeItem:(id)a0;
- (id)_accessibilityTopLevelUIElement;
- (char)_delegateWantsDidFailToOpenCall;
- (long long)_indexInMenuBar;
- (char)_isOwnedByPopUp;
- (void)_notifySupermenuOfSubmenuChange;
- (void)_setStoryboard:(id)a0;
- (char)_shouldSuppressNextPopulateCall;
- (void)_simulateClosed;
- (id)accessibilityLastContentSibling;
- (id)accessibilityNextContentSibling;
- (id)accessibilitySelectedTextRanges;
- (char)isAccessibilityAutoInteractable;
- (char)isAccessibilitySelectorAllowed:(SEL)a0;
- (void)setAccessibilityCustomChoosers:(id)a0;
- (void)setAccessibilityMinimizeButton:(id)a0;
- (void)setAccessibilityTitleUIElement:(id)a0;
- (char)_accessibilityUseConvenienceAPI;
- (id)_createMenuImpl;
- (char)_delegateWantsPerformSearchCall;
- (void)_menuItem:(id)a0 didChangeFontFrom:(id)a1 to:(id)a2;
- (id)accessibilityCellForColumn:(long long)a0 row:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrameInParentSpace;
- (id)accessibilityHeaderForRowIndex:(long long)a0;
- (long long)accessibilityNumberOfCharacters;
- (void)closeMenuWindow;
- (void)presentControllerAsModalWindow:(id)a0;
- (void)setAccessibilityDisclosedByRow:(id)a0;
- (void)setAccessibilityOverflowButton:(id)a0;
- (void)setAccessibilityVisibleColumns:(id)a0;
- (void)setUserInterfaceItemIdentifier:(id)a0;
- (unsigned long long)_accessibilityArrayAttributeCount:(id)a0;
- (id)_accessibilityArrayAttributeValues:(id)a0 index:(unsigned long long)a1 maxCount:(unsigned long long)a2 openForInspection:(char)a3;
- (id)_accessibilityChildUIElementForSpecifierComponent:(long long)a0;
- (id)_accessibilityChildren;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_accessibilityFrame;
- (unsigned long long)_accessibilityIndexOfChild:(id)a0;
- (id)_accessibilityLabel;
- (id)_accessibilityParent;
- (id)_accessibilitySelectedChildren;
- (id)_accessibilityVisibleChildren;
- (void)_addHeaderWithTitle:(id)a0;
- (void)_addMenuItemWithTitle:(id)a0 handler:(id /* block */)a1;
- (void)_addSidebandMenuUpdaterForRoles:(long long)a0 token:(id)a1 priority:(long long)a2 handler:(id /* block */)a3;
- (id)_addSystemItemWithTitle:(id)a0 action:(SEL)a1 keyEquivalent:(id)a2;
- (char)_allowsKeyboardAdjustedShortcuts;
- (id)_anyMenuItemWithKeyEquivalentMatchingEvent:(id)a0;
- (void)_associateStatusItem:(id)a0;
- (long long)_backgroundStyle;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundsIfOpen;
- (void)_cacheSidebandUpdaters;
- (void)_cancelTrackingWithFade:(char)a0;
- (id)_cocoaImplIfExists;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_confinementRectForScreen:(id)a0;
- (char)_containsItemMatchingEvent:(id)a0 includingDisabledItems:(char)a1;
- (id)_contextMenuImpl;
- (const struct AEDesc { unsigned int x0; struct OpaqueAEDataStorageType **x1; } *)_contextMenuPluginAEDesc;
- (void)_createExtraIvars;
- (unsigned long long)_currentMenuUpdateFlags;
- (char)_delegateWantsCloseCall;
- (char)_delegateWantsConfinementRectCall;
- (char)_delegateWantsDVTPerformSearchCall;
- (char)_delegateWantsHighlightedCall;
- (char)_delegateWantsOpenCall;
- (char)_delegateWantsPopulateCall;
- (char)_delegateWantsPrepareCall;
- (void)_didInitialize;
- (id)_effectiveAppearanceParent;
- (id)_effectiveFont;
- (void)_enableItem:(id)a0;
- (void)_enableItems;
- (void)_enableItemsWithFlags:(unsigned long long)a0;
- (void)_endContextMenuPlugins;
- (void)_endHandlingCarbonEvents:(id)a0;
- (char)_findAndPerformKeyEquivalent:(id)a0 usingLocalizedShortcuts:(char)a1;
- (void)_finishedMakingConnections;
- (id)_fontOrNilIfDefault;
- (void)_forEachAccessibleMenuItem:(id /* block */)a0;
- (void)_forEachCachedSidebandUpdaterDo:(id /* block */)a0;
- (void)_forEachLinkedMenu:(id /* block */)a0;
- (void)_forEachLinkedMenuItem:(id /* block */)a0;
- (id)_getKeyEquivalentUniquerCreatingIfNecessary:(char)a0;
- (id)_handleCarbonEvents:(const struct EventTypeSpec { unsigned int x0; unsigned int x1; } *)a0 count:(unsigned long long)a1 handler:(id /* block */)a2;
- (char)_hasPaddingOnEdge:(unsigned long long)a0;
- (char)_hasPendingCancellationEvent;
- (char)_hasViewMenuTitle;
- (void)_image:(id *)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 forPopUpMenuPositioningItem:(id)a2 atLocation:(struct CGPoint { double x0; double x1; })a3 inView:(id)a4 appearance:(id)a5;
- (id)_inProcessMenuImpl;
- (long long)_indexOfItemWithIdentifier:(id)a0;
- (long long)_indexOfItemWithNilOrAppTargetAndAction:(SEL)a0;
- (long long)_indexOfItemWithPartialTitle:(id)a0 includingHiddenItems:(char)a1;
- (long long)_indexOfNthItem:(long long)a0 passingTest:(id /* block */)a1;
- (id)_indicesOfItemsWithTarget:(id)a0 andAction:(SEL)a1 onlyFirst:(char)a2;
- (void)_informDelegateOfHighlightedItem:(id)a0;
- (void)_initialPushOfMenu;
- (id)_insertItemInSortedOrderWithTitle:(id)a0 action:(SEL)a1 keyEquivalent:(id)a2;
- (id)_insertSystemItemWithTitle:(id)a0 action:(SEL)a1 keyEquivalent:(id)a2 atIndex:(long long)a3;
- (void)_internalPerformActionForItemAtIndex:(long long)a0;
- (void)_invalidateCachedSidebandUpdater:(id)a0;
- (void)_invalidateMenuKeyCacheStartingWithItem:(long long)a0 totalItems:(long long)a1 options:(unsigned int)a2;
- (void)_invokeSelectionHandlerForAction;
- (char)_isAppleMenu;
- (char)_isContextualMenu;
- (char)_isEmphasized;
- (char)_isEnabled;
- (char)_isInMainMenu;
- (char)_isUpdatedExcludingContentTypes:(unsigned long long)a0;
- (id)_itemArray;
- (char)_itemViewNeedsInsertionInWindow:(id)a0;
- (id)_lastInputSourceIdentifierForKeyboardAdjustedShortcuts;
- (long long)_layoutDirectionIfExists;
- (void)_limitedViewWantsRedisplayForItem:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_lockForMainMenuItemArray;
- (void)_lockMenuPosition;
- (struct CGSize { double x0; double x1; })_maximumSizeForTesting;
- (id)_menuBarImpl;
- (void)_menuChanged;
- (void)_menuDidChangeAccessibilityOverriddenAttribute:(id)a0 from:(id)a1 to:(id)a2;
- (id)_menuImpl;
- (id)_menuImplForCallbacks;
- (id)_menuImplIfExists;
- (void)_menuItem:(id)a0 didChangeAccessibilityOverriddenAttribute:(id)a1 from:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 didChangeActionFrom:(SEL)a1 to:(SEL)a2;
- (void)_menuItem:(id)a0 didChangeAlternateFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeAttributedTitleFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeBadgeFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeCustomViewFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeCustomViewHandlesEventsFrom:(char)a1 to:(char)a2 viewDidWantHIView:(char)a3;
- (void)_menuItem:(id)a0 didChangeCustomViewIsDrawingOnlyFrom:(char)a1 to:(char)a2 viewDidWantHIView:(char)a3;
- (void)_menuItem:(id)a0 didChangeDestructiveFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeEnabledStateFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeGroupHeaderFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeHiddenFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeHiddenInRepresentationFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeHighlightedImageFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeImageFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeImageSizeFrom:(struct CGSize { double x0; double x1; })a1 to:(struct CGSize { double x0; double x1; })a2;
- (void)_menuItem:(id)a0 didChangeImagesTo:(id)a1 highlightedImage:(id)a2;
- (void)_menuItem:(id)a0 didChangeIndentFrom:(long long)a1 to:(long long)a2;
- (void)_menuItem:(id)a0 didChangeKeyEquivalentDisplayOverrideTo:(id)a1;
- (void)_menuItem:(id)a0 didChangeKeyEquivalentFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeKeyEquivalentModifierMaskFrom:(unsigned long long)a1 to:(unsigned long long)a2;
- (void)_menuItem:(id)a0 didChangeKeyEquivalentVirtualKeyCodeFrom:(unsigned short)a1 to:(unsigned short)a2;
- (void)_menuItem:(id)a0 didChangeNewItemsCountFrom:(unsigned long long)a1 to:(unsigned long long)a2;
- (void)_menuItem:(id)a0 didChangeNextItemIsAlternateFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeRequiresModifiersToBeVisibleFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeRespectsKeyEquivalentWhileHiddenFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeSeparatorStatusFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeShowsBlockedByScreenTimeFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeStateImageFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeSubmenuContentsWithSubmenu:(id)a1;
- (void)_menuItem:(id)a0 didChangeSubmenuFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeSubmenuParentItemUnchoosableFrom:(char)a1 to:(char)a2;
- (void)_menuItem:(id)a0 didChangeSubtitleFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeTitleFrom:(id)a1 to:(id)a2;
- (void)_menuItem:(id)a0 didChangeTooltipFrom:(id)a1 to:(id)a2;
- (id)_menuName;
- (id)_menuOwner;
- (char)_menuOwnerCanUseMenuWhenModal;
- (long long)_menuPluginInsertionMode;
- (unsigned long long)_menuPluginTypes;
- (id)_nativeMenuImplIfExists;
- (char)_openForInspection:(id)a0;
- (char)_ownedByPopUp;
- (id)_owningPopUp;
- (void)_performActionForItem:(id)a0 atIndex:(long long)a1 fromEvent:(id)a2;
- (void)_performActionWithHighlightingForItemAtIndex:(long long)a0;
- (void)_performActionWithHighlightingForItemAtIndex:(long long)a0 sendAccessibilityNotification:(char)a1;
- (void)_performBlockWithoutNotifyingSelectedChildrenChanged:(id /* block */)a0;
- (void)_performKeyEquivalentForItemAtIndex:(long long)a0;
- (char)_performKeyEquivalentWithDelegate:(id)a0;
- (void)_performRemoteKeyEquivalentWithEvent:(id)a0 forItemAtIndex:(long long)a1;
- (void)_performSidebandUpdatersForRole:(long long)a0;
- (void)_performSidebandUpdatersPassingTest:(id /* block */)a0;
- (void)_popUpContextMenu:(id)a0 withEvent:(id)a1 forView:(id)a2;
- (void)_popUpContextMenu:(id)a0 withEvent:(id)a1 forView:(id)a2 withFont:(id)a3;
- (char)_popUpMenuRelativeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1 preferredEdge:(unsigned long long)a2;
- (void)_popUpMenuRelativeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1 width:(double)a2 flags:(unsigned long long)a3 selectedItemIndexProvider:(id /* block */)a4;
- (void)_popUpMenuWithEvent:(id)a0 forView:(id)a1;
- (char)_populate:(char)a0;
- (char)_populateFromDelegateWithEventProvider:(id /* block */)a0;
- (void)_populateFromSidebandUpdatersOfSign:(long long)a0;
- (char)_populateWithEvent:(id)a0;
- (char)_populateWithEventProvider:(id /* block */)a0;
- (char)_populateWithEventRef:(void *)a0;
- (char)_populateWithFlags:(unsigned long long)a0;
- (char)_populateWithFlags:(unsigned long long)a0 eventRef:(void *)a1 incomplete:(char *)a2;
- (void)_postItemChangedNotificationButIgnoringItOurselves:(id)a0;
- (void)_recordUpdate:(long long)a0 forItemAtIndex:(long long)a1;
- (id)_recursiveItemWithTarget:(id)a0 action:(SEL)a1 allowNilTarget:(char)a2;
- (void)_recursivelyChangeLayoutDirectionFrom:(long long)a0 to:(long long)a1;
- (void)_recursivelyNoteChangedIsInMainMenu:(char)a0;
- (void)_recursivelyUpdateKeyEquivalents;
- (void)_releaseCachedSidebandUpdaters;
- (void)_removeSidebandMenuUpdaterForToken:(id)a0;
- (void)_sendAndRecordMenuOpeningNotification;
- (void)_sendMenuClosedNotification:(char)a0;
- (void)_sendMenuOpeningNotification:(char)a0;
- (char)_servicesMenuItemsAreForContextMenu;
- (void)_setAllowsKeyboardAdjustedShortcuts:(char)a0;
- (void)_setContextMenuPluginAEDesc:(const struct AEDesc { unsigned int x0; struct OpaqueAEDataStorageType **x1; } *)a0;
- (void)_setEnabled:(char)a0;
- (void)_setHasPadding:(char)a0 onEdge:(unsigned long long)a1;
- (void)_setIsContextualMenu:(char)a0;
- (void)_setIsOwnedByPopUp:(char)a0;
- (void)_setLastInputSourceIdentifierForKeyboardAdjustedShortcuts:(id)a0;
- (void)_setMaximumSizeForTesting:(struct CGSize { double x0; double x1; })a0;
- (void)_setMenuName:(id)a0;
- (void)_setMenuOwner:(id)a0;
- (void)_setMenuPluginInsertionMode:(long long)a0;
- (void)_setMenuPluginTypes:(unsigned long long)a0;
- (void)_setOwnedByPopUp:(id)a0;
- (void)_setPreviousMenu:(id)a0;
- (void)_setShouldSuppressNextPopulateCall:(char)a0;
- (void)_setShouldSuppressSimulatedOpenClose:(char)a0;
- (void)_setSuppressAutoenabling:(char)a0;
- (void)_setSuppressingSelectedChildrenChanged:(char)a0;
- (char)_shouldSuppressSelectedChildrenChanged;
- (char)_shouldSuppressSimulatedOpenClose;
- (long long)_sidebandUpdaterRoles;
- (void)_simulateActionForItemAtIndex:(long long)a0;
- (void)_simulateOpening:(unsigned long long)a0;
- (id)_trackingInfo;
- (void)_unlockForMainMenuItemArray;
- (void)_unlockMenuPosition;
- (void)_updateEnabled;
- (void)_updateForTracking;
- (void)_willDealloc;
- (void)_withUpdateFlags:(unsigned long long)a0 do:(id /* block */)a1;
- (id)accessibilityActionNames;
- (struct CGPoint { double x0; double x1; })accessibilityActivationPoint;
- (id)accessibilityAllowedValues;
- (id)accessibilityApplicationFocusedUIElement;
- (unsigned long long)accessibilityArrayAttributeCount:(id)a0;
- (id)accessibilityArrayAttributeValues:(id)a0 index:(unsigned long long)a1 maxCount:(unsigned long long)a2;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityAttributedStringForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)accessibilityAttributedUserInputLabels;
- (id)accessibilityAuditIssues;
- (id)accessibilityCancelButton;
- (id)accessibilityChartDescriptor;
- (id)accessibilityChildren;
- (id)accessibilityChildrenInNavigationOrder;
- (id)accessibilityClearButton;
- (id)accessibilityCloseButton;
- (long long)accessibilityColumnCount;
- (id)accessibilityColumnHeaderUIElements;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityColumnIndexRange;
- (id)accessibilityColumnTitles;
- (id)accessibilityColumns;
- (long long)accessibilityContainerType;
- (id)accessibilityContentSiblingAbove;
- (id)accessibilityContentSiblingBelow;
- (id)accessibilityContents;
- (id)accessibilityCriticalValue;
- (id)accessibilityCustomActions;
- (id)accessibilityCustomChoosers;
- (id)accessibilityCustomContent;
- (id)accessibilityCustomRotors;
- (id)accessibilityDecrementButton;
- (id)accessibilityDefaultButton;
- (id)accessibilityDisclosedByRow;
- (id)accessibilityDisclosedRows;
- (long long)accessibilityDisclosureLevel;
- (id)accessibilityDocument;
- (id)accessibilityEmbeddedImageDescription;
- (id)accessibilityExtrasMenuBar;
- (id)accessibilityFilename;
- (id)accessibilityFirstContentSibling;
- (void)accessibilityFocusedElementDidChange;
- (id)accessibilityFocusedWindow;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrameForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)accessibilityFullScreenButton;
- (id)accessibilityFunctionRowTopLevelElements;
- (id)accessibilityGrowArea;
- (id)accessibilityHandles;
- (id)accessibilityHeader;
- (id)accessibilityHeaderForColumnIndex:(long long)a0;
- (id)accessibilityHeaderGroup;
- (id)accessibilityHelp;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)accessibilityHorizontalScrollBar;
- (id)accessibilityHorizontalUnitDescription;
- (long long)accessibilityHorizontalUnits;
- (id)accessibilityIdentifier;
- (id)accessibilityIncrementButton;
- (long long)accessibilityIndex;
- (unsigned long long)accessibilityIndexOfChild:(id)a0;
- (long long)accessibilityInsertionPointLineNumber;
- (char)accessibilityIsAttributeSettable:(id)a0;
- (char)accessibilityIsIgnored;
- (id)accessibilityLabel;
- (id)accessibilityLabelUIElements;
- (float)accessibilityLabelValue;
- (struct CGPoint { double x0; double x1; })accessibilityLayoutPointForScreenPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })accessibilityLayoutSizeForScreenSize:(struct CGSize { double x0; double x1; })a0;
- (long long)accessibilityLineForIndex:(long long)a0;
- (id)accessibilityLinkedUIElements;
- (id)accessibilityMainWindow;
- (id)accessibilityMarkerGroupUIElement;
- (id)accessibilityMarkerTypeDescription;
- (id)accessibilityMarkerUIElements;
- (id)accessibilityMarkerValues;
- (id)accessibilityMaxValue;
- (id)accessibilityMenuBar;
- (void)accessibilityMenuDidClose;
- (void)accessibilityMenuDidOpen;
- (id)accessibilityMinValue;
- (id)accessibilityMinimizeButton;
- (id)accessibilityNextContents;
- (long long)accessibilityOrientation;
- (id)accessibilityOverflowButton;
- (char)accessibilityOverridesAlwaysTakePrecedence;
- (id)accessibilityParent;
- (id)accessibilityPath;
- (void)accessibilityPerformAction:(id)a0;
- (char)accessibilityPerformCancel;
- (char)accessibilityPerformConfirm;
- (char)accessibilityPerformDecrement;
- (char)accessibilityPerformDelete;
- (char)accessibilityPerformIncrement;
- (char)accessibilityPerformPick;
- (char)accessibilityPerformPress;
- (char)accessibilityPerformRaise;
- (char)accessibilityPerformShowAlternateUI;
- (char)accessibilityPerformShowDefaultUI;
- (char)accessibilityPerformShowMenu;
- (id)accessibilityPlaceholderValue;
- (id)accessibilityPreferredLanguage;
- (id)accessibilityPreviousContentSibling;
- (id)accessibilityPreviousContents;
- (id)accessibilityProxy;
- (id)accessibilityRTFForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityRangeForIndex:(long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityRangeForLine:(long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityRangeForPosition:(struct CGPoint { double x0; double x1; })a0;
- (id)accessibilityResultsForSearchPredicate:(id)a0;
- (id)accessibilityRole;
- (id)accessibilityRoleDescription;
- (long long)accessibilityRowCount;
- (id)accessibilityRowHeaderUIElements;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityRowIndexRange;
- (id)accessibilityRows;
- (long long)accessibilityRulerMarkerType;
- (struct CGPoint { double x0; double x1; })accessibilityScreenPointForLayoutPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })accessibilityScreenSizeForLayoutSize:(struct CGSize { double x0; double x1; })a0;
- (id)accessibilitySearchButton;
- (id)accessibilitySearchMenu;
- (id)accessibilitySections;
- (id)accessibilitySelectedCells;
- (id)accessibilitySelectedChildren;
- (void)accessibilitySelectedChildrenDidChange;
- (id)accessibilitySelectedColumns;
- (id)accessibilitySelectedRows;
- (id)accessibilitySelectedText;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilitySelectedTextRange;
- (id)accessibilityServesAsTitleForUIElements;
- (char)accessibilitySetOverrideValue:(id)a0 forAttribute:(id)a1;
- (void)accessibilitySetValue:(id)a0 forAttribute:(id)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilitySharedCharacterRange;
- (id)accessibilitySharedFocusElements;
- (id)accessibilitySharedTextUIElements;
- (char)accessibilityShouldUseUniqueId;
- (id)accessibilityShownMenu;
- (long long)accessibilitySortDirection;
- (id)accessibilitySplitters;
- (id)accessibilityStringForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityStyleRangeForIndex:(long long)a0;
- (id)accessibilitySubrole;
- (char)accessibilitySupportsOverriddenAttributes;
- (id)accessibilityTabs;
- (id)accessibilityTitle;
- (id)accessibilityTitleUIElement;
- (id)accessibilityToolbarButton;
- (id)accessibilityTopLevelUIElement;
- (id)accessibilityURL;
- (id)accessibilityUnitDescription;
- (long long)accessibilityUnits;
- (id)accessibilityUserInputLabels;
- (id)accessibilityValue;
- (id)accessibilityValueDescription;
- (id)accessibilityVerticalScrollBar;
- (id)accessibilityVerticalUnitDescription;
- (long long)accessibilityVerticalUnits;
- (id)accessibilityVisibleCells;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityVisibleCharacterRange;
- (id)accessibilityVisibleChildren;
- (id)accessibilityVisibleColumns;
- (id)accessibilityVisibleRows;
- (id)accessibilityWarningValue;
- (id)accessibilityWindow;
- (id)accessibilityWindows;
- (id)accessibilityZoomButton;
- (id)addItemWithTitle:(id)a0 action:(SEL)a1 keyEquivalent:(id)a2;
- (id)appearanceParent;
- (id)attachedMenu;
- (void)cancelTracking;
- (void)cancelTrackingWithoutAnimation;
- (id)contextMenuRepresentation;
- (char)hasBeenSuppressed;
- (void)helpRequested:(id)a0;
- (void)highlightItem:(id)a0;
- (long long)indexOfItem:(id)a0;
- (long long)indexOfItemWithRepresentedObject:(id)a0;
- (long long)indexOfItemWithSubmenu:(id)a0;
- (long long)indexOfItemWithTag:(long long)a0;
- (long long)indexOfItemWithTarget:(id)a0 andAction:(SEL)a1;
- (long long)indexOfItemWithTitle:(id)a0;
- (void)insertItem:(id)a0 atIndex:(long long)a1;
- (id)insertItemWithTitle:(id)a0 action:(SEL)a1 keyEquivalent:(id)a2 atIndex:(long long)a3;
- (char)isAccessibilityEnhancedUserInterface;
- (char)isAccessibilityMimicNativeView;
- (char)isAttached;
- (char)isMenuWindowVisible;
- (char)isTornOff;
- (void)itemChanged:(id)a0;
- (id)itemWithTag:(long long)a0;
- (id)itemWithTitle:(id)a0;
- (double)lastEnableTime;
- (unsigned long long)lastPopulateFlags;
- (double)lastPopulateTime;
- (struct CGPoint { double x0; double x1; })locationForSubmenu:(id)a0;
- (char)menuChangedMessagesEnabled;
- (id)menuRepresentation;
- (unsigned long long)minModifiersCacheTag;
- (char)openWithOptions:(long long)a0;
- (char)openWithOptions:(long long)a0 selectedItem:(long long)a1;
- (void)performActionForItemAtIndex:(long long)a0;
- (char)performKeyEquivalent:(id)a0;
- (char)popUpMenuPositioningItem:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (char)popUpMenuPositioningItem:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 appearance:(id)a3;
- (void)postAccessibilityNotification:(id)a0;
- (long long)presentationStyle;
- (unsigned long long)propertiesToUpdate;
- (void)recordKeyboardShortcutEvent:(id)a0 withKeyEquivalent:(id)a1 modifierMask:(unsigned long long)a2 title:(id)a3;
- (id)remoteAccessibilityParent;
- (void)removeFromKeyCache;
- (void)removeItemAtIndex:(long long)a0;
- (id)safeItemAtIndex:(long long)a0;
- (id)selectedItems;
- (long long)selectionMode;
- (void)setAccessibilityActivationPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setAccessibilityAllowedValues:(id)a0;
- (void)setAccessibilityAlternateUIVisible:(char)a0;
- (void)setAccessibilityApplicationFocusedUIElement:(id)a0;
- (void)setAccessibilityAttributedUserInputLabels:(id)a0;
- (void)setAccessibilityAuditIssues:(id)a0;
- (void)setAccessibilityAutoInteractable:(char)a0;
- (void)setAccessibilityCancelButton:(id)a0;
- (void)setAccessibilityChartDescriptor:(id)a0;
- (void)setAccessibilityChildren:(id)a0;
- (void)setAccessibilityChildrenInNavigationOrder:(id)a0;
- (void)setAccessibilityClearButton:(id)a0;
- (void)setAccessibilityCloseButton:(id)a0;
- (void)setAccessibilityColumnCount:(long long)a0;
- (void)setAccessibilityColumnHeaderUIElements:(id)a0;
- (void)setAccessibilityColumnIndexRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilityColumnTitles:(id)a0;
- (void)setAccessibilityColumns:(id)a0;
- (void)setAccessibilityContainerType:(long long)a0;
- (void)setAccessibilityContentSiblingAbove:(id)a0;
- (void)setAccessibilityContentSiblingBelow:(id)a0;
- (void)setAccessibilityContents:(id)a0;
- (void)setAccessibilityCriticalValue:(id)a0;
- (void)setAccessibilityCustomActions:(id)a0;
- (void)setAccessibilityCustomContent:(id)a0;
- (void)setAccessibilityCustomRotors:(id)a0;
- (void)setAccessibilityDecrementButton:(id)a0;
- (void)setAccessibilityDefaultButton:(id)a0;
- (void)setAccessibilityDisclosed:(char)a0;
- (void)setAccessibilityDisclosedRows:(id)a0;
- (void)setAccessibilityDisclosureLevel:(long long)a0;
- (void)setAccessibilityDocument:(id)a0;
- (void)setAccessibilityEdited:(char)a0;
- (void)setAccessibilityElement:(char)a0;
- (void)setAccessibilityEmbeddedImageDescription:(id)a0;
- (void)setAccessibilityEnabled:(char)a0;
- (void)setAccessibilityEnhancedUserInterface:(char)a0;
- (void)setAccessibilityExpanded:(char)a0;
- (void)setAccessibilityExtrasMenuBar:(id)a0;
- (void)setAccessibilityFilename:(id)a0;
- (void)setAccessibilityFirstContentSibling:(id)a0;
- (void)setAccessibilityFocused:(char)a0;
- (void)setAccessibilityFocusedWindow:(id)a0;
- (void)setAccessibilityFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setAccessibilityFrameInParentSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setAccessibilityFrontmost:(char)a0;
- (void)setAccessibilityFullScreenButton:(id)a0;
- (void)setAccessibilityFunctionRowTopLevelElements:(id)a0;
- (void)setAccessibilityGrowArea:(id)a0;
- (void)setAccessibilityHandles:(id)a0;
- (void)setAccessibilityHeader:(id)a0;
- (void)setAccessibilityHeaderGroup:(id)a0;
- (void)setAccessibilityHelp:(id)a0;
- (void)setAccessibilityHidden:(char)a0;
- (void)setAccessibilityHorizontalScrollBar:(id)a0;
- (void)setAccessibilityHorizontalUnitDescription:(id)a0;
- (void)setAccessibilityHorizontalUnits:(long long)a0;
- (void)setAccessibilityIdentifier:(id)a0;
- (void)setAccessibilityIncrementButton:(id)a0;
- (void)setAccessibilityIndex:(long long)a0;
- (void)setAccessibilityInsertionPointLineNumber:(long long)a0;
- (void)setAccessibilityLabel:(id)a0;
- (void)setAccessibilityLabelUIElements:(id)a0;
- (void)setAccessibilityLabelValue:(float)a0;
- (void)setAccessibilityLastContentSibling:(id)a0;
- (void)setAccessibilityLinkedUIElements:(id)a0;
- (void)setAccessibilityMain:(char)a0;
- (void)setAccessibilityMainWindow:(id)a0;
- (void)setAccessibilityMarkerGroupUIElement:(id)a0;
- (void)setAccessibilityMarkerTypeDescription:(id)a0;
- (void)setAccessibilityMarkerUIElements:(id)a0;
- (void)setAccessibilityMarkerValues:(id)a0;
- (void)setAccessibilityMaxValue:(id)a0;
- (void)setAccessibilityMenuBar:(id)a0;
- (void)setAccessibilityMimicNativeView:(char)a0;
- (void)setAccessibilityMinValue:(id)a0;
- (void)setAccessibilityMinimized:(char)a0;
- (void)setAccessibilityModal:(char)a0;
- (void)setAccessibilityNextContents:(id)a0;
- (void)setAccessibilityNumberOfCharacters:(long long)a0;
- (void)setAccessibilityOrderedByRow:(char)a0;
- (void)setAccessibilityOrientation:(long long)a0;
- (void)setAccessibilityOverridesAlwaysTakePrecedence:(char)a0;
- (void)setAccessibilityParent:(id)a0;
- (void)setAccessibilityPath:(id)a0;
- (void)setAccessibilityPlaceholderValue:(id)a0;
- (void)setAccessibilityPreferredLanguage:(id)a0;
- (void)setAccessibilityPreviousContents:(id)a0;
- (void)setAccessibilityProtectedContent:(char)a0;
- (void)setAccessibilityProxy:(id)a0;
- (void)setAccessibilityRequired:(char)a0;
- (void)setAccessibilityRole:(id)a0;
- (void)setAccessibilityRoleDescription:(id)a0;
- (void)setAccessibilityRowCount:(long long)a0;
- (void)setAccessibilityRowHeaderUIElements:(id)a0;
- (void)setAccessibilityRowIndexRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilityRows:(id)a0;
- (void)setAccessibilityRulerMarkerType:(long long)a0;
- (void)setAccessibilitySearchButton:(id)a0;
- (void)setAccessibilitySearchMenu:(id)a0;
- (void)setAccessibilitySections:(id)a0;
- (void)setAccessibilitySelected:(char)a0;
- (void)setAccessibilitySelectedCells:(id)a0;
- (void)setAccessibilitySelectedChildren:(id)a0;
- (void)setAccessibilitySelectedColumns:(id)a0;
- (void)setAccessibilitySelectedRows:(id)a0;
- (void)setAccessibilitySelectedText:(id)a0;
- (void)setAccessibilitySelectedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilitySelectedTextRanges:(id)a0;
- (void)setAccessibilityServesAsTitleForUIElements:(id)a0;
- (void)setAccessibilitySharedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilitySharedFocusElements:(id)a0;
- (void)setAccessibilitySharedTextUIElements:(id)a0;
- (void)setAccessibilityShownMenu:(id)a0;
- (void)setAccessibilitySortDirection:(long long)a0;
- (void)setAccessibilitySplitters:(id)a0;
- (void)setAccessibilitySubrole:(id)a0;
- (void)setAccessibilityTabs:(id)a0;
- (void)setAccessibilityTitle:(id)a0;
- (void)setAccessibilityToolbarButton:(id)a0;
- (void)setAccessibilityTopLevelUIElement:(id)a0;
- (void)setAccessibilityURL:(id)a0;
- (void)setAccessibilityUnitDescription:(id)a0;
- (void)setAccessibilityUnits:(long long)a0;
- (void)setAccessibilityUserInputLabels:(id)a0;
- (void)setAccessibilityValue:(id)a0;
- (void)setAccessibilityValueDescription:(id)a0;
- (void)setAccessibilityVerticalScrollBar:(id)a0;
- (void)setAccessibilityVerticalUnitDescription:(id)a0;
- (void)setAccessibilityVerticalUnits:(long long)a0;
- (void)setAccessibilityVisibleCells:(id)a0;
- (void)setAccessibilityVisibleCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setAccessibilityVisibleChildren:(id)a0;
- (void)setAccessibilityVisibleRows:(id)a0;
- (void)setAccessibilityWarningValue:(id)a0;
- (void)setAccessibilityWindow:(id)a0;
- (void)setAccessibilityWindows:(id)a0;
- (void)setAccessibilityZoomButton:(id)a0;
- (void)setAppearanceParent:(id)a0;
- (void)setContextMenuRepresentation:(id)a0;
- (void)setHasBeenSuppressed:(char)a0;
- (void)setLastEnableTime:(double)a0;
- (void)setLastPopulateFlags:(unsigned long long)a0;
- (void)setLastPopulateTime:(double)a0;
- (void)setMenuChangedMessagesEnabled:(char)a0;
- (void)setMenuRepresentation:(id)a0;
- (void)setMinModifiersCacheTag:(unsigned long long)a0;
- (void)setNextContentSibling:(id)a0;
- (void)setPresentationStyle:(long long)a0;
- (void)setPreviousContentSibling:(id)a0;
- (void)setSelectedItems:(id)a0;
- (void)setSelectionMode:(long long)a0;
- (void)setSubmenu:(id)a0 forItem:(id)a1;
- (void)setSystemAttributes:(unsigned long long)a0;
- (void)setTearOffMenuRepresentation:(id)a0;
- (void)setUniqueIdentifier:(id)a0;
- (void)sizeToFit;
- (id)storyboard;
- (void)suppressMenuCommandKeys:(char)a0;
- (unsigned long long)systemAttributes;
- (id)tearOffMenuRepresentation;
- (void)update;
- (id)userInterfaceItemIdentifier;

@end
