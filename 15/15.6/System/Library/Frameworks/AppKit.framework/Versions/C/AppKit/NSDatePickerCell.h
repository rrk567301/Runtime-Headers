@class NSTimeZone, NSCalendar, NSLocale, NSDate, NSColor;
@protocol NSDatePickerCellDelegate;

@interface NSDatePickerCell : NSActionCell {
    double _timeInterval;
    NSDate *_minDate;
    NSDate *_maxDate;
    struct __dateCellFlags { unsigned short elements : 16; unsigned char controlStyle : 3; unsigned char controlMode : 2; unsigned char trackingHand : 2; unsigned char reserved2 : 4; unsigned char drawsBackground : 1; unsigned char digitsEntered : 2; unsigned char forcesLeadingZeroes : 1; unsigned char wrapsDateComponentArithmetic : 1; } _dcFlags;
    id<NSDatePickerCellDelegate> _delegate;
    NSCalendar *_calendar;
    NSLocale *_locale;
    NSTimeZone *_timeZone;
    NSColor *_backgroundColor;
    NSColor *_textColor;
    char _useCurrentDateDuringDecoding;
    char _force24Hr;
    char _mouseInside;
    int _indexOfSelectedSubfield;
    id _reserved1;
    id _reserved2;
    id _reserved3;
    id _reserved4;
}

@property (setter=_setUseCurrentDateDuringDecoding:) char _useCurrentDateDuringDecoding;
@property unsigned long long datePickerStyle;
@property char drawsBackground;
@property (copy) NSColor *backgroundColor;
@property (copy) NSColor *textColor;
@property unsigned long long datePickerMode;
@property unsigned long long datePickerElements;
@property (copy) NSCalendar *calendar;
@property (copy) NSLocale *locale;
@property (copy) NSTimeZone *timeZone;
@property (copy) NSDate *dateValue;
@property double timeInterval;
@property (copy) NSDate *minDate;
@property (copy) NSDate *maxDate;
@property (weak) id<NSDatePickerCellDelegate> delegate;

+ (void)initialize;
+ (id)_calendarHeaderFont;
+ (id)_calendarHeaderFontOfSize:(double)a0;
+ (double)_calendarHeaderFontSize;
+ (id)_calendarWeekDayHeaderFont;
+ (id)_sharedDateFormatter;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setEnabled:(char)a0;
- (void)setObjectValue:(id)a0;
- (id)_dateFromComponents:(id)a0;
- (id)accessibilityActionDescription:(id)a0;
- (void)setControlView:(id)a0;
- (void)_setPM:(char)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_subfieldsFrame;
- (void)accessibilitySetValueAttribute:(id)a0;
- (void)_addEditableSubfieldForElement:(int)a0 dateFormat:(id)a1;
- (void)_addStaticSubfieldWithString:(id)a0;
- (void)_addSubfieldForElement:(int)a0 withDateFormat:(id)a1 referenceStrings:(id)a2;
- (id)_adjustDate:(id)a0 byEras:(long long)a1 years:(long long)a2 months:(long long)a3 days:(long long)a4 hours:(long long)a5 minutes:(long long)a6 seconds:(long long)a7;
- (void)_adjustDatePickerElement:(int)a0 by:(long long)a1 returnCalendarToHomeMonth:(char)a2;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_alignmentRectInsetsForThemeBezelWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (char)_allocateDatePickerCellExtraIvars;
- (char)_analogClockTrackMouse:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 untilMouseUp:(char)a3;
- (void)_applyCurrentDateOnDecodeIfNecessary;
- (void)_autoAdvanceCalendar:(id)a0;
- (id)_calendarContentAttributedStringWithSelectedDayCells:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)_calendarDateComponentsForPoint:(struct CGPoint { double x0; double x1; })a0 inCalendarRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)_calendarDateComponentsOfFirstDayOfDisplayedMonthOffset:(long long)a0;
- (id)_calendarDayNamesStringForFirstWeekday:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_calendarDaysFrameForDatePickerCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_calendarFirstDayOfDisplayedMonthDateComponents;
- (long long)_calendarFirstWeekday;
- (id)_calendarHeaderTextColorBasedOnEnabledState;
- (char)_calendarIsRTL;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_calendarRangeOfAllDaysForDisplayedMonth;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_calendarRangeOfAllDaysForDisplayedMonthOffset:(long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_calendarRangeOfSelectedDaysForDisplayedMonthOffset:(long long)a0;
- (id)_calendarWeekdayHeaderTextColorBasedOnEnabledState;
- (void)_cancelSubfieldFieldChanges;
- (void)_cancelUserEditTimer;
- (char)_caseInsensitiveCompareCharacter:(unsigned short)a0 toCharacter:(unsigned short)a1;
- (void)_clampDayToValidRangeInDateComponents:(id)a0;
- (void)_clockAndCalendarAdvanceMonth;
- (id)_clockAndCalendarAdvanceMonthCell;
- (struct CGSize { double x0; double x1; })_clockAndCalendarCellSize;
- (char)_clockAndCalendarContinueTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (void)_clockAndCalendarFillDayCell:(long long)a0 withColor:(id)a1 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 inView:(id)a3;
- (void)_clockAndCalendarFillDayCellRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withColor:(id)a1 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 inView:(id)a3;
- (void)_clockAndCalendarGetClockFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 calendarFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 retreatMonthCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2 advanceMonthCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a3 returnToHomeMonthButtonCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a4 forDatePickerCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a5;
- (char)_clockAndCalendarIsTargetMonthLeapMonth:(id)a0 offset:(long long)a1;
- (char)_clockAndCalendarKeyDown:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (void)_clockAndCalendarLeftArrowClicked:(id)a0;
- (void)_clockAndCalendarRetreatMonth;
- (id)_clockAndCalendarRetreatMonthCell;
- (void)_clockAndCalendarReturnToHomeMonth:(id)a0;
- (id)_clockAndCalendarReturnToHomeMonthButtonCell;
- (void)_clockAndCalendarRightArrowClicked:(id)a0;
- (char)_clockAndCalendarStartTrackingAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)_clockAndCalendarStopTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 mouseIsUp:(char)a3;
- (void)_clockAndCalendarTakeDisplayedMonthFromDateValue;
- (void)_clockAndCalendarTakeDisplayedMonthFromTodaysDate;
- (char)_clockAndCalendarTrackMouse:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 untilMouseUp:(char)a3;
- (void)_commitSubfieldFieldChanges;
- (id)_componentsOfInterestToDatePickerFromDate:(id)a0;
- (id)_concoctUnholyAbominationOfADateFormatThatMakesAMockeryOfLocalization;
- (char)_constrainAndSetDateValue:(id)a0 timeInterval:(double)a1 sendActionIfChanged:(char)a2 beepIfNoChange:(char)a3 returnCalendarToHomeMonth:(char)a4 preserveFractionalSeconds:(char)a5;
- (id)_constrainDateValue:(id)a0 timeInterval:(double *)a1;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_contentInsetsForThemeBezelWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_controlViewDidChangeEffectiveSemanticContext:(id)a0;
- (id)_coreUIDrawOptionsForThemeBezelWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_createSubfields;
- (id)_dateFormatByForcing24HourModeFromFormatString:(id)a0;
- (id)_dateFormatter;
- (char)_dateIsAM:(id)a0;
- (void)_datePreferencesDidChange:(id)a0;
- (long long)_dayOfWeekForDate:(id)a0;
- (void)_decrementSelectedSubfield;
- (void)_deleteDigit;
- (struct CGSize { double x0; double x1; })_desiredTextAreaSize;
- (long long)_digitForLocalizedDigitCharacter:(unsigned short)a0;
- (id)_disabledTextColor;
- (void)_drawAnalogClockWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_drawClockAndCalendarWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_drawTextFieldWithStepperWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_drawThemeBezelWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (id)_effectiveCalendar;
- (void)_effectiveFontDidChangeTo:(id)a0;
- (id)_effectiveLocale;
- (int)_elementAtSubfieldIndex:(unsigned long long)a0;
- (void)_finishPendingEdit;
- (char)_fixUpDatePickerElementFlags;
- (char)_forcesLeadingZeroes;
- (id)_formatGregorianYearWithDate:(id)a0;
- (char)_getCurrentAMCharacter:(unsigned short *)a0 pmCharacter:(unsigned short *)a1;
- (void)_getTextAreaFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 stepperCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 forDatePickerCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (char)_hasFocusRingInView:(id)a0;
- (unsigned long long)_hitTestClockAndCalendar:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (unsigned long long)_hitTestTextFieldWithStepper:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (void)_incrementSelectedSubfield;
- (long long)_indexOfSelectedSubfield;
- (long long)_indexOfSubfieldAtPoint:(struct CGPoint { double x0; double x1; })a0 inTextAreaFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_insertDigit:(long long)a0;
- (void)_invalidateDateFormatter;
- (char)_isFirstSubfieldSelected;
- (char)_isLastSubfieldSelected;
- (char)_localeIsRTL;
- (void)_makeSubfieldsWithHandler:(id /* block */)a0;
- (void)_notifyDelegateIndexOfSelectedSubfieldDidChange;
- (id)_numberFormatter;
- (id)_preferredFontForFont:(id)a0;
- (char)_processKeyDownCharacters:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeOfDaysForMonth:(long long)a0 year:(long long)a1;
- (id)_referenceDatesForElement:(int)a0;
- (void)_registerForDatePreferencesChanges;
- (void)_resetUserEditTimer;
- (void)_selectFirstSubfield;
- (void)_selectLastSubfield;
- (void)_selectNextSubfield;
- (void)_selectPreviousSubfield;
- (char)_selectSubfieldWithElement:(int)a0;
- (id)_selectedSubfield;
- (int)_selectedSubfieldElement;
- (void)_setDisabledTextColor:(id)a0;
- (void)_setForce24Hr:(char)a0;
- (void)_setForcesLeadingZeroes:(char)a0;
- (void)_setStepper:(id)a0;
- (void)_setWrapsDateComponentArithmetic:(char)a0;
- (char)_shouldShowFocusRingInView:(id)a0;
- (id)_stepper;
- (id)_stepperCell;
- (double)_stepperCellTopAndBottomTrim;
- (void)_stepperCellValueChanged:(id)a0;
- (char)_stepperIsRTL;
- (id)_stringForDatePickerElement:(int)a0 usingDateFormat:(id)a1;
- (double)_subfieldOffsetForTextAreaFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_subfields;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_subfieldsFrameAccountingForTextAreaFrameInBounds;
- (id)_textColorBasedOnEnabledState;
- (long long)_textFieldAlignment;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_textFieldAlignmentRectInsets;
- (struct CGSize { double x0; double x1; })_textFieldCellSize;
- (struct CGSize { double x0; double x1; })_textFieldWithStepperCellSize;
- (char)_textFieldWithStepperKeyDown:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (char)_textFieldWithStepperTrackMouse:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 untilMouseUp:(char)a3;
- (void)_toggleAMPM;
- (void)_unregisterForDatePreferencesChanges;
- (void)_updateMouseTracking;
- (void)_updateSubfieldStringsForDateChange;
- (char)_useChineseSetting;
- (void)_userEditExpired:(id)a0;
- (char)_wrapsDateComponentArithmetic;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityDateTimeComponentsAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (char)accessibilityIsDateTimeComponentsAttributeSettable;
- (char)accessibilityIsMaxValueAttributeSettable;
- (char)accessibilityIsMinValueAttributeSettable;
- (char)accessibilityIsValueAttributeSettable;
- (id)accessibilityMaxValueAttribute;
- (id)accessibilityMinValueAttribute;
- (void)accessibilityPerformAction:(id)a0;
- (id)accessibilityRoleAttribute;
- (id)accessibilityValueAttribute;
- (struct CGSize { double x0; double x1; })cellSize;
- (char)continueTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (unsigned long long)hitTestForEvent:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (id)initTextCell:(id)a0;
- (char)keyDown:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (char)startTrackingAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)stopTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 mouseIsUp:(char)a3;
- (char)trackMouse:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 untilMouseUp:(char)a3;

@end
