@class _NSFullScreenContentController, NSString, _NSFullScreenMouseDetectionWindow, NSTitlebarAccessoryViewController, NSToolbarFullScreenWindow, NSTitlebarView, NSAnimation, NSToolbar, NSTitlebarContainerView;

@interface _NSFullScreenMenuBarCompanionController : NSObject <NSAnimationDelegate> {
    char _invalid;
    double _menuBarReveal;
    double _toolbarWindowReveal;
    NSAnimation *_toolbarRevealAnimation;
    NSToolbarFullScreenWindow *_toolbarWindow;
    NSToolbar *_toolbar;
    unsigned int _autohideDisabledCounter;
    unsigned int _forceWindowVisibleCounter;
    double _autohideHeight;
    double _lastSetAutohideHeight;
    unsigned long long _lastMenuBarCompanionSpaceID;
    char _isForcingToolbarVisibleForSheet;
    char _hasAutohideToolbar;
    char _shouldAutomaticallyAutohideToolbar;
    char _registeredForNotes;
    char _inLayout;
    char _windowIsInFullScreen;
    _NSFullScreenMouseDetectionWindow *_mouseDetectionWindow;
    id _screenObserver;
    long long _menuTrackingCount;
}

@property double menuBarReveal;
@property double toolbarWindowReveal;
@property (weak) _NSFullScreenContentController *contentController;
@property (weak) NSTitlebarContainerView *titlebarContainerView;
@property (weak) NSTitlebarView *titlebarView;
@property (weak) NSTitlebarAccessoryViewController *auxiliaryViewController;
@property (nonatomic) char isHandlingHotKeyEvent;
@property (nonatomic) char needsOpaqueBackstop;
@property (retain, nonatomic) NSToolbar *toolbar;
@property (nonatomic, getter=isSidebarOverlaid) char sidebarOverlaid;
@property (nonatomic) char detachedFromMenuBar;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (void).cxx_destruct;
- (void)layout;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)dispose;
- (void)registerForWindowNotifications:(char)a0;
- (void)updateForTabbedWindowOrderFront;
- (void)updateMenuBarScreenRevealHeight;
- (unsigned long long)windowStyleMask;
- (void)_addViewControllerToWindow;
- (void)_animateToolbarRevealTo:(double)a0;
- (struct CGPoint { double x0; double x1; })_calcWindowTopLeft;
- (long long)_currentChildWindowOrderingPriority;
- (void)_disableFullScreenAutohidingForToolbar:(id)a0;
- (void)_disableFullScreenForceVisibleForToolbar:(id)a0;
- (void)_doDidEnterFullScreen;
- (void)_enableFullScreenAutohidingForToolbar:(id)a0;
- (void)_enableFullScreenForceVisibleForToolbar:(id)a0;
- (void)_forceUpdateSpaceAndMenubarCompanionWindowAutohideHeight;
- (void)_makeWindowIfNecessary;
- (char)_originalWindowHasAutohideToolbarSet;
- (char)_originalWindowShouldAutomaticallyAutohide;
- (void)_relinquishTitlebar;
- (char)_shouldDrawBaselineForEffectiveReveal:(double)a0;
- (char)_shouldToolbarFloatAboveSiblings;
- (void)_synchronizeMenuBarReveal;
- (void)_updateMenuBarReveal:(double)a0 toolbarReveal:(double)a1;
- (void)_updateMenubarCompanionWindowAutohideHeight;
- (void)_updateMenubarCompanionWindowAutohideHeightAndPosition;
- (void)_updateMouseDetectionWindowIfNecessary;
- (void)_updateSpaceAndMenubarCompanionWindowAutohideHeight;
- (void)_updateSpaceIfNecessary;
- (double)_visibleWindowHeight;
- (double)_visibleWindowHeightIncludingShadow;
- (void)addAsChildOfContentWindow;
- (void)animationDidEnd:(id)a0;
- (void)animationDidStop:(id)a0;
- (char)autohideDisabled;
- (void)autohideHeightChanged;
- (double)correctWindowTopTarget;
- (double)desiredWindowHeight;
- (void)detachFromMenuBar;
- (void)didChangeAuxiliaryViewControllers;
- (double)effectiveAutohideHeight;
- (double)effectiveClampedAutohideHeight;
- (void)establishAutohideBehavior;
- (struct NSToolbarFullScreenContentViewLayout_t { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x5; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; })getToolbarLayout;
- (void)layoutTitlebarViews;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void)removeAsChildOfContentWindow;
- (void)reshapeToolbarWindowFrame;
- (void)resizeContentWindow;
- (void)someMenuBeganTracking:(id)a0;
- (void)someMenuEndedTracking:(id)a0;
- (void)tile;
- (void)toolbar:(id)a0 didChangeFrameSizeFromOldSize:(struct CGSize { double x0; double x1; })a1;
- (id)toolbarWindow;
- (struct CGSize { double x0; double x1; })toolbarWindowSize;
- (struct CGPoint { double x0; double x1; })topCenterForSheet:(id)a0;
- (void)updateContentViewForReveal;
- (void)updateTitlebarViewBlendingMode;
- (void)updateWindowAlpha;
- (void)updateWindowAndContentView;
- (void)updateWindowHeight;
- (void)updateWindowLayout;
- (void)updateWindowVisibility;
- (void)windowDidChangeFullScreenStatus:(id)a0;
- (void)windowDidChangeSheetNotification:(id)a0;
- (void)windowWillExitFullScreenNotification:(id)a0;

@end
