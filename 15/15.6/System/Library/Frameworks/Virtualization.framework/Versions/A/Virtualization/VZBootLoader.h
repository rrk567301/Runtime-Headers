@class NSString;

@interface VZBootLoader : NSObject <_VZVirtualMachineConfigurationEncodable, _VZVirtualMachineConfigurationResourceProvider, NSCopying>

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)_init;
- (struct Expected<void, NSError *> { union storage<void, NSError *> { char x0; id x1; } x0; BOOL x1; })validate;
- (struct Expected<std::variant<VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot>, NSError *> { union storage<std::variant<VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot>, NSError *> { char x0; struct variant<VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot> { struct __impl<VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot> { union __union<std::__variant_detail::_Trait::_Available, 0UL, VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot> { char x0; struct __alt<0UL, VzCore::VirtualMachineConfiguration::BootLoaders::Binary> { struct Binary { struct vector<VzCore::VirtualMachineConfiguration::BootLoaders::Binary::Segment, std::allocator<VzCore::VirtualMachineConfiguration::BootLoaders::Binary::Segment>> { struct Segment *x0; struct Segment *x1; struct __compressed_pair<VzCore::VirtualMachineConfiguration::BootLoaders::Binary::Segment *, std::allocator<VzCore::VirtualMachineConfiguration::BootLoaders::Binary::Segment>> { struct Segment *x0; } x2; } x0; unsigned long long x1; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 1UL, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot> { char x0; struct __alt<1UL, VzCore::VirtualMachineConfiguration::BootLoaders::Efi> { struct Efi { struct optional<Base::FileDescriptor> { union { char x0; struct FileDescriptor { int x0; } x1; } x0; BOOL x1; } x0; struct VariableStore { struct shared_ptr<Base::VirtualMemory::Handle> { struct Handle *x0; struct __shared_weak_count *x1; } x0; } x1; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 2UL, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot> { char x0; struct __alt<2UL, VzCore::VirtualMachineConfiguration::BootLoaders::Linux> { struct Linux { struct FileDescriptor { int x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x1; struct FileDescriptor { int x0; } x2; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 3UL, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot> { char x0; struct __alt<3UL, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs> { struct MacOs { struct variant<VzCore::Booting::AvpBooter::Version, Base::FileDescriptor> { struct __impl<VzCore::Booting::AvpBooter::Version, Base::FileDescriptor> { union __union<std::__variant_detail::_Trait::_Available, 0UL, VzCore::Booting::AvpBooter::Version, Base::FileDescriptor> { char x0; struct __alt<0UL, VzCore::Booting::AvpBooter::Version> { int x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 1UL, Base::FileDescriptor> { char x0; struct __alt<1UL, Base::FileDescriptor> { struct FileDescriptor { int x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 2UL> { } x2; } x2; } x0; unsigned int x1; } x0; } x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 4UL, VzCore::VirtualMachineConfiguration::BootLoaders::MachO, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot> { char x0; struct __alt<4UL, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { struct MachO { struct FileDescriptor { int x0; } x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 5UL, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot> { char x0; struct __alt<5UL, VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot> { struct Multiboot { struct FileDescriptor { int x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x1; struct vector<VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot::Module, std::allocator<VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot::Module>> { struct Module *x0; struct Module *x1; struct __compressed_pair<VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot::Module *, std::allocator<VzCore::VirtualMachineConfiguration::BootLoaders::Multiboot::Module>> { struct Module *x0; } x2; } x2; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 6UL> { } x2; } x2; } x2; } x2; } x2; } x2; } x0; unsigned int x1; } x0; } x1; id x2; } x0; BOOL x1; })_bootLoaderForConfiguration:(id)a0;
- (id)_localFileSystemResources;
- (struct Expected<NSDictionary *, NSError *> { union storage<NSDictionary *, NSError *> { char x0; id x1; id x2; } x0; BOOL x1; })encodeWithEncoder:(id)a0;

@end
