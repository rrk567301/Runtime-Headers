@class VZVirtualMachine, NSString, VZGraphicsDisplay, NSTrackingArea, NSScreen, _VZFramebufferView, NSCursor, NSView, CAFilter, VZObserverProxy;
@protocol _VZVirtualMachineViewDelegate;

@interface VZVirtualMachineView : NSView <VZGraphicsDisplayObserver> {
    VZVirtualMachine *_virtualMachine;
    VZGraphicsDisplay *_graphicsDisplay;
    id<_VZVirtualMachineViewDelegate> _delegate;
    long long _scaleMode;
    _VZFramebufferView *_framebufferView;
    id _resignKeyWindowObserver;
    id _becomeKeyWindowObserver;
    id _windowScreenChangeObserver;
    id _willEnterFullScreenObserver;
    id _didEnterFullScreenObserver;
    id _willExitFullScreenObserver;
    id _didExitFullScreenObserver;
    NSScreen *_currentScreen;
    char _isInFullScreenTransition;
    id _eventMonitor;
    id _keyEventMonitor;
    VZObserverProxy *_virtualMachineObserver;
    NSTrackingArea *_trackingArea;
    struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short *__value_; } __end_cap_; } _keys_down;
    char _capturesSystemKeys;
    char _guestIsUsingHostCursor;
    NSCursor *_currentGuestCursor;
    char _mouseIsInTrackingArea;
    char _virtualMachineIsRunning;
    char _showsHostCursor;
    char _didAttemptDisplayReconfigurationBeforeDisplayIsCapable;
    char _didResizeWhilePausedOrStopped;
    char _automaticallyReconfiguresDisplay;
    char _hasResizeVisualEffects;
    struct CGSize { double width; double height; } _frameSizeStartingResize;
    struct optional<_VZVirtualMachineViewScaleMode> { union { char __null_state_; long long __val_; } ; BOOL __engaged_; } _resizeOldScaleMode;
    CAFilter *_blurFilter;
    NSView *_crossfadeView;
    NSView *_backdropView;
    char _enableExtendedDynamicRange;
}

@property (setter=_setScaleMode:) long long _scaleMode;
@property (retain, setter=_setGraphicsDisplay:) VZGraphicsDisplay *_graphicsDisplay;
@property (weak, setter=_setDelegate:) id<_VZVirtualMachineViewDelegate> _delegate;
@property (readonly) char _canGrabMouseInput;
@property (readonly) char _canReleaseMouseInput;
@property (retain) VZVirtualMachine *virtualMachine;
@property char capturesSystemKeys;
@property char automaticallyReconfiguresDisplay;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;

- (void)dealloc;
- (void).cxx_destruct;
- (id)initWithCoder:(id)a0;
- (id).cxx_construct;
- (void)layout;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)otherMouseDown:(id)a0;
- (void)rightMouseDown:(id)a0;
- (char)acceptsFirstResponder;
- (char)becomeFirstResponder;
- (void)flagsChanged:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)keyDown:(id)a0;
- (void)keyUp:(id)a0;
- (void)magnifyWithEvent:(id)a0;
- (void)mouseDown:(id)a0;
- (void)mouseDragged:(id)a0;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void)mouseMoved:(id)a0;
- (void)mouseUp:(id)a0;
- (void)otherMouseDragged:(id)a0;
- (void)otherMouseUp:(id)a0;
- (void)quickLookWithEvent:(id)a0;
- (char)resignFirstResponder;
- (void)rightMouseDragged:(id)a0;
- (void)rightMouseUp:(id)a0;
- (void)rotateWithEvent:(id)a0;
- (void)scrollWheel:(id)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)smartMagnifyWithEvent:(id)a0;
- (void)updateTrackingAreas;
- (void)viewDidEndLiveResize;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)a0;
- (void)viewWillStartLiveResize;
- (char)_grabMouseInput;
- (void)displayDidBeginReconfiguration:(id)a0;
- (char)_releaseMouseInput;
- (void)displayDidEndReconfiguration:(id)a0;

@end
