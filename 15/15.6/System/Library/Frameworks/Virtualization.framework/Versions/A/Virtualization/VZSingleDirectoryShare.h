@class VZSharedDirectory;

@interface VZSingleDirectoryShare : VZDirectoryShare

@property (readonly) VZSharedDirectory *directory;

- (void).cxx_destruct;
- (id)initWithDirectory:(id)a0;
- (struct Expected<std::variant<VzCore::Hardware::DirectoryShares::Single, VzCore::Hardware::DirectoryShares::Multiple, VzCore::Hardware::DirectoryShares::Rosetta>, NSError *> { union storage<std::variant<VzCore::Hardware::DirectoryShares::Single, VzCore::Hardware::DirectoryShares::Multiple, VzCore::Hardware::DirectoryShares::Rosetta>, NSError *> { char x0; struct variant<VzCore::Hardware::DirectoryShares::Single, VzCore::Hardware::DirectoryShares::Multiple, VzCore::Hardware::DirectoryShares::Rosetta> { struct __impl<VzCore::Hardware::DirectoryShares::Single, VzCore::Hardware::DirectoryShares::Multiple, VzCore::Hardware::DirectoryShares::Rosetta> { union __union<std::__variant_detail::_Trait::_Available, 0UL, VzCore::Hardware::DirectoryShares::Single, VzCore::Hardware::DirectoryShares::Multiple, VzCore::Hardware::DirectoryShares::Rosetta> { char x0; struct __alt<0UL, VzCore::Hardware::DirectoryShares::Single> { struct Single { struct SharedDirectory { struct FileDescriptor { int x0; } x0; BOOL x1; unsigned long long x2; } x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 1UL, VzCore::Hardware::DirectoryShares::Multiple, VzCore::Hardware::DirectoryShares::Rosetta> { char x0; struct __alt<1UL, VzCore::Hardware::DirectoryShares::Multiple> { struct Multiple { struct unordered_map<std::string, VzCore::Hardware::SharedDirectory, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, VzCore::Hardware::SharedDirectory>>> { struct __hash_table<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, VzCore::Hardware::SharedDirectory>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 2UL, VzCore::Hardware::DirectoryShares::Rosetta> { char x0; struct __alt<2UL, VzCore::Hardware::DirectoryShares::Rosetta> { struct Rosetta { struct SharedDirectory { struct FileDescriptor { int x0; } x0; BOOL x1; unsigned long long x2; } x0; struct optional<VzCore::Hardware::DirectoryShares::Rosetta::CachingOptions> { union { char x0; struct CachingOptions { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x0; BOOL x1; } x1; } x0; BOOL x1; } x1; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 3UL> { } x2; } x2; } x2; } x0; unsigned int x1; } x0; } x1; id x2; } x0; BOOL x1; })_share;
- (struct Expected<NSDictionary *, NSError *> { union storage<NSDictionary *, NSError *> { char x0; id x1; id x2; } x0; BOOL x1; })encodeWithEncoder:(id)a0;

@end
