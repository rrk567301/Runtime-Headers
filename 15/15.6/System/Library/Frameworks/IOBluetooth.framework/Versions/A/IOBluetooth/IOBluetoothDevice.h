@class NSDate, NSString, NSArray, NSData, NSUUID, NSDictionary, IOBluetoothSDPServiceRecord, CBPeripheral, IOBluetoothRFCOMMConnection, CBClassicPeer;

@interface IOBluetoothDevice : IOBluetoothObject <IOBluetoothCoreBluetoothCoordinatorDelegate, NSCoding, NSSecureCoding> {
    id mServerDevice;
    unsigned int mDeviceConnectNotification;
    struct BluetoothDeviceAddress { unsigned char data[6]; } mAddress;
    NSString *mName;
    NSDate *mLastNameUpdate;
    unsigned int mClassOfDevice;
    unsigned char mPageScanRepetitionMode;
    unsigned char mPageScanPeriodMode;
    unsigned char mPageScanMode;
    unsigned short mClockOffset;
    NSDate *mLastInquiryUpdate;
    unsigned short mConnectionHandle;
    unsigned char mLinkType;
    unsigned char mEncryptionMode;
    NSArray *mServiceArray;
    NSDate *mLastServicesUpdate;
    IOBluetoothRFCOMMConnection *mRFCOMMConnection;
    id _mReserved;
}

@property (class, readonly) char supportsSecureCoding;

@property (readonly, getter=isHeadsetAudioGateway) char headsetAudioGateway;
@property (readonly, getter=isHeadsetDevice) char headsetDevice;
@property (readonly) IOBluetoothSDPServiceRecord *HIDServiceRecord;
@property (readonly) NSDictionary *HIDDeviceDictionary;
@property (readonly) char HIDProfileSupported;
@property (readonly) char HIDNormallyConnectable;
@property (readonly) char HIDSupportsVirtualCable;
@property (readonly) char HIDSupportsRemoteWake;
@property (readonly) char HIDBootDevice;
@property (readonly) char HIDReconnectInitiate;
@property (readonly) unsigned char HIDCountryCode;
@property (readonly) unsigned char HIDDeviceSubclass;
@property (readonly) unsigned short HIDSupervisionTimeout;
@property (readonly) unsigned short HIDSSRHostMaxLatency;
@property (readonly) unsigned short HIDSSRHostMinTimeout;
@property (readonly) unsigned int HIDQoSLatency;
@property (readonly) unsigned short AVRCPTargetVersion;
@property (readonly) unsigned short AVRCPControllerVersion;
@property (readonly) unsigned short AVDTPVersion;
@property (readonly) char isAudioSink;
@property (readonly) char isA2DPSink;
@property (readonly) char isA2DPSource;
@property (readonly) char isWIAPSink;
@property (readonly) unsigned int inputAudioDeviceID;
@property (readonly) unsigned int outputAudioDeviceID;
@property (readonly) unsigned int serviceForDevice;
@property (readonly) IOBluetoothSDPServiceRecord *appleAccessoryServerServiceRecord;
@property (readonly) IOBluetoothSDPServiceRecord *appleAccessoryServiceRecord;
@property (readonly) IOBluetoothSDPServiceRecord *WIAPSinkServiceRecord;
@property (readonly) char isAppleAccessoryServer;
@property (readonly) char isW1;
@property (readonly) char isMultiBatteryDevice;
@property (readonly) char isInEarDetectionSupported;
@property (readonly) char isEnhancedDoubleTapSupported;
@property (readonly) char isMicSelectionSupported;
@property (readonly) char isHeadDetectionSupported;
@property (readonly) char isEQSupported;
@property (readonly) char isTransparencySupported;
@property (readonly) char isANCSupported;
@property (readonly) char isBasebandFastConnectSupported;
@property (readonly) char isFastConnectSupported;
@property (readonly) char isSwitchControlSupported;
@property (readonly) char isDoAPSupported;
@property (retain, nonatomic) CBClassicPeer *peer;
@property (retain, nonatomic) CBPeripheral *peripheral;
@property (retain, nonatomic) id targetDelegate;
@property (readonly) unsigned long long deviceID;
@property (nonatomic) unsigned int classOfDevice;
@property (copy, nonatomic) NSString *name;
@property (copy) NSDate *lastNameUpdate;
@property (retain, nonatomic) NSArray *services;
@property (readonly) unsigned char connectionMode;
@property (readonly) unsigned short connectionModeInterval;
@property (readonly) unsigned short SCOConnectionHandle;
@property (nonatomic, getter=isLowEnergyDevice) char lowEnergyDevice;
@property (readonly, nonatomic) char isLowEnergyConnection;
@property (nonatomic) unsigned char addressType;
@property (nonatomic, getter=isConnecting) char connecting;
@property (nonatomic, getter=headsetBattery) long long headsetBatteryPercent;
@property (nonatomic, getter=isLowEnergyDeviceHID2) char lowEnergyDeviceHID2;
@property (nonatomic, getter=isLowEnergyKeyboard) char lowEnergyKeyboard;
@property (nonatomic, getter=isLowEnergyPointer) char lowEnergyPointer;
@property (nonatomic) unsigned int serviceMask;
@property (nonatomic, getter=firstPairing) char isFirstPairing;
@property (nonatomic) unsigned char capabilityMask;
@property (nonatomic) unsigned char batteryPercentSingle;
@property (nonatomic) unsigned char batteryPercentLeft;
@property (nonatomic) unsigned char batteryPercentRight;
@property (nonatomic) unsigned char batteryPercentCase;
@property (nonatomic) unsigned char batteryPercentCombined;
@property (readonly) unsigned char colorID;
@property (nonatomic) char inEarDetect;
@property (nonatomic) char inEar;
@property (nonatomic) unsigned char primaryInEar;
@property (nonatomic) unsigned char secondaryInEar;
@property (nonatomic) unsigned char micMode;
@property (nonatomic) unsigned char buttonMode;
@property (nonatomic) unsigned char leftDoubleTap;
@property (nonatomic) unsigned char rightDoubleTap;
@property (nonatomic) unsigned char primaryBud;
@property (nonatomic) char isDevFused;
@property (nonatomic) unsigned char listeningMode;
@property (nonatomic) char switchControlEnabled;
@property (nonatomic) char heySiriEnabled;
@property (retain) NSString *accessoryFWVersion;
@property (nonatomic) unsigned char singleClickMode;
@property (nonatomic) unsigned char doubleClickMode;
@property (nonatomic) unsigned char leftClickHoldMode;
@property (nonatomic) unsigned char rightClickHoldMode;
@property (nonatomic) unsigned int listeningModeConfigs;
@property (nonatomic) unsigned char crownRotationDirection;
@property (nonatomic) int autoAnswerCalls;
@property (nonatomic) NSData *versionMagicSettings;
@property (nonatomic) unsigned int reservedMagicSettings;
@property (nonatomic) unsigned short listeningServices;
@property (nonatomic) char isSmartRoutingSupported;
@property (nonatomic) int isSmartRoutingEnabled;
@property (nonatomic) char isAutoRoutingEnabled;
@property (nonatomic) unsigned char streamingState;
@property (readonly, nonatomic) unsigned char linkLevelEncryption;
@property (nonatomic) char highPriority;
@property (nonatomic) char midPriority;
@property (nonatomic) unsigned char codecType;
@property (nonatomic) char magicCloudPairedPaired;
@property (readonly, nonatomic) char isMagicCloudPairingCapable;
@property (readonly) char isTBFCSuspended;
@property (readonly) char isConnnectionLLREnabled;
@property (readonly) char isTBFCCapable;
@property (readonly) char isTBFCPageCapable;
@property (nonatomic) NSUUID *identifier;
@property (readonly) unsigned int serviceClassMajor;
@property (readonly) unsigned int deviceClassMajor;
@property (readonly) unsigned int deviceClassMinor;
@property (readonly) NSString *nameOrAddress;
@property (readonly) NSString *addressString;
@property (readonly) unsigned short connectionHandle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)connectedDevices;
+ (id)deviceWithAddressString:(id)a0;
+ (char)isL2CAPPSMInUse:(unsigned short)a0 isIncoming:(char)a1;
+ (id)pairedDevices;
+ (id)deviceWithAddress:(const struct BluetoothDeviceAddress { unsigned char x0[6]; } *)a0;
+ (id)favoriteDevices;
+ (id)configuredDevices;
+ (id)deviceWithCBClassicPeer:(id)a0;
+ (id)deviceWithCBPeer:(id)a0;
+ (id)deviceWithCBPeripheral:(id)a0;
+ (id)deviceWithConnectionHandle:(unsigned short)a0;
+ (id)deviceWithID:(unsigned long long)a0;
+ (id)getUniqueDeviceWithAddress:(const struct BluetoothDeviceAddress { unsigned char x0[6]; } *)a0;
+ (id)getUniqueObjectDictionary:(char)a0;
+ (char)isAnyPairedDevicesSupportTBFCPage;
+ (char)isRFCOMMChannelInUse:(unsigned char)a0 isIncoming:(char)a1;
+ (id)recentDevices:(unsigned long long)a0;
+ (id)registerForConnectNotifications:(id)a0 selector:(SEL)a1;
+ (id)registerForPairingNotifications:(id)a0 selector:(SEL)a1;
+ (void)tbfcResumeConnectedDevices;
+ (id)usbBluetoothDevices;
+ (id)withAddress:(const struct BluetoothDeviceAddress { unsigned char x0[6]; } *)a0;
+ (id)withAddressString:(id)a0;
+ (id)withDeviceRef:(struct OpaqueIOBluetoothObjectRef { } *)a0;

- (void)dealloc;
- (id)init;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setDisplayName:(id)a0;
- (id)awakeAfterUsingCoder:(id)a0;
- (id)processName;
- (void)remove;
- (void)setAddress:(const struct BluetoothDeviceAddress { unsigned char x0[6]; } *)a0;
- (id)shortDescription;
- (char)isInitiator;
- (void)rename:(id)a0;
- (char)isConnected;
- (unsigned short)productID;
- (unsigned short)vendorID;
- (int)destroyConnection;
- (char)RSSI;
- (int)openConnection:(id)a0;
- (char)rawRSSI;
- (id)initWithAddress:(const struct BluetoothDeviceAddress { unsigned char x0[6]; } *)a0;
- (char)isL2CAPPSMInUse:(unsigned short)a0 isIncoming:(char)a1;
- (id)getKey;
- (char)isConfigured;
- (unsigned long long)totalBytesReceived;
- (const struct BluetoothDeviceAddress { unsigned char x0[6]; } *)getAddress;
- (char)isPaired;
- (void)callConnectionCompleteCallback:(id)a0;
- (unsigned char)getPageScanMode;
- (void)setClockOffset:(unsigned short)a0;
- (unsigned short)AVRCPVersion:(char)a0;
- (int)closeConnection;
- (long long)comparePreferredFirstThenNamed:(id)a0;
- (id)getName;
- (char)isCATTSupported;
- (void)peerPairingCompleted:(id)a0 withError:(id)a1;
- (void)setInquiryRSSI:(char)a0;
- (id)PnPClientExecutableURL;
- (id)PnPDocumentationURL;
- (unsigned short)PnPProductID;
- (id)PnPSDPRecord;
- (id)PnPServiceDescription;
- (unsigned short)PnPSpecificationID;
- (char)PnPSupported;
- (unsigned short)PnPVendorID;
- (unsigned short)PnPVendorIDSource;
- (unsigned short)PnPVersion;
- (int)SetIsHIDDevice;
- (int)_performSDPQuery:(id)a0 uuids:(id)a1;
- (int)addToFavorites;
- (struct { unsigned int x0; unsigned int x1; })appleDeviceSupportedExtendedFeatures;
- (id)appleSupportFeatures;
- (id)appleSupportFeaturesVersion;
- (id)attributeObjectForKey:(id)a0;
- (void)audioCodecString:(id /* block */)a0;
- (unsigned int)audioDeviceID:(char)a0;
- (void)autoconfigureServices;
- (void)batteryLevel:(id /* block */)a0;
- (void)callConnectionCompleteCallback:(id)a0 status:(int)a1;
- (int)channelReadyToReceiveData:(unsigned short)a0;
- (void)checkRetainCount;
- (id)classicPeer;
- (void)cleanDisconnect:(char)a0;
- (int)closeConnectionWhenIdle;
- (long long)compareNamesAndAddresses:(id)a0;
- (long long)compareNoNamesFirst:(id)a0;
- (unsigned int)configuredServices;
- (char)connectionComplete;
- (int)createChannelWithCID:(unsigned int)a0 psm:(unsigned short)a1 mtu:(unsigned short)a2;
- (int)destroyRFCOMMChannel:(unsigned char)a0;
- (void)destroyServerConnection;
- (void)enableHighPower:(char)a0;
- (void)forceRemove;
- (void)getAddress:(struct BluetoothDeviceAddress { unsigned char x0[6]; } *)a0;
- (id)getAddressNSData;
- (id)getAddressString;
- (unsigned int)getClassOfDevice;
- (unsigned short)getClockOffset;
- (unsigned short)getConnectionHandle;
- (unsigned int)getDeviceClassMajor;
- (unsigned int)getDeviceClassMinor;
- (struct OpaqueIOBluetoothObjectRef { } *)getDeviceRef;
- (id)getDisplayName;
- (unsigned char)getEncryptionMode;
- (id)getL2CAPObjectsWithPSM:(unsigned short)a0;
- (id)getLastInquiryUpdate;
- (id)getLastNameUpdate;
- (id)getLastServicesUpdate;
- (unsigned char)getLinkType;
- (id)getMacAttributesDictionary;
- (id)getNameOrAddress;
- (unsigned char)getPageScanPeriodMode;
- (unsigned char)getPageScanRepetitionMode;
- (void)getRemoteVersionInfo:(unsigned short *)a0 lmpVersion:(char *)a1 lmpSubversion:(unsigned short *)a2;
- (unsigned int)getServiceClassMajor;
- (id)getServiceRecordForUUID:(id)a0;
- (id)getServices;
- (id)handsFreeAudioGatewayDriverID;
- (id)handsFreeAudioGatewayServiceRecord;
- (id)handsFreeDeviceDriverID;
- (id)handsFreeDeviceServiceRecord;
- (id)headsetAudioGatewayServiceRecord;
- (id)headsetDeviceServiceRecord;
- (id)initWithCBPeripheral:(id)a0;
- (id)initWithIOService:(unsigned int)a0;
- (id)initWithIOService:(unsigned int)a0 address:(const struct BluetoothDeviceAddress { unsigned char x0[6]; } *)a1;
- (char)inquiryRSSI;
- (int)instantiateChannel:(unsigned short)a0 findExisting:(char)a1 newChannel:(id)a2;
- (int)instantiateChannelContinue:(unsigned short)a0 findExisting:(char)a1 newChannel:(id)a2;
- (char)isAddressRandomResolvable;
- (char)isAdvancedAppleAudioDevice;
- (char)isAppleDevice;
- (char)isBRPaired;
- (char)isConfiguredHIDDevice;
- (char)isFastConnectReadyDevice;
- (char)isFavorite;
- (char)isGameController;
- (char)isH1;
- (char)isHandsFreeAudioGateway;
- (char)isHandsFreeDevice;
- (char)isIncoming;
- (char)isKeyboardDevice;
- (char)isLEPaired;
- (char)isMCPaired;
- (char)isMac;
- (char)isNintendoGameController;
- (char)isPluggedOverUSB;
- (char)isPointingDevice;
- (char)isRFCOMMChannelInUse:(unsigned char)a0 isIncoming:(char)a1;
- (char)isRecent;
- (char)isSonyGameController;
- (char)isSpecialMicrosoftMouse;
- (char)isXboxGameController;
- (char)isiCloudPaired;
- (char)isiPad;
- (char)isiPhone;
- (id)l2capChannels;
- (unsigned int)lastBytesReceivedTimestamp;
- (unsigned int)lastBytesSentTimestamp;
- (char)matchesSearchAttributes:(const struct IOBluetoothDeviceSearchAttributes { unsigned int x0; unsigned int x1; unsigned int x2; struct IOBluetoothDeviceSearchDeviceAttributes *x3; } *)a0 ignoreDeviceNameIfNil:(char)a1;
- (unsigned short)maxACLPacketSize;
- (id)newMatchingDictionary;
- (int)openConnection;
- (int)openConnection:(id)a0 withPageTimeout:(unsigned short)a1 authenticationRequired:(char)a2;
- (int)openConnection:(id)a0 withPageTimeout:(unsigned short)a1 authenticationRequired:(char)a2 allowRoleSwitch:(char)a3;
- (int)openConnection:(id)a0 withPageTimeout:(unsigned short)a1 authenticationRequired:(char)a2 allowRoleSwitch:(char)a3 forPairing:(char)a4;
- (int)openL2CAPChannel:(unsigned short)a0 findExisting:(char)a1 newChannel:(id *)a2;
- (int)openL2CAPChannelAsync:(id *)a0 withPSM:(unsigned short)a1 delegate:(id)a2;
- (int)openL2CAPChannelAsync:(id *)a0 withPSM:(unsigned short)a1 withConfiguration:(id)a2 delegate:(id)a3;
- (int)openL2CAPChannelSync:(id *)a0 withPSM:(unsigned short)a1 delegate:(id)a2;
- (int)openL2CAPChannelSync:(id *)a0 withPSM:(unsigned short)a1 withConfiguration:(id)a2 delegate:(id)a3;
- (int)openRFCOMMChannel:(unsigned char)a0 channel:(id *)a1;
- (int)openRFCOMMChannelAsync:(id *)a0 withChannelID:(unsigned char)a1 delegate:(id)a2;
- (int)openRFCOMMChannelSync:(id *)a0 withChannelID:(unsigned char)a1 delegate:(id)a2;
- (void)peerConnected:(id)a0 error:(long long)a1;
- (void)peerDisconnected:(id)a0 withError:(long long)a1;
- (void)peerDiscovered:(id)a0 withResults:(id)a1;
- (void)peerUnpaired:(id)a0;
- (void)peerUpdated:(id)a0 withResults:(id)a1;
- (int)performSDPQuery:(id)a0;
- (int)performSDPQuery:(id)a0 uuids:(id)a1;
- (id)recentAccessDate;
- (id)registerForDisconnectNotification:(id)a0 selector:(SEL)a1;
- (int)remoteNameRequest:(id)a0;
- (int)remoteNameRequest:(id)a0 withPageTimeout:(unsigned short)a1;
- (int)removeAttributeObjectForKey:(id)a0;
- (int)removeFromFavorites;
- (void)removeLinkKey;
- (int)requestAuthentication;
- (int)requestAuthenticationAsync;
- (char)requiresAuthenticationEncryption:(unsigned short)a0;
- (void)sdpQueryComplete:(id)a0 status:(int)a1;
- (int)sendL2CAPEchoRequest:(void *)a0 length:(unsigned short)a1;
- (int)sendL2CAPEchoRequest:(void *)a0 length:(unsigned short)a1 withFlags:(unsigned int)a2;
- (void)setAdvancedAppleAudioDeviceRegistry:(char)a0;
- (void)setAllowedPacketTypes:(unsigned short)a0;
- (int)setAttributeObject:(id)a0 forKey:(id)a1;
- (void)setConnectionHandle:(unsigned short)a0;
- (void)setConnectionInfo:(unsigned short)a0 linkType:(unsigned char)a1 encryptionMode:(unsigned char)a2;
- (void)setMaxACLPacketSize:(unsigned short)a0;
- (void)setPageScanMode:(unsigned char)a0;
- (void)setPageScanPeriodMode:(unsigned char)a0;
- (void)setPageScanRepetitionMode:(unsigned char)a0;
- (void)setProductIDRegistry:(unsigned short)a0;
- (void)setRemoteVersionInfo:(unsigned short)a0 lmpVersion:(unsigned char)a1 lmpSubversion:(unsigned short)a2;
- (int)setSupervisionTimeout:(unsigned short)a0;
- (void)setVendorIDRegistry:(unsigned short)a0;
- (char)shouldHideDevice;
- (unsigned long long)totalBytesSent;
- (void)updateFromAttributeDict:(id)a0;
- (void)updateFromServer;
- (void)updateInquiryInfo:(struct IOBluetoothHCIUnifiedInquiryResult { struct BluetoothHCIInquiryResult { struct BluetoothDeviceAddress { unsigned char x0[6]; } x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned int x4; unsigned short x5; } x0; unsigned char x1; struct BluetoothHCIExtendedInquiryResponse { unsigned char x0[240]; } x2; unsigned char x3; char x4; } *)a0 lastUpdate:(id)a1;
- (void)updateName:(id)a0 lastUpdate:(id)a1;
- (void)updateName:(id)a0 lastUpdate:(id)a1 postNotification:(char)a2;
- (void)updateServiceMask;
- (void)updateServices:(id)a0 lastUpdate:(id)a1;
- (void)updateServicesArchive:(id)a0 lastUpdate:(id)a1;

@end
