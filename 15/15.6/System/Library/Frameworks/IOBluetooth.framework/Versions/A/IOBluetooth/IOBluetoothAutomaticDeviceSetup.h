@class IOBluetoothDevice, NSString, NSTimer, SystemPowerNotifier, BluetoothHIDDeviceController, CBCentralManager, IOBluetoothDeviceInquiry, IOBluetoothDevicePair, NSMutableArray;

@interface IOBluetoothAutomaticDeviceSetup : NSObject <CBCentralManagerDelegate> {
    SystemPowerNotifier *_systemPowerNotifier;
    struct __IOHIDEventSystemClient { } *_mouseNotifier;
    struct __IOHIDEventSystemClient { } *_keyboardNotifier;
    struct OpaqueIOBluetoothNotificationRef { } *_bluetoothNotificationRef;
    IOBluetoothDeviceInquiry *_inquiry;
    BluetoothHIDDeviceController *_bluetoothHIDDeviceController;
    IOBluetoothDevicePair *_bluetoothDevicePair;
    IOBluetoothDevice *_currentPairingDevice;
    int _pairingAttemptsForCurrentDevice;
    NSMutableArray *_deviceArray;
    int _pairingDeviceIndex;
    long long _startTime;
    int _preventSleepFor;
    char _userAckTimeLimit;
    int _userAckTimeRemaining;
    int _inquiryLength;
    NSTimer *_bluetoothDeviceAppearanceTimeoutTimer;
    NSTimer *_bluetoothUpdateSystemActivityTimer;
    NSTimer *_bluetoothUserAckTimer;
    char _discovering;
    char _pairing;
    NSString *_PINCodeString;
    int _numberOfPairingAttemptsPerDevice;
    unsigned int _deviceServiceClassMajor;
    unsigned int _deviceClassMajor;
    unsigned int _deviceClassMinor;
    char _preventingSleep;
    id _textFieldTestingStatus;
    char _notifyOnKeyboard;
    char _notifyOnMouse;
    char _usbPairing;
    id _delegate;
    char _automaticDeviceSetupStarted;
    char _automaticDeviceSetupComplete;
    char _automaticDeviceSetupStopped;
    char _automaticDeviceSetupDiscoveringDevicesStarted;
    char _automaticDeviceSetupDiscoveringDevicesFound;
    char _automaticDeviceSetupDiscoveringDevicesUpdated;
    char _automaticDeviceSetupDiscoveringDevicesComplete;
    char _automaticDeviceSetupPairingDeviceStarted;
    char _automaticDeviceSetupPairingDeviceConnected;
    char _automaticDeviceSetupPairingDeviceSuccessful;
    char _automaticDeviceSetupPairingDeviceFailed;
    char _automaticDeviceSetupPairingDeviceUserPasskeyNotification;
    char _automaticDeviceSetupPairingDeviceKeyPressNotification;
    char _automaticDeviceSetupPairingWaitingForUserAck;
    char _automaticDeviceSetupUSBMouseConnected;
    char _automaticDeviceSetupUSBPairingSuccessful;
    char _automaticDeviceSetupUSBKeyboardConnected;
    char _automaticDeviceSetupBluetoothMouseConnected;
    char _automaticDeviceSetupBluetoothMouseBeingPairedConnected;
    char _automaticDeviceSetupBluetoothKeyboardConnected;
}

@property (retain) CBCentralManager *central;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (char)bluetoothIsAvailableAndPowerIsOn:(char)a0;
+ (id)deviceSetupWithDelegate:(id)a0 findDevicesOfServiceClass:(unsigned int)a1 findDevicesOfMajorDeviceClass:(unsigned int)a2 findDevicesOfMinorDeviceClass:(unsigned int)a3 afterPairUserAcknowledgmentTimeLimit:(int)a4 notifyWhenMousePluggedIn:(char)a5 notifyWhenKeyboardPluggedIn:(char)a6 preventSleepFor:(int)a7;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)setDelegate:(id)a0;
- (int)start;
- (void)centralManager:(id)a0 didConnectPeripheral:(id)a1;
- (void)centralManager:(id)a0 didDisconnectPeripheral:(id)a1 error:(id)a2;
- (void)centralManager:(id)a0 didDiscoverPeripheral:(id)a1 advertisementData:(id)a2 RSSI:(id)a3;
- (void)centralManager:(id)a0 didFailToConnectPeripheral:(id)a1 error:(id)a2;
- (void)centralManagerDidUpdateState:(id)a0;
- (void)unregisterForMouseNotifications;
- (void)updateSystemActivityTimerFired:(id)a0;
- (void)bluetoothDone:(id)a0;
- (void)bluetoothHCIControllerTerminated;
- (void)clearCurrentDevice;
- (id)currentPairingDevice;
- (void)deviceAppearanceTimeoutTimerFired;
- (void)deviceInquiryComplete:(id)a0 error:(int)a1 aborted:(char)a2;
- (void)deviceInquiryDeviceFound:(id)a0 device:(id)a1;
- (void)deviceInquiryDeviceNameUpdated:(id)a0 device:(id)a1 devicesRemaining:(unsigned int)a2;
- (void)deviceInquiryStarted:(id)a0;
- (void)deviceInquiryUpdatingDeviceNamesStarted:(id)a0 devicesRemaining:(unsigned int)a1;
- (void)devicePairingConnected:(id)a0;
- (void)devicePairingConnecting:(id)a0;
- (void)devicePairingFinished:(id)a0 error:(int)a1;
- (void)devicePairingKeypressNotification:(id)a0 type:(unsigned char)a1;
- (void)devicePairingPINCodeRequest:(id)a0;
- (void)devicePairingStarted:(id)a0;
- (void)devicePairingUserPasskeyNotification:(id)a0 passkey:(unsigned int)a1;
- (void)keyboardConnectNotification:(struct __IOHIDServiceClient { } *)a0;
- (void)mouseConnectNotification:(struct __IOHIDServiceClient { } *)a0;
- (void)newBluetoothHIDDevice:(id)a0;
- (void)newBluetoothHIDDeviceDisconnected:(id)a0;
- (void)pairWithNextDevice;
- (void)performUSBPairing;
- (void)registerForKeyboardNotifications;
- (void)registerForMouseNotifications;
- (void)registerForSystemSleepNotifications;
- (void)registerForUSBPairingNotifications;
- (void)setAfterPairUserAcknowledgementTimeLimit:(int)a0;
- (void)setInquiryLength:(int)a0;
- (void)setNonNULLPIN:(id)a0;
- (void)setNotifyOnKeyboard:(char)a0;
- (void)setNotifyOnMouse:(char)a0;
- (void)setNumberOfPairingAttemptsPerDevice:(int)a0;
- (void)setPreventSleepFor:(int)a0;
- (void)setSearchCriteria:(unsigned int)a0 majorDeviceClass:(unsigned int)a1 minorDeviceClass:(unsigned int)a2;
- (void)skipCurrentDevice;
- (void)startDeviceAppearanceTimeoutTimer;
- (int)startInquiry;
- (void)startLEScans;
- (void)startUpdateSystemActivityTimer;
- (void)startUserAckTimer;
- (void)stopAllBluetooth:(char)a0 clearInquiry:(char)a1 clearCurrentDevice:(char)a2;
- (int)stopAndAcceptCurrentDevice;
- (int)stopAndUnPairCurrentDevice:(char)a0;
- (void)stopDeviceAppearanceTimeoutTimer;
- (void)stopInquiry;
- (void)stopLEScans;
- (void)stopUpdateSystemActivityTimer;
- (void)stopUserAckTimer;
- (char)systemPowerNotification:(unsigned int)a0;
- (void)unregisterForKeyboardNotifications;
- (void)unregisterForSystemSleepNotifications;
- (void)unregisterForUSBPairingNotifications;
- (void)usbHIDDeviceConnected:(void *)a0 result:(int)a1 sender:(void *)a2 device:(struct __IOHIDDevice { } *)a3;
- (void)userAckTimerFired;

@end
