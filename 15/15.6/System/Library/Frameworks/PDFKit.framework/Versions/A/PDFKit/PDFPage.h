@class NSMutableDictionary, PDFAKPageAdaptor, NSObject, NSDictionary, NSMutableArray, PDFDocument, NSString, PDFDetectedForm, NSAttributedString, NSMutableSet, NSArray, NSData, PDFView, NSLock;
@protocol OS_dispatch_queue;

@interface PDFPage : NSObject <NSCopying> {
    PDFDocument *_document;
    struct CGPDFPage { } *_page;
    struct CGColor { } *_pageBackgroundColorHint;
    PDFView *_view;
    NSString *_label;
    struct CGImage { } *_pageImage;
    NSDictionary *_pageImageOptions;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _layoutLock;
    struct CGPDFLayout { } *_layout;
    _Atomic BOOL _builtLayout;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _dataDetectorsLock;
    BOOL _ranDataDetectors;
    NSString *_text;
    NSAttributedString *_attributedString;
    BOOL _displaysAnnotations;
    BOOL _displaysMarkups;
    NSMutableArray *_annotations;
    _Atomic BOOL _loadedAnnotations;
    NSLock *_lock_getAnnotations;
    NSLock *_lock_accessAnnotations;
    NSMutableArray *_detectedAnnotations;
    long long _rotation;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _mediaBox;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cropBox;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _bleedBox;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _trimBox;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _artBox;
    struct CGDisplayList { } *_displayList;
    BOOL _creatingDisplayList;
    NSMutableArray *_createDisplayListCompletionBlocks;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _displayListMutex;
    BOOL _bookmarked;
    BOOL _isFullyConstructed;
    BOOL _colorWidgetBackgrounds;
    PDFAKPageAdaptor *_akPageAdaptor;
    BOOL _akDidSetupRealPageModelController;
    NSMutableArray *_annotationChanges;
    NSMutableSet *_changedAnnotations;
    NSMutableDictionary *_widgetAnnotationLookup;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _widgetAnnotationLookupLock;
    NSMutableArray *_scannerResults;
    BOOL _didChangeBounds;
    char _candidateForOCR;
    BOOL _requestedOCR;
    BOOL _textFromOCR;
    BOOL _didPerformOCR;
    char candidateForFormDetection;
    BOOL _didPerformFormDetection;
    unsigned long long _detectedFormFieldsRecognitionConfidence;
    PDFDetectedForm *_detectedForm;
    NSMutableArray *_formFieldGroups;
    NSMutableDictionary *_persistentApplicationData;
}

@property (class, readonly, nonatomic) NSObject<OS_dispatch_queue> *displayListCreationQueue;
@property (class, readonly, nonatomic) BOOL useLegacyImageHandling;

@property (readonly) unsigned long long pageNumber;
@property (nonatomic, getter=isCandidateForOCR) char candidateForOCR;
@property (nonatomic) BOOL didPerformOCR;
@property (nonatomic, getter=isCandidateForFormDetection) char candidateForFormDetection;
@property (nonatomic) BOOL didPerformFormDetection;
@property (readonly, nonatomic) char requestedOCR;
@property (readonly, nonatomic, getter=isTextFromOCR) char textFromOCR;
@property (readonly, nonatomic) char containsFormFields;
@property (readonly, nonatomic) char containsDetectedFormFields;
@property (readonly, nonatomic) char containsFormFieldsWithContentType;
@property (nonatomic) unsigned long long detectedFormFieldsRecognitionConfidence;
@property (retain, nonatomic) PDFDetectedForm *detectedForm;
@property (nonatomic, getter=isBookmarked) char bookmarked;
@property (readonly, weak, nonatomic) PDFDocument *document;
@property (readonly, nonatomic) struct CGPDFPage { } *pageRef;
@property (readonly, nonatomic) NSString *label;
@property (nonatomic) long long rotation;
@property (readonly, nonatomic) NSArray *annotations;
@property (nonatomic) char displaysAnnotations;
@property (readonly, nonatomic) unsigned long long numberOfCharacters;
@property (readonly, nonatomic) NSString *string;
@property (readonly, nonatomic) NSAttributedString *attributedString;
@property (readonly, nonatomic) NSData *dataRepresentation;

+ (struct CGPDFPage { } *)_createPageRefFromImage:(struct CGImage { } *)a0 andOptions:(id)a1;
+ (BOOL)_getBooleanProperty:(id)a0 forKey:(id)a1 withDefault:(BOOL)a2;
+ (id)fontWithPDFFont:(struct CGPDFFont { } *)a0 size:(float)a1;
+ (char)isExcludingAKAnnotationRenderingForThisThread;
+ (char)isNativeRotationDrawingEnabledForThisThread;
+ (void)setExcludingAKAnnotationRenderingForThisThread:(char)a0;
+ (void)setNativeRotationDrawingEnabledForThisThread:(char)a0;
+ (void)setShouldHideAnnotationsForThisThread:(char)a0;
+ (char)shouldHideAnnotationsForThisThread;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (id)init;
- (void).cxx_destruct;
- (id)view;
- (void)setView:(id)a0;
- (void)_commonInit;
- (char)columnAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)initWithImage:(id)a0;
- (struct CGPDFLayout { } *)pageLayout;
- (void)removeAnnotation:(id)a0;
- (void)setDocument:(id)a0;
- (void)addAnnotation:(id)a0;
- (id)initWithCGImage:(struct CGImage { } *)a0 options:(id)a1;
- (id)debugQuickLookObject;
- (id)initWithImage:(id)a0 options:(id)a1;
- (struct CGDisplayList { } *)copyDisplayList;
- (void)replaceAnnotation:(id)a0 withAnnotation:(id)a1;
- (void)purgeAll;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForBox:(long long)a0;
- (void)drawWithBox:(long long)a0 toContext:(struct CGContext { } *)a1;
- (void)drawWithBox:(long long)a0 inContext:(struct CGContext { } *)a1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forBox:(long long)a1;
- (void)drawWithBox:(long long)a0;
- (id)annotationAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)annotationsForFieldName:(id)a0;
- (long long)areaOfInterestAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)dataDetectorResults;
- (id)selectionForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)selectionForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)selectionForWordAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)thumbnailOfSize:(struct CGSize { double x0; double x1; })a0 forBox:(long long)a1;
- (id)annotationForDetectedFormField:(id)a0;
- (BOOL)didChangeBounds;
- (id)selectionForAll;
- (id)_rvItemAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)detectedFormFieldForAnnotation:(id)a0;
- (id)imageOfSize:(struct CGSize { double x0; double x1; })a0 forBox:(long long)a1 withOptions:(id)a2;
- (void)purgePageLayout;
- (void)_addBox:(int)a0 toDictionary:(struct __CFDictionary { } *)a1 offset:(struct CGPoint { double x0; double x1; })a2;
- (void)_addWidgetAnnotationToLookupDictionary:(id)a0;
- (void)_buildPageLayout;
- (id)_createAttributedString;
- (struct CGDisplayList { } *)_createDisplayListTrackingGlyphs:(char)a0;
- (void)_createRetainedDisplayList;
- (unsigned long long)_documentIndex;
- (void)_drawAnnotationsWithBox:(long long)a0 inContext:(struct CGContext { } *)a1;
- (void)_drawBookmarkInContext:(struct CGContext { } *)a0;
- (struct CGImage { } *)_newCGImageWithBox:(long long)a0 bitmapSize:(struct PDFSizeIntegral { unsigned long long x0; unsigned long long x1; })a1 scale:(double)a2 offset:(struct CGPoint { double x0; double x1; })a3 colorSpace:(struct CGColorSpace { } *)a4 backgroundColor:(id)a5 withRotation:(BOOL)a6 withAntialiasing:(BOOL)a7 withAnnotations:(BOOL)a8 withBookmark:(BOOL)a9 withOptions:(id)a10 withDelegate:(id)a11;
- (void)_postAnnotationsChangedNotificationCoalesced;
- (void)_releaseDisplayList;
- (void)_removeWidgetAnnotationFromLookupDictionary:(id)a0;
- (void)_scanData:(id)a0;
- (char)_writeToConsumer:(struct CGDataConsumer { } *)a0;
- (void)addAnnotation:(id)a0 withUndo:(BOOL)a1;
- (void)addAnnotationFormField:(id)a0;
- (void)addDetectedAnnotations:(id)a0;
- (void)addFormFieldGroup:(id)a0;
- (void)addRedactionFromRectangularSelectionWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)addedAnnotation:(id)a0 forFormField:(id)a1;
- (BOOL)akDidSetupRealPageModelController;
- (id)akPageAdaptor;
- (id)annotationAtRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)annotationChanges;
- (Class)annotationSubclassForSubtype:(id)a0;
- (id)annotationWithUUID:(id)a0;
- (id)annotationsIfAvail;
- (id)applicationDataWithName:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })axFrameForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inNode:(struct CGPDFTaggedNode { } *)a1;
- (void)changedAnnotation:(id)a0;
- (id)changedAnnotations;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })characterBoundsAtIndex:(long long)a0;
- (long long)characterIndexAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (long long)characterIndexNearestPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)clearAnnotationChanges;
- (BOOL)colorWidgetBackgrounds;
- (char)columnAtPointIfAvailable:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })columnFrameAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGDisplayList { } *)createDisplayListForFormDetection;
- (struct CGPath { } *)createRedactionPath;
- (id)detectedAnnotations;
- (BOOL)disableUndoManagerForAK;
- (void)drawAnnotationsWithBox:(long long)a0 inContext:(struct CGContext { } *)a1 passingTest:(id /* block */)a2;
- (void)drawWithBox:(long long)a0 inContext:(struct CGContext { } *)a1 isThumbnail:(BOOL)a2;
- (void)drawWithBox:(long long)a0 inContext:(struct CGContext { } *)a1 withOptions:(id)a2;
- (void)enableUndoManagerForAK:(BOOL)a0;
- (void)ensureDisplayList;
- (void)enumerateApplicationDataUsingBlock:(id /* block */)a0;
- (id)fetchAnnotationFromTaggedNodeRef:(struct CGPDFTaggedNode { } *)a0;
- (void)fetchAnnotationsWithCompletion:(id /* block */)a0 deliveredOnQueue:(id)a1;
- (void)fetchPageLayoutWithCompletion:(id /* block */)a0 deliveredOnQueue:(id)a1;
- (id)formFieldGroupForAnnotation:(id)a0;
- (struct __CFDictionary { } *)gcCreateBoxDictionary;
- (void)getAnnotations;
- (void)getDisplayListWithCompletion:(id /* block */)a0 onQueue:(id)a1;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })getDrawingTransformForBox:(long long)a0;
- (char)hasArtBox;
- (char)hasBleedBox;
- (char)hasCropBox;
- (char)hasPopups;
- (char)hasTrimBox;
- (id)initWithImageSource:(struct CGImageSource { } *)a0;
- (id)initWithPageNumber:(unsigned long long)a0 pageRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 rotation:(long long)a2;
- (id)initWithPageRef:(struct CGPDFPage { } *)a0;
- (void)insertAnnotation:(id)a0 atIndex:(long long)a1;
- (id)lastAnnotationChange;
- (id)lazilyLoadAnnotations;
- (struct CGColor { } *)pageBackgroundColorHint;
- (struct CGPDFLayout { } *)pageLayoutIfAvail;
- (BOOL)pathIntersectsWithRedactionPath:(struct CGPath { } *)a0;
- (id)pdfScannerResultAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)pdfScannerResultAtPoint:(struct CGPoint { double x0; double x1; })a0 onPageLayer:(id)a1;
- (void)postAnnotationsChangedNotification;
- (void)postPageDidChangeBoundsNotification;
- (void)postPageDidRotateNotification;
- (void)printActivePageAnnotations;
- (BOOL)rectIntersectsWithRedactionPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)removeAnnotation:(id)a0 atIndex:(long long)a1;
- (void)removeAnnotation:(id)a0 withUndo:(BOOL)a1;
- (void)removeFromDetectedAnnotations:(id)a0;
- (void)resetChangedAnnotations;
- (id)rvItemAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)rvItemAtPoint:(struct CGPoint { double x0; double x1; })a0 onPageLayer:(id)a1;
- (id)rvItemWithPDFScannerResult:(id)a0;
- (id)scannedAnnotationAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectionForCharacterAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectionForCodeRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)selectionForLineAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectionForRangeCommon:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 isCodeRange:(BOOL)a1;
- (id)selectionFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)selectionFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1 type:(int)a2;
- (id)selectionFromPointToBottom:(struct CGPoint { double x0; double x1; })a0 type:(int)a1;
- (id)selectionFromTopToPoint:(struct CGPoint { double x0; double x1; })a0 type:(int)a1;
- (void)setAKDidSetupRealPageModelController:(BOOL)a0;
- (void)setApplicationData:(id)a0 withName:(id)a1;
- (void)setBookmarked:(char)a0 updateBookmarks:(char)a1;
- (void)setColorWidgetBackgrounds:(BOOL)a0;
- (void)setDisplaysMarkupAnnotations:(char)a0;
- (void)setExtraContentStream:(struct CGPDFStream { } *)a0 steamDocument:(struct CGPDFDocument { } *)a1;
- (char)setPageRef:(struct CGPDFPage { } *)a0;
- (void)setupAKPageAdaptorIfNecessary;
- (id)thumbnailOfSize:(struct CGSize { double x0; double x1; })a0 forBox:(long long)a1 withBookmark:(BOOL)a2;
- (id)thumbnailOfSize:(struct CGSize { double x0; double x1; })a0 forBox:(long long)a1 withBookmark:(BOOL)a2 withAnnotations:(BOOL)a3;
- (void)transformContext:(struct CGContext { } *)a0 forBox:(long long)a1;
- (void)transformContextForBox:(long long)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformForBox:(long long)a0;

@end
