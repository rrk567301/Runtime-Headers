@class NSURL, NSUUID, PDFBorder, NSDate, PDFPage, NSDictionary, NSMutableDictionary, PDFAction, NSLock, PDFAccessibilityNode, NSFont, NSString, PDFDestination, NSIndexSet, PDFAKAnnotationAdaptor, NSArray, CRNormalizedQuad, NSColor;
@protocol NSCopying;

@interface PDFAnnotation : NSObject <CRFormFieldProviding, NSCopying, NSCoding> {
    BOOL _loggingEnabled;
    BOOL _shouldExport;
    PDFPage *_page;
    struct CGPDFDictionary { } *_sourceDictionary;
    struct __CFDictionary { } *_dictionaryRef;
    NSUUID *_pdfAnnotationUUID;
    struct CGPDFAnnotation { } *_cgAnnotation;
    NSMutableDictionary *_PDFAnnotationDictionary;
    NSDictionary *_PDFAnnotationKeyMapping;
    NSMutableDictionary *_internalPDFAnnotationDictionary;
    struct CGPDFForm { } *_normalAppearance;
    struct CGPDFForm { } *_rolloverAppearance;
    struct CGPDFForm { } *_downAppearance;
    struct CGPDFForm { } *_normalOffAppearance;
    struct CGPDFForm { } *_rolloverOffAppearance;
    struct CGPDFForm { } *_downOffAppearance;
    BOOL _saveAppearance;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _cachedAppearancesLock;
    NSMutableDictionary *_cachedAppearances;
    BOOL _isSelected;
    BOOL _isHighlighted;
    NSIndexSet *_quadPointsIndexSet;
    struct CGPath { } *_quadPointsPath;
    PDFAnnotation *_parent;
    PDFAnnotation *_popup;
    struct CGPDFDictionary { } *_popupDictionary;
    char _popupDrawCloseWidget;
    char _popupDrawText;
    struct CGPath **_cgPaths;
    NSLock *_pathLock;
    char _isSignature;
    char _shouldBurnIn;
    NSString *_widgetOnStateString;
    id _control;
    char _pointerIsOverAnnotation;
    char _shouldHideInteractiveBackgroundColor;
    NSString *_autoFillTextContentType;
    unsigned long long _formContentType;
    unsigned long long _autofillEntryType;
    NSString *_labelText;
    char _isDetectedCheckbox;
    char _isDetectedSignature;
    char _shouldReportAnalytics;
    char _isAutofillNewContextStart;
    char _suppressAppearanceStreamText;
    double _suggestedLineHeight;
    BOOL _restoreLinePoints;
    BOOL _restoreQuadPoints;
    struct CGPoint { double x; double y; } _startPoint;
    struct CGPoint { double x; double y; } _endPoint;
    NSArray *_quadPoints;
    BOOL _isTransparent;
    PDFAccessibilityNode *_accessibilityNode;
    double _scaleFactor;
    BOOL _isFullyConstructed;
    BOOL _constructingDictionaryRef;
    PDFAKAnnotationAdaptor *_akAnnotationAdaptor;
    id<NSCopying> _akAnnotationForCopying;
}

@property (copy, nonatomic) NSFont *font;
@property (copy, nonatomic) NSColor *fontColor;
@property (copy, nonatomic) NSColor *interiorColor;
@property (nonatomic) long long alignment;
@property (nonatomic) struct CGPoint { double x0; double x1; } startPoint;
@property (nonatomic) struct CGPoint { double x0; double x1; } endPoint;
@property (nonatomic) long long startLineStyle;
@property (nonatomic) long long endLineStyle;
@property (nonatomic) long long iconType;
@property (copy, nonatomic) NSArray *quadrilateralPoints;
@property (nonatomic) long long markupType;
@property (copy, nonatomic) NSString *widgetFieldType;
@property (nonatomic) long long widgetControlType;
@property (nonatomic, getter=isMultiline) char multiline;
@property (readonly, getter=isActivatableTextField) char activatableTextField;
@property (readonly, nonatomic) char isPasswordField;
@property (nonatomic, getter=hasComb) char comb;
@property (nonatomic) long long maximumLength;
@property (copy, nonatomic) NSString *widgetStringValue;
@property (copy, nonatomic) NSString *widgetDefaultStringValue;
@property (nonatomic) char allowsToggleToOff;
@property (nonatomic) char radiosInUnison;
@property (nonatomic, getter=isReadOnly) char readOnly;
@property (nonatomic, getter=isListChoice) char listChoice;
@property (copy, nonatomic) NSArray *choices;
@property (copy, nonatomic) NSArray *values;
@property (nonatomic) long long buttonWidgetState;
@property (copy, nonatomic) NSString *buttonWidgetStateString;
@property (nonatomic, getter=isOpen) char open;
@property (readonly, nonatomic) NSArray *paths;
@property (retain, nonatomic) PDFDestination *destination;
@property (copy, nonatomic) NSURL *URL;
@property (copy, nonatomic) NSString *fieldName;
@property (copy, nonatomic) NSString *caption;
@property (copy, nonatomic) NSColor *backgroundColor;
@property (copy, nonatomic) NSString *stampName;
@property (weak, nonatomic) PDFPage *page;
@property (copy, nonatomic) NSString *type;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (nonatomic) char shouldDisplay;
@property (nonatomic) char shouldPrint;
@property (copy, nonatomic) NSDate *modificationDate;
@property (copy, nonatomic) NSString *userName;
@property (retain, nonatomic) PDFAnnotation *popup;
@property (retain, nonatomic) PDFBorder *border;
@property (copy, nonatomic) NSColor *color;
@property (copy, nonatomic) NSString *contents;
@property (retain, nonatomic) PDFAction *action;
@property (readonly, nonatomic) char hasAppearanceStream;
@property (nonatomic, getter=isHighlighted) char highlighted;
@property (readonly, copy, nonatomic) NSDictionary *annotationKeyValues;
@property (readonly) CRNormalizedQuad *boundingQuad;
@property (readonly) unsigned long long fieldType;
@property (readonly) unsigned long long fieldSource;
@property (readonly, copy) NSString *fieldValue;
@property (readonly) unsigned long long maxCharacterCount;
@property (readonly) char hasBoundedWidth;
@property (readonly) char hasBoundedHeight;
@property unsigned long long textContentType;
@property double suggestedLineHeight;
@property char autofillNewContextStart;
@property (readonly) unsigned long long layoutDirection;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)PDFMarkupColors;
+ (id)PDFAnnotationKeysWithStringValues;
+ (id)PDFFormFieldBackgroundColor;
+ (id)PDFKitAnnotationUndoManagerDisplayNames;
+ (id)PDFKitHighlightingModeArray;
+ (id)PDFTextBorderColors;
+ (id)PDFTextColors;
+ (id)PDFKitAppearanceDictionaryArray;
+ (long long)MarkupTypeForMarkupStyle:(unsigned long long)a0;
+ (id)PDFAnnotationKeysForRedactionDiscoverability;
+ (id)PDFKitAnnotationKeys;
+ (id)PDFKitBorderStyleArray;
+ (id)PDFKitFieldTypeArray;
+ (id)PDFKitSubtypeArray;
+ (id)PDFMarkupStyleLabels;
+ (id)PDFTextBorderColorForMarkupStyle:(unsigned long long)a0;
+ (id)PDFTextColorForMarkupStyle:(unsigned long long)a0;
+ (id)PresentableStringForAnnotationKey:(id)a0;
+ (id)SubtypeForPDFMarkupStyle:(unsigned long long)a0;
+ (char)annotationPageLayerEffectIsFlipped;
+ (Class)classForAnnotationDictionary:(struct CGPDFDictionary { } *)a0;
+ (id)createDetectedTextFieldWithBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 font:(id)a1 textContentType:(id)a2 page:(id)a3;
+ (id)createWithPKDrawing:(id)a0 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
+ (id)detectedFormFieldDefaultFontName;
+ (double)detectedFormFieldDefaultFontSize;
+ (id)getProperNameStringFromString:(id)a0;
+ (long long)lineStyleFromName:(id)a0;
+ (id)nameForLineStyle:(long long)a0;
+ (id)newPDFAnnotationFromAKAnnotation:(id)a0;
+ (void)setAnnotationPageLayerEffectIsFlipped:(char)a0;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (char)isHidden;
- (void)setHidden:(char)a0;
- (id)displayName;
- (unsigned long long)flags;
- (id)parent;
- (long long)priority;
- (void)setScaleFactor:(double)a0;
- (id)toolTip;
- (void)commonInit;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })a0;
- (char)isLocked;
- (char)isSelected;
- (BOOL)isTransparent;
- (double)scaleFactor;
- (void)setLocked:(char)a0;
- (id)initWithBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setParent:(id)a0;
- (id)debugQuickLookObject;
- (void)setInvisible:(char)a0;
- (char)isSignature;
- (id)labelText;
- (void)setIsSelected:(char)a0;
- (void)setLabelText:(id)a0;
- (id)control;
- (void)setControl:(id)a0;
- (id)formData;
- (id)mouseUpAction;
- (void)setMouseUpAction:(id)a0;
- (void)drawWithBox:(long long)a0 inContext:(struct CGContext { } *)a1;
- (char)shouldDisplay;
- (void)drawWithBox:(long long)a0;
- (id)accessibilityNode;
- (id)valueForAnnotationKey:(id)a0;
- (unsigned long long)formContentType;
- (char)isFormField;
- (void)setFormContentType:(unsigned long long)a0;
- (char)shouldBurnIn;
- (struct CGPDFAnnotation { } *)CGPDFAnnotation;
- (BOOL)handledByPDFKit;
- (id)mouseDownAction;
- (struct CGPDFDictionary { } *)popupDictionary;
- (void)setCGPathArray:(struct CGPath **)a0;
- (void)setIsSignature:(char)a0;
- (id)_PDFMarkupColorForColor:(id)a0;
- (void)addRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forKey:(struct __CFString { } *)a1 toDictionaryRef:(struct __CFDictionary { } *)a2;
- (id)getColorFromAppearanceNSString:(id)a0;
- (void)setShouldPrint:(char)a0;
- (id)_PDFTextColorForColor:(id)a0;
- (id)_accessibilityTypeString;
- (char)shouldNotRotate;
- (void)_addAKAnnotationToDictionary:(struct __CFDictionary { } *)a0;
- (void)_addUnknownPropertiesToDictionaryRef:(struct __CFDictionary { } *)a0;
- (BOOL)_annotationAllowsCommenting:(id)a0;
- (BOOL)_boolValueForAnnotationFlag:(unsigned long long)a0 withDefaultValue:(BOOL)a1;
- (BOOL)_boolValueForWidgetFieldFlag:(unsigned long long)a0;
- (struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; })_calculatePDFAnnotationLayerOutsetForAction:(int)a0;
- (id)_createArrayForCGRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_createArrayForColor:(id)a0;
- (void)_didRemoveValueForAnnotationKey:(id)a0;
- (void)_didSetValue:(id)a0 forAnnotationKey:(id)a1;
- (void)_drawAnnotationWithBox:(long long)a0 inContext:(struct CGContext { } *)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_drawingRectForLineStyle:(long long)a0 from:(struct CGPoint { double x0; double x1; })a1 to:(struct CGPoint { double x0; double x1; })a2 borderWidth:(double)a3;
- (void)_generateFormFieldName;
- (id)_getFullFieldNameFromDictionary:(struct CGPDFDictionary { } *)a0;
- (char)_isTextMarkupRedaction;
- (char)_isValidAnnotationKey:(id)a0;
- (struct CGPoint { double x0; double x1; })_pointOutsetFrom:(struct CGPoint { double x0; double x1; })a0 startPoint1:(struct CGPoint { double x0; double x1; })a1 startPoint2:(struct CGPoint { double x0; double x1; })a2 lineWidth:(double)a3;
- (void)_printDictionary:(id)a0 atDepth:(int)a1;
- (void)_releaseDictionaryRef;
- (void)_restorePropertiesAfterSetBounds;
- (void *)_sanitizeValue:(id)a0 forKey:(id)a1;
- (void)_savePropertiesBeforeSetBounds;
- (id)_selectionForMarkupAnnotation;
- (char)_setArray:(id)a0 forAnnotationKey:(id)a1;
- (void)_setBoolValue:(BOOL)a0 forAnnotationFlag:(unsigned long long)a1;
- (void)_setBoolValue:(BOOL)a0 forWidgetFieldFlag:(unsigned long long)a1;
- (char)_setDictionary:(id)a0 forAnnotationKey:(id)a1;
- (char)_setInteger:(id)a0 forAnnotationKey:(id)a1;
- (char)_setString:(id)a0 forAnnotationKey:(id)a1;
- (char)_setVarious:(id)a0 forAnnotationKey:(id)a1;
- (char)_shouldReadAppearanceStreams;
- (id)_textForValue:(id)a0;
- (void)addActionToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addAdditionalActionsToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addAlternateFieldNameToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addAppearanceCharacteristicsToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addAppearanceForKey:(struct __CFString { } *)a0 toDictionaryRef:(struct __CFDictionary { } *)a1;
- (void)addBezierPath:(id)a0;
- (void)addBorderStyleToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addBorderToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addColor:(id)a0 forKey:(struct __CFString { } *)a1 toDictionaryRef:(struct __CFDictionary { } *)a2;
- (void)addContentsToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addControl;
- (void)addDefaultAppearanceDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addDefaultFieldValueToDictionaryRef:(struct __CFDictionary { } *)a0;
- (char)addDestinationToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addFieldFlagsToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addFieldNameToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addFieldTypeToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addFieldValueToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addFlagsToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addHighlightingModeToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addInkListToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addLineEndingStylesToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addLineToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addMaxLenToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addModificationDateToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addNameToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addNormalAndDownAppearanceToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addNormalAndDownAppearanceWithStateToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addNormalAppearanceToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addNormalAppearanceWithStateToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addOpenToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addOptionsToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addPageReferenceToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addPopupToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addQuadPointsToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addQuaddingToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addTextLabelToDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)addToPageView;
- (id)akAnnotation;
- (id)akAnnotationAdaptor;
- (Class)annotationSubclassForPopup;
- (struct CGPDFForm { } *)appearance:(int)a0;
- (id)autoFillTextContentType;
- (unsigned long long)autofillEntryType;
- (void)cacheAppearances;
- (struct CGDisplayList { } *)cachedAppearance:(int)a0;
- (struct CGPath **)cgPathArray;
- (void)clearFormData;
- (id)colorFromAppearanceTokens:(id)a0;
- (struct __CFDictionary { } *)commonCreateDictionaryRef;
- (char)contentsLocked;
- (id)createAKAnnotation;
- (id)createAttributedStringForTextWidget;
- (id)createDefaultAppearanceStringWithFont:(id)a0 fontColor:(id)a1;
- (void)decodeUnknownAnnotationProperties;
- (struct __CFDictionary { } *)dictionaryRef;
- (struct __CFDictionary { } *)dictionaryRefExcludingParentOrPopup;
- (void)drawAppearance:(struct CGPDFForm { } *)a0 withBox:(long long)a1 inContext:(struct CGContext { } *)a2;
- (void)drawAppearance:(struct CGPDFForm { } *)a0 withBox:(long long)a1 inContext:(struct CGContext { } *)a2 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 scaleProportional:(char)a4;
- (void)drawAppearance:(struct CGPDFForm { } *)a0 withBox:(long long)a1 inContext:(struct CGContext { } *)a2 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 scaleProportional:(char)a4 suppressTextRendering:(char)a5;
- (void)drawAppearance:(struct CGPDFForm { } *)a0 withBox:(long long)a1 inContext:(struct CGContext { } *)a2 scaleProportional:(char)a3;
- (void)drawCachedAppearance:(struct CGDisplayList { } *)a0 withBox:(long long)a1 inContext:(struct CGContext { } *)a2 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 scaleProportional:(char)a4;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })extendedBoundsForAction:(int)a0;
- (id)fontNameFromAppearanceTokens:(id)a0;
- (struct __CFDictionary { } *)gcCreateAttributesForFont:(id)a0 color:(id)a1;
- (id)getAKTextView;
- (void)getAppearancesFromDictionary:(struct CGPDFDictionary { } *)a0 ofType:(int)a1;
- (id)getColorFromAppearanceString:(struct CGPDFString { } *)a0;
- (id)getFontFromAppearanceNSString:(id)a0;
- (id)getFontFromAppearanceString:(struct CGPDFString { } *)a0;
- (id)getPDFKeyMappingDictionary;
- (BOOL)handledByPDFKitCheckAKEnabled:(char)a0;
- (void)highlightRedaction:(BOOL)a0;
- (char)inFormFillingMode;
- (id)indexSetForQuadPoints;
- (id)initCommonWithBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)initWithAnnotationDictionary:(struct CGPDFDictionary { } *)a0 forPage:(id)a1;
- (id)initWithBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forType:(id)a1 withProperties:(id)a2;
- (id)initWithCGPDFAnnotation:(struct CGPDFAnnotation { } *)a0 forPage:(id)a1;
- (id)initWithDictionary:(id)a0 forPage:(id)a1;
- (id)interactiveBackgroundColor;
- (char)intersectsWithRedactionPath;
- (char)isAppearanceStreamEmpty;
- (char)isAutofillNewContextStart;
- (char)isDetectedCheckbox;
- (char)isDetectedSignature;
- (BOOL)isFullyConstructed;
- (char)isInvisible;
- (char)isMarkupAnnotation;
- (char)isMarkupAnnotationSubtype;
- (char)isNoteAnnotation;
- (char)isReadOnlyAnnotation;
- (char)isRedaction;
- (char)isSynthesizedFormField;
- (char)isTextMarkupAnnotation;
- (char)isTextMarkupOrNoteAnnotation;
- (char)isTextWidget;
- (char)isWidgetOrMarkupAnnotation;
- (unsigned long long)markupStyle;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })noteBounds;
- (BOOL)noteContainsPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)pathLock;
- (id)pdfAnnotationUUID;
- (double)pointSizeFromAppearanceTokens:(id)a0;
- (char)pointerIsOverAnnotation;
- (char)popupDrawsCloseWidget;
- (char)popupDrawsText;
- (void)postAnnotationsChangedNotification;
- (void)presentRedactionDiscoverabilityAlertWithOldValue:(id)a0 forAnnotationKey:(id)a1;
- (void)printDictionaryKeyValues;
- (struct CGPath { } *)quadPointsPath;
- (void)releaseCGPathArray;
- (void)removeAKAnnotationAdaptor;
- (void)removeAllAppearanceStreams;
- (void)removeBezierPath:(id)a0;
- (void)removeFromPageView;
- (void)removeValueForAnnotationKey:(id)a0;
- (id)replaceTextWidgetWithString:(id)a0;
- (char)savesAppearanceStream;
- (id)scaledFontForTextWidget;
- (void)secondaryInit;
- (void)setAccessibilityNode:(id)a0;
- (void)setAppearance:(struct CGPDFForm { } *)a0 forType:(int)a1;
- (void)setAutoFillTextContentType:(id)a0;
- (void)setAutofillEntryType:(unsigned long long)a0;
- (char)setBoolean:(char)a0 forAnnotationKey:(id)a1;
- (void)setBoundsWithUndo:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setCGPDFAnnotation:(struct CGPDFAnnotation { } *)a0;
- (void)setContents:(id)a0 withUndo:(BOOL)a1;
- (void)setContentsLocked:(char)a0;
- (void)setDictionaryRef:(struct __CFDictionary { } *)a0;
- (void)setForExport:(char)a0;
- (void)setIsDetectedCheckbox:(char)a0;
- (void)setIsDetectedSignature:(char)a0;
- (void)setIsFullyConstructed:(BOOL)a0;
- (void)setIsTransparent:(BOOL)a0;
- (void)setMouseDownAction:(id)a0;
- (void)setPDFAnnotationDictionary:(id)a0;
- (void)setPDFAnnotationUUID:(id)a0;
- (void)setPointerIsOverAnnotation:(char)a0;
- (void)setPopupDrawsCloseWidget:(char)a0;
- (void)setPopupDrawsText:(char)a0;
- (void)setPopupInternal:(id)a0 scanPage:(char)a1;
- (void)setQuadPointsForIndexSet:(id)a0 withUndo:(BOOL)a1;
- (void)setReadOnlyAnnotation:(char)a0;
- (char)setRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forAnnotationKey:(id)a1;
- (void)setSavesAppearanceStream:(char)a0;
- (void)setShouldBurnIn:(char)a0;
- (void)setShouldDisplay:(char)a0;
- (void)setShouldHideInteractiveBackgroundColor:(char)a0;
- (void)setShouldNotRotate:(char)a0;
- (void)setShouldNotZoom:(char)a0;
- (void)setShouldReportAnalytics:(char)a0;
- (void)setShouldToggleNoView:(char)a0;
- (char)setValue:(id)a0 forAnnotationKey:(id)a1;
- (void)setWidgetOnStateString:(id)a0;
- (void)setupAKAnnotationAdaptorIfNecessary;
- (char)shouldComb;
- (char)shouldExport;
- (char)shouldNotZoom;
- (char)shouldPrint;
- (char)shouldReportAnalytics;
- (char)shouldToggleNoView;
- (struct CGPDFDictionary { } *)sourceDictionary;
- (char)suppressAppearanceStreamText;
- (id)textMarkupString;
- (id)tokenizeAppearanceString:(id)a0;
- (id)uiControl;
- (void)updateAnnotationEffect;
- (void)updateFormData;
- (id)valueForCGPDFObject:(struct CGPDFObject { } *)a0 visitedSet:(struct __CFSet { } *)a1 isInternalObject:(char *)a2;
- (id)widgetOnStateString;

@end
