@class NSString, NSArray, NSURL, CALayer, PDFDocument, PDFLayerControllerPrivate;
@protocol PDFLayerControllerDelegate;

@interface PDFLayerController : NSObject <PDFAccessibilityNodeParent, NSAccessibility, PDFHUDLayerControllerDelegate> {
    PDFLayerControllerPrivate *_private;
}

@property (class, nonatomic) BOOL useIOSurfaceForTiles;

@property (retain, nonatomic) CALayer *parentLayer;
@property (retain, nonatomic) PDFDocument *document;
@property (readonly, nonatomic) CALayer *documentLayer;
@property (nonatomic) id<PDFLayerControllerDelegate> delegate;
@property (weak, nonatomic) id accessibilityParent;
@property (retain, nonatomic) NSString *URLFragment;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isAccessibilityElement) char accessibilityElement;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } accessibilityFrame;
@property (getter=isAccessibilityFocused) char accessibilityFocused;
@property struct CGPoint { double x0; double x1; } accessibilityActivationPoint;
@property (weak) id accessibilityTopLevelUIElement;
@property (copy) NSURL *accessibilityURL;
@property (retain) id accessibilityValue;
@property (copy) NSString *accessibilityValueDescription;
@property (copy) NSArray *accessibilityVisibleChildren;
@property (copy) NSString *accessibilitySubrole;
@property (copy) NSString *accessibilityTitle;
@property (weak) id accessibilityTitleUIElement;
@property (copy) NSArray *accessibilityNextContents;
@property long long accessibilityOrientation;
@property (retain) id accessibilityOverflowButton;
@property (copy) NSString *accessibilityPlaceholderValue;
@property (copy) NSArray *accessibilityPreviousContents;
@property (copy) NSString *accessibilityRole;
@property (copy) NSString *accessibilityRoleDescription;
@property (retain) id accessibilitySearchButton;
@property (retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected) char accessibilitySelected;
@property (copy) NSArray *accessibilitySelectedChildren;
@property (copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (retain) id accessibilityShownMenu;
@property (retain) id accessibilityMinValue;
@property (retain) id accessibilityMaxValue;
@property (copy) NSArray *accessibilityLinkedUIElements;
@property (weak) id accessibilityWindow;
@property (copy) NSString *accessibilityIdentifier;
@property (copy) NSString *accessibilityHelp;
@property (copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityExpanded) char accessibilityExpanded;
@property (getter=isAccessibilityEdited) char accessibilityEdited;
@property (getter=isAccessibilityEnabled) char accessibilityEnabled;
@property (copy) NSArray *accessibilityChildren;
@property (copy) NSArray *accessibilityChildrenInNavigationOrder;
@property (retain) id accessibilityClearButton;
@property (retain) id accessibilityCancelButton;
@property (getter=isAccessibilityProtectedContent) char accessibilityProtectedContent;
@property (copy) NSArray *accessibilityContents;
@property (copy) NSString *accessibilityLabel;
@property (getter=isAccessibilityAlternateUIVisible) char accessibilityAlternateUIVisible;
@property (copy) NSArray *accessibilitySharedFocusElements;
@property (getter=isAccessibilityRequired) char accessibilityRequired;
@property (copy) NSArray *accessibilityCustomRotors;
@property (copy) NSArray *accessibilityUserInputLabels;
@property (copy) NSArray *accessibilityAttributedUserInputLabels;
@property (retain) id accessibilityApplicationFocusedUIElement;
@property (retain) id accessibilityMainWindow;
@property (getter=isAccessibilityHidden) char accessibilityHidden;
@property (getter=isAccessibilityFrontmost) char accessibilityFrontmost;
@property (retain) id accessibilityFocusedWindow;
@property (copy) NSArray *accessibilityWindows;
@property (weak) id accessibilityExtrasMenuBar;
@property (weak) id accessibilityMenuBar;
@property (copy) NSArray *accessibilityColumnTitles;
@property (getter=isAccessibilityOrderedByRow) char accessibilityOrderedByRow;
@property long long accessibilityHorizontalUnits;
@property long long accessibilityVerticalUnits;
@property (copy) NSString *accessibilityHorizontalUnitDescription;
@property (copy) NSString *accessibilityVerticalUnitDescription;
@property (copy) NSArray *accessibilityHandles;
@property (retain) id accessibilityWarningValue;
@property (retain) id accessibilityCriticalValue;
@property (getter=isAccessibilityDisclosed) char accessibilityDisclosed;
@property (weak) id accessibilityDisclosedByRow;
@property (retain) id accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel;
@property (copy) NSArray *accessibilityMarkerUIElements;
@property (retain) id accessibilityMarkerValues;
@property (retain) id accessibilityMarkerGroupUIElement;
@property long long accessibilityUnits;
@property (copy) NSString *accessibilityUnitDescription;
@property long long accessibilityRulerMarkerType;
@property (copy) NSString *accessibilityMarkerTypeDescription;
@property (retain) id accessibilityHorizontalScrollBar;
@property (retain) id accessibilityVerticalScrollBar;
@property (copy) NSArray *accessibilityAllowedValues;
@property (copy) NSArray *accessibilityLabelUIElements;
@property float accessibilityLabelValue;
@property (copy) NSArray *accessibilitySplitters;
@property (retain) id accessibilityDecrementButton;
@property (retain) id accessibilityIncrementButton;
@property (copy) NSArray *accessibilityTabs;
@property (retain) id accessibilityHeader;
@property long long accessibilityColumnCount;
@property long long accessibilityRowCount;
@property long long accessibilityIndex;
@property (copy) NSArray *accessibilityColumns;
@property (copy) NSArray *accessibilityRows;
@property (copy) NSArray *accessibilityVisibleRows;
@property (copy) NSArray *accessibilitySelectedRows;
@property (copy) NSArray *accessibilityVisibleColumns;
@property (copy) NSArray *accessibilitySelectedColumns;
@property long long accessibilitySortDirection;
@property (copy) NSArray *accessibilityRowHeaderUIElements;
@property (copy) NSArray *accessibilitySelectedCells;
@property (copy) NSArray *accessibilityVisibleCells;
@property (copy) NSArray *accessibilityColumnHeaderUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityRowIndexRange;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityColumnIndexRange;
@property long long accessibilityInsertionPointLineNumber;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySharedCharacterRange;
@property (copy) NSArray *accessibilitySharedTextUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityVisibleCharacterRange;
@property long long accessibilityNumberOfCharacters;
@property (copy) NSString *accessibilitySelectedText;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySelectedTextRange;
@property (copy) NSArray *accessibilitySelectedTextRanges;
@property (retain) id accessibilityToolbarButton;
@property (getter=isAccessibilityModal) char accessibilityModal;
@property (retain) id accessibilityProxy;
@property (getter=isAccessibilityMain) char accessibilityMain;
@property (retain) id accessibilityFullScreenButton;
@property (retain) id accessibilityGrowArea;
@property (copy) NSString *accessibilityDocument;
@property (retain) id accessibilityDefaultButton;
@property (retain) id accessibilityCloseButton;
@property (retain) id accessibilityZoomButton;
@property (retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized) char accessibilityMinimized;
@property (copy) NSArray *accessibilityCustomActions;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id)layout;
- (void)performAction:(id)a0;
- (void)rightMouseDown:(id)a0;
- (void)setCurrentPage:(id)a0;
- (void)setDisplayMode:(int)a0;
- (unsigned long long)accessibilityArrayAttributeCount:(id)a0;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (char)accessibilityIsIgnored;
- (id)accessibilityParent;
- (char)accessibilityShouldUseUniqueId;
- (void)autoscrollTimerFired:(id)a0;
- (id)colorSpace;
- (struct CGSize { double x0; double x1; })contentSize;
- (void)copy:(id)a0;
- (void)copyLink:(id)a0;
- (id)currentPage;
- (long long)displayMode;
- (char)documentIsLocked;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (BOOL)keyDown:(id)a0;
- (id)menuForEvent:(id)a0;
- (void)mouseDown:(id)a0;
- (void)mouseDragged:(id)a0;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void)mouseMoved:(id)a0;
- (void)mouseUp:(id)a0;
- (struct CGPoint { double x0; double x1; })scrollPosition;
- (void)setAccessibilityParent:(id)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setScrollPosition:(struct CGPoint { double x0; double x1; })a0;
- (double)contentScaleFactor;
- (id)highlights;
- (void)zoomIn:(id)a0;
- (void)setContentScaleFactor:(double)a0;
- (void)zoomOut:(id)a0;
- (void)_setActualSize:(id)a0;
- (void)_setSinglePage:(id)a0;
- (void)_setDoublePage:(id)a0;
- (void)_searchInDictionary:(id)a0;
- (void)_setAutoSize:(id)a0;
- (void)_setDoublePageScrolling:(id)a0;
- (void)_setSinglePageScrolling:(id)a0;
- (id)currentSelection;
- (void)selectAll;
- (void)setCurrentSelection:(id)a0;
- (unsigned long long)currentPageIndex;
- (void)formChanged:(id)a0;
- (void)gotoDestination:(id)a0;
- (void)setDeviceScaleFactor:(double)a0;
- (void)gotoNextPage;
- (void)gotoPreviousPage;
- (void)_scrollToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)drawTextSelectionBoundingBoxes:(BOOL)a0;
- (id)rectsForSelectionInLayoutSpace:(id)a0;
- (id)annotationFollowing:(id)a0 wrapAround:(char)a1;
- (id)annotationPreceding:(id)a0 wrapAround:(char)a1;
- (void)gotoAnnotation:(id)a0;
- (void)openWithPreview;
- (id)searchSelection;
- (long long)_areaOfInterestForMouse:(id)a0;
- (double)_autoScaleFactor;
- (void)_continueTrackingAnnotation:(id)a0;
- (void)_continueTrackingPDFScannerResult:(id)a0;
- (id)_convertEvent:(id)a0 toPagePoint:(struct CGPoint { double x0; double x1; } *)a1;
- (void)_finishTrackingAnnotation:(id)a0;
- (void)_finishTrackingPDFScannerResult:(id)a0;
- (long long)_getCursorTypeForAreaOfInterest:(long long)a0;
- (void)_performWebSearch:(id)a0;
- (void)_setupDocumentLayer;
- (void)_setupPDFHUDController;
- (void)_trackMouse:(id)a0 forAnnotation:(id)a1;
- (void)_trackMouse:(id)a0 forPDFScannerResult:(id)a1 onPage:(id)a2 atPoint:(struct CGPoint { double x0; double x1; })a3;
- (id)_truncateString:(id)a0 toLength:(long long)a1;
- (void)_updateAutoScale;
- (void)_updateDocumentLayer;
- (void)_updateDocumentLayerWithDelegateCalls;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityConvertBoundsToRootView:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withPageIndex:(long long)a1;
- (struct CGPoint { double x0; double x1; })accessibilityConvertPointFromRootView:(struct CGPoint { double x0; double x1; })a0 withPageIndex:(long long)a1;
- (void)activateNextAnnotation:(char)a0;
- (void)annotationHit:(id)a0;
- (void)attemptToUnlockWithPassword:(id)a0;
- (void)beginAutoscroll:(id)a0;
- (void)beginMarqueeTextSelection:(id)a0;
- (void)beginStandardTextSelection:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForAnnotation:(id)a0;
- (void)colorWidgetBackgrounds:(BOOL)a0;
- (struct CGSize { double x0; double x1; })contentSizeRespectingZoom;
- (void)continueAutoscroll:(id)a0;
- (void)continueMarqueeTextSelection:(id)a0;
- (void)continueStandardTextSelection:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToRootView:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromPageLayer:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRootViewRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toPageLayer:(id)a1;
- (void)copySelection;
- (void)debugAccessibilityMenu:(id)a0;
- (void)debugMenu:(id)a0;
- (void)debugNodeBoundingBoxesMenu:(id)a0;
- (void)debugTextBoundingBoxesMenu:(id)a0;
- (void)delegateUpdateLayer:(id)a0 forAnnotation:(id)a1;
- (id)determineCurrentPage;
- (struct CGColorSpace { } *)deviceColorSpace;
- (double)deviceScaleFactor;
- (char)displaysPDFHUDController;
- (void)doButtonHit:(id)a0;
- (void)drawAccessibilityTags:(BOOL)a0;
- (void)drawDetectedAnnotationBounds:(BOOL)a0;
- (void)drawNodeBoundingBoxesType:(int)a0 enableDrawing:(BOOL)a1;
- (void)drawTextBoundingBoxesType:(int)a0 enableDrawing:(BOOL)a1;
- (void)drawTextPreciseBoundingBoxes:(BOOL)a0;
- (void)dumpPDFViewLayer;
- (void)enablePageShadows:(char)a0;
- (id)findBox:(id)a0;
- (id)findString:(id)a0 caseSensitive:(char)a1 highlightMatches:(char)a2;
- (void)finishAutoscroll:(id)a0;
- (BOOL)flipsTileContents;
- (void)forceGotoPage:(id)a0;
- (id)getSelectionForWordAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)goToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onPage:(id)a1;
- (void)gotoDestinationNoPush:(id)a0;
- (void)gotoFirstPage;
- (void)gotoLastPage;
- (void)gotoPage:(id)a0;
- (void)gotoSelection:(id)a0;
- (void)handleButtonHit:(id)a0;
- (void)highlightPDFRedactions:(BOOL)a0;
- (id)input:(id)a0 defaultValue:(id)a1;
- (void)interactWithAnnotation:(id)a0;
- (void)internalForceAnnotationRefresh;
- (void)internalForceTileRefresh;
- (unsigned long long)lastPageIndex;
- (void)magnifyWithMagnification:(double)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 immediately:(char)a2;
- (id)menuForEvent:(id)a0 withUserInterfaceLayoutDirection:(long long)a1;
- (id)nextPage;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })pageBreakMargins;
- (void)pageChanged:(id)a0;
- (void)pageDown;
- (char)pageShadowsEnabled;
- (void)pageUp;
- (id)passwordInstruction;
- (id)passwordPrompt;
- (id)previousPage;
- (void)printAccessibilityTree;
- (void)printActivePageAnnotations;
- (void)printActivePageInfo;
- (void)printActivePageText;
- (void)printDocumentAttributes;
- (int)recursivelyPerformNextActions:(id)a0 index:(int)a1 count:(int)a2;
- (void)resetAccessibilityTree;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rootViewBounds;
- (void)saveToPDF;
- (void)scrollWithDelta:(struct CGSize { double x0; double x1; })a0;
- (void)searchInDictionaryWithSelection:(id)a0;
- (void)setDeviceColorSpace:(struct CGColorSpace { } *)a0;
- (void)setDisplaysPDFHUDController:(char)a0;
- (void)setHighlights:(id)a0;
- (void)setSearchSelection:(id)a0;
- (void)simpleSelectionEnabledChanged;
- (void)snapshotInContext:(struct CGContext { } *)a0;
- (double)targetBackingScaleFactor;
- (void)updateAccessibilityTags;
- (void)updateNodeBoundingBoxes;
- (char)validateDebugAccessibilityMenuItem:(id)a0;
- (char)validateDebugMenuItem:(id)a0;
- (char)validateDebugNodeBoundingBoxesMenuItem:(id)a0;
- (char)validateDebugTextBoundingBoxesMenuItem:(id)a0;
- (void)windowDown;
- (void)windowUp;

@end
