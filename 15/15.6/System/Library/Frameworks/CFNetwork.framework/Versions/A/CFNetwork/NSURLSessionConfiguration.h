@class NSURL, NSHTTPCookieStorage, NSDictionary, NSObject, NSURLCache, NSString, _NSHTTPAlternativeServicesStorage, NSSet, NSArray, NSURLCredentialStorage, NSData, _NSHSTSStorage, NSNumber;
@protocol NSURLSessionAppleIDContext, OS_xpc_object;

@interface NSURLSessionConfiguration : NSObject <NSMutableCopying, NSSecureCoding, NSCopying> {
    struct HTTPConnectionCacheLimits { int fHTTPLoadWidth; int fHTTPPipeliningHighWatermark; int fHTTPPipeliningLowWatermark; int fHTTPPriorityNumLevels; int fHTTPNumFastLanes; int fHTTPMinimumFastLanePriority; int fHTTPConnectionCachePurgeTimeout; int fHTTPConnectionCacheCellPurgeTimeout; int fLongLivedConnectionCachePurgeTimeout; int fLongLivedConnectionCacheCellPurgeTimeout; } _limits;
}

@property (class, readonly) NSURLSessionConfiguration *defaultSessionConfiguration;
@property (class, readonly) NSURLSessionConfiguration *ephemeralSessionConfiguration;
@property (class, readonly) char supportsSecureCoding;

@property (copy) NSArray *proxyConfigurations;
@property (copy) NSDictionary *_socketStreamProperties;
@property (copy) NSString *identifier;
@property (getter=isBackgroundSession) char backgroundSession;
@property NSString *disposition;
@property (retain) NSURLCredentialStorage *_phskip_credStorage;
@property char _phskip_credStorageSet;
@property (retain) NSURLCache *_phskip_urlCache;
@property char _phskip_urlCacheSet;
@property (retain) NSHTTPCookieStorage *_phskip_cookieStorage;
@property char _phskip_cookieStorageSet;
@property (retain) _NSHSTSStorage *_phskip_hstsStorage;
@property char _phskip_hstsStorageSet;
@property char skip_download_unlink;
@property char _requiresClientToOpenFiles;
@property (copy) NSString *_tcpConnectionPoolName;
@property char _forcesNewConnections;
@property (copy) NSDictionary *_socketStreamProperties;
@property char _supportsAVAssetDownloads;
@property (getter=_isProxySession) char _proxySession;
@property (copy) NSSet *_authenticatorStatusCodes;
@property char _preventsIdleSleep;
@property char _usePipeliningHeuristics;
@property char _shouldPreserveBackgroundSessionDisposition;
@property char _disablesOutOfProcessDirectWiFiUsage;
@property char _disablesUseOfProxySession;
@property char _disablesNWLoader;
@property (copy) NSString *_companionAppBundleIdentifier;
@property (copy) NSString *_watchAppBundleIdentifier;
@property (copy) NSString *_watchExtensionBundleIdentifier;
@property unsigned long long _forcedNetworkServiceType;
@property (copy) NSDictionary *_overriddenDelegateOptions;
@property (retain) _NSHTTPAlternativeServicesStorage *_phskip_alternativeServicesStorage;
@property char _phskip_alternativeServicesStorageSet;
@property int _xpcActivityBudgeted;
@property int _allowsHTTP3Internal;
@property int _neTrackerTCCResult;
@property int _enablesL4SInternal;
@property char _requiresPowerPluggedIn;
@property (copy) NSURL *_directoryForDownloadedFiles;
@property (copy) NSString *_sourceApplicationBundleIdentifier;
@property (copy) NSString *_sourceApplicationSecondaryIdentifier;
@property (copy) NSData *_sourceApplicationAuditTokenData;
@property (copy) NSString *_attributedBundleIdentifier;
@property unsigned long long _TCPAdaptiveReadTimeout;
@property unsigned long long _TCPAdaptiveWriteTimeout;
@property char _reportsDataStalls;
@property char _allowsExpensiveAccess;
@property char _allowsConstrainedNetworkAccess;
@property (setter=_setAllowsUCA:) char _allowsUCA;
@property char _allowsVirtualInterfaces;
@property unsigned long long _multipathAlternatePort;
@property char _allowsPowerNapScheduling;
@property char _allowsHSTSWithUntrustedRootCertificate;
@property char _preventsIdleSleepOnceConnected;
@property char _sessionSendsLaunchOnDemandEvents;
@property long long _timingDataOptions;
@property char _shouldSkipPreferredClientCertificateLookup;
@property (copy) id<NSURLSessionAppleIDContext> _appleIDContext;
@property (copy) NSData *_atsContext;
@property double _connectionCachePurgeTimeout;
@property double _connectionCacheCellPurgeTimeout;
@property double _longLivedConnectionCachePurgeTimeout;
@property double _longLivedConnectionCacheCellPurgeTimeout;
@property long long _connectionCacheNumPriorityLevels;
@property long long _connectionCacheNumFastLanes;
@property long long _connectionCacheMinimumFastLanePriority;
@property char _allowsRetryForBackgroundDataTasks;
@property char _onBehalfOfPairedDevice;
@property char _clientIsNotExplicitlyDiscretionary;
@property char _respectsAllowsCellularAccessForDiscretionaryTasks;
@property char _allowsWCA;
@property (copy) NSNumber *_maximumWatchCellularTransferSize;
@property char _overridesBackgroundSessionAutoRedirect;
@property char _performsEVCertCheck;
@property char _infersDiscretionaryFromOriginatingClient;
@property (copy) NSString *_connectionPoolName;
@property char _prefersInfraWiFi;
@property char _allowsMultipathTCP;
@property char _allowsResponseMonitoringDuringBodyTranmission;
@property char _allowsIndefiniteConnections;
@property (copy) NSString *_CTDataConnectionServiceType;
@property char _allowsTCPFastOpen;
@property char _allowsTLSSessionTickets;
@property char _allowsTLSSessionResumption;
@property char _allowsTLSFalseStart;
@property (copy) NSString *_tlsTrustPinningPolicyName;
@property char _allowsTLSFallback;
@property char _allowsTLSECH;
@property char _forceEnablePQTLS;
@property char _preventsDirectWiFiAccess;
@property char _allowTCPIOConnectionStreamTask;
@property unsigned long long _customReadBufferSize;
@property double _customReadBufferTimeout;
@property char _preventsSystemHTTPProxyAuthentication;
@property char _requiresSecureHTTPSProxyConnection;
@property (copy) NSArray *_proxyConfigurations;
@property char _duetPreauthorized;
@property long long _duetPreClearedMode;
@property (retain) NSObject<OS_xpc_object> *_xpcActivity;
@property char _requiresSustainedDataDelivery;
@property char _ignoreDidReceiveResponseDisposition;
@property char _alwaysPerformDefaultTrustEvaluation;
@property (copy) NSSet *_suppressedAutoAddedHTTPHeaders;
@property long long _expiredDNSBehavior;
@property long long _IDSMessageTimeout;
@property long long _companionProxyPreference;
@property char _preventsAppSSO;
@property char _allowsSensitiveLogging;
@property char _allowsReachabilityCheck;
@property char _allowsHTTP3;
@property (retain) _NSHTTPAlternativeServicesStorage *_alternativeServicesStorage;
@property (retain) _NSHSTSStorage *_hstsStorage;
@property int _loggingPrivacyLevel;
@property char _usesNWLoader;
@property (copy) NSString *_downloadFileProtectionType;
@property char _enablesL4S;
@property char _prohibitEncryptedDNS;
@property int _pidForHAR;
@property char _enableOAuthBearerTokenChallenges;
@property char _skipsStackTraceCapture;
@property char _disableAPWakeOnIdleConnections;
@property (readonly) char _inPrivateBrowsing;
@property char _systemClientOfPrivateAccessTokens;
@property unsigned long long requestCachePolicy;
@property double timeoutIntervalForRequest;
@property double timeoutIntervalForResource;
@property unsigned long long networkServiceType;
@property char allowsCellularAccess;
@property char allowsExpensiveNetworkAccess;
@property char allowsConstrainedNetworkAccess;
@property char requiresDNSSECValidation;
@property char waitsForConnectivity;
@property (getter=isDiscretionary) char discretionary;
@property (copy) NSString *sharedContainerIdentifier;
@property char sessionSendsLaunchEvents;
@property (copy) NSDictionary *connectionProxyDictionary;
@property int TLSMinimumSupportedProtocol;
@property int TLSMaximumSupportedProtocol;
@property unsigned short TLSMinimumSupportedProtocolVersion;
@property unsigned short TLSMaximumSupportedProtocolVersion;
@property char HTTPShouldUsePipelining;
@property char HTTPShouldSetCookies;
@property unsigned long long HTTPCookieAcceptPolicy;
@property (copy) NSDictionary *HTTPAdditionalHeaders;
@property long long HTTPMaximumConnectionsPerHost;
@property (retain) NSHTTPCookieStorage *HTTPCookieStorage;
@property (retain) NSURLCredentialStorage *URLCredentialStorage;
@property (retain) NSURLCache *URLCache;
@property char shouldUseExtendedBackgroundIdleMode;
@property (copy) NSArray *protocolClasses;
@property long long multipathServiceType;
@property char usesClassicLoadingMode;

+ (id)new;
+ (void)initialize;
+ (id)AVBackgroundSessionConfigurationWithIdentifier:(id)a0;
+ (id)backgroundSessionConfiguration:(id)a0;
+ (id)_AVBackgroundSessionConfigurationWithIdentifier:(id)a0;
+ (id)_defaultProtocolClasses;
+ (id)backgroundSessionConfigurationWithIdentifier:(id)a0;
+ (id)immutableEffectiveConfigurationFromConfig:(id)a0;
+ (id)sessionConfigurationForSharedSession;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (unsigned long long)hash;
- (id)init;
- (char)isEqual:(id)a0;
- (id)mutableCopyWithZone:(struct _NSZone { } *)a0;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id).cxx_construct;
- (void *)_copyAttribute:(struct __CFString { } *)a0;
- (id)_initWithConfiguration:(id)a0;
- (id)_sessionConfiguration;
- (struct _CFHSTSPolicy { } *)copyHSTSPolicy;
- (id)copyImmutableVariant:(id /* block */)a0;
- (struct HTTPConnectionCacheLimits { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; })getConnectionCacheLimits;
- (char)proxiesRequireNWLoader;

@end
