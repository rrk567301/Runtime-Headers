@class NSString, AVHapticPlayer, CHMetrics, AVAudioSession, HapticServerConfig, NSObject, NSArray;
@protocol OS_dispatch_source, OS_dispatch_queue;

@interface CHHapticEngine : NSObject {
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    struct map<unsigned long, std::pair<NSURL *, NSDictionary *>, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, std::pair<NSURL *, NSDictionary *>>>> { struct __tree<std::__value_type<unsigned long, std::pair<NSURL *, NSDictionary *>>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::pair<NSURL *, NSDictionary *>>, std::less<unsigned long>>, std::allocator<std::__value_type<unsigned long, std::pair<NSURL *, NSDictionary *>>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned long, std::pair<NSURL *, NSDictionary *>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::pair<NSURL *, NSDictionary *>>, std::less<unsigned long>>> { unsigned long long __value_; } __pair3_; } __tree_; } _publicAudioResources;
    AVHapticPlayer *_player;
    char _autoShutdownEnabled;
    char _running;
    double _runTimeout;
    CHMetrics *_metrics;
}

@property (readonly) AVHapticPlayer *player;
@property char running;
@property (readonly) CHMetrics *metrics;
@property (nonatomic) char activateAudioSessionOnStart;
@property (readonly) AVAudioSession *avAudioSession;
@property (readonly) unsigned int audioSessionID;
@property (readonly) char sessionIsShared;
@property (copy) id /* block */ clientFinishedHandler;
@property (retain) NSObject<OS_dispatch_source> *timer;
@property unsigned long long currentPlayerBehavior;
@property (readonly) char needsAudioPowerBudget;
@property (readonly) HapticServerConfig *serverConfig;
@property (nonatomic) char muteHapticsWhileRecordingAudio;
@property (nonatomic) char followAudioRoute;
@property (nonatomic) char highPriority;
@property (readonly) NSArray *availableLocalities;
@property (readonly) NSString *locality;
@property (readonly) NSString *priority;
@property (readonly) NSString *hapticPowerUsage;
@property (readonly) NSString *audioPowerUsage;
@property (readonly) NSString *usageCategory;
@property double autoShutdownTimeout;
@property (readonly) double currentTime;
@property (copy) id /* block */ stoppedHandler;
@property (copy) id /* block */ resetHandler;
@property (nonatomic) char playsHapticsOnly;
@property (nonatomic) char playsAudioOnly;
@property (nonatomic) char isMutedForAudio;
@property (nonatomic) char isMutedForHaptics;
@property (nonatomic, getter=isAutoShutdownEnabled) char autoShutdownEnabled;

+ (void)initialize;
+ (id)capabilitiesForHardware;
+ (void)clearResourceMap;
+ (void)dispatchOnGlobal:(id /* block */)a0;
+ (unsigned long long)doRegisterAudioResource:(id)a0 options:(id)a1 fromPattern:(char)a2 player:(id)a3 error:(id *)a4;
+ (char)doUnregisterAudioResource:(unsigned long long)a0 fromPattern:(char)a1 player:(id)a2 error:(id *)a3;
+ (void)lazyInitResourceMap;
+ (char)resourceIsRegistered:(unsigned long long)a0;
+ (char)supports1stPartyHaptics;
+ (char)supportsHapticServer;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id).cxx_construct;
- (char)startAndReturnError:(id *)a0;
- (id)initWithOptions:(id)a0 error:(id *)a1;
- (id)initAndReturnError:(id *)a0;
- (void)startWithCompletionHandler:(id /* block */)a0;
- (void)cancelIdleTimer;
- (void)releaseChannel:(id)a0;
- (unsigned int)getSessionIDFromAVAudioSession:(id)a0;
- (void)addPublicAudioResourceID:(unsigned long long)a0 withURL:(id)a1 options:(id)a2;
- (void)beginIdleTimer;
- (char)checkEngineRunning:(id *)a0;
- (char)checkEngineStateOnStart:(id *)a0;
- (void)connectAudioSession:(id)a0;
- (id)createAdvancedPlayerWithPattern:(id)a0 error:(id *)a1;
- (id)createAdvancedPlayerWithRingtoneData:(id)a0 error:(id *)a1;
- (id)createAdvancedPlayerWithRingtonePattern:(id)a0 error:(id *)a1;
- (id)createAdvancedPlayerWithVibePatternDictionary:(id)a0 error:(id *)a1;
- (id)createHapticPlayerWithOptions:(id)a0;
- (id)createOptionsFromAudioSessionID:(unsigned int)a0 shared:(char)a1 bypassAudioSession:(char)a2;
- (id)createPlayerWithPattern:(id)a0 error:(id *)a1;
- (id)createPrivilegedPlayerWithPlayable:(id)a0 error:(id *)a1;
- (void)disconnectAudioSession:(id)a0;
- (void)dispatchOnLocal:(id /* block */)a0;
- (void)dispatchSyncOnLocal:(id /* block */)a0;
- (struct __map_iterator<std::__tree_iterator<std::__value_type<unsigned long, std::pair<NSURL *, NSDictionary *>>, std::__tree_node<std::__value_type<unsigned long, std::pair<NSURL *, NSDictionary *>>, void *> *, long>> { struct __tree_iterator<std::__value_type<unsigned long, std::pair<NSURL *, NSDictionary *>>, std::__tree_node<std::__value_type<unsigned long, std::pair<NSURL *, NSDictionary *>>, void *> *, long> { void *x0; } x0; })doFindPublicAudioResourceID:(unsigned long long)a0;
- (char)doInit:(unsigned int)a0 sessionIsShared:(char)a1 options:(id)a2 bypassAudioSession:(char)a3 error:(id *)a4;
- (char)doInitWithOptions:(id)a0 error:(id *)a1;
- (char)doPlayPattern:(id)a0 error:(id *)a1;
- (char)doReferenceAudioResourceByID:(unsigned long long)a0;
- (char)doStartEngineAndWait:(id *)a0;
- (void)doStartWithCompletionHandler:(id /* block */)a0;
- (char)doStopEngineAndWait:(id *)a0;
- (void)doStopWithCompletionHandler:(id /* block */)a0;
- (void)doUnregisterAllPublicAudioResources;
- (char)finishInit:(id *)a0;
- (id)getAvailableChannel:(id *)a0;
- (double)getDurationForResource:(unsigned long long)a0;
- (id)getMetricsForPlayer:(id)a0;
- (long long)getReporterIDFromAVAudioSession:(id)a0;
- (id)getUsageCategory:(id)a0;
- (void)handleConnectionError;
- (void)handleFinish:(id)a0;
- (void)handleMediaServerDeath:(id)a0;
- (void)handleMediaServerRecovery:(id)a0;
- (char)hasPublicAudioResourceID:(unsigned long long)a0;
- (unsigned long long)idForPublicAudioResourceURL:(id)a0 withOptions:(id)a1;
- (id)initWithAudioSession:(id)a0 error:(id *)a1;
- (id)initWithAudioSession:(id)a0 sessionIsShared:(char)a1 error:(id *)a2;
- (id)initWithAudioSession:(id)a0 sessionIsShared:(char)a1 options:(id)a2 error:(id *)a3;
- (id)initWithAudioSessionID:(unsigned int)a0 error:(id *)a1;
- (id)initWithAudioSessionID:(unsigned int)a0 options:(id)a1 error:(id *)a2;
- (char)isBehaviorSet:(unsigned long long)a0;
- (char)isResourceLoopEnabled:(unsigned long long)a0;
- (char)notifyPlayerStarted:(id)a0 atTime:(double)a1;
- (void)notifyPlayerStopped:(id)a0 atTime:(double)a1;
- (void)notifyWhenPlayersFinished:(id /* block */)a0;
- (char)playPatternFromData:(id)a0 error:(id *)a1;
- (char)playPatternFromURL:(id)a0 error:(id *)a1;
- (void)prewarmWithCompletionHandler:(id /* block */)a0;
- (void)reconfigureAudioSession;
- (unsigned long long)registerAudioResource:(id)a0 options:(id)a1 error:(id *)a2;
- (void)removePublicAudioResourceID:(unsigned long long)a0;
- (char)resourceIsRegistered:(unsigned long long)a0;
- (void)setMetricsTestModeEnabled;
- (char)setupEngineWithCategory:(id)a0 session:(id)a1 needsAudioPowerBudget:(char)a2 error:(id *)a3;
- (char)setupSystemSoundAudioSession:(id)a0 needsAudioPowerBudget:(char)a1 error:(id *)a2;
- (char)setupUnsharedAudioSession:(id)a0 isConstantVolume:(char)a1 needsAudioPowerBudget:(char)a2 error:(id *)a3;
- (void)startIdleTimerWithHandler:(id /* block */)a0;
- (void)stopAndWait;
- (void)stopPrewarm;
- (void)stopWithCompletionHandler:(id /* block */)a0;
- (void)storeOptions:(id)a0;
- (void)toggleBehavior:(unsigned long long)a0 set:(char)a1;
- (char)unregisterAudioResource:(unsigned long long)a0 error:(id *)a1;
- (void)updateAudioConfigurations:(id)a0 session:(id)a1;
- (void)updateEngineBehavior;
- (void)updateEngineBehaviorWithError:(id *)a0;

@end
