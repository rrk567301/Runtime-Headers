@class WebAVMediaSelectionOption, NSArray, NSString, AVValueTiming, AVPlayerController;

@interface WebAVPlayerController : NSObject {
    struct WeakPtr<WebCore::PlaybackSessionModel, WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> { struct RefPtr<WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>, WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> { struct DefaultWeakPtrImpl *m_ptr; } m_impl; } _delegate;
    struct WeakPtr<WebCore::PlaybackSessionInterfaceIOS, WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> { struct RefPtr<WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>, WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> { struct DefaultWeakPtrImpl *m_ptr; } m_impl; } _playbackSessionInterface;
    double _defaultPlaybackRate;
    double _rate;
    char _liveStreamEventModePossible;
    char _isScrubbing;
    char _allowsPictureInPicture;
    char _pictureInPictureInterrupted;
    char _muted;
    double _seekToTime;
    WebAVMediaSelectionOption *_currentAudioMediaSelectionOption;
    WebAVMediaSelectionOption *_currentLegibleMediaSelectionOption;
    struct RetainPtr<AVPlayer> { void *m_ptr; } _player;
}

@property (retain) AVPlayerController *playerControllerProxy;
@property void *delegate;
@property void *playbackSessionInterface;
@property (readonly) char canScanForward;
@property char canScanBackward;
@property (readonly) char canSeekToBeginning;
@property (readonly) char canSeekToEnd;
@property (readonly) char isScrubbing;
@property (readonly) char canSeekFrameBackward;
@property (readonly) char canSeekFrameForward;
@property (readonly) char hasContentChapters;
@property (readonly) char isSeeking;
@property (readonly) double seekToTime;
@property char canPlay;
@property (getter=isPlaying) char playing;
@property char canPause;
@property char canTogglePlayback;
@property double defaultPlaybackRate;
@property double rate;
@property char canSeek;
@property double contentDuration;
@property struct CGSize { double width; double height; } contentDimensions;
@property char hasEnabledAudio;
@property char hasEnabledVideo;
@property char hasVideo;
@property (readonly) double minTime;
@property (readonly) double maxTime;
@property double contentDurationWithinEndTimes;
@property (retain) NSArray *loadedTimeRanges;
@property long long status;
@property (retain) AVValueTiming *timing;
@property (retain) NSArray *seekableTimeRanges;
@property (getter=isMuted) char muted;
@property double volume;
@property (readonly) char hasMediaSelectionOptions;
@property (readonly) char hasAudioMediaSelectionOptions;
@property (retain) NSArray *audioMediaSelectionOptions;
@property (retain) WebAVMediaSelectionOption *currentAudioMediaSelectionOption;
@property (readonly) char hasLegibleMediaSelectionOptions;
@property (retain) NSArray *legibleMediaSelectionOptions;
@property (retain) WebAVMediaSelectionOption *currentLegibleMediaSelectionOption;
@property (readonly, getter=isPlayingOnExternalScreen) char playingOnExternalScreen;
@property (nonatomic, getter=isPlayingOnSecondScreen) char playingOnSecondScreen;
@property (getter=isExternalPlaybackActive) char externalPlaybackActive;
@property long long externalPlaybackType;
@property (retain) NSString *externalPlaybackAirPlayDeviceLocalizedName;
@property char allowsExternalPlayback;
@property (readonly, getter=isPictureInPicturePossible) char pictureInPicturePossible;
@property (getter=isPictureInPictureInterrupted) char pictureInPictureInterrupted;
@property double seekableTimeRangesLastModifiedTime;
@property double liveUpdateInterval;
@property (retain) AVValueTiming *minTiming;
@property (retain) AVValueTiming *maxTiming;

+ (id)keyPathsForValuesAffectingPlaying;
+ (id)keyPathsForValuesAffectingCanScanForward;
+ (id)keyPathsForValuesAffectingCanSeekToBeginning;
+ (id)keyPathsForValuesAffectingCanSeekToEnd;
+ (id)keyPathsForValuesAffectingCurrentTimeWithinEndTimes;
+ (id)keyPathsForValuesAffectingHasAudioMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasLegibleMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasLiveStreamingContent;
+ (id)keyPathsForValuesAffectingHasMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasSeekableLiveStreamingContent;
+ (id)keyPathsForValuesAffectingMaxTime;
+ (id)keyPathsForValuesAffectingMinTime;
+ (id)keyPathsForValuesAffectingPlayingOnExternalScreen;

- (void)dealloc;
- (id)forwardingTargetForSelector:(SEL)a0;
- (id)init;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (id)currentItem;
- (void)pause:(id)a0;
- (void)seekToTime:(double)a0 toleranceBefore:(double)a1 toleranceAfter:(double)a2;
- (id)player;
- (void)seekToTime:(double)a0;
- (void)play:(id)a0;
- (char)hasSeekableLiveStreamingContent;
- (void)togglePlayback:(id)a0;
- (void)beginScrubbing:(id)a0;
- (void)beginScanningBackward:(id)a0;
- (void)beginScanningForward:(id)a0;
- (double)currentTimeWithinEndTimes;
- (void)endScanningBackward:(id)a0;
- (void)endScanningForward:(id)a0;
- (void)endScrubbing:(id)a0;
- (void)gotoEndOfSeekableRanges:(id)a0;
- (char)hasLiveStreamingContent;
- (void)seekByTimeInterval:(double)a0;
- (void)seekByTimeInterval:(double)a0 toleranceBefore:(double)a1 toleranceAfter:(double)a2;
- (void)seekChapterBackward:(id)a0;
- (void)seekChapterForward:(id)a0;
- (void)seekToBeginning:(id)a0;
- (void)seekToEnd:(id)a0;
- (void)setAllowsPictureInPicture:(char)a0;
- (void)setCurrentTimeWithinEndTimes:(double)a0;
- (void)setDefaultPlaybackRate:(double)a0 fromJavaScript:(char)a1;
- (void)setRate:(double)a0 fromJavaScript:(char)a1;
- (void)skipBackwardThirtySeconds:(id)a0;
- (void)toggleMuted:(id)a0;
- (void)togglePlaybackEvenWhenInBackground:(id)a0;
- (void)updateMinMaxTiming;
- (void)volumeChanged:(double)a0;

@end
