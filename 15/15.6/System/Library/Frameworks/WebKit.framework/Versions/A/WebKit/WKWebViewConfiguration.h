@class NSURL, WKProcessPool, WKUserContentController, NSString, NSSet, _WKWebExtensionController, _WKApplicationManifest, WKWebExtensionController, WKWebsiteDataStore, NSArray, WKWebView, WKWebpagePreferences, WKPreferences, _WKVisitedLinkStore;

@interface WKWebViewConfiguration : NSObject <WKObject, NSSecureCoding, NSCopying> {
    struct ObjectStorage<API::PageConfiguration> { struct type { unsigned char __lx[608]; } data; } _pageConfiguration;
}

@property (class, readonly) char supportsSecureCoding;

@property (weak, nonatomic, setter=_setRelatedWebView:) WKWebView *_relatedWebView;
@property (weak, nonatomic, setter=_setWebViewToCloneSessionStorageFrom:) WKWebView *_webViewToCloneSessionStorageFrom;
@property (copy, nonatomic, setter=_setGroupIdentifier:) NSString *_groupIdentifier;
@property (retain, nonatomic, setter=_setVisitedLinkStore:) _WKVisitedLinkStore *_visitedLinkStore;
@property (retain, nonatomic, setter=_setRequiredWebExtensionBaseURL:) NSURL *_requiredWebExtensionBaseURL;
@property (readonly, nonatomic) WKWebExtensionController *_strongWebExtensionController;
@property (weak, nonatomic, setter=_setWeakWebExtensionController:) WKWebExtensionController *_weakWebExtensionController;
@property (retain, nonatomic, setter=_setWebExtensionController:) _WKWebExtensionController *_webExtensionController;
@property (weak, nonatomic, setter=_setAlternateWebViewForNavigationGestures:) WKWebView *_alternateWebViewForNavigationGestures;
@property (nonatomic, setter=_setRespectsImageOrientation:) char _respectsImageOrientation;
@property (nonatomic, setter=_setPrintsBackgrounds:) char _printsBackgrounds;
@property (nonatomic, setter=_setIncrementalRenderingSuppressionTimeout:) double _incrementalRenderingSuppressionTimeout;
@property (nonatomic, setter=_setAllowsJavaScriptMarkup:) char _allowsJavaScriptMarkup;
@property (nonatomic, setter=_setConvertsPositionStyleOnCopy:) char _convertsPositionStyleOnCopy;
@property (nonatomic, setter=_setAllowsMetaRefresh:) char _allowsMetaRefresh;
@property (nonatomic, setter=_setAllowUniversalAccessFromFileURLs:) char _allowUniversalAccessFromFileURLs;
@property (nonatomic, setter=_setAllowTopNavigationToDataURLs:) char _allowTopNavigationToDataURLs;
@property (nonatomic, setter=_setNeedsStorageAccessFromFileURLsQuirk:) char _needsStorageAccessFromFileURLsQuirk;
@property (nonatomic, setter=_setMainContentUserGestureOverrideEnabled:) char _mainContentUserGestureOverrideEnabled;
@property (nonatomic, setter=_setInvisibleAutoplayNotPermitted:) char _invisibleAutoplayNotPermitted;
@property (nonatomic, setter=_setMediaDataLoadsAutomatically:) char _mediaDataLoadsAutomatically;
@property (nonatomic, setter=_setAttachmentElementEnabled:) char _attachmentElementEnabled;
@property (nonatomic, setter=_setAttachmentWideLayoutEnabled:) char _attachmentWideLayoutEnabled;
@property (nonatomic, setter=_setAttachmentFileWrapperClass:) Class _attachmentFileWrapperClass;
@property (nonatomic, setter=_setInitialCapitalizationEnabled:) char _initialCapitalizationEnabled;
@property (nonatomic, setter=_setApplePayEnabled:) char _applePayEnabled;
@property (nonatomic, setter=_setWaitsForPaintAfterViewDidMoveToWindow:) char _waitsForPaintAfterViewDidMoveToWindow;
@property (nonatomic, getter=_isControlledByAutomation, setter=_setControlledByAutomation:) char _controlledByAutomation;
@property (nonatomic, setter=_setApplicationManifest:) _WKApplicationManifest *_applicationManifest;
@property (nonatomic, setter=_setColorFilterEnabled:) char _colorFilterEnabled;
@property (nonatomic, setter=_setIncompleteImageBorderEnabled:) char _incompleteImageBorderEnabled;
@property (nonatomic, setter=_setDrawsBackground:) char _drawsBackground;
@property (nonatomic, setter=_setShouldDeferAsynchronousScriptsUntilAfterDocumentLoad:) char _shouldDeferAsynchronousScriptsUntilAfterDocumentLoad;
@property (readonly, nonatomic) WKWebsiteDataStore *_websiteDataStoreIfExists;
@property (copy, nonatomic, setter=_setCORSDisablingPatterns:) NSArray *_corsDisablingPatterns;
@property (copy, nonatomic, setter=_setMaskedURLSchemes:) NSSet *_maskedURLSchemes;
@property (nonatomic, setter=_setCrossOriginAccessControlCheckEnabled:) char _crossOriginAccessControlCheckEnabled;
@property (nonatomic, setter=_setLoadsFromNetwork:) char _loadsFromNetwork;
@property (copy, nonatomic, setter=_setAllowedNetworkHosts:) NSSet *_allowedNetworkHosts;
@property (nonatomic, setter=_setLoadsSubresources:) char _loadsSubresources;
@property (nonatomic, setter=_setIgnoresAppBoundDomains:) char _ignoresAppBoundDomains;
@property (nonatomic, setter=_setClientNavigationsRunAtForegroundPriority:) char _clientNavigationsRunAtForegroundPriority;
@property (nonatomic, setter=_setPortsForUpgradingInsecureSchemeForTesting:) NSArray *_portsForUpgradingInsecureSchemeForTesting;
@property (nonatomic, setter=_setShowsURLsInToolTips:) char _showsURLsInToolTips;
@property (nonatomic, setter=_setServiceControlsEnabled:) char _serviceControlsEnabled;
@property (nonatomic, setter=_setImageControlsEnabled:) char _imageControlsEnabled;
@property (nonatomic, setter=_setContextMenuQRCodeDetectionEnabled:) char _contextMenuQRCodeDetectionEnabled;
@property (nonatomic, setter=_setRequiresUserActionForEditingControlsManager:) char _requiresUserActionForEditingControlsManager;
@property (nonatomic, setter=_setCPULimit:) double _cpuLimit;
@property (nonatomic, setter=_setPageGroup:) struct OpaqueWKPageGroup { } *_pageGroup;
@property (nonatomic, setter=_setRequiresUserActionForAudioPlayback:) char _requiresUserActionForAudioPlayback;
@property (nonatomic, setter=_setRequiresUserActionForVideoPlayback:) char _requiresUserActionForVideoPlayback;
@property (nonatomic, setter=_setOverrideContentSecurityPolicy:) NSString *_overrideContentSecurityPolicy;
@property (nonatomic, setter=_setMediaContentTypesRequiringHardwareSupport:) NSString *_mediaContentTypesRequiringHardwareSupport;
@property (nonatomic, setter=_setLegacyEncryptedMediaAPIEnabled:) char _legacyEncryptedMediaAPIEnabled;
@property (nonatomic, setter=_setAllowMediaContentTypesRequiringHardwareSupportAsFallback:) char _allowMediaContentTypesRequiringHardwareSupportAsFallback;
@property (nonatomic, setter=_setMediaCaptureEnabled:) char _mediaCaptureEnabled;
@property (copy, nonatomic, setter=_setAdditionalSupportedImageTypes:) NSArray *_additionalSupportedImageTypes;
@property (nonatomic, setter=_setUndoManagerAPIEnabled:) char _undoManagerAPIEnabled;
@property (nonatomic, setter=_setShouldRelaxThirdPartyCookieBlocking:) char _shouldRelaxThirdPartyCookieBlocking;
@property (nonatomic, setter=_setProcessDisplayName:) NSString *_processDisplayName;
@property (nonatomic, setter=_setAppHighlightsEnabled:) char _appHighlightsEnabled;
@property (nonatomic, setter=_setAllowTestOnlyIPC:) char _allowTestOnlyIPC;
@property (nonatomic, setter=_setDelaysWebProcessLaunchUntilFirstLoad:) char _delaysWebProcessLaunchUntilFirstLoad;
@property (nonatomic, setter=_setSampledPageTopColorMaxDifference:) double _sampledPageTopColorMaxDifference;
@property (nonatomic, setter=_setSampledPageTopColorMinHeight:) double _sampledPageTopColorMinHeight;
@property (nonatomic, setter=_setAttributedBundleIdentifier:) NSString *_attributedBundleIdentifier;
@property (nonatomic, setter=_setContentSecurityPolicyModeForExtension:) unsigned long long _contentSecurityPolicyModeForExtension;
@property (nonatomic, setter=_setMarkedTextInputEnabled:) char _markedTextInputEnabled;
@property (nonatomic, setter=_setMultiRepresentationHEICInsertionEnabled:) char _multiRepresentationHEICInsertionEnabled;
@property (nonatomic, setter=_setScrollToTextFragmentIndicatorEnabled:) char _scrollToTextFragmentIndicatorEnabled;
@property (nonatomic, setter=_setScrollToTextFragmentMarkingEnabled:) char _scrollToTextFragmentMarkingEnabled;
@property (readonly, nonatomic) NSString *_applicationNameForDesktopUserAgent;
@property (retain, nonatomic) WKProcessPool *processPool;
@property (retain, nonatomic) WKPreferences *preferences;
@property (retain, nonatomic) WKUserContentController *userContentController;
@property (retain, nonatomic) WKWebExtensionController *webExtensionController;
@property (retain, nonatomic) WKWebsiteDataStore *websiteDataStore;
@property (nonatomic) char suppressesIncrementalRendering;
@property (copy, nonatomic) NSString *applicationNameForUserAgent;
@property (nonatomic) char allowsAirPlayForMediaPlayback;
@property (nonatomic) char upgradeKnownHostsToHTTPS;
@property (nonatomic) unsigned long long mediaTypesRequiringUserActionForPlayback;
@property (copy, nonatomic) WKWebpagePreferences *defaultWebpagePreferences;
@property (nonatomic) char limitsNavigationsToAppBoundDomains;
@property (nonatomic) char allowsInlinePredictions;
@property (nonatomic) long long userInterfaceDirectionPolicy;
@property (nonatomic) char supportsAdaptiveImageGlyph;
@property (nonatomic) long long writingToolsBehavior;
@property (readonly) struct Object { void /* function */ **x0; void *x1; } *_apiObject;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (char)accessInstanceVariablesDirectly;
+ (char)_isValidCustomScheme:(id)a0;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setValue:(id)a0 forKey:(id)a1;
- (id)valueForKey:(id)a0;
- (void)_setVisitedLinkProvider:(id)a0;
- (id)_visitedLinkProvider;
- (void)setURLSchemeHandler:(id)a0 forURLScheme:(id)a1;
- (id)urlSchemeHandlerForURLScheme:(id)a0;

@end
