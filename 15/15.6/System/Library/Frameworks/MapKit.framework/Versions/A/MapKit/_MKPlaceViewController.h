@class MKPlaceInfoViewController, MKPlacePoisInlineMapViewController, MKPlaceItemActionDataProvider, MKPlaceHeaderButtonsViewController, NSMapTable, NSMutableArray, NSString, MKPlaceActionManager, _MKPlaceActionButtonController, GEOWalkingOptions, NSViewController, GEOTransitOptions, NSObject, GEOCyclingOptions, MKETAProvider, MKPlaceCardHeaderViewController, CLLocation, CNContact, GEOAutomobileOptions, _MKDistanceDetailProvider, NSPopover, MKPlaceInlineMapViewController, MKPlaceCardFooterActionsViewController, CNContactStore, MKMapItem;
@protocol _MKPlaceItem, _MKPlaceViewControllerFeedbackDelegate, _MKPlaceViewControllerDelegate, OS_dispatch_queue;

@interface _MKPlaceViewController : MKLayoutCardViewController <MKStackingViewControllerDelegate, NSSharingServiceDelegate, NSSharingServicePickerDelegate, MKPlaceCardPhotosControllerDelegate, MKPlaceCardHeaderViewControllerDelegate, GEOLogContextDelegate, MKETAProviderDelegate, MKETAProviderObserver, MKPlaceHeaderButtonsViewControllerDelegate, MKPlaceInlineMapViewControllerDelegate, _MKPlaceCardConforming, _MKInfoCardAnalyticsDelegate, MKPlaceCardActionControllerDelegate> {
    MKPlaceItemActionDataProvider *_actionDataProvider;
    MKPlaceActionManager *_actionManager;
    MKPlaceCardHeaderViewController *_headerViewController;
    MKPlaceHeaderButtonsViewController *_buttonsHeaderController;
    MKPlaceInfoViewController *_infoViewController;
    MKPlaceInlineMapViewController *_inlineMapViewController;
    MKPlacePoisInlineMapViewController *_poisInlineMapViewController;
    MKPlaceCardFooterActionsViewController *_placeActionViewController;
    MKETAProvider *_etaProvider;
    CNContactStore *_contactStore;
    NSMapTable *_additionalViewControllers;
    char _overrideDefaultShowRAP;
    char _hasContactOnlyMapItem;
    char _isUpdatingViewControllers;
    struct CGPoint { double x; double y; } _beginAnalyticsScrollingPoint;
    double _contentAlpha;
    unsigned long long _initialAppearanceSignpostID;
}

@property (retain, nonatomic) CNContact *originalContact;
@property (retain, nonatomic) _MKDistanceDetailProvider *distanceMonitor;
@property (nonatomic) char hasCheckedDistanceAvailability;
@property (retain, nonatomic) NSMutableArray *viewDidAppearBlocks;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *analyticsQueue;
@property (retain, nonatomic) _MKPlaceActionButtonController *headerSecondaryButtonController;
@property (retain, nonatomic) _MKPlaceActionButtonController *headerAlternatePrimaryButtonController;
@property (retain, nonatomic) GEOAutomobileOptions *automobileOptions;
@property (retain, nonatomic) GEOWalkingOptions *walkingOptions;
@property (retain, nonatomic) GEOTransitOptions *transitOptions;
@property (retain, nonatomic) GEOCyclingOptions *cyclingOptions;
@property (weak, nonatomic) id<_MKPlaceViewControllerDelegate> placeViewControllerDelegate;
@property (copy, nonatomic) id /* block */ placeViewFeedbackAppLaunchHandler;
@property (weak, nonatomic) id<_MKPlaceViewControllerFeedbackDelegate> placeViewFeedbackDelegate;
@property (readonly, nonatomic) CNContact *contact;
@property (nonatomic) char showContactActions;
@property (readonly, nonatomic) id<_MKPlaceItem> placeItem;
@property (retain, nonatomic) NSPopover *popover;
@property (nonatomic) char useSmallPictures;
@property (retain, nonatomic) NSViewController *topBarViewController;
@property (nonatomic) double headerHeight;
@property (nonatomic) char showTitleBar;
@property (nonatomic) char hideDirectionsButtons;
@property (nonatomic) char showEditButton;
@property (nonatomic) char hideInlineMap;
@property (nonatomic) char showInlineMapInHeader;
@property (nonatomic) char showNearbyApps;
@property (nonatomic) char showReportAProblem;
@property (nonatomic) char disableReportAProblem;
@property (retain, nonatomic) CLLocation *location;
@property (nonatomic) char showSimulateLocation;
@property (retain, nonatomic) MKMapItem *mapItem;
@property (copy, nonatomic) NSString *headerTitle;
@property (nonatomic) char showShareActionsButton;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) char placeInCollections;
@property (nonatomic) char placeInShortcuts;
@property (nonatomic) char placeInBookmarks;
@property (readonly, nonatomic) double headerSecondaryNameLabelPadding;
@property (nonatomic) unsigned long long options;

+ (char)isValidActionURL:(id)a0;
+ (id)validateActionURLs:(id)a0;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)_commonInit;
- (double)contentAlpha;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sharingService:(id)a0 sourceFrameOnScreenForShareItem:(id)a1;
- (id)sharingService:(id)a0 transitionImageForShareItem:(id)a1 contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2;
- (id)initWithMapItem:(id)a0;
- (char)isLoading;
- (void)_createViewControllersForBrand:(id)a0;
- (id)_mapTableKeyForSectionPosition:(long long)a0;
- (long long)_sectionPositionForMapTableKey:(id)a0;
- (char)isGuardianRestrictedCNContainer;
- (char)isLayoutDynamic;
- (void)placeHeaderButtonsViewController:(id)a0 didSelectPrimaryType:(unsigned long long)a1 withView:(id)a2;
- (void)viewWillAppear:(char)a0;
- (void)ETAProviderLocationUpdated:(id)a0;
- (id)_createViewControllerForModule:(id)a0;
- (void)_didDismissReportAProblemWindow;
- (id)_traits;
- (id)hoursVC;
- (id)infosVC;
- (id)photoVC;
- (id)poisInlineMapVC;
- (void)removeAdditionalViewController:(id)a0;
- (char)_canShowWhileLocked;
- (id)_contactForEditOperations;
- (id)_contactStore;
- (void)_createViewControllers:(id)a0;
- (void)_didResolveAttribution:(id)a0;
- (void)_launchAttributionURLs:(id)a0 withAttribution:(id)a1 mapItem:(id)a2 completionHandler:(id /* block */)a3;
- (void)_logClientAndServerLayouts:(id)a0;
- (int)_moduleTypeForViewController:(id)a0;
- (void)_performWhenViewHasAppeared:(id /* block */)a0;
- (void)_setDefaultViewControllers:(id)a0;
- (char)_shouldShowContactActions;
- (char)_showReportAProblem;
- (void)_showShareSheet:(id)a0;
- (void)_updateViewControllers;
- (void)_willShowReportAProblemWindow;
- (void)addAdditionalViewController:(id)a0 atPosition:(long long)a1;
- (id)additionalViewControllersAtPosition:(long long)a0;
- (char)allowTransitLineSelection;
- (unsigned long long)annotatedItemListDisplayStyle;
- (id)attributionsVC;
- (id)createFooterActions;
- (int)currentMapViewTargetForAnalytics;
- (int)currentUITargetForAnalytics;
- (id)generateAvailableActionForAnalytics;
- (id)generateUnactionableUIElementsForAnalytics;
- (int)getPlaceCardTypeForAnalytics;
- (void)infoCardAnalyticsDidSelectAction:(int)a0 eventValue:(id)a1 feedbackDelegateSelector:(int)a2;
- (void)infoCardAnalyticsDidSelectAction:(int)a0 eventValue:(id)a1 feedbackDelegateSelector:(int)a2 actionRichProviderId:(id)a3;
- (void)infoCardAnalyticsDidSelectAction:(int)a0 target:(int)a1 eventValue:(id)a2 actionURL:(id)a3 photoID:(id)a4 feedbackDelegateSelector:(int)a5 actionRichProviderId:(id)a6;
- (void)infoCardAnalyticsDidSelectAction:(int)a0 target:(int)a1 eventValue:(id)a2 actionURL:(id)a3 photoID:(id)a4 moduleMetadata:(id)a5 feedbackDelegateSelector:(int)a6 actionRichProviderId:(id)a7;
- (void)infoCardAnalyticsDidSelectAction:(int)a0 target:(int)a1 eventValue:(id)a2 feedbackDelegateSelector:(int)a3 actionRichProviderId:(id)a4;
- (void)infoCardAnalyticsDidSelectAction:(int)a0 target:(int)a1 eventValue:(id)a2 moduleMetadata:(id)a3 feedbackDelegateSelector:(int)a4 actionRichProviderId:(id)a5;
- (void)infoCardTransitAnalyticsDidSelectionAction:(int)a0 resultIndex:(long long)a1 targetID:(unsigned long long)a2 transitSystem:(id)a3 transitDepartureSequence:(id)a4 transitCardCategory:(int)a5 transitIncident:(id)a6 feedbackDelegateSelector:(int)a7;
- (id)initWithContact:(id)a0 mapItem:(id)a1;
- (id)initWithContact:(id)a0 mapItem:(id)a1 options:(unsigned long long)a2;
- (id)initWithMapItem:(id)a0 options:(unsigned long long)a1;
- (id)initWithPlaceItem:(id)a0 options:(unsigned long long)a1;
- (id)inlineMapVC;
- (char)inlineMapViewControllerDidSelectMap:(id)a0;
- (int)mapTypeForETAProvider:(id)a0;
- (void)placeActionManager:(id)a0 didSelectAddOrEditNoteWithEnvironment:(id)a1 selectedAdd:(char)a2;
- (void)placeActionManager:(id)a0 didSelectAddOrRemoveFromLibraryWithEnvironment:(id)a1 selectedAdd:(char)a2;
- (void)placeActionManager:(id)a0 didSelectAddToContactsUsingEnvironment:(id)a1;
- (void)placeActionManager:(id)a0 didSelectAddToExistingContactWithEnvironment:(id)a1;
- (void)placeActionManager:(id)a0 didSelectAddToGuidesWithEnvironment:(id)a1;
- (void)placeActionManager:(id)a0 didSelectDirectionsWithEnvironment:(id)a1;
- (void)placeActionManager:(id)a0 didSelectShareFromView:(id)a1;
- (void)placeActionManager:(id)a0 didSelectShareWithEnvironment:(id)a1;
- (void)placeCardActionControllerDidSelectAddPhoto:(id)a0 presentingViewController:(id)a1 sourceView:(id)a2;
- (void)placeCardActionControllerDidSelectReportAProblem:(id)a0 fromView:(id)a1 isQuickAction:(char)a2;
- (void)placeCardActionControllerDidSelectViewAllPhotos:(id)a0 presentingViewController:(id)a1;
- (void)placeCardPhotosController:(id)a0 didSelectViewPhotoWithID:(id)a1 presentingViewController:(id)a2;
- (void)placeCardWillCloseFromClientType:(unsigned long long)a0;
- (void)setAllowTransitLineSelection:(char)a0;
- (void)setContentAlpha:(double)a0;
- (void)setMapItem:(id)a0 contact:(id)a1 updateOriginalContact:(char)a2;
- (void)setPlaceItem:(id)a0;
- (void)setPlaceItem:(id)a0 updateOriginalContact:(char)a1;
- (void)setShowAddToPersonalGuides:(char)a0;
- (void)setUseCompactPhotosView:(char)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sharingService:(id)a0 opaqueFrameForSourceWindow:(id)a1;
- (char)shouldDisplayBrowseCategoryVC;
- (char)shouldUseSmallPhotosWithPhotosController:(id)a0;
- (char)showAddToPersonalGuides;
- (void)showContentIfLoaded;
- (double)stackingViewController:(id)a0 heightForSeparatorBetweenUpperViewController:(id)a1 andLowerViewController:(id)a2;
- (double)stackingViewController:(id)a0 minimumVisibleSurfacePercentForAnalyticsSelection:(id)a1;
- (char)stackingViewController:(id)a0 showsTitleForViewController:(id)a1;
- (void)stackingViewController:(id)a0 verticalScrollerInsetDidChangeDuringLayoutPhase:(long long)a1;
- (void)stackingViewControllerDidLayoutViewControllers:(id)a0;
- (double)stackingViewControllerHeightForTitleView:(id)a0;
- (void)updateContentAlpha;
- (void)updateHeaderTitle;
- (char)useCompactPhotosView;
- (void)viewDidAppear:(char)a0;
- (void)viewDidDisappear:(char)a0;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(char)a0;

@end
