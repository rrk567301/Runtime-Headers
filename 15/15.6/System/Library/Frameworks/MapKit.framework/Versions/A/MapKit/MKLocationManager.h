@class CLLocation, GEOLocationShifter, NSObject, NSBundle, GEOLocation, _MKWiFiObserver, NSMutableArray, CLHeading, NSString, geo_isolater, NSHashTable, NSTimer, NSError, NSLock;
@protocol MKLocationProvider, OS_dispatch_group, MNLocationRecorder;

@interface MKLocationManager : NSObject <GEOResourceManifestTileGroupObserver, _MKWiFiObserverDelegate, MKLocationProviderDelegate> {
    id<MKLocationProvider> _locationProvider;
    NSHashTable *_locationObservers;
    NSHashTable *_locationListeners;
    NSHashTable *_headingObservers;
    CLLocation *_lastLocation;
    double _lastLocationUpdateTime;
    char _trackingLocation;
    char _trackingHeading;
    double _applicationResumeTime;
    double _applicationSuspendTime;
    double _headingUpdateTime;
    double _locationAccuracyUpdateTime;
    double _locationUpdateStartTime;
    char _isReceivingAccurateLocations;
    NSMutableArray *_waitForAccurateLocationsHandlers;
    NSTimer *_waitForAccurateLocationsTimer;
    double _lastLocationReportTime;
    GEOLocationShifter *_locationShifter;
    NSTimer *_headingThrottlingTimer;
    double _lastVehicleHeading;
    double _lastVehicleSpeed;
    double _lastVehicleHeadingUpdateTime;
    double _lastVehicleSpeedUpdateTime;
    int _consecutiveOutOfCourseCount;
    char _continuedAfterBecomingInactive;
    char _suspended;
    NSMutableArray *_recentLocationUpdateIntervals;
    NSLock *_lastLocationLock;
    NSLock *_observersLock;
    int _accuracyAuthorizationState;
    char _temporaryPreciseLocationAuthorizationPromptShown;
    geo_isolater *_accuracyAuthorizationIsolater;
    struct GEOOnce_s { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; char didRun; } _initializedAuthorizationStatus;
    NSObject<OS_dispatch_group> *_authStatusInitializationGroup;
    _MKWiFiObserver *_wifiObserver;
    char _hasCustomDesiredAccuracy;
}

@property (retain, nonatomic) id<MKLocationProvider> locationProvider;
@property (copy, nonatomic) id /* block */ locationCorrector;
@property (nonatomic) char logStartStopLocationUpdates;
@property (nonatomic, getter=isEnabled) char enabled;
@property (readonly, nonatomic, getter=isLocationServicesAuthorizationNeeded) char locationServicesAuthorizationNeeded;
@property (readonly, nonatomic) char isLocationServicesAvailable;
@property (readonly, nonatomic) char isLocationServicesPossiblyAvailable;
@property (readonly, nonatomic) char isLocationServicesEnabled;
@property (readonly, nonatomic) char isLocationServicesApproved;
@property (readonly, nonatomic) char isLocationServicesDenied;
@property (readonly, nonatomic) char isLocationServicesRestricted;
@property (readonly, nonatomic) char isHeadingServicesAvailable;
@property (readonly, nonatomic) char isAuthorizedForPreciseLocation;
@property (readonly, nonatomic) char isAuthorizationNotDetermined;
@property (readonly, nonatomic) char isTemporaryPreciseLocationAuthorizationPromptShown;
@property (readonly, nonatomic) char isWiFiEnabled;
@property (readonly, nonatomic) double headingUpdateTimeInterval;
@property (readonly, nonatomic) GEOLocation *currentLocation;
@property (readonly, nonatomic) GEOLocation *gridSnappedCurrentLocation;
@property (readonly, nonatomic) GEOLocation *courseCorrectedLocation;
@property (readonly, nonatomic) char hasLocation;
@property (readonly, nonatomic) CLLocation *lastLocation;
@property (readonly, nonatomic) CLLocation *lastGoodLocation;
@property (readonly, nonatomic) char isLastLocationStale;
@property (readonly, nonatomic) NSError *locationError;
@property (nonatomic) double desiredAccuracy;
@property (nonatomic) double distanceFilter;
@property (nonatomic) char matchInfoEnabled;
@property (nonatomic) char fusionInfoEnabled;
@property (readonly, nonatomic) CLLocation *lastProviderLocation;
@property (readonly, nonatomic) double expectedGpsUpdateInterval;
@property (readonly, nonatomic) double timeScale;
@property (retain, nonatomic) NSBundle *effectiveBundle;
@property (copy, nonatomic) NSString *effectiveBundleIdentifier;
@property (nonatomic) char useCourseForHeading;
@property (readonly, nonatomic) CLHeading *heading;
@property (retain, nonatomic) CLHeading *throttledHeading;
@property (copy, nonatomic) id /* block */ networkActivity;
@property (retain, nonatomic) id<MNLocationRecorder> locationRecorder;
@property (readonly, nonatomic) double navigationCourse;
@property (nonatomic) double minimumLocationUpdateInterval;
@property (nonatomic) char continuesWhileInactive;
@property (readonly, nonatomic, getter=wasLastLocationPushed) char lastLocationPushed;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)setCanMonitorWiFiStatus:(char)a0;
+ (id)sharedLocationManager;
+ (id)timeoutError;

- (void)dealloc;
- (id)init;
- (void)_suspend;
- (void).cxx_destruct;
- (void)reset;
- (void)applicationDidBecomeActive:(id)a0;
- (void)applicationWillResignActive:(id)a0;
- (void)dismissHeadingCalibrationDisplay;
- (void)requestAlwaysAuthorization;
- (void)setHeading:(id)a0;
- (void)setLastLocation:(id)a0;
- (void)resourceManifestManager:(id)a0 didChangeActiveTileGroup:(id)a1 fromOldTileGroup:(id)a2;
- (void)_reportHeadingFailureWithError:(id)a0;
- (void)startHeadingUpdateWithObserver:(id)a0;
- (void)stopLocationUpdateWithObserver:(id)a0;
- (void)_useDefaultCoreLocationProvider;
- (void)_initializeAuthStatusIfNecessary;
- (char)_isTimeToResetOnResume;
- (void)_locationProvider:(id)a0 didUpdateLocation:(id)a1 lastKnownNavCourse:(double)a2;
- (void)_reportHeadingSuccess;
- (void)_reportLocationFailureWithError:(id)a0;
- (void)_reportLocationReset;
- (void)_reportLocationStatus:(SEL)a0;
- (void)_reportLocationSuccess;
- (void)_setIsReceivingAccurateLocations:(char)a0;
- (void)_setTrackingHeading:(char)a0;
- (void)_setTrackingLocation:(char)a0;
- (char)_shouldAllowLocationUpdateInterval:(double)a0;
- (void)_startLocationUpdateWithObserver:(id)a0 desiredAccuracy:(double)a1;
- (void)_syncLocationProviderWithTracking;
- (void)_waitForAccurateLocationsTimerFired:(id)a0;
- (void)dampenGPSLocationAccuracy:(id *)a0;
- (id)initWithCLLocationManager:(id)a0;
- (char)isLocationServicesPossiblyAvailable:(id *)a0;
- (char)isLocationSimulated;
- (char)isWiFiDisabledBlockingLocation;
- (void)listenForLocationUpdates:(id)a0;
- (void)locationProvider:(id)a0 didReceiveError:(id)a1;
- (void)locationProvider:(id)a0 didUpdateHeading:(id)a1;
- (void)locationProvider:(id)a0 didUpdateLocation:(id)a1;
- (void)locationProvider:(id)a0 didUpdateLocation:(id)a1 lastKnownNavCourse:(double)a2;
- (void)locationProviderDidChangeAuthorizationStatus:(id)a0;
- (void)locationProviderDidPauseLocationUpdates:(id)a0;
- (void)locationProviderDidResumeLocationUpdates:(id)a0;
- (char)locationProviderShouldPauseLocationUpdates:(id)a0;
- (id)observersDescription;
- (void)pushLocation:(id)a0;
- (void)resetAfterResumeIfNecessary;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)a0 handler:(id /* block */)a1;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)a0 handler:(id /* block */)a1 timeout:(double)a2;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)a0 handler:(id /* block */)a1 timeout:(double)a2 maxLocationAge:(double)a3;
- (id)singleLocationUpdateWithHandler:(id /* block */)a0;
- (void)startLocationUpdateWithObserver:(id)a0;
- (void)startVehicleHeadingUpdate;
- (void)startVehicleSpeedUpdate;
- (void)stopHeadingUpdateWithObserver:(id)a0;
- (void)stopListeningForLocationUpdates:(id)a0;
- (void)stopVehicleHeadingUpdate;
- (void)stopVehicleSpeedUpdate;
- (void)stopWaitingForAuthCallback;
- (void)waitForAccurateLocationWithTimeout:(double)a0 handler:(id /* block */)a1;
- (void)wiFiObserverDidChangeEnabled:(id)a0;

@end
