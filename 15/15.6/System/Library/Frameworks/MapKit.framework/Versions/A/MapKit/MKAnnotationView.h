@class VKAnchorWrapper, NSColor, MKUserLocationAnnotationViewProxy, MKSelectionAccessory, MKPresentableSelectionAccessoryViewController, _MKAnnotationViewCustomFeatureAnnotation, _MKStaticMapView, NSMutableArray, NSImage, NSString, _MKKVOProxy, CALayer, _MKDeferredSelectionAccessoryPresentation, MKCalloutView, _MKAnnotationViewAnchor, NSView, GEORouteMatch, MKSelectionAccessoryView, MKUsageCounter;
@protocol MKAnnotation;

@interface MKAnnotationView : NSView <_MKKVOProxyDelegate, MKSelectionAccessoryViewDelegate, MKAnnotationRepresentation, MKLocatableObject> {
    struct CLLocationCoordinate2D { double latitude; double longitude; } _coordinate;
    MKUserLocationAnnotationViewProxy *_userLocationProxy;
    double _rotationRadians;
    _MKAnnotationViewAnchor *_anchor;
    unsigned long long _hiddenReasons;
    NSMutableArray *_hiddenCompletionBlocks;
    double _realAlpha;
    struct CGPoint { double x; double y; } _realOffset;
    _MKKVOProxy *_annotationObserver;
    _MKAnnotationViewCustomFeatureAnnotation *_customFeatureAnnotation;
    char _subclassImplementsAlignmentRectInsets;
    MKSelectionAccessory *_activeSelectionAccessory;
    MKSelectionAccessory *_resolvedSelectionAccessory;
    _MKDeferredSelectionAccessoryPresentation *_deferredSelectionAccessory;
    MKPresentableSelectionAccessoryViewController *_selectionAccessoryViewController;
    id<MKAnnotation> _annotation;
    NSImage *_image;
    NSString *_reuseIdentifier;
    unsigned long long _mapType;
    unsigned long long _zIndex;
    struct CGPoint { double x; double y; } _centerOffset;
    struct CGPoint { double x; double y; } _calloutOffset;
    unsigned long long _dragState;
    struct { unsigned char pendingSelectionAnimated : 1; unsigned char disabled : 1; unsigned char selected : 1; unsigned char canShowCallout : 1; unsigned char isHighlighted : 1; unsigned char canDisplayDisclosureInCallout : 1; unsigned char canDisplayPlacemarkInCallout : 1; unsigned char draggable : 1; unsigned char customTransformApplied : 1; unsigned char internalTransformApplied : 1; unsigned char animatingToCoordinate : 1; unsigned char tracking : 1; unsigned char pendingOffsetAnimation : 1; unsigned char pendingHideAnimation : 1; unsigned char setSelectState : 2; } _flags;
    CALayer *_imageLayer;
}

@property (class, readonly, getter=_wantsViewBasedPositioning) char wantsViewBasedPositioning;

@property (retain, nonatomic, getter=_calloutView, setter=_setCalloutView:) MKCalloutView *_calloutView;
@property (nonatomic, getter=_isPendingSelectionAnimated, setter=_setPendingSelectionAnimated:) char pendingSelectionAnimated;
@property (weak, nonatomic, getter=_staticMapView, setter=_setStaticMapView:) _MKStaticMapView *staticMapView;
@property (readonly, nonatomic, getter=_allowedToShowCallout) char allowedToShowCallout;
@property (readonly, nonatomic, getter=_selectionAccessoryView) MKSelectionAccessoryView *selectionAccessoryView;
@property (readonly, nonatomic) VKAnchorWrapper *anchor;
@property (readonly, nonatomic, getter=_anchorPoint) struct CGPoint { double x; double y; } anchorPoint;
@property (weak, nonatomic, getter=_usageCounter, setter=_setUsageCounter:) MKUsageCounter *usageCounter;
@property (copy, nonatomic, setter=_setPresentationCoordinateChangedCallback:) id /* block */ _presentationCoordinateChangedCallback;
@property struct CGPoint { double x0; double x1; } center;
@property (retain, nonatomic, setter=_setRouteMatch:) GEORouteMatch *_routeMatch;
@property (readonly, nonatomic) MKUserLocationAnnotationViewProxy *_userLocationProxy;
@property (readonly, nonatomic, getter=_collisionAlignmentRectInsets) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } collisionAlignmentRectInsets;
@property (readonly, nonatomic, getter=_isSelectable) char selectable;
@property (readonly, nonatomic, getter=_significantBounds) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } significantBounds;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _significantFrame;
@property (nonatomic, getter=_annotationTrackingInsets) struct NSEdgeInsets { double top; double left; double bottom; double right; } annotationTrackingInsets;
@property (retain, nonatomic) NSColor *leftCalloutAccessoryViewBackgroundColor;
@property (nonatomic, getter=_bottomCalloutOffset, setter=_setBottomCalloutOffset:) struct CGPoint { double x; double y; } bottomCalloutOffset;
@property (nonatomic, getter=_shouldKeepCalloutVisible, setter=_setShouldKeepCalloutVisible:) char shouldKeepCalloutVisible;
@property (nonatomic, setter=_setDirection:) double _direction;
@property (nonatomic, setter=_setPresentationCoordinate:) struct CLLocationCoordinate2D { double latitude; double longitude; } _presentationCoordinate;
@property (nonatomic, setter=_setPresentationCourse:) double _presentationCourse;
@property (nonatomic, getter=_isAnimatingToCoordinate, setter=_setAnimatingToCoordinate:) char _animatingToCoordinate;
@property (nonatomic, getter=_isTracking, setter=_setTracking:) char _tracking;
@property (nonatomic, getter=_mapDisplayStyle, setter=_setMapDisplayStyle:) struct { unsigned char timePeriod; unsigned char overlayType; unsigned char applicationState; unsigned char applicationSubState; unsigned char searchResultsType; char mapHasLabels; } mapDisplayStyle;
@property (nonatomic, getter=_selectionPriority, setter=_setSelectionPriority:) float selectionPriority;
@property (nonatomic, getter=_mapRotationRadians, setter=_setMapRotationRadians:) double mapRotationRadians;
@property (nonatomic, getter=_mapPitchRadians, setter=_setMapPitchRadians:) double mapPitchRadians;
@property (readonly, nonatomic, getter=_collisionFrame) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } collisionFrame;
@property (readonly, nonatomic, getter=_defaultCollisionAlignmentRectInsets) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } defaultCollisionAlignmentRectInsets;
@property (nonatomic, getter=_skipDrawingForSnapshots, setter=_setSkipDrawingForSnapshots:) char skipDrawingForSnapshots;
@property (nonatomic, getter=_calloutStyle, setter=_setCalloutStyle:) long long calloutStyle;
@property (nonatomic) long long titleVisibility;
@property (nonatomic) long long subtitleVisibility;
@property (nonatomic, getter=_featureId, setter=_setFeatureId:) unsigned long long featureId;
@property (readonly, nonatomic) NSString *reuseIdentifier;
@property (retain, nonatomic) id<MKAnnotation> annotation;
@property (retain, nonatomic) NSImage *image;
@property (nonatomic) struct CGPoint { double x0; double x1; } centerOffset;
@property (nonatomic) struct CGPoint { double x; double y; } accessoryOffset;
@property (nonatomic) struct CGPoint { double x0; double x1; } calloutOffset;
@property (nonatomic) struct CGPoint { double x; double y; } leftCalloutOffset;
@property (nonatomic) struct CGPoint { double x; double y; } rightCalloutOffset;
@property (nonatomic, getter=isEnabled) char enabled;
@property (nonatomic, getter=isHighlighted) char highlighted;
@property (nonatomic, getter=isSelected) char selected;
@property (nonatomic) char canShowCallout;
@property (retain, nonatomic) NSView *leftCalloutAccessoryView;
@property (retain, nonatomic) NSView *rightCalloutAccessoryView;
@property (retain, nonatomic) NSView *detailCalloutAccessoryView;
@property (nonatomic, getter=isDraggable) char draggable;
@property (nonatomic) unsigned long long dragState;
@property (copy, nonatomic) NSString *clusteringIdentifier;
@property (readonly, weak, nonatomic) MKAnnotationView *clusterAnnotationView;
@property (nonatomic) float displayPriority;
@property (nonatomic) float zPriority;
@property (nonatomic) float selectedZPriority;
@property (nonatomic) long long collisionMode;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) struct CLLocationCoordinate2D { double x0; double x1; } coordinate;

+ (char)automaticallyNotifiesObserversForKey:(id)a0;
+ (char)_followsTerrain;
+ (unsigned long long)_selectedZIndex;
+ (unsigned long long)_zIndex;
+ (id)_compactCalloutAccessory;
+ (float)_defaultDisplayPriority;
+ (id)_fullCalloutAccessory;
+ (char)_isInitiallyHiddenWhenAdded;
+ (Class)_mapkitLeafClass;
+ (id)_openInMapsAccessory;
+ (id)_sheetAccessoryWithViewController:(id)a0;
+ (Class)calloutViewClass;

- (void)dealloc;
- (void).cxx_destruct;
- (id)initWithCoder:(id)a0;
- (char)isHidden;
- (void)setHidden:(char)a0;
- (void)prepareForReuse;
- (void)layout;
- (id)accessibilityActionDescription:(id)a0;
- (void)_commonInit;
- (void)_setSelected:(char)a0 animated:(char)a1;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (char)accessibilityIsIgnored;
- (void)accessibilityPerformAction:(id)a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (double)alphaValue;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)isFlipped;
- (char)layer:(id)a0 shouldInheritContentsScale:(double)a1 fromWindow:(id)a2;
- (id)menuForEvent:(id)a0;
- (void)resizeSubviewsWithOldSize:(struct CGSize { double x0; double x1; })a0;
- (void)setAlphaValue:(double)a0;
- (void)updateLayer;
- (void)viewDidMoveToSuperview;
- (char)isPersistent;
- (void)_dismissPresentedSelectionAccessoryFromViewController:(id)a0 animated:(char)a1;
- (void)_mapVisibleCenteringRectChanged;
- (void)_performOffsetAnimationIfNeeded;
- (unsigned long long)_zIndex;
- (void)_addAnnotationObservation;
- (struct CGPoint { double x0; double x1; })_anchorPointForCalloutAnchorPosition:(long long)a0;
- (id)_annotationContainer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_calculateAccessoryFrameForSize:(struct CGSize { double x0; double x1; })a0 anchorPosition:(long long)a1 anchorPoint:(struct CGPoint { double x0; double x1; })a2 pointerHeight:(double)a3;
- (struct CGPoint { double x0; double x1; })_calculateMapOffsetForPresentationFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_calculatePresentationFrameForCalloutView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_calculatePresentationFrameForOpenInMapsView:(id)a0;
- (long long)_calloutAnchorPositionForCurrentFrame;
- (char)_calloutPermitsSelectionAccessory;
- (char)_canChangeOrientation;
- (char)_canDisplayDisclosureInCallout;
- (char)_canDisplayPlacemarkInCallout;
- (char)_canShowSelectionAccessory:(id)a0;
- (float)_clampZPriority:(float)a0;
- (id)_containerView;
- (id)_contentLayer;
- (id)_customFeatureAnnotation;
- (float)_defaultSelectedZPriority;
- (float)_defaultZPriority;
- (void)_didDragWithVelocity:(struct CGPoint { double x0; double x1; })a0;
- (void)_didUpdatePosition;
- (void)_dismissCallout:(char)a0;
- (void)_dismissSelectionAccessoryAnimated:(char)a0;
- (void)_dismissSelectionAccessoryPresentation:(id)a0 animated:(char)a1;
- (void)_dismissSelectionAccessoryViewAnimated:(char)a0;
- (struct CGPoint { double x0; double x1; })_draggingDropOffset;
- (long long)_effectiveCalloutStyle;
- (struct CGSize { double x0; double x1; })_effectiveMapViewportSize;
- (id)_effectiveSubtitle;
- (id)_effectiveTitleIsCollidable:(char *)a0;
- (float)_effectiveZPriority;
- (void)_enableRotationForHeadingMode:(double)a0;
- (void)_fetchMapItemForSelectionAccessoryView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForSelectionAdjustment;
- (char)_hasAlternateOrientation;
- (id)_hitTest:(struct CGPoint { double x0; double x1; })a0 view:(id)a1;
- (double)_horizontalAccessoryDisplayPadding;
- (void)_invalidateCachedCoordinate;
- (void)_invalidateCustomFeatureForced:(char)a0 coordinates:(struct CLLocationCoordinate2D { double x0; double x1; } *)a1 count:(unsigned long long)a2;
- (char)_isHiddenForReason:(unsigned long long)a0;
- (char)_isProvidingVKLabelContents;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_labelDisplayFrame;
- (double)_labelDisplayHeight;
- (void)_layoutCalloutSelectionAccessoryView:(id)a0;
- (void)_layoutOpenInMapsAccessory;
- (id)_mapItem;
- (unsigned long long)_mapType;
- (id)_mapView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_mapkit_visibleRect;
- (void)_metricsDidChange;
- (void)_mkObserveValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (struct CGPoint { double x0; double x1; })_offsetToAnnotationView:(id)a0;
- (struct CGPoint { double x0; double x1; })_openInMapsAnchorPoint;
- (unsigned long long)_orientationCount;
- (void)_performHideAnimationIfNeeded;
- (void)_performStateUpdatesIfNeeded;
- (double)_pointsForDistance:(double)a0;
- (void)_presentSelectionAccessorySheetFromViewController:(id)a0 animated:(char)a1;
- (unsigned long long)_reasonToDeferSelectionAccessoryPresentationStyle:(id)a0;
- (void)_removeAnnotationObservation;
- (id)_resolvedAccessoryFor:(id)a0;
- (id)_resolvedAutomaticCalloutStyle;
- (id)_resolvedAutomaticStyleWithViewController:(id)a0;
- (void)_setCanDisplayDisclosureInCallout:(char)a0;
- (void)_setCanDisplayPlacemarkInCallout:(char)a0;
- (void)_setDragState:(unsigned long long)a0 animated:(char)a1;
- (void)_setHidden:(char)a0 forReason:(unsigned long long)a1 animated:(char)a2;
- (void)_setHidden:(char)a0 forReason:(unsigned long long)a1 animated:(char)a2 completion:(id /* block */)a3;
- (void)_setHiddenForOffscreen:(char)a0;
- (void)_setMapType:(unsigned long long)a0;
- (void)_setPositionOffset:(struct CGPoint { double x0; double x1; })a0 animated:(char)a1;
- (void)_setRotationRadians:(double)a0 withAnimation:(id)a1;
- (void)_setSelectedZPriority:(float)a0;
- (void)_setVKNavigationPuckMarker:(id)a0;
- (void)_setZIndex:(unsigned long long)a0;
- (void)_setZPriority:(float)a0;
- (char)_shouldDeselectWhenDragged;
- (char)_shouldShowCalloutIfSelected;
- (void)_showCallout:(char)a0;
- (void)_showCalloutSelectionAccessoryView:(id)a0 animated:(char)a1;
- (void)_showDeferredSelectionAccessoryForReasonIfNeeded:(unsigned long long)a0;
- (void)_showMapItemDetailCalloutAccessory:(id)a0 animated:(char)a1;
- (void)_showMapItemDetailOpenInMapsAccessory:(id)a0 animated:(char)a1;
- (void)_showMapItemDetailSheetAccessory:(id)a0 animated:(char)a1;
- (void)_showSelectionAccessory:(id)a0 animated:(char)a1;
- (void)_showSelectionAccessoryWithStyle:(id)a0 animated:(char)a1;
- (char)_titleRequiresCustomFeature;
- (void)_transitionTo:(long long)a0;
- (void)_unhideForDisplay;
- (void)_updateAnchorPosition:(struct CGPoint { double x0; double x1; })a0 alignToPixels:(char)a1;
- (void)_updateEffectiveZPriority;
- (void)_updateFromMap;
- (void)_updateImageLayer;
- (void)_updateSelectionAccessoryIfNeededAnimated:(char)a0;
- (void)_updateSelectionAccessoryViewContent;
- (id)_urlForOpenInMaps;
- (double)_verticalAccessoryDisplayPadding;
- (char)_viewportCanDisplayCompactCalloutAccessory;
- (char)_viewportCanDisplayFullCalloutAccessory;
- (id)_vkNavigationPuckMarker;
- (long long)compareForClustering:(id)a0;
- (long long)compareForCollision:(id)a0;
- (void)configureCustomFeature:(id)a0;
- (id)customFeatureAnnotation;
- (id)initWithAnnotation:(id)a0 reuseIdentifier:(id)a1;
- (void)invalidateCustomFeatureForced:(char)a0;
- (char)isCollidingWithAnnotationView:(id)a0 previouslyCollided:(char)a1;
- (char)isProvidingCustomFeature;
- (void)prepareForDisplay;
- (void)prepareForSnapshotting;
- (void)selectionAccessoryViewDidRequestDismissal:(id)a0;
- (void)setClusterAnnotationView:(id)a0;
- (void)setDragState:(unsigned long long)a0 animated:(char)a1;
- (void)setSelected:(char)a0 animated:(char)a1;
- (char)shouldShowCallout;
- (char)updateCalloutViewIfNeededAnimated:(char)a0;
- (id)viewRepresentation;

@end
