@class GEOAddress, NSColor, NSDictionary, GEOLabelGeometry, GEOPDFlyover, GEOMapItemStorage, _MKMapItemReviewsAttribution, _MKPlaceReservationInfo, MKMapItemIdentifier, GEOFeatureStyleAttributes, GEOEnrichmentData, MKMapItemMetadata, GEOMapRegion, GEOBusinessHours, GEOMuninViewState, NSData, GEOPlace, GEOEnrichmentInfo, NSNumberFormatter, GEOEnhancedPlacement, NSURL, GEOFactoid, NSNumber, GEOViewportFrame, GEOPOIClaim, GEOMiniBrowseCategories, GEOPDHikeAssociatedInfo, GEOExploreGuides, GEOMapItemStorageUserValues, NSArray, MKPlacemark, GEOEVChargerAvailability, GEOHikeSummary, NSString, NSTimeZone, _MKMapItemAttribution, GEOTrailHead, GEOPDHikeGeometry, GEOMapItemDetourInfo, _MKMapItemPhotosAttribution, _MKMapItemPlaceAttribution, NSSet, GEOBusinessAssets, geo_isolater, GEOModuleLayoutEntry, NSDate;
@protocol GEOEncyclopedicInfo, GEOMapItemPrivate, GEOMapItemVenueInfo, GEOMapItem, NSObject, GEOAnnotatedItemList, GEOTransitAttribution, GEOMapItemTransitInfo;

@interface MKMapItem : NSObject <NSSecureCoding, GEOURLSerializable> {
    id<GEOMapItem> _geoMapItem;
    MKMapItemIdentifier *_identifier;
    NSSet *_alternateIdentifiers;
    char _isTransitInfoUpdated;
    NSDate *_transitInfoUpdatedDate;
    id<GEOMapItemTransitInfo> _updatedTransitInfo;
    id<GEOMapItemTransitInfo> _defaultTransitInfo;
    id<GEOTransitAttribution> _updatedTransitAttribution;
    GEOMapItemStorageUserValues *_userValues;
    char _useCustomPOICategory;
    NSString *_customPOICategory;
    GEOEVChargerAvailability *_chargerAvailability;
    id<NSObject> _didResolveAttributionToken;
    char _hasLoadedAttribution;
    NSString *_shortAddress;
    NSString *_firstLocalizedCategoryName;
    NSNumberFormatter *_numberFormatterForAdamId;
    NSString *_localizedSampleSizeForUserRatingScoreString;
    NSDictionary *_cachedHoursBuilder;
    geo_isolater *_isolation;
}

@property (class, readonly) char supportsSecureCoding;

@property (readonly, nonatomic) NSString *formattedNumberOfReviews;
@property (readonly, nonatomic) NSString *formattedNumberOfReviewsIncludingProvider;
@property (readonly, nonatomic, getter=_transitInfoUpdatedDate) NSDate *transitInfoUpdatedDate;
@property (readonly, getter=_isEmptyContactMapItem) char isEmptyContactMapItem;
@property (nonatomic) char isCurrentLocation;
@property (readonly, nonatomic) GEOMapItemStorageUserValues *userValues;
@property (readonly, nonatomic) MKMapItemMetadata *metadata;
@property (readonly, nonatomic) GEOPlace *place;
@property (readonly, nonatomic, getter=_geoMapItem) id<GEOMapItemPrivate> geoMapItem;
@property (readonly, nonatomic, getter=_geoMapItemStorageForPersistence) GEOMapItemStorage *geoMapItemStorageForPersistence;
@property (readonly, nonatomic, getter=_geoMapItemStorageForDragAndDrop) GEOMapItemStorage *geoMapItemStorageForDragAndDrop;
@property (readonly, nonatomic) NSString *yelpID;
@property (readonly, nonatomic) char isPlaceHolder;
@property (readonly, nonatomic, getter=_coordinate) struct CLLocationCoordinate2D { double x0; double x1; } coordinate;
@property (readonly, nonatomic, getter=_labelCoordinate) struct CLLocationCoordinate2D { double x0; double x1; } labelCoordinate;
@property (nonatomic, getter=_presentCoordinate) struct CLLocationCoordinate2D { double latitude; double longitude; } presentCoordinate;
@property (readonly, nonatomic, getter=_displayMapRegion) GEOMapRegion *displayMapRegion;
@property (readonly, nonatomic, getter=_hasDisplayMinZoom) char hasDisplayMinZoom;
@property (readonly, nonatomic, getter=_displayMinZoom) float displayMinZoom;
@property (readonly, nonatomic, getter=_hasDisplayMaxZoom) char hasDisplayMaxZoom;
@property (readonly, nonatomic, getter=_displayMaxZoom) float displayMaxZoom;
@property (readonly, nonatomic, getter=_geoFenceMapRegion) GEOMapRegion *geoFenceMapRegion;
@property (readonly, nonatomic, getter=_hasTransit) char hasTransit;
@property (readonly, nonatomic, getter=_hasTransitDisplayName) char hasTransitDisplayName;
@property (readonly, nonatomic, getter=_transitDisplayName) NSString *transitDisplayName;
@property (readonly, nonatomic, getter=_hasTransitLabels) char hasTransitLabels;
@property (readonly, nonatomic, getter=_transitAttribution) id<GEOTransitAttribution> transitAttribution;
@property (readonly, nonatomic, getter=_transitInfo) id<GEOMapItemTransitInfo> transitInfo;
@property (readonly, nonatomic, getter=_geoAddress) GEOAddress *geoAddress;
@property (readonly, nonatomic, getter=_hasFlyover) char hasFlyover;
@property (readonly, nonatomic, getter=_flyover) GEOPDFlyover *flyover;
@property (readonly, nonatomic, getter=_flyoverAnnouncementMessage) NSString *flyoverAnnouncementMessage;
@property (readonly, nonatomic, getter=_hasMUID) char hasMUID;
@property (readonly, nonatomic, getter=_muid) unsigned long long muid;
@property (readonly, nonatomic, getter=_hasResultProviderID) char hasResultProviderID;
@property (readonly, nonatomic, getter=_resultProviderID) int resultProviderID;
@property (readonly, nonatomic, getter=_phoneNumberOptsOutOfAds) char phoneNumberOptsOutOfAds;
@property (readonly, nonatomic, getter=_firstLocalizedCategoryName) NSString *firstLocalizedCategoryName;
@property (readonly, nonatomic, getter=_hasUserRatingScore) char hasUserRatingScore;
@property (readonly, nonatomic, getter=_sampleSizeForUserRatingScore) unsigned int sampleSizeForUserRatingScore;
@property (readonly, nonatomic, getter=_localizedSampleSizeForUserRatingScoreString) NSString *localizedSampleSizeForUserRatingScoreString;
@property (readonly, nonatomic, getter=_normalizedUserRatingScore) float normalizedUserRatingScore;
@property (readonly, nonatomic, getter=_hasPriceDescription) char hasPriceDescription;
@property (readonly, nonatomic, getter=_priceDescription) NSString *priceDescription;
@property (readonly, nonatomic, getter=_hasPriceRange) char hasPriceRange;
@property (readonly, nonatomic, getter=_priceRangeString) NSString *priceRangeString;
@property (readonly, nonatomic, getter=_shortAddress) NSString *shortAddress;
@property (readonly, nonatomic, getter=_hasAnyAccolades) char hasAnyAccolades;
@property (readonly, nonatomic, getter=_accolades) NSArray *accolades;
@property (readonly, nonatomic, getter=_hasAnyAmenities) char hasAnyAmenities;
@property (readonly, nonatomic, getter=_hasAcceptsApplePayAmenity) char hasAcceptsApplePayAmenity;
@property (readonly, nonatomic, getter=_acceptsApplePay) char acceptsApplePay;
@property (readonly, nonatomic, getter=_amenities) NSArray *amenities;
@property (readonly, nonatomic, getter=_hasResolvablePartialInformation) char hasResolvablePartialInformation;
@property (readonly, nonatomic, getter=_responseStatusIsIncomplete) char responseStatusIncomplete;
@property (readonly, nonatomic, getter=_hasOperatingHours) char hasOperatingHours;
@property (readonly, nonatomic, getter=_hasLocalizedOperatingHours) char hasLocalizedOperatingHours;
@property (readonly, nonatomic, getter=_parsecSectionType) int parsecSectionType;
@property (readonly, nonatomic, getter=_isStandAloneBrand) char isStandAloneBrand;
@property (readonly, nonatomic, getter=_hasBrandMUID) char hasBrandMUID;
@property (readonly, nonatomic, getter=_brandMUID) unsigned long long brand;
@property (readonly, nonatomic, getter=_isMapItemTypeUnknown) char isMapItemTypeUnknown;
@property (readonly, nonatomic, getter=_isMapItemTypeBusiness) char isMapItemTypeBusiness;
@property (readonly, nonatomic, getter=_isMapItemTypeSettlement) char isMapItemTypeSettlement;
@property (readonly, nonatomic, getter=_isMapItemTypeAddress) char isMapItemTypeAddress;
@property (nonatomic, getter=_isMapItemTypeTransit) char isMapItemTypeTransit;
@property (readonly, nonatomic, getter=_isMapItemTypeBrand) char isMapItemTypeBrand;
@property (readonly, nonatomic, getter=_localizedResponseTime) NSString *localizedResponseTime;
@property (readonly, nonatomic, getter=_messageBusinessHours) GEOBusinessHours *messageBusinessHours;
@property (readonly, nonatomic, getter=_hasEncyclopedicInfo) char hasEncyclopedicInfo;
@property (readonly, nonatomic, getter=_encyclopedicInfo) id<GEOEncyclopedicInfo> encyclopedicInfo;
@property (readonly, nonatomic, getter=_hasChargerNumberString) char hasChargerNumberString;
@property (readonly, nonatomic, getter=_chargerNumberString) NSString *chargerNumberString;
@property (readonly, nonatomic, getter=_realTimeAvailableEVCharger) GEOEVChargerAvailability *realTimeAvailableEVCharger;
@property (readonly, nonatomic, getter=_openingHoursOptions) unsigned long long openingHoursOptions;
@property (readonly, nonatomic, getter=_placeDataAsData) NSData *placeDataAsData;
@property (readonly, nonatomic, getter=_poiSurveyURLString) NSString *poiSurveyURLString;
@property (readonly, nonatomic, getter=_poiPinpointURLString) NSString *poiPinpointURLString;
@property (readonly, nonatomic, getter=_hasCorrectedHomeWorkCoordinate) char hasCorrectedHomeWorkCoordinate;
@property (readonly, nonatomic, getter=_hasCorrectedHomeWorkAddress) char hasCorrectedHomeWorkAddress;
@property (readonly, nonatomic, getter=_hasVenueFeatureType) char hasVenueFeatureType;
@property (readonly, nonatomic, getter=_venueFeatureType) long long venueFeatureType;
@property (readonly, nonatomic, getter=_venueInfo) id<GEOMapItemVenueInfo> venueInfo;
@property (readonly, nonatomic, getter=_browseCategories) NSArray *browseCategories;
@property (readonly, nonatomic, getter=_miniBrowseCategories) GEOMiniBrowseCategories *miniBrowseCategories;
@property (readonly, nonatomic, getter=_placeDisplayStyle) int placeDisplayStyle;
@property (readonly, nonatomic, getter=_annotatedItemList) id<GEOAnnotatedItemList> annotatedItemList;
@property (readonly, nonatomic, getter=_hasMuninViewState) char hasMuninViewState;
@property (readonly, nonatomic, getter=_muninViewState) GEOMuninViewState *muninViewState;
@property (readonly, nonatomic) NSArray *formattedAddressLines;
@property (copy, nonatomic) NSString *singleLineAddress;
@property (retain, nonatomic) NSArray *formattedAddressLinesCache;
@property (retain, nonatomic) NSString *ABUUID;
@property (readonly, nonatomic, getter=_needsAttribution) char needsAttribution;
@property (readonly, copy, nonatomic, getter=_webURL) NSURL *webURL;
@property (readonly, copy, nonatomic, getter=_providerURL) NSURL *providerURL;
@property (readonly, copy, nonatomic, getter=_vendorID) NSString *vendorID;
@property (readonly, nonatomic, getter=_reviewsDisplayName) NSString *reviewsDisplayName;
@property (readonly, nonatomic, getter=_attribution) _MKMapItemPlaceAttribution *attribution;
@property (readonly, nonatomic, getter=_allPhotoAttributions) NSArray *allPhotoAttributions;
@property (readonly, nonatomic, getter=_photosAttribution) _MKMapItemPhotosAttribution *photosAttribution;
@property (readonly, nonatomic, getter=_reviewsAttribution) _MKMapItemReviewsAttribution *reviewsAttribution;
@property (readonly, nonatomic, getter=_encyclopedicInfoAttribution) _MKMapItemAttribution *encyclopedicInfoAttribution;
@property (readonly, nonatomic, getter=_styleAttributes) GEOFeatureStyleAttributes *styleAttributes;
@property (readonly, nonatomic, getter=_customIconID) unsigned long long customIconID;
@property (readonly, nonatomic, getter=_hasAreaHighlightId) char hasAreaHighlightId;
@property (readonly, nonatomic, getter=_areaHighlightId) unsigned long long areaHighlightId;
@property (readonly, nonatomic, getter=_reviews) NSArray *reviews;
@property (readonly, nonatomic, getter=_tips) NSArray *tips;
@property (readonly, nonatomic) NSString *reviewsProviderDisplayName;
@property (readonly, nonatomic, getter=_handle) NSData *handle;
@property (retain, nonatomic) _MKPlaceReservationInfo *reservationInfo;
@property (readonly, nonatomic, getter=_detourInfo) GEOMapItemDetourInfo *detourInfo;
@property (readonly, nonatomic, getter=_externalTransitStationCode) NSData *externalTransitStationCode;
@property (readonly, nonatomic, getter=_messageID) NSString *messageID;
@property (readonly, nonatomic, getter=_messageURLString) NSString *messageURLString;
@property (readonly, nonatomic, getter=_isMessageIDVerified) char isMessageIDVerified;
@property (readonly, nonatomic, getter=_quickLinks) NSArray *quickLinks;
@property (readonly, nonatomic, getter=_secondaryQuickLinks) NSArray *secondaryQuickLinks;
@property (readonly, nonatomic, getter=_placeCollections) NSArray *placeCollections;
@property (readonly, nonatomic, getter=_exploreGuides) GEOExploreGuides *exploreGuides;
@property (readonly, nonatomic, getter=_placeCollectionIds) NSArray *collectionIds;
@property (readonly, nonatomic, getter=_relatedPlaceLists) NSArray *relatedPlaceLists;
@property (readonly, nonatomic, getter=_searchResultPhotoCarousel) NSArray *photoCarousel;
@property (readonly, nonatomic, getter=_preferedAppAdamID) NSNumber *preferedAppAdamID;
@property (readonly, nonatomic, getter=_alternativeAppAdamIds) NSArray *alternativeAppAdamIds;
@property (readonly, nonatomic, getter=_placecardLayout) GEOModuleLayoutEntry *placecardLayout;
@property (readonly, nonatomic, getter=_isPartiallyClientized) char isPartiallyClientized;
@property (readonly, nonatomic, getter=_navTintBrandColor) NSColor *navTintBrandColor;
@property (readonly, nonatomic, getter=_navBackgroundbrandColor) NSColor *navBackgroundbrandColor;
@property (readonly, nonatomic, getter=_secondaryName) NSString *secondaryName;
@property (readonly, nonatomic, getter=_secondarySpokenName) NSString *secondarySpokenName;
@property (readonly, nonatomic, getter=_hasBusinessHours) char hasBusinessHours;
@property (readonly, nonatomic, getter=_businessHours) NSArray *businessHours;
@property (readonly, nonatomic, getter=_hasLinkedServices) char hasLinkedServices;
@property (readonly, nonatomic, getter=_linkedServices) NSArray *linkedServices;
@property (readonly, nonatomic, getter=_businessAssets) GEOBusinessAssets *businessAssets;
@property (readonly, nonatomic, getter=_isClaimed) char isClaimed;
@property (readonly, nonatomic, getter=_canBeClaimed) char canBeClaimed;
@property (readonly, nonatomic, getter=_hasPOIClaim) char hasPOIClaim;
@property (readonly, nonatomic, getter=_poiClaim) GEOPOIClaim *poiClaim;
@property (readonly, nonatomic, getter=_enhancedPlacement) GEOEnhancedPlacement *enhancedPlacement;
@property (readonly, nonatomic, getter=_labelGeometry) GEOLabelGeometry *labelGeometry;
@property (readonly, nonatomic, getter=_viewportFrame) GEOViewportFrame *viewportFrame;
@property (readonly, nonatomic, getter=_enrichmentInfo) GEOEnrichmentInfo *enrichmentInfo;
@property (readonly, nonatomic, getter=_enrichmentData) GEOEnrichmentData *enrichmentData;
@property (readonly, nonatomic, getter=_externalActionLinks) NSArray *externalActionLinks;
@property (readonly, nonatomic, getter=_trailHead) GEOTrailHead *trailHead;
@property (readonly, nonatomic, getter=_hasHikeInfo) char hasHikeInfo;
@property (readonly, nonatomic, getter=_hikeSummary) GEOHikeSummary *hikeSummary;
@property (readonly, nonatomic, getter=_hikeAssociatedInfo) GEOPDHikeAssociatedInfo *hikeAssociatedInfo;
@property (readonly, nonatomic, getter=_hikeGeometry) GEOPDHikeGeometry *hikeGeometry;
@property (readonly, nonatomic, getter=_hikingTrailDifficultyFactoid) GEOFactoid *hikingTrailDifficultyFactoid;
@property (readonly, nonatomic, getter=_hikingTrailPointToPointFactoid) GEOFactoid *hikingTrailPointToPointFactoid;
@property (readonly, nonatomic, getter=_hikingTrailLengthFactoid) GEOFactoid *hikingTrailLengthFactoid;
@property (readonly, nonatomic, getter=_hasLookAroundStorefront) char hasLookAroundStorefront;
@property (readonly, nonatomic, getter=_placeCategoryType) int placeCategoryType;
@property (readonly, nonatomic) MKMapItemIdentifier *identifier;
@property (readonly, nonatomic) NSSet *alternateIdentifiers;
@property (readonly, nonatomic) MKPlacemark *placemark;
@property (copy, nonatomic) NSString *name;
@property (copy, nonatomic) NSString *phoneNumber;
@property (retain, nonatomic) NSURL *url;
@property (copy, nonatomic) NSTimeZone *timeZone;
@property (copy, nonatomic) NSString *pointOfInterestCategory;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_sourceAppIdFromLaunchUserInfo:(id)a0;
+ (id)mapItemWithSerializedPlaceData:(id)a0;
+ (id)_deserializeResourceOptionsFromURL:(id)a0 error:(out id *)a1;
+ (void)_fillOutRequest:(id)a0 withMapsDataString:(id)a1;
+ (char)_isDirectionsActionURL:(id)a0;
+ (id)_itemWithGeoMapItem:(id)a0;
+ (id)_launchOptionsFromResourceOptionsDictionary:(id)a0;
+ (id)_launchOptionsWithOptions:(id)a0;
+ (id)_localizedNextOpeningDayOftheWeekFormatter;
+ (id)_localizedNextOpeningHoursFormatter;
+ (id)_mapItemBackedByURL:(id)a0;
+ (void)_mapItemFromHandle:(id)a0 completionHandler:(id /* block */)a1;
+ (id)_mapItemWithWithLocation:(id)a0 addressDictionary:(id)a1 name:(id)a2 businessURL:(id)a3 phoneNumber:(id)a4 sessionID:(id)a5 muid:(unsigned long long)a6 attributionID:(id)a7 sampleSizeForUserRatingScore:(unsigned int)a8 normalizedUserRatingScore:(float)a9;
+ (void)_mapItemsFromHandleURL:(id)a0 completionHandler:(id /* block */)a1;
+ (void)_mapItemsFromPunchInHintsURL:(id)a0 maxResults:(unsigned int)a1 completionHandler:(id /* block */)a2;
+ (void)_mapItemsWithSerializedPlaceDataResponse:(id)a0 handler:(id /* block */)a1;
+ (id)_sharedSessionURLForPunchoutURL:(id)a0;
+ (id)_sharedSessionUserInfoForPunchoutUserInfo:(id)a0;
+ (char)_shouldUseUniversalLinkForMapItems:(id)a0 options:(id)a1;
+ (id)_sourceAppIdFromLaunchURL:(id)a0;
+ (id)_universalLinkForMapItems:(id)a0 options:(id)a1;
+ (id)_urlForLocation:(id)a0 address:(id)a1 label:(id)a2 options:(id)a3;
+ (id)_urlForMapItemHandles:(id)a0 options:(id)a1;
+ (id)contactsAddressDictionaryFromGeoAddressDictionary:(id)a0;
+ (id)contactsAddressKeysForGeoAddressKeys;
+ (id)launchOptionsFromURL:(id)a0;
+ (id)mapItemForCurrentLocation;
+ (id)mapItemWithDictionary:(id)a0;
+ (id)mapItemWithSerializedPlaceData:(id)a0 serializedDetourInfo:(id)a1 currentLocation:(char)a2;
+ (id)mapItemsFromURL:(id)a0 options:(id *)a1;
+ (char)openMapsWithItems:(id)a0 launchOptions:(id)a1;
+ (void)openMapsWithItems:(id)a0 launchOptions:(id)a1 completionHandler:(id /* block */)a2;
+ (id)plistCompatibleDictionaryFromStandardOptions:(id)a0;
+ (id)sanitizeArray:(id)a0 forKey:(id)a1;
+ (id)sanitizeDictionary:(id)a0;
+ (id)sanitizeObject:(id)a0 forKey:(id)a1;
+ (id)standardOptionsFromPlistCompatibleDictionary:(id)a0;
+ (id)ticketForMapsDataString:(id)a0 name:(id)a1;
+ (id)urlForMapItem:(id)a0 options:(id)a1;
+ (id)urlForMapItems:(id)a0 options:(id)a1;
+ (char)valueIsValid:(id)a0 forKey:(id)a1;

- (void)dealloc;
- (id)init;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (id)_identifier;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)dictionaryRepresentation;
- (id)initWithCLLocation:(id)a0;
- (id)initWithPlacemark:(id)a0;
- (id)_localizedCategoryNamesForType:(unsigned int)a0;
- (id)_bestNavbarBrandIconURLForSize:(struct CGSize { double x0; double x1; })a0 allowSmaller:(char)a1;
- (id)_firstRelatedPlaceListForType:(int)a0;
- (char)_hasLocalizedCategoryNamesForType:(unsigned int)a0;
- (id)_relatedPlaceListForComponentIdentifier:(int)a0;
- (char)_isEquivalentURLRepresentationTo:(id)a0;
- (id)initWithAddressDictionary:(id)a0;
- (id)initWithPlace:(id)a0;
- (id)initWithUrlRepresentation:(id)a0;
- (id)urlRepresentation;
- (id)_activityURLWithMuninViewState:(id)a0;
- (char)_mapkit_hasMultiplePhotoVendors;
- (id)_mapsDataString;
- (char)_restaurantLink_hasFeatureType:(unsigned long long)a0;
- (char)hasAmenityType:(int)a0;
- (id)_activityURL;
- (id)_addressFormattedAsCity;
- (id)_addressFormattedAsLocation;
- (id)_addressFormattedAsMultilineAddress;
- (id)_addressFormattedAsName;
- (id)_addressFormattedAsShortenedAddress;
- (id)_addressFormattedAsSinglelineAddress;
- (id)_addressFormattedAsStreetOnly;
- (id)_addressFormattedAsTitlesForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0;
- (id)_addressFormattedAsWeatherDisplayName;
- (id)_addressFormattedAsWeatherLocationName;
- (id)_addressOrNil:(id)a0;
- (id)_attributionFor:(id)a0 sourceStringFormat:(id)a1 moreSourceStringFormat:(id)a2 imageTintColor:(id)a3;
- (id)_attributionWithDisplayName:(id)a0 attributionFormat:(id)a1 logo:(id)a2 isSnippetLogo:(char)a3;
- (id)_bestBrandIconURLForSize:(struct CGSize { double x0; double x1; })a0 allowSmaller:(char)a1;
- (id)_bestWalletHeroImageForSize:(struct CGSize { double x0; double x1; })a0 allowSmaller:(char)a1;
- (char)_browseCategory_canDisplayBrowseCategoriesForPlace;
- (char)_browseCategory_canDisplayBrowseCategoriesForVenue;
- (char)_browseCategory_isVenueItem;
- (int)_browseCategory_placeCardType;
- (char)_canGetDirections;
- (id)_cnPostalAddress;
- (id)_factoidWithSemantic:(int)a0;
- (id)_formatterForAdamId;
- (id)_fullAddressWithMultiline:(char)a0;
- (id)_getBusiness;
- (char)_hasRestaurantExtensionInfo;
- (id)_initWithLabelMarker:(id)a0;
- (id)_isolatedPlace;
- (void)_launchActivityForBrandItem;
- (id)_localizedNextOpeningStringShort:(char)a0;
- (char)_mapkit_canAtLeastOneAttributionShowAddPhotosLocally;
- (char)_mapkit_canAtLeastOneAttributionShowPhotosLocally;
- (char)_mapkit_hasFlatListOfPhotos;
- (char)_mapkit_hasSinglePhotoVendor;
- (unsigned long long)_mapkit_numberOfPhotosAvailableForFlatList;
- (id)_mapkit_preferredFirstPhotoVendor;
- (id)_mapkit_resolvedFlatPhotoList;
- (char)_mapkit_supportsFullScreenExperience;
- (void)_markTransitInfoUpdated;
- (id)_placeCardContact;
- (void)_refreshAttribution;
- (unsigned long long)_restaurantExtensionModeForFirstProvider;
- (id)_restaurantLink_firstProviderDisplayName;
- (id)_restaurantLink_firstProviderIdentifier;
- (id)_restaurantLink_firstProviderPlaceIdentifier;
- (id)_restaurantLink_firstVendorID;
- (id)_restaurantLink_overridenBundleIDsForVendorIDs;
- (id)_reviewForIdentifier:(id)a0;
- (void)_updateRealTimeEVChargerAvailability:(id)a0;
- (void)_updateTransitInfoWithMapItem:(id)a0;
- (id)_urlExtraStorage;
- (id)_walletHeroImageProviderName;
- (id)_weatherDisplayName;
- (id)_weatherLocationName;
- (id)formattedNumberOfReviewsIncludingProvider:(char)a0 formatter:(id)a1;
- (id)hoursBuilderForSearchResultCellForOptions:(unsigned long long)a0 conciseStyle:(char)a1;
- (id)hoursBuilderForSearchResultCellForOptions:(unsigned long long)a0 conciseStyle:(char)a1 openAt:(id)a2;
- (id)initWithCLLocation:(id)a0 name:(id)a1 address:(id)a2 formattedAddressLinesCache:(id)a3 singleLineAddress:(id)a4 contactIdentifier:(id)a5 timeZone:(id)a6;
- (id)initWithCLLocation:(id)a0 placeType:(int)a1;
- (id)initWithContact:(id)a0;
- (id)initWithGeoMapItem:(id)a0 isPlaceHolderPlace:(char)a1;
- (id)initWithGeoMapItemAsCurrentLocation:(id)a0;
- (id)initWithPlace:(id)a0 isPlaceHolderPlace:(char)a1;
- (char)openInMapsWithLaunchOptions:(id)a0;
- (void)openInMapsWithLaunchOptions:(id)a0 completionHandler:(id /* block */)a1;
- (id)searchResultsHoursWithConciseStyle:(char)a0 openAt:(id)a1;
- (char)valueForAmenityType:(int)a0;
- (id)venueLabelWithContext:(unsigned long long)a0;

@end
