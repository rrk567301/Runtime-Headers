@class NSUUID, PKVectorTimestamp, NSMutableDictionary, NSMutableArray;

@interface PKDrawingConcrete : PKDrawing {
    NSUUID *_uuid;
    NSMutableDictionary *_strokesIdentifierMap;
    NSMutableArray *_allStrokes;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } __canvasBounds;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } __bounds;
}

@property (nonatomic) struct _PKStrokeID { unsigned int clock; unsigned char replicaUUID[16]; unsigned int subclock; } boundsVersion;
@property (readonly, nonatomic) struct shared_ptr<PKProtobufUnknownFields> { struct PKProtobufUnknownFields *__ptr_; struct __shared_weak_count *__cntrl_; } _unknownFields;
@property (retain, nonatomic, setter=_setAllStrokes:) NSMutableArray *_allStrokes;
@property (retain, nonatomic) PKVectorTimestamp *version;
@property (readonly, nonatomic) NSUUID *nsuuid;
@property (readonly, nonatomic) NSUUID *replicaUUID;
@property (readonly, nonatomic) char _hasReplicaUUID;

+ (struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })newStrokeIDGreaterThan:(struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })a0 forUUID:(id)a1;
+ (id)_defaultConversionQueue;
+ (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_orientationTransform:(long long)a0 size:(struct CGSize { double x0; double x1; })a1;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (unsigned long long)hash;
- (id)init;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (id)data;
- (id)uuid;
- (id).cxx_construct;
- (void)_setUUID:(id)a0;
- (id)dataRepresentation;
- (long long)_orientation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (id)serialize;
- (id)_data;
- (id)initWithData:(id)a0 error:(id *)a1;
- (void)_addTestDataToUnknownFields;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_canvasBounds;
- (void)_collectAllStrokesIn:(id)a0 into:(id)a1;
- (double)_conversionScaleFactor;
- (id)_dataInUnknownFields;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })_drawingStrokeInfoIsLegacyDrawing:(char)a0;
- (id)_initWithUnzippedData:(id)a0 error:(id *)a1;
- (id)_initWithUnzippedData:(id)a0 loadNonInkingStrokes:(char)a1 error:(id *)a2;
- (void)_mergeStroke:(id)a0;
- (id)_newStroke:(id)a0 withGroupID:(id)a1;
- (id)_newStroke:(id)a0 withInk:(id)a1;
- (struct CGSize { double x0; double x1; })_orientedDrawingSize;
- (void)_removeHiddenAndEraserStrokes;
- (void)_removeInvisibleStrokes;
- (id)_rootStrokes;
- (id)_stroke:(id)a0 transformed:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 concat:(char)a2;
- (id)_strokeForIdentifier:(id)a0;
- (id)_strokesIdentifierMap;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_transformForImageWithSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })_unscaledOrientedDrawingSize;
- (void)_updateStrokes:(id)a0 updateBlock:(id /* block */)a1;
- (void)_upgradeLegacyPenInks;
- (id)_upgradeOnQueue:(id)a0 isLegacyDrawing:(char)a1 completionBlock:(id /* block */)a2;
- (void)addNewStroke:(id)a0;
- (id)copyWithoutInternalStrokes;
- (void)deleteStrokes:(id)a0;
- (void)didMergeWithDrawing:(id)a0;
- (void)didUpdate;
- (id)initWithArchive:(const void *)a0 loadNonInkingStrokes:(char)a1 error:(id *)a2;
- (id)initWithData:(id)a0 loadNonInkingStrokes:(char)a1 error:(id *)a2;
- (id)initWithDrawing:(id)a0;
- (id)initWithLegacyArchive:(const void *)a0;
- (id)initWithLegacyData:(id)a0;
- (id)initWithStrokes:(id)a0 fromDrawing:(id)a1;
- (id)initWithUUID:(id)a0 strokes:(id)a1 version:(id)a2 canvasBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 boundsVersion:(struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })a4 unknownFields:(struct shared_ptr<PKProtobufUnknownFields> { struct PKProtobufUnknownFields *x0; struct __shared_weak_count *x1; })a5;
- (id)initWithV1Archive:(const void *)a0 loadNonInkingStrokes:(char)a1;
- (id)initWithV1Data:(id)a0 loadNonInkingStrokes:(char)a1;
- (void)invalidateStrokeBounds;
- (void)invalidateVisibleStrokes;
- (unsigned long long)mergeWithDrawing:(id)a0;
- (id)newStroke;
- (struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })newStrokeIDGreaterThan:(struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })a0;
- (void)normalizeUUIDsWithDrawing:(id)a0;
- (long long)saveToArchive:(void *)a0 withPathData:(char)a1;
- (unsigned int)saveToV1Archive:(void *)a0 withPathData:(char)a1;
- (id)serializeTransiently;
- (id)serializeWithVersion:(long long)a0;
- (void)setStrokeSortIDForInsertion:(id)a0;
- (void)setStrokes:(id)a0 groupID:(id)a1;
- (void)setStrokes:(id)a0 hidden:(char)a1;
- (void)setStrokes:(id)a0 inks:(id)a1;
- (void)set_canvasBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)set_orientation:(long long)a0;
- (Class)strokeClass;
- (Class)strokeSelectionClass;
- (void)transformStrokes:(id)a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 concat:(char)a2;
- (id)undoableAddNewStrokes:(id)a0;
- (id)undoableAddNewStrokes:(id)a0 replacingOldStrokes:(id)a1;
- (id)undoableDeleteStrokes:(id)a0;
- (id)undoableSetStrokes:(id)a0 groupID:(id)a1 actionName:(id)a2;
- (id)undoableSetStrokes:(id)a0 inks:(id)a1;
- (id)undoableTransformStrokes:(id)a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 concat:(char)a2;
- (id)updateFromSlicedIntersectingIndexes:(long long *)a0 resultNewRoots:(const id *)a1 resultUpdatedStrokes:(const id *)a2 count:(long long)a3;
- (void)updateStroke:(id)a0 indexHint:(unsigned long long)a1;
- (void)updateStrokes:(id /* block */)a0;
- (id)v1SerializeWithPathData:(char)a0;
- (id)v1SerializeWithPathData:(char)a0 toVersion:(unsigned int *)a1;
- (id)visibleStrokeForInsertingStroke:(id)a0;
- (void)willMergeWithDrawing:(id)a0;

@end
