@class NSDate, NSString, NSArray, NSPredicate, FPAppRegistry, NSMutableDictionary, FPItemID, _FPItemList, NSObject, NSMutableSet, FPPacer;
@protocol FPItemCollectionMinimalDelegate, FPItemCollectionIndexPathBasedDelegate, FPCollectionDataSource, OS_dispatch_source, OS_dispatch_queue, FPItemCollectionItemIDBasedDelegate;

@interface FPItemCollection : NSObject <FPReachabilityObserver, FPCollectionDataSourceDelegate> {
    _FPItemList *_currentItems;
    NSObject<OS_dispatch_queue> *_itemAccessQueue;
    NSObject<OS_dispatch_source> *_restartTimer;
    NSDate *_lastInvalidationOnError;
    unsigned long long _invalidationOnErrorCount;
    NSMutableDictionary *_updatedItemsByIdentifiers;
    NSMutableSet *_deletedItemsIdentifiers;
    NSMutableDictionary *_formerItemsIdentifiers;
    NSMutableDictionary *_pendingItemsStitching;
    NSMutableDictionary *_pendingItemsFields;
    char _shouldResort;
    char _regathering;
    long long _regatheringGeneration;
    long long _flushableRegatheringGeneration;
    char _shouldRetryOnceAfterCrash;
    NSPredicate *_itemFilteringPredicate;
    FPAppRegistry *_appRegistry;
    id<FPItemCollectionItemIDBasedDelegate> _itemIDBasedDelegate;
    id<FPItemCollectionIndexPathBasedDelegate> _indexPathBasedDelegate;
}

@property (readonly) NSString *providerIdentifier;
@property (readonly) NSString *domainIdentifier;
@property (readonly) FPItemID *enumeratedItemID;
@property (readonly, nonatomic) id<FPCollectionDataSource> dataSource;
@property (nonatomic, getter=isGathering) char gathering;
@property (retain, nonatomic) NSPredicate *additionalItemFilteringPredicate;
@property (nonatomic) BOOL observing;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *updateQueue;
@property (readonly, nonatomic) FPPacer *updatePacer;
@property (retain, nonatomic) NSPredicate *itemFilteringPredicate;
@property (weak, nonatomic) id<FPItemCollectionMinimalDelegate> delegate;
@property (readonly, nonatomic, getter=isImmutable) char immutable;
@property (readonly, nonatomic) char hasMoreUpdates;
@property (nonatomic) char showHiddenFiles;
@property (readonly, nonatomic) NSArray *sortDescriptors;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *workingQueue;
@property (readonly, nonatomic) NSArray *items;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long lastForcedUpdate;

+ (void)initialize;
+ (id)_bouncedItem:(id)a0 withinItems:(id)a1;
+ (id)activeCollections;
+ (void)addActiveCollection:(id)a0;
+ (void)consumeUpdates:(id)a0 deletes:(id)a1;
+ (char)isEnumerationSuspended;
+ (void)refreshActiveCollectionsForDecorationChange;
+ (void)removeActiveCollection:(id)a0;
+ (void)replacePlaceholders:(id)a0 withActualItems:(id)a1 deletedIDs:(id)a2;
+ (void)resumeVendorEnumeration;
+ (void)suspendVendorEnumeration;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)startObserving;
- (void)stopObserving;
- (long long)numberOfItems;
- (void)_startObserving;
- (id)itemAtIndexPath:(id)a0;
- (unsigned long long)_indexOfItem:(id)a0;
- (void)reachabilityMonitor:(id)a0 didChangeReachabilityStatusTo:(char)a1;
- (void)resumeUpdates;
- (void)suspendUpdates;
- (char)shouldRetryError:(id)a0;
- (void)updateRootItem:(id)a0;
- (unsigned long long)_indexOfItemID:(id)a0;
- (id)initWithPacing:(char)a0;
- (char)__isUsingDataSource:(id)a0;
- (void)_cancelStartTime;
- (void)_didEncounterError:(id)a0 forObservationID:(unsigned long long)a1;
- (void)_flushPendingUpdates;
- (char)_isUsingDataSource:(id)a0;
- (id)_itemsMutableCopy;
- (long long)_numberOfItems;
- (void)_receivedBatchWithUpdatedItems:(id)a0 deletedItemsIdentifiers:(id)a1;
- (void)_receivedBatchWithUpdatedItems:(id)a0 deletedItemsIdentifiers:(id)a1 dropForReplacedPlaceholders:(char)a2;
- (void)_receivedBatchWithUpdatedItems:(id)a0 deletedItemsIdentifiers:(id)a1 forceFlush:(char)a2 dropForReplacedPlaceholders:(char)a3;
- (id)_reorderWithPlaceholdersLast:(id)a0;
- (void)_replaceContentsWithVendorItems:(id)a0;
- (void)_restartObservation;
- (void)_restartObservationWithReason:(id)a0;
- (void)_setObserving:(char)a0;
- (void)_startRegathering;
- (id)_t_items;
- (void)_updateObservedItem:(id)a0;
- (id)computeIndexPathsBasedDiffsWithOldItems:(id)a0 futureItems:(id)a1;
- (id)computeItemIDBasedDiffs;
- (id)createDataSourceWithSortDescriptors:(id)a0;
- (void)dataSource:(id)a0 receivedUpdatedItems:(id)a1 deletedItems:(id)a2 hasMoreChanges:(char)a3;
- (void)dataSource:(id)a0 replaceContentsWithItems:(id)a1 hasMoreChanges:(char)a2;
- (void)dataSource:(id)a0 wasInvalidatedWithError:(id)a1;
- (char)dataSourceShouldAlwaysReplaceContents:(id)a0;
- (void)forceRefreshOfItemWithItemID:(id)a0;
- (id)indexPathFromIndex:(long long)a0;
- (id)indexPathsFromIndexSet:(id)a0;
- (char)isCollectionValidForItem:(id)a0;
- (char)isHiddenItem:(id)a0;
- (char)isRegatheringAfterSignal;
- (char)isRootItem:(id)a0;
- (void)receivedBatchWithUpdatedItems:(id)a0 deletedItemsIdentifiers:(id)a1;
- (void)receivedBatchWithUpdatedItems:(id)a0 deletedItemsIdentifiers:(id)a1 hasMoreChanges:(char)a2;
- (char)recoverFromError:(id)a0;
- (void)reorderItemsWithSortDescriptors:(id)a0;
- (void)replacePlaceholders:(id)a0 withActualItems:(id)a1 deletedIDs:(id)a2;
- (id)scopedSearchQuery;
- (void)sendIndexPathBasedDiffs:(id)a0;
- (void)sendItemIDBasedDiffs:(id)a0;
- (char)shouldConsiderUsingPlaceholder:(id)a0 forItem:(id)a1 skipForwardFormerID:(char *)a2;
- (void)startObservingWithEnumerationProperties:(id)a0;

@end
