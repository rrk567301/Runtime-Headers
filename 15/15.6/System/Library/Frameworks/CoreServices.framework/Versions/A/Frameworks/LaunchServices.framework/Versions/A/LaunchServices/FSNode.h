@class NSArray, NSString, NSURL;

@interface FSNode : NSObject <NSCopying, NSSecureCoding, FSNodePropertyProviding> {
    NSURL *_url;
    unsigned long long _cacheExpiration;
    unsigned char _isDirectory : 2;
    unsigned char _hasReferringAliasNode : 1;
    unsigned char _canUseFileCache : 1;
    unsigned char _isInitialized : 1;
}

@property (class, readonly) NSArray *bookmarkDataPropertiesToInclude;
@property (class, readonly) char supportsSecureCoding;

@property (readonly, getter=isInternetLocatorFile) char internetLocatorFile;
@property (readonly, nonatomic) char canIssueIO;
@property (readonly, nonatomic, getter=isDirectory) char directory;
@property (readonly, nonatomic, getter=isBusyDirectory) char busyDirectory;
@property (readonly, nonatomic, getter=isExecutableModeFile) char executableModeFile;
@property (readonly, nonatomic, getter=isExecutable) char executable;
@property (readonly, nonatomic, getter=isResolvable) char resolvable;
@property (readonly, nonatomic, getter=isSymbolicLink) char symbolicLink;
@property (readonly, nonatomic, getter=isAliasFile) char aliasFile;
@property (readonly, nonatomic, getter=isSideFault) char sideFault;
@property (readonly, nonatomic) char hasPackageBit;
@property (readonly, nonatomic, getter=isRegularFile) char regularFile;
@property (readonly, nonatomic, getter=isHidden) char hidden;
@property (readonly, nonatomic) char hasHiddenExtension;
@property (readonly, nonatomic, getter=isDataContainer) char dataContainer;
@property (readonly, nonatomic, getter=isVolume) char volume;
@property (readonly, nonatomic, getter=isMountTrigger) char mountTrigger;
@property (readonly, nonatomic, getter=isSecuredSystemContent) char securedSystemContent;
@property (readonly, nonatomic, getter=isOnDiskImage) char onDiskImage;
@property (readonly, nonatomic, getter=isOnLocalVolume) char onLocalVolume;
@property (readonly, nonatomic, getter=isOnTimeMachineVolume) char onTimeMachineVolume;
@property (readonly, getter=isInTrash) char inTrash;
@property (readonly, getter=isTrashFolder) char trashFolder;
@property (readonly, getter=isAVCHDCollection) char AVCHDCollection;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_resolvedNodeFromAliasFile:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
+ (id)_resolvedURLFromAliasFile:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
+ (char)canAccessURL:(id)a0 fromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a1 operation:(const char *)a2;
+ (char)canAccessURL:(id)a0 withAuditToken:(const struct { unsigned int x0[8]; } *)a1 operation:(const char *)a2;
+ (char)canReadMetadataOfURL:(id)a0 fromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (char)canReadMetadataOfURL:(id)a0 withAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (char)canReadURL:(id)a0 fromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (char)canReadURL:(id)a0 withAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (char)canWriteURL:(id)a0 fromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (char)canWriteURL:(id)a0 withAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (unsigned char)compareBookmarkData:(id)a0 toBookmarkData:(id)a1;
+ (char)getCreationDate:(double *)a0 forBookmarkData:(id)a1 error:(id *)a2;
+ (char)getFSRef:(struct FSRef { unsigned char x0[80]; } *)a0 fromURL:(id)a1 reason:(unsigned char)a2 error:(id *)a3;
+ (char)getFileIdentifier:(unsigned long long *)a0 forBookmarkData:(id)a1 error:(id *)a2;
+ (char)getFileIdentifier:(unsigned long long *)a0 forBookmarkProperties:(id)a1;
+ (char)getFileSystemRepresentation:(char[1024])a0 forBookmarkData:(id)a1;
+ (char)getName:(id *)a0 fileIdentifier:(unsigned long long *)a1 creationDate:(double *)a2 forBookmarkData:(id)a3 error:(id *)a4;
+ (char)getVolumeIdentifier:(unsigned long long *)a0 forBookmarkData:(id)a1 error:(id *)a2;
+ (char)isBookmarkDataFull:(id)a0;
+ (char)isBookmarkDataInTrash:(id)a0;
+ (char)looksLikeTrashFolderName:(id)a0;
+ (id)nameForBookmarkData:(id)a0 error:(id *)a1;
+ (void *)openResourceFilesMap;
+ (id)pathForBookmarkData:(id)a0 error:(id *)a1;
+ (id)prebootVolumeNode;
+ (id)rootVolumeNode;
+ (char)shimFSRef:(const struct FSRef { unsigned char x0[80]; } *)a0 reason:(unsigned char)a1 error:(id *)a2 block:(id /* block */)a3;
+ (char)shimFSRefs:(const struct FSRef { unsigned char x0[80]; } *)a0 count:(long long)a1 reason:(unsigned char)a2 error:(id *)a3 block:(id /* block */)a4;
+ (id)validURLSchemesForInternetLocatorFileExtension:(id)a0;
+ (void)warnAboutFSRefUsageWithReason:(unsigned char)a0;
+ (void)warnAboutResourceForkUsageWithReason:(unsigned char)a0;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (id)URL;
- (char)checkResourceIsReachableAndReturnError:(id *)a0;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)redactedDescription;
- (void)removeCachedResourceValueForKey:(id)a0;
- (void)setTemporaryResourceValue:(id)a0 forKey:(id)a1;
- (void)prepareForReuse;
- (id)URLFromInternetLocatorFileWithError:(id *)a0;
- (id)appleEventDescriptorWithOptions:(unsigned long long)a0 error:(id *)a1;
- (id)bookmarkDataRelativeToNode:(id)a0 error:(id *)a1;
- (id)bookmarkDataWithOptions:(unsigned long long)a0 relativeToNode:(id)a1 error:(id *)a2;
- (id)bundleIdentifierWithContext:(struct LSContext { id x0; } *)a0 error:(id *)a1;
- (id)bundleIdentifierWithError:(id *)a0;
- (id)bundleInfoDictionaryWithError:(id *)a0;
- (char)canReadFromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (char)canReadMetadataFromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (char)canReadMetadataWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (char)canReadWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (char)canWriteFromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (char)canWriteWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (id)canonical:(char)a0 pathWithError:(id *)a1;
- (id)canonicalPathWithError:(id *)a0;
- (id)childNodeWithRelativePath:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
- (char)childNodeWithRelativePathExists:(id)a0;
- (void)clearURLPropertyCacheIfStale;
- (void)closeResourceFile:(struct OpaqueMappedResourceFileRef { } *)a0 reason:(unsigned char)a1;
- (struct __CFBundle { } *)copyCFBundleWithError:(id *)a0;
- (id)diskImageURLWithFlags:(unsigned int)a0 error:(id *)a1;
- (id)extendedAttributeWithName:(id)a0 options:(int)a1 error:(id *)a2;
- (id)extensionWithError:(id *)a0;
- (char)getCachedResourceValueIfPresent:(id *)a0 forKey:(id)a1 error:(id *)a2;
- (char)getContentModificationDate:(double *)a0 error:(id *)a1;
- (char)getCreationDate:(double *)a0 error:(id *)a1;
- (char)getDeviceNumber:(int *)a0 error:(id *)a1;
- (char)getDeviceRefNum:(unsigned long long *)a0 error:(id *)a1;
- (char)getFSRef:(struct FSRef { unsigned char x0[80]; } *)a0 reason:(unsigned char)a1 error:(id *)a2;
- (char)getFileIdentifier:(unsigned long long *)a0 error:(id *)a1;
- (char)getFileSystemRepresentation:(char[1024])a0 error:(id *)a1;
- (char)getFinderInfo:(union { unsigned char x0[32]; struct { struct FileInfo { unsigned int x0; unsigned int x1; unsigned short x2; struct Point { short x0; short x1; } x3; unsigned short x4; } x0; struct ExtendedFileInfo { short x0[4]; unsigned short x1; short x2; int x3; } x1; } x1; struct { struct FolderInfo { struct Rect { short x0; short x1; short x2; short x3; } x0; unsigned short x1; struct Point { short x0; short x1; } x2; unsigned short x3; } x0; struct ExtendedFolderInfo { struct Point { short x0; short x1; } x0; int x1; unsigned short x2; short x3; int x4; } x1; } x2; } *)a0 error:(id *)a1;
- (char)getHFSType:(unsigned int *)a0 creator:(unsigned int *)a1 error:(id *)a2;
- (char)getHasCarbon:(char *)a0 andCFMResources:(char *)a1 propertyList:(id *)a2 fromResourceFile:(struct OpaqueMappedResourceFileRef { } *)a3 reason:(unsigned char)a4 error:(id *)a5;
- (char)getInodeNumber:(unsigned long long *)a0 error:(id *)a1;
- (char)getIsDirectory_NoIO:(char *)a0;
- (char)getLength:(unsigned long long *)a0 error:(id *)a1;
- (char)getOwnerUID:(unsigned int *)a0 error:(id *)a1;
- (char)getResourceValue:(id *)a0 forKey:(id)a1 options:(unsigned char)a2 error:(id *)a3;
- (char)getTemporaryResourceValue:(id *)a0 forKey:(id)a1;
- (char)getVolumeIdentifier:(unsigned long long *)a0 error:(id *)a1;
- (char)getWriterBundleIdentifier:(id *)a0 error:(id *)a1;
- (char)hasHiddenExtension;
- (char)hasPackageBit;
- (id)initByResolvingBookmarkData:(id)a0 options:(unsigned long long)a1 relativeToNode:(id)a2 bookmarkDataIsStale:(char *)a3 error:(id *)a4;
- (id)initByResolvingBookmarkData:(id)a0 relativeToNode:(id)a1 bookmarkDataIsStale:(char *)a2 error:(id *)a3;
- (id)initWithAEDesc:(const struct AEDesc { unsigned int x0; struct OpaqueAEDataStorageType **x1; } *)a0 flags:(unsigned int)a1 error:(id *)a2;
- (id)initWithAppleEventDescriptor:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
- (id)initWithConfigurationString:(int)a0 flags:(unsigned int)a1 error:(id *)a2;
- (id)initWithDirectory:(unsigned long long)a0 inDomain:(unsigned long long)a1 lastPathComponent:(id)a2 createIntermediateDirectories:(char)a3 flags:(unsigned int)a4 error:(id *)a5;
- (id)initWithFSRef:(const struct FSRef { unsigned char x0[80]; } *)a0 reason:(unsigned char)a1 flags:(unsigned int)a2 error:(id *)a3;
- (id)initWithFileSystemRepresentation:(const char *)a0 flags:(unsigned int)a1 error:(id *)a2;
- (id)initWithPath:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
- (id)initWithURL:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
- (const struct _FSInternetLocatorTypeInfo { id x0; id x1; unsigned int x2; } *)internetLocatorTypeInfoForExtension:(id)a0 fileType:(unsigned int)a1;
- (const struct _FSInternetLocatorTypeInfo { id x0; id x1; unsigned int x2; } *)internetLocatorTypeInfoForScheme:(id)a0;
- (char)isInMailbox;
- (char)isInTemporaryDirectory;
- (id)nameWithError:(id *)a0;
- (struct OpaqueMappedResourceFileRef { } *)openResourceFileForReadingWithReason:(unsigned char)a0 error:(id *)a1;
- (id)pathWithError:(id *)a0;
- (id)referringAliasNode;
- (id)resolveDataForkInternetLocatorFile;
- (id)resolveInternetLocatorFileToNetworkVolumeURL;
- (id)resolveWindowsURLFileToURL;
- (id)resolvedNodeWithFlags:(unsigned int)a0 error:(id *)a1;
- (char)setExtendedAttribute:(id)a0 name:(id)a1 options:(int)a2 error:(id *)a3;
- (char)setFinderInfo:(const union { unsigned char x0[32]; struct { struct FileInfo { unsigned int x0; unsigned int x1; unsigned short x2; struct Point { short x0; short x1; } x3; unsigned short x4; } x0; struct ExtendedFileInfo { short x0[4]; unsigned short x1; short x2; int x3; } x1; } x1; struct { struct FolderInfo { struct Rect { short x0; short x1; short x2; short x3; } x0; unsigned short x1; struct Point { short x0; short x1; } x2; unsigned short x3; } x0; struct ExtendedFolderInfo { struct Point { short x0; short x1; } x0; int x1; unsigned short x2; short x3; int x4; } x1; } x2; } *)a0 error:(id *)a1;
- (void)setReferringAliasNode:(id)a0;
- (char)setResourceValue:(id)a0 forKey:(id)a1 options:(unsigned char)a2 error:(id *)a3;
- (id)sideFaultResourceValuesWithError:(id *)a0;
- (id)temporaryDirectoryNodeWithFlags:(unsigned int)a0 error:(id *)a1;
- (id)trashNodeWithError:(id *)a0;
- (id)volumeNodeWithFlags:(unsigned int)a0 error:(id *)a1;
- (char)writeInternetLocatorFileWithURL:(id)a0 dataWritingOptions:(unsigned long long)a1 error:(id *)a2;

@end
