@class NSData, CNResult, CNContainerCache;

@interface CNContactStore : NSObject {
    CNContainerCache *_containerCache;
}

@property (readonly) char supportsMatchingDictionaries;
@property (readonly, copy, nonatomic) CNResult *currentHistoryAnchor;
@property (readonly, copy, nonatomic) NSData *currentHistoryToken;

+ (void)initialize;
+ (id)storeIdentifier;
+ (long long)authorizationStatusForEntityType:(long long)a0;
+ (long long)authorizationStatusForEntityType:(long long)a0 assumedIdentity:(id)a1;
+ (id)contactIdentifierFromInternalIdentifier:(id)a0;
+ (char)eraseAllDataAtLocationWithName:(id)a0 error:(id *)a1;
+ (char)eraseAllDataAtURL:(id)a0 error:(id *)a1;
+ (id)internalIdentifierFromContactIdentifier:(id)a0;
+ (char)isAccessLimitedForEntityType:(long long)a0;
+ (char)isAccessRestrictedForEntityType:(long long)a0;
+ (char)isSharedNamePhotoEnabled;
+ (id)standardLabelsForPropertyWithKey:(id)a0;
+ (id)standardLabelsForPropertyWithKey:(id)a0 options:(unsigned long long)a1;
+ (Class)storeClassWithIdentifier:(id)a0;
+ (id)storeForFamilyMember:(id)a0;
+ (id)storeIdentifierFromContactIdentifier:(id)a0;
+ (id)storeInfoClasses;
+ (id)storeWithDelegateInfo:(id)a0;
+ (id)storeWithEnvironment:(id)a0 options:(unsigned long long)a1;
+ (id)storeWithOptions:(unsigned long long)a0;

- (id)init;
- (void).cxx_destruct;
- (id)initWithConfiguration:(id)a0;
- (id)executeFetchRequest:(id)a0 error:(id *)a1;
- (char)enumerateContactsWithFetchRequest:(id)a0 error:(id *)a1 usingBlock:(id /* block */)a2;
- (id)unifiedMeContactWithKeysToFetch:(id)a0 error:(id *)a1;
- (id)countForFetchRequest:(id)a0 error:(id *)a1;
- (id)enumeratorForChangeHistoryFetchRequest:(id)a0 error:(id *)a1;
- (id)unifiedContactsMatchingPredicate:(id)a0 keysToFetch:(id)a1 error:(id *)a2;
- (id)_crossPlatformUnifiedMeContactWithKeysToFetch:(id)a0 error:(id *)a1;
- (char)executeSaveRequest:(id)a0 error:(id *)a1;
- (id)containersMatchingPredicate:(id)a0 error:(id *)a1;
- (id)defaultContainerIdentifier;
- (id)unifiedContactWithIdentifier:(id)a0 keysToFetch:(id)a1 error:(id *)a2;
- (id)groupWithIdentifier:(id)a0 error:(id *)a1;
- (id)groupsMatchingPredicate:(id)a0 error:(id *)a1;
- (char)resetSortDataIfNeededWithError:(id *)a0;
- (char)shouldAnalyzeDatabaseWithError:(id *)a0;
- (id)userActivityUserInfoForContact:(id)a0;
- (char)enumerateContactsAndMatchInfoWithFetchRequest:(id)a0 error:(id *)a1 usingBlock:(id /* block */)a2;
- (id)executeFetchRequest:(id)a0 completion:(id /* block */)a1;
- (id)_executeFetchRequestsWithInfos:(id)a0 unifyResults:(char)a1 keysToFetch:(id)a2 error:(id *)a3;
- (id)_fetchRequestInfosForEmailOrPhoneForContact:(id)a0;
- (id)_ios_meContactIdentifierWithError:(id *)a0;
- (id)_ios_meContactWithKeysToFetch:(id)a0 error:(id *)a1;
- (id)accountsMatchingPredicate:(id)a0 error:(id *)a1;
- (void)addLimitedAccessForBundle:(id)a0 contactIdentifier:(id)a1;
- (void)addLimitedAccessForBundle:(id)a0 contactIdentifiers:(id)a1;
- (char)analyzeDatabaseWithError:(id *)a0;
- (void)applyLimitedAccessSyncEvents:(id)a0;
- (id)authorizedKeysForContactKeys:(id)a0;
- (id)changeHistoryWithFetchRequest:(id)a0 error:(id *)a1;
- (char)clearChangeHistoryForClientIdentifier:(id)a0 toChangeAnchor:(id)a1 error:(id *)a2;
- (id)contactCountForFetchRequest:(id)a0 error:(id *)a1;
- (id)contactIdentifierWithMatchingDictionary:(id)a0;
- (id)contactWithMatchingDictionary:(id)a0 keysToFetch:(id)a1;
- (id)contactWithUserActivityUserInfo:(id)a0 keysToFetch:(id)a1;
- (id)contactsMatchingPropertiesOfContact:(id)a0 unifyResults:(char)a1 keysToFetch:(id)a2 error:(id *)a3;
- (id)descriptorForRequiredKeysForMatchingDictionary;
- (id)descriptorForRequiredKeysForUserActivityUserInfo;
- (void)dropAllLimitedAccessRows;
- (void)dropAllLimitedAccessRowsAndSyncNotify;
- (char)enumerateNonUnifiedContactsWithFetchRequest:(id)a0 error:(id *)a1 usingBlock:(id /* block */)a2;
- (id)enumeratorForContactFetchRequest:(id)a0 error:(id *)a1;
- (char)executeChangeHistoryClearRequest:(id)a0 error:(id *)a1;
- (id)executeFetchRequest:(id)a0 progressiveResults:(id /* block */)a1 completion:(id /* block */)a2;
- (char)executeSaveRequest:(id)a0 response:(id *)a1 authorizationContext:(id)a2 error:(id *)a3;
- (id)fetchLimitedAccessContactIdentifiersForBundle:(id)a0;
- (id)getLimitedAccessContactsCountForBundle:(id)a0;
- (id)getLimitedAccessLastSyncSequenceNumber:(id *)a0;
- (id)getWatchLimitedAccessSyncDataStartingAtSequenceNumber:(long long)a0;
- (char)hasAccountFirstSyncCompleted;
- (char)hasGroups;
- (char)hasMultipleGroupsOrAccounts;
- (id)identifierWithError:(id *)a0;
- (id)individualContactCountWithError:(id *)a0;
- (id)initWithDataLocationName:(id)a0;
- (id)initWithEnvironment:(id)a0;
- (id)initWithEnvironment:(id)a0 options:(unsigned long long)a1;
- (id)initWithEnvironment:(id)a0 options:(unsigned long long)a1 managedConfiguration:(id)a2;
- (id)latestConsumedChangeHistoryAnchorForClientIdentifier:(id)a0 error:(id *)a1;
- (id)mainContactStore;
- (id)matchingDictionaryForContact:(id)a0;
- (id)meContactIdentifiers:(id *)a0;
- (id)membersOfGroupWithIdentifier:(id)a0 keysToFetch:(id)a1 error:(id *)a2;
- (char)moveContacts:(id)a0 fromContainer:(id)a1 toContainer:(id)a2 error:(id *)a3;
- (id)originForSuggestion:(id)a0 error:(id *)a1;
- (id)policyForContainerWithIdentifier:(id)a0 error:(id *)a1;
- (id)policyWithDescription:(id)a0 error:(id *)a1;
- (id)populateSyncTableForLimitedAccessAboveSequenceNumber:(id)a0;
- (void)purgeLimitedAccessRecordsForBundle:(id)a0;
- (char)registerChangeHistoryClientIdentifier:(id)a0 error:(id *)a1;
- (char)registerChangeHistoryClientIdentifier:(id)a0 forContainerIdentifier:(id)a1 error:(id *)a2;
- (void)removeLimitedAccessForBundle:(id)a0 contactIdentifier:(id)a1;
- (void)removeLimitedAccessForBundle:(id)a0 contactIdentifiers:(id)a1;
- (id)requestAccessForEntityType:(long long)a0;
- (void)requestAccessForEntityType:(long long)a0 completionHandler:(id /* block */)a1;
- (void)requestAuthorization:(long long)a0 entityType:(long long)a1 completionHandler:(id /* block */)a2;
- (int)saveSequenceCount;
- (id)sectionListOffsetsForSortOrder:(long long)a0 error:(id *)a1;
- (id)serverSearchContainersMatchingPredicate:(id)a0 error:(id *)a1;
- (char)setBestMeIfNeededForGivenName:(id)a0 familyName:(id)a1 email:(id)a2 error:(id *)a3;
- (char)setDefaultAccountIdentifier:(id)a0 error:(id *)a1;
- (void)setLimitedAccessTableCurrentSequenceNumber:(id)a0;
- (char)setMeContact:(id)a0 error:(id *)a1;
- (char)setMeContact:(id)a0 forContainer:(id)a1 error:(id *)a2;
- (id)subgroupsOfGroupWithIdentifier:(id)a0 error:(id *)a1;
- (char)supportsSaveRequest:(id)a0;
- (id)unifiedContactCountWithError:(id *)a0;
- (id)unifiedMeContactMatchingEmailAddress:(id)a0 keysToFetch:(id)a1 error:(id *)a2;
- (id)unifiedMeContactMatchingEmailAddresses:(id)a0 keysToFetch:(id)a1 error:(id *)a2;
- (char)unregisterChangeHistoryClientIdentifier:(id)a0 error:(id *)a1;
- (char)unregisterChangeHistoryClientIdentifier:(id)a0 forContainerIdentifier:(id)a1 error:(id *)a2;
- (void)updateLimitedAccessTable:(id)a0;
- (id)usedLabelsForPropertyWithKey:(id)a0 error:(id *)a1;
- (char)verifyChangeHistoryForClientIdentifier:(id)a0 error:(id *)a1;

@end
