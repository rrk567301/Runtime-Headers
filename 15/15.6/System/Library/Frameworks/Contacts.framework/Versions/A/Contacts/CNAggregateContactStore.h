@class NSArray, CNContactStore;

@interface CNAggregateContactStore : CNContactStore {
    CNContactStore *_mainStore;
}

@property (copy, nonatomic) NSArray *contactStores;
@property (readonly, weak, nonatomic) CNContactStore *mainStore;
@property (retain, nonatomic) CNContactStore *contactStoreForMatchingDictionaryWork;
@property (retain, nonatomic) NSArray *postFetchDecoratorBlocks;

- (void).cxx_destruct;
- (id)currentHistoryToken;
- (id)enumeratorForChangeHistoryFetchRequest:(id)a0 error:(id *)a1;
- (id)unifiedContactsMatchingPredicate:(id)a0 keysToFetch:(id)a1 error:(id *)a2;
- (char)executeSaveRequest:(id)a0 error:(id *)a1;
- (id)containersMatchingPredicate:(id)a0 error:(id *)a1;
- (id)defaultContainerIdentifier;
- (id)groupWithIdentifier:(id)a0 error:(id *)a1;
- (id)groupsMatchingPredicate:(id)a0 error:(id *)a1;
- (char)resetSortDataIfNeededWithError:(id *)a0;
- (char)shouldAnalyzeDatabaseWithError:(id *)a0;
- (id)userActivityUserInfoForContact:(id)a0;
- (char)enumerateContactsAndMatchInfoWithFetchRequest:(id)a0 error:(id *)a1 usingBlock:(id /* block */)a2;
- (id)_allStoreResultsWithError:(id *)a0 withBlock:(id /* block */)a1;
- (void)_enumerateStoresUsingBlock:(id /* block */)a0;
- (id)_unifiedContactsFromContacts:(id)a0 unifyContactsFromMainStore:(char)a1 keysToFetch:(id)a2 error:(id *)a3;
- (id)_unifiedMeContactWithKeysToFetch:(id)a0 error:(id *)a1;
- (id)accountsMatchingPredicate:(id)a0 error:(id *)a1;
- (void)addLimitedAccessForBundle:(id)a0 contactIdentifier:(id)a1;
- (void)addLimitedAccessForBundle:(id)a0 contactIdentifiers:(id)a1;
- (void)addPostFetchDecorator:(id /* block */)a0;
- (char)analyzeDatabaseWithError:(id *)a0;
- (void)applyLimitedAccessSyncEvents:(id)a0;
- (id)applyPostFetchDecoratorsToContact:(id)a0 keysToFetch:(id)a1 unifyContactsFromMainStore:(char)a2;
- (id)applyPostFetchDecoratorsToContacts:(id)a0 keysToFetch:(id)a1 unifyContactsFromMainStore:(char)a2;
- (id)changeHistoryWithFetchRequest:(id)a0 error:(id *)a1;
- (char)clearChangeHistoryForClientIdentifier:(id)a0 toChangeAnchor:(id)a1 error:(id *)a2;
- (id)contactCountForFetchRequest:(id)a0 error:(id *)a1;
- (id)contactIdentifierWithMatchingDictionary:(id)a0;
- (id)contactWithUserActivityUserInfo:(id)a0 keysToFetch:(id)a1;
- (id)currentHistoryAnchor;
- (id)descriptorForRequiredKeysForMatchingDictionary;
- (id)descriptorForRequiredKeysForUserActivityUserInfo;
- (void)didFetchContacts:(id)a0 forPredicate:(id)a1 fromStore:(id)a2 unifiedFetch:(char)a3;
- (void)dropAllLimitedAccessRows;
- (void)dropAllLimitedAccessRowsAndSyncNotify;
- (char)enumerateNonUnifiedContactsWithFetchRequest:(id)a0 error:(id *)a1 usingBlock:(id /* block */)a2;
- (id)enumeratorForContactFetchRequest:(id)a0 error:(id *)a1;
- (char)executeChangeHistoryClearRequest:(id)a0 error:(id *)a1;
- (id)executeFetchRequest:(id)a0 progressiveResults:(id /* block */)a1 completion:(id /* block */)a2;
- (char)executeSaveRequest:(id)a0 response:(id *)a1 authorizationContext:(id)a2 error:(id *)a3;
- (id)fetchLimitedAccessContactIdentifiersForBundle:(id)a0;
- (id)findContactStoreForMatchingDictionaryWork;
- (id)getBackgroundColorOnImageData:(id)a0 bitmapFormat:(id)a1 error:(id *)a2;
- (id)getLimitedAccessContactsCountForBundle:(id)a0;
- (id)getLimitedAccessLastSyncSequenceNumber:(id *)a0;
- (id)getWatchLimitedAccessSyncDataStartingAtSequenceNumber:(long long)a0;
- (char)hasGroups;
- (char)hasMultipleGroupsOrAccounts;
- (id)identifierWithError:(id *)a0;
- (id)individualContactCountWithError:(id *)a0;
- (id)initWithContactStores:(id)a0;
- (id)initWithContactStores:(id)a0 configuration:(id)a1;
- (id)latestConsumedChangeHistoryAnchorForClientIdentifier:(id)a0 error:(id *)a1;
- (id)mainContactStore;
- (id)matchingDictionaryForContact:(id)a0;
- (id)meContactIdentifiers:(id *)a0;
- (id)membersOfGroupWithIdentifier:(id)a0 keysToFetch:(id)a1 error:(id *)a2;
- (char)moveContacts:(id)a0 fromContainer:(id)a1 toContainer:(id)a2 error:(id *)a3;
- (id)originForSuggestion:(id)a0 error:(id *)a1;
- (id)policyWithDescription:(id)a0 error:(id *)a1;
- (id)populateSyncTableForLimitedAccessAboveSequenceNumber:(id)a0;
- (void)purgeLimitedAccessRecordsForBundle:(id)a0;
- (char)registerChangeHistoryClientIdentifier:(id)a0 error:(id *)a1;
- (void)removeLimitedAccessForBundle:(id)a0 contactIdentifier:(id)a1;
- (void)removeLimitedAccessForBundle:(id)a0 contactIdentifiers:(id)a1;
- (id)requestAccessForEntityType:(long long)a0;
- (int)saveSequenceCount;
- (id)sectionListOffsetsForSortOrder:(long long)a0 error:(id *)a1;
- (id)serverSearchContainersMatchingPredicate:(id)a0 error:(id *)a1;
- (char)setBestMeIfNeededForGivenName:(id)a0 familyName:(id)a1 email:(id)a2 error:(id *)a3;
- (char)setDefaultAccountIdentifier:(id)a0 error:(id *)a1;
- (void)setLimitedAccessTableCurrentSequenceNumber:(id)a0;
- (char)setMeContact:(id)a0 error:(id *)a1;
- (char)setMeContact:(id)a0 forContainer:(id)a1 error:(id *)a2;
- (char)store:(id)a0 supportsSelector:(SEL)a1;
- (id)subgroupsOfGroupWithIdentifier:(id)a0 error:(id *)a1;
- (char)supportsSaveRequest:(id)a0;
- (id)unifiedContactCountWithError:(id *)a0;
- (char)unregisterChangeHistoryClientIdentifier:(id)a0 error:(id *)a1;
- (void)updateLimitedAccessTable:(id)a0;
- (id)usedLabelsForPropertyWithKey:(id)a0 error:(id *)a1;
- (char)verifyChangeHistoryForClientIdentifier:(id)a0 error:(id *)a1;

@end
