@class QLFullscreenController, NSDate, NSDictionary, QLPreviewPanel, QLPreviewView, QLIndexSheetController, QLPreviewScroller, NSImage, NSString, QLPreviewPanelTouchBarController, QLPreviewSwipeController, QLPanelPreviewView, QLTimeSlider, NSWindow, QLPreviewNavigationController, NSView, NSMutableSet, QLPreviewSlideshow, NSTimer;
@protocol QLPreviewItem;

@interface QLPreviewPanelController : QLPreviewWindowController <QLPathWatcherClient, NSSharingServicePickerDelegate, NSSharingServiceDelegate, QLPreviewTouchBarDelegate, QLPreviewViewDelegate, QLControlsDelegate, QLIndexSheetDelegate, QLTimeSliderDataSource, QLPreviewSlideshowDelegate> {
    char _preservesDisplayStateOnNextReloadData;
    char _needsToDoReloadData;
    char _needsToRefreshContentAfterOpeningTransition;
    char _hasReloadedData;
    id _delegate;
    int _features;
    QLPanelPreviewView *_previewView;
    id _displayState;
    QLFullscreenController *_fullscreenController;
    QLPreviewSwipeController *_swipeController;
    NSView *_internalView;
    NSView *_previewContentView;
    NSView *_previewContainerView;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _contentViewFrame;
    NSWindow *_swipeContainerWindow;
    QLPreviewScroller *_scroller;
    QLTimeSlider *_timeSlider;
    id _eventMonitor;
    QLPreviewSlideshow *_slideshow;
    NSMutableSet *_documentsToAddToIPhoto;
    NSMutableSet *_documentsAddedToIPhoto;
    NSString *_iPhotoLibraryPath;
    NSDate *_timeoutDate;
    double _openTimestamp;
    double _visibleTimestamp;
    char _isOpen;
    char _isOpening;
    char _startAtActivation;
    char _hasCustomSize;
    char _alternateMode;
    char _shouldCloseFullscreen;
    char _shouldAdjustPanelFrameWhenExitingFullscreen;
    char _markupEnabled;
    char _rotateEnabled;
    char _flushing;
    char _ignoreCloseNotification;
    double _totalButtonWidth;
    struct CGSize { double width; double height; } _minWindowSize;
    struct CGSize { double width; double height; } _defaultPreviewSize;
    struct CGPoint { double x; double y; } _anchorPoint[3];
    int _anchorCorner[3];
    long long _anchorScreens[3];
    NSTimer *_anchorResetTimer;
    struct CGPoint { double x; double y; } _anchorPointForPositionNearPreviewItem;
    int _anchorCornerForPositionNearPreviewItem;
    char _shouldSetup;
    char _setuped;
    char _showControls;
    double _cumulativeMagnification;
    char _sharingInProgress;
}

@property (retain) NSString *forcedContentTypeUTI;
@property char hasCustomSize;
@property long long currentPreviewItemIndex;
@property char hasMultipleItems;
@property (retain) QLPreviewNavigationController *navigationController;
@property (retain) QLPreviewPanelTouchBarController *touchBarController;
@property (retain) NSDictionary *openingApplicationInfo;
@property (readonly) NSImage *openingApplicationIcon;
@property (retain) NSView *editToolbarView;
@property char rotatesRight;
@property char shouldCloseAfterEditing;
@property char fakePlaying;
@property (readonly) char zoomActionsEnabled;
@property unsigned long long openingOperationID;
@property (readonly) long long countOfPreviewItems;
@property (readonly) id<QLPreviewItem> currentPreviewItem;
@property (readonly) id<QLPreviewItem> displayedPreviewItem;
@property (retain) id displayState;
@property (readonly) QLPreviewPanel *panel;
@property (retain) QLPreviewView *sharedPreviewView;
@property (readonly) QLPreviewView *previewView;
@property id delegate;
@property char automaticallyManageVisibility;
@property (readonly) char isOpening;
@property (nonatomic) int status;
@property int previewFeatures;
@property (readonly) char isEditing;
@property (readonly) long long editMode;
@property (readonly) long long currentActivity;
@property (readonly) int indexSheetStatus;
@property (readonly) QLIndexSheetController *indexSheetController;
@property (readonly) int inlineSlideshowStatus;
@property (readonly) int fullscreenStatus;
@property (readonly) char worksWhenModal;
@property (readonly) char canShowPreviousItem;
@property (readonly) char canShowNextItem;
@property (copy) NSString *noItemsTitle;
@property (copy) NSString *loadingTitle;
@property (retain) id mandatoryServer;
@property (readonly) NSString *operationNameForPerfAnalysis;
@property (readonly) char isTrimming;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) char markupEnabled;
@property (readonly) char rotateEnabled;
@property (readonly) char trimmingSupported;
@property (readonly) char inMarkup;
@property (readonly) char documentDirty;
@property (readonly) unsigned long long indexSheetMaxColumns;
@property (readonly) unsigned long long indexSheetMaxRows;
@property (readonly) char indexSheetHasDarkBackground;
@property (readonly) char indexSheetShowsControls;
@property (readonly) NSView *indexSheetHostingView;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } indexSheetFrame;
@property char playing;
@property (readonly) double duration;
@property double currentTime;
@property double seekTolerance;
@property char showRemainingTime;
@property (readonly) char needsVolumeControl;
@property (readonly) char hidePlayControl;
@property char muted;
@property float volume;
@property (readonly) char autoplay;

+ (id)keyPathsForValuesAffectingTouchBar;
+ (id)keyPathsForValuesAffectingMuted;
+ (id)keyPathsForValuesAffectingVolume;
+ (id)keyPathsForValuesAffectingCurrentTime;
+ (id)keyPathsForValuesAffectingDuration;
+ (id)keyPathsForValuesAffectingPlaying;
+ (id)_defaultNoItemsTitle;
+ (id)keyPathsForValuesAffectingCanAddCurrentItemToiPhoto;
+ (id)keyPathsForValuesAffectingCanOpen;
+ (id)keyPathsForValuesAffectingCanShowNextItem;
+ (id)keyPathsForValuesAffectingCanShowPreviousItem;
+ (id)keyPathsForValuesAffectingDisplayableInVisualSearch;
+ (id)keyPathsForValuesAffectingDisplayablePlaying;
+ (id)keyPathsForValuesAffectingDocumentDirty;
+ (id)keyPathsForValuesAffectingEditMode;
+ (id)keyPathsForValuesAffectingEnableSharing;
+ (id)keyPathsForValuesAffectingFullscreenStatus;
+ (id)keyPathsForValuesAffectingHidePlayControl;
+ (id)keyPathsForValuesAffectingInMarkup;
+ (id)keyPathsForValuesAffectingInlineSlideshowStatus;
+ (id)keyPathsForValuesAffectingIsCurrentItemIniPhoto;
+ (id)keyPathsForValuesAffectingIsEditing;
+ (id)keyPathsForValuesAffectingIsExporting;
+ (id)keyPathsForValuesAffectingIsTrimming;
+ (id)keyPathsForValuesAffectingMarkupEnabled;
+ (id)keyPathsForValuesAffectingNeedsVolumeControl;
+ (id)keyPathsForValuesAffectingOpenButtonMenuProvider;
+ (id)keyPathsForValuesAffectingOpenButtonTightTitle;
+ (id)keyPathsForValuesAffectingOpenButtonTitle;
+ (id)keyPathsForValuesAffectingOpeningApplicationIcon;
+ (id)keyPathsForValuesAffectingRotateEnabled;
+ (id)keyPathsForValuesAffectingShowPlayControl;
+ (id)keyPathsForValuesAffectingShowRemainingTime;
+ (id)keyPathsForValuesAffectingTrimmingSupported;
+ (id)keyPathsForValuesAffectingVisualSearchSupported;
+ (id)keyPathsForValuesAffectingVisualSearchSymbolName;

- (void)dealloc;
- (void).cxx_destruct;
- (void)close;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (id)initWithWindow:(id)a0;
- (void)swipeWithEvent:(id)a0;
- (void)flagsChanged:(id)a0;
- (char)handleEvent:(id)a0;
- (id)itemsForSharingServicePickerTouchBarItem:(id)a0;
- (void)magnifyWithEvent:(id)a0;
- (void)open:(id)a0;
- (char)performKeyEquivalent:(id)a0;
- (void)reloadData;
- (void)scrollWheel:(id)a0;
- (void)share:(id)a0;
- (void)sharingService:(id)a0 didFailToShareItems:(id)a1 error:(id)a2;
- (void)sharingService:(id)a0 didShareItems:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sharingService:(id)a0 sourceFrameOnScreenForShareItem:(id)a1;
- (id)sharingService:(id)a0 sourceWindowForShareItems:(id)a1 sharingContentScope:(long long *)a2;
- (id)sharingService:(id)a0 transitionImageForShareItem:(id)a1 contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2;
- (void)sharingService:(id)a0 willShareItems:(id)a1;
- (id)sharingServicePicker:(id)a0 delegateForSharingService:(id)a1;
- (void)sharingServicePicker:(id)a0 didChooseSharingService:(id)a1;
- (void)start:(id)a0;
- (void)stop:(id)a0;
- (id)touchBar;
- (void)updateControls;
- (char)wantsForwardedScrollEventsForAxis:(long long)a0;
- (char)wantsScrollEventsForSwipeTrackingOnAxis:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })windowWillUseStandardFrame:(id)a0 defaultFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)zoom:(id)a0;
- (char)isFeatureEnabled:(int)a0;
- (void)pause:(id)a0;
- (void)_flushCaches;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentViewFrame;
- (void)enterFullscreen:(id)a0;
- (void)exitFullscreen;
- (void)play:(id)a0;
- (void)rotateLeft:(id)a0;
- (void)rotateRight:(id)a0;
- (void)refreshCurrentPreviewItem;
- (void)exitFullscreen:(id)a0;
- (void)commitTrim:(id)a0;
- (id)fullscreenController;
- (char)_delegateSupportsEditing;
- (id)openButtonTitle;
- (char)enableSharing;
- (char)canOpen;
- (void)willClose;
- (void)willOpen;
- (void)_applicationWillDeactivate:(id)a0;
- (id)_previewView;
- (void)didOpen;
- (void)setFeature:(int)a0 isEnabled:(char)a1;
- (void)previewView:(id)a0 didLoadPreviewItem:(id)a1;
- (void)previewView:(id)a0 didShowPreviewItem:(id)a1;
- (id)previewView:(id)a0 customViewForPreviewItem:(id)a1;
- (void)previewView:(id)a0 doubleClickedOnPreviewItem:(id)a1;
- (void)previewView:(id)a0 timedOutLoadingPreviewItem:(id)a1;
- (void)previewView:(id)a0 willLoadPreviewItem:(id)a1;
- (void)previewView:(id)a0 willShowPreviewItem:(id)a1;
- (void)reloadDataPreservingDisplayState:(char)a0;
- (char)isExporting;
- (id)slideshow;
- (void)_setupControls;
- (void)_adjustPanelFrameWithAnimation:(char)a0;
- (void)exitIndexSheet:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })fullscreenFrame;
- (void)indexSheetDidClickOnBackground:(id)a0;
- (void)markup:(id)a0;
- (char)showPlayControl;
- (id)_fullscreenView;
- (void)_resetToolbarFromMarkupToNormal;
- (id)indexSheet:(id)a0 titleForPreviewItem:(id)a1;
- (void)previewView:(id)a0 didShowDisplayable:(id)a1;
- (void)_addMarkupToolbarIfNecessary:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustedPanelFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 positionNearPreviewItem:(char)a1;
- (void)_applicationDidActivate:(id)a0;
- (char)_canOverrideUserAction:(int)a0;
- (char)_checkInTrash:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_clampedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentFrameForPreviewView:(id)a0;
- (id)_currentItemScreenForClosing:(char)a0;
- (id)_currentPreviewedURL;
- (int)_defaultUserActionForEvent:(id)a0;
- (int)_defaultUserActionForKeyEquivalentEvent:(id)a0;
- (char)_delegateShouldUseSharingCollaborationModeCopy;
- (void)_didExitTrimming;
- (char)_displayedDisplayBundleBlockedByScreentime;
- (void)_doReloadDataIfNecessary;
- (void)_finishExitFullscreenToPanelContentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_flushCurrentDisplayBundle;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1 toRemainUnoccluded:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_fullPanelSetupIfNecessary;
- (id)_fullscreenParentView;
- (char)_fullscreenSupportedForCurrentItem;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_fullscreenViewFrame;
- (char)_isDocumentAddedToIPhoto:(id)a0;
- (char)_isEventInResizeHandleView:(id)a0;
- (long long)_itemIndexWithDelta:(long long)a0;
- (void)_magnifyBy:(double)a0;
- (struct CGSize { double x0; double x1; })_maxSizeFromUsableFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)_minimumPanelWidthForMarkupWithToolbar:(id)a0;
- (void)_openingOperationBegin;
- (void)_openingOperationCancelled;
- (void)_openingOperationEnd;
- (void)_openingOperationMarkFile;
- (void)_openingOperationPossiblyEnded;
- (char)_panelAdjustsSizeToContent;
- (void)_performUserAction:(int)a0 forEvent:(id)a1;
- (id)_previewItemAtIndex:(long long)a0;
- (void)_previewPanelDidBecomeKey:(id)a0;
- (void)_previewPanelDidResignKey:(id)a0;
- (void)_previewPanelFrameDidChange:(id)a0;
- (void)_refreshLayoutAndContentBlocking:(char)a0;
- (void)_resetAnchor:(id)a0;
- (void)_resetOpenButton;
- (void)_scheduleDoReloadData;
- (void)_setCurrentPreviewItem:(id)a0 withTransition:(int)a1 blocking:(char)a2;
- (void)_setCurrentPreviewItemIndex:(long long)a0 withTransition:(int)a1 blocking:(char)a2;
- (void)_setDisplayState:(id)a0 updatePreviewView:(char)a1;
- (void)_setWidthAndHeightSizableConstraintsForView:(id)a0 toMatchFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_setupFullscreen;
- (void)_setupIndexSheet;
- (void)_setupInternalViews;
- (id)_shareItems;
- (id)_shareItemsOutPreviewItems:(id *)a0;
- (id)_sharedPreviewViewForPreviewItem:(id)a0;
- (id)_sharingPickerForItems:(id)a0;
- (char)_shouldHaveContinuousTransitionToSharedPreviewView:(id)a0 withDocument:(id)a1;
- (char)_shouldOpenURL:(id)a0 forPreviewItem:(id)a1;
- (char)_shouldRestoreSharedPreviewView:(id)a0 withDocument:(id)a1;
- (char)_shouldStealSharedPreviewView:(id)a0 forPreviewItem:(id)a1;
- (char)_shouldUpdateWindowFrame;
- (void)_startAnchorResetTimer;
- (void)_stopAnchorResetTimer;
- (void)_teardownControls;
- (void)_toggleInlineSlideshow;
- (void)_updateEventMonitor;
- (void)_updateNavigationControls;
- (void)_updateOpaqueShape;
- (void)_updateOpenButton;
- (void)_updatePanelButtons;
- (void)_updatePanelFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 animate:(char)a1;
- (void)_updatePanelTitle;
- (void)_updatePreloadedItems;
- (void)_updateProtectedCurrentDocumentURL;
- (void)_updateURLsToCache;
- (void)_updateWindowAnchor;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_usableFrameForScreen:(id)a0;
- (int)_userActionForEvent:(id)a0;
- (void)activateIndexSheetWithAnimation:(char)a0;
- (void)actualSize:(id)a0;
- (void)addDocumentWithURLToIPhoto:(id)a0 commit:(char)a1;
- (void)addToIPhoto:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustedPanelFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ignoringCurrentFrame:(char)a1;
- (void)beginTrimmingCurrentPreview;
- (char)canAddCurrentItemToiPhoto;
- (char)canClose;
- (char)canPerformKeyEquivalent:(id)a0;
- (char)canZoomWithEvent:(id)a0;
- (void)cleanupReloadData;
- (void)closeFullscreen:(id)a0;
- (void)closeFullscreenWithEffect:(int)a0;
- (void)commitAllAdditionsToIPhoto;
- (void)controlsDidUpateLayout:(id)a0;
- (struct CGImage { } *)copyIndexSheetTransitionImageWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 transitionFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1;
- (void)deactivateIndexSheetWithAnimation:(char)a0;
- (void)didClose;
- (void)didFinishOpeningTransition;
- (char)displayableInVisualSearch;
- (char)displayablePlaying;
- (void)doneFromTouchBar:(id)a0;
- (void)doneMarkup:(id)a0;
- (void)enterFullscreenAndStartSlideshow:(char)a0;
- (void)enterFullscreenWithEffect:(int)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 fromPanel:(char)a2 startSlideshow:(char)a3;
- (void)fitToScreen:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })fullscreenTransitionTargetFrameInPreviewViewWithParentBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)hasContentAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)indexSheet:(id)a0 didClickOnItemAtIndex:(long long)a1;
- (void)indexSheet:(id)a0 didHighlightItemAtIndex:(long long)a1;
- (void)indexSheet:(id)a0 keyDown:(id)a1;
- (void)indexSheetDidActivate:(id)a0;
- (void)indexSheetDidDeactivate:(id)a0;
- (void)indexSheetWillActivate:(id)a0;
- (void)indexSheetWillDeactivate:(id)a0;
- (char)isCurrentItemIniPhoto;
- (void)makeSureOfOneReloadData;
- (void)markupFromButton:(id)a0;
- (void)markupFromTouchBar:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })miniWindowFrameForItemFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 canZoomFromCenter:(char)a1;
- (id)nextSlideshowItem;
- (id)objectInPreviewItemsAtIndex:(long long)a0;
- (id /* block */)openButtonMenuProvider;
- (id)openButtonTightTitle;
- (void)openFromTouchBar:(id)a0;
- (void)pathWatcher:(id)a0 fileAtURLWasDeleted:(id)a1;
- (void)pathWatcher:(id)a0 fileAtURLWasModified:(id)a1 onlyAttributes:(char)a2;
- (void)pathWatcher:(id)a0 fileAtURLWasMoved:(id)a1;
- (void)performOpenTransitionWithUpdatedProperties:(id /* block */)a0;
- (void)playPause:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })previewContentFrameIgnoringIndexSheet:(char)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })previewContentFrameIgnoringIndexSheet:(char)a0 inView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })previewDocumentFrame;
- (int)previewStatusForPreviewView:(id)a0;
- (id)previewView:(id)a0 additionalOptionsForItem:(id)a1;
- (void)previewView:(id)a0 didEditPage:(long long)a1 ofDisplayBundle:(id)a2;
- (void)previewView:(id)a0 didSaveEdit:(char)a1 fromDisplayBundle:(id)a2 toURL:(id)a3;
- (void)previewView:(id)a0 didShowScreentimeLockout:(char)a1;
- (void)previewView:(id)a0 didUseDocumentForPreviewItem:(id)a1;
- (id)previewView:(id)a0 documentForPreviewItem:(id)a1;
- (void)previewView:(id)a0 gotDisplayBundle:(id)a1 forPreviewItem:(id)a2;
- (long long)previewView:(id)a0 initialActivityForItem:(id)a1;
- (void)previewView:(id)a0 opaqueFrameDidUpdate:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)previewView:(id)a0 openExternalURL:(id)a1;
- (void)previewView:(id)a0 openWithUserActivity:(id)a1 inAppWithBundleId:(id)a2;
- (void)previewView:(id)a0 pinchZoomedWithMagnification:(double)a1 onPreviewItem:(id)a2;
- (void)previewView:(id)a0 restoreDocument:(id)a1;
- (long long)previewView:(id)a0 saveModeForItem:(id)a1;
- (char)previewView:(id)a0 shouldAnimateHDRIfPresentForItem:(id)a1;
- (char)previewView:(id)a0 shouldDisableProgressiveLoadingOfPreviewItem:(id)a1;
- (char)previewView:(id)a0 shouldGuessOptimalContentSizeForItem:(id)a1;
- (char)previewView:(id)a0 shouldOpenURL:(id)a1;
- (char)previewView:(id)a0 shouldRestoreDocument:(id)a1;
- (char)previewView:(id)a0 shouldShowDisplayable:(id)a1;
- (void)previewView:(id)a0 willShowDisplayable:(id)a1;
- (void)previewViewCustomTitleUpdated:(id)a0;
- (void)previewViewDidEnterMarkup:(id)a0 fromDisplayBundle:(id)a1;
- (void)previewViewDidExitMarkup:(id)a0 fromDisplayBundle:(id)a1;
- (void)previewViewSizingUpdated:(id)a0;
- (void)promptSaveForClose;
- (char)qlNOValue;
- (char)qlYESValue;
- (void)reloadDataNowIfNecessary;
- (void)restoreDisplayBundleToSharedPreviewView:(id)a0;
- (void)revertFromTouchBar:(id)a0;
- (void)revertMarkup:(id)a0;
- (void)revertTrim:(id)a0;
- (void)rotateLeftFromTouchBar:(id)a0;
- (void)rotateRightFromTouchBar:(id)a0;
- (void)setCurrentPreviewItemIndex:(long long)a0 withTransition:(int)a1 blocking:(char)a2;
- (void)setupControlsController:(id)a0;
- (void)setupForFullscreen:(char)a0;
- (void)shareFromButton:(id)a0;
- (void)sharedPreviewPanelWillOpen:(id)a0;
- (char)shouldManageVisibilityForPreviewView:(id)a0;
- (char)shouldStartPlayingPreviewView:(id)a0;
- (char)shouldUseCrossfadingForPreviewItem:(id)a0;
- (void)showItemWithDelta:(long long)a0 transition:(int)a1;
- (void)showNextItem:(id)a0;
- (void)showPreviousItem:(id)a0;
- (void)slideshow:(id)a0;
- (void)slideshowGoToNextItem:(id)a0;
- (void)startInlineSlideshow;
- (void)stopInlineSlideshowAndStopPlaying:(char)a0;
- (void)switchToIndexSheet:(id)a0;
- (void)teardownControlsController:(id)a0;
- (void)toggleVisualSearch:(id)a0;
- (void)toggleVisualSearchFromButton:(id)a0;
- (void)trackSwipeWithEvent:(id)a0;
- (void)trimFromTouchBar:(id)a0;
- (void)trimVideo:(id)a0;
- (void)updateAndApplySizeConstraints:(id /* block */)a0;
- (char)visualSearchSupported;
- (id)visualSearchSymbolName;
- (void)willStartClosingTransition;
- (struct CGSize { double x0; double x1; })windowSizeFromContentSize:(struct CGSize { double x0; double x1; })a0;

@end
