@class NSString, NSURL, NSTrackingArea, CALayer, NSDictionary, NSImage, IKPictureTaker, NSImageView, IKPPFloatingWindow;
@protocol IKProfilePictureDelegate;

@interface IKProfilePictureView : NSView <NSDraggingSource> {
    NSImageView *_imageViewForCell;
    unsigned long long _borderStyle;
    char _draggingEntered;
    char _editable;
    char _showEditionHighlight;
    unsigned long long _editionHighlightType;
    char _showRolloverHighlight;
    char _userActionTriggeredEdition;
    CALayer *_rolloverLayer;
    NSTrackingArea *_trackingArea;
    IKPPFloatingWindow *_floatingPictureWindow;
    char _isEditing;
    char _isPressed;
    id _editorImage;
    struct CGSize { double width; double height; } _cropSize;
    char _shouldRestoreOnCancel;
    id _savedEditorImage;
    NSDictionary *_savedEditorSettings;
    char _isMe;
    NSString *_accountType;
    NSURL *_dropURL;
    IKPictureTaker *_pictureTaker;
}

@property id<IKProfilePictureDelegate> delegate;
@property (retain) NSImage *image;
@property unsigned long long borderStyle;
@property (retain) NSImage *defaultImage;
@property (getter=isEnabled) char enabled;
@property (getter=isEditable) char editable;
@property char showEditionHighlight;
@property unsigned long long editionHighlightType;
@property char showBuiltinImagesByDefault;
@property char isMe;
@property (retain) id representedObject;
@property (retain) NSString *accountType;
@property (retain) NSImage *editorImage;
@property (retain) NSDictionary *editorSettings;
@property (retain) NSString *recentPictureID;
@property char usePanel;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (void)beginEditing;
- (id)initWithCoder:(id)a0;
- (id)accessibilityActionDescription:(id)a0;
- (void)draggingExited:(id)a0;
- (void)delete:(id)a0;
- (id)_dragImage;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_opaqueRect;
- (void)abortEditing;
- (char)acceptsFirstResponder;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (char)accessibilityIsAttributeSettable:(id)a0;
- (char)accessibilityIsIgnored;
- (void)accessibilityPerformAction:(id)a0;
- (char)allowsVibrancy;
- (char)becomeFirstResponder;
- (void)commonInit;
- (void)concludeDragOperation:(id)a0;
- (void)copy:(id)a0;
- (void)dragImage:(id)a0 at:(struct CGPoint { double x0; double x1; })a1 offset:(struct CGSize { double x0; double x1; })a2 event:(id)a3 pasteboard:(id)a4 source:(id)a5 slideBack:(char)a6;
- (unsigned long long)draggingEntered:(id)a0;
- (void)draggingSession:(id)a0 endedAtPoint:(struct CGPoint { double x0; double x1; })a1 operation:(unsigned long long)a2;
- (void)draggingSession:(id)a0 movedToPoint:(struct CGPoint { double x0; double x1; })a1;
- (unsigned long long)draggingSession:(id)a0 sourceOperationMaskForDraggingContext:(long long)a1;
- (void)draggingSession:(id)a0 willBeginAtPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)drawFocusRingMask;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBounds;
- (char)ignoreModifierKeysForDraggingSession:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)isEditing;
- (void)keyDown:(id)a0;
- (void)mouseDown:(id)a0;
- (void)mouseDragged:(id)a0;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void)mouseUp:(id)a0;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)a0;
- (void)paste:(id)a0;
- (char)performDragOperation:(id)a0;
- (char)prepareForDragOperation:(id)a0;
- (char)resignFirstResponder;
- (void)updateTrackingAreas;
- (void)viewWillMoveToWindow:(id)a0;
- (void)_didStopEditing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_accountFrameRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)_allowDropWithDraggingInfo:(id)a0;
- (id)_dragImageData;
- (void)_drawAccountFrame;
- (void)_drawBadgeWithString:(id)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 drawBackground:(char)a2;
- (void)_drawBevel;
- (void)_drawRolloverHighlightInContext:(struct CGContext { } *)a0;
- (void)_drawRotatedFrame;
- (void)_drawRoundedBorder;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_photoContentRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_photoFrameRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_pictureTaker;
- (void)_popoverWillOpenNotification:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rolloverFrame;
- (void)_rotateCurrentContextWithFrameOrigin:(struct CGPoint { double x0; double x1; })a0 innerOffset:(struct CGPoint { double x0; double x1; })a1 angle:(double)a2;
- (void)_setDisplayRolloverLayer:(char)a0;
- (id)_silhouetteImage;
- (void)_willStartEditing;
- (void)beginEditingForDropOrPasteWithImage:(id)a0;
- (void)beginEditingWithMode:(long long)a0;
- (void)floatingWindowWillClose:(id)a0;
- (void)pictureTakerValidated:(id)a0 code:(long long)a1 contextInfo:(void *)a2;
- (void)setDropURL:(id)a0;
- (void)setSavedEditorImage:(id)a0;
- (void)setSavedEditorSettings:(id)a0;
- (void)setupPictureTaker;
- (void)startPictureAnimationWithCompletionBlock:(id /* block */)a0;

@end
