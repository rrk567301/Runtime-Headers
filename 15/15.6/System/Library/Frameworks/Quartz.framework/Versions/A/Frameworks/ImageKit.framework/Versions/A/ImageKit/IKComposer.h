@class IKImageLayer, NSURL, CALayer, NSMutableDictionary, IKFilterChain, NSColor, IKRootLayer, IKImageBackgroundLayer, NSMutableArray, IKImageView;

@interface IKComposer : NSObject {
    IKImageView *_view;
    id _viewDelegate;
    IKRootLayer *_rootLayer;
    IKImageBackgroundLayer *_imageBackgroundLayer;
    IKImageLayer *_imageLayer;
    CALayer *_userOverlayImage;
    CALayer *_userOverlayRoot;
    CALayer *_mouseDownLayer;
    NSMutableArray *_layers;
    NSMutableDictionary *_registeredLayers;
    IKFilterChain *_filterChain;
    long long _toolMode;
    long long _oldToolMode;
    int _selectionType;
    int _annotationType;
    int _maxTextureSize;
    NSColor *_backgroundColor;
    struct CGColor { } *_cgBackgroundColor;
    char _viewDelegateRespondsToWillChange;
    char _viewDelegateRespondsToDidChange;
    char _viewDelegateRespondsToDidChangeWithParameters;
    char _viewDelegateRespondsToUndoManagerForOperation;
    char _needToCreateImageForImageState;
}

@property char reuseImageLayer;
@property char isOpaque;
@property (retain) NSURL *URL;

+ (struct CGContext { } *)createContextForCGImage:(struct CGImage { } *)a0 width:(unsigned long long)a1 height:(unsigned long long)a2 alphaInfo:(unsigned int)a3 data:(void **)a4;
+ (struct CGImage { } *)createCopy:(struct CGImage { } *)a0 filterArray:(id)a1;
+ (struct CGImage { } *)createCopy:(struct CGImage { } *)a0 orientationTag:(int)a1;
+ (struct CGImage { } *)imageFromCGImage:(struct CGImage { } *)a0 imageProperties:(id)a1 imageState:(id)a2 options:(id)a3;
+ (struct CGImage { } *)imageFromURL:(id)a0 imageState:(id)a1 options:(id)a2;

- (void)dealloc;
- (void)finalize;
- (void)cleanup;
- (struct CGImage { } *)image;
- (id)fileURL;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (id)backgroundColor;
- (int)annotationType;
- (void)changeColor:(id)a0;
- (void)changeFont:(id)a0;
- (void)copy:(id)a0;
- (struct CGSize { double x0; double x1; })imageSize;
- (id)imageView;
- (id)initWithView:(id)a0;
- (char)keyDown:(id)a0;
- (void)mouseDown:(id)a0;
- (void)mouseDragged:(id)a0;
- (void)mouseUp:(id)a0;
- (void)paste:(id)a0;
- (char)performKeyEquivalent:(id)a0;
- (void)removeLayer:(id)a0;
- (id)rootLayer;
- (void)scrollToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)selectAll:(id)a0;
- (void)setAnnotationType:(int)a0;
- (void)setBackgroundColor:(id)a0;
- (void)setSelectionType:(int)a0;
- (void)scrollToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)imageProperties;
- (int)selectionType;
- (id)layerForName:(id)a0;
- (void)rotateImageLeft:(id)a0;
- (void)rotateImageRight:(id)a0;
- (long long)toolMode;
- (id)backgroundLayer;
- (void)setFilterArray:(id)a0;
- (char)canCrop;
- (struct CGImage { } *)createThumbnailWithMaximumSize:(struct CGSize { double x0; double x1; })a0;
- (void)imageWillChange;
- (id)overlayForType:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })selectionRectCG;
- (void)setFilterChain:(id)a0;
- (void)setImageZoomFactor:(double)a0 centerPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)setupImageLayer;
- (void)addCursorRectForToolMode;
- (void)addLayer:(id)a0 linkedTo:(id)a1;
- (void)applyPaste:(id)a0;
- (void)applyPasteCallback:(id)a0 layer:(id)a1;
- (void)applyPendingChanges;
- (void)bind:(id)a0 toLayer:(id)a1;
- (char)canPaste;
- (struct CGColor { } *)cgBackgroundColor;
- (struct CGImage { } *)cgImageFromSelection:(char)a0;
- (struct CGImage { } *)cgImageFromSelection:(char)a0 createSquarePixels:(char)a1;
- (void)closingDown;
- (struct CGPoint { double x0; double x1; })convertImagePointToViewPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertImageRectToViewRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })convertViewPointToImagePoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertViewRectToImageRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGColor { } *)createCGColorFromNSColor:(id)a0;
- (struct CGImage { } *)createImageWithCallback:(SEL)a0 param:(id)a1;
- (id)createLayerForTool:(long long)a0 event:(id)a1;
- (struct CGImage { } *)createNewImageWithCallback:(SEL)a0 param:(id)a1 applyFilters:(char)a2;
- (void)crop:(id)a0;
- (void)doAddAnnotation:(id)a0 select:(char)a1;
- (void)doRemoveAnnotation:(id)a0;
- (void)filter:(id)a0 setValue:(id)a1 forKey:(id)a2;
- (id)filter:(id)a0 valueForKey:(id)a1;
- (void)filterAdded:(id)a0 filterChain:(id)a1;
- (id)filterArray;
- (id)filterChain;
- (void)filterChainChanged:(id)a0;
- (void)filterRemoved:(id)a0 filterChain:(id)a1;
- (void)flipImageHorizontal:(id)a0;
- (void)flipImageVertical:(id)a0;
- (void)hideKnobs;
- (void)imageDidChange;
- (void)imageDidChange:(char)a0 imageStateDidChange:(char)a1;
- (struct CGImage { } *)imageForImageState;
- (id)imageLayer;
- (id)imageState;
- (void)imageState:(id *)a0 image:(struct CGImage **)a1 options:(id)a2;
- (struct CGImage { } *)imageWithOptions:(id)a0;
- (id)layerForImage;
- (id)layerForTool:(long long)a0;
- (id)layerOfType:(id)a0;
- (int)maxTextureSize;
- (id)mouseDownLayer;
- (void)reassignFilterChain:(id)a0;
- (void)registerInternalLayers;
- (char)registerLayer:(id)a0;
- (void)removeSelectionLayers;
- (void)renderOptionsForOptionsCallback:(id)a0 param:(id)a1;
- (void)resetToolMode;
- (void)selectionRectAdded;
- (void)selectionRectDidChange:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)selectionRectRemoved;
- (void)setImage:(struct CGImage { } *)a0 imageProperties:(id)a1 imageState:(id)a2 options:(id)a3;
- (void)setImageLayer:(id)a0;
- (void)setImageWithURL:(id)a0 imageState:(id)a1 options:(id)a2;
- (void)setMouseDownLayer:(id)a0;
- (void)setOverlay:(id)a0 forType:(id)a1;
- (void)setRotationAngle:(double)a0 centerPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)setSelectionRectCG:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setToolMode:(long long)a0;
- (void)setValue:(id)a0 forKey:(id)a1 inObject:(id)a2;
- (void)setupDefaultLayers;
- (void)setupImageBackgroundLayer;
- (void)setupRootLayer;
- (void)showKnobs;
- (void)swapOldImage:(struct CGImage { } *)a0 oldState:(id)a1 newImage:(struct CGImage { } *)a2 newState:(id)a3 undoManager:(id)a4;
- (id)targetForSelector:(SEL)a0;
- (void)unbindLayer:(id)a0;
- (id)undoManagerForOperation:(id)a0;
- (void)updateFilter:(id)a0 withParameters:(id)a1;
- (char)validLayer:(id)a0;
- (void)viewDelegateChanged;

@end
