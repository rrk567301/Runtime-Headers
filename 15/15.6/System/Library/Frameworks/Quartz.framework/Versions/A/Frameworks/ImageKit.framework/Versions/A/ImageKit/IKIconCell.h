@class NSImage, NSString, IKImageWrapper;

@interface IKIconCell : IKImageBrowserCell {
    IKImageWrapper *_cachedTitleImage;
    struct { float width; NSImage *tagImage; unsigned char selected : 1; unsigned char focus : 1; unsigned char twoLines : 1; unsigned char centered : 1; unsigned char overlap : 1; unsigned char illegible : 1; } _cachedTitleSettings;
    struct { short numLines; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } upperRect; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } lowerRect; BOOL truncated; int truncatIndex; double tagOffset; } _savedMetrics;
    NSString *_savedMetricsTitle;
    struct CGSize { double width; double height; } _savedMetricsFrameSize;
    NSImage *_tagImage;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _topTitleFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _bottomTitleFrame;
    unsigned long long _overlapCacheVersion;
    unsigned char _overlapCacheValue : 1;
    unsigned char _isBlinking : 1;
    unsigned char _tagImageFetched : 1;
    unsigned char _isDefaultFolder : 2;
    unsigned char _supportsStatus : 2;
    unsigned char _supportsOldStatus : 2;
    unsigned char _isDimmed : 2;
}

+ (void)initialize;
+ (struct CGPoint { double x0; double x1; })anchorPointTranslationWithView:(id)a0;
+ (struct CGPoint { double x0; double x1; })anchorPointWithView:(id)a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })anchoredBoundsForSettings:(id)a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })anchoredBoundsOfPart:(int)a0 iconSize:(double)a1 gridSpacing:(double)a2 labelAttributes:(id)a3 titlesOnRight:(char)a4 options:(id)a5;
+ (struct CGSize { double x0; double x1; })cellSizeForIconSize:(double)a0 gridSpacing:(double)a1 textAttributes:(id)a2 titlesOnRight:(char)a3 showInfo:(char)a4;
+ (struct CGSize { double x0; double x1; })cellSizeForIconSize:(double)a0 maxIconSize:(double)a1 gridSpacing:(double)a2 textAttributes:(id)a3 titlesOnRight:(char)a4 showInfo:(char)a5;
+ (struct CGSize { double x0; double x1; })cellSpacingForIconSize:(double)a0 gridSpacing:(double)a1 titlesOnRight:(char)a2;
+ (struct CGSize { double x0; double x1; })cellSpacingForIconSize:(double)a0 maxIconSize:(double)a1 gridSpacing:(double)a2 titlesOnRight:(char)a3;
+ (id)iconCellForView:(id)a0;
+ (double)labelHeightForAttributes:(id)a0 iconSize:(double)a1 gridSpacing:(double)a2 titlesOnRight:(char)a3 showInfo:(char)a4;
+ (struct CGSize { double x0; double x1; })minTitleSizeForTextAttributes:(id)a0;
+ (id)moreButtonUID;
+ (struct CGSize { double x0; double x1; })sampleCharSizeForTextAttributes:(id)a0;
+ (double)selectionRadiusForIconSize:(double)a0;
+ (char)shouldWrapLabelsForIconSize:(double)a0 gridSpacing:(double)a1 titlesOnRight:(char)a2;
+ (char)supportsHeightOfInfoSpaceFactorization;
+ (id)titleAttributesWithSize:(double)a0 lineBreakMode:(unsigned long long)a1 align:(long long)a2 select:(char)a3;

- (void)dealloc;
- (void)invalidate;
- (double)opacity;
- (void)drawImage:(id)a0;
- (unsigned long long)imageAlignment;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleFrame;
- (double)iconSize;
- (char)isBlinking;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })selectionFrame;
- (char)isDimmed;
- (void)_drawOpenFolder;
- (void)invalidateTitle;
- (double)selectionRadius;
- (id)_progressImage:(unsigned long long)a0;
- (id)_buildProgressImage:(double)a0;
- (void)_drawCustomImage:(id)a0 cacheKey:(id)a1;
- (struct CGSize { double x0; double x1; })_getTitleSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bottomRectForTitleFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)cacheTitleImage:(id)a0 forSettings:(struct { float x0; id x1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } *)a1;
- (char)cachedTitleImageMatchesSettings:(struct { float x0; id x1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } *)a0;
- (void)clipContext:(struct CGContext { } *)a0 metrics:(struct { short x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; BOOL x3; int x4; double x5; } *)a1 scaleFactor:(double)a2;
- (double)dimFactor;
- (char)disableTwoLineTitles;
- (void)drawDecorationInContext:(struct CGContext { } *)a0 fillRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 settings:(struct { float x0; id x1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } *)a2 metrics:(struct { short x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; BOOL x3; int x4; double x5; } *)a3;
- (void)drawSelection;
- (void)drawSingleLineTitleSelectionInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawStatus;
- (void)drawSubtitle;
- (void)drawTag:(id)a0 atX:(double)a1 y:(double)a2;
- (void)drawTitle;
- (void)getMetrics:(struct { short x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; BOOL x3; int x4; double x5; } *)a0 forTitle:(id)a1 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 withSettings:(struct { float x0; id x1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } *)a3;
- (void)getSelectionColorRed:(float *)a0 green:(float *)a1 blue:(float *)a2 focus:(char)a3;
- (void)getTitleSettings:(struct { float x0; id x1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } *)a0;
- (int)heightOfInfoSpace;
- (char)hitTestWithPoint:(struct CGPoint { double x0; double x1; })a0;
- (char)hitTestWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)isDefaultFolderIcon;
- (char)metricsAreValidForTitle:(id)a0 frameSize:(struct CGSize { double x0; double x1; })a1;
- (char)needTitleImageForSettings:(struct { float x0; id x1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } *)a0;
- (char)needsOverlapFlagUpdates;
- (void)setBlinking:(char)a0;
- (char)shouldShowStatus;
- (double)singleLineTitleHeight;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })statusFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })subtitleFrame;
- (double)subtitleHeight;
- (id)tagImage;
- (double)tagMargin;
- (double)textHeight;
- (id)titleAttributesForSettings:(struct { float x0; id x1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } *)a0 clip:(char)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleFrameForCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleFrameForCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 selectionFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)titleImageForSettings:(struct { float x0; id x1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } *)a0 cached:(char *)a1;
- (char)titleIsTruncated;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleRoundedRectForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleStringFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })topRectForTitleFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)updateOverlapFlagWithSettings:(struct { float x0; id x1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } *)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })usedRectForSubtitleFrame;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })usedRectInCellFrame:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0;

@end
