@class NSDictionary, NSImage, NSURL, NSData, NSBitmapImageRep, CIImage;
@protocol IKImageProxy;

@interface IKImageWrapper : NSObject {
    NSURL *_url;
    NSData *_dataRepresentation;
    NSBitmapImageRep *_bitmapRepresentation;
    id<IKImageProxy> _imageProxy;
    union { struct CGImage *_cgImage; CIImage *_ciImage; struct CGImageSource *_cgImageSource; NSImage *_nsImage; struct OpaqueIconRef *_icon; } _volatileRep;
    unsigned char _volatileRepresentation : 4;
    unsigned char _generatedWithIconServices : 1;
    unsigned char _underlyingDataAreVolatile : 1;
    unsigned char _isReference : 1;
    unsigned char _bitmapLocked : 1;
    unsigned char _invalid : 1;
    unsigned char _quality : 2;
    unsigned char _hasAlpha : 1;
    unsigned char _hasAlphaValid : 1;
    unsigned char _baselineValid : 1;
    unsigned char _toplineValid : 1;
    struct CGSize { double width; double height; } _cachedSize;
    unsigned int _baseline;
    NSDictionary *_info;
}

+ (id)emptyImage;
+ (id)imageWithCGImage:(struct CGImage { } *)a0;
+ (id)imageWithData:(id)a0;
+ (id)imageWithURL:(id)a0;
+ (id)imageWithNSImage:(id)a0;
+ (id)imageWithPasteboard:(id)a0;
+ (id)imageWithCGImageSource:(struct CGImageSource { } *)a0;
+ (id)imageWithDraggingItem:(id)a0;
+ (id)imageWithIconRef:(struct OpaqueIconRef { } *)a0;
+ (id)imageWithImageProxy:(id)a0;
+ (id)imageWithNSBitmapImageRep:(id)a0;
+ (id)imageWithObject:(id)a0;
+ (id)imageWithObject:(id)a0 scaleFactor:(double)a1;
+ (id)imageWithPath:(id)a0;
+ (id)imageWithSize:(struct CGSize { double x0; double x1; })a0;

- (void)dealloc;
- (id)copy;
- (id)description;
- (void)finalize;
- (char)isValid;
- (char)isEmpty;
- (id)bitmapRepresentation;
- (id)initWithData:(id)a0;
- (id)initWithIconRef:(struct OpaqueIconRef { } *)a0;
- (id)initWithPasteboard:(id)a0;
- (id)initWithURL:(id)a0;
- (void)setPath:(id)a0;
- (void)setValue:(id)a0 forKey:(id)a1;
- (struct OpaqueIconRef { } *)iconRef;
- (void)setURL:(id)a0;
- (id)url;
- (id)info;
- (void)setIconRef:(struct OpaqueIconRef { } *)a0;
- (void)setInfo:(id)a0;
- (void)setSize:(struct CGSize { double x0; double x1; })a0;
- (id)valueForKey:(id)a0;
- (unsigned short)flags;
- (struct CGSize { double x0; double x1; })size;
- (id)TIFFRepresentation;
- (id)dataRepresentation;
- (id)initWithPath:(id)a0;
- (void)setFlags:(unsigned short)a0;
- (struct CGImage { } *)cgImage;
- (id)TIFFRepresentationUsingCompression:(unsigned long long)a0 factor:(float)a1;
- (struct CGSize { double x0; double x1; })_size;
- (char)hasAlpha;
- (id)initWithCGImage:(struct CGImage { } *)a0;
- (id)initWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)lockFocus;
- (void)unlockFocus;
- (void)setIsReference:(char)a0;
- (float)baseline;
- (struct CGContext { } *)cgContext;
- (void)setCGImage:(struct CGImage { } *)a0;
- (int)quality;
- (void)setQuality:(int)a0;
- (void)setDataRepresentation:(id)a0;
- (int)loopCount;
- (id)imagePath;
- (id)initWithNSImage:(id)a0;
- (id)nsImage;
- (id)GIFRepresentation;
- (id)IK_JPEGRepresentationWithCompressionFactor:(float)a0;
- (struct CGContext { } *)createCGContext;
- (id)ramCopy;
- (char)textureIsPacked;
- (float)topline;
- (id)_sizeOfNSImage:(id)a0;
- (int)imageFrameCount;
- (unsigned int)openGLTextureID;
- (id)thumbnailWithSize:(struct CGSize { double x0; double x1; })a0 antialiased:(char)a1 qualityRequested:(int)a2 qualityProduced:(int *)a3;
- (char)toplineIsCached;
- (id)writeToFileWithAutomaticFormat:(id)a0;
- (id)__bitmapRepresentation;
- (struct CGImage { } *)_cgImage;
- (id)_createBitmapImageRepFromCGRepresentation;
- (id)_dataRepresentationFromBitmapRepresentation:(id)a0;
- (id)_nsImage;
- (id)_thumbnailWithSize:(struct CGSize { double x0; double x1; })a0 antialiased:(char)a1 quality:(int)a2;
- (void)_tryCreateBitmapFromVRamRepresentation;
- (id)_tryToCreateCGImageRepFromNonCGFile:(id)a0;
- (void)_updateHasAlphaFlag:(id)a0;
- (id)animatedGifsCache;
- (char)baselineIsCached;
- (id)bestImageForTargetScaleFactor:(double)a0 sourceScaleFactor:(double *)a1;
- (void)bindCGCache;
- (char)bitmapIsUsedAsClientStorage;
- (struct CGSize { double x0; double x1; })cachedSize;
- (struct CGImageSource { } *)cgImageSourceRef:(char)a0;
- (id)dataRepresentationFromCGRepresentationWithCompressionFactor:(float)a0;
- (void)deleteTextureInContext:(struct _CGLContextObject { } *)a0;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 alpha:(float)a2;
- (void)freeCGCache;
- (void)freeCache;
- (void)freeRAMCache;
- (void)freeVRAMCache;
- (unsigned int)generateNewGLTextureID;
- (char)hasBitmapRepresentation;
- (char)hasCGCache;
- (char)hasDataRepresentation;
- (char)hasRAMCache;
- (char)hasVolatileCache;
- (struct CGImage { } *)imageAtFrameIndex:(int)a0;
- (id)imageInPixelSpaceForTargetResolution:(double)a0;
- (id)imageInPixelSpaceForViewResolution:(id)a0;
- (id)imageProxy;
- (id)imageWithoutProxy;
- (id)initEmptyImage;
- (id)initWithCGImageSource:(struct CGImageSource { } *)a0;
- (id)initWithImageProxy:(id)a0;
- (id)initWithNSBitmapImageRep:(id)a0;
- (id)initWithOpenGLID:(unsigned int)a0 size:(struct CGSize { double x0; double x1; })a1 offset:(struct CGPoint { double x0; double x1; })a2 premultiplied:(char)a3 deleteWhenDone:(char)a4;
- (void)integrateReferenceInstance:(id)a0;
- (char)isAnimatedGifs;
- (char)isMarkedAsInvalid;
- (char)isVectorial;
- (void)mapIntoVRAM;
- (char)mappedAndDecompressedIntoRAM;
- (char)mappedIntoRAM;
- (char)mappedIntoVRAM;
- (float)nextFrameDelayAtIndex:(int)a0;
- (id)nsImage:(char)a0;
- (char)openGLTextureIsPremultiplied;
- (struct CGPoint { double x0; double x1; })openGLTextureOffset;
- (id)referenceInstance;
- (void)referenceWillDie;
- (void)releaseBitmapCache;
- (void)releaseVolatileImageRep;
- (void)saveAsJPGAtPath:(id)a0;
- (void)saveAsTIFFAtPath:(id)a0;
- (void)setBitmapRepresentation:(id)a0;
- (void)setCGImageSource:(struct CGImageSource { } *)a0;
- (void)setImageProxy:(id)a0;
- (void)setIsThreadSafe:(char)a0;
- (void)setNSImage:(id)a0;
- (void)setOpenGLTextureID:(unsigned int)a0 withGLContext:(struct _CGLContextObject { } *)a1;
- (void)setOpenGLTextureIsPremultiplied:(char)a0;
- (void)setOpenGLTextureOffset:(struct CGPoint { double x0; double x1; })a0;
- (void)setSizeWithoutSavingContent:(struct CGSize { double x0; double x1; })a0;
- (void)setUnderlyingDataAreVolatile:(char)a0;
- (void)setVolatileRepresentation:(int)a0;
- (void)setWasGeneratedWithIconServices:(char)a0;
- (id)thumbnailWithSize:(struct CGSize { double x0; double x1; })a0 antialiased:(char)a1 quality:(int)a2;
- (char)underlyingDataAreVolatile;
- (int)volatileRepresentation;
- (char)wasGeneratedWithIconServices;

@end
