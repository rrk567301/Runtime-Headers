@class IKMipmapItem;

@interface IKMipmapImage : NSObject {
    IKMipmapItem *_mipmaps[4];
    IKMipmapItem *_originalMipmap;
    IKMipmapItem *_varyingMipmap;
    struct CGSize { double width; double height; } _originalImageSizeCache;
    unsigned char _originalImageIsInvalid : 1;
    unsigned char _dirty : 1;
    unsigned char _mark : 1;
    unsigned char _isReference : 1;
}

- (void)dealloc;
- (void)finalize;
- (id)init;
- (void)setDirty:(char)a0;
- (void)setImage:(id)a0;
- (id)image;
- (char)isDirty;
- (void)setIsReference:(char)a0;
- (struct CGSize { double x0; double x1; })originalImageSize;
- (void)_cleanUp;
- (id)originalItem;
- (id)mipmapWithSize:(int)a0;
- (void)setMipmapSizes:(id)a0;
- (void)_cacheMipmapSize:(struct CGSize { double x0; double x1; })a0 fromModel:(id)a1;
- (id)_fastMipmapItemForSize:(struct CGSize { double x0; double x1; })a0 forOpenGL:(char)a1 useMinimumQualityThreshold:(char)a2;
- (void)_mipmapCommonInit;
- (char)allMipmapItemsAreValid;
- (char)atLeastOneMipmapItemIsValid;
- (int)bestMipmapIndexToValidateForSize:(int)a0;
- (void)checkAndMarkMipmapAsInvalid;
- (void)clearMark;
- (char)containsMipmapItem:(id)a0;
- (id)fastImageForSize:(struct CGSize { double x0; double x1; })a0 forGLRendering:(char)a1;
- (id)fastMipmapItemForSize:(struct CGSize { double x0; double x1; })a0 forGLRendering:(char)a1;
- (id)fastMipmapItemForSize:(int)a0 forOpenGL:(char)a1 useMinimumQualityThreshold:(char)a2;
- (id)fastMipmapItemWithExactSize:(struct CGSize { double x0; double x1; })a0;
- (id)fastestImageForSize:(struct CGSize { double x0; double x1; })a0 forGLRendering:(char)a1;
- (id)fastestMipmapItemForSize:(struct CGSize { double x0; double x1; })a0 forGLRendering:(char)a1;
- (void)freeAllCaches;
- (void)freeOriginalImageCache;
- (void)freeTemporaryCache;
- (id)highestMipmapItem;
- (int)highestMipmapItemIndex;
- (long long)indexOfMipmapItem:(id)a0;
- (id)initWithMipmapSizes:(id)a0 VMUsagePolicy:(id)a1;
- (void)integrateReferenceInstance:(id)a0;
- (void)invalidateMipMaps;
- (void)invalidateOriginalImageSizeCache;
- (id)lockMipmapAtIndex:(int)a0;
- (void)mark;
- (char)marked;
- (id)mipmapItemAtIndex:(long long)a0;
- (id *)mipmapItems;
- (id)niceImageForSize:(struct CGSize { double x0; double x1; })a0 forGLRendering:(char)a1 cacheIt:(char)a2;
- (id)niceMipmapItemForSize:(struct CGSize { double x0; double x1; })a0 forGLRendering:(char)a1 cacheIt:(char)a2;
- (id)nicestImageForSize:(struct CGSize { double x0; double x1; })a0 forGLRendering:(char)a1 cacheIt:(char)a2;
- (id)nicestMipmapItemForSize:(struct CGSize { double x0; double x1; })a0 forGLRendering:(char)a1 cacheIt:(char)a2;
- (float)originalAspectRatio;
- (char)originalImageIsInvalid;
- (struct CGSize { double x0; double x1; })originalImageSizeCache;
- (char)preloadMipmapsWithQuality:(int)a0;
- (id)referenceInstance;
- (void)referenceWillDie;
- (void)setImage:(id)a0 forMipmapSize:(int)a1;
- (void)setImageWithoutInvalidate:(id)a0;
- (void)setMipmapVMUsagePolicy:(id)a0;
- (void)setOriginalImageIsInvalid:(char)a0;
- (void)setOriginalImageSizeCache:(struct CGSize { double x0; double x1; })a0;
- (char)shouldUseOriginalImageToCacheNiceImageWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)unlockMipmapItem:(id)a0;
- (id)validMipmapItems;
- (char)validateMipmap:(id)a0 withModel:(id)a1 withQuality:(int)a2;
- (char)validateMipmap:(id)a0 withQuality:(int)a1;
- (char)validateMipmapAtIndex:(int)a0 withQuality:(int)a1;
- (id)varyingMipmap;
- (char)varyingMipmapIsValidAndMatchSize:(struct CGSize { double x0; double x1; })a0 andQuality:(int)a1;

@end
