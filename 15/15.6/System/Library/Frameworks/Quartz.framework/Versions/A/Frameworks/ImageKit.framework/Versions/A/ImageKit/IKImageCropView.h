@class CIImage, CIContext, IKImageWrapper, NSButton, IKMipmapImage, NSMutableArray, QCRenderer, NSProgressIndicator, NSImage, NSString, IKImageCropPRS, IKImageCropViewEffect, NSAttributedString, NSUndoManager, NSTimer, IKImageCropViewSlider, IKSFCropElement, NSColor;

@interface IKImageCropView : NSView {
    IKImageWrapper *_originalImage;
    IKImageCropPRS *_cropPRS;
    struct CGSize { double width; double height; } _sourceSize;
    float _zoomValue;
    float _cropFrameZoomValue;
    float _zoomFactorMinResolution;
    float _zoomFactorMaxResolution;
    id _delegate;
    NSColor *_backgroundColor;
    NSColor *_cropBackgroundColor;
    NSColor *_dimmedLayerColor;
    NSColor *_alphaFrameColor;
    NSColor *_borderColor;
    struct CGSize { double width; double height; } _cropSize;
    int _cropZoneBehavior;
    char _allowEdit;
    int _constraintMode;
    char _allowRotations;
    char _showZoomSlider;
    char _showZoomMinMax;
    char _showValidateButton;
    char _acceptsDrop;
    int _borderType;
    NSProgressIndicator *_progressIndicator;
    char _defaultCropIsZoomToFit;
    char _useOverlayMask;
    NSImage *_overlayMaskImage;
    struct CGPoint { double x; double y; } _dragOrigin;
    IKImageCropPRS *_dragInitialCropPRS;
    float _dragOriginRotation;
    struct CGPoint { double x; double y; } _dragOriginGizmoPosition;
    float _dragCurrentRotation;
    float _dragLastRotation;
    char _inImageDrag;
    int _clockwiseRotation;
    IKImageCropViewEffect *_draggedGizmo;
    char _mouseInside;
    char _keepFocusMode;
    struct CGPoint { double x; double y; } _focus;
    char _focusValid;
    char _nicestDrawingMode;
    char _nicestDrawPosted;
    IKImageCropViewSlider *_zoomSlider;
    NSButton *_zoomMinButton;
    NSButton *_zoomMaxButton;
    char _centeredVerticalAlignment;
    NSString *_informationalString;
    NSAttributedString *_informationalAttributedString;
    char _datasourceStable;
    char _preloadThreadLaunched;
    CIContext *_context;
    NSMutableArray *_ciEffects;
    IKSFCropElement *_imageAffineTransform;
    IKSFCropElement *_imageAffineRotation;
    IKSFCropElement *_viewAffineTransform;
    IKSFCropElement *_cameraElement;
    char _inCameraMode;
    CIImage *_lastRenderedCIImage;
    IKImageCropViewEffect *_qcEffect;
    struct CGSize { double width; double height; } _offscreeQCCacheSize;
    struct CGContext { } *_offscreenCGContext;
    QCRenderer *_offscreenQCRenderer;
    IKImageWrapper *_qcBuffer;
    NSUndoManager *_undoManager;
    NSTimer *_animatedGifsTimer;
    int _currentAnimatedImageFrame;
    int _onAnimatedImageTimerCount;
    char _animates;
    char _isDirty;
    IKMipmapImage *_mipmap;
    struct CGImage { } *_ciInputCache;
    char _drawContent;
    char _usesCircularCrop;
}

+ (id)cropPRSFromCropRegion:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 cropSize:(struct CGSize { double x0; double x1; })a1 originalImageSize:(struct CGSize { double x0; double x1; })a2;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cropRegionBoundingRectForCropSize:(struct CGSize { double x0; double x1; })a0 cropPRS:(id)a1 originalImageSize:(struct CGSize { double x0; double x1; })a2;
+ (id)croppedImageFromOriginalImage:(id)a0 cropInfo:(id)a1 cropSize:(struct CGSize { double x0; double x1; })a2 outputSize:(struct CGSize { double x0; double x1; })a3 bgColor:(id)a4;
+ (id)imageFromContext:(struct CGContext { } *)a0 withComposition:(id)a1 fxCenter:(struct CGPoint { double x0; double x1; })a2 qcRenderer:(id)a3;

- (void)dealloc;
- (void)finalize;
- (id)context;
- (id)delegate;
- (void)setDelegate:(id)a0;
- (void)setImage:(id)a0;
- (id)borderColor;
- (id)backgroundColor;
- (void)setFrameOrigin:(struct CGPoint { double x0; double x1; })a0;
- (void)setUndoManager:(id)a0;
- (char)isDirty;
- (void)setBorderColor:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_opaqueRect;
- (void)_setImage:(id)a0;
- (char)acceptsFirstMouse:(id)a0;
- (char)acceptsFirstResponder;
- (char)animates;
- (char)becomeFirstResponder;
- (int)borderType;
- (unsigned long long)draggingEntered:(id)a0;
- (void)drawImage:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)keyDown:(id)a0;
- (void)keyUp:(id)a0;
- (void)magnifyWithEvent:(id)a0;
- (void)mouseDown:(id)a0;
- (char)mouseDownCanMoveWindow;
- (void)mouseDragged:(id)a0;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void)mouseUp:(id)a0;
- (char)performDragOperation:(id)a0;
- (void)removeAllEffects;
- (void)removeEffect:(id)a0;
- (void)resetCursorRects;
- (char)resignFirstResponder;
- (void)setAnimates:(char)a0;
- (void)setBackgroundColor:(id)a0;
- (void)setBorderType:(int)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setRotation:(float)a0;
- (id)undoManager;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)windowDidMiniaturize:(id)a0;
- (void)stopCapture;
- (id)effects;
- (id)croppedImage;
- (float)scaleValue;
- (void)startCapture;
- (struct CGSize { double x0; double x1; })sourceSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cropRect;
- (char)hasEffect;
- (void)preload;
- (id)originalImage;
- (void)_undoableSetEffectsWithDisplay:(id)a0;
- (id)alphaFrameColor;
- (id)cropPRS;
- (void)drawEffectGizmo;
- (char)isLiveCapturing;
- (void)setAcceptsDrop:(char)a0;
- (void)setDrawContent:(char)a0;
- (void)zoomMin:(float *)a0 andMax:(float *)a1;
- (void)_postNicestDraw;
- (void)_undoableSetCropPRSWithDisplay:(id)a0;
- (void)checkBoundaries;
- (void)drawAlphaFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)limitZoomToMinFactor:(float)a0 maxFactor:(float)a1;
- (void)_mouseDragged:(id)a0;
- (void)_nicestDraw;
- (struct CGSize { double x0; double x1; })_originalImageBoundingBoxSizeIncludingRotation;
- (void)_prepareCropPRSUndo:(id)a0;
- (void)_prepareEffectsUndo:(id)a0;
- (void)_prepareGizmoPositionUndo:(struct CGPoint { double x0; double x1; })a0;
- (void)_prepareNicestDraw:(id)a0;
- (void)_setZoomValue:(float)a0;
- (void)_setZoomValueWithDisplay:(float)a0;
- (void)_undoableSetGizmoPositionWithDisplay:(struct CGPoint { double x0; double x1; })a0;
- (void)_unlinkCIEffect:(id)a0;
- (char)acceptsDrop;
- (id)addEffectWithName:(id)a0 type:(id)a1 position:(struct CGPoint { double x0; double x1; })a2;
- (char)allowEdit;
- (char)allowRotations;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectOfOrientedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 rotation:(float)a1 pivot:(struct CGPoint { double x0; double x1; })a2;
- (char)centeredVerticalAlignment;
- (void)checkZoomBoundaries;
- (int)constrainMode;
- (struct CGPoint { double x0; double x1; })convertScreenPositionToPRSPosition:(struct CGPoint { double x0; double x1; })a0;
- (id)cropBackgroundColor;
- (void)cropElementDidLiveUpdate:(id)a0;
- (id)cropInfo;
- (id)cropParameters;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cropRectWithoutZoom;
- (struct CGSize { double x0; double x1; })cropSize;
- (int)cropZoneBehavior;
- (id)croppedImageWithSize:(struct CGSize { double x0; double x1; })a0;
- (char)currentImageIsAnimated;
- (char)defaultCropIsZoomToFit;
- (id)dimmedLayerColor;
- (void)drawBack:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawBorder:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)drawContent;
- (void)drawGizmo;
- (void)drawInCell:(id)a0 withRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inLiveResize:(char)a2;
- (void)drawRotationGizmo;
- (void)editedImageDidChanged;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })gizmoBoundingBoxForRadius:(float)a0;
- (id)gizmoHitTest:(struct CGPoint { double x0; double x1; })a0;
- (void)grabCapture;
- (void)grabFocusIfNeeded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })imageBoundingRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })imageCroppedRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })imageRectWithoutRotations;
- (id)informationalAttributedString;
- (id)informationalString;
- (void)initComponent;
- (struct CGContext { } *)initQCContextWithSize:(struct CGSize { double x0; double x1; })a0;
- (char)inputImageIsModified;
- (void)invalidateFocusPoint;
- (struct CGSize { double x0; double x1; })keepAtLeastOnePixelZoomRange;
- (char)keepFocusMode;
- (void)keepLastRenderedCIImage:(id)a0;
- (char)needPostNicestDraw;
- (struct CGSize { double x0; double x1; })noHolesZoomRange;
- (void)onAnimatedImageTimer;
- (void)onResize:(id)a0;
- (void)onSliderMouseDown:(id)a0 event:(id)a1;
- (void)onSliderMouseUp:(id)a0 event:(id)a1;
- (struct CGSize { double x0; double x1; })originalCropSize;
- (void)postNicestDraw;
- (void)preloadThread;
- (void)privateSliderDidChanged:(id)a0;
- (id)qcComposition;
- (void)reloadContext;
- (void)renderImageWithCIPipeline:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)resizeComponents;
- (id)resourceImageNamed:(id)a0;
- (float)rotationForEvent:(id)a0;
- (float)rotationGizmoRadius;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })roundSubRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })roundedImageRectWithoutRotations;
- (void)setAllowEdit:(char)a0;
- (void)setAllowRotations:(char)a0;
- (void)setAlphaFrameColor:(id)a0;
- (void)setCenteredVerticalAlignment:(char)a0;
- (void)setConstrainMode:(int)a0;
- (void)setCropBackgroundColor:(id)a0;
- (void)setCropInfo:(id)a0;
- (void)setCropPRS:(id)a0;
- (void)setCropSize:(struct CGSize { double x0; double x1; })a0;
- (void)setCropZoneBehavior:(int)a0;
- (void)setDefaultCropIsZoomToFit:(char)a0;
- (void)setDimmedLayerColor:(id)a0;
- (void)setInformationalAttributedString:(id)a0;
- (void)setInformationalString:(id)a0;
- (void)setKeepFocusMode:(char)a0;
- (void)setQCComposition:(id)a0;
- (void)setShowLoadingIndicator:(char)a0;
- (void)setShowValidateButton:(char)a0;
- (void)setShowZoomMinMax:(char)a0;
- (void)setShowZoomSlider:(char)a0;
- (void)setUseOverlayMask:(char)a0;
- (void)setUsesCircularCrop:(char)a0;
- (void)setZoomValue:(float)a0;
- (char)showLoadingIndicator;
- (char)showValidateButton;
- (char)showZoomMinMax;
- (char)showZoomSlider;
- (float)snapRotation:(float)a0;
- (void)updateComponentState;
- (void)updateFocusPoint;
- (char)usesCircularCrop;
- (float)yTranslation;
- (void)zoomMaxCallback:(id)a0;
- (void)zoomMinCallback:(id)a0;
- (struct CGSize { double x0; double x1; })zoomRange;
- (float)zoomValue;
- (float)zoomValueRelativeToZoomRange;
- (float)zoomValueRelativeToZoomRange:(float)a0;

@end
