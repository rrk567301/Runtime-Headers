@interface QCView : NSView <QCCompositionRenderer> {
    void *_QCViewPrivate;
}

+ (void)initialize;
+ (id)defaultRenderingOptions;
+ (void)setDefaultOptionFlags:(unsigned long long)a0;

- (void)dealloc;
- (void)finalize;
- (unsigned long long)_flags;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setObservationInfo:(void *)a0;
- (id)userInfo;
- (id)attributes;
- (void *)observationInfo;
- (id)backgroundColor;
- (char)drawsBackground;
- (void)otherMouseDown:(id)a0;
- (void)rightMouseDown:(id)a0;
- (void)setAspectRatio:(struct CGSize { double x0; double x1; })a0;
- (void)swipeWithEvent:(id)a0;
- (id)_createLayer;
- (void)_createLayerAndInitialize;
- (void)_finishInitialization;
- (char)acceptsFirstMouse:(id)a0;
- (char)acceptsFirstResponder;
- (struct CGSize { double x0; double x1; })aspectRatio;
- (char)becomeFirstResponder;
- (void)beginGestureWithEvent:(id)a0;
- (void)copy:(id)a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)endGestureWithEvent:(id)a0;
- (void)flagsChanged:(id)a0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)keyDown:(id)a0;
- (void)keyUp:(id)a0;
- (void)lockFocus;
- (void)magnifyWithEvent:(id)a0;
- (void)mouseDown:(id)a0;
- (char)mouseDownCanMoveWindow;
- (void)mouseDragged:(id)a0;
- (void)mouseMoved:(id)a0;
- (void)mouseUp:(id)a0;
- (id)openGLContext;
- (void)otherMouseDragged:(id)a0;
- (void)otherMouseUp:(id)a0;
- (char)resignFirstResponder;
- (void)resizeSubviewsWithOldSize:(struct CGSize { double x0; double x1; })a0;
- (void)rightMouseDragged:(id)a0;
- (void)rightMouseUp:(id)a0;
- (void)rotateWithEvent:(id)a0;
- (void)scrollWheel:(id)a0;
- (void)setBackgroundColor:(id)a0;
- (void)setDrawsBackground:(char)a0;
- (void)setLayer:(id)a0;
- (void)start:(id)a0;
- (void)stop:(id)a0;
- (void)tabletPoint:(id)a0;
- (void)tabletProximity:(id)a0;
- (Class)valueClassForBinding:(id)a0;
- (void)viewDidMoveToWindow;
- (char)wantsBestResolutionOpenGLSurface;
- (void)setAsynchronous:(char)a0;
- (id)inputKeys;
- (id)outputKeys;
- (struct CGSize { double x0; double x1; })pixelAspectRatio;
- (void)setInteractive:(char)a0;
- (char)isFullScreen;
- (void)_windowDidOrderOffScreen:(id)a0;
- (void)_windowWillOrderOnScreen:(id)a0;
- (void)play:(id)a0;
- (void)erase;
- (char)clearsBackground;
- (void)setClearsBackground:(char)a0;
- (void)setOptionFlags:(unsigned long long)a0;
- (unsigned long long)optionFlags;
- (id)_fullScreenWindow;
- (id)createSnapshotImageOfType:(id)a0;
- (char)renderAtTime:(double)a0 arguments:(id)a1;
- (char)setValue:(id)a0 forInputKey:(id)a1;
- (void)_setupRendering;
- (id)_backingLayer;
- (void)resumeRendering;
- (void)__stateUpdated:(id)a0;
- (void)__timebaseChanged:(id)a0;
- (void)_cleanUpOpenGLContext;
- (void)_cleanupRendering;
- (id)_compositionInfo;
- (void)setInputValuesWithPropertyList:(id)a0;
- (char)startRendering:(id)a0;
- (void)_forwardEvent:(id)a0 location:(struct CGPoint { double x0; double x1; })a1;
- (char)_hasSurface;
- (char)_hasTimer;
- (void)_initializeRenderView;
- (struct CGPoint { double x0; double x1; })_normalizedMouseLocationWithOptionalEvent:(id)a0;
- (void)_purgeImageManagerResourcesIfNeeded;
- (void)_reconfigure;
- (void)_releaseRenderView;
- (void)_renderGLContext;
- (void)_renderTimer;
- (void)_setupOpenGLContext;
- (void)_surfaceDidComeBack;
- (void)_surfaceWillGoAway;
- (void)_updateColorSpace;
- (void)_viewGlobalFrameDidChange:(id)a0;
- (void)_windowScreenDidChange:(id)a0;
- (char)autostartsRendering;
- (float)averageFPS;
- (float)averageLoad;
- (unsigned long long)backgroundCheckerboardSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cleanAperture;
- (id)defaultRenderingOptions;
- (id)eraseColor;
- (unsigned long long)eventForwardingMask;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 optionFlags:(unsigned long long)a1;
- (char)isCompositionLoaded;
- (char)isPausedRendering;
- (char)isRendering;
- (char)loadComposition:(id)a0;
- (char)loadComposition:(id)a0 options:(id)a1 stateOK:(char *)a2;
- (char)loadCompositionFromFile:(id)a0;
- (char)loadCompositionFromFile:(id)a0 stateOK:(char *)a1;
- (id)loadedComposition;
- (void)lockGraph;
- (float)maxRenderingFrameRate;
- (double)nextExecutionTime:(double)a0 arguments:(id)a1;
- (id)openGLPixelFormat;
- (id)patch;
- (void)pauseRendering;
- (id)propertyListFromInputValues;
- (char)render:(double)a0 arguments:(id)a1;
- (double)renderTime;
- (id)renderingContext;
- (id)saveComposition:(char)a0;
- (char)saveCompositionToFile:(id)a0;
- (char)saveCompositionToFile:(id)a0 flatten:(char)a1;
- (void)setAutostartsRendering:(char)a0;
- (void)setBackgroundCheckerboardSize:(unsigned long long)a0;
- (void)setCleanAperture:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setEraseColor:(id)a0;
- (void)setEventForwardingMask:(unsigned long long)a0;
- (void)setFullScreen:(id)a0 options:(id)a1;
- (void)setMaxRenderingFrameRate:(float)a0;
- (void)setPatch:(id)a0;
- (void)setPixelAspectRatio:(struct CGSize { double x0; double x1; })a0;
- (void)setRenderTime:(double)a0;
- (id)snapshotImage;
- (char)startRendering;
- (void)stopRendering;
- (void)unloadComposition;
- (void)unlockGraph;
- (id)valueForInputKey:(id)a0;
- (id)valueForOutputKey:(id)a0;
- (id)valueForOutputKey:(id)a0 ofType:(id)a1;

@end
