@class CBDevice, NSObject, NSMutableArray, CBServer, NSString, CBPeripheral, CBWriteRequest, CBReadRequest, NSArray, NSData, CBL2CAPChannel, CBCentralManager, NSUUID;
@protocol OS_xpc_object, OS_dispatch_queue, OS_dispatch_source;

@interface CBConnection : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate, CUReadWriteRequestable, CBPairingAgentDelegate, CUXPCCodable, CBActivatable, CBErrorReporting, CBInterruptable, CBLabelable, CBPairable, CBReadWriteRequestable, CBStateReporting, CBRemotable, CBUseCaseable> {
    char _activateCalled;
    id /* block */ _activateCompletion;
    NSUUID *_blePeerUUID;
    CBCentralManager *_centralManager;
    NSObject<OS_dispatch_source> *_connectTimeoutTimer;
    char _guardConnected;
    char _invalidateCalled;
    char _invalidateDone;
    NSData *_pairingOOBData;
    long long _pairingType;
    CBPeripheral *_peripheral;
    NSObject<OS_dispatch_source> *_readSource;
    unsigned char _readSuspended;
    CBReadRequest *_readRequestCurrent;
    NSMutableArray *_readRequests;
    int _socketFD;
    int _state;
    NSObject<OS_dispatch_source> *_writeSource;
    unsigned char _writeSuspended;
    CBWriteRequest *_writeRequestCurrent;
    NSMutableArray *_writeRequests;
    struct LogCategory { int x0; int x1; char *x2; unsigned int x3; char *x4; char *x5; int x6; struct LogCategory *x7; struct LogOutput *x8; struct LogOutput *x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; char *x14; struct LogCategoryPrivate *x15; } *_ucat;
    NSObject<OS_xpc_object> *_xpcCnx;
}

@property (nonatomic) unsigned int clientID;
@property (nonatomic) double connectedTime;
@property (nonatomic) unsigned int internalFlags;
@property (retain, nonatomic) CBL2CAPChannel *l2capChannel;
@property (retain, nonatomic) CBServer *server;
@property (copy, nonatomic) id /* block */ serverInvalidationHandler;
@property (copy, nonatomic) NSArray *serviceUUIDs;
@property (copy, nonatomic) id /* block */ xpcForwardMessageReceiveHandler;
@property (retain, nonatomic) NSObject<OS_xpc_object> *xpcListenerEndpoint;
@property (copy, nonatomic) id /* block */ xpcSendEventHandler;
@property (nonatomic) unsigned short blePSM;
@property (nonatomic) unsigned int connectionFlags;
@property (nonatomic) long long connectionLatency;
@property (nonatomic) long long connectionScanDutyCycle;
@property (nonatomic) double connectTimeoutSeconds;
@property (retain, nonatomic) CBDevice *peerDevice;
@property (nonatomic) unsigned int serviceFlags;
@property (retain, nonatomic) NSData *tempLTK;
@property (copy, nonatomic) NSString *clientBundleID;
@property (nonatomic) long long clientUseCase;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (copy, nonatomic) id /* block */ invalidationHandler;
@property (copy, nonatomic) id /* block */ errorHandler;
@property (copy, nonatomic) id /* block */ interruptionHandler;
@property (copy, nonatomic) NSString *label;
@property (copy, nonatomic) id /* block */ pairingCompletedHandler;
@property (copy, nonatomic) id /* block */ pairingPromptHandler;
@property (readonly, nonatomic) long long bluetoothState;
@property (copy, nonatomic) id /* block */ bluetoothStateChangedHandler;
@property (retain, nonatomic) CBDevice *remoteDevice;
@property (nonatomic) unsigned int useCase;
@property (copy, nonatomic) NSArray *useCaseClientIDs;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)invalidate;
- (void)_invalidate;
- (void)_invalidated;
- (void)activateWithCompletion:(id /* block */)a0;
- (char)_startConnectingAndReturnError:(id *)a0;
- (void)_abortReadsWithError:(id)a0;
- (void)_abortWritesWithError:(id)a0;
- (void)_activateWithCompletion:(id /* block */)a0;
- (void)_completeReadRequest:(id)a0 error:(id)a1;
- (void)_completeWriteRequest:(id)a0 error:(id)a1;
- (id)_ensureXPCStarted;
- (void)_interrupted;
- (void)_prepareReadRequest:(id)a0;
- (char)_prepareWriteRequest:(id)a0 error:(id *)a1;
- (char)_processReadStatus;
- (void)_processReads:(char)a0;
- (void)_processWrites;
- (void)_reportError:(id)a0;
- (void)_run;
- (char)_runConnectStart;
- (char)_runSetupChannel;
- (char)_setupIOAndReturnError:(id *)a0;
- (char)activateDirectAndReturnError:(id *)a0;
- (void)centralManager:(id)a0 didConnectPeripheral:(id)a1;
- (void)centralManager:(id)a0 didFailToConnectPeripheral:(id)a1 error:(id)a2;
- (void)centralManagerDidUpdateState:(id)a0;
- (void)encodeWithXPCObject:(id)a0;
- (id)initWithXPCObject:(id)a0 error:(id *)a1;
- (void)peripheral:(id)a0 didOpenL2CAPChannel:(id)a1 error:(id)a2;
- (void)readWithRequest:(id)a0;
- (void)writeEndOfDataWithCompletion:(id /* block */)a0;
- (void)writeWithRequest:(id)a0;
- (void)pairingAgent:(id)a0 peerDidCompletePairing:(id)a1;
- (void)pairingAgent:(id)a0 peerDidFailToCompletePairing:(id)a1 error:(id)a2;
- (void)pairingAgent:(id)a0 peerDidRequestPairing:(id)a1 type:(long long)a2 passkey:(id)a3;
- (void)pairingAgent:(id)a0 peerDidUnpair:(id)a1;
- (void)_activateXPCCompleted:(id)a0;
- (void)_activateXPCStart:(char)a0;
- (void)_pairWithOOBData:(id)a0;
- (void)_pairingGenerateOOBDataWithCompletionHandler:(id /* block */)a0;
- (void)_pairingPerformActionBLE:(int)a0 withOptions:(id)a1 completionHandler:(id /* block */)a2;
- (void)_pairingPerformActionClassic:(int)a0 completionHandler:(id /* block */)a1;
- (void)_pairingPerformActionClassic:(int)a0 withOptions:(id)a1 completionHandler:(id /* block */)a2;
- (void)_pairingSetOOBEnabled:(char)a0 completionHandler:(id /* block */)a1;
- (void)_xpcReceivedMessage:(id)a0;
- (void)disconnectWithCompletion:(id /* block */)a0;
- (id)initWithXPCEventRepresentation:(id)a0 error:(id *)a1;
- (void)pairWithOOBData:(id)a0;
- (void)pairingGenerateOOBDataWithCompletionHandler:(id /* block */)a0;
- (void)pairingPerformAction:(int)a0 completionHandler:(id /* block */)a1;
- (void)pairingPerformAction:(int)a0 withOptions:(id)a1 completionHandler:(id /* block */)a2;
- (void)pairingSetOOBEnabled:(char)a0 completionHandler:(id /* block */)a1;
- (void)readWithCBReadRequest:(id)a0;
- (char)updateWithXPCSubscriberInfo:(id)a0;
- (void)writeWithCBWriteRequest:(id)a0;
- (void)xpcForwardMessage:(id)a0;
- (void)xpcReceivedForwardedEvent:(id)a0;
- (void)xpcReceivedMessage:(id)a0;
- (void)xpcReceivedPairingCompleted:(id)a0;
- (void)xpcReceivedPairingPrompt:(id)a0;

@end
