@class VNFgBgE5MLProcess, VNFgBgE5MLInstanceSegmenterConfiguration;

@interface VNFgBgE5MLInstanceSegmenter : NSObject

@property (readonly, nonatomic) VNFgBgE5MLInstanceSegmenterConfiguration *configuration;
@property (readonly, nonatomic) VNFgBgE5MLProcess *process;

+ (id)instanceSegmenterWithConfiguration:(id)a0 error:(id *)a1;
+ (id)instanceSegmenterWithRevision:(long long)a0 error:(id *)a1;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })getDetection:(const void *)a0 mapSize:(struct CGSize { double x0; double x1; })a1 isRotated:(char)a2;
- (id)_initWithConfiguration:(id)a0 e5mlProcess:(id)a1;
- (id)composeInstanceFeatures:(id)a0 miyoshiConfidence:(id)a1 cocoConfidence:(id)a2 predictionIoU:(id)a3 stabilityScore:(id)a4 decodeMatch:(id)a5 isRotated:(char)a6 minimumMaskPixelCount:(unsigned long long)a7 useInteractive:(char)a8;
- (void)computeConfidenceInput:(id)a0 confidence:(float *)a1 withQueryID:(int)a2 category:(int *)a3 invalidCategory:(int)a4;
- (struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *x0; void *x1; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *x0; } x2; })computeSegmentation:(id)a0 withQueryID:(int)a1;
- (struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *x0; void *x1; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *x0; } x2; })computeVectorConnectedComponentSegmentation:(id)a0 minimumMaskPixelCount:(unsigned long long)a1 withQueryID:(int)a2;
- (struct ConnectedComponentResult { struct unique_ptr<unsigned long[], std::default_delete<unsigned long[]>> { struct __compressed_pair<unsigned long *, std::default_delete<unsigned long[]>> { unsigned long long *x0; } x0; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; struct vector<apple::vision::fgbg::ConnectedComponentResult::CCBoundary, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary *x0; struct CCBoundary *x1; struct __compressed_pair<apple::vision::fgbg::ConnectedComponentResult::CCBoundary *, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary *x0; } x2; } x2; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint *x0; struct CGPoint *x1; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint *x0; } x2; } x3; struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *x0; void *x1; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *x0; } x2; } x4; unsigned long long x5; unsigned long long x6; int x7; unsigned long long x8; BOOL x9; BOOL x10; })generateInstanceConnectedComponentsFromMLMultiArray:(id)a0 maskThreshold:(float)a1 queryID:(int)a2 inverseColor:(char)a3;
- (struct ConnectedComponentResult { struct unique_ptr<unsigned long[], std::default_delete<unsigned long[]>> { struct __compressed_pair<unsigned long *, std::default_delete<unsigned long[]>> { unsigned long long *x0; } x0; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; struct vector<apple::vision::fgbg::ConnectedComponentResult::CCBoundary, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary *x0; struct CCBoundary *x1; struct __compressed_pair<apple::vision::fgbg::ConnectedComponentResult::CCBoundary *, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary *x0; } x2; } x2; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint *x0; struct CGPoint *x1; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint *x0; } x2; } x3; struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *x0; void *x1; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *x0; } x2; } x4; unsigned long long x5; unsigned long long x6; int x7; unsigned long long x8; BOOL x9; BOOL x10; })generateInstanceConnectedComponentsFromMask:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })a0;
- (struct ConnectedComponentResult { struct unique_ptr<unsigned long[], std::default_delete<unsigned long[]>> { struct __compressed_pair<unsigned long *, std::default_delete<unsigned long[]>> { unsigned long long *x0; } x0; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; struct vector<apple::vision::fgbg::ConnectedComponentResult::CCBoundary, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary *x0; struct CCBoundary *x1; struct __compressed_pair<apple::vision::fgbg::ConnectedComponentResult::CCBoundary *, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary *x0; } x2; } x2; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint *x0; struct CGPoint *x1; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint *x0; } x2; } x3; struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *x0; void *x1; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *x0; } x2; } x4; unsigned long long x5; unsigned long long x6; int x7; unsigned long long x8; BOOL x9; BOOL x10; })generateInstanceConnectedComponentsFromMask:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })a0 fillGapsAreaRatio:(float)a1;
- (struct ConnectedComponentResult { struct unique_ptr<unsigned long[], std::default_delete<unsigned long[]>> { struct __compressed_pair<unsigned long *, std::default_delete<unsigned long[]>> { unsigned long long *x0; } x0; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; struct vector<apple::vision::fgbg::ConnectedComponentResult::CCBoundary, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary *x0; struct CCBoundary *x1; struct __compressed_pair<apple::vision::fgbg::ConnectedComponentResult::CCBoundary *, std::allocator<apple::vision::fgbg::ConnectedComponentResult::CCBoundary>> { struct CCBoundary *x0; } x2; } x2; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint *x0; struct CGPoint *x1; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint *x0; } x2; } x3; struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *x0; void *x1; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *x0; } x2; } x4; unsigned long long x5; unsigned long long x6; int x7; unsigned long long x8; BOOL x9; BOOL x10; })generateInstanceConnectedComponentsFromMask:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })a0 inverseColor:(char)a1;
- (struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })generateMaskForInstanceFeatures:(id)a0 maskImageType:(int *)a1;
- (struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })generateMaskForLabel:(unsigned long long)a0 fromConnectedComponents:(const void *)a1 error:(id *)a2;
- (struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })generateMaskFromInstanceFeatures:(id)a0 toCategory:(int)a1 drawBox:(char)a2 maskImageType:(int *)a3;
- (void)modifyMask:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)a0 forLabel:(unsigned long long)a1 fromConnectedComponents:(const void *)a2 error:(id *)a3;
- (void)removeIsolatedShadow:(id)a0;

@end
