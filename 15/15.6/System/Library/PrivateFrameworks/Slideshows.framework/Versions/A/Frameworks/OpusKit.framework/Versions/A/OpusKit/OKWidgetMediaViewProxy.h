@class OKWidgetMediaVideoPlayerView, NSString, OFNSButton, NSURL, OFNSImageView, AVPlayer, OFNSView, OKAudioDucker, NSPanGestureRecognizer, AVAsset;

@interface OKWidgetMediaViewProxy : OKWidgetView <OKViewControllerAudioSupport, NSGestureRecognizerDelegate, OKWidgetMediaViewProxyExports> {
    OFNSButton *_videoPlayButton;
    OFNSImageView *_thumbnailView;
    struct NSEdgeInsets { double top; double left; double bottom; double right; } _mediaEdgeInsets;
    AVAsset *_videoAsset;
    NSURL *_videoURL;
    AVPlayer *_videoPlayer;
    OKWidgetMediaVideoPlayerView *_videoPlayerView;
    OKAudioDucker *_audioDucker;
    id _timeObserver;
    char _isObservingVideoStatus;
    char _isObservingVideoReadyToDisplay;
    char _autoplay;
    char _loop;
    char _didPlayInteractively;
    char _playRequested;
    float _requiredDuckLevel;
    float _volume;
    NSString *_audioTrackID;
    char _canStartCouchPotatoPlayback;
    struct CGPoint { double x; double y; } _offset;
    struct CGPoint { double x; double y; } _originalOffsetWhilePanning;
    double _scale;
    char _editable;
    char _shouldFitRegionOfInterest;
    OFNSView *_faceRect;
    char _is4KVideo;
    NSPanGestureRecognizer *_panGestureRecognizer;
}

@property (nonatomic) char shouldPlayVideoWhenAvailable;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)setupJavascriptContext:(id)a0;
+ (char)shouldDrawRegionOfInterest;
+ (id)supportedSettings;

- (void)dealloc;
- (id)valueForUndefinedKey:(id)a0;
- (double)duration;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (float)contentAspectRatio;
- (double)currentTime;
- (char)gestureRecognizerShouldBegin:(id)a0;
- (void)layoutSubviews;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })thumbnailRect;
- (void)setVideoURL:(id)a0;
- (void)prepareForReload;
- (char)prepareForDisplay:(char)a0;
- (void)pauseVideo:(id)a0;
- (void)setVideoAsset:(id)a0;
- (void)instantPause;
- (void)instantResume;
- (void)handlePanGesture:(id)a0;
- (void)playerItemDidReachEnd:(id)a0;
- (id)initWithWidget:(id)a0;
- (char)settingEditable;
- (void)setSettingLoop:(char)a0;
- (void)_cancelThumbnailOperations;
- (id)_contentViewToFocus;
- (void)_playVideo:(id)a0;
- (void)_reloadThumbnailContent;
- (void)_reloadThumbnailContent:(char)a0 loadVideo:(char)a1;
- (void)_switchToThumbnailView;
- (void)_switchToVideoPlayerView;
- (void)_unloadThumbnailContent;
- (void)beginDuckingToLevel:(double)a0 fadeDuration:(double)a1;
- (void)beginFadingWithDuration:(double)a0;
- (void)calculateOffsetForRegionOfInterest;
- (char)canStartCouchPotatoPlayback;
- (void)drawRegionOfInterestContainerBounds;
- (void)endDucking;
- (void)endFading;
- (id)layoutSettingsKeys;
- (void)playVideo:(id)a0;
- (void)prepareForRefresh;
- (char)prepareForUnload:(char)a0;
- (char)prepareForWarmup:(char)a0;
- (double)requiredDuckLevel;
- (void)resetVideo:(char)a0;
- (void)setAntialiasing:(char)a0;
- (void)setPlaybackAudioVolume:(double)a0;
- (void)setSettingAudioRequiredDuckLevel:(float)a0;
- (void)setSettingAudioVolume:(float)a0;
- (void)setSettingAutoplay:(char)a0;
- (void)setSettingContentMode:(long long)a0;
- (void)setSettingEditable:(char)a0;
- (void)setSettingMediaEdgeInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)setSettingOffset:(struct CGPoint { double x0; double x1; })a0;
- (void)setSettingScale:(double)a0;
- (void)setSettingShouldFitRegionOfInterest:(char)a0;
- (void)setSettingUrl:(id)a0;
- (long long)settingContentMode;
- (char)settingLoop;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })settingMediaEdgeInsets;
- (id)settingObjectForKey:(id)a0;
- (struct CGPoint { double x0; double x1; })settingOffset;
- (double)settingScale;
- (char)settingShouldFitRegionOfInterest;
- (id)settingUrl;
- (char)settingsAutoplay;
- (void)updateOffset;

@end
