@class NSLock, NSString, MCSlide, MCAnimationPathKeyframed, NSInvocationOperation, MRImage, NSDictionary, MRFrame, MRLayerEffect, MRAssetPlayer, MRLayer, MRAudioDucker;

@interface MRSlideProvider : NSObject <MRLoadable, MRRenderable, MRAssetPlayerDelegate> {
    NSInvocationOperation *mPreloadOperation;
    NSLock *mPreloadOperationLock;
    MRImage *mOriginalImage;
    MRImage *mOutputImage;
    MRLayerEffect *mEffectLayer;
    int mKenBurnsType;
    MRAssetPlayer *mSlidePlayer;
    MRLayer *mSlideLayer;
    unsigned long long mSlideIndex;
    struct CGSize { double width; double height; } mImageSize;
    struct CGSize { double width; double height; } mLastImageSize;
    double mLastTime;
    struct CGSize { double width; double height; } mLastDaSize;
    unsigned int mFlags;
    double _centerAnimationPathTriggerTime;
    double _scaleAnimationPathTriggerTime;
    double _rotationAnimationPathTriggerTime;
    double _timeToPreloadFor;
    MRAudioDucker *_audioDucker;
}

@property (nonatomic) struct CGSize { double width; double height; } defaultSize;
@property (nonatomic) char wantsMonochromatic;
@property (nonatomic) char wantsMipmap;
@property (nonatomic) char isStill;
@property (nonatomic) float stillTime;
@property (copy, nonatomic) NSString *imageSizeScript;
@property (retain, nonatomic) NSDictionary *effectAttributes;
@property (copy, nonatomic) NSString *showTimeScript;
@property (nonatomic) char slideIsReadonly;
@property (nonatomic) char isMuted;
@property (readonly) char hasFilters;
@property (nonatomic) double showTime;
@property (nonatomic) double showDuration;
@property (readonly) char canPlay;
@property (nonatomic) char isPlaying;
@property (nonatomic) double time;
@property (nonatomic) struct CGSize { double width; double height; } sizeFactor;
@property int defaultKenBurnsType;
@property (retain, nonatomic) MCSlide *slide;
@property (copy, nonatomic) NSString *assetPath;
@property (nonatomic) struct CGPoint { double x; double y; } center;
@property (nonatomic) double scale;
@property (nonatomic) double rotation;
@property (retain, nonatomic) MCAnimationPathKeyframed *centerAnimationPath;
@property (retain, nonatomic) MCAnimationPathKeyframed *scaleAnimationPath;
@property (retain, nonatomic) MCAnimationPathKeyframed *rotationAnimationPath;
@property (copy, nonatomic) NSString *filterID;
@property (nonatomic) char needsToUpdateLayout;
@property (readonly) MRFrame *frame;
@property (readonly) struct CGSize { double width; double height; } requestedSize;
@property (readonly) double imageAspectRatio;
@property (readonly) double slideStartTime;
@property (readonly) double slideDuration;
@property (readonly) char isLoaded;
@property id playerHint;
@property (readonly, nonatomic) char isNative3D;
@property (readonly, nonatomic) char isOpaque;
@property (readonly, nonatomic) char isAlphaFriendly;
@property (readonly, nonatomic) char isInfinite;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (void)cleanup;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)unload;
- (void)cancelLoading;
- (char)beginLiveUpdate;
- (void)_computeImageSizeInContext:(id)a0 withArguments:(id)a1;
- (void)_unloadIfNotUpdatingLive;
- (void)applyKenBurnsAtTime:(double)a0 withTargetSize:(struct CGSize { double x0; double x1; })a1 kenBurnsType:(int)a2 translation:(struct CGPoint { double x0; double x1; } *)a3 scale:(double *)a4 rotation:(double *)a5;
- (id)currentSlideInfo;
- (char)endLiveUpdate;
- (struct CGSize { double x0; double x1; })framedImageSizeAtIndex:(unsigned int)a0 aspectRatio:(float)a1;
- (void)imageIsAvailableFromAssetPlayer:(id)a0;
- (id)initWithEffectLayer:(id)a0;
- (char)isLoadedForTime:(double)a0;
- (void)loadForTime:(double)a0 inContext:(id)a1 withArguments:(id)a2 now:(char)a3;
- (void)loadWithArguments:(id)a0;
- (id)patchworkAtTime:(double)a0 inContext:(id)a1 withArguments:(id)a2;
- (char)prerenderForTime:(double)a0 inContext:(id)a1 withArguments:(id)a2;
- (void)printFlags;
- (void)renderAtTime:(double)a0 inContext:(id)a1 withArguments:(id)a2;
- (id)retainedByUserRenderedImageAtTime:(double)a0 inContext:(id)a1 withArguments:(id)a2;
- (struct CGSize { double x0; double x1; })unframedImageSizeForAspectRatio:(float)a0 frameID:(id)a1 andFrameAttributes:(id)a2 atIndex:(unsigned int)a3 framedImageSize:(struct CGSize { double x0; double x1; } *)a4;
- (void)updateShowTimeAndDurationWithPlugTiming:(id)a0 andAttributes:(id)a1;
- (char)updateStuffWithAssetManager:(id)a0;

@end
