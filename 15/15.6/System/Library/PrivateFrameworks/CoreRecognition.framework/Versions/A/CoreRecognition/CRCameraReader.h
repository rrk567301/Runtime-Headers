@class NSMutableDictionary, DiagnosticHUDLayer, NSDate, NSDictionary, NSObject, CRMLCCModel, NSMutableArray, CRPollingTimer, CRBoxLayer, NSString, CRAlignmentLayer, NSPointerArray, CRImageReader, NSArray, CATextLayer, NSCache;
@protocol CRCameraReaderDelegate, OS_dispatch_semaphore, OS_dispatch_queue, CRCaptureSessionManager;

@interface CRCameraReader : NSViewController <AVCaptureVideoDataOutputSampleBufferDelegate, CALayerDelegate>

@property struct __CVBuffer { } *correctedCardBuffer;
@property char configPresentCentered;
@property double configDemoSpeed;
@property (retain) CRBoxLayer *boxLayer;
@property (retain) DiagnosticHUDLayer *diagnosticHUDLayer;
@property (retain) NSArray *foundPoints;
@property (retain) NSString *foundCode;
@property char isQRCode;
@property (retain) NSString *previousCode;
@property struct { long long value; int timescale; unsigned int flags; long long epoch; } sessionStarted;
@property struct { long long value; int timescale; unsigned int flags; long long epoch; } pointsFound;
@property (retain) NSDate *codePresented;
@property char codeInverted;
@property char didSendEndOrCancel;
@property char didSendFindBox;
@property struct { long long value; int timescale; unsigned int flags; long long epoch; } lastSendFindBox;
@property unsigned long long imagesToCapture;
@property char configUseJPEGForColor;
@property (retain) NSPointerArray *captureBuffer;
@property (retain) CRPollingTimer *boxLayerHideTimer;
@property char configUseFastScanning;
@property struct opaqueCMSampleBuffer { } *lastBuffer;
@property (retain) NSObject<OS_dispatch_semaphore> *processingImage;
@property (retain) NSMutableDictionary *cardNumberCounts;
@property (retain) NSMutableDictionary *cardholderCounts;
@property (retain) NSMutableDictionary *expirationDateCounts;
@property (retain) NSMutableDictionary *pinnedFoundInfo;
@property struct { long long value; int timescale; unsigned int flags; long long epoch; } lastFieldFoundTime;
@property (retain) CRAlignmentLayer *alignmentLayer;
@property (retain) NSObject<OS_dispatch_queue> *processingQueue;
@property (retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property (weak) id<CRCameraReaderDelegate> callbackDelegate;
@property char previousIdleState;
@property (retain) NSMutableArray *dateCutRects;
@property (retain) NSMutableArray *nameCutRects;
@property (retain) NSDictionary *contactsCache;
@property (retain) NSCache *previousContactMatches;
@property char sessionIsStopping;
@property (retain) CRMLCCModel *flatPrintedModel;
@property (retain) CRMLCCModel *embossedNumberModel;
@property (retain) CRMLCCModel *embossedExpirationModel;
@property (retain) CRMLCCModel *embossedCardholderModel;
@property (retain) NSMutableArray *cardBlurValues;
@property (retain, nonatomic) NSMutableDictionary *optionsDictionary;
@property (retain, nonatomic) CRImageReader *ocrImageReader;
@property (retain, nonatomic) CATextLayer *overlayTextLayer;
@property (retain, nonatomic) NSMutableArray *textDetectorRTFeedback;
@property (retain) NSString *ocrOverlayFontName;
@property float ocrOverlayBackgroundOpacity;
@property char continousMode;
@property (getter=isCaptureMode) char captureMode;
@property unsigned long long captureCount;
@property double sessionTimeout;
@property long long whiteBalanceMode;
@property long long focusMode;
@property long long exposureMode;
@property long long torchMode;
@property (copy) NSString *cameraMode;
@property long long cameraPosition;
@property char showDiagnosticHUD;
@property (retain) id<CRCaptureSessionManager> sessionManager;
@property (copy) NSArray *outputObjectTypes;
@property char hidePlacementText;
@property (readonly) long long currentCameraIdentifier;
@property char enableAltIDCardScan;
@property float borderPaddingIDCard;
@property char enableManualIDCapture;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })aspectRatioPaddedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 expectedWidth:(double)a1 height:(double)a2 orientation:(unsigned int)a3;
+ (id)extractCardImage:(id)a0 fromPixelBuffer:(struct __CVBuffer { } *)a1 withCardBuffer:(struct __CVBuffer { } *)a2 cameraIntrinsicData:(id)a3;
+ (id)extractCardImage:(id)a0 fromPixelBuffer:(struct __CVBuffer { } *)a1 withCardBuffer:(struct __CVBuffer { } *)a2 withPoints:(id)a3 cameraIntrinsicData:(id)a4;
+ (id)extractCardImage:(id)a0 fromPixelBuffer:(struct __CVBuffer { } *)a1 withCardBuffer:(struct __CVBuffer { } *)a2 withPoints:(id)a3 cameraIntrinsicData:(id)a4 padding:(float)a5 inputOrientation:(int)a6;
+ (id)findCodeInImage:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })a0 maxStage:(unsigned long long)a1;
+ (id)findCodeInImage:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })a0 maxStage:(unsigned long long)a1 outputObjectTypes:(id)a2;
+ (id)findCodeInImage:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })a0 maxStage:(unsigned long long)a1 roi:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
+ (id)findCodeInImage:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })a0 maxStage:(unsigned long long)a1 roi:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 outputObjectTypes:(id)a3;
+ (void)loadFonts;
+ (unsigned long long)supportedCameraCount;
+ (unsigned long long)supportedCameraCountForTypes:(id)a0;
+ (id)targetRectsForImage:(id)a0;
+ (id)textFeatureWithVNTextObservation:(id)a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })uniformPadRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 widthPadding:(float)a1 heightPadding:(float)a2 width:(double)a3 height:(double)a4;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)setDelegate:(id)a0;
- (id)initWithOptions:(id)a0;
- (void)start;
- (void)cancel;
- (id)initWithNibName:(id)a0 bundle:(id)a1;
- (void)loadView;
- (void)viewDidDisappear;
- (void)viewWillAppear;
- (void)stopSession;
- (void)viewDidLayoutSubviews;
- (void)updateContactsCache:(id)a0;
- (void)startSession;
- (void)captureOutput:(id)a0 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { } *)a1 fromConnection:(id)a2;
- (id)currentDeviceID;
- (id)findObjects:(id)a0 inImage:(id)a1 properties:(id)a2;
- (id)initWithNibName:(id)a0 bundle:(id)a1 options:(id)a2;
- (void)removeLayerTree;
- (void)switchToCamera:(long long)a0;
- (void)animatePresentCodeAtFrameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (id)attributedStringWithFrame:(struct CGSize { double x0; double x1; })a0 withFont:(id)a1 withString:(id)a2 color:(struct CGColor { } *)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boxLayerPresentationFrame;
- (id)cameraIntrinsicDataForSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 width:(unsigned long long)a1 height:(unsigned long long)a2;
- (void)captureImage;
- (void)captureImageFromSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (void)createCorrectedCardBuffer;
- (struct __CVBuffer { } *)createFastAccessPixelBufferWithSize:(struct CGSize { double x0; double x1; })a0 videoFormat:(int)a1;
- (id)createTextLayerForRecognizedObject:(id)a0;
- (id)extractFinalDigitStringFromNumbers:(id)a0;
- (id)findCCExpDateInImageEmbossed:(id)a0;
- (id)findCCNameInImageEmbossed:(id)a0;
- (id)findCCNumberInImageEmbossed:(id)a0;
- (id)findCCNumberInImageEmbossed:(id)a0 withFinalDigit:(id)a1;
- (id)findCCObjectEmbossed:(id)a0 inImage:(id)a1 forRect:(id)a2;
- (id)findCCObjectsEmbossed:(id)a0 inImage:(id)a1 numberRects:(id)a2 nameRects:(id)a3 dateRects:(id)a4;
- (id)findCCResultsInImageFlat:(id)a0 usingTextFeatures:(id)a1 invert:(char)a2;
- (void)findCodeInSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (void)findIDObjects:(id)a0 inPixelBuffer:(struct __CVBuffer { } *)a1 cameraIntrinsicData:(id)a2 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a3;
- (void)findOCRTextObjects:(id)a0 inPixelBuffer:(struct __CVBuffer { } *)a1 attachments:(id)a2 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a3;
- (void)findObjects:(id)a0 inPixelBuffer:(struct __CVBuffer { } *)a1 cameraIntrinsicData:(id)a2 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a3;
- (id)findObjectsEmbossed:(id)a0 inImage:(id)a1;
- (id)findObjectsFlat:(id)a0 inImage:(id)a1 numberRects:(id)a2 invert:(char)a3;
- (void)flashScreenAndPlayCaptureSound;
- (id)generateStringFromDate:(id)a0;
- (id)getCorrectedIDImageFromAuxiliaryPoints:(id)a0 fromPixelBuffer:(struct __CVBuffer { } *)a1 orientation:(unsigned int)a2;
- (unsigned long long)getFirstTimeFrameIndexForPinnedField:(id)a0;
- (void)hideBoxLayer;
- (void)loadModels;
- (void)mergeInfo:(id)a0 intoFindInfo:(id)a1;
- (void)orientationDidChange:(id)a0;
- (void)pauseBoxLayerHideTimer;
- (void)primeBoxLayerHideTimerWithFrameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (void)releaseCorrectedCardBuffer;
- (void)reportAcceptedString:(id)a0 forOutput:(id)a1 withClientID:(id)a2;
- (void)sendDidCancel;
- (void)sendDidDisplayMessageStyle:(long long)a0;
- (void)sendDidEndAnimation;
- (void)sendDidEndWithError:(id)a0;
- (void)sendDidEndWithErrorDomain:(id)a0 code:(long long)a1 userInfo:(id)a2;
- (void)sendDidEndWithInfo:(id)a0;
- (void)sendDidFindTarget:(id)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)sendDidRecognizeNewObjects:(id)a0;
- (void)sendProvideOverlayObjects:(id)a0;
- (void)setFirstTimeFrameIndexForPinnedField:(id)a0;
- (void)setupInitialLayerConfiguration;
- (void)showMessage:(id)a0 color:(id)a1 style:(long long)a2 duration:(double)a3;
- (void)showTextDetectorObjects:(id)a0;
- (void)switchToCameraWithDeviceID:(id)a0;
- (void)toggleCamera;
- (void)updatePinnedInfoFrameIndex;

@end
