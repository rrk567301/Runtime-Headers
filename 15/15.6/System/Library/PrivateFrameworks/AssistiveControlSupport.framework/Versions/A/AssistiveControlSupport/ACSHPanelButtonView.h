@class NSView, NSProgressIndicator, NSArray, ACSHTextField, CATextLayer, NSString, NSColor, NSImage, ACSHPanelButton, NSImageView, NSNumber;

@interface ACSHPanelButtonView : ACSHPanelElementView

@property (class, readonly, nonatomic) NSArray *_resizingFontSizesInDescendingOrder;

@property (weak, nonatomic) ACSHPanelButton *button;
@property (retain, nonatomic) NSView *_textViewsContainerView;
@property (retain, nonatomic) NSView *_backgroundView;
@property (retain, nonatomic) NSImageView *_imageView;
@property (retain, nonatomic) NSProgressIndicator *_progressIndicatorView;
@property (retain, nonatomic) ACSHTextField *_primaryTextView;
@property (retain, nonatomic) ACSHTextField *_secondaryTextView;
@property (retain) CATextLayer *_textLayer;
@property (retain, getter=_displayImage, setter=_setDisplayImage:) NSImage *_displayImage;
@property (nonatomic) char _hasExtraRect;
@property (nonatomic) struct CGSize { double width; double height; } _extraRectRatio;
@property (readonly, nonatomic) char deadKey;
@property (readonly, nonatomic) NSString *_currentToolTip;
@property (copy) NSString *_accessibilityTitle;
@property (readonly, nonatomic) NSNumber *_accessibilityValue;
@property (readonly, nonatomic) NSString *_accessibilityValueDescription;
@property (retain, nonatomic) NSString *_currentBackgroundResourceName;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _currentBackgroundRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _currentBackgroundExtraRect;
@property (nonatomic) double _currentBackgroundScaleFactor;
@property (readonly, nonatomic) unsigned long long _panelButtonViewState;
@property (readonly, nonatomic) double _scaleFactorToDrawAt;
@property (readonly, nonatomic) double _baseTextFrameInset;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _buttonBackgroundFrame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _textFrameForDrawing;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _insetTextFrame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _imageFrame;
@property (readonly, nonatomic) char _hasCustomTextFrame;
@property (readonly, nonatomic) char _shouldShowTextLabel;
@property (nonatomic) char _liveResizing;
@property (readonly, copy, nonatomic) NSString *_displayImageSymbolName;
@property (nonatomic) char depressed;
@property (nonatomic) char locked;
@property (nonatomic) char forceDeadKeyDrawing;
@property (nonatomic) char toggleOn;
@property (retain, nonatomic) NSImage *displayImage;
@property (retain, nonatomic) NSColor *displayColor;
@property (nonatomic) unsigned long long textDisplayPosition;

+ (void)initialize;
+ (id)_descriptionForPanelButtonViewState:(unsigned long long)a0;

- (id)description;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)setHighlighted:(char)a0;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (char)accessibilityIsAttributeSettable:(id)a0;
- (char)accessibilityIsIgnored;
- (void)accessibilitySetValue:(id)a0 forAttribute:(id)a1;
- (unsigned long long)draggingEntered:(id)a0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (char)performDragOperation:(id)a0;
- (void)resizeSubviewsWithOldSize:(struct CGSize { double x0; double x1; })a0;
- (void)setSelected:(char)a0;
- (void)updateLayer;
- (id)view:(id)a0 stringForToolTip:(long long)a1 point:(struct CGPoint { double x0; double x1; })a2 userData:(void *)a3;
- (void)viewDidEndLiveResize;
- (void)viewDidMoveToWindow;
- (void)viewWillDraw;
- (void)viewWillStartLiveResize;
- (char)wantsUpdateLayer;
- (void)clearImageCache;
- (id)displayImage;
- (id)_accessibilityDescription;
- (void)_updateFrames;
- (void)_updateToolTip;
- (char)_shouldDisplaySecondaryKeyText:(id)a0;
- (void)_accessibilityValueChanged;
- (struct CGImage { } *)_copyImageForResource:(id)a0;
- (struct CGImage { } *)_copyImageForResource:(id)a0 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 extraRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)_currentAccessibilityTitle;
- (void)_drawingAttributesForSecondary:(char)a0 returningTextColorAttribute:(unsigned long long *)a1 iconColorAttribute:(unsigned long long *)a2 background:(id *)a3;
- (id)_foregroundColorForColorAttribute:(unsigned long long)a0 textNotImage:(char)a1;
- (void)_panelButtonViewStateChanged;
- (void)_resizeTextToFit:(id)a0;
- (id)_symbolImageForImageFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 weight:(double)a1;
- (id)_textFontForText:(id)a0 baseFontSize:(double)a1 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_updateAccessibilityTitle;
- (void)_updateButtonBackground;
- (void)_updateDisplayColor;
- (void)_updateDisplayImage;
- (void)_updateDisplayText;
- (void)_updateDisplayTextPosition;
- (id)_validateDisplayText:(id)a0;
- (void)clearAndUpdateDisplayImage;
- (id)imageIdentifierToDisplayReturningFunctionKey:(char *)a0;
- (void)initView;
- (void)inputMethodWasUpdated;
- (void)resetLook;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })resizeHandleRect;
- (char)setImage:(id)a0 name:(id)a1;
- (void)setPanelElement:(id)a0 animated:(char)a1;
- (void)setSemiHighlighted:(char)a0;
- (struct CGSize { double x0; double x1; })sizeForFittingDisplayText;
- (id)snapshotFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)supportsResizeHandleDrawing;

@end
