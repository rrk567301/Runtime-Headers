@class NSMutableDictionary, NSURL, _DASAssertion, NSDate, NSDictionary, NSUUID, NSObject, _DASFileProtection, NSMutableArray, NSString, NSSet, NSArray, _DASFastPass, NSProgress;
@protocol OS_dispatch_queue;

@interface _DASActivity : NSObject <NSCopying, NSSecureCoding> {
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _userInfoLock;
    NSMutableDictionary *_userInfo;
}

@property (class, readonly) char supportsSecureCoding;

@property (nonatomic) char darkWakeEligible;
@property (nonatomic) char beforeDaysFirstActivity;
@property (nonatomic) char beforeApplicationLaunch;
@property (nonatomic) double interval;
@property (copy, nonatomic) NSString *groupName;
@property (copy, nonatomic) NSString *serviceName;
@property (copy, nonatomic) NSString *rateLimitConfigurationName;
@property (retain, nonatomic) NSArray *schedulerRecommendedApplications;
@property (copy, nonatomic) NSString *launchReason;
@property (copy, nonatomic) NSString *extensionIdentifier;
@property (nonatomic) char supportsAnyApplication;
@property (nonatomic) char requestsApplicationLaunch;
@property (nonatomic) char requestsExtensionLaunch;
@property (nonatomic) char shouldBePersisted;
@property (nonatomic) char requestsNewsstandLaunch;
@property (nonatomic) char requiresSignificantUserInactivity;
@property (nonatomic) char hasMagneticSensitivity;
@property (nonatomic) char allowsCompanionExpensiveNetworking;
@property (nonatomic) char isMLBackgroundActivity;
@property (nonatomic) char shouldWakeDevice;
@property (nonatomic) char backlogged;
@property (nonatomic) char runOnAppForeground;
@property (nonatomic) char runWhenAppLaunchUnlikely;
@property (nonatomic) char isContactTracingBackgroundActivity;
@property (nonatomic) char deferred;
@property (nonatomic) char userRequestedBackupTask;
@property (nonatomic) char blockRebootActivitiesForSU;
@property (nonatomic) char useStatisticalModelForTriggersRestart;
@property (copy, nonatomic) NSArray *featureCodes;
@property (copy, nonatomic) _DASFastPass *fastPass;
@property (copy, nonatomic) NSSet *producedResultIdentifiers;
@property (copy, nonatomic) NSSet *dependencies;
@property (copy, nonatomic) NSString *identifier;
@property (nonatomic) double predictedOptimalScore;
@property (retain) NSDate *predictedOptimalStartDate;
@property (nonatomic) double lastComputedScore;
@property (retain) NSDate *lastScored;
@property (retain, nonatomic) NSDate *submitDate;
@property (retain) NSDate *startDate;
@property (nonatomic) char suspendable;
@property (retain) NSDate *suspendRequestDate;
@property (retain, nonatomic) NSMutableArray *limitationResponse;
@property (nonatomic) char bypassesPredictions;
@property (nonatomic) double percentCompleted;
@property (retain) NSDictionary *startConditions;
@property (retain, nonatomic) NSMutableDictionary *policyResponseMetadata;
@property unsigned long long lastDenialValue;
@property (nonatomic) char wasForceRun;
@property (nonatomic) int pid;
@property (retain, nonatomic) NSString *clientName;
@property (nonatomic) long long completionStatus;
@property (nonatomic) long long urgencyLevel;
@property (retain, nonatomic) NSString *widgetBudgetID;
@property (retain, nonatomic) NSString *widgetID;
@property (retain, nonatomic) NSString *remoteDevice;
@property (nonatomic) char requiresRemoteDeviceWake;
@property (retain, nonatomic) NSString *activityType;
@property (nonatomic) long long staticPriority;
@property (nonatomic) long long maximumRuntime;
@property (retain, nonatomic) NSURL *applicationURL;
@property (retain, nonatomic) NSString *clientProvidedIdentifier;
@property (retain, nonatomic) NSDate *clientProvidedStartDate;
@property (retain, nonatomic) NSString *clientProvidedTitle;
@property (retain, nonatomic) NSString *clientProvidedReason;
@property (readonly, nonatomic) NSString *clientProvidedIconBundleIdentifier;
@property (copy, nonatomic) id /* block */ completionHandler;
@property (retain, nonatomic) NSProgress *progress;
@property (nonatomic) char dataBudgeted;
@property (nonatomic) char budgeted;
@property (retain, nonatomic) NSString *clientDataBudgetName;
@property (nonatomic) unsigned long long budgetingToken;
@property (retain, nonatomic) _DASAssertion *assertion;
@property (nonatomic) long long preClearedMode;
@property (nonatomic) char dependenciesPreCleared;
@property (nonatomic) char requiresBuddyComplete;
@property (nonatomic) unsigned int userIdentifier;
@property (retain) NSDate *endTime;
@property (retain, nonatomic) NSUUID *uuid;
@property (copy, nonatomic) NSString *name;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *handlerQueue;
@property (copy, nonatomic) id /* block */ startHandler;
@property (copy, nonatomic) id /* block */ suspendHandler;
@property (copy, nonatomic) _DASFileProtection *fileProtection;
@property (nonatomic) unsigned long long schedulingPriority;
@property (retain) NSDate *startAfter;
@property (retain) NSDate *startBefore;
@property (nonatomic) char cancelAfterDeadline;
@property (nonatomic) unsigned long long duration;
@property (nonatomic) char requiresNetwork;
@property (nonatomic) unsigned long long transferSize;
@property (nonatomic) unsigned long long uploadSize;
@property (nonatomic) unsigned long long downloadSize;
@property (nonatomic) char isUpload;
@property (nonatomic) char requiresInexpensiveNetworking;
@property (nonatomic) char requiresUnconstrainedNetworking;
@property (nonatomic) char cpuIntensive;
@property (nonatomic) char memoryIntensive;
@property (nonatomic) char diskIntensive;
@property (nonatomic) char aneIntensive;
@property (nonatomic) char gpuIntensive;
@property (nonatomic) char requiresDeviceInactivity;
@property (nonatomic) char requiresPlugin;
@property (nonatomic) char afterUserIsInactive;
@property (nonatomic) char beforeUserIsActive;
@property (nonatomic) char triggersRestart;
@property (nonatomic) char preventDeviceSleep;
@property (nonatomic) long long targetDevice;
@property (retain, nonatomic) NSArray *relatedApplications;
@property (retain, nonatomic) NSArray *involvedProcesses;
@property (nonatomic) long long motionState;
@property (copy, nonatomic) NSDictionary *userInfo;
@property (retain, nonatomic) NSString *bundleId;
@property (nonatomic) char delayedStart;
@property (copy, nonatomic) NSString *diskVolume;

+ (void)initialize;
+ (id)activityWithName:(id)a0 priority:(unsigned long long)a1 duration:(unsigned long long)a2 startingAfter:(id)a3 startingBefore:(id)a4;
+ (id)extensionLaunchActivityWithName:(id)a0 priority:(unsigned long long)a1 forApplication:(id)a2 withReason:(id)a3 duration:(unsigned long long)a4 startingAfter:(id)a5 startingBefore:(id)a6;
+ (id)activityWithName:(id)a0 priority:(unsigned long long)a1 duration:(unsigned long long)a2 startingAfter:(id)a3 startingBefore:(id)a4 userInfo:(id)a5;
+ (id)anyApplicationActivityWithName:(id)a0 priority:(unsigned long long)a1 duration:(unsigned long long)a2 startingAfter:(id)a3 startingBefore:(id)a4 limitedToApplications:(id)a5;
+ (id)applicationLaunchActivityWithName:(id)a0 priority:(unsigned long long)a1 forApplication:(id)a2 withReason:(id)a3 duration:(unsigned long long)a4 startingAfter:(id)a5 startingBefore:(id)a6;
+ (unsigned long long)cleanDuration:(unsigned long long)a0;
+ (unsigned long long)cleanSchedulingPriority:(unsigned long long)a0;
+ (unsigned long long)cleanTransferSize:(unsigned long long)a0;
+ (id)extensionLaunchActivityWithName:(id)a0 priority:(unsigned long long)a1 forApplication:(id)a2 forExtensionIdentifier:(id)a3 withReason:(id)a4 duration:(unsigned long long)a5 startingAfter:(id)a6 startingBefore:(id)a7;
+ (id)extensionLaunchActivityWithName:(id)a0 priority:(unsigned long long)a1 forExtensionIdentifier:(id)a2 withReason:(id)a3 duration:(unsigned long long)a4 startingAfter:(id)a5 startingBefore:(id)a6;
+ (id)launchForRemoteNotificationWithTopic:(id)a0 withPayload:(id)a1 highPriority:(char)a2;
+ (id)launchWithTopic:(id)a0 forReason:(id)a1 withPayload:(id)a2 highPriority:(char)a3;
+ (id)networkingActivityWithName:(id)a0 priority:(unsigned long long)a1 downloadSize:(unsigned long long)a2 uploadSize:(unsigned long long)a3 expensiveNetworkingAllowed:(char)a4 startingAfter:(id)a5 startingBefore:(id)a6;
+ (id)networkingActivityWithName:(id)a0 priority:(unsigned long long)a1 transferSize:(unsigned long long)a2 isUpload:(char)a3 expensiveNetworkingAllowed:(char)a4 startingAfter:(id)a5 startingBefore:(id)a6;
+ (id)prettySchedulingPriorityDescription:(unsigned long long)a0;
+ (id)sharedDateFormatter;
+ (id)validClassesForUserInfoSerialization;
+ (id)validateBGTaskRequestWithActivity:(id)a0;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)debugDescription;
- (id)description;
- (unsigned long long)hash;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)shortDescription;
- (char)dataBudgetingEnabled;
- (id)nameString;
- (char)isDiskIntensive;
- (char)allowsUnrestrictedBackgroundLaunches;
- (char)boolForUserInfoKey:(id)a0;
- (char)ckPushContentMatches:(id)a0;
- (double)compatibilityWith:(id)a0;
- (id)dependencyForIdentifier:(id)a0;
- (char)hasManyConstraints;
- (id)initWithName:(id)a0 priority:(unsigned long long)a1 duration:(unsigned long long)a2 startingAfter:(id)a3 startingBefore:(id)a4 userInfo:(id)a5;
- (char)isANEIntensive;
- (char)isBackgroundTaskActivity;
- (char)isCPUIntensive;
- (char)isContinuedProcessingTask;
- (char)isGPUIntensive;
- (char)isIdenticalLaunchTo:(id)a0;
- (char)isIntensive;
- (char)isMemoryIntensive;
- (char)isSilentPush;
- (char)isSoftwareUpdateActivity;
- (char)keepsPrevious;
- (char)noTransferSizeSpecified;
- (id)objectForUserInfoKey:(id)a0;
- (char)overdueAtDate:(id)a0;
- (char)overwritesPrevious;
- (id)policyScores;
- (void)reconcileWithActivity:(id)a0;
- (void)setANEIntensive:(char)a0;
- (void)setBool:(char)a0 forUserInfoKey:(id)a1;
- (void)setConstraintsWithXPCDictionary:(id)a0;
- (void)setGPUIntensive:(char)a0;
- (void)setObject:(id)a0 forUserInfoKey:(id)a1;
- (char)shouldReplaceActivity:(id)a0 andKeepsSubmitted:(char *)a1;
- (char)significantlyOverdueAtDate:(id)a0;
- (char)skipEvaluationIfUnplugged;
- (id)submittedFileProtection;
- (char)timewiseEligibleAtDate:(id)a0;
- (unsigned long long)transferSizeType;
- (void)updateGroupIfNecessary;

@end
