@class NSMutableDictionary, NSDictionary, NSString, NSError, MTLResourceList;
@protocol MTLDeadlineProfile, MTLDevice, MTLLogContainer, MTLBuffer, MTLCommandQueue;

@interface MTLSimCommandBuffer : _MTLCommandBuffer <MTLCommandBufferSPI, MTLSerializerCommandStream> {
    struct StorageEntry { unsigned long long x0; void *x1; id x2; struct StorageEntry *x3; } *commandHead;
    struct BufferStorageEntry { id x0; unsigned long long x1; struct BufferStorageEntry *x2; } *bufferHead;
    unsigned long long segmentCount;
    struct StorageEntry { unsigned long long x0; void *x1; id x2; struct StorageEntry *x3; } *commandCurrentStorage;
    struct StorageEntry { unsigned long long x0; void *x1; id x2; struct StorageEntry *x3; } *commandTail;
    struct StorageEntry { unsigned long long x0; void *x1; id x2; struct StorageEntry *x3; } *commandPrevious;
    struct BufferStorageEntry { id x0; unsigned long long x1; struct BufferStorageEntry *x2; } *bufferCurrentStorage;
    unsigned long long currentStorageOffset;
    char continuation;
    unsigned int _reference;
    unsigned long long _protectionOptions;
    MTLResourceList *_resourceList;
}

@property (readonly) unsigned int commandBufferRef;
@property (readonly, nonatomic, getter=getListIndex) unsigned long long listIndex;
@property (getter=isProfilingEnabled) char profilingEnabled;
@property (readonly) NSDictionary *profilingResults;
@property (readonly, nonatomic) NSMutableDictionary *userDictionary;
@property (readonly) double kernelStartTime;
@property (readonly) double kernelEndTime;
@property (readonly) double GPUStartTime;
@property (readonly) double GPUEndTime;
@property (readonly) unsigned long long globalTraceObjectID;
@property id<MTLBuffer> privateData;
@property unsigned long long privateDataOffset;
@property id<MTLBuffer> privateLoggingBuffer;
@property (nonatomic) char sharedIndirectionTable;
@property (readonly, retain) id<MTLDeadlineProfile> deadlineProfile;
@property (readonly) id<MTLDevice> device;
@property (readonly) id<MTLCommandQueue> commandQueue;
@property (readonly) char retainedReferences;
@property (readonly) unsigned long long errorOptions;
@property (copy) NSString *label;
@property (readonly) id<MTLLogContainer> logs;
@property (readonly) unsigned long long status;
@property (readonly) NSError *error;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy) id /* block */ splitHandler;

- (void)dealloc;
- (void)addPurgedHeap:(id)a0;
- (void)addPurgedResource:(id)a0;
- (id)blitCommandEncoder;
- (id)blitCommandEncoderWithDescriptor:(id)a0;
- (char)commitAndWaitUntilSubmitted;
- (id)computeCommandEncoder;
- (id)computeCommandEncoderWithDescriptor:(id)a0;
- (id)computeCommandEncoderWithDispatchType:(unsigned long long)a0;
- (void)encodeSignalEvent:(id)a0 value:(unsigned long long)a1;
- (void)encodeSignalEvent:(id)a0 value:(unsigned long long)a1 agentMask:(unsigned long long)a2;
- (void)encodeWaitForEvent:(id)a0 value:(unsigned long long)a1;
- (void)encodeWaitForEvent:(id)a0 value:(unsigned long long)a1 timeout:(unsigned int)a2;
- (void)endEncoding;
- (id)parallelRenderCommandEncoderWithDescriptor:(id)a0;
- (unsigned long long)protectionOptions;
- (id)renderCommandEncoderWithDescriptor:(id)a0;
- (id)resourceStateCommandEncoder;
- (id)resourceStateCommandEncoderWithDescriptor:(id)a0;
- (void)setProtectionOptions:(unsigned long long)a0;
- (void)setResponsibleTaskIDs:(const unsigned int *)a0 count:(unsigned int)a1;
- (void)useResidencySet:(id)a0;
- (void)useResidencySets:(const id *)a0 count:(unsigned long long)a1;
- (void)merge:(id)a0;
- (id)initWithQueue:(id)a0 retainedReferences:(char)a1;
- (void)split;
- (void *)getCommandBufferBytes:(unsigned long long)a0;
- (char)addResourceReference:(id)a0 isWrite:(char)a1;
- (char)addStateReference:(id)a0;
- (void)beginContinuation;
- (void *)getBufferBytes:(unsigned long long)a0 alignment:(unsigned long long)a1 buffer:(id *)a2 offset:(unsigned long long *)a3;
- (void *)getCommandBytes:(unsigned long long)a0 forCommand:(unsigned int)a1;

@end
