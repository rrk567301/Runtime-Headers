@class SCDADevice, SCDAElectionParticipantIdVendor, NSString, NSDateFormatter, SCDAEmergencyCallPunchout, SCDAPowerAssertionManager, SCDAPreferences, NSMutableDictionary, SCDAContext, NSObject, SCDAAdvertisementContextRecord, NSData, SCDAGoodnessScoreEvaluator, SCDASession, WPHeySiri, SCDANotifyObserver, SCDAAdvertisementContextManager, SCDAWatchdogTimer, NSUUID, SCDAInstrumentation, NSDate, SCDARecord, SCDAElectionParticipantIds, SCDANotifyStatePublisher;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface SCDACoordinator : NSObject <SCDANotifyObserverDelegate, WPHeySiriProtocol> {
    unsigned long long _myriadState;
    unsigned long long _nextState;
    unsigned long long _previousState;
    NSData *_previousAdvertisedData;
    NSMutableDictionary *_replies;
    NSMutableDictionary *_replyCounts;
    NSMutableDictionary *_repliesBeforeDecision;
    NSMutableDictionary *_previousTrumps;
    NSMutableDictionary *_incomingTrumps;
    NSMutableDictionary *_multipleContinuations;
    id _delegate;
    double _deviceVTEndtimeDistanceThreshold;
    unsigned char _deviceGroup;
    NSObject<OS_dispatch_queue> *_myriadWorkQueue;
    NSObject<OS_dispatch_queue> *_myriadAdvertisementContextQueue;
    NSString *_timerLabel;
    NSObject<OS_dispatch_source> *_timer;
    NSUUID *_eventToken;
    SCDAWatchdogTimer *_overallTimeout;
    SCDAPowerAssertionManager *_powerAssertionManager;
    struct __CFNotificationCenter { } *_center;
    SCDARecord *_triggerRecord;
    long long _recordType;
    unsigned long long _voiceTriggerTime;
    float _delayTarget;
    float _advertInterval;
    int _nTimesContinued;
    int _nTimesExtended;
    unsigned char _incomingAdjustment;
    SCDARecord *_overrideMyriadRecord;
    int _slowdownMsecs;
    int _testInducedSlowdownMsecs;
    SCDARecord *_maxSlowdownRecord;
    char _BTLEReady;
    char _inSetupMode;
    char _ducking;
    char _stateMachineEncounteredError;
    char _listenTimerIsRunning;
    char _coordinationEnabled;
    char _BLEActivityEnabled;
    char _clientIsDirectActivating;
    char _outgoingTrigger;
    char _clientIsInEarActivation;
    char _clientRecentlyLostElection;
    char _clientLostDueToTrumping;
    char _clientIsListeningAfterRecentWin;
    char _clientIsWatchActivation;
    char _clientIsWatchTrumpPromote;
    char _clientIsRespondingToSlowdown;
    char _clientDoneRespondingToSlowdown;
    char _clientRespondingToCarPlay;
    char _clientIsDeciding;
    int _constantGoodness;
    NSObject<OS_dispatch_source> *_timerSource;
    NSDateFormatter *_dateFormat;
    WPHeySiri *_heySiriBTLE;
    SCDAElectionParticipantIdVendor *_electionParticipantIdVendor;
    SCDAElectionParticipantIds *_electionParticipantIds;
    NSUUID *_designatedSelfID;
    NSDate *_triggerTime;
    int _nDeltaTs;
    SCDAEmergencyCallPunchout *_callPunchout;
    unsigned long long _lastDecisionTime;
    char _lastDecision;
    unsigned short _lastPHash;
    double _lastEmergencyAttempt;
    char _wasEmergency;
    char _suppressLateTrigger;
    struct { char didRequestForBTLEScan; char didRequestForBTLEAdvertisement; } _heySiriBTLEState;
    struct { NSObject<OS_dispatch_source> *waitTimer; id /* block */ waitBlock; char isWaitTimerSuspended; } _wiproxReadinessTimer;
    struct { NSDate *advertTriggerAdvStartTime; NSDate *advertTriggerEndTime; } _advTiming;
    SCDAAdvertisementContextManager *_advContextManager;
    SCDAAdvertisementContextRecord *_contextRecord;
    SCDAGoodnessScoreEvaluator *_goodnessScoreEvaluator;
    SCDASession *_myriadSession;
    SCDANotifyStatePublisher *_electionBeginPublisher;
    SCDANotifyStatePublisher *_electionWinPublisher;
    SCDANotifyStatePublisher *_electionLossPublisher;
    SCDANotifyStatePublisher *_electionRepostWinDecisionPublisher;
    SCDANotifyObserver *_preferencesChangedNotification;
    SCDANotifyObserver *_myriadStateMachineForceNoActivityObserver;
    unsigned long long _electionPublisherState;
    SCDAPreferences *_preferences;
    id /* block */ _waitForWiproxReadinessToScan;
    unsigned long long _latestRecordReceivedTime;
    SCDAContext *_currentMyriadContext;
    SCDAInstrumentation *_myriadInstrumentation;
    NSUUID *_currentRequestId;
    NSDate *_lastWonBySmallAmountDate;
    SCDADevice *_device;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (void)clearCurrentCoordinator;
+ (id)currentCoordinator;
+ (void)didChangeDefaults;
+ (id)audioHashFileBaseDirectory;
+ (id)audioHashFilePath;
+ (id)safelyGetAudioData;

- (void)dealloc;
- (void).cxx_destruct;
- (id)initWithDelegate:(id)a0;
- (void)_startListening:(id /* block */)a0;
- (void)startListening;
- (void)stopListening;
- (unsigned char)deviceGroup;
- (void)_cancelTimer;
- (void)_unduck;
- (void)notifyObserver:(id)a0 didReceiveNotificationWithToken:(int)a1;
- (id)stateAsString:(unsigned long long)a0;
- (void)_ageWedgeFilter;
- (void)_initializeWiProxReadinessTimer;
- (id)_phsSetupRecord;
- (void)_resetAudioData;
- (id)_stateAsString:(unsigned long long)a0;
- (void)_stopListening:(id /* block */)a0;
- (unsigned long long)_updateVoiceTriggerTimeFromFile;
- (id)emergencyRecord;
- (void)endAdvertising:(id /* block */)a0;
- (void)endTask;
- (void)startAdvertisingEmergencySignal;
- (void)startListeningToEmergencySignal;
- (id)_sortedReplies:(id)a0;
- (void)_startTimer:(id)a0 for:(float)a1 thenEnterState:(unsigned long long)a2;
- (id)responseObject:(unsigned short)a0;
- (id)slowdownRecord:(unsigned short)a0;
- (void)startListening:(id /* block */)a0;
- (void)_addElectionAdvertisementDataToMyriadSession:(id)a0;
- (void)_adjustActionWindowsFromSlowdown:(int)a0;
- (void)_advertise:(id)a0 andMoveTo:(unsigned long long)a1;
- (void)_advertiseIndefinite:(id)a0;
- (void)_advertiseSlowdown;
- (void)_advertiseSuppressTriggerInOutput;
- (void)_advertiseTrigger;
- (void)_cancelOverallTimeout;
- (void)_clearMyriadSession;
- (void)_clearWiProxReadinessTimer;
- (double)_contextFetchDelayForAdvertimentInterval:(double)a0 advertisementDelay:(double)a1;
- (void)_createDispatchTimerFor:(double)a0 toExecute:(id /* block */)a1;
- (void)_createDispatchTimerForEvent:(id)a0 toExecute:(id /* block */)a1;
- (void)_createDispatchTimerWithTime:(unsigned long long)a0 toExecute:(id /* block */)a1;
- (void)_createMyriadSessionIfRequired;
- (void)_createWaitWiProxTimer:(long long)a0 waitBlock:(id /* block */)a1;
- (char)_deviceShouldContinue:(id)a0;
- (void)_duringNextWindowEnterState:(unsigned long long)a0;
- (void)_duringNextWindowExecute:(id /* block */)a0;
- (void)_endAdvertising:(id /* block */)a0;
- (void)_endAdvertisingAnalyticsContext:(char)a0;
- (void)_endAdvertisingWithDeviceProhibitions:(id)a0;
- (void)_enterBLEDiagnosticMode;
- (void)_enterState:(unsigned long long)a0;
- (void)_enteringIntoState:(unsigned long long)a0 fromState:(unsigned long long)a1;
- (void)_forceLocalWinner:(id)a0;
- (void)_handleStateMachineErrorIfNeeded;
- (void)_initDeviceClassAndAdjustments;
- (void)_initializeTimer;
- (void)_leaveBLEDiagnosticMode;
- (void)_loseElection;
- (id)_myriadSession;
- (int)_myriadStateForSelf:(unsigned long long)a0;
- (unsigned long long)_nextElectionPublisherState;
- (char)_okayToSuppressOnOutput;
- (void)_pushMyriadAdvertisementContextToContextCollectorWithAdvertisementInterval:(double)a0 advertisementDelay:(double)a1;
- (void)_readDefaults;
- (void)_resetActionWindows;
- (void)_resetAdvertisementTimings;
- (void)_resumeWiProxReadinessTimer;
- (void)_setMyriadContext:(id)a0;
- (void)_setOverallTimeout;
- (void)_setupActionWindows;
- (char)_shouldContinueFor:(id)a0;
- (char)_shouldHandleEmergency;
- (char)_shouldStopListeningBeforeAdvertising;
- (char)_shouldUseContextCollector;
- (void)_signalEmergencyCallHandled;
- (id)_sortedReplies;
- (void)_startAdvertising:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2;
- (void)_startAdvertisingFromInTaskVoiceTrigger;
- (void)_startAdvertisingFromVoiceTrigger;
- (void)_startListenTimer;
- (void)_startListeningAfterWiProxIsReady:(char)a0 inState:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)_startTimer:(id)a0 for:(float)a1 thenExecute:(id /* block */)a2;
- (id)_stateAsString;
- (void)_stopAdvertising:(id /* block */)a0;
- (void)_stopAdvertisingAndListening;
- (void)_suppressDeviceIfNeededWithVoiceTriggerEndTime:(double)a0 adverisementDispatchTime:(double)a1;
- (void)_suspendWiProxReadinessTimer;
- (id)_testAndFilterAdvertisementsFromContextCollector:(id)a0 voiceTriggerEndTime:(double)a1 advertisementDispatchTime:(double)a2 advertisement:(id)a3;
- (char)_testAndUpdateWedgeFilter:(id)a0;
- (void)_trackHeySiriStartedAdvertisingAt:(unsigned long long)a0;
- (void)_triggerABCForType:(id)a0 context:(id)a1;
- (void)_updateRepliesWith:(id)a0 id:(id)a1 data:(id)a2;
- (void)_waitWiProx:(long long)a0 andExecute:(id /* block */)a1;
- (void)_waitWiProxAndExecute:(id /* block */)a0;
- (void)_winElection;
- (void)advertiseWith:(id)a0;
- (void)advertiseWith:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2;
- (id)continuationRecord;
- (id)directTriggerRecord;
- (id)emergencyHandledRecord;
- (id)emptyRecord;
- (void)endAdvertisingAfterDelay:(float)a0;
- (void)endAdvertisingWithDeviceProhibitions:(id)a0;
- (void)enterState:(unsigned long long)a0;
- (void)heySiri:(id)a0 failedToStartAdvertisingWithError:(id)a1;
- (void)heySiri:(id)a0 failedToStartScanningWithError:(id)a1;
- (void)heySiri:(id)a0 foundDevice:(id)a1 withInfo:(id)a2;
- (void)heySiriAdvertisingPending:(id)a0;
- (void)heySiriDidUpdateState:(id)a0;
- (void)heySiriStartedAdvertising:(id)a0;
- (void)heySiriStartedAdvertisingAt:(id)a0 timeStamp:(unsigned long long)a1;
- (void)heySiriStartedScanning:(id)a0;
- (void)heySiriStoppedAdvertising:(id)a0;
- (void)heySiriStoppedScanning:(id)a0;
- (char)inTask;
- (void)injectAdvertisementForTesting:(id)a0 forDevice:(id)a1;
- (void)instrumentationUpdateBoost:(unsigned char)a0 value:(unsigned int)a1;
- (id)lateSuppressionRecord;
- (void)myriadSession:(id /* block */)a0;
- (void)notifyCurrentDecisionResult;
- (void)preheatWiProx;
- (void)readDefaults;
- (void)resetMyriadCoordinator:(id /* block */)a0;
- (void)resetReplies;
- (void)resetStateMachine;
- (void)setCurrentRequestId:(id)a0;
- (void)setInTask:(char)a0;
- (void)setupActionWindows;
- (void)setupEnabled:(char)a0;
- (void)startAdvertising:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2;
- (void)startAdvertisingEmergency;
- (void)startAdvertisingEmergencyHandled;
- (void)startAdvertisingForPHSSetupAfterDelay:(float)a0 maxInterval:(float)a1;
- (void)startAdvertisingFromAlertFiringVoiceTrigger;
- (void)startAdvertisingFromAlertFiringVoiceTriggerWithContext:(id)a0;
- (void)startAdvertisingFromCarPlayTrigger;
- (void)startAdvertisingFromDirectTrigger;
- (void)startAdvertisingFromDirectTriggerWithContext:(id)a0;
- (void)startAdvertisingFromInEarTrigger;
- (void)startAdvertisingFromInTaskTriggerWithContext:(id)a0;
- (void)startAdvertisingFromInTaskVoiceTrigger;
- (void)startAdvertisingFromInTaskVoiceTriggerWithContext:(id)a0;
- (void)startAdvertisingFromOutgoingTrigger;
- (void)startAdvertisingFromOutgoingTriggerWithContext:(id)a0;
- (void)startAdvertisingFromVoiceTrigger;
- (void)startAdvertisingFromVoiceTriggerAdjusted:(char)a0;
- (void)startAdvertisingFromVoiceTriggerAdjusted:(char)a0 withContext:(id)a1;
- (void)startAdvertisingFromVoiceTriggerWithContext:(id)a0;
- (void)startAdvertisingFromVoiceTriggerWithGoodnessScoreContext:(id)a0 withContext:(id)a1;
- (void)startAdvertisingSlowdown:(unsigned short)a0;
- (void)startResponseAdvertising:(unsigned short)a0;
- (void)startWatchAdvertisingFromDirectTrigger;
- (void)startWatchAdvertisingFromDirectTriggerWithContext:(id)a0;
- (void)startWatchAdvertisingFromVoiceTrigger;
- (void)startWatchAdvertisingFromVoiceTriggerWithContext:(id)a0;
- (void)stopListening:(id /* block */)a0;
- (void)updateRepliesWith:(id)a0 id:(id)a1 data:(id)a2;
- (void)updateRequestId:(id)a0;
- (id)voiceTriggerRecord;
- (void)waitWiProx:(long long)a0 andExecute:(id /* block */)a1;
- (void)endAdvertising;
- (void)_computeElectionParticipantIds:(id)a0;
- (void)_advertise:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2 voiceTriggerLatency:(float)a3 andMoveTo:(unsigned long long)a4;
- (void)_advertiseWith:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2 voiceTriggerLatency:(float)a3 thenExecute:(id /* block */)a4;
- (void)_createElectionParticipantIdVendorIfRequired;
- (void)_faceDetectedElection;
- (void)_startAdvertisingFromSetupMode;
- (char)endWaitingForEmergency;
- (void)faceDetectedBoostWithContext:(id)a0;
- (void)setupAdvIntervalsInDelay:(float *)a0 interval:(float *)a1 voiceTriggerLatency:(float *)a2 withSlowdown:(int)a3;

@end
