@class NSMutableDictionary, WKUserContentController, NSDictionary, NSObject, WBProfile, NSMutableArray, NSString, NSSet, WKWebsiteDataStore, NSTimer, NSMutableSet, NSPointerArray, NSArray, _EXQueryController, WBSExtensionsAnalyticsEventCoalescer, WBSDiagnosticStateCollector;
@protocol OS_dispatch_queue, WBSExtensionsControllerDelegate;

@interface WBSExtensionsController : NSObject <WBSExtensionsExportDataSource, _EXQueryControllerDelegate, WBSExtensionResourceVerifier, WBSCloudExtensionStateProvider> {
    NSMutableDictionary *_extensionUniqueIdentifierToExtensionDataMap;
    NSMutableDictionary *_extensionIdentifierToStateMap;
    NSMutableDictionary *_extensionIdentifierToBaseURIMap;
    NSMutableDictionary *_baseURIHostToExtensionIdentifier;
    NSMutableSet *_enabledExtensions;
    NSMutableSet *_unpackedExtensions;
    NSMutableSet *_temporaryExtensionIdentifiers;
    NSMutableSet *_replacedExtensions;
    NSMutableSet *_blockedExtensions;
    NSObject<OS_dispatch_queue> *_appBundleValidationQueue;
    NSString *_crashReporterMessage;
    char _allowUnsignedExtensions;
    NSTimer *_deleteStateForRemovedExtensionsTimer;
    NSPointerArray *_observers;
    char _loadingDiscoveredExtensions;
    WKUserContentController *_userContentController;
    char _forceExtensionLoadingAfterDiscovery;
    _EXQueryController *_extensionKitQueryController;
    NSObject<OS_dispatch_queue> *_discoveryNotificationQueue;
    WBSDiagnosticStateCollector *_diagnosticStateCollector;
}

@property (class, readonly) double temporarySiteAccessTimeInterval;

@property (readonly, nonatomic) char hasPopulatedAllExtensionsFromExtensionDiscoveryAtLeastOnce;
@property (readonly, copy, nonatomic) NSArray *allProfileExtensionsControllers;
@property (weak, nonatomic) id<WBSExtensionsControllerDelegate> delegate;
@property (readonly, nonatomic) char hasDiscoveredExtensions;
@property (readonly, copy, nonatomic) NSMutableArray *extensions;
@property (readonly, copy, nonatomic) NSArray *enabledExtensions;
@property (readonly, nonatomic) char hasAnyEnabledExtensions;
@property (readonly, nonatomic) char loadingEnabledExtensionsAtStartup;
@property (readonly, nonatomic) char loadEnabledExtensionsWasCalled;
@property (readonly, copy, nonatomic) NSDictionary *extensionIdentifierToBaseURIMap;
@property (copy, nonatomic) NSString *profileServerID;
@property (readonly, nonatomic) WBProfile *profile;
@property (readonly, nonatomic) WKUserContentController *userContentController;
@property (readonly, copy, nonatomic) WKWebsiteDataStore *websiteDataStore;
@property (readonly, copy, nonatomic) NSArray *allDiscoveredExtensions;
@property (readonly, nonatomic) NSSet *extensionStateKeysToCopy;
@property (readonly, nonatomic) char extensionsEnabled;
@property (readonly, nonatomic) WBSExtensionsAnalyticsEventCoalescer *analyticsEventCoalescer;
@property (readonly, nonatomic) NSArray *composedIdentifiersOfExtensionsWithAutomaticallyGrantedPermissions;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_composedIdentifierForStateOfExtensionWithBundleIdentifier:(id)a0 developerIdentifier:(id)a1;
+ (id)_bundleIdentifierFromComposedIdentifier:(id)a0;
+ (Class)_extensionDataClass;
+ (id)_extensionPointIdentifier;
+ (id)_skipLoadingEnabledExtensionsAtLaunchPreferenceKey;
+ (id)extensionIdentifierToBaseURIMapBundleParameterKey;
+ (id)extensionKitQueriesWithExtensionPoint:(id)a0 platforms:(id)a1 predicate:(id)a2;
+ (id)extensionURLScheme;
+ (id)extensionsCrashReporterMessageBundleParameterKey;
+ (char)hasBlockedPromptAppearedForExtensionWithIdentifier:(id)a0;
+ (void)_didDiscoverExtensions:(char)a0;
+ (id)_extensionDefaults;
+ (id)_extensionFromComposedIdentifier:(id)a0;
+ (id)extensionKitQueries;
+ (void)removeExtensionBundleIDFromArrayOfBlocklistedExtensions:(id)a0;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)removeObserver:(id)a0;
- (void)addObserver:(id)a0;
- (void)queryControllerDidUpdate:(id)a0 resultDifference:(id)a1;
- (void)verifyExtensionResourceAtExtensionURL:(id)a0 fileURL:(id)a1;
- (void)_extensionsWereGloballyDisabled;
- (void)_extensionsWereGloballyEnabled;
- (char)_supportsExtensionDiscovery;
- (id)_urlForExtensionSettings;
- (void)unloadAndDeleteStateForAllExtensions;
- (void)_beginExtensionDiscovery;
- (void)_endExtensionDiscovery;
- (char)extensionIsEnabled:(id)a0;
- (void)setExtension:(id)a0 isEnabled:(char)a1;
- (id)profileServerIDForStateManager:(id)a0;
- (void)_blockExtension:(id)a0;
- (id)_computeCodeSigningDictionaryOnDiskForExtension:(id)a0 attemptRetryOnFailure:(char)a1;
- (void)_connectToExtensionForValidation:(id)a0 untrustedCodeSigningDictionary:(id)a1 attemptRetryOnFailure:(char)a2;
- (id)_developerIdentifierForExtension:(id)a0 untrustedCodeSigningDictionary:(id)a1;
- (void)_disableAndBlockExtension:(id)a0;
- (id)_displayNameForExtension:(id)a0;
- (id)_displayVersionForExtension:(id)a0;
- (void)_enableExtension:(id)a0 completionHandler:(id /* block */)a1;
- (id)_extensionStateForExtension:(id)a0;
- (id)_extensionsControllerForDefaultProfile;
- (void)_finishedLoadingExtensions;
- (void)_grantRequestedPermissionsIfNecessaryForExtension:(id)a0;
- (char)_isExtensionBlockedByBlocklist:(id)a0 developerIdentifier:(id)a1;
- (char)_isTrustedDeveloperForExtensionStateSyncForExtension:(id)a0;
- (void)_loadEnabledExtension:(id)a0;
- (void)_loadExtensions:(id)a0;
- (void)_postExtensionWasEnabledRemotelyNotificationIfNecessary:(id)a0;
- (void)_replaceExtensionsObsoletedByExtension:(id)a0 developerIdentifier:(id)a1;
- (void)_setExtensionState:(id)a0 forExtension:(id)a1;
- (char)_shouldDisableExtensionIfAdditionalPermissionsAreRequired:(id)a0 previousExtensionState:(id)a1;
- (void)_showNewExtensionBannerIfNecessaryForExtensions:(id)a0;
- (void)_showPromptForExtensionDisabledBecauseItHasRequestedAdditionalPermissions:(id)a0 extensionIdentifier:(id)a1;
- (void)_unloadPreviouslyEnabledExtension:(id)a0;
- (void)_updateExtensionsCrashReporterMessage;
- (void)_updateManagedPrivateBrowsingStateForAllExtensions;
- (void)_updateManagedWebsiteAccessForAllExtensions;
- (id)_updatedExtensionStateForCurrentPermissions:(id)a0 previousExtensionState:(id)a1;
- (void)_validateAndLoadExtensionIfNecessary:(id)a0 attemptRetryOnFailure:(char)a1 isExtensionNewlyInstalled:(char *)a2;
- (void)_validateContainingAppOfExtensionIfNecessary:(id)a0 attemptRetryOnFailure:(char)a1;
- (id)_versionNumberForExtension:(id)a0;
- (void)_writeExtensionsStateToStorage;
- (char)allowUnsignedExtensions;
- (void)closeLocalExtensionContentInPrivateTabsForExtension:(id)a0;
- (id)cloudExtensionStateForStateManager:(id)a0;
- (id)composedIdentifierForExtensionStateForExtension:(id)a0;
- (void)copyEnabledExtensionStateFromExtensionsController:(id)a0;
- (void)didShowPerSiteAccessPermissionForExtension:(id)a0;
- (void)disableUnsignedExtensionsIfNecessary;
- (id)extensionDataForExtension:(id)a0;
- (id)extensionWithBaseURIHost:(id)a0;
- (id)extensionWithComposedIdentifier:(id)a0;
- (id)extensionWithUUID:(id)a0;
- (id)extensionsDataForExport;
- (void)findExtensions;
- (char)hasExtensionWithComposedIdentifier:(id)a0;
- (char)hasShownPerSiteAccessPermissionForExtension:(id)a0;
- (id)initWithProfileServerID:(id)a0 userContentController:(id)a1;
- (id)lastSeenBaseURIForExtension:(id)a0 updatingWithCurrentBaseURI:(id)a1;
- (void)loadEnabledExtensions;
- (void)loadSuitableDiscoveredExtensions;
- (void)moveLocalStorageForExtension:(id)a0 completionHandler:(id /* block */)a1;
- (void)remotelyEnabledExtensionBannerWasShownForComposedIdentifier:(id)a0;
- (void)resetExtensionsStateAndReloadExtensions;
- (void)setExtensionWithComposedIdentifier:(id)a0 isEnabledInCloud:(char)a1;
- (void)test_enableExtension:(id)a0 withResourceURL:(id)a1;
- (void)unloadExtensionIfNecessary:(id)a0;
- (char)validateAndReadResourceWithExtensionURL:(id)a0 inExtension:(id)a1 codeRef:(struct __SecCode { } *)a2 outResourceData:(id *)a3;
- (char)validateResourceWithFileURL:(id)a0 resourceData:(id)a1 inExtension:(id)a2 codeRef:(struct __SecCode { } *)a3;
- (void)_managedExtensionStateDidChange;
- (void)reloadExtensionStateFromStorage;
- (void)_addExtensionToBaseURIMap:(id)a0 withResourceURL:(id)a1;
- (void)_beginMatchingExtensionsWithAttributesCompletedWithMatchingExtensions:(id)a0;
- (void)_deleteStateForExtensionWithComposedIdentifier:(id)a0;
- (void)_deleteStateForRemovedExtensions;
- (void)_deleteStateForRemovedExtensionsAfterDelay:(double)a0;
- (void)_deleteStateForRemovedExtensionsSoon;
- (void)_deleteStateForRemovedExtensionsTimerFired:(id)a0;
- (void)_deleteStorageForExtensionWithComposedIdentifier:(id)a0;
- (id)_developerIdentifierForExtension:(id)a0;
- (id)_displayShortNameForExtension:(id)a0;
- (void)_extensionDiscoveryHasNewResults:(id)a0;
- (char)_extensionShouldBeAutomaticallyEnabled:(id)a0;
- (char)_extensionShouldBeEnabled:(id)a0;
- (id)_generateBaseURIForExtension:(id)a0;
- (void)_loadExtensions:(id)a0 skipEqualityCheck:(char)a1;
- (void)_notifyObserversContentBlockerListDidChange;
- (void)_populateAllExtensionsIfNecessaryUsingExtensionsControllerForDefaultProfile;
- (id)_readExtensionsStateFromStorageFromURL:(id)a0;
- (void)_removeSafariExtensionDataForExtension:(id)a0;
- (void)_resetExtensionsState;
- (void)_setExtensionIdentifierToStateMap:(id)a0 forExtensionWithComposedIdentifier:(id)a1;
- (void)_setExtensionIdentifierToStateMap:(id)a0 forExtensionWithComposedIdentifier:(id)a1 completionHandler:(id /* block */)a2;
- (void)_setExtensionState:(id)a0 forExtension:(id)a1 completionHandler:(id /* block */)a2;
- (char)_supportsCodeSigningChecks;
- (void)_updateExtensionNewTabPageIfNecessary;
- (void)_updateExtensionStateAfterExtensionWasAddedWithComposedIdentifier:(id)a0;
- (void)_updateExtensionStateAfterExtensionWasRemovedWithComposedIdentifier:(id)a0;
- (void)_updateExtensionStateIfPermissionsIncreased:(id)a0;
- (void)_updateExtensionStateIfThisVersionOfSafariIsNotSupported:(id)a0;
- (void)_updateExtensionStateWithPrivacyPreservingProfileIdentifierIfNeeded:(id)a0;
- (id)_urlForWebKitExtensionsDirectory;
- (id)extensionWithBundleIdentifier:(id)a0;
- (id)extensionsWithAdamID:(id)a0;
- (char)hasAnyEnabledExtensionsInStorage;
- (id)initWithProfileServerID:(id)a0 userContentController:(id)a1 forceExtensionLoadingAfterDiscovery:(char)a2;
- (id)lastSeenBaseURIForExtension:(id)a0;
- (id)readExtensionsStateFromStorage;
- (void)removeOldExtensionStateForExtension:(id)a0;
- (void)setExtension:(id)a0 isEnabled:(char)a1 dueToUserGesture:(char)a2 skipSavingToStorage:(char)a3;
- (void)setExtension:(id)a0 isEnabled:(char)a1 skipSavingToStorage:(char)a2;
- (char)validateAndReadResourceWithExtensionURL:(id)a0 inExtension:(id)a1 outResourceData:(id *)a2;
- (char)validateAndReadResourceWithExtensionURL:(id)a0 outResourceData:(id *)a1;
- (void)writeExtensionsStateToStorageWithCompletionHandler:(id /* block */)a0;

@end
