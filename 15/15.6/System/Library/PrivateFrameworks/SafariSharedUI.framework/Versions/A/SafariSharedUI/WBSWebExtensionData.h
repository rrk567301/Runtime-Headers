@class NSURL, NSExtension, WBSWebExtensionsController, NSDictionary, WBSWebExtensionToolbarItem, NSMutableArray, WKWebExtension, NSString, NSSet, NSImage, WKWebView, WKWebExtensionContext, NSArray, NSUUID;

@interface WBSWebExtensionData : WBSSafariExtension <WBSWebExtensionDataForwarding> {
    NSMutableArray *_websiteRequestsPendingApproval;
    NSString *_extensionBundleIdentifier;
    NSUUID *_baseURIHost;
    NSArray *_commands;
    char _hasFirstNativeMessagePort;
    NSMutableArray *_queuedNativeMessages;
    char _permissionsAreBeingUpdatedDueToAnExternalChange;
    char _allowedInPrivateBrowsing;
    char _isAllowedInPrivateBrowsingValuePopulated;
    NSMutableArray *_webKitMessagePorts;
}

@property (nonatomic) char hasLoadedPermissionsFromStorage;
@property (weak, nonatomic) WBSWebExtensionsController *extensionsController;
@property (readonly, nonatomic) WKWebExtension *webKitExtension;
@property (readonly, nonatomic) WKWebExtensionContext *webKitContext;
@property (readonly, nonatomic) NSExtension *extension;
@property (readonly, nonatomic) NSString *composedIdentifier;
@property (readonly, nonatomic) NSUUID *uniqueIdentifier;
@property (readonly, nonatomic) NSUUID *identifier;
@property (readonly, nonatomic) NSString *containingAppBundleIdentifier;
@property (readonly, nonatomic) NSURL *resourcesDirectoryURL;
@property (readonly, nonatomic) char manifestParsedSuccessfully;
@property (readonly, copy, nonatomic) NSDictionary *manifest;
@property (retain, nonatomic) WBSWebExtensionToolbarItem *toolbarItem;
@property (readonly, copy, nonatomic) NSString *toolbarLabel;
@property (readonly, copy, nonatomic) NSString *toolbarPopupPath;
@property (readonly, nonatomic) NSURL *backgroundPageURL;
@property (readonly, nonatomic) WKWebView *backgroundWebView;
@property (nonatomic) char allowedInPrivateBrowsing;
@property (readonly, nonatomic) NSURL *optionsPageURL;
@property (readonly, nonatomic) NSDictionary *userVisiblePermissions;
@property (readonly, nonatomic) char shouldShowInWebsitePreferences;
@property (readonly, nonatomic) NSSet *urlsPendingApproval;
@property (readonly, nonatomic) NSSet *apiNamesPendingApproval;
@property (readonly, nonatomic) NSString *displayName;
@property (readonly, nonatomic) NSString *displayShortName;
@property (readonly, nonatomic) NSString *displayVersion;
@property (readonly, nonatomic) NSString *displayDescription;
@property (readonly, nonatomic) NSString *processDisplayName;
@property (readonly, nonatomic) NSString *version;
@property (readonly, nonatomic) NSImage *preferencesIcon;
@property (readonly, nonatomic) NSImage *icon;
@property (readonly, nonatomic) NSImage *toolbarImage;
@property (readonly, nonatomic) char backgroundPageIsPersistent;
@property (readonly, nonatomic) char backgroundPageIsServiceWorker;
@property (readonly, nonatomic) char hasAbilityToInjectContentIntoWebpages;
@property (readonly, nonatomic) NSURL *newTabOverridePageURL;
@property (readonly, nonatomic) char hasAction;
@property (readonly, nonatomic) char hasBrowserAction;
@property (readonly, nonatomic) char hasPageAction;
@property (readonly, nonatomic) char hasCommands;
@property (readonly, nonatomic) char hasStorage;
@property (readonly, nonatomic) char hasDevTools;
@property (readonly, nonatomic) long long manifestVersion;
@property (readonly, nonatomic) char usesManifestVersion3;
@property (readonly, nonatomic) char hasDeclarativeNetRequestPermission;
@property (readonly, nonatomic) char hasDeclarativeNetRequestHostAccessPermission;
@property (readonly, nonatomic) char requestsAccessToAllHosts;
@property (nonatomic) char requestedOptionalAccessToAllHosts;
@property (readonly, nonatomic) NSSet *currentPermissions;
@property (readonly, nonatomic) NSSet *currentPermissionOrigins;
@property (readonly, nonatomic) NSDictionary *configuredPermissions;
@property (readonly, nonatomic) NSDictionary *configuredPermissionOrigins;
@property (readonly, nonatomic) NSSet *requestedPermissionsNotAlreadyConfigured;
@property (readonly, nonatomic) NSSet *requestedPermissionOriginsNotAlreadyConfigured;
@property (copy, nonatomic) NSDictionary *grantedPermissions;
@property (copy, nonatomic) NSDictionary *grantedPermissionOrigins;
@property (copy, nonatomic) NSDictionary *revokedPermissions;
@property (copy, nonatomic) NSDictionary *revokedPermissionOrigins;
@property (readonly, nonatomic) NSSet *manifestPermissions;
@property (readonly, nonatomic) NSSet *manifestOptionalPermissions;
@property (readonly, nonatomic) NSSet *manifestPermissionOrigins;
@property (readonly, nonatomic) NSSet *manifestOptionalPermissionOrigins;
@property (readonly, nonatomic) NSSet *manifestAccessibleOrigins;
@property (readonly, nonatomic) NSArray *commands;
@property (readonly, nonatomic) NSArray *manifestErrors;

+ (id)webExtensionForWebKitExtensionContext:(id)a0;
+ (char)_isShortVersion:(id)a0 supportedInSafariVersion:(id)a1;
+ (id)_manifestKeySupportForDictionary:(id)a0 withSupportedFeatures:(id)a1 currentSafariShortVersion:(id)a2;
+ (void)_mergeKeySupportDictionary:(id)a0 intoDictionary:(id)a1;
+ (id)_unsupportedKeysFromKeySupportDictionary:(id)a0;
+ (id)_unsupportedValuesInArray:(id)a0 withSupportedFeatures:(id)a1 currentSafariShortVersion:(id)a2;
+ (id)createWebExtensionError:(long long)a0;
+ (id)createWebExtensionError:(long long)a0 customLocalizedDescription:(id)a1;
+ (id)createWebExtensionError:(long long)a0 underlyingError:(id)a1;
+ (id)supportedPermissions;
+ (id)supportedWebExtensionFeaturesForManifestVersion:(unsigned long long)a0;
+ (id)supportedWebExtensionPatternSchemes;
+ (id)unlocalizedManifestDictionaryFromData:(id)a0 withExtensionIdentifier:(id)a1 error:(id *)a2;
+ (id)unsupportedManifestKeysInDictionary:(id)a0 withSupportedFeatures:(id)a1 currentSafariShortVersion:(id)a2;

- (id)description;
- (void)load;
- (void).cxx_destruct;
- (void)unload;
- (char)hasActiveUserGestureInTab:(id)a0;
- (char)hasPermission:(id)a0;
- (char)hasPermission:(id)a0 inTab:(id)a1;
- (void)userGesturePerformedInTab:(id)a0;
- (void)messageReceivedFromContainingAppWithName:(id)a0 userInfo:(id)a1;
- (char)hasPermissionToAccessURL:(id)a0 inTab:(id)a1;
- (char)_applicationIsActive;
- (id)_configuredDictionaryWithRequested:(id)a0 granted:(id)a1 revoked:(id)a2;
- (void)_loadToolbarItem;
- (void)_loadToolbarItemInPrivateBrowsing;
- (char)_shouldAutomaticallyEnableInPrivateBrowsing;
- (void)_unloadInPrivateBrowsing;
- (void)_unloadToolbarItem;
- (void)_unloadToolbarItemInPrivateBrowsing;
- (void)_validateToolbarItemInAllWindows;
- (id)baseURIHost;
- (char)canLoadWithErrorString:(id *)a0;
- (void)dispatchAllPendingWebsiteRequests;
- (void)dispatchExpiredPendingWebsiteRequests;
- (void)grantPermissions:(id)a0 origins:(id)a1 expirationDate:(id)a2;
- (char)hasMoreThanOneRequestedOriginNotAlreadyConfigured;
- (char)hasPendingWebsiteRequests;
- (char)hasPermissionToAccessAllHosts;
- (char)hasPermissionToAccessURL:(id)a0;
- (id)initWithExtension:(id)a0 extensionsController:(id)a1;
- (void)loadBackgroundPageIfNecessaryWithCompletionHandler:(id /* block */)a0;
- (long long)permissionStateForURL:(id)a0;
- (void)promptForAccessToURLs:(id)a0 inTab:(id)a1 completionHandler:(id /* block */)a2;
- (void)removeGrantedAndRevokedPermissions:(id)a0 origins:(id)a1 exactPatternMatchesOnly:(char)a2;
- (void)removeGrantedPermissions:(id)a0 origins:(id)a1 exactPatternMatchesOnly:(char)a2;
- (void)revokePermissions:(id)a0 origins:(id)a1 expirationDate:(id)a2;
- (id)_backgroundWebViewConfiguration;
- (char)canLoad;
- (void)_configureWebKitExtensionContext;
- (id)_containingAppIcon;
- (id)_maximumSafariVersionString;
- (id)_minimumSafariVersionString;
- (id)_remoteInspectionMenuTitle;
- (char)_requestsAccessToAllHostsThroughImplicitPermission;
- (id)_userInfoDictionaryForPermissionsNotificationWithPermissions:(id)a0 origins:(id)a1;
- (void)connectUsingMessagePort:(id)a0;
- (void)dispatchPendingWebsiteRequestsMatchingOriginPatterns:(id)a0;
- (id)extensionStateWithPreviousState:(id)a0;
- (long long)extensionSupportsCurrentSafariVersion;
- (long long)extensionSupportsSafariShortVersion:(id)a0;
- (char)hasInjectedContentDataForURL:(id)a0;
- (char)hasPermissionToAccessAllURLs;
- (id)initWithExtension:(id)a0 extensionsController:(id)a1 extensionBundleIdentifier:(id)a2 extensionIdentifier:(id)a3 uniqueIdentifier:(id)a4 baseURIHost:(id)a5;
- (id)initWithManifestDictionary:(id)a0 extensionIdentifier:(id)a1 uniqueIdentifier:(id)a2;
- (id)manifestDictionary;
- (long long)permissionStateForURL:(id)a0 inTab:(id)a1;
- (long long)permissionStateForURL:(id)a0 inTab:(id)a1 options:(unsigned long long)a2;
- (long long)permissionStateForURL:(id)a0 options:(unsigned long long)a1;
- (void)previouslyGrantedPermissionOriginsMayHaveBeenChangedExternally:(id)a0 previouslyRevokedPermissionOrigins:(id)a1;
- (char)readAllowedInPrivateBrowsingValueFromDisk;
- (void)removeTemporaryPermissionsForTab:(id)a0;
- (char)shouldShowToolbarItemForTab:(id)a0;

@end
