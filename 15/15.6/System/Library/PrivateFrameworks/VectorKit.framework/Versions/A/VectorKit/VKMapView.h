@class VKMapCameraController, VKMapCanvas, GEOMapRegion, GEOPOICategoryFilter, VKStateCaptureHandler, VKNotificationObserver, VKCamera, NSString, NSMutableArray, NSArray, VKPolylineOverlay, VKManifestTileGroupObserverProxy, VKRouteContext, VKMuninCameraController, VKPuckAnimator, VKMetrics, VKNavContext, VKDaVinciCameraController, VKSceneConfiguration, VKLabelMarker, VKTimedAnimation, NSSet, CADisplay, VKARWalkingCameraController, VKNavCameraController, MDARController;
@protocol VKLabelSelectionFilter, VKMapViewCameraDelegate, VKMapViewDelegate;

@interface VKMapView : CALayer {
    struct optional<VKMapType> { union { char __null_state_; int __val_; } ; BOOL __engaged_; } _mapType;
    VKMapCanvas *_canvas;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _mapDelegateMutex;
    char _loaderOpen;
    NSString *_tileLoaderClientID;
    unsigned char _emphasis;
    unsigned char _levelOfDetail;
    VKTimedAnimation *_edgeInsetAnimation;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _animatingToEdgeInsets;
    char _isChangingMapType;
    double _verticalYaw;
    unsigned char _usage;
    VKNotificationObserver *_notificationObserver;
    long long _navigationDisplayRate;
    char _isInBackground;
    VKMapCameraController *_mapCameraController;
    VKDaVinciCameraController *_davinciMapCameraController;
    VKNavCameraController *_navigationCameraController;
    struct _retain_ptr<VKMuninCameraController *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKMuninCameraController *_obj; struct _retain_objc_arc { } _retain; struct _release_objc_arc { } _release; } _muninCameraController;
    struct _retain_ptr<VKARWalkingCameraController *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKARWalkingCameraController *_obj; struct _retain_objc_arc { } _retain; struct _release_objc_arc { } _release; } _arWalkingCameraController;
    VKNavContext *_navContext;
    struct optional<geo::Coordinate3D<geo::Radians, double>> { union { char __null_state_; struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } __val_; } ; BOOL __engaged_; } _lastAnimatedUserCoordinate;
    struct optional<geo::Unit<geo::RadianUnitDescription, double>> { union { char __null_state_; struct Unit<geo::RadianUnitDescription, double> { double _value; } __val_; } ; BOOL __engaged_; } _lastAnimatedCourse;
    struct PolylineCoordinate { unsigned int index; float offset; } _lastAnimatedPolylineCoordinate;
    struct unique_ptr<md::MapEngine, md::MapEngineDeleter> { struct __compressed_pair<md::MapEngine *, md::MapEngineDeleter> { struct MapEngine *__value_; } __ptr_; } _mapEngine;
    char _didFinishSnapshotting;
    int _flyoverMode;
    MDARController *_arController;
    struct _retain_ptr<VKStateCaptureHandler *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKStateCaptureHandler *_obj; struct _retain_objc_arc { } _retain; struct _release_objc_arc { } _release; } _stateCaptureHandler;
    struct _retain_ptr<VKCamera *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKCamera *_obj; struct _retain_objc_arc { } _retain; struct _release_objc_arc { } _release; } _vkCamera;
    VKRouteContext *_routeContext;
    struct _retain_ptr<NSSet<NSNumber *> *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; NSSet *_obj; struct _retain_objc_arc { } _retain; struct _release_objc_arc { } _release; } _selectedBuildingFeatureIds;
    struct unique_ptr<md::DisplayOptions, std::default_delete<md::DisplayOptions>> { struct __compressed_pair<md::DisplayOptions *, std::default_delete<md::DisplayOptions>> { struct DisplayOptions *__value_; } __ptr_; } _displayOptions;
    unsigned char _thermalLevel;
    int _thermalNotificationToken;
    unsigned long long _thermalPressureLevel;
    char _isPresentationLayer;
    struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKManifestTileGroupObserverProxy *_obj; struct _retain_objc_arc { } _retain; struct _release_objc_arc { } _release; } _manifestTileGroupObserverProxy;
    long long _lastTerrainMode;
    char _lastEnableGlobe;
    char _lastEnableRoundedBuildings;
    char _lastEnableColorizedBuildings;
    char _lastEnableBuildingHeights;
    char _lastEnableAdvancedLighting;
    char _lastEnableAdvancedWater;
    BOOL _didCompleteFirstLabelLayout;
    NSMutableArray *_mapsFeatureListeners;
    struct { unsigned char timePeriod; unsigned char overlayType; unsigned char applicationState; unsigned char applicationSubState; unsigned char searchResultsType; char mapHasLabels; } _mapDisplayStyle;
    char _displayStyleOverrideEnabled;
    double _contentsScale;
    unsigned long long _navCameraDebugFlags;
}

@property (readonly, nonatomic) VKMapCanvas *mapCanvas;
@property (readonly, nonatomic) const void *mapEngine;
@property (readonly, nonatomic) double heading;
@property (nonatomic) char virtualParallaxEnabled;
@property (nonatomic) char shouldLoadFallbackTiles;
@property (nonatomic) char shouldLoadMapMargin;
@property (weak, nonatomic) id<VKMapViewDelegate> mapDelegate;
@property (weak, nonatomic) id<VKMapViewCameraDelegate> cameraDelegate;
@property (weak, nonatomic) id<VKLabelSelectionFilter> labelSelectionFilter;
@property (nonatomic) char staysCenteredDuringPinch;
@property (nonatomic) char staysCenteredDuringRotation;
@property (retain, nonatomic) CADisplay *hostDisplay;
@property (nonatomic) unsigned int hostDisplayID;
@property (nonatomic) char isPitchable;
@property (readonly, nonatomic, getter=isPitched) char pitched;
@property (readonly, nonatomic, getter=isFullyPitched) char fullyPitched;
@property (readonly, nonatomic, getter=minPitch) double minPitch;
@property (readonly, nonatomic, getter=maxPitch) double maxPitch;
@property (readonly, nonatomic) char canEnter3DMode;
@property (readonly, nonatomic) char supportsGPUFrameCaptureToDestination;
@property (readonly, nonatomic, getter=isShowingFlyover) char showingFlyover;
@property (readonly, nonatomic) char canShowFlyover;
@property (nonatomic) char trafficEnabled;
@property (nonatomic) char trafficIncidentsEnabled;
@property (readonly, nonatomic) char hasTraffic;
@property (nonatomic) char compressedBuildingsEnabled;
@property (nonatomic) long long displayRate;
@property (nonatomic) long long navigationDisplayRate;
@property (nonatomic) char localizeLabels;
@property (nonatomic) long long labelScaleFactor;
@property (readonly, nonatomic) int flyoverMode;
@property (nonatomic) int mapType;
@property (nonatomic) struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; char x5; } mapDisplayStyle;
@property (nonatomic) unsigned long long navCameraMode;
@property (nonatomic) float styleZOffsetScale;
@property (nonatomic) long long targetDisplay;
@property (nonatomic) struct { char x0; } vehicleState;
@property (nonatomic) long long applicationUILayout;
@property (nonatomic) unsigned char mapKitUsage;
@property (readonly, nonatomic) unsigned char mapsUsage;
@property (nonatomic) unsigned char mapKitClientMode;
@property (readonly, nonatomic) VKMetrics *metrics;
@property (nonatomic, getter=isOfflineRegionSelector, setter=setOfflineRegionSelector:) char offlineRegionSelector;
@property (nonatomic, getter=isOfflineMode) char offlineMode;
@property (nonatomic, getter=isLabelMarkerSelectionEnabled) char labelMarkerSelectionEnabled;
@property (nonatomic) long long shieldSize;
@property (nonatomic) long long navigationShieldSize;
@property (nonatomic) long long shieldIdiom;
@property (nonatomic) char showsRoadLabels;
@property (nonatomic) char showsRoadShields;
@property (nonatomic) char showsPointLabels;
@property (nonatomic) char showsContourLabels;
@property (nonatomic) char showsPhysicalFeatureLabels;
@property (nonatomic) char showsLabels;
@property (nonatomic) char showsPointsOfInterest;
@property (nonatomic) char showsBuildings;
@property (nonatomic) char showsVenues;
@property (nonatomic) char showsLiveEVData;
@property (nonatomic) char loadMuninAvailability;
@property (nonatomic) long long terrainMode;
@property (nonatomic) char enableGlobe;
@property (nonatomic) char enableRoundedBuildings;
@property (nonatomic) char enableColorizedBuildings;
@property (nonatomic) char enableBuildingHeights;
@property (nonatomic) char enableAdvancedLighting;
@property (nonatomic) char enableAdvancedWater;
@property (nonatomic) char renderOverlayPolygons;
@property (nonatomic) char renderInverseFills;
@property (readonly, nonatomic) char isShowingCuratedElevatedGround;
@property (retain, nonatomic) GEOPOICategoryFilter *pointsOfInterestFilter;
@property (readonly, nonatomic) char isCameraInHikingBoundary;
@property (readonly, nonatomic) char isCameraInHikingBufferRegion;
@property (nonatomic) char showsHiking;
@property (nonatomic) char showsHillshade;
@property (nonatomic) unsigned long long navCameraDebugFlags;
@property (readonly, nonatomic) VKPuckAnimator *userLocationAnimator;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } edgeInsets;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } fullyOccludedEdgeInsets;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } labelEdgeInsets;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } labelEdgeWidths;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property (readonly, nonatomic) double yaw;
@property (readonly, nonatomic) double presentationYaw;
@property (readonly, nonatomic) double pitch;
@property (readonly, nonatomic) double altitude;
@property (readonly, nonatomic) struct { double x0; double x1; double x2; } centerCoordinate;
@property (nonatomic, getter=isGesturing) char gesturing;
@property (nonatomic) char iconsShouldAlignToPixels;
@property (readonly, nonatomic, getter=isFullyDrawn) char fullyDrawn;
@property (readonly, nonatomic, getter=getSceneState) unsigned long long sceneState;
@property (nonatomic) char trackingCameraShouldHandleGestures;
@property (nonatomic) double trackingZoomScale;
@property (nonatomic) struct { char x0; double x1; char x2; char x3; } annotationTrackingBehavior;
@property (readonly, nonatomic, getter=isAnimatingToTrackAnnotation) char animatingToTrackAnnotation;
@property (readonly, nonatomic) char isFlyoverUnificationEnabled;
@property (readonly, nonatomic) VKLabelMarker *selectedLabelMarker;
@property (nonatomic) char isMKRenderingSelectionBalloon;
@property (readonly, nonatomic) NSArray *labelMarkers;
@property (retain, nonatomic) VKPolylineOverlay *focusedLabelsPolyline;
@property (nonatomic) char rendersInBackground;
@property (nonatomic) char debugLayoutContinuously;
@property (readonly, nonatomic) char enableDebugLabelHighlighting;
@property (readonly, nonatomic) NSArray *visibleTileSets;
@property (nonatomic) unsigned char applicationState;
@property (nonatomic) unsigned char applicationSubState;
@property (nonatomic) unsigned char displayedSearchResultsType;
@property (readonly, nonatomic) VKSceneConfiguration *sceneConfiguration;

+ (char)_globeIsEnabled;
+ (char)_elevatedGroundIsAvailable;
+ (char)_elevatedGroundIsEnabled;
+ (char)_globeIsAvailable;
+ (void)updateUserLocationAnnotationStateForNavigationPuck:(id)a0 isPuckEnabled:(BOOL)a1 synchronizedState:(void *)a2;

- (void)dealloc;
- (void).cxx_destruct;
- (void)setHidden:(char)a0;
- (id).cxx_construct;
- (id)initWithLayer:(id)a0;
- (void)renderInContext:(struct CGContext { } *)a0;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setContentsScale:(double)a0;
- (void)setNeedsLayout;
- (id)initWithDescriptor:(id)a0;
- (id)detailedDescription;
- (id)detailedDescriptionDictionaryRepresentation;
- (unsigned char)levelOfDetail;
- (id)onscreenImageResources;
- (void)setFlyoverMode:(int)a0;
- (struct CGPoint { double x0; double x1; })convertMapPoint:(struct { double x0; double x1; })a0 toPointToLayer:(id)a1;
- (void)forceCameraUpdateForFrameResize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })mapRegionBounds;
- (double)zoomLevelAdjustmentForTileSize:(long long)a0;
- (void)_forceLayoutForSuspensionSnapShot;
- (void)addCustomFeatureDataSource:(id)a0;
- (void)addExternalAnchor:(id)a0;
- (void)addOverlay:(id)a0;
- (void)addPersistentRouteOverlay:(id)a0;
- (void)addRouteOverlay:(id)a0;
- (id /* block */)annotationCoordinateTest;
- (id /* block */)annotationRectTest;
- (id)attributionsForCurrentRegion;
- (char)canEnter3DModeFlyoverForTileSize:(long long)a0;
- (char)cancelPendingMove;
- (id)clearVenueBuildingFloorSelections;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct { double x0; double x1; })a0 toCameraModelPointToLayer:(id)a1;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct { double x0; double x1; })a0 toPointToLayer:(id)a1;
- (struct { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toCoordinateFromLayer:(id)a1;
- (struct { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toMapPointFromLayer:(id)a1;
- (id)currentMarker;
- (float)currentZoomLevel;
- (double)currentZoomLevelForTileSize:(long long)a0;
- (void)debugHighlightLabelAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (short)defaultFloorOrdinalForVenueBuilding:(id)a0;
- (void)deselectFeatureId;
- (void)deselectLabelMarker;
- (void)deselectTrails;
- (void)deselectTransitLineMarker;
- (void)deselectVenuePoiFeatureId;
- (void)didEnterBackground;
- (char)displayedFloorIsDefaultForVenueBuilding:(id)a0;
- (short)displayedFloorOrdinalForVenueBuilding:(id)a0;
- (double)distanceFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1 fromLayer:(id)a2 withPrecision:(long long)a3;
- (double)durationToAnimateToMapRegion:(id)a0;
- (void)enableViewDataLoading:(char)a0;
- (void)enter3DMode;
- (void)enterARModeAtCoordinate:(struct { double x0; double x1; })a0;
- (void)enterMuninForMarker:(id)a0 withHeading:(double)a1;
- (void)enterMuninForStorefrontView:(id)a0 secondaryStorefrontView:(id)a1;
- (void)exit3DMode;
- (void)exitARMode;
- (void)forceFrame;
- (void)forceLayout;
- (void)insertOverlay:(id)a0 aboveOverlay:(id)a1;
- (void)insertOverlay:(id)a0 belowOverlay:(id)a1;
- (char)isDimmingBaseMap;
- (char)isPointValidForGesturing:(struct CGPoint { double x0; double x1; })a0;
- (id)labelMarkerForCustomFeatureAnnotation:(id)a0;
- (id)labelMarkerForCustomFeatureAnnotation:(id)a0 dataSource:(id)a1;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { double x0; double x1; })a0 selectableLabelsOnly:(char)a1;
- (double)maximumZoomLevelForTileSize:(long long)a0;
- (void)moveToFlyoverTourStartPosition:(id)a0 duration:(double)a1 completion:(id /* block */)a2;
- (char)moveToMarker:(id)a0 withHeading:(double)a1 animated:(char)a2 completionHandler:(id /* block */)a3;
- (char)moveToStorefrontView:(id)a0 animated:(char)a1 completionHandler:(id /* block */)a2;
- (id)muninMarkerAtCoordinate:(struct { double x0; double x1; })a0 completeMarkerHandler:(id /* block */)a1;
- (void)navigationCameraReturnToPuck;
- (id)navigationPuck;
- (void)panWithOffset:(struct CGPoint { double x0; double x1; })a0 relativeToScreenPoint:(struct CGPoint { double x0; double x1; })a1 animated:(char)a2 duration:(double)a3 completionHandler:(id /* block */)a4;
- (void)pauseFlyoverTourAnimation;
- (void)prepareFlyoverAnimation:(id)a0 completion:(id /* block */)a1;
- (void)removeCustomFeatureDataSource:(id)a0;
- (void)removeExternalAnchor:(id)a0;
- (void)removeOverlay:(id)a0;
- (void)removePersistentRouteOverlay:(id)a0;
- (void)removeRouteOverlay:(id)a0;
- (void)requestHikingContextualRegionDoesIntersectForLocation:(struct { double x0; double x1; })a0;
- (void)requestHikingToolTipRegionIDForLocation:(struct { double x0; double x1; })a0;
- (void)resumeFlyoverTourAnimation;
- (void)runAnimation:(id)a0;
- (void)selectLabelMarker:(id)a0;
- (void)selectLabelMarker:(id)a0 completion:(id /* block */)a1;
- (void)selectTransitLineMarker:(id)a0;
- (id)selectedTransitLineIDs;
- (void)setCenterCoordinate:(struct { double x0; double x1; })a0 altitude:(double)a1 yaw:(double)a2 pitch:(double)a3 duration:(double)a4 timingCurve:(id /* block */)a5 completion:(id /* block */)a6;
- (void)setCenterCoordinateDistanceRange:(struct { double x0; double x1; BOOL x2; })a0 duration:(double)a1 timingFunction:(id /* block */)a2;
- (void)setDimmingBaseMap:(char)a0;
- (void)setDisplayedFloorOrdinal:(short)a0 forVenueBuilding:(id)a1;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0 duration:(double)a1 timingFunction:(id)a2 completionHandler:(id /* block */)a3;
- (void)setEmphasis:(unsigned char)a0 animated:(BOOL)a1;
- (void)setMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; char x5; })a0 animated:(char)a1;
- (void)setMapRegion:(id)a0 pitch:(double)a1 yaw:(double)a2;
- (void)setMapRegion:(id)a0 pitch:(double)a1 yaw:(double)a2 duration:(double)a3 completion:(id /* block */)a4;
- (void)setMapRegion:(id)a0 pitch:(double)a1 yaw:(double)a2 duration:(double)a3 timingCurve:(id /* block */)a4 completion:(id /* block */)a5;
- (void)setMapType:(int)a0 animated:(char)a1;
- (void)setRegionRestriction:(id)a0 duration:(double)a1 timingFunction:(id /* block */)a2;
- (void)setRouteContext:(id)a0;
- (void)setRouteLineSplitAnnotation:(id)a0;
- (void)setSelectedFeatureId:(unsigned long long)a0;
- (void)setSelectedTrailId:(unsigned long long)a0;
- (void)setSelectedTrailWithId:(unsigned long long)a0 name:(id)a1 locale:(id)a2;
- (void)setSelectedVenuePoiFeatureId:(unsigned long long)a0;
- (void)setShowsHiking:(char)a0 withTopographicFeatures:(char)a1;
- (void)setSupportedEVConnectorTypes:(id)a0;
- (void)setYaw:(double)a0 animated:(char)a1;
- (char)shouldHideOffscreenSelectedAnnotation;
- (char)showsTopographicFeatures;
- (void)startFlyoverAnimation:(id)a0 animateToStart:(char)a1 completion:(id /* block */)a2;
- (void)startFlyoverTourAnimation:(unsigned long long)a0 animateToStart:(char)a1 completion:(id /* block */)a2;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(char)a1;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startTrackingAnnotation:(id)a0 trackHeading:(char)a1 animated:(char)a2 duration:(double)a3 timingFunction:(id /* block */)a4;
- (void)stopFlyoverAnimation;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopSnappingAnimations;
- (void)stopTrackingAnnotation;
- (char)stylesheetIsDevResource;
- (char)supportsMapType:(int)a0;
- (char)supportsNightMode;
- (char)tapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (double)topDownMinimumZoomLevelForTileSize:(long long)a0;
- (id)transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)transitLineMarkersInCurrentViewport;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (id)venueBuildingWithFocus;
- (id)venueWithFocus;
- (id)venueWithID:(unsigned long long)a0;
- (void)willEnterForeground;
- (void)willStopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 withVelocity:(struct CGPoint { double x0; double x1; })a1;
- (void)zoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)zoomToLevel:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1;
- (float)zoomToRevealVenueBuildingFloorplan:(id)a0;
- (float)zoomToRevealVenueFloorplan:(id)a0;
- (void)didPresent;
- (void)didReceiveMemoryWarning;
- (void)stopTracking;
- (void)_updateBackgroundColor;
- (void)setDisableGrid:(char)a0;
- (void)arController:(id)a0 didEncounterError:(id)a1;
- (void)nearestVenueDidChange:(const void *)a0 building:(const void *)a1;
- (char)rastersDisabled;
- (char)_advancedLightingAllowed;
- (char)_advancedWaterAllowed;
- (void)_applyMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; char x5; })a0 animated:(char)a1 duration:(double)a2;
- (char)_buildingHeightsAllowed;
- (void)_closeLoaderConnection:(char)a0;
- (char)_colorizedBuildingsAllowed;
- (void)_configureDefaultSettings;
- (char)_createDisplayLayer;
- (char)_daVinciDataAvailable;
- (char)_hikingIsAvailable;
- (char)_hillshadeIsAvailable;
- (void *)_labelSettings;
- (id)_mapDelegateQueue;
- (char)_modernMapAllowed;
- (void)_notifyDelegateFlyoverTourLabelChanged:(id)a0;
- (void)_postDelegateCallbackBlock:(id /* block */)a0;
- (char)_realTimeEVChargerIsEnabled;
- (void)_reconfigurePermissions;
- (char)_roundedBuildingsAllowed;
- (void)_runFlyoverTourStateChange:(int)a0 completion:(id /* block */)a1;
- (void)_setFloorSwitcherZoomPadding:(float)a0;
- (void)_setThermalPressureLevel:(unsigned long long)a0;
- (void)_setupThermalMonitor;
- (void)_shutdownThermalMonitor;
- (void)_updateBuildingCompressionSetting;
- (void)_updateCameraThermalOptions;
- (void)_updateMapDisplayStyle;
- (void)_updateOnlyShowRoadClosures;
- (void)_updateThermalPressureLevel;
- (void)activateInternalSettings;
- (void)activeARWalkingFeatureDidUpdate:(id)a0;
- (id)activeLogics;
- (void)arController:(id)a0 arSessionWasInterrupted:(unsigned long long)a1;
- (void)arController:(id)a0 didChangeTrackingState:(unsigned long long)a1 reason:(unsigned long long)a2;
- (void)arControllerSessionInterruptionEnded:(id)a0;
- (void)arWalkingElevationRequestFailure:(id)a0;
- (void)arWalkingFeatureSetStateDidUpdate:(id)a0;
- (char)buildingFootprintsDisabled;
- (id)buildingMarkerAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (char)canRotate;
- (char)canZoomInForTileSize:(long long)a0;
- (char)canZoomOutForTileSize:(long long)a0;
- (long long)carDisplayConfig;
- (long long)carDisplayType;
- (void)clearPreviouslySelectedLabelMarker;
- (void)clearScene;
- (struct unordered_map<unsigned int, unsigned long long, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long long>>> { struct __hash_table<std::__hash_value_type<unsigned int, unsigned long long>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, unsigned long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float x0; } x3; } x0; })clientStyleAttributes;
- (void)closeLoaderConnection;
- (id)consoleString:(char)a0;
- (id)currentCanvas;
- (long long)currentMapMode;
- (void)debugHighlightFeatureMarker:(const void *)a0;
- (id)debugLabelString:(char)a0;
- (void)didFinishLoadingData;
- (void)didFinishLoadingDataWithError:(id)a0;
- (void)didFinishSnapshotting;
- (void)didReceiveFlushTileCaches;
- (void)didReceiveLocalChanged;
- (void)didReceivePowerStateChanged;
- (void)didReceiveThermalStateChanged;
- (void)didStartLoadingData;
- (void)didUpdateSceneStatus:(unsigned char)a0;
- (void)didUpdateVerticalYawTo:(double)a0;
- (void)disableMapDisplayStyleDebugOverride;
- (void)disableTestStatistics;
- (void)disableTileStatistics;
- (unsigned char)emphasis;
- (void)enableMapDisplayStyleDebugOverride:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; char x5; })a0;
- (void)enableTestStatistics;
- (void)enableTileStatistics;
- (void)flushTileLoads;
- (void)forceResolveCameraController;
- (long long)getCurrentSetARInterfaceOrientation;
- (void)goToTileX:(int)a0 Y:(int)a1 Z:(int)a2 tileSize:(int)a3;
- (char)gridDisabled;
- (id)iconForStyleAttributes:(id)a0 contentScale:(double)a1 size:(long long)a2 transparent:(char)a3;
- (id)initShouldRasterize:(char)a0 inBackground:(char)a1 contentScale:(double)a2 auditToken:(id)a3 mapViewPurpose:(long long)a4;
- (id)initShouldRasterize:(char)a0 inBackground:(char)a1 contentScale:(double)a2 auditToken:(id)a3 mapViewPurpose:(long long)a4 allowsAntialiasing:(char)a5;
- (void)injectDebugARFeatures:(id)a0;
- (void)injectDebugARUserRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })a0;
- (char)isEffectivelyHidden;
- (char)isLoadingMuninMetadata;
- (void)labelManagerDidLayout;
- (void)labelMarkerDidChangeState:(const void *)a0;
- (char)labelsDisabled;
- (void)location:(struct { double x0; double x1; })a0 isInHikingContextualRegion:(BOOL)a1;
- (void)locationInHikingToolTipRegion:(unsigned long long)a0;
- (void)map:(id)a0 canShowFlyoverDidChange:(char)a1;
- (void)map:(id)a0 didEnterARMode:(char)a1;
- (void)mapController:(id)a0 requestsDisplayRate:(long long)a1;
- (void)mapDidFinishChangingMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; char x5; })a0;
- (void)mapDidReloadStylesheet:(id)a0;
- (id)markerAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (double)minimumZoomLevelForTileSize:(long long)a0;
- (void)muninJunctionDidChange:(const void *)a0 currentRoad:(const void *)a1 localize:(char)a2;
- (id)muninMarkerAtCoordinate:(struct { double x0; double x1; })a0;
- (void)openLoaderConnection;
- (void)pauseTracking;
- (void)performStylesheetDidChange;
- (char)polygonsDisabled;
- (void)populateDebugNode:(void *)a0 withOptions:(const void *)a1;
- (id)pptTileStatisticsForMapType:(int)a0 latitude:(double)a1 longitude:(double)a2 zoom:(float)a3 width:(double)a4 height:(double)a5 rect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a6;
- (void)projectCoordinate:(struct { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; } *)a1;
- (struct optional<double> { union { char x0; double x1; } x0; BOOL x1; })puckAnimator:(id)a0 getElevationWithCoordinate:(const void *)a1;
- (void)puckAnimator:(id)a0 runAnimation:(id)a1;
- (void)puckAnimator:(id)a0 updatedPosition:(const void *)a1 course:(const void *)a2 polylineCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })a3;
- (void)puckAnimatorDidStop:(id)a0;
- (void)puckLocationTracingEvent:(id)a0;
- (id)rapMarkerAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)reloadStylesheet;
- (void)resetTestStatistics;
- (void)resetTileStatistics;
- (id)resolveMapCameraController;
- (id)roadLabelTilesInScene;
- (char)roadsDisabled;
- (id)routeContext;
- (void)selectedLabelMarkerDidCompleteLayout:(const void *)a0;
- (void)selectedLabelMarkerWillDisappear:(const void *)a0;
- (void)setARInterfaceOrientation:(long long)a0;
- (void)setApplicationState:(unsigned char)a0 displayedSearchResultsType:(unsigned char)a1;
- (void)setCameraFramingInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0;
- (void)setCameraHorizontalOffset:(double)a0 duration:(double)a1 timingFunction:(id)a2;
- (void)setCanonicalSkyHeight:(double)a0;
- (void)setCarDisplayConfig:(long long)a0 animated:(BOOL)a1;
- (void)setClientLocalizedStrings:(id)a0;
- (void)setCurrentLocationText:(id)a0;
- (void)setDesiredMapMode:(long long)a0;
- (void)setDimmingBaseMap:(char)a0 animated:(char)a1 duration:(double)a2;
- (void)setDisableBuildingFootprints:(char)a0;
- (void)setDisableLabels:(char)a0;
- (void)setDisablePolygons:(char)a0;
- (void)setDisableRasters:(char)a0;
- (void)setDisableRoads:(char)a0;
- (void)setDisableShadows:(char)a0;
- (void)setDisableTransitLines:(char)a0;
- (void)setExternalTrafficFeatures:(id)a0 areRouteTrafficFeaturesActive:(char)a1;
- (void)setHasVehicleHeading:(char)a0;
- (void)setHiddenTrafficIncidentFeatures:(id)a0;
- (void)setLabelExclusionRegions:(id)a0;
- (void)setLevelOfDetail:(unsigned char)a0 animated:(char)a1;
- (void)setLoadMuninMetadata:(char)a0;
- (void)setMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; char x5; })a0 animated:(char)a1 duration:(double)a2;
- (void)setModernMapEnabled:(char)a0;
- (void)setNavContext:(id)a0;
- (void)setPreferredUnits:(unsigned long long)a0;
- (void)setPreviouslySelectedLabelMarker:(id)a0;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })a0;
- (void)setScreenLabelFeatures:(id)a0;
- (void)setSelectedBuildingFeatureIds:(id)a0;
- (void)setSkippedRouteLineSplitAnnotation:(id)a0;
- (void)setUseSmallCache:(char)a0;
- (void)snapMapAfterModeChange;
- (id)testStatistics;
- (void)tileGroupDidChange;
- (void)tileGroupWillChange;
- (id)tileStatistics;
- (char)transitLinesDisabled;
- (void)transitionToTracking:(char)a0 mapMode:(long long)a1 startLocation:(struct { double x0; double x1; })a2 startCourse:(double)a3 pounceCompletionHandler:(id /* block */)a4;
- (void)updateLightingLogic;
- (id)venueAtLocation:(struct { double x0; double x1; })a0;
- (id)venueAtLocation:(struct { double x0; double x1; })a0 withMarginForError:(char)a1;
- (id)venueAtLocation:(struct { double x0; double x1; })a0 withMarginForError:(char)a1 includeNonRevealedVenues:(char)a2;
- (BOOL)wantsTimerTick;
- (void)willBecomeFullyDrawn;
- (void)willLayoutWithTimestamp:(double)a0 withContext:(void *)a1;
- (float)worldSpaceWidthOfView;

@end
