@class _valid, NSString, VKDetachedNavGestureCameraBehavior, VKGestureCameraBehavior, VKSceneConfiguration, VKTimedAnimation, VKScreenCanvas, VKDaVinciGestureCameraController, VKAttachedNavGestureCameraBehavior, GEOMapRegion, VKNavContext;
@protocol VKInteractiveMap;

@interface VKNavCameraController : VKCameraController <VKNavigationCameraController, VKGesturingCameraController, VKNavContextObserver> {
    unsigned char _cameraType;
    unsigned char _headingType;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _puckCourse;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _headingDelta;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _headingMinDelta;
    double _lastHeightDelta;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _lastCalculatedCameraFrame;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _cameraFrame;
    char _needsUpdate;
    struct Spring<double, 1, gdc::SpringType::Linear> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _pitchSpring;
    struct Spring<double, 1, gdc::SpringType::Angular> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _headingSpring;
    struct Spring<double, 1, gdc::SpringType::Linear> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _distanceFromTargetSpring;
    struct Spring<double, 2, gdc::SpringType::Linear> { struct Matrix<double, 2, 1> { double _e[2]; } _position; struct Matrix<double, 2, 1> { double _e[2]; } _velocity; struct Matrix<double, 2, 1> { double _e[2]; } _restingPosition; double _kSpring; double _kDamper; } _screenPositionSpring;
    struct Unit<geo::MeterUnitDescription, double> { double _value; } _cameraDistanceFromTarget;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _cameraPitch;
    double _previousUpdateTime;
    double _ignoreStyleChangeStartTime;
    double _lastSARUpdateTime;
    double _maxZoomScale;
    double _minZoomScale;
    VKGestureCameraBehavior *_gestureBehavior;
    VKAttachedNavGestureCameraBehavior *_attachedGestureBehavior;
    VKDetachedNavGestureCameraBehavior *_detachedGestureBehavior;
    VKDaVinciGestureCameraController *_davinciGestureCameraController;
    char _isDetached;
    char _isIgnoringStyleChange;
    char _panning;
    char _rotating;
    char _pitching;
    char _zooming;
    VKTimedAnimation *_transitionAnimation;
    VKTimedAnimation *_snapPitchAnimation;
    VKTimedAnimation *_snapHeadingAnimation;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _transitionFrame;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } _currentStyleName;
    struct vector<geo::Coordinate3D<geo::Radians, double>, std::allocator<geo::Coordinate3D<geo::Radians, double>>> { void *__begin_; void *__end_; struct __compressed_pair<geo::Coordinate3D<geo::Radians, double> *, std::allocator<geo::Coordinate3D<geo::Radians, double>>> { void *__value_; } __end_cap_; } _coordinatesToFrame;
    unsigned char _styleManeuversToFrame;
    unsigned char _maneuversToFrame;
    unsigned char _styleLegsToFrame;
    unsigned char _segmentsToFrame;
    double _minCameraHeight;
    double _maxCameraHeight;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _minCameraPitch;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _maxCameraPitch;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _previousMapEdgeInsets;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _framingEdgeInset;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _framingEdgeInsetProportional;
    struct Matrix<float, 2, 1> { float _e[2]; } _puckMovementBoundsMin;
    struct Matrix<float, 2, 1> { float _e[2]; } _puckMovementBoundsMax;
    struct Matrix<float, 2, 1> { float _e[2]; } _idealPuckScreenPosition;
    double _minHeightDeltaChangeHorizontal;
    double _maxHeightDeltaChangeHorizontal;
    double _minHeightDeltaChangeVertical;
    double _maxHeightDeltaChangeVertical;
    double _halfPuckSize;
    struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _viewableScreenRect;
    struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _framingScreenRect;
    BOOL _enablePan;
    BOOL _enableZoom;
    BOOL _enablePitch;
    BOOL _enableRotate;
    float _panReturnDelayTime;
    unsigned char _alternateFramingSource;
    unsigned char _secondaryAlternateFramingSource;
    double _maxFramingDistance;
    double _framingDistanceAfterManeuver;
    VKNavContext *_navContext;
    struct { double latitude; double longitude; } _locationCoordinate;
    struct PolylineCoordinate { unsigned int index; float offset; } _routeCoordinate;
    BOOL _frameAllGroupedManeuvers;
    unsigned char _maxManeuversToFrame;
    BOOL _ignorePointsBehind;
    struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _routeFocusCoordinate;
    unsigned long long _lastTargetStyleIdentifier;
    unsigned long long _previousSearchItemCount;
    double _desiredZoomScale;
    float _animationTime;
    BOOL _isTracking;
    struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
    double _depthNear;
    BOOL _leftHanded;
    BOOL _sentZoomNotification;
    BOOL _enableDynamicFrameRate;
    struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _cornerCoordinates[4];
    struct WindowedSampler<60UL> { double _min; double _max; double _avg; double _sum; struct optional<unsigned long> { union { char __null_state_; unsigned long long __val_; } ; BOOL __engaged_; } _idx; struct array<double, 60UL> { double __elems_[60]; } _samples; } _pixelSamples;
    struct Sampler { double _min; double _max; double _avg; double _sum; unsigned long long _count; } _requesteDisplayRateSampler;
    long long _requestedDisplayRate;
    BOOL _isElevatedRoute;
    void *_cameraManager;
    struct unique_ptr<md::LabelMetrics, std::default_delete<md::LabelMetrics>> { struct __compressed_pair<md::LabelMetrics *, std::default_delete<md::LabelMetrics>> { struct LabelMetrics *__value_; } __ptr_; } _labelMetrics;
    struct vector<NavCameraPixelFrameRate, std::allocator<NavCameraPixelFrameRate>> { struct NavCameraPixelFrameRate *__begin_; struct NavCameraPixelFrameRate *__end_; struct __compressed_pair<NavCameraPixelFrameRate *, std::allocator<NavCameraPixelFrameRate>> { struct NavCameraPixelFrameRate *__value_; } __end_cap_; } _pixelChangeFrameRate;
    struct Matrix<double, 3, 1> { double _e[3]; } _lastProjectedPosition;
    double _farClipPlaneFactor;
    struct shared_ptr<gss::StylesheetQuery<gss::ScenePropertyID>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _sceneQuery;
    unsigned long long _cameraMode;
    char _didNavCameraTransition;
    struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _valid *_listener; struct shared_ptr<std::atomic<bool>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } x0; struct function<void (bool)> { struct __value_func<void (bool)> { struct type { unsigned char __lx[32]; } __buf_; void *__f_; } __f_; } _delegate; } _showOverlay;
    struct Monitorable<md::ConfigValue<GEOConfigKeyUInteger, unsigned int>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; unsigned int _value; _valid *_listener; struct shared_ptr<std::atomic<bool>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } x0; struct function<void (unsigned int)> { struct __value_func<void (unsigned int)> { struct type { unsigned char __lx[32]; } __buf_; void *__f_; } __f_; } _delegate; } _debugPage;
    struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _valid *_listener; struct shared_ptr<std::atomic<bool>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } x0; struct function<void (bool)> { struct __value_func<void (bool)> { struct type { unsigned char __lx[32]; } __buf_; void *__f_; } __f_; } _delegate; } _showLegend;
    char _navCameraTextConsoleCreated;
    char _navCameraOverlayConsoleCreated;
}

@property (weak, nonatomic) VKScreenCanvas<VKInteractiveMap> *screenCanvas;
@property (weak, nonatomic) VKSceneConfiguration *sceneConfiguration;
@property (nonatomic) double zoomScale;
@property (nonatomic) struct VKEdgeInsets { float top; float left; float bottom; float right; } clientFramingInsets;
@property (readonly, nonatomic) struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } puckCoordinate;
@property (nonatomic) struct { double x0; double x1; } centerCoordinate;
@property (nonatomic) double distanceFromCenterCoordinate;
@property (nonatomic) double heading;
@property (nonatomic) double pitch;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property (readonly, nonatomic) double altitude;
@property (readonly, nonatomic) double minPitch;
@property (readonly, nonatomic) double maxPitch;
@property (readonly, nonatomic) char isPitched;
@property (readonly, nonatomic) char isRotated;
@property (readonly, nonatomic) char isFullyPitched;
@property (readonly, nonatomic) void *mapDataAccess;
@property (readonly, nonatomic) struct AnimationRunner { struct MapEngine *x0; } *animationRunner;
@property (readonly, nonatomic) struct RunLoopController { struct MapEngine *x0; long long x1; } *runLoopController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0;
- (void)stop;
- (void)updateState;
- (long long)tileSize;
- (void)setCameraFrame:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })a0;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })cameraFrame;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; })a0;
- (char)isRotateEnabled;
- (char)canEnter3DMode;
- (double)currentZoomLevel;
- (long long)displayRate;
- (char)isGesturing;
- (char)isPitchEnabled;
- (double)maximumZoomLevel;
- (double)minimumZoomLevel;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(char)a1;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopAnimations;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopSnappingAnimations;
- (char)tapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (void)zoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (char)_canZoomIn;
- (char)_canZoomOut;
- (void)_addWaypointToFraming:(id)a0 forRoute:(id)a1;
- (struct Matrix<double, 2, 1> { double x0[2]; })puckScreenPoint;
- (void)_setNeedsUpdate;
- (void)_updateSprings:(double)a0;
- (void)canvasDidLayout;
- (float)maxPitchForNormalizedZoomLevel:(float)a0;
- (float)minPitchForNormalizedZoomLevel:(float)a0;
- (void)_addAdditionalRoutePointsToFrameToList:(void *)a0;
- (char)_addStepToFraming:(unsigned long long)a0 forRoute:(id)a1;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; })_calculateCoordinatesToFrameBounds;
- (double)_calculateMaxPixelChangeAndUpdateCorners;
- (void)_clearDebugConsole:(int)a0;
- (struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })_coordinateForGeoLocation:(struct { double x0; double x1; double x2; })a0;
- (struct DebugTreeNode { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x1; struct vector<gdc::DebugTreeNode, std::allocator<gdc::DebugTreeNode>> { struct DebugTreeNode *x0; struct DebugTreeNode *x1; struct __compressed_pair<gdc::DebugTreeNode *, std::allocator<gdc::DebugTreeNode>> { struct DebugTreeNode *x0; } x2; } x2; struct vector<gdc::DebugTreeProperty, std::allocator<gdc::DebugTreeProperty>> { struct DebugTreeProperty *x0; struct DebugTreeProperty *x1; struct __compressed_pair<gdc::DebugTreeProperty *, std::allocator<gdc::DebugTreeProperty>> { struct DebugTreeProperty *x0; } x2; } x3; })_createMainDebugNode;
- (struct DebugTreeNode { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x1; struct vector<gdc::DebugTreeNode, std::allocator<gdc::DebugTreeNode>> { struct DebugTreeNode *x0; struct DebugTreeNode *x1; struct __compressed_pair<gdc::DebugTreeNode *, std::allocator<gdc::DebugTreeNode>> { struct DebugTreeNode *x0; } x2; } x2; struct vector<gdc::DebugTreeProperty, std::allocator<gdc::DebugTreeProperty>> { struct DebugTreeProperty *x0; struct DebugTreeProperty *x1; struct __compressed_pair<gdc::DebugTreeProperty *, std::allocator<gdc::DebugTreeProperty>> { struct DebugTreeProperty *x0; } x2; } x3; })_createStyleDebugNode;
- (float)_currentRoadSignOffset;
- (id)_debugTextForPage:(unsigned long long)a0;
- (id)_detachedGestureController;
- (struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> { void *x0; struct __shared_weak_count *x1; })_getActiveSceneManager;
- (char)_hasRunningAnimation;
- (double)_normalizedZoomLevelForDisplayZoomLevel:(double)a0;
- (void)_populateDebugNode:(void *)a0 forFrame:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })a1;
- (void)_setDetached:(char)a0;
- (void)_setNavCameraIsDetached:(char)a0;
- (void)_setNavCameraTransitionComplete:(char)a0;
- (void)_snapHeading;
- (void)_snapPitch;
- (char)_springsNeedUpdate;
- (void)_updateCameraLimits;
- (void)_updateClipPlanes;
- (void)_updateDebugOverlay;
- (void)_updateDebugText;
- (void)_updateDidNavCameraTransition;
- (void)_updateForAnimatedEdgeInsets;
- (void)_updateLabelMetrics;
- (void)_updateObserverCouldZoomIn:(char)a0 couldZoomOut:(char)a1;
- (void)_updateRouteSinuosity;
- (void)_updateSceneQuery;
- (void)_updateSceneStyles:(char)a0 updatePitchLimitOnly:(char)a1;
- (void)_updateStyles;
- (void)_updateZoomScaleLimts;
- (void)animateCameraWithDuration:(float)a0 fromFrame:(const void *)a1 completionHandler:(id /* block */)a2;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })calculateHeading;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; })calculateViewableScreenRect;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; })calculateViewableScreenRectForEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0;
- (unsigned char)cameraHeadingType;
- (char)canZoomInForTileSize:(long long)a0;
- (char)canZoomOutForTileSize:(long long)a0;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })currentCameraFrame;
- (long long)defaultDisplayRate;
- (double)distanceToManeuver:(unsigned long long)a0;
- (float)idealPitchForNormalizedZoomLevel:(float)a0;
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; })a0 device:(void *)a1 mapDataAccess:(void *)a2 animationRunner:(struct AnimationRunner { struct MapEngine *x0; } *)a3 runLoopController:(struct RunLoopController { struct MapEngine *x0; long long x1; } *)a4 cameraDelegate:(id)a5;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })maxCameraPitch;
- (double)maxZoomHeight;
- (double)maxZoomScale;
- (float)maximumNormalizedZoomLevel;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })minCameraPitch;
- (double)minZoomHeight;
- (double)minZoomScale;
- (float)minimumNormalizedZoomLevel;
- (void)navContextCameraHeadingOverrideDidChange:(id)a0;
- (void)navContextDebugFlagsDidChange:(id)a0;
- (void)navContextStateDidChange:(id)a0;
- (void)pitchTo:(double)a0 animated:(char)a1;
- (void)populateDebugNode:(void *)a0 withOptions:(const void *)a1;
- (void)projectCoordinate:(struct { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; } *)a1;
- (struct optional<double> { union { char x0; double x1; } x0; BOOL x1; })puckAnimator:(id)a0 getElevationWithCoordinate:(const void *)a1;
- (void)puckAnimator:(id)a0 runAnimation:(id)a1;
- (void)puckAnimator:(id)a0 updatedPosition:(const void *)a1 course:(const void *)a2 polylineCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })a3;
- (void)puckAnimatorDidStop:(id)a0;
- (void)resetSpringsToResting;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })restingCameraFrame;
- (void)returnToPuck;
- (void)returnToTrackingWithDelay:(double)a0 resetZoom:(char)a1;
- (void)rotateTo:(double)a0 animated:(char)a1;
- (struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })routeCoordinateAtDistance:(double)a0;
- (struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })routeLocationAtDistance:(double)a0 fromManeuver:(unsigned long long)a1;
- (void)setEdgeInsetsAnimating:(char)a0;
- (void)setNavContext:(id)a0;
- (void)setVkCamera:(id)a0;
- (char)snapMapIfNecessary:(char)a0;
- (void)startIgnoreStyleChangeTimer;
- (void)startWithPounce:(char)a0 startLocation:(struct { double x0; double x1; })a1 startCourse:(double)a2 pounceCompletionHandler:(id /* block */)a3;
- (void)stopIgnoreStyleChange;
- (void)stylesheetDidChange;
- (void)stylesheetDidReload;
- (double)topDownMinimumZoomLevel;
- (void)transferGestureState:(id)a0;
- (void)updateCameraState;
- (void)updateLocation:(const void *)a0 andCourse:(const void *)a1;
- (void)updateManeuversToFrame;
- (void)updatePointsToFrame;
- (void)updatePuckOffset:(char)a0;
- (void)updateSpringsForFramingCamera;
- (void)updateSpringsForTrackingCamera;
- (void)updateWithTimestamp:(double)a0 withContext:(void *)a1;
- (char)usesVKCamera;
- (char)wantsTimerTick;

@end
