@class NSString, NSArray, AVAudioSessionRouteDescription, NSDictionary, AVAudioSessionPortDescription, AVAudioSessionDataSourceDescription, CAReporter, NSNumber;
@protocol AVAudioSessionDelegate;

@interface AVAudioSession : NSObject <AVAudioHardwareControlling> {
    void *_impl;
    BOOL mCategoryEverSet;
    BOOL mSessionEverActivated;
}

@property (readonly) char isPrimary;
@property (readonly, nonatomic) unsigned int hardwareControlToken;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, getter=isOtherAudioPlaying) char otherAudioPlaying;
@property (readonly) char secondaryAudioShouldBeSilencedHint;
@property (readonly) float outputVolume;
@property (readonly) unsigned long long promptStyle;
@property (readonly) NSArray *availableInputs;
@property (readonly) AVAudioSessionRouteDescription *currentRoute;
@property (readonly) char supportsMultichannelContent;
@property (readonly) char prefersInterruptionOnRouteDisconnect;
@property (readonly) unsigned long long preferredRouteSharingPolicy;
@property char canBeNowPlayingApp;
@property (readonly) double preferredSampleRate;
@property (readonly) double preferredIOBufferDuration;
@property (readonly) long long preferredInputNumberOfChannels;
@property (readonly) long long preferredOutputNumberOfChannels;
@property (readonly) long long preferredInputOrientation;
@property (readonly) long long inputOrientation;
@property (readonly) long long maximumInputNumberOfChannels;
@property (readonly) long long maximumOutputNumberOfChannels;
@property (readonly) float inputGain;
@property (readonly, getter=isInputGainSettable) char inputGainSettable;
@property (readonly, getter=isInputAvailable) char inputAvailable;
@property (readonly) NSArray *inputDataSources;
@property (readonly) AVAudioSessionDataSourceDescription *inputDataSource;
@property (readonly) NSArray *outputDataSources;
@property (readonly) AVAudioSessionDataSourceDescription *outputDataSource;
@property (readonly) double sampleRate;
@property (readonly) long long inputNumberOfChannels;
@property (readonly) long long outputNumberOfChannels;
@property (readonly) double inputLatency;
@property (readonly) double outputLatency;
@property (readonly) double IOBufferDuration;
@property (readonly) NSArray *supportedOutputChannelLayouts;
@property (readonly) char isActive;
@property (readonly) NSArray *audioFormats;
@property (readonly) long long audioFormat;
@property (readonly) long long preferredAudioFormat;
@property (readonly) NSArray *consolidatedSourceContentInfo;
@property (readonly) char isDolbyDigitalEncoderAvailable;
@property (readonly) char isDolbyAtmosAvailable;
@property (readonly) char isEarpieceActiveNoiseCancelationEnabled;
@property (readonly) char isPiPAvailable;
@property (readonly) char forceSoundCheck;
@property (readonly) char usingLongFormAudio;
@property (readonly) char requiresNoAudioResources;
@property (readonly) char allowMixableAudioWhileRecording;
@property (readonly) char participatesInNowPlayingAppPolicy;
@property (readonly) char eligibleForBTSmartRoutingConsideration;
@property (readonly) NSNumber *preferredOutputAudioScoreForSmartRouting;
@property (readonly) char eligibleForBTTriangleConsideration;
@property (readonly) char prefersToAcquireHWControlFromOtherSessions;
@property (readonly) char prefersNoMicrophoneUsageIndicator;
@property (readonly) char inhibitSpeechDetection;
@property (readonly) unsigned long long speechDetectionStyle;
@property (readonly) char participatesInMutePriority;
@property (readonly) char participatesInInterruptions;
@property (readonly) char recordingFromRemoteInput;
@property char allowAllBuiltInDataSources;
@property (readonly, getter=isHardwareFormatFixedToMultiChannel) char hardwareFormatFixedToMultiChannel;
@property (readonly, nonatomic) char prefersNoInterruptionsByRingtonesAndAlerts;
@property (readonly) char prefersNoDucking;
@property (readonly) char needsHighPowerBudgeting;
@property (readonly) char participatesInVolumePolicy;
@property (readonly) char prefersToVibeWhenVibrationsAreDisabled;
@property (readonly) float defaultCalibratedOutputSPL;
@property (readonly) char allowsSpeakerPlayback;
@property (readonly) NSString *defaultChatMode;
@property (readonly) NSArray *activeSessionDisplayIDs;
@property (readonly) double inputSafetyOffset;
@property (readonly) double outputSafetyOffset;
@property (readonly) unsigned long long preferredIOBufferFrameSize;
@property (readonly) unsigned long long IOBufferFrameSize;
@property (readonly) char isSessionInputMuted;
@property (readonly) unsigned int opaqueSessionID;
@property (readonly) unsigned long long sessionType;
@property (readonly) char isAllowedToActivate;
@property (readonly) double speechDetectionDeviceSampleRate;
@property (readonly) double siriSpeechDetectionDeviceSampleRate;
@property (readonly) long long interruptionPriority;
@property (readonly) char lastActivationStoppedNowPlayingApp;
@property (readonly) char isExpanseMediaSession;
@property (readonly) long long reporterID;
@property (readonly) NSArray *auditTokensForProcessAssertion;
@property (readonly) NSDictionary *powerProfile;
@property (readonly) NSDictionary *powerBudget;
@property (readonly) NSString *routingContextUID;
@property (readonly) NSArray *hostProcessAttribution;
@property (readonly) NSDictionary *pickedRoute;
@property (readonly, getter=isVoiceProcessingRoutingEnabled) char voiceProcessingRoutingEnabled;
@property (readonly, getter=prefersMultichannelAudio) char prefersMultichannelAudio;
@property (readonly, copy, nonatomic) NSString *activeAudioRoute;
@property (readonly) char prefersAggressiveCaching;
@property (readonly) char prefersConcurrentAirPlayAudio;
@property (readonly) char isMicrophoneInjectionServiceEnabledByUser;
@property id<AVAudioSessionDelegate> delegate;
@property (readonly) char inputIsAvailable;
@property (readonly) double currentHardwareSampleRate;
@property (readonly) long long currentHardwareInputNumberOfChannels;
@property (readonly) long long currentHardwareOutputNumberOfChannels;
@property (readonly) double preferredHardwareSampleRate;
@property (readonly) char iAmTheAssistant;
@property (retain, nonatomic) CAReporter *reporter;
@property (readonly, nonatomic) NSArray *availableCategories;
@property (readonly) NSString *category;
@property (readonly) unsigned long long categoryOptions;
@property (readonly) unsigned long long routeSharingPolicy;
@property (readonly) NSArray *availableModes;
@property (readonly) NSString *mode;
@property (readonly) char allowHapticsAndSystemSoundsDuringRecording;
@property (readonly) unsigned long long recordPermission;
@property (readonly) AVAudioSessionPortDescription *preferredInput;
@property (readonly, nonatomic) char prefersNoInterruptionsFromSystemAlerts;
@property (readonly) long long renderingMode;
@property (readonly, nonatomic) char prefersEchoCancelledInput;
@property (readonly, nonatomic) char isEchoCancelledInputEnabled;
@property (readonly, nonatomic) char isEchoCancelledInputAvailable;

+ (id)sharedInstance;
+ (id)primarySession;
+ (char)CARPEnabled;
+ (id)auxiliarySession;
+ (id)auxiliarySessionWithName:(id)a0;
+ (char)categoryEnablesInput:(id)a0;

- (oneway void)release;
- (void)dealloc;
- (id)autorelease;
- (id)init;
- (id)retain;
- (unsigned long long)retainCount;
- (void).cxx_destruct;
- (char)setPlayState:(id)a0 error:(id *)a1;
- (id)getMXProperties:(id)a0 propertyErrors:(id *)a1;
- (char)setMXProperties:(id)a0 propertyErrors:(id *)a1;
- (id)addObserverForType:(unsigned long long)a0 name:(id)a1 block:(id /* block */)a2;
- (id)getMXSessionProperty:(id)a0 error:(id *)a1;
- (void)removeObserverForType:(unsigned long long)a0 observer:(id)a1 name:(id)a2;
- (char)setActive:(char)a0 error:(id *)a1;
- (char)setActive:(char)a0 withOptions:(unsigned long long)a1 error:(id *)a2;
- (char)setMXSessionProperty:(id)a0 value:(id)a1 error:(id *)a2;
- (char)checkPrimarySessionImplicitActivation:(char)a0;
- (char)registerSessionInterruptionCallback:(id /* block */)a0;
- (void)StravinskyServicesWereLost;
- (double)inputSampleRate;
- (char)setCategory:(id)a0 mode:(id)a1 options:(unsigned long long)a2 error:(id *)a3;
- (char)setIsExpanseMediaSession:(char)a0 error:(id *)a1;
- (int)setProperty:(id)a0 value:(id)a1 isMXProperty:(char)a2;
- (void)StravinskyServicesWereReset;
- (void)handleDeferredMessage:(id)a0 userInfo:(id)a1;
- (struct sync_guard<AVAudioSessionImpl, caulk::mach::unfair_recursive_lock> { struct unfair_recursive_lock *x0; struct value_holder<AVAudioSessionImpl> { struct AVAudioSessionImpl *x0; } x1; })privateGetGuardOfImplementation;
- (char)setAudioDevice:(id)a0 ioProcIDs:(id)a1 error:(id *)a2;
- (void)updateDeviceStreamDescriptions:(BOOL)a0;
- (struct shared_ptr<const as::client::api_utils::ServerAccessor> { struct ServerAccessor *x0; struct __shared_weak_count *x1; })accessor;
- (void)activateWithOptions:(unsigned long long)a0 completionHandler:(id /* block */)a1;
- (void)addAggregateDeviceObserver;
- (void)addCategoryOptionsToDictionary:(id)a0 category:(id)a1 options:(unsigned long long)a2;
- (int)addReporterIDToAggregate;
- (struct AVAudioSessionImplAtomic { struct AVAudioSessionImpl *x0; })atomicImpl;
- (id)buildRouteJSON;
- (char)canActivate:(id *)a0;
- (char)clearInputPreferences:(id *)a0;
- (id)createAVAudioSessionPortsFromAggDeviceForScope:(unsigned int)a0;
- (char)createSessionInServer:(unsigned int)a0 sessionType:(unsigned long long)a1;
- (unsigned short)determineServiceType;
- (id)getATDefaultDeviceAggregate;
- (unsigned int)getATDefaultDeviceAggregateID;
- (id)getChannels:(unsigned int)a0 scope:(unsigned int)a1 portName:(id)a2 portID:(id)a3;
- (id)getNotificationQueue;
- (id)getPortDescriptionForDevice:(unsigned int)a0 scope:(unsigned int)a1;
- (id)getUpdatedCurrentRoute;
- (void)handleAppStatePauseFinal:(id)a0;
- (void)handleAppStateResumeFinal:(id)a0;
- (void)handleDefaultInputChange:(char)a0;
- (void)handleDeviceInputMuteStateChanged:(unsigned int)a0;
- (void)handleRouteChange;
- (void)handleServiceRestart;
- (void)handleSystemDevicesChange;
- (char)hasPhoneCallBehaviour;
- (id)initAuxiliarySessionWithName:(id)a0;
- (id)initForMacOS;
- (id)initWithName:(id)a0 manager:(id)a1 proxying:(unsigned int)a2 sessionType:(unsigned long long)a3;
- (char)isMicrophoneInjectionAvailable;
- (char)isOutputAvailable;
- (void)muteInputDevicesAndRegisterMutePropertyListener:(struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *x0; } x2; })a0;
- (char)muteSessionInput:(char)a0 error:(id *)a1;
- (char)overrideOutputAudioPort:(unsigned long long)a0 error:(id *)a1;
- (long long)preferredMicrophoneInjectionMode;
- (void)privateDispatchPing:(const void *)a0;
- (unsigned int)privateGetSessionID;
- (void)privateHandlePing;
- (void)privateInputMuteWithInfo:(id)a0 accessor:(const void *)a1;
- (void)privateInterruptionWithInfo:(id)a0 accessor:(const void *)a1;
- (char)privateIsActive:(const void *)a0;
- (void)privatePostNotificationForType:(unsigned long long)a0 name:(id)a1 userInfo:(id)a2 accessor:(const void *)a3;
- (int)privateSetCategoryWithOptions:(id)a0 modes:(id)a1 routeSharingPolicy:(unsigned long long)a2 options:(unsigned long long)a3 accessor:(const void *)a4;
- (void)reapplyAggregateDeviceProperties;
- (char)recreateSessionInServerIfNecessary:(unsigned int)a0 sessionType:(unsigned long long)a1 guard:(void *)a2;
- (void)registerForFakeInterruptionNotifications;
- (int)removeReporterIDFromAggregate;
- (void)requestRecordPermission:(id /* block */)a0;
- (char)selectIndependentRoutingContext:(id *)a0;
- (void)sendActiveDeviceMessage:(char)a0;
- (void)sendPlayStateToServer:(void *)a0;
- (char)setActivationContext:(id)a0 error:(id *)a1;
- (void)setActivationState:(char)a0;
- (char)setActive:(char)a0 withFlags:(long long)a1 error:(id *)a2;
- (char)setActivePrepareDefaultDevice:(char)a0 sessionID:(unsigned int)a1;
- (id)setActiveSecureSession:(char)a0 withOptions:(unsigned long long)a1;
- (id)setActiveXPCAsyncAndWait:(char)a0 withOptions:(unsigned long long)a1;
- (char)setAggregatedIOPreference:(unsigned long long)a0 error:(id *)a1;
- (char)setAllowHapticsAndSystemSoundsDuringRecording:(char)a0 error:(id *)a1;
- (int)setBatchProperties:(id)a0 areMXProperties:(char)a1;
- (char)setCategory:(id)a0 error:(id *)a1;
- (char)setCategory:(id)a0 mode:(id)a1 routeSharingPolicy:(unsigned long long)a2 options:(unsigned long long)a3 error:(id *)a4;
- (char)setCategory:(id)a0 withOptions:(unsigned long long)a1 error:(id *)a2;
- (char)setDefaultChatMode:(id)a0 error:(id *)a1;
- (char)setEligibleForBTSmartRoutingConsideration:(char)a0 error:(id *)a1;
- (char)setForceSoundCheck:(char)a0 error:(id *)a1;
- (char)setIAmTheAssistant:(char)a0 error:(id *)a1;
- (char)setInputDataSource:(id)a0 error:(id *)a1;
- (char)setInputGain:(float)a0 error:(id *)a1;
- (char)setInterruptionPriority:(long long)a0 error:(id *)a1;
- (char)setMode:(id)a0 error:(id *)a1;
- (char)setOutputDataSource:(id)a0 error:(id *)a1;
- (char)setParticipatesInInterruptions:(char)a0 error:(id *)a1;
- (char)setPreferredHardwareSampleRate:(double)a0 error:(id *)a1;
- (char)setPreferredIOBufferDuration:(double)a0 error:(id *)a1;
- (char)setPreferredIOBufferFrameSize:(unsigned long long)a0 error:(id *)a1;
- (char)setPreferredInput:(id)a0 error:(id *)a1;
- (char)setPreferredInputNumberOfChannels:(long long)a0 error:(id *)a1;
- (char)setPreferredInputOrientation:(long long)a0 error:(id *)a1;
- (char)setPreferredMicrophoneInjectionMode:(long long)a0 error:(id *)a1;
- (char)setPreferredOutputAudioScoreForSmartRouting:(id)a0 error:(id *)a1;
- (char)setPreferredOutputNumberOfChannels:(long long)a0 error:(id *)a1;
- (char)setPreferredSampleRate:(double)a0 error:(id *)a1;
- (char)setPrefersInterruptionOnRouteDisconnect:(char)a0 error:(id *)a1;
- (char)setPrefersNoInterruptionsFromSystemAlerts:(char)a0 error:(id *)a1;
- (char)setRecordingFromRemoteInput:(char)a0 error:(id *)a1;
- (char)setReporterID:(long long)a0 error:(id *)a1;
- (char)setRouteSharingPolicy:(unsigned long long)a0 error:(id *)a1;
- (char)setRoutingContextUID:(id)a0 error:(id *)a1;
- (char)setSupportsMultichannelContent:(char)a0 error:(id *)a1;
- (char)setVoiceProcessingRoutingEnabled:(BOOL)a0 error:(id *)a1;
- (char)silenceOutput:(unsigned long long)a0 error:(id *)a1;
- (void)unmuteInputDevicesAndUnregisterMutePropertyListener:(struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *x0; } x2; })a0;

@end
