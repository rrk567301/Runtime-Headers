@class PXTilingControllerDebugInfo, PXScrollInfo, NSArray, NSString, PXTilingLayout, PXTilingCoordinateSpace, PXTilingCoordinateSpaceConverter, NSMutableArray, PXTileStatePool, PXTilingChange, NSMutableIndexSet;
@protocol PXTilingControllerObserver, PXTilingDebugDelegate, PXTileSource, PXTileAnimator, PXTilingControllerScrollDelegate, PXTilingControllerTransitionDelegate, PXScrollController;

@interface PXTilingController : NSObject <PXTilingLayoutObserver> {
    char _isPerformingUpdates;
    char _hasScheduledUpdate;
    struct { char scrollControllerMetrics; char pagedRect; char layoutMetrics; char layoutPreferredVisibleOrigin; char layoutPosition; char layoutVisibleRect; char layoutPreparation; char tiles; char preheating; char maxPreheatPadding; char scrollInfo; } _needsUpdateFlags;
    struct { char respondsToInitialVisibleOriginForLayout; char respondsToTargetVisibleOriginForLayoutProposedVisibleOrigin; char respondsToScrollInfoForLayout; } _scrollDelegateFlags;
    struct { char respondsToPrepareForChange; char respondsToTileIdentifierConverterForChange; char respondsToTransitionAnimationCoordinatorForChange; } _transitionDelegateFlags;
    char _hasInitializedLayout;
    struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } *_identifierBuffer;
    struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; char x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } *_geometryBuffer;
    unsigned long long _bufferCount;
}

@property (readonly, nonatomic) PXTilingCoordinateSpace *_coordinateSpace;
@property (readonly, nonatomic) void *_coordinateSpaceIdentifier;
@property (readonly, nonatomic) PXTilingCoordinateSpaceConverter *_coordinateSpaceConverter;
@property (retain, nonatomic, setter=_setCurrentLayout:) PXTilingLayout *currentLayout;
@property (retain, nonatomic, setter=_setTargetLayout:) PXTilingLayout *targetLayout;
@property (weak, nonatomic, setter=_setLayoutWithInitializedVisibleOrigin:) PXTilingLayout *_layoutWithInitializedVisibleOrigin;
@property (nonatomic, setter=_setReferenceSize:) struct CGSize { double width; double height; } _referenceSize;
@property (nonatomic, setter=_setContentInset:) struct NSEdgeInsets { double top; double left; double bottom; double right; } _contentInset;
@property (nonatomic, setter=_setActiveRect:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _activeRect;
@property (nonatomic, setter=_setVisibleRect:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _visibleRect;
@property (nonatomic, setter=_setUpdatedPreferredVisibleOrigin:) struct CGPoint { double x; double y; } _updatedPreferredVisibleOrigin;
@property (nonatomic, setter=_setLayoutDesiredOrigin:) struct CGPoint { double x; double y; } _layoutDesiredOrigin;
@property (copy, nonatomic, setter=_setScrollInfo:) PXScrollInfo *_scrollInfo;
@property (nonatomic, setter=_setPagedRect:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _pagedRect;
@property (nonatomic, setter=_setCachedRect:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cachedRect;
@property (readonly, nonatomic) PXTileStatePool *_tileStates;
@property (readonly, nonatomic) PXTilingChange *_currentChange;
@property (nonatomic, setter=_setDirtyRect:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _dirtyRect;
@property (readonly, nonatomic) NSMutableIndexSet *_dirtyTileIndexes;
@property (readonly, nonatomic) NSMutableArray *_preheatRecords;
@property (nonatomic, setter=_setMaxPreheatPadding:) struct NSEdgeInsets { double top; double left; double bottom; double right; } _maxPreheatPadding;
@property (weak, nonatomic) id<PXTilingControllerObserver> observer;
@property (copy, nonatomic) NSArray *compositionInvalidationContexts;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } layoutContentBounds;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } layoutScrollBounds;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } layoutPreferredOrigin;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } layoutOrigin;
@property (readonly, nonatomic) PXScrollInfo *scrollInfo;
@property (weak, nonatomic) id<PXTilingDebugDelegate> debugDelegate;
@property (readonly, nonatomic) PXTilingControllerDebugInfo *debugInfo;
@property (weak, nonatomic) id<PXScrollController> scrollController;
@property (weak, nonatomic) id<PXTileSource> tileSource;
@property (weak, nonatomic) id<PXTileAnimator> tileAnimator;
@property (weak, nonatomic) id<PXTilingControllerScrollDelegate> scrollDelegate;
@property (weak, nonatomic) id<PXTilingControllerTransitionDelegate> transitionDelegate;
@property (nonatomic) char shouldAggressivelyEvictTileCaches;
@property (readonly, nonatomic) void *contentCoordinateSpaceIdentifier;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id)initWithLayout:(id)a0;
- (void)updateLayout;
- (id)debugQuickLookObject;
- (void)_invalidateRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)updateMetrics;
- (void)beginUpdate;
- (void)endUpdate;
- (void)_invalidateTiles;
- (char)_needsUpdate;
- (void)_setNeedsUpdate;
- (id)_currentChangeIfExists;
- (void)_discardCurrentChange;
- (void)_ensureCurrentChange;
- (void)_fillBuffersWithTileStatesAtIndexes:(id)a0;
- (void)_handleTileAnimationCompletionWithIndex:(unsigned long long)a0;
- (id)_indexesOfVisibleTilesInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withOptions:(id)a1;
- (void)_invalidateAllCachedRects;
- (void)_invalidateCachesOutsideRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_invalidateLayoutMetrics;
- (void)_invalidateLayoutPosition;
- (void)_invalidateLayoutPreferredVisibleOrigin;
- (void)_invalidateLayoutPreparation;
- (void)_invalidateLayoutVisibleRect;
- (void)_invalidateMaxPreheatPadding;
- (void)_invalidatePagedRect;
- (void)_invalidatePreheating;
- (void)_invalidateScrollControllerMetrics;
- (void)_invalidateScrollInfo;
- (void)_markRectAsCached:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_preheatRecordForPreheatHandler:(id)a0 context:(void *)a1 createIfNeeded:(char)a2;
- (void)_prepareBufferForCount:(unsigned long long)a0;
- (void)_updateDebugDelegateIfNeeded;
- (void)_updateLayoutMetricsIfNeeded;
- (void)_updateLayoutPositionIfNeeded;
- (void)_updateLayoutPreferredVisibleOriginIfNeeded;
- (void)_updateLayoutPreparationIfNeeded;
- (void)_updateLayoutVisibleRectIfNeeded;
- (void)_updateMaxPreheatPaddingIfNeeded;
- (void)_updatePagedRectIfNeeded;
- (void)_updatePreheatingIfNeeded;
- (void)_updateScrollControllerMetricsIfNeeded;
- (void)_updateScrollInfoIfNeeded;
- (void)_updateTilesIfNeeded;
- (struct CGPoint { double x0; double x1; })convertPointFromLayout:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromLayout:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)convertScrollInfoFromLayout:(id)a0;
- (void)enumerateTilesInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withOptions:(id)a1 usingBlock:(id /* block */)a2;
- (char)getTile:(out void **)a0 geometry:(out struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; char x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } *)a1 group:(out unsigned long long *)a2 userData:(out id *)a3 forTileWithIdentifier:(struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })a4;
- (struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })hitTestTileAtPoint:(struct CGPoint { double x0; double x1; })a0 padding:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a1 passingTest:(id /* block */)a2;
- (void)invalidateLayoutPreferredVisibleOrigin;
- (void)invalidateScrollControllerMetrics;
- (void)registerPreheatHandler:(id)a0 withPadding:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a1 tileGroup:(unsigned long long)a2 context:(void *)a3;
- (void)requestFocus;
- (void)setLayoutOrigin:(struct CGPoint { double x0; double x1; })a0;
- (void)setReferenceSize:(struct CGSize { double x0; double x1; })a0 contentInset:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a1;
- (struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })tileIdentifierForTile:(void *)a0;
- (void)tilingLayout:(id)a0 invalidatedWithContext:(id)a1;
- (void)transitionToLayout:(id)a0;
- (void)unregisterPreheatHandler:(id)a0 context:(void *)a1;

@end
