@class NSView, DKDrawingStroke, NSString, NSTrackingArea, NSColor, NSMutableArray, DKDrawing, DKPointSmoothing, NSUndoManager;
@protocol DKInkViewRenderDelegate, DKInkRenderer;

@interface DKInkView : NSView <DKInkRendererDelegate> {
    struct CGPoint { double x; double y; } _lastPoint;
    double _lastTouchTime;
    struct CGPoint { double x; double y; } _velocityInWindow;
    id _trackingTouchID;
    id /* block */ _animationCompletionHandler;
}

@property (retain, nonatomic) NSView<DKInkRenderer> *renderer;
@property (retain, nonatomic) DKDrawingStroke *currentBrushStroke;
@property (retain, nonatomic) NSMutableArray *currentInterpolatedBrushStroke;
@property (retain, nonatomic) NSMutableArray *cachedInterpolatedBrushStrokes;
@property (nonatomic) double currentWeight;
@property unsigned long long totalPointsAdded;
@property struct CGPoint { double x; double y; } strokeStartLocation;
@property struct CGPoint { double x; double y; } strokeLastLocation;
@property double strokeStartTime;
@property char isAddingPointWithoutSmoothing;
@property (nonatomic) void /* unknown type, empty encoding */ lastVectorPoint;
@property (retain, nonatomic) DKPointSmoothing *inputFIFO;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } aggregateInvalid;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } unionDrawingRect;
@property (nonatomic) unsigned long long animationType;
@property (retain, nonatomic) NSMutableArray *cachedInterpolatedAnimationPoints;
@property (retain, nonatomic) NSMutableArray *cachedInterpolatedAnimationStrokes;
@property (retain, nonatomic) NSMutableArray *computedAnimationFrames;
@property (nonatomic) double drawingScale;
@property (retain) NSTrackingArea *trackingArea;
@property char startedTouchDrawing;
@property (retain, nonatomic) NSUndoManager *strokeUndoManager;
@property (nonatomic) unsigned long long mode;
@property (nonatomic) char scaleDrawingToFitCanvas;
@property (nonatomic) char allowInput;
@property (readonly, nonatomic) long long countOfCurrentStroke;
@property (readonly, nonatomic) char canvasHasInk;
@property (readonly, nonatomic) char trackingTouches;
@property (readonly, nonatomic) char isRenderingPaused;
@property (weak, nonatomic) id<DKInkViewRenderDelegate> renderPreviewDelegate;
@property (nonatomic) unsigned long long renderPreviewMode;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } inkBounds;
@property (retain, nonatomic) NSColor *strokeColor;
@property (nonatomic) double minPressure;
@property (nonatomic) double maxPressure;
@property (nonatomic) double minThickness;
@property (nonatomic) double maxThickness;
@property (copy, nonatomic) DKDrawing *currentDrawing;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct CGVector { double x0; double x1; })normalizeVector:(struct CGVector { double x0; double x1; })a0;
+ (double)lengthOfVector:(struct CGVector { double x0; double x1; })a0;
+ (struct CGPoint { double x0; double x1; })normalizeVectorPoint:(struct CGPoint { double x0; double x1; })a0;
+ (char)gpuAvailable;
+ (double)windowBackingScaleFactor:(id)a0;

- (void)dealloc;
- (void).cxx_destruct;
- (id)initWithCoder:(id)a0;
- (void)setHidden:(char)a0;
- (void)clear;
- (void)teardown;
- (void)_commonInit;
- (void)_display;
- (char)acceptsFirstMouse:(id)a0;
- (char)acceptsFirstResponder;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)mouseDownCanMoveWindow;
- (void)pressureChangeWithEvent:(id)a0;
- (void)setAllowedTouchTypes:(unsigned long long)a0;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)touchesBeganWithEvent:(id)a0;
- (void)touchesCancelledWithEvent:(id)a0;
- (void)touchesEndedWithEvent:(id)a0;
- (void)touchesMovedWithEvent:(id)a0;
- (void)continueStroke:(SEL)a0;
- (void)continueStrokeWithoutSmoothing:(SEL)a0;
- (void)terminateStroke;
- (double)weightForValue:(double)a0;
- (void)_endInkMode;
- (struct CGPoint { double x0; double x1; })_pointInView:(id)a0 withNormalizedDevicePosition:(struct CGPoint { double x0; double x1; })a1;
- (void)_startInkMode;
- (id)_trackedTouchInTouches:(id)a0 findNewTouch:(char)a1 isNewTouch:(char *)a2;
- (double)interfaceScale;
- (void)startStroke:(SEL)a0;
- (void)resumeRendering;
- (void)_stopDisplayLink;
- (void)pauseRendering;
- (void)_startDisplayLink;
- (void)_addUninterpolatedPoints:(void *)a0 controlPoint:(void *)a1 count:(unsigned long long)a2 flushing:(char)a3;
- (void)_computeAnimationFramesFittingInMaxDuration:(double)a0;
- (char)_deviceSupportsGL;
- (void)_notifyRenderDelegate;
- (void)_postTouchesBeganNotification:(struct CGPoint { double x0; double x1; })a0;
- (void)_postTouchesEndedNotification:(struct CGPoint { double x0; double x1; })a0;
- (void)_renderEmittedPoints:(void *)a0 count:(unsigned long long)a1;
- (void)_replayAnimationTick:(id)a0;
- (void)_setDrawingOnRenderer:(id)a0;
- (void)_setDrawingOnRendererWithBleedAnimation:(id)a0;
- (void)_setDrawingOnRendererWithReplayAnimation:(id)a0;
- (void)_undoLastStroke:(id)a0;
- (void)inkDidCompleteRender:(id)a0;
- (void)inkDidRender:(id)a0;
- (void)setCurrentDrawing:(id)a0 scaleDrawingToFitBounds:(char)a1 withAnimationType:(unsigned long long)a2 animationCompletionHandler:(id /* block */)a3;
- (void)setupRenderer;
- (id)snapshotRendererState;
- (void)undoLastStroke;

@end
