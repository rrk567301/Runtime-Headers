@class AKHighlightAnnotationController, AKLegacyDoodleController, AKFormFeatureDetectorController, AKPageController, AKToolController, NSString, AKTextEditorController, AKDFRController, AKUndoController, AKMainEventHandler, NSWindow, AKSparseMutableControllerArray, AKActionController, NSView, AKSignatureModelController, AKCursorController_Mac, AKToolbarViewController, AKSidecarController, AKAttributeController, AKModelController, AKStatistics, NSMapTable, AKToolbarView;
@protocol AKControllerDelegateProtocol, AKControllerOverlayInteractionProtocol;

@interface AKController : NSObject {
    char _isEditingAnnotation;
    char _toolPickerVisibleBeforeTextEditing;
}

@property char isTestingInstance;
@property char isTornDown;
@property (retain) AKSparseMutableControllerArray *pageControllers;
@property (retain) NSMapTable *pageModelControllersToPageControllers;
@property (weak) id<AKControllerDelegateProtocol> delegate;
@property (retain) AKActionController *actionController;
@property (retain) AKToolController *toolController;
@property (retain) AKToolbarViewController *toolbarViewController;
@property (retain) AKAttributeController *attributeController;
@property (retain) AKModelController *modelController;
@property (retain) AKUndoController *undoController;
@property (retain) AKSidecarController *sidecarController;
@property (retain) AKMainEventHandler *mainEventHandler;
@property (retain) AKTextEditorController *textEditorController;
@property (retain) AKLegacyDoodleController *legacyDoodleController;
@property (retain) NSView *toolbarView;
@property (retain) AKSignatureModelController *signatureModelController;
@property (retain) AKFormFeatureDetectorController *formDetectionController;
@property (retain) AKHighlightAnnotationController *highlightAnnotationController;
@property (retain) AKStatistics *statisticsLogger;
@property (retain) AKCursorController_Mac *cursorController;
@property (weak) NSWindow *cachedWindow;
@property (retain, nonatomic) AKDFRController *dfrController;
@property (copy, nonatomic) NSString *suggestedTouchBarIdentifier;
@property unsigned long long pasteCascadingMultiplier;
@property long long lastPasteboardChangeCount;
@property unsigned long long creationCascadingMultiplier;
@property (weak) AKPageController *lastCreationCascadingPageController;
@property (nonatomic) char hideAllAdornments;
@property double akModelToCanvasFixedPixelScaleOfFirstEncounteredPage;
@property double screenPixelsToCanvasPixelsDownscale;
@property (nonatomic) char isLogging;
@property (nonatomic) char selectNewlyCreatedAnnotations;
@property (nonatomic) char shapeDetectionEnabled;
@property (weak, nonatomic) AKToolbarView *modernToolbarView;
@property (weak, nonatomic) id<AKControllerOverlayInteractionProtocol> overlayInteractionDelegate;
@property (nonatomic) char useHighVisibilityDefaultInks;
@property (readonly, nonatomic) char onlyDrawWithApplePencil;
@property (nonatomic) char overlayShouldPixelate;
@property (nonatomic) char allEditingDisabled;
@property (nonatomic) char annotationEditingEnabled;
@property (nonatomic) char formFillingEnabled;
@property (nonatomic) char pencilAlwaysDraws;
@property unsigned long long currentPageIndex;
@property (copy) NSString *author;
@property (readonly, copy, nonatomic) NSString *modifiedImageDescription;

+ (char)automaticallyNotifiesObserversForKey:(id)a0;
+ (void)adjustAnnotationBoundsToFitText:(id)a0;
+ (id)controllerWithDelegate:(id)a0;
+ (void)renderAnnotation:(id)a0 inContext:(struct CGContext { } *)a1;
+ (char)_isInLowMemoryEnvironment;
+ (id)akBundle;
+ (id)akBundleIdentifier;
+ (id)colorForHighlightAttributeWithTag:(long long)a0;
+ (char)hasPressureCapableHardware;

- (void)dealloc;
- (void).cxx_destruct;
- (id)initWithDelegate:(id)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)teardown;
- (void)delete:(id)a0;
- (void)commitEditing;
- (void)copy:(id)a0;
- (void)cut:(id)a0;
- (char)handleEvent:(id)a0;
- (void)paste:(id)a0;
- (void)redo:(id)a0;
- (void)selectAll:(id)a0;
- (void)undo:(id)a0;
- (id)initForTesting;
- (id)akTouchBar;
- (char)supportsImageDescriptionEditing;
- (char)validateSender:(id)a0;
- (char)validateDelete:(id)a0;
- (void)beginLogging:(id)a0 documentType:(id)a1;
- (long long)currentExifOrientationForPageAtIndex:(unsigned long long)a0;
- (void)delayedUndoControllerSetup;
- (void)duplicate:(id)a0;
- (void)endLogging;
- (id)groupTouchBarItemWithIdentifier:(id)a0;
- (char)isOverlayViewLoadedAtIndex:(unsigned long long)a0;
- (id)overlayViewAtIndex:(unsigned long long)a0;
- (void)performActionForSender:(id)a0;
- (void)prepareOverlayAtIndex:(unsigned long long)a0;
- (void)relinquishOverlayAtIndex:(unsigned long long)a0;
- (void)renderAnnotation:(id)a0 inContext:(struct CGContext { } *)a1;
- (void)resetToDefaultToolMode;
- (char)supportsFormFill;
- (id)toolbarButtonItemOfType:(unsigned long long)a0 style:(unsigned long long)a1;
- (void)updateOverlayViewAtIndex:(unsigned long long)a0;
- (char)validateCopy:(id)a0;
- (char)validateCut:(id)a0;
- (char)validateDuplicate:(id)a0;
- (char)validatePaste:(id)a0;
- (char)validateRedo:(id)a0;
- (char)validateSelectAll:(id)a0;
- (char)validateUndo:(id)a0;
- (id)hostingWindow;
- (char)isPresentingPopover;
- (void)applyCurrentCrop;
- (void)clearUndoStack;
- (unsigned long long)toolMode;
- (void)setToolMode:(unsigned long long)a0;
- (char)shouldDrawVariableStrokeDoodles;
- (char)validateShowAttributeInspector:(id)a0;
- (void)addPopupToAnnotation:(id)a0 openPopup:(char)a1;
- (char)_isInDFRAction;
- (void)_pageModelControllerSelectedAnnotationsChangedNotification:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_popoverAnchorFrameInModelForAnnotations:(id)a0;
- (void)_setupPageModelController:(id)a0;
- (char)_validateCutCopyDelete;
- (char)canBeginEditingTextAnnotation:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentAlignedRectForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onPageAtIndex:(unsigned long long)a1;
- (double)currentModelBaseScaleFactorForPageAtIndex:(unsigned long long)a0;
- (id)currentPageController;
- (void)didBeginEditingAnnotation:(id)a0;
- (void)didEndEditingAnnotation:(id)a0;
- (void)editTextAnnotation:(id)a0;
- (void)editTextAnnotation:(id)a0 selectAllText:(char)a1;
- (void)enclosingScrollViewDidScroll:(id)a0;
- (void)endEditingTextAnnotation;
- (void)highlightableSelectionChanged;
- (void)highlightableSelectionDidEndChanging;
- (void)highlightableSelectionWillBeginChanging;
- (char)isDFRInitialized;
- (char)isInDFRAction;
- (id)originalOrModifiedImageDescription;
- (id)pageControllerForAnnotation:(id)a0;
- (id)pageControllerForPageModelController:(id)a0;
- (void)reloadVisibleToolbarItemIdentifiers;
- (void)removeNoteFromAnnotation:(id)a0;
- (void)setModifiedImageDescription:(id)a0;
- (void)showAttributeInspector:(id)a0;
- (id)signaturesMenu;
- (void)strokeAddedNotification:(id)a0;
- (char)validateEditTextAnnotation:(id)a0;

@end
