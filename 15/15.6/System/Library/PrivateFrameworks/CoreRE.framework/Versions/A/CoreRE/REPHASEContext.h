@class PHASEEngine, NSURL, PHASECardioidDirectivityModelParameters, PHASEListener, PHASENumberMetaParameterDefinition, NSObject, PHASESpatialPipeline, NSCache;
@protocol OS_dispatch_queue;

@interface REPHASEContext : NSObject {
    PHASEEngine *_engine;
    int _mixerDefNameCounter;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } _stoppedAndDestroyed;
    struct UnfairLock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } m_lock; } _scenesMutex;
    struct unordered_map<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>>> { struct __hash_table<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _scenes;
    struct UnfairLock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } m_lock; } _shapesMutex;
    struct unordered_map<unsigned long long, PhaseShapeAndMesh, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, PhaseShapeAndMesh>>> { struct __hash_table<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _shapes;
    struct unordered_map<unsigned long long, REPHASESoundEvent *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, REPHASESoundEvent *>>> { struct __hash_table<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _soundEvents;
    struct UnfairLock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } m_lock; } _soundEventsMutex;
    struct unordered_map<unsigned long long, RESoundEventPreparingData, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, RESoundEventPreparingData>>> { struct __hash_table<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _soundEventsPreparing;
    struct UnfairLock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } m_lock; } _soundEventsPreparingMutex;
    struct unordered_map<unsigned long long, REPHASESoundAsset, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, REPHASESoundAsset>>> { struct __hash_table<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, REPHASESoundAsset>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _audioAssets;
    struct UnfairLock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } m_lock; } _audioAssetsMutex;
    struct UnfairLock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } m_lock; } _audioEngineMutex;
    struct REPHASEMaterialCache { float meshConfidenceThreshold; NSCache *cache; } _phaseMaterialCache;
    struct REPHASESpatialMixerDefinitionCache { int mixerDefinitionCounter; NSCache *cache; PHASESpatialPipeline *spatialPipeline; } _spatialMixerDefinitionCache;
    long long _reverbPreset;
    BOOL _allowSpaceBlend;
    float _spaceBlendLevel;
    char _directpathEnabled;
    long long _phaseUpdateMode;
    NSObject<OS_dispatch_queue> *_phaseQueue;
    struct shared_ptr<re::AudioEngineRunnableManager> { struct AudioEngineRunnableManager *__ptr_; struct __shared_weak_count *__cntrl_; } _audioEngineRunnableManager;
}

@property (readonly) PHASEEngine *engine;
@property (readonly) PHASEEngine *maybeEngine;
@property (readonly, nonatomic) double sampleRate;
@property (readonly, nonatomic) PHASENumberMetaParameterDefinition *gainLinearParamDefinition;
@property (readonly, nonatomic) PHASENumberMetaParameterDefinition *rateParamDefinition;
@property (readonly, nonatomic) PHASECardioidDirectivityModelParameters *humanDirectivity;
@property (readonly, nonatomic) PHASEListener *listener;
@property (retain, nonatomic) NSURL *customHRIRURL;

- (void).cxx_destruct;
- (id).cxx_construct;
- (void)update;
- (void)removeEntity:(unsigned long long)a0;
- (void)prepare:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState *x0; struct __shared_weak_count *x1; })a0;
- (void)setSpaceBlendLevel:(float)a0;
- (void)setSpaceBlendTargetPresetOrientation:(struct { })a0;
- (id)getSessionRoot:(unsigned long long)a0;
- (void)removeOccluderFromScene:(unsigned long long)a0 entity:(unsigned long long)a1;
- (void)applyCustomHRIR;
- (long long)getReverbPreset;
- (unsigned long long)phaseShapeCount;
- (void)stopAllAndReset;
- (void)updateOccluder:(const void *)a0;
- (struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity *x0; struct __shared_weak_count *x1; })_getEntityUnderLock:(unsigned long long)a0;
- (void)addAudioAssetID:(unsigned long long)a0 configuration:(const void *)a1;
- (char)addEventIfStillPreparing:(id)a0 forToken:(unsigned long long)a1;
- (void)addOccluder:(const void *)a0;
- (void)addOccluder:(id)a0 toScene:(unsigned long long)a1 entity:(unsigned long long)a2;
- (void)addPhaseShapeToCache:(id)a0 meshID:(unsigned long long)a1 mesh:(id)a2;
- (void)applyMeshEvents:(const void *)a0;
- (void)applyMeshRemoval:(const void *)a0;
- (void)applyMeshRemovals:(const void *)a0;
- (void)applyOccluderAdditions:(const void *)a0;
- (void)applyOccluderUpdates:(const void *)a0;
- (void)applyReverbPreset;
- (void)applySpaceBlendLevel;
- (id)baseMixerDefinitionWith:(const void *)a0;
- (void)clearPhaseShapeCache;
- (void)clearPreparingStateForToken:(unsigned long long)a0;
- (struct unordered_map<unsigned long long, PhaseShapeAndMesh, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, PhaseShapeAndMesh>>> { struct __hash_table<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float x0; } x3; } x0; })copyPhaseShapeCache;
- (id)createAcousticMaterialsArrayWithAbsorption:(struct DynamicArray<re::AcousticAbsorptionMaterial> { struct Allocator *x0; unsigned long long x1; unsigned long long x2; unsigned int x3; struct AcousticAbsorptionMaterial *x4; })a0 scattering:(struct DynamicArray<re::AcousticScatteringMaterial> { struct Allocator *x0; unsigned long long x1; unsigned long long x2; unsigned int x3; struct AcousticScatteringMaterial *x4; })a1 soundReduction:(struct DynamicArray<re::AcousticSoundReductionMaterial> { struct Allocator *x0; unsigned long long x1; unsigned long long x2; unsigned int x3; struct AcousticSoundReductionMaterial *x4; })a2;
- (void)createListenerIfPending;
- (struct PHASEOccluderData { unsigned long long x0; unsigned long long x1; unsigned long long x2; id x3; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x4; })createPHASEOccluderData:(const void *)a0;
- (struct PHASEOccluderUpdateData { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; id x4; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x5; })createPHASEOccluderUpdateData:(const void *)a0;
- (struct DynamicArray<re::audio::PHASEOccluderData> { struct Allocator *x0; unsigned long long x1; unsigned long long x2; unsigned int x3; struct PHASEOccluderData *x4; })createPHASEOccluders:(const void *)a0;
- (id)createPHASEShape:(const void *)a0;
- (id)createPHASEShapeAndOccluder:(const void *)a0;
- (id)createPhaseShapeWithMeshID:(unsigned long long)a0 materials:(id)a1 mdlMesh:(id)a2 arkitMesh:(char)a3 meshType:(unsigned char)a4;
- (id)createSamplerDefinitionForToken:(unsigned long long)a0;
- (void)decrementOrDestroyEntityWithZeroCount:(unsigned long long)a0;
- (BOOL)doCleanUpSoundEventForToken:(unsigned long long)a0 ifNotInScene:(unsigned long long)a1;
- (double)doubleFromPlistValue:(id)a0 defaultValue:(double)a1;
- (char)engineShouldBeRunning;
- (char)eventBeingPrepared:(unsigned long long)a0;
- (id)eventFor:(unsigned long long)a0;
- (void)fillOutDebugInformation:(id)a0;
- (void)fillOutMeshBoundingBoxInformation:(id)a0;
- (char)getConfigurationForAudioAssetID:(unsigned long long)a0 configuration:(void *)a1;
- (struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity *x0; struct __shared_weak_count *x1; })getEntity:(unsigned long long)a0;
- (id)getListener;
- (id)getOrCreateSpatialMixerDefinitionUsing:(const void *)a0;
- (id)getPhaseShapeFromCacheWithMeshID:(unsigned long long)a0;
- (unsigned int)getPlayingSoundEventsCount;
- (unsigned int)getPreparingSoundEventsCount;
- (void)getSourceCount:(unsigned int *)a0 occluderCount:(unsigned int *)a1;
- (float)getSpaceBlendLevel;
- (id)initWithSampleRate:(double)a0 phaseQueue:(id)a1 audioEngineRunnableManager:(struct shared_ptr<re::AudioEngineRunnableManager> { struct AudioEngineRunnableManager *x0; struct __shared_weak_count *x1; })a2 phaseEngineUpdateMode:(long long)a3;
- (BOOL)isListenerCreatedInScene;
- (void)loadHumanDirectivityPlistFromURL:(id)a0;
- (id)mixerParametersForPrepareState:(const void *)a0 source:(id)a1 listener:(id)a2 mixerIdentifiers:(id)a3;
- (id)phaseIDForAssetID:(unsigned long long)a0;
- (struct unordered_set<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> { struct __hash_table<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *>, std::allocator<std::__hash_node<unsigned long long, void *>>> { struct __hash_node_base<std::__hash_node<unsigned long long, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<unsigned long long>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<unsigned long long>> { float x0; } x3; } x0; })playbackClientsWithPreparedOrPreparingSounds;
- (void)prepareExternalType:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState *x0; struct __shared_weak_count *x1; })a0 phaseEntity:(struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity *x0; struct __shared_weak_count *x1; })a1 completion:(id /* block */)a2;
- (void)prepareFileGroupType:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState *x0; struct __shared_weak_count *x1; })a0 phaseEntity:(struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity *x0; struct __shared_weak_count *x1; })a1 completion:(id /* block */)a2;
- (void)prepareFileType:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState *x0; struct __shared_weak_count *x1; })a0 phaseEntity:(struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity *x0; struct __shared_weak_count *x1; })a1 completion:(id /* block */)a2;
- (void)prepareGeneratorType:(struct shared_ptr<re::audio::REPHASESoundPrepareState> { struct REPHASESoundPrepareState *x0; struct __shared_weak_count *x1; })a0 phaseEntity:(struct shared_ptr<re::audio::REPHASEEntity> { struct REPHASEEntity *x0; struct __shared_weak_count *x1; })a1 completion:(id /* block */)a2;
- (void)removeAudioAssetID:(unsigned long long)a0;
- (void)removeListener;
- (void)removePhaseShapeFromCacheWithMeshID:(unsigned long long)a0;
- (void)removeSessionRoot:(unsigned long long)a0;
- (id)samplerDefForFileAsset:(unsigned long long)a0 mixerDefinition:(id)a1 prepareState:(const void *)a2;
- (id)samplerDefForFileAsset:(unsigned long long)a0 with:(const void *)a1;
- (struct shared_ptr<re::audio::REPHASEAudioScene> { struct REPHASEAudioScene *x0; struct __shared_weak_count *x1; })sceneForID:(unsigned long long)a0;
- (void)setPreparingWithData:(struct RESoundEventPreparingData { long long x0; unsigned long long x1; })a0 forToken:(unsigned long long)a1;
- (void)setReverbPreset:(long long)a0 allowingSpaceBlend:(BOOL)a1;
- (id)sourceObjectForEntityID:(unsigned long long)a0;
- (unsigned long long)uniqueEventCount;
- (struct DynamicArray<re::audio::PHASEOccluderUpdateData> { struct Allocator *x0; unsigned long long x1; unsigned long long x2; unsigned int x3; struct PHASEOccluderUpdateData *x4; })updatePHASEOccluders:(const void *)a0;

@end
