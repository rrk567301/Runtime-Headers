@class NSDictionary, TUCallProvider, TUVideoCallAttributes, NSNotificationCenter, NSString, TUCallScreenShareAttributes, TUProxyCall, NSArray, TUMediaTokens, TUCallNotificationManager, NSObject, TUCallDisplayContext, NSSet, NSData, TUCallServicesInterface, TUHandle, TUCallCenter, TUCallModel, NSUUID, TUDialRequest, TUSenderIdentity, NSURL, NSDate, TUParticipant, NSNumber;
@protocol OS_dispatch_queue, TUFeatureFlags;

@interface TUCall : NSObject <NSSecureCoding>

@property (class, readonly) char supportsSecureCoding;

@property (copy, nonatomic) NSString *uniqueProxyIdentifier;
@property (readonly, nonatomic) TUCallNotificationManager *callNotificationManager;
@property (readonly, nonatomic, getter=notificationCenter) NSNotificationCenter *notificationCenter;
@property (readonly, nonatomic) char lockdownModeEnabled;
@property (retain, nonatomic) TUProxyCall *comparativeCall;
@property (nonatomic) int filteredOutReason;
@property (copy, nonatomic) NSString *blockedByExtension;
@property (nonatomic) char supportsRecents;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (weak, nonatomic) TUCallServicesInterface *callServicesInterface;
@property (readonly, nonatomic) char prefersExclusiveAccessToCellularNetwork;
@property (retain, nonatomic) TUVideoCallAttributes *videoCallAttributes;
@property (retain, nonatomic) NSDate *dateAnsweredOrDialed;
@property (retain, nonatomic) NSDate *dateSentInvitation;
@property (retain, nonatomic) NSDate *dateStartedConnecting;
@property (retain, nonatomic) NSDate *dateConnected;
@property (retain, nonatomic) NSDate *dateScreeningEnded;
@property (retain, nonatomic) NSDate *dateEnded;
@property (nonatomic) long long verificationStatus;
@property (nonatomic) long long priority;
@property (retain, nonatomic) id<TUFeatureFlags> featureFlags;
@property (copy, nonatomic) id /* block */ contactsDataSourceCreationBlock;
@property (copy, nonatomic) id /* block */ lowPowerModeEnabledBlock;
@property (retain, nonatomic) NSURL *channelImageURL;
@property (readonly, copy, nonatomic) NSUUID *uniqueProxyIdentifierUUID;
@property (readonly, copy, nonatomic) TUParticipant *activeRemoteParticipant;
@property (readonly, nonatomic) TUCallProvider *backingProvider;
@property (readonly, nonatomic) TUCallProvider *displayProvider;
@property (nonatomic) long long provisionalHoldStatus;
@property (copy, nonatomic) NSString *callDirectoryIdentityExtension;
@property (nonatomic) int disconnectedReason;
@property (copy, nonatomic) NSString *sourceIdentifier;
@property (readonly, nonatomic) NSURL *imageURL;
@property (copy, nonatomic) NSString *isoCountryCode;
@property (readonly, copy, nonatomic) NSString *callHistoryIdentifier;
@property (readonly, nonatomic) int callStatus;
@property (readonly, nonatomic) long long serviceStatus;
@property (readonly, nonatomic) long long transmissionMode;
@property (readonly, nonatomic) char accessoryButtonEventsEnabled;
@property (readonly, nonatomic, getter=isReceivingTransmission) char receivingTransmission;
@property (readonly, nonatomic, getter=isSendingTransmission) char sendingTransmission;
@property (nonatomic) int transitionStatus;
@property (nonatomic) int faceTimeIDStatus;
@property (nonatomic) char hasUpdatedAudio;
@property (nonatomic) long long soundRegion;
@property (readonly, nonatomic) char shouldDisplayLocationIfAvailable;
@property (readonly, nonatomic) NSString *reminderString;
@property (nonatomic, getter=isVideo) char video;
@property (nonatomic) char wantsHoldMusic;
@property (nonatomic, getter=isEndpointOnCurrentDevice) char endpointOnCurrentDevice;
@property (nonatomic, getter=isScreening) char screening;
@property (nonatomic, getter=isScreeningDueToUserInteraction) char screeningDueToUserInteraction;
@property (nonatomic) char wasScreened;
@property (nonatomic) char screeningAnnouncementHasFinished;
@property (readonly, nonatomic, getter=isPTT) char ptt;
@property (readonly, nonatomic, getter=isSOS) char sos;
@property (readonly, nonatomic, getter=isRemoteUplinkMuted) char remoteUplinkMuted;
@property (readonly, nonatomic) float remoteMeterLevel;
@property (readonly, nonatomic) float localMeterLevel;
@property (readonly, copy, nonatomic) NSUUID *localSenderIdentityAccountUUID;
@property (readonly, copy, nonatomic) NSUUID *localSenderIdentityUUID;
@property (readonly, copy, nonatomic) TUSenderIdentity *localSenderIdentity;
@property (nonatomic) char hasEverUnsuppressedRingtone;
@property (nonatomic) char shouldSuppressRingtone;
@property (nonatomic) char ringtoneSuppressedRemotely;
@property (readonly, nonatomic, getter=isWiFiCall) char wiFiCall;
@property (readonly, nonatomic, getter=isVoIPCall) char voipCall;
@property (readonly, nonatomic) NSDictionary *providerContext;
@property (readonly, nonatomic) long long faceTimeTransportType;
@property (readonly, nonatomic) NSString *localizedHandoffRecipientDeviceCategory;
@property (readonly, nonatomic) NSNumber *handoffRecipientParticipant;
@property (readonly, nonatomic) long long providerErrorCode;
@property (readonly, nonatomic) long long providerEndedReason;
@property (readonly, nonatomic) NSDictionary *callStats;
@property (readonly, nonatomic) NSString *endedErrorString;
@property (readonly, nonatomic) NSString *endedReasonString;
@property (readonly, nonatomic, getter=isMediaStalled) char mediaStalled;
@property (readonly, nonatomic, getter=isVideoDegraded) char videoDegraded;
@property (readonly, nonatomic, getter=isVideoPaused) char videoPaused;
@property (readonly, nonatomic, getter=isVideoMirrored) char videoMirrored;
@property (readonly, nonatomic) long long videoStreamToken;
@property (nonatomic) long long answeringMachineStreamToken;
@property (readonly, nonatomic) long long inputAudioPowerSpectrumToken;
@property (readonly, nonatomic) long long outputAudioPowerSpectrumToken;
@property (readonly, copy, nonatomic) TUMediaTokens *tokens;
@property (readonly, copy, nonatomic) NSString *localMemberHandleValue;
@property (nonatomic) char requiresRemoteVideo;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } remoteAspectRatio;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } remoteVideoContentRect;
@property (readonly, nonatomic) long long cameraType;
@property (readonly, nonatomic) long long remoteCameraOrientation;
@property (readonly, nonatomic) long long remoteScreenOrientation;
@property (readonly, nonatomic) struct CGSize { double width; double height; } remoteScreenAspectRatio;
@property (readonly, nonatomic) char needsConversationOrVideoRelaySupport;
@property (readonly, nonatomic) char needsConversationRelaySupport;
@property (readonly, nonatomic) int callRelaySupport;
@property (readonly, nonatomic) char isSendingAudio;
@property (nonatomic) char isSendingVideo;
@property (readonly, nonatomic) char isActive;
@property (nonatomic, getter=isSharingScreen) char sharingScreen;
@property (nonatomic) char mixesVoiceWithMedia;
@property (nonatomic) char mediaPlaybackOnExternalDevice;
@property (nonatomic) char prefersToPlayDuringWombat;
@property (readonly, nonatomic, getter=isThirdPartyVideo) char thirdPartyVideo;
@property (readonly, copy, nonatomic) NSDictionary *endedReasonUserInfo;
@property (nonatomic) double hostCreationTime;
@property (nonatomic) double hostMessageSendTime;
@property (nonatomic) double clientMessageReceiveTime;
@property (nonatomic) char wasPulledToCurrentDevice;
@property (nonatomic) int hardPauseDigitsState;
@property (copy, nonatomic) NSString *hardPauseDigits;
@property (readonly, nonatomic) NSString *hardPauseDigitsDisplayString;
@property (copy, nonatomic) TUCallModel *model;
@property (readonly, copy, nonatomic) TUCallDisplayContext *displayContext;
@property (readonly, nonatomic) char shouldSuppressInCallUI;
@property (readonly, nonatomic, getter=isMutuallyExclusiveCall) char mutuallyExclusiveCall;
@property (readonly, copy, nonatomic) TUHandle *initiator;
@property (readonly, nonatomic, getter=isConversation) char conversation;
@property (readonly, nonatomic) NSUUID *conversationID;
@property (readonly, copy, nonatomic) NSSet *remoteParticipantHandles;
@property (readonly, nonatomic) char wantsStagingArea;
@property (nonatomic) int ttyType;
@property (readonly, nonatomic) int originatingUIType;
@property (nonatomic) long long liveVoicemailUnavailableReason;
@property (readonly, nonatomic) long long junkConfidence;
@property (readonly, nonatomic) long long identificationCategory;
@property (readonly, nonatomic, getter=isJunk) char junk;
@property (readonly, nonatomic, getter=isFromSiri) char fromSiri;
@property (readonly, nonatomic) char isKnownCaller;
@property (readonly, nonatomic, getter=isLocalUserInHomeCountry) char localUserInHomeCountry;
@property (readonly, nonatomic, getter=isAnsweringMachineAvailable) char answeringMachineAvailable;
@property (readonly, nonatomic, getter=hasNondisclosedGreeting) char nondisclosedGreeting;
@property (readonly, nonatomic, getter=hasIdentifiedSpamInCallerName) char identifiedSpamInCallerName;
@property (nonatomic) char joinedFromLink;
@property (nonatomic) long long bluetoothAudioFormat;
@property (readonly, nonatomic) TUCallScreenShareAttributes *screenShareAttributes;
@property (readonly, nonatomic) long long screenSharingIntention;
@property (readonly, nonatomic) char hasBeenRedirected;
@property (readonly, nonatomic) char isReRing;
@property (nonatomic) char hasEmergencyVideoStream;
@property (copy, nonatomic) NSSet *emergencyMediaItems;
@property (nonatomic, getter=isFailureExpected) char failureExpected;
@property (readonly, nonatomic, getter=isInternational) char international;
@property (readonly, nonatomic, getter=isDomestic) char domestic;
@property (nonatomic) char supportsEmergencyFallback;
@property (nonatomic) char supportsDTMFUpdates;
@property (readonly, nonatomic) char supportsSimultaneousVoiceAndData;
@property (readonly, nonatomic) char supportsScreening;
@property (readonly, weak, nonatomic) TUCallCenter *callCenter;
@property (readonly, copy, nonatomic) NSString *suggestedDisplayName;
@property (readonly, nonatomic) char wasDeclined;
@property (readonly, nonatomic) TUCallProvider *provider;
@property (readonly, nonatomic) int service;
@property (readonly, nonatomic) int status;
@property (readonly, nonatomic) char statusIsProvisional;
@property (readonly, nonatomic, getter=isHostedOnCurrentDevice) char hostedOnCurrentDevice;
@property (readonly, nonatomic, getter=isEligibleForManualScreening) char isEligibleForManualScreening;
@property (readonly, nonatomic, getter=isEligibleForScreening) char eligibleForScreening;
@property (readonly, nonatomic) char shouldPlayDTMFTone;
@property (readonly, nonatomic, getter=isRTT) char rtt;
@property (readonly, nonatomic, getter=isTTY) char tty;
@property (readonly, nonatomic) char supportsTTYWithVoice;
@property (readonly, copy, nonatomic) NSString *audioCategory;
@property (readonly, copy, nonatomic) NSString *audioMode;
@property (readonly, nonatomic) char needsManualInCallSounds;
@property (readonly, nonatomic, getter=isVoicemail) char voicemail;
@property (readonly, nonatomic) char isOnHold;
@property (readonly, nonatomic) NSDate *dateCreated;
@property (readonly, nonatomic) char hasSentInvitation;
@property (readonly, nonatomic, getter=isConnecting) char connecting;
@property (readonly, nonatomic, getter=isConnected) char connected;
@property (readonly, nonatomic, getter=isOutgoing) char outgoing;
@property (readonly, nonatomic, getter=isIncoming) char incoming;
@property (readonly, nonatomic, getter=isBlocked) char blocked;
@property (readonly, nonatomic) double startTime;
@property (readonly, copy, nonatomic) NSUUID *callGroupUUID;
@property (readonly, nonatomic, getter=isConferenced) char conferenced;
@property (nonatomic, getter=isUplinkMuted) char uplinkMuted;
@property (nonatomic, getter=isDownlinkMuted) char downlinkMuted;
@property (nonatomic) unsigned long long screenSharingType;
@property (readonly, copy, nonatomic) NSString *destinationID;
@property (readonly, copy, nonatomic) NSString *contactIdentifier;
@property (readonly, copy, nonatomic) NSArray *contactIdentifiers;
@property (readonly, nonatomic) TUHandle *handle;
@property (readonly, nonatomic) int abUID;
@property (readonly, copy, nonatomic) NSString *callUUID;
@property (readonly, copy, nonatomic) NSString *displayName;
@property (readonly, copy, nonatomic) NSString *displayFirstName;
@property (readonly, copy, nonatomic) NSString *callDirectoryName;
@property (readonly, nonatomic) long long callDirectoryIdentityType;
@property (readonly, copy, nonatomic) NSString *companyName;
@property (readonly, copy, nonatomic) NSString *companyDepartment;
@property (readonly, copy, nonatomic) NSString *callerNameFromNetwork;
@property (readonly, copy, nonatomic) NSString *localizedLabel;
@property (readonly, nonatomic) double callDuration;
@property (readonly, copy, nonatomic) NSString *callDurationString;
@property (nonatomic) char wasDialAssisted;
@property (readonly, nonatomic, getter=isEmergencyCall) char emergencyCall;
@property (readonly, nonatomic, getter=isEmergency) char emergency;
@property (readonly, nonatomic, getter=isUsingBaseband) char usingBaseband;
@property (readonly, nonatomic) NSData *localFrequency;
@property (readonly, nonatomic) NSData *remoteFrequency;
@property (readonly, copy, nonatomic) TUDialRequest *dialRequestForRedial;
@property (readonly, nonatomic) char supportsDTMFTones;
@property (nonatomic) int callSubType;

+ (id)_supplementalDialTelephonyCallStringForLocString:(id)a0 destination:(id)a1 isPhoneNumber:(char)a2 includeFaceTimeAudio:(char)a3;
+ (long long)acceptableJunkConfidence;
+ (id)faceTimeSupplementalDialTelephonyCallStringIncludingFTA:(char)a0;
+ (char)isJunkConfidenceLevelJunk:(long long)a0;
+ (long long)maxJunkConfidence;
+ (id)supplementalDialTelephonyCallString;
+ (id)supplementalDialTelephonyCallStringForDestination:(id)a0 isPhoneNumber:(char)a1;

- (void)dealloc;
- (id)description;
- (unsigned long long)hash;
- (id)init;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)initWithNotificationCenter:(id)a0;
- (char)isMuted;
- (char)setMuted:(char)a0;
- (void)disconnectWithReason:(int)a0;
- (id)errorAlertTitle;
- (void)setRemoteVideoPresentationSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })localAspectRatioForOrientation:(long long)a0;
- (void)ungroup;
- (void)updateWithCall:(id)a0;
- (void)_handleStatusChange;
- (char)_isEligibleForManualScreening:(char)a0 languageIdentifier:(id)a1;
- (void)answerWithRequest:(id)a0;
- (id)errorAlertMessage;
- (void)groupWithOtherCall:(id)a0;
- (char)hasRelaySupport:(int)a0;
- (void)hold;
- (id)initWithCall:(id)a0;
- (id)initWithUniqueProxyIdentifier:(id)a0;
- (id)initWithUniqueProxyIdentifier:(id)a0 endpointOnCurrentDevice:(char)a1;
- (id)initWithUniqueProxyIdentifier:(id)a0 endpointOnCurrentDevice:(char)a1 notificationCenter:(id)a2;
- (char)isDialRequestVideoUpgrade:(id)a0;
- (char)isEligibleForManualScreening:(id)a0;
- (char)isEligibleForScreening:(id)a0;
- (char)isEqualToCall:(id)a0;
- (char)isVideoUpgradeFromCall:(id)a0;
- (void)playDTMFToneForKey:(unsigned char)a0;
- (void)resetProvisionalState;
- (void)resetWantsHoldMusic;
- (void)sendHardPauseDigits;
- (id)serviceDisplayString;
- (void)setIsOnHold:(char)a0;
- (void)setLocalVideoLayer:(id)a0 forMode:(long long)a1;
- (void)setRemoteVideoLayer:(id)a0 forMode:(long long)a1;
- (void)setRemoteVideoPresentationState:(int)a0;
- (void)setScreenShareAttributes:(id)a0;
- (void)setSharingScreen:(char)a0 attributes:(id)a1;
- (id)supplementalInCallString;
- (void)suppressRingtone;
- (void)suppressRingtoneDueToRemoteSuppression;
- (void)unhold;
- (void)updateComparativeCall;

@end
