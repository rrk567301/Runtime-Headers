@class NSTimer, NSString, SORecognitionWindowAnimatedMicBackgroundView, SOMicrophoneLevelMeterController, SOClassicDictationPlainBackgroundView, SOClassicDictationBackgroundView, SORecognitionWindowAnimatedMicFillView, NSPopUpButton, NSWindow, NSButton, NSLayoutConstraint, NSBox;
@protocol SORecognitionWindowControllerDelegate;

@interface SORecognitionWindowController : NSWindowController <SOMicrophoneViewMeterLevelConsumer, NSMenuDelegate> {
    id<SORecognitionWindowControllerDelegate> _delegate;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _insertionPointRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _enclosingTextAreaRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _enclosingWindowRect;
    long long _clientWindowLevel;
    NSTimer *_resumeTravelingUITimer;
    NSTimer *_hideFeedbackTextTimer;
    char _waitingForWakeUpCommand;
    char _isInGlobalPosition;
    int _state;
    SORecognitionWindowAnimatedMicBackgroundView *_animatedContentView;
    SORecognitionWindowAnimatedMicFillView *_animatedContentFillView;
    SOMicrophoneLevelMeterController *_meterLevelController;
    SOClassicDictationBackgroundView *_backgroundView;
    SOClassicDictationPlainBackgroundView *_fillBackgroundView;
    NSButton *_doneButton;
    NSPopUpButton *_languagePopUp;
    NSBox *_languagePopUpTopDivider;
    NSLayoutConstraint *_animatedFillWindowHeightConstraint;
    NSLayoutConstraint *_doneButtonTopSpaceConstraint;
}

@property (retain) NSWindow *animationFillWindow;
@property (nonatomic) char isWindowAnimatingIn;
@property (nonatomic) int state;
@property (nonatomic) char ignoreMinimumMicrophoneMeterLevel;
@property (nonatomic) char useVerticalLayoutHUDPositioning;
@property (retain, nonatomic) id<SORecognitionWindowControllerDelegate> delegate;
@property (nonatomic) char mouseIsDown;
@property (nonatomic) char drawForExternalClient;
@property (nonatomic) char waitingForWakeUpCommand;
@property (nonatomic) char overrideSystemWidePreference;
@property (nonatomic) char bounceMicrophoneMeter;
@property (nonatomic) struct CGPoint { double x; double y; } initialLocation;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentFrame;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sharedRecognitionWindowController;

- (void)dealloc;
- (id)init;
- (void)close;
- (id)delegate;
- (void)setDelegate:(id)a0;
- (int)state;
- (void)setState:(int)a0;
- (void)awakeFromNib;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentFrame;
- (char)isVisible;
- (void)menuDidClose:(id)a0;
- (void)menuWillOpen:(id)a0;
- (void)stopDictation:(id)a0;
- (void)windowDidDeminiaturize:(id)a0;
- (void)windowDidMiniaturize:(id)a0;
- (void)windowDidMove:(id)a0;
- (void)_showProgress;
- (void)updateDictationLanguageIfNeeded;
- (void)_showMicrophone;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_centeredRectOnLowerMainScreenFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_delayedstatecheck;
- (void)_hideWindowUsingTransition:(int)a0;
- (struct CGPoint { double x0; double x1; })_midPointForBalloon;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_positionedRectOnLowerMainScreenFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_resetCurrentState;
- (void)_resumeTravelingUI;
- (void)_setUpTimerToResumeTravelingUI;
- (void)_showPreHeatWait;
- (void)_showProgressWithReset:(char)a0 showCancelButton:(char)a1;
- (void)_showRecognitionErrorState;
- (void)_showWindowForSelectionRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 textAreaRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 clientWindowRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 clientWindowLevel:(long long)a3 openTransition:(int)a4;
- (void)_showWindowUsingTransition:(int)a0;
- (void)_updateLanguagePopUpMenuWithLangItems:(id)a0;
- (void)_updateWindowContents:(id)a0;
- (void)_windowOrderOffScreenAndFinishAnimation:(id)a0;
- (void)_windowOrderOnScreenAndFinishAnimation:(id)a0;
- (void)beginShowingWindowUsingTransition:(int)a0;
- (char)bounceMicrophoneMeter;
- (void)brieflyHideWindowUsingTransition:(int)a0;
- (void)flashButton;
- (void)hidePointer;
- (char)ignoreMinimumMicrophoneMeterLevel;
- (char)isPresentingError;
- (void)languageChanged:(id)a0;
- (void)setBounceMicrophoneMeter:(char)a0;
- (void)setIgnoreMinimumMicrophoneMeterLevel:(char)a0;
- (void)setRecognizedText:(id)a0 messageType:(long long)a1;
- (void)setSelectionRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 enclosingWindowRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 clientWindowLevel:(long long)a2;
- (void)setWaitingForWakeUpCommand:(char)a0;
- (void)shakeAnimationDidEnd;
- (void)stopShowingWindowUsingTransition:(int)a0;
- (void)updateLinearMeterLevel:(float)a0;
- (void)updateVoiceControlLanguageIfNeeded;
- (char)waitingForWakeUpCommand;
- (char)windowContainsGlobalPoint:(struct CGPoint { double x0; double x1; })a0;

@end
