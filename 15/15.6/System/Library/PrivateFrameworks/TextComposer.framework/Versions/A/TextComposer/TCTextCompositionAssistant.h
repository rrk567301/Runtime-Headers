@class NLTagger, TCTextCompositionSmartRepliesCache, TCTextCompositionSmartRepliesRateLimiter, _TtC12TextComposer40TCTextCompositionCalendarEventGeneration;

@interface TCTextCompositionAssistant : NSObject {
    NLTagger *_tagger;
    TCTextCompositionSmartRepliesCache *_cache;
    struct _LXLexicon { } *_activeLexicon;
    _TtC12TextComposer40TCTextCompositionCalendarEventGeneration *_calendarEventGeneration;
    TCTextCompositionSmartRepliesRateLimiter *_smartRepliesRateLimitier;
}

+ (id)dominantLanguageForString:(id)a0;
+ (id)languageObjectWithIdentifier:(id)a0;
+ (char)isCJKLanguage:(id)a0;
+ (id)sharedAssistant;
+ (char)string:(id)a0 matchesLanguage:(id)a1 options:(id)a2;
+ (char)_canHandleAttributedString:(id)a0 proposedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 accumulateTokenCount:(unsigned long long)a2 lookBack:(char)a3 tagger:(id)a4 options:(id)a5 actualRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a6 contextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a7 resolvedPreferredLanguage:(id *)a8 error:(id *)a9;
+ (unsigned long long)_estimatedTokenCountForString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 tagger:(id)a2;
+ (id)_loadDetailedIssueTypes;
+ (unsigned long long)_maximumTokenCountForRewritingType:(id)a0;
+ (id)calendarEventFromModelOutput:(id)a0 input:(id)a1;
+ (int)checkString:(id)a0 forLanguagesInSet:(id)a1 numTopLanguagesToCheck:(long long)a2;
+ (unsigned long long)composedCharacterCount:(id)a0;
+ (id)detailedIssueTypes;
+ (char)disableRecognizer;
+ (char)dominantLanguageForStringIsSupported:(id)a0 regionPolicy:(unsigned long long)a1;
+ (unsigned long long)editDistanceBetweenStrings:(id)a0 string2:(id)a1;
+ (id)expectedCharacterContent:(id)a0;
+ (id)expectedCharacterContent:(id)a0 preferredLanguage:(id)a1;
+ (id)extendedModelIdentifier;
+ (struct _NSRange { unsigned long long x0; unsigned long long x1; })findMisspelledWordInString:(id)a0 preferredLanguage:(id)a1;
+ (char)isCJLanguage:(id)a0;
+ (char)isChinese:(id)a0;
+ (char)isEnglish:(id)a0;
+ (char)isFrench:(id)a0;
+ (char)isFrenchWithCanadaLocale:(id)a0;
+ (char)isInputOutputExactMatch:(id)a0 output:(id)a1 threshold:(float)a2 stopWords:(id)a3 exemptionRegexStringList:(id)a4 alwaysAllowOneMistake:(char)a5;
+ (char)isInputOutputFuzzyMatch:(id)a0 output:(id)a1 threshold:(float)a2 stopWords:(id)a3 exemptionRegexStringList:(id)a4 alwaysAllowOneMistake:(char)a5;
+ (char)isLanguageSupported:(id)a0 regionPolicy:(unsigned long long)a1;
+ (char)isStringEligbleForLID:(id)a0;
+ (char)isStringInSupportedLanguage:(id)a0 contextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 numTopLanguagesToCheck:(long long)a2 preferredLanguage:(id)a3 regionPolicy:(unsigned long long)a4 allowAllCaps:(char)a5 tagger:(id)a6;
+ (char)isStringInSupportedLanguage:(id)a0 numTopLanguagesToCheck:(long long)a1 preferredLanguage:(id)a2 regionPolicy:(unsigned long long)a3 allowAllCaps:(char)a4;
+ (char)language:(id)a0 matchesPreferredLanguages:(id)a1;
+ (void)lookupTokens:(id)a0 preferredLanguage:(id)a1 options:(unsigned long long)a2 entryEnumerator:(id /* block */)a3;
+ (id)modelRunner;
+ (id)normalizedOnlyLettersComponentsForString:(id)a0;
+ (unsigned long long)regionPolicyForOptions:(id)a0;
+ (id)replaceSpecialCharacters:(id)a0;
+ (char)resolvedLanguageForStringIsSupportedForSmartReplies:(id)a0 regionPolicy:(unsigned long long)a1 options:(id)a2 preferredLanguageOverrideForTesting:(id)a3;
+ (id)resolvedPreferredLanguageForString:(id)a0 options:(id)a1 allowFallback:(char)a2;
+ (id)resolvedPreferredLanguageForString:(id)a0 options:(id)a1 allowFallback:(char)a2 supportedLanguages:(id)a3 useCachedValue:(char)a4;
+ (id)resolvedPreferredLanguageForString:(id)a0 regionPolicy:(unsigned long long)a1 allowFallback:(char)a2;
+ (id)resolvedPreferredLanguageForStringWithCacheOverride:(id)a0 options:(id)a1 allowFallback:(char)a2;
+ (char)rewritingTypeUsesSingleChunk:(id)a0;
+ (id)richSmartReplyGen;
+ (id)sharedChecker;
+ (id)supportedLanguagesWithLocalesForRegionPolicy:(unsigned long long)a0;
+ (id)supportedLanguagesWithScriptsForRegionPolicy:(unsigned long long)a0;
+ (id)tokenByNormalizingString:(id)a0;
+ (id)tokenByRemovingLeadingPunctuation:(id)a0 acceptableLeadingPunctuationMarks:(id)a1;
+ (id)tokenByRemovingTrailingPunctuation:(id)a0 acceptableTrailingPunctuationMarks:(id)a1;
+ (id)transformChineseResultString:(id)a0 originalLanguage:(id)a1 regionPolicy:(unsigned long long)a2;
+ (id)transformChineseSmartReplyAnswerOptions:(id)a0 originalLanguage:(id)a1 regionPolicy:(unsigned long long)a2;
+ (id)transformSmartReplyUserQuestionnaireEntries:(id)a0 originalString:(id)a1 regionPolicy:(unsigned long long)a2;
+ (id)transformString:(id)a0 originalString:(id)a1 regionPolicy:(unsigned long long)a2;
+ (id)userPreferredLanguageWithOptions:(id)a0;
+ (id)userPreferredLanguageWithOptions:(id)a0 supportedLanguages:(id)a1;
+ (id)userPreferredLanguagesWithOptions:(id)a0;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (unsigned long long)nextToken;
- (id)tagger;
- (void)requestCancellationForToken:(unsigned long long)a0;
- (void)requestReviewOfAttributedString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 options:(id)a2 completionHandler:(id /* block */)a3;
- (void)requestRewritingOfAttributedString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 rewritingType:(id)a2 options:(id)a3 completionHandler:(id /* block */)a4;
- (void)requestShortFormRepliesWithContextHistory:(id)a0 documentType:(id)a1 options:(id)a2 completionHandler:(id /* block */)a3;
- (void)requestLongFormRepliesWithContextHistory:(id)a0 documentType:(id)a1 replyType:(id)a2 baseResponse:(id)a3 userFilledQuestionnaire:(id)a4 options:(id)a5 completionHandler:(id /* block */)a6;
- (void)requestBasicLongFormRepliesAndQuestionnaireWithContextHistory:(id)a0 documentType:(id)a1 replyType:(id)a2 options:(id)a3 completionHandler:(id /* block */)a4;
- (void)requestCalendarEventFromOCRInput:(id)a0 inputOptions:(id)a1 completionHandler:(id /* block */)a2;
- (void)requestCalendarEventFromOCRInputDictionary:(id)a0 completionHandler:(id /* block */)a1;
- (void)requestCancellationForToken:(unsigned long long)a0 cancelModelInvocations:(char)a1;
- (void)requestEmojiRepliesForMessage:(id)a0 messageText:(id)a1 options:(id)a2 completionHandler:(id /* block */)a3;
- (void)requestEmojiRepliesWithContextHistory:(id)a0 documentType:(id)a1 tapbackMessageGUIDs:(id)a2 options:(id)a3 completionHandler:(id /* block */)a4;
- (void)requestLongFormRepliesWithContextHistory:(id)a0 documentType:(id)a1 replyType:(id)a2 options:(id)a3 completionHandler:(id /* block */)a4;
- (void)requestLongFormRepliesWithContextHistory:(id)a0 documentType:(id)a1 replyType:(id)a2 userFilledQuestionnaire:(id)a3 options:(id)a4 completionHandler:(id /* block */)a5;
- (void)requestPrewarmingForFeature:(id)a0 options:(id)a1;
- (void)requestPrewarmingForInput:(id)a0 rewritingTypes:(id)a1;
- (void)requestPrewarmingForRewritingTypes:(id)a0;
- (void)requestPrewarmingForSmartReplies:(id)a0;
- (void)requestPrewarmingForSmartReplies:(id)a0 options:(id)a1;
- (void)requestReviewOutputForInput:(id)a0 completionHandler:(id /* block */)a1;
- (void)requestRewritingOfInput:(id)a0 rewritingType:(id)a1 completionHandler:(id /* block */)a2;
- (void)requestUserQuestionnaireWithContextHistory:(id)a0 documentType:(id)a1 replyType:(id)a2 baseResponse:(id)a3 options:(id)a4 completionHandler:(id /* block */)a5;
- (void)requestUserQuestionnaireWithContextHistory:(id)a0 documentType:(id)a1 replyType:(id)a2 options:(id)a3 completionHandler:(id /* block */)a4;
- (void)releaseMemory;
- (char)canHandleAttributedString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)cancellationErrorForToken:(unsigned long long)a0;
- (char)cancellationRequestedForToken:(unsigned long long)a0;
- (id)inputArrayForAttributedString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 options:(id)a2 error:(id *)a3;
- (id)stringFromString:(id)a0 byApplyingSmartQuotes:(char)a1 smartDashes:(char)a2 quotesArray:(id)a3;
- (id)cleanedStringForString:(id)a0 results:(id)a1;
- (char)foundBlockedAttributionInString:(id)a0 preferredLanguage:(id)a1 regionPolicy:(unsigned long long)a2;
- (id)disallowedStrings:(id)a0 outputString:(id)a1;
- (char)foundAllowedAttributionInString:(id)a0 preferredLanguage:(id)a1 regionPolicy:(unsigned long long)a2;
- (char)_additionalPunctuationChangeDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_additionalPunctuationDeletionDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_additionalPunctuationInsertionDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_apostropheDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (id)_cancellationQueue;
- (struct __CFSet { } *)_cancellationSet;
- (char)_capitalizationDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (void)_defaultDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_eligibleForSmartRepliesWith:(id)a0 inputContextHistory:(id)a1 documentType:(id)a2 regionPolicy:(unsigned long long)a3 preferredLanguageOverrideForTesting:(id)a4 options:(id)a5 outError:(id *)a6;
- (id)_fullPromptForShortFormRepliesMessages:(id)a0 inputContextHistory:(id)a1 outNormalizedNamesToNames:(id)a2 options:(id)a3 outError:(id *)a4;
- (char)_furtherWordInsertionDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_homophoneDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_hyphenationDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_lexicalClassDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_partialReplacementDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_phraseDeletionDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_phraseInsertionDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (id)_previousContextHistoryFor:(id)a0 replyToMessageID:(id)a1;
- (id)_sentenceRangesForString:(id)a0 preferredLanguage:(id)a1 tagger:(id)a2;
- (id)_shortFormRepliesForMailFrom:(id)a0 inputPreferences:(id)a1 options:(id)a2;
- (id)_shortFormRepliesForMessagesFrom:(id)a0 normalizedNamesToNames:(id)a1 inputContextHistory:(id)a2 preferredLanguage:(id)a3 inputPreferences:(id)a4 options:(id)a5;
- (char)_spellingDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (id)_stringFromString:(id)a0 byApplyingResults:(id)a1;
- (id)_stripEmailSignaturesAndPlaceholders:(id)a0;
- (char)_trailingPunctuationChangeDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_transpositionDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_wordDeletionDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (char)_wordInsertionDescribeDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 tagger:(id)a2 preferredLanguage:(id)a3 detail:(id)a4;
- (void)addDetail:(id)a0 sentenceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 toDictionary:(id)a2;
- (char)addGrammarCheckingDetailsForRewrittenString:(id)a0 originalString:(id)a1 originalAttributedString:(id)a2 originalSentenceRanges:(id)a3 tagger:(id)a4 preferredLanguage:(id)a5 writingOptions:(id)a6 toDictionary:(id)a7;
- (char)addGrammarCheckingDetailsForRewrittenString:(id)a0 sentenceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 originalString:(id)a2 originalAttributedString:(id)a3 sentenceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 tagger:(id)a5 preferredLanguage:(id)a6 writingOptions:(id)a7 toDictionary:(id)a8;
- (id)addOrRemovePeriod:(id)a0 endRepliesInPeriod:(char)a1;
- (id)addRegionPolicyFor:(id)a0 inputOptions:(id)a1;
- (char)areGroupMessagesAllowed:(id)a0;
- (void)buildNormalizationDictionary:(id)a0 outNormalizedNamesToNames:(id)a1 outNamesToNormalizedNames:(id)a2 outSenderIDtoNormalizedNames:(id)a3;
- (char)canHandleAttributedString:(id)a0 proposedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 actualRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2 contextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a3 error:(id *)a4;
- (char)canHandleAttributedString:(id)a0 proposedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 actualRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2 error:(id *)a3;
- (char)canHandleAttributedString:(id)a0 proposedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 rewritingType:(id)a2 options:(id)a3 actualRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a4 contextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a5 error:(id *)a6;
- (char)canHandleAttributedString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 error:(id *)a2;
- (id)cancellationErrorIfCancellationRequestedForToken:(unsigned long long)a0;
- (int)categorizeClassificationResult:(id)a0 attributions:(id *)a1;
- (char)checkLexiconForString:(id)a0 locale:(id)a1;
- (id)classificationPromptForRewritingType:(id)a0 instructions:(id)a1 input:(id)a2 output:(id)a3 options:(id)a4 needsAdditionalLanguageIdentification:(char)a5 error:(id *)a6;
- (id)cleanedInput:(id)a0;
- (id)cleanedInputForInput:(id)a0;
- (id)cleanedOutputForOutput:(id)a0;
- (id)detailDictionaryForTokenDifferenceManager:(id)a0 difference:(id)a1 originalAttributedString:(id)a2 sentenceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 tagger:(id)a4 preferredLanguage:(id)a5 writingOptions:(id)a6;
- (char)disableMailSRFiltering;
- (id)disallowedStringsWithUserPayload:(id)a0 outputString:(id)a1 preferredLanguage:(id)a2;
- (char)enableAllGroupMessageReplies;
- (char)endRepliesInPeriod:(id)a0 sortedMessageEntries:(id)a1;
- (id)extendedPromptForRewritingType:(id)a0 string:(id)a1 instructions:(id)a2 options:(id)a3 error:(id *)a4;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })findMisspelledWordInString:(id)a0 preferredLanguage:(id)a1;
- (char)foundAllowedAttributionInString:(id)a0 preferredLanguage:(id)a1;
- (char)foundAttributionInString:(id)a0 usingGazetteer:(id)a1 preferredLanguage:(id)a2;
- (char)foundAttributionInString:(id)a0 usingGazetteer:(id)a1 preferredLanguage:(id)a2 regionPolicy:(unsigned long long)a3;
- (char)foundBlockedAttributionInString:(id)a0 preferredLanguage:(id)a1;
- (char)foundTag:(id)a0 inString:(id)a1 preferredLanguage:(id)a2 regionPolicy:(unsigned long long)a3 withTagger:(id)a4 usingOptions:(unsigned long long)a5;
- (id)fullPromptForExplanationOfReplacingString:(id)a0 withString:(id)a1 forDocument:(id)a2 options:(id)a3;
- (id)fullPromptForGeneratingUserQuestionnaire:(id)a0 forDocument:(id)a1 replyType:(id)a2 options:(id)a3 outError:(id *)a4;
- (id)fullPromptForLongFormReplies:(id)a0 forDocument:(id)a1 replyType:(id)a2 baseResponse:(id)a3 userFilledQuestionnaire:(id)a4 options:(id)a5 outError:(id *)a6;
- (id)fullPromptForLongFormReplies:(id)a0 forDocument:(id)a1 replyType:(id)a2 options:(id)a3 outError:(id *)a4;
- (id)fullPromptForLongFormReplies:(id)a0 forDocument:(id)a1 replyType:(id)a2 userFilledQuestionnaire:(id)a3 options:(id)a4 outError:(id *)a5;
- (id)fullPromptForReviewOfDocument:(id)a0 options:(id)a1;
- (id)fullPromptForRewritingType:(id)a0 options:(id)a1 forDocument:(id)a2 leadingContext:(id)a3 outError:(id *)a4;
- (id)fullPromptForRewritingType:(id)a0 options:(id)a1 forDocument:(id)a2 withInstructions:(id)a3 withGeneratedOutput:(id)a4 leadingContext:(id)a5 needsAdditionalLanguageIdentification:(char)a6 outError:(id *)a7;
- (id)fullPromptForShortFormReplies:(id)a0 forDocument:(id)a1 replyToMessageID:(id)a2 outNormalizedNamesToNames:(id)a3 options:(id)a4 outError:(id *)a5;
- (char)generateCandBarEmojis;
- (char)hasExclamationUsageInRecentContextHistory:(id)a0;
- (char)includeUsernameMailPrompt;
- (id)inputArrayForAttributedString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 rewritingType:(id)a2 options:(id)a3 error:(id *)a4;
- (id)inputByNormalizingParagraphBoundariesForInput:(id)a0;
- (id)inputByNormalizingParagraphBoundariesForInput:(id)a0 collapseRepeatedLineBreaks:(char)a1;
- (id)inputByReplacingEmojiForInput:(id)a0;
- (id)inputNormalizedForPromptIngestionForInput:(id)a0;
- (id)inputNormalizedForPromptIngestionForInput:(id)a0 collapseRepeatedLineBreaks:(char)a1;
- (char)isEligibleForSmartRepliesQuestionnaire:(id)a0;
- (char)isEligibleForSmartRepliesWith:(id)a0 replyToMessageID:(id)a1 documentType:(id)a2 isPrecomputationRequest:(char)a3 regionPolicy:(unsigned long long)a4 options:(id)a5 outError:(id *)a6;
- (char)isEligibleForSmartRepliesWith:(id)a0 replyToMessageID:(id)a1 documentType:(id)a2 isPrecomputationRequest:(char)a3 regionPolicy:(unsigned long long)a4 preferredLanguageOverrideForTesting:(id)a5 options:(id)a6 outError:(id *)a7;
- (char)isEligibleMessageSRs:(id)a0 regionPolicy:(unsigned long long)a1;
- (char)isFirstWordAlphabetical:(id)a0 tagger:(id)a1 inputPreferences:(id)a2;
- (char)isFirstWordTitleCase:(id)a0 tagger:(id)a1 inputPreferences:(id)a2;
- (char)isInlineReplyToPreviousMessage:(id)a0 lastMessage:(id)a1;
- (char)isMessageFromUser:(id)a0 inputContextHistory:(id)a1;
- (char)isUserARecipient:(id)a0 lastMessage:(id)a1;
- (char)isWordTitleCase:(id)a0;
- (id)longFormRepliesFromModelOutput:(id)a0 documentType:(id)a1 inputPreferences:(id)a2 options:(id)a3;
- (id)mailSnippetFromCleanedString:(id)a0 regionPolicy:(unsigned long long)a1;
- (id)matchExclamationUsage:(id)a0 hasRecentExclamationUsage:(char)a1;
- (id)matchStartingCapitalization:(id)a0 userTitleCasesTexts:(char)a1 inputPreferences:(id)a2;
- (id)mutableOptionsForOptions:(id)a0;
- (id)mutableOptionsForOptions:(id)a0 useCaseIdentifier:(id)a1;
- (id)mutableOptionsForOptions:(id)a0 withString:(id)a1;
- (id)nWordsInString:(id)a0 regionPolicy:(unsigned long long)a1;
- (unsigned long long)nonWhitespaceIndexInString:(id)a0;
- (id)normalizedMessage:(id)a0 namesToNormalizedNames:(id)a1 preferredLanguage:(id)a2;
- (id)recentMessages:(id)a0 documentType:(id)a1;
- (id)regionalPunctuationSpacingVersionOfString:(id)a0 preferredLanguage:(id)a1;
- (id)regionalVersionOfString:(id)a0 tagger:(id)a1 preferredLanguage:(id)a2;
- (void)releaseCheckerMemory;
- (id)replaceNormalizedNames:(id)a0 normalizedNamesToNames:(id)a1;
- (id)replacedVersionOfString:(id)a0 replacementDictionary:(id)a1;
- (id)replyTypesFromOutputString:(id)a0;
- (void)requestAdditionalDescriptionForGrammarDetail:(id)a0 fromResult:(id)a1 inAttributedString:(id)a2 options:(id)a3 completionHandler:(id /* block */)a4;
- (void)requestEmojiRepliesWithContextHistory:(id)a0 documentType:(id)a1 replyToMessageID:(id)a2 options:(id)a3 completionHandler:(id /* block */)a4;
- (void)requestModelInvocationToGenerateUserQuestionnaire:(id)a0 forString:(id)a1 documentType:(id)a2 replyType:(id)a3 token:(unsigned long long)a4 pid:(unsigned long long)a5 requestIdentifier:(id)a6 regionPolicy:(unsigned long long)a7 completionHandler:(id /* block */)a8;
- (void)requestModelInvocationToGenerateUserQuestionnaireStubbed:(id)a0 documentType:(id)a1 replyType:(id)a2 completionHandler:(id /* block */)a3;
- (void)requestModelInvocationWithPrompt:(id)a0 forString:(id)a1 documentType:(id)a2 normalizedNamesToNames:(id)a3 inputContextHistory:(id)a4 token:(unsigned long long)a5 isPrecomputeRequest:(char)a6 isExternalAPICall:(char)a7 pid:(unsigned long long)a8 requestIdentifier:(id)a9 regionPolicy:(unsigned long long)a10 inputPreferences:(id)a11 completionHandler:(id /* block */)a12;
- (void)requestModelInvocationWithPrompt:(id)a0 forString:(id)a1 documentType:(id)a2 replyType:(id)a3 token:(unsigned long long)a4 pid:(unsigned long long)a5 requestIdentifier:(id)a6 regionPolicy:(unsigned long long)a7 inputPreferences:(id)a8 completionHandler:(id /* block */)a9;
- (void)requestModelInvocationWithPrompt:(id)a0 forString:(id)a1 documentType:(id)a2 replyType:(id)a3 userFilledQuestionnaire:(id)a4 token:(unsigned long long)a5 pid:(unsigned long long)a6 requestIdentifier:(id)a7 regionPolicy:(unsigned long long)a8 inputPreferences:(id)a9 completionHandler:(id /* block */)a10;
- (void)requestModelInvocationWithPrompt:(id)a0 forString:(id)a1 rewritingType:(id)a2 instructions:(id)a3 userDescription:(id)a4 token:(unsigned long long)a5 seed:(unsigned long long)a6 draftSteps:(unsigned long long)a7 pid:(unsigned long long)a8 appPid:(unsigned long long)a9 requestIdentifier:(id)a10 regionPolicy:(unsigned long long)a11 completionHandler:(id /* block */)a12;
- (void)requestModelInvocationWithPrompt:(id)a0 input:(id)a1 token:(unsigned long long)a2 pid:(unsigned long long)a3 requestIdentifier:(id)a4 regionPolicy:(unsigned long long)a5 completionHandler:(id /* block */)a6;
- (void)requestModelInvocationWithPromptStubbed:(id)a0 documentType:(id)a1 completionHandler:(id /* block */)a2;
- (void)requestModelInvocationWithPromptStubbed:(id)a0 documentType:(id)a1 replyType:(id)a2 completionHandler:(id /* block */)a3;
- (void)requestModelInvocationWithPromptStubbed:(id)a0 documentType:(id)a1 replyType:(id)a2 userFilledQuestionnaire:(id)a3 completionHandler:(id /* block */)a4;
- (void)requestOpenEndedRewritingOfInput:(id)a0 completionHandler:(id /* block */)a1;
- (void)requestProcessingOfInstructionsForInput:(id)a0 isPost:(char)a1 instructions:(id)a2 options:(id)a3 result:(id)a4 inputString:(id)a5 completionHandler:(id /* block */)a6;
- (void)requestProofreadingRewritingOfInput:(id)a0 completionHandler:(id /* block */)a1;
- (void)requestReviewOfInput:(id)a0 completionHandler:(id /* block */)a1;
- (void)requestShortFormRepliesWithContextHistory:(id)a0 replyToMessageID:(id)a1 documentType:(id)a2 options:(id)a3 completionHandler:(id /* block */)a4;
- (id)resultOptionsForAdditionalResultOptions:(id)a0 originalResultOptions:(id)a1;
- (id)resultOptionsForRewritingType:(id)a0 string:(id)a1 result:(id)a2 userFeedbackInputString:(id)a3 preferredLanguage:(id)a4 originalResultOptions:(id)a5;
- (id)sanitizationForLongForm:(id)a0;
- (id)sanitizationListForRewritingType:(id)a0 string:(id)a1;
- (id)sanitizationListForShortFormSmartReplies:(id)a0;
- (id)shortFormRepliesFromModelOutput:(id)a0 documentType:(id)a1 normalizedNamesToNames:(id)a2 inputContextHistory:(id)a3 preferredLanguage:(id)a4 inputPreferences:(id)a5 options:(id)a6;
- (char)shouldAcceptDetailForTokenDifferenceManager:(id)a0 difference:(id)a1 originalAttributedString:(id)a2 tagger:(id)a3 preferredLanguage:(id)a4;
- (char)shouldHaltForTokenDifferenceManager:(id)a0 difference:(id)a1 preferredLanguage:(id)a2;
- (char)shouldProcessInstructionClassificationResults:(id)a0 preferredLanguage:(id)a1 regionPolicy:(unsigned long long)a2 error:(id *)a3;
- (char)shouldProcessInstructions:(id)a0 rewritingType:(id)a1 options:(id)a2 error:(id *)a3;
- (char)shouldProcessMessageEntryForSmartReplies:(id)a0;
- (char)shouldSuppressValidationWithOptions:(id)a0;
- (id)smartQuotesAndDashesVersionOfString:(id)a0 smartQuotes:(char)a1 smartDashes:(char)a2 quotesArray:(id)a3;
- (id)spaceCorrectionDetailDictionaryForTokenDifferenceManager:(id)a0 tokenEdit:(id)a1 originalAttributedString:(id)a2 sentenceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 tagger:(id)a4 preferredLanguage:(id)a5 writingOptions:(id)a6;
- (char)stringAppearsToContainURLOrPhoneNumber:(id)a0;
- (char)stringHasValidLengthWords:(id)a0;
- (char)stringLooksLikeJunk:(id)a0 tagger:(id)a1 preferredLanguage:(id)a2;
- (id)stubbedCorrectedStringForString:(id)a0;
- (id)textCheckingResultsForRewrittenString:(id)a0 originalString:(id)a1 originalAttributedString:(id)a2 offset:(unsigned long long)a3 preferredLanguage:(id)a4 writingOptions:(id)a5 error:(id *)a6;
- (id)textualRepliesFrom:(id)a0 options:(id)a1;
- (id)trimmedReplyType:(id)a0;
- (id)updatePunctuationSpacingForFrench:(id)a0 preferredLanguage:(id)a1;
- (char)useGenerativeModels;
- (char)useLeadingContext;
- (char)useOpenEndedPostClassifier;
- (char)useServerModelForConciseTone;
- (char)useServerModelForFriendlyTone;
- (char)useServerModelForMagicRewrite;
- (char)useServerModelForProfessionalTone;
- (char)useServerModelForProofreadingReview;
- (id)userFeedbackInputStringForRewritingType:(id)a0 options:(id)a1 forDocument:(id)a2 leadingContext:(id)a3;
- (char)userIsPrimaryRecipientfor:(id)a0 lastMessage:(id)a1;
- (id)userNameFrom:(id)a0 lastMessage:(id)a1;
- (char)userTitleCasesTexts:(id)a0 sortedMessageEntries:(id)a1 inputPreferences:(id)a2;
- (char)validateUserFilledQuestionnaire:(id)a0;
- (id)wordsToBlockInString:(id)a0 tagger:(id)a1 preferredLanguage:(id)a2 offensiveOnly:(char)a3;
- (id)wordsToPreserveInString:(id)a0 tagger:(id)a1 preferredLanguage:(id)a2;

@end
