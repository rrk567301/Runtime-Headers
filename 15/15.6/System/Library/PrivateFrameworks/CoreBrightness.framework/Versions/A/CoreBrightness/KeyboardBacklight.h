@class NSLock, NSMutableDictionary, NSString, HIDElement, HIDDevice, NSMutableArray, NSObject;
@protocol OS_dispatch_source, OS_dispatch_queue;

@interface KeyboardBacklight : CBModule <CBContainerModuleProtocol, CBHIDServiceProtocol> {
    BOOL _muted;
    BOOL _keyboardAvailable;
    BOOL _manualAdjust;
    BOOL _saturated;
    BOOL _dimmed;
    BOOL _suspend;
    BOOL _suspendDimming;
    BOOL _userActive;
    BOOL _displayOn;
    BOOL _clamshellClosed;
    float _previousLevelPercentage;
    int _numOfBacklightUpdateRetries;
    int _currentFadeSpeed;
    BOOL _currentEnableState;
    float _currentLevel;
    float _currentBrightness;
    HIDElement *_levelElement;
    HIDElement *_levelFadeSpeedElement;
    HIDElement *_enableElement;
    HIDElement *_enableFadeSpeedElement;
    NSMutableArray *_alsServiceClients;
    unsigned long long _activityNotificationHandle;
    NSMutableDictionary *_properties;
    NSObject<OS_dispatch_source> *_forceLuxUpdateTimer;
    NSObject<OS_dispatch_source> *_backlightUpdateTimer;
    NSObject<OS_dispatch_queue> *_backlightUpdateQueue;
    HIDElement *_enableAuthenticationElement;
    BOOL _backlightUpdateInProgress;
    NSLock *_backlightUpdateLock;
    struct mach_timebase_info { unsigned int numer; unsigned int denom; } _clockInfo;
    int _backlightUpdateFrequency;
    unsigned long long _lastBacklightUpdate;
    unsigned long long _backlightUpdateType;
    int _turnOnBacklightDelayMS;
    BOOL _forceDelayToTurnOnBacklight;
    NSObject<OS_dispatch_source> *_rampTimer;
    struct Ramp { float start; float target; float current; double startTime; double duration; } _ramp;
}

@property int dimTime;
@property float ambientOffset;
@property (readonly) float ambientHighThreshold;
@property (readonly) float ambientLowThreshold;
@property BOOL userActive;
@property BOOL keyboardAvailable;
@property HIDDevice *device;
@property BOOL manualAdjust;
@property BOOL autoAdjust;
@property float levelPercentage;
@property float levelMin;
@property float levelMax;
@property float levelOff;
@property int color;
@property unsigned int levelUnit;
@property unsigned int unitExponent;
@property (readonly) float ambientSlope;
@property (readonly) float maxUserLevel;
@property float currentLux;
@property BOOL hysteresisOn;
@property BOOL muted;
@property (retain) NSMutableDictionary *keyboardSpecificPreferences;
@property float previousLevel;
@property (readonly) BOOL suppressed;
@property BOOL saturated;
@property BOOL suspend;
@property float brightness;
@property BOOL builtIn;
@property BOOL dimmed;
@property BOOL clamshellClosed;
@property unsigned long long keyboardID;
@property (readonly) BOOL supportsAuthentication;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (unsigned long long)getHashIDForDevice:(id)a0;

- (void)dealloc;
- (BOOL)setProperty:(id)a0 forKey:(id)a1;
- (void)start;
- (float)level;
- (void)stop;
- (id)initWithQueue:(id)a0;
- (BOOL)KBAutoBrightnessEnablePropertyHandler:(id)a0;
- (BOOL)KBAvailabilityUpdateHandler:(id)a0;
- (BOOL)KBBrightnessPropertyHandler:(id)a0;
- (BOOL)KBDisplayBrightnessFactorPropertyHandler:(id)a0;
- (BOOL)KBIdleDimTimeHandler:(id)a0;
- (BOOL)KBUpdateFrequencyHandler:(id)a0;
- (BOOL)KBUserOffsetPropertyHandler:(id)a0;
- (id)brightnessUpdateReasonToString:(unsigned long long)a0;
- (BOOL)commitElements:(id)a0 direction:(long long)a1 error:(id)a2;
- (void)getKeyboardBacklightPreferences;
- (BOOL)KBAuthenticationHandler:(id)a0;
- (BOOL)KBAutoBrightnessSuspendPropertyHandler:(id)a0;
- (BOOL)KBBacklightLevelPropertyHandler:(id)a0;
- (BOOL)KBClamshellUpdateHandler:(id)a0;
- (BOOL)KBIdleDimPropertyHandler:(id)a0;
- (BOOL)KBSuspendDimmingPropertyHandler:(id)a0;
- (BOOL)KBUserActivityUpdateHandler:(id)a0;
- (void)setKBPreferenceBacklightMaxUser;
- (BOOL)addHIDServiceClient:(struct __IOHIDServiceClient { } *)a0;
- (void)calculateLevelPercentageAtAmbient:(float)a0;
- (id)copyPropertyForKey:(id)a0;
- (id)copyPropertyForKey:(id)a0 withParameter:(id)a1;
- (float)currentLuxToAmbient;
- (void)didUpdateBacklightLevel:(float)a0 brightness:(float)a1 result:(BOOL)a2 error:(id)a3;
- (void)endKeyDim;
- (void)forceBacklightUpdateRoutine;
- (void)forceLuxUpdate;
- (void)forceLuxUpdateRoutine;
- (void)getCurrentLux;
- (BOOL)handleHIDEvent:(struct __IOHIDEvent { } *)a0 from:(struct __IOHIDServiceClient { } *)a1;
- (void)handleLuxUpdate:(float)a0;
- (void)handleNotificationForKey:(id)a0 withProperty:(id)a1;
- (void)handlePMUserActivityStateChanged:(unsigned long long)a0;
- (id)initWithQueue:(id)a0 device:(id)a1;
- (id)initWithQueue:(id)a0 device:(id)a1 ambientOffset:(float)a2;
- (id)newElementsArray;
- (void)rampToBrightness:(float)a0 withDuration:(unsigned int)a1;
- (BOOL)removeHIDServiceClient:(struct __IOHIDServiceClient { } *)a0;
- (void)resetKeyDimTimeout;
- (BOOL)retrieveKeyboardBacklightElements;
- (void)scheduleBacklightUpdate:(int)a0;
- (void)sendNotificationForKey:(id)a0 withValue:(id)a1;
- (void)sendSuppressedNotification;
- (void)setBacklightLevel:(float)a0;
- (void)setBrightness:(float)a0 withFadeSpeed:(int)a1 commit:(char)a2;
- (void)startRamp;
- (void)stopRamp;
- (void)storeKeyboardBacklightPreferences;
- (double)timeToNextBacklightUpdate;
- (void)timerRoutine:(id)a0;
- (void)toggleMute;
- (void)updateAmbientOffset;
- (void)updateAuthentication:(BOOL)a0;
- (void)updateBacklightDevice;
- (void)updateBacklightDeviceWithFadeSpeed:(int)a0 commit:(BOOL)a1 reason:(unsigned long long)a2;
- (void)updateBacklightDeviceWithReason:(unsigned long long)a0;

@end
