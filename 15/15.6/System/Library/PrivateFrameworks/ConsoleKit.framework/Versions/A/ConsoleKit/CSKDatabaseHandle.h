@class NSSortDescriptor, NSString, NSDictionary, NSMutableDictionary, CSKArchiveTable, NSMutableArray, NSObject;
@protocol OS_dispatch_queue;

@interface CSKDatabaseHandle : NSObject {
    struct sqlite3 { } *_databaseHandle;
    struct sqlite3_stmt { } *_rowcount_statement;
    unsigned long long _rowCount;
    NSDictionary *_rowValuesDictionary;
    unsigned long long _currentIndex;
    struct sqlite3_stmt { } *_default_message_statement_cache;
    struct sqlite3_stmt { } *_default_activity_statement_cache;
    struct sqlite3_stmt { } *_sort_statement_cache;
    struct sqlite3_stmt { } *_fetch_statement;
    struct sqlite3_stmt { } *_childrenActivity_statment;
    struct sqlite3_stmt { } *_activity_statment;
    struct sqlite3_stmt { } *_rootActivitiesCount_statement;
    struct sqlite3_stmt { } *_rootActivities_statement;
    struct sqlite3_stmt { } *_countOfChildren_statement;
    NSMutableArray *_results;
    CSKArchiveTable *_activityTable;
    CSKArchiveTable *_childrenActivityTable;
    CSKArchiveTable *_messagesTable;
    CSKArchiveTable *_uniqueProcessTable;
    CSKArchiveTable *_uniqueLibraryTable;
    CSKArchiveTable *_uniqueTitleTable;
    CSKArchiveTable *_uniqueCategoryTable;
    NSObject<OS_dispatch_queue> *_insertStatementQueue;
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSMutableDictionary *_statementCache;
    char _isReadOnly;
}

@property (retain, nonatomic) NSString *dbPath;
@property (retain, nonatomic) NSSortDescriptor *defaultSortdescriptor;
@property (nonatomic, getter=isSearching) char searching;
@property (nonatomic, getter=isSorting) char sorting;
@property (nonatomic) char readOnly;
@property (retain, nonatomic) NSString *archivePath;
@property (retain, nonatomic) NSSortDescriptor *sortdescriptor;

+ (char)addSkipBackupAttributeToItemAtURL:(id)a0;
+ (id)createQueryWithFilter:(id)a0 tableID:(unsigned long long)a1;
+ (id)dbPathForArchive:(id)a0 readOnly:(char)a1 inMemory:(char)a2;
+ (id)filterQueryForType:(long long)a0 keyWord:(id)a1 comparisonType:(long long)a2 tableID:(unsigned long long)a3;
+ (id)filterQueryForType:(long long)a0 values:(id)a1 tableID:(unsigned long long)a2;
+ (id)makeQueryWithFilters:(id)a0 sortDesriptor:(id)a1 tableID:(unsigned long long)a2;
+ (id)queryForColumnIDs:(id)a0 keyWord:(id)a1 tableID:(unsigned long long)a2 whereClause:(id)a3 comparisonValue:(id)a4;
+ (id)sortIdentifierToDBColumnIdentifier:(id)a0;

- (void)dealloc;
- (void).cxx_destruct;
- (char)close;
- (id)version;
- (void)interrupt;
- (id)rowAtIndex:(unsigned long long)a0;
- (unsigned long long)rowCount;
- (id)tableNames;
- (char)finalizeStatement:(struct sqlite3_stmt { } *)a0;
- (char)categoryExists:(unsigned long long)a0;
- (struct sqlite3 { } *)_databaseHandle;
- (struct sqlite3_stmt { } *)_prepareRootActivitiesStatement;
- (char)_bindArguments:(id)a0 inStatement:(struct sqlite3_stmt { } *)a1;
- (char)_bindArgumentsDictionary:(id)a0 inStatement:(struct sqlite3_stmt { } *)a1;
- (struct sqlite3_stmt { } *)_prepareMessageStatement;
- (void)_reportErrorInFunction:(const char *)a0;
- (id)_stringRowsForQuery:(id)a0;
- (id)arrayForStatement:(struct sqlite3_stmt { } *)a0;
- (id)childrenWithParentActivityID:(unsigned long long)a0;
- (id)colDictionaryForStatement:(struct sqlite3_stmt { } *)a0;
- (id)columnInfoForTable:(unsigned long long)a0;
- (unsigned long long)countForRootActivities;
- (unsigned long long)countOfChildrenWithParentActivityId:(unsigned long long)a0;
- (char)createDBHandle:(char)a0 inMemory:(char)a1 backgroundCopy:(char)a2;
- (void)createTables;
- (char)execStatement:(id)a0;
- (id)fetchActivityWithIdentifier:(unsigned long long)a0;
- (void)fetchResultsForQuery:(id)a0 callbackQueue:(id)a1 tableID:(unsigned long long)a2 withCompletionHandler:(id /* block */)a3;
- (void)fetchResultsForQuery:(id)a0 callbackQueue:(id)a1 withCompletionHandler:(id /* block */)a2;
- (char)hasHash:(unsigned long long)a0 tableID:(unsigned long long)a1;
- (id)initWithPath:(id)a0 readOnly:(char)a1 inMemory:(char)a2 backgroundCopy:(char)a3;
- (char)libraryExists:(unsigned long long)a0;
- (struct sqlite3_stmt { } *)prepareInsertActivityStatement;
- (struct sqlite3_stmt { } *)prepareInsertChildrenActivityStatement;
- (struct sqlite3_stmt { } *)prepareInsertMessagesStatement;
- (struct sqlite3_stmt { } *)prepareInsertStatement:(id)a0;
- (struct sqlite3_stmt { } *)prepareInsertUniqueCategoryStatement;
- (struct sqlite3_stmt { } *)prepareInsertUniqueLibraryStatement;
- (struct sqlite3_stmt { } *)prepareInsertUniqueProcessStatement;
- (struct sqlite3_stmt { } *)prepareInsertUniqueTitleStatement;
- (char)processExists:(unsigned long long)a0;
- (unsigned long long)removeRowsInTimeRange:(id)a0 tableID:(unsigned long long)a1;
- (id)rowAtIndex:(unsigned long long)a0 tableId:(unsigned long long)a1;
- (unsigned long long)rowCountForTableID:(unsigned long long)a0;
- (id)rowsAtIndexes:(id)a0;
- (char)runInsertStatement:(struct sqlite3_stmt { } *)a0 bindDictionary:(id)a1;
- (char)runStatement:(id)a0 arguments:(id)a1;
- (void)sortResultsForTableID:(unsigned long long)a0 withCompletionHandler:(id /* block */)a1;
- (id)stringColumnDataForQuery:(id)a0 withArguments:(id)a1;
- (char)titleExists:(unsigned long long)a0;

@end
