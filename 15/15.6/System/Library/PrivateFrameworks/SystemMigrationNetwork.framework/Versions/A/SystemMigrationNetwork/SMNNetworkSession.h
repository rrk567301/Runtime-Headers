@class NSMutableDictionary, NSDate, NSDictionary, NSObject, NSMutableArray, NSString, NSSet, NSMutableOrderedSet, NSTimer, NSNetServiceBrowser, SMNConnection, NSNumber, NSNetService;
@protocol OS_dispatch_queue, NSObject, SMNNetworkSessionDelegateProtocol;

@interface SMNNetworkSession : NSObject <NSNetServiceDelegate, NSNetServiceBrowserDelegate> {
    NSSet *_supportedFeatures;
}

@property (retain) NSObject<OS_dispatch_queue> *connectionQueue;
@property (retain) NSObject<OS_dispatch_queue> *scObservationQueue;
@property (retain) NSObject<OS_dispatch_queue> *sampleQueue;
@property struct __SCDynamicStore { } *dynamicStoreConnection;
@property (retain) NSNetServiceBrowser *netServiceBrowser;
@property int ipv6AcceptSocket;
@property (retain) NSObject<OS_dispatch_queue> *currentlyConnectingConnectionQueue;
@property (retain) SMNConnection *currentConnectingConnection;
@property (retain) NSString *connectedServiceName;
@property (retain) NSMutableArray *availablePeers;
@property char clientIsReconnecting;
@property char clientIsReResolving;
@property (getter=isCheckingForNewConnectionMethods) char checkingForNewConnectionMethods;
@property (retain) NSNetService *netService;
@property (retain) SMNConnection *activeConnection;
@property (retain) NSMutableOrderedSet *otherConnections;
@property (retain) NSMutableDictionary *activeConnectionsHistory;
@property (retain) NSDictionary *remoteAddressesByIFMap;
@property (getter=isServer) char server;
@property int socketFd;
@property char hasEverBeenConnected;
@property (copy) id /* block */ connectionComparator;
@property int preferredInterface;
@property int ipv6Port;
@property double infrastructureWirelessRate;
@property unsigned long long numberOfNetworkConfigurationChanges;
@property unsigned long long numberOfNetworkChanges;
@property unsigned long long numberOfDisconnects;
@property (retain) NSDate *latestConnectionEnumerationDate;
@property (retain) NSTimer *forceEnumerationTimer;
@property char severedTiesWithSource;
@property long long allowedDisconnectsUpperBound;
@property unsigned long long protocolVersion;
@property (retain) NSString *name;
@property (retain) NSDictionary *txtRecord;
@property (retain) NSString *type;
@property unsigned long long remoteSystemType;
@property Class securityProviderClass;
@property (weak) id securityProviderDelegate;
@property (weak) id<NSObject, SMNNetworkSessionDelegateProtocol> delegate;
@property (retain) NSNumber *connectionTimeout;
@property char automaticallySeeksFastestConnection;
@property char secureTransport106Compatibility;
@property char disallowsIPV6;
@property (readonly) int localInterfaceType;
@property (readonly) int remoteInterfaceType;
@property (readonly) double activeInterfaceBenchmark;
@property (readonly) char otherConnectionsAvailable;
@property (readonly) NSSet *availableConnectionTypes;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)keyPathsForValuesAffectingActiveInterfaceBenchmark;
+ (id)keyPathsForValuesAffectingLocalInterfaceType;
+ (id)keyPathsForValuesAffectingRemoteInterfaceType;

- (void)dealloc;
- (void).cxx_destruct;
- (void)netService:(id)a0 didNotPublish:(id)a1;
- (void)netService:(id)a0 didNotResolve:(id)a1;
- (void)netServiceDidStop:(id)a0;
- (void)netServiceWillPublish:(id)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)stop;
- (id)initWithType:(id)a0;
- (void)connectionInterrupted:(id)a0;
- (void)netServiceBrowserDidStopSearch:(id)a0;
- (void)netService:(id)a0 didUpdateTXTRecordData:(id)a1;
- (void)netServiceBrowser:(id)a0 didFindService:(id)a1 moreComing:(char)a2;
- (void)netServiceBrowser:(id)a0 didRemoveService:(id)a1 moreComing:(char)a2;
- (void)netServiceDidPublish:(id)a0;
- (void)netServiceDidResolveAddress:(id)a0;
- (void)closeStream:(id)a0;
- (void)_connectionInterrupted:(id)a0;
- (id)connect:(id)a0;
- (char)supportsFeature:(unsigned long long)a0;
- (void)closeAllConnections;
- (char)startServer;
- (void)startClient;
- (void)assumeFastestConnection;
- (void)closeActiveConnection;
- (void)connectToPeerNamed:(id)a0;
- (void)updateAllowedDisconnectsUpperBound;
- (void)refreshActiveConnectionsHistory;
- (void)_assumeFastestConnection;
- (void)_enumerateAndConnectToNewAddressesOfPeerNamed:(id)a0 clientIsWaiting:(char)a1;
- (id)activeConnectionsHistoryDescription;
- (void)checkForFasterConnections:(char)a0;
- (void)closeCurrentlyConnectingConnection;
- (void)closeOtherConnections;
- (void)connection:(id)a0 newIncomingStream:(id)a1;
- (void)connection:(id)a0 streamClosing:(id)a1;
- (void)connectionDeterminedTopology:(id)a0 withCurrentRemoteAddressMap:(id)a1;
- (void)connectionFinishedSampling:(id)a0;
- (void)connectionReceivedSupportedFeatures:(id)a0;
- (void)enumerateAndConnectToNewAddressesOfPeerNamed:(id)a0 clientIsWaiting:(char)a1;
- (id)findNewAddressesFromService;
- (void)informDelegateEstablishedConnectionsHaveUpdated;
- (id)initWithType:(id)a0 baseQueueName:(id)a1;
- (id)instantiateSecurityProviderForQueueName:(id)a0;
- (id)justAddressData:(struct sockaddr { unsigned char x0; unsigned char x1; char x2[14]; } *)a0 isIPV6:(char)a1;
- (void)networkConfigurationChanged;
- (id)newStreamWithName:(id)a0;
- (char)promoteConnectionToActive:(id)a0;
- (void)reResolveAddresses;
- (void)recordInfrastructureRate;
- (char)resolvePeerNamed:(id)a0;
- (void)sendWifiTelemetry;
- (void)updateHistoryForActiveConnection:(id)a0;
- (void)waitForConnectionsToSampleUpToRoughly:(double)a0;

@end
