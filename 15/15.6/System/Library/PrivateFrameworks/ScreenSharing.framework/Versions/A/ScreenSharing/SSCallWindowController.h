@class TUCall, NSSegmentedControl, NSToolbar, NSMenuItem, NSObject, NSButton, SSSessionView, SSCallTrackingWindow, NSProgressIndicator, NSString, NSTimer, NSViewController, NSNumber, NSToolbarItem;
@protocol CNKScreenSharingViewControllerProtocol, SSSessionViewDelegate;

@interface SSCallWindowController : NSWindowController <NSToolbarItemValidation, NSMenuItemValidation, NSWindowDelegate, CNKScreenSharingViewControllerDelegate, TUConversationManagerDelegate, TUScreenSharingRemoteControllerDelegate, NSToolbarDelegate>

@property (readonly, nonatomic) SSCallTrackingWindow *callTrackingWindow;
@property (retain, nonatomic) NSString *toggleControlCommandKey;
@property (retain, nonatomic) NSNumber *toggleControlCommandKeyModifier;
@property char autoResizeEnabled;
@property char preFullScreenResizeEnabled;
@property char zoomToFit;
@property char liveResizeStartedWithExactSize;
@property double zoomFactor;
@property char hasSetScreenSize;
@property char inAnimatedTransition;
@property unsigned long long lastResizeTime;
@property NSTimer *remoteResizeHandler;
@property (nonatomic) char wantsWindowTitleUpdate;
@property char userInteractedWithWindow;
@property char setActualSizeOnIncrease;
@property TUCall *call;
@property char addedConversationManagerDelegate;
@property char isRemoteControlEnabled;
@property char observingRemoteControlState;
@property char disableChromeHiding;
@property (nonatomic) char presenterAllowsRequestingControl;
@property (retain) NSToolbarItem *controlObserveToolbarItem;
@property (retain) NSToolbarItem *launchpadToolbarItem;
@property (retain) NSToolbarItem *missionControlToolbarItem;
@property (retain) NSToolbarItem *desktopToolbarItem;
@property (retain) NSToolbarItem *appWindowsToolbarItem;
@property (retain) NSToolbarItem *keyboardSyncToolbarItem;
@property (retain) NSToolbarItem *autoResizeToolbarItem;
@property NSToolbarItem *zoomToFitToolbarItem;
@property NSToolbarItem *zoomControlToolbarItem;
@property NSButton *controlObserveButton;
@property NSButton *launchpadButton;
@property NSButton *missionControlButton;
@property NSButton *desktopButton;
@property NSButton *appWindowsButton;
@property NSButton *keyboardSyncButton;
@property NSButton *zoomToFitButton;
@property NSSegmentedControl *zoomControl;
@property NSButton *autoResizeButton;
@property NSMenuItem *controlObserveMenuRepresentation;
@property NSMenuItem *zoomMenuRepresentation;
@property NSMenuItem *zoomMenuRepZoomOut;
@property NSMenuItem *zoomMenuRepZoomActual;
@property NSMenuItem *zoomMenuRepZoomIn;
@property (retain) NSProgressIndicator *progressSpinner;
@property NSToolbar *FTCallTooolbar;
@property (retain) NSViewController<CNKScreenSharingViewControllerProtocol> *screenSharingViewController;
@property (retain) NSObject<SSSessionViewDelegate> *sessionWindowController;
@property (retain) SSSessionView *sessionView;
@property struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } previousScreenSameCallWindowRect;
@property struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } sourceAppWindowRect;
@property long long sourceAppAlignment;
@property long long viewType;
@property struct CGSize { double width; double height; } lastCapturedSize;
@property double lastCapturedScale;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (short)menuBarHeight;
- (id)toolbarAllowedItemIdentifiers:(id)a0;
- (id)toolbarDefaultItemIdentifiers:(id)a0;
- (id)toolbarImmovableItemIdentifiers:(id)a0;
- (char)validateMenuItem:(id)a0;
- (unsigned long long)window:(id)a0 willUseFullScreenPresentationOptions:(unsigned long long)a1;
- (void)windowDidBecomeKey:(id)a0;
- (void)windowDidEndLiveResize:(id)a0;
- (void)windowDidEndSheet:(id)a0;
- (void)windowDidEnterFullScreen:(id)a0;
- (void)windowDidExitFullScreen:(id)a0;
- (void)windowDidLoad;
- (void)windowDidMove:(id)a0;
- (void)windowDidResignKey:(id)a0;
- (void)windowDidResize:(id)a0;
- (void)windowWillBeginSheet:(id)a0;
- (void)windowWillEnterFullScreen:(id)a0;
- (void)windowWillExitFullScreen:(id)a0;
- (void)windowWillStartLiveResize:(id)a0;
- (void)conversationManager:(id)a0 activeRemoteParticipantsChangedForConversation:(id)a1;
- (void)invalidateSession;
- (void)screenSharingRemoteController:(id)a0 controlRevokedByPresenterWithError:(id)a1;
- (void)screenSharingRemoteController:(id)a0 dataReceivedFromPresenter:(id)a1;
- (void)zoomOut;
- (void)zoomIn;
- (void)screenSharingDidUpdateViewType:(long long)a0;
- (void)appWindowsButtonClicked:(id)a0;
- (void)autoResizeClicked:(id)a0;
- (void)canZoomIn:(char *)a0 canResetZoom:(char *)a1 canZoomOut:(char *)a2;
- (void)desktopButtonClicked:(id)a0;
- (void)didEndLiveMagnify:(id)a0;
- (void)didEndRemoteResize:(id)a0;
- (void)disengageAutoResize;
- (void)doRunCustomizationPalette:(id)a0;
- (void)ftRequestingJoinAllApplications:(id)a0;
- (char)handleControlModeMenuKey:(id)a0;
- (char)handleInputEvent:(id)a0;
- (void)hideProgressSpinner;
- (void)incompleteSetupFollowUpWithMessage:(id)a0;
- (id)initWithContentViewController:(id)a0 call:(id)a1;
- (char)isActualSize;
- (char)isExactSize;
- (char)isWindowFullScreen;
- (struct CGSize { double x0; double x1; })lastCapturedScaledSize;
- (void)launchpadButtonClicked:(id)a0;
- (void)makeAdjustmentsPostResizeWithZoomFactorChanged:(char)a0;
- (void)missionControlButtonClicked:(id)a0;
- (double)nextZoomFactorForZoom:(double)a0;
- (double)previousZoomFactorForZoom:(double)a0;
- (void)processNewURLOptions;
- (void)removePresenterAllowsRequestingControlObserver;
- (void)removeRemoteControlStateObserver;
- (void)screenSharingDidUpdateWithClientSideCursor:(char)a0;
- (void)screenSharingSharingDidEndWithError:(id)a0;
- (void)screenSharingSizeDidChange:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (void)screenSharingZoomDidChange;
- (void)setAutoResizeButtonState;
- (void)setChromeState;
- (void)setControlObserveToolbarItemState;
- (void)setWindowTitle;
- (void)setZoomToFitEnabled:(char)a0 needsDisplay:(char)a1;
- (void)showAllowsControlStateChangeNotification:(char)a0;
- (void)showProgressSpinner;
- (void)sizeChangeHelperWithOurWindow:(id)a0 windowPositionInfo:(id)a1 adjustedSize:(struct CGSize { double x0; double x1; })a2 useZoomToFitMode:(char)a3 windowRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 visibleFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a5 size:(struct CGSize { double x0; double x1; })a6 animateWindowResize:(char)a7;
- (void)toggleControlObserve:(id)a0;
- (void)toggleSharedKeyboard:(id)a0;
- (void)updateControlObserveButtonIconAndColor:(char)a0;
- (char)viewTypeSet;
- (void)willStartLiveMagnify:(id)a0;
- (void)zoomActualSize;
- (void)zoomClicked:(id)a0;
- (void)zoomMenuItemClicked:(id)a0;
- (void)zoomToFitClicked:(id)a0;
- (double)zoomToFitEquivalentZoomFactor;

@end
