@class ABAccount, NSString, NSArray, NSMutableDictionary;

@interface ABAccountRepository : NSObject <ABAccountCollection> {
    NSMutableDictionary *_existingAccounts;
    NSMutableDictionary *_hiddenAccounts;
    NSMutableDictionary *_deletingAccounts;
    char _areExistingAccountsValid;
    char _areHiddenAccountsValid;
    id _futureAutocompletionAccounts;
    id _factory;
}

@property (readonly, retain) id defaultAccountPreference;
@property (copy) NSString *tag;
@property (readonly, copy) NSString *basePath;
@property (readonly) ABAccount *defaultAccount;
@property (readonly, copy) NSArray *allAccounts;
@property (readonly, copy) NSArray *enabledAccounts;
@property (readonly, copy) NSArray *persistentAccounts;
@property (readonly, copy) NSArray *hiddenAccounts;
@property (readonly) char canBeReplacedByCachedAccounts;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)os_log;
+ (id)dictionaryByObscuringPassword:(id)a0;
+ (void)prepareLocalCacheForAccountWithIdentifier:(id)a0 factory:(id)a1;
+ (id)sharedRepository;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id)accountWithIdentifier:(id)a0;
- (id)accounts;
- (void)dumpCache;
- (id)sources;
- (void)invalidateAutocompletionSources;
- (id)nonHiddenAccountWithIdentifier:(id)a0;
- (void)nts_addAccount:(id)a0;
- (id)nts_hiddenAccountForIdentifier:(id)a0;
- (id)newFutureAutocompletionAccounts;
- (void)nts_addHiddenAccountsFromArray:(id)a0;
- (id)accountComparerForExistingAccounts;
- (id)addAccountIfAbsent:(id)a0 andPostDidChangeNotification:(char)a1;
- (id)addAccountWithComponents:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (void)addAccountWithIdentifierIfAbsent:(id)a0;
- (char)addAccountWithSource:(id)a0;
- (char)addAccountWithSource:(id)a0 andPostDidChangeNotification:(char)a1;
- (void)addSourceWithUidIfAbsent:(id)a0;
- (id)autocompletionAccounts;
- (id)autocompletionAccountsFromEnabledAccounts;
- (id)autocompletionSources;
- (char)configuredForSingleSource;
- (id)defaultAccountTypeInfo;
- (id)defaultableAccounts;
- (char)deleteDataFromAccount:(id)a0;
- (char)didRemoveAccountForIdentifier:(id)a0 error:(id *)a1;
- (id)existingAccountIdentifierEquivalentToProposedConfig:(id)a0;
- (id)futureAutocompletionAccounts;
- (id)hiddenAccountWithIdentifier:(id)a0;
- (id)initWithBasePath:(id)a0;
- (id)initWithFactory:(id)a0;
- (void)invalidateAllAccounts;
- (void)invalidateAllSources;
- (void)invalidateAutocompletionAccounts;
- (id)makeAddressBookWithOptions:(id)a0;
- (void)makeNextAvailableAccountTheDefault;
- (char)mergeDataFromAccount:(id)a0 toAccount:(id)a1 error:(id *)a2;
- (char)mergeDataFromAccount:(id)a0 toAccount:(id)a1 withOptions:(int)a2 error:(id *)a3;
- (id)nts_accountForIdentifier:(id)a0;
- (void)nts_addAccountsFromArray:(id)a0;
- (id)nts_allExistingAccounts;
- (id)nts_hiddenAccounts;
- (void)nts_invalidateAutocompletionAccounts;
- (void)nts_markAccountForRemoval:(id)a0 forID:(id)a1;
- (void)nts_removeAccount:(id)a0;
- (void)nts_removeAccountsFromArray:(id)a0;
- (id)nts_removeAllExistingAccounts;
- (void)nts_unmarkAccountIDForRemoval:(id)a0;
- (void)postAddedExternallyNotificationWithAccount:(id)a0;
- (void)postChangedExternallyNotificationWithAccountIdentifier:(id)a0;
- (void)postDidChangeNotificationWithAccounts:(id)a0;
- (void)postDidChangeNotificationWithAccounts:(id)a0 includingContactStoreNotification:(char)a1;
- (void)postDidLoadNotificationWithAccounts:(id)a0;
- (void)postRemovedExternallyNotificationWithAccount:(id)a0;
- (void)postResetNotification;
- (void)refreshEnabledAccounts;
- (char)removeAccount:(id)a0 error:(id *)a1;
- (char)removeAccount:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (char)removeAccounts:(id)a0 error:(id *)a1;
- (void)removeSourceWithUid:(id)a0;
- (void)replaceAccountWithIdentifier:(id)a0;
- (void)replaceAccountWithIdentifier:(id)a0 shouldPostResetNotification:(char)a1;
- (void)replaceSourceWithUid:(id)a0;
- (void)runWithLock:(id /* block */)a0;
- (void)runWithLockLoadingExistingAccountsIfNecessary:(id /* block */)a0;
- (void)runWithLockLoadingHiddenAccountsIfNecessary:(id /* block */)a0;
- (void)setDefaultAccount:(id)a0;
- (id)setEnabled:(char)a0 forAccountWithIdentifier:(id)a1;
- (char)shouldAddedAccountBecomeDefault:(id)a0;
- (id)sortAccounts:(id)a0;
- (id)sourceWithUID:(id)a0;
- (void)willRemoveAccount:(id)a0 forIdentifier:(id)a1;

@end
