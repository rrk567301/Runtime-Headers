@class NSXPCListener, NSString, NSXPCConnection, NSObject;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface WPClient : NSObject <NSXPCListenerDelegate, WPXPCClientProtocol, WPXPCDaemonProtocol>

@property (class, readonly, nonatomic) char isHomePod;
@property (class, readonly, nonatomic) char isAppleTV;
@property (class, readonly, nonatomic) char isHomePodOrIOS;
@property (class, readonly, nonatomic) char supportsRanging;

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *clientQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *daemonDeliveryQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_semaphore> *daemonRegisteredSemaphore;
@property (retain, nonatomic) NSString *machName;
@property long long state;
@property long long advertiserState;
@property long long scannerState;
@property (retain, nonatomic) NSXPCConnection *xpcConnection;
@property unsigned char type;
@property char peerTrackingSlotsAvailable;
@property char needsToRegister;
@property char registering;
@property char servicesAdded;
@property (retain) NSXPCListener *xpcListener;
@property char isTestClient;
@property char isBubbleTestClient;
@property long long connectionUseCase;
@property long long maxAllowedConnectionDelayMs;
@property (readonly) long long pipeState;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (id)stateAsString:(long long)a0;
+ (long long)holdVouchers;

- (void)dealloc;
- (void).cxx_destruct;
- (id)connection;
- (void)invalidate;
- (char)listener:(id)a0 shouldAcceptNewConnection:(id)a1;
- (void)establishConnection;
- (void)destroyConnection;
- (void)startAdvertising:(id)a0;
- (void)stateDidChange:(long long)a0;
- (void)connectToPeer:(id)a0;
- (void)disconnectFromPeer:(id)a0;
- (void)sendTestRequest:(id)a0;
- (void)disableScanning;
- (void)connectToPeer:(id)a0 withOptions:(id)a1;
- (id)initWithQueue:(id)a0 machName:(id)a1;
- (void)registeredWithDaemonAndContinuingSession:(char)a0;
- (void)startScanning:(id)a0;
- (void)clearDuplicateFilterCache:(id)a0;
- (void)unregisterEndpoint:(id)a0;
- (void)dumpDaemonState;
- (void)addServices;
- (void)allowlistConnectionMethods:(id)a0;
- (void)checkAllowDuplicates:(id /* block */)a0;
- (id)clientAsString;
- (void)discoverCharacteristicsAndServices:(id)a0 forPeripheral:(id)a1;
- (void)dispatchAdvertisement:(id)a0;
- (void)enableBubbleTestMode;
- (void)enableRanging:(char)a0 reply:(id /* block */)a1;
- (void)enableTestMode;
- (void)getAllTrackedZones;
- (void)getPowerLogStats:(id /* block */)a0;
- (void)isRangingEnabledReply:(id /* block */)a0;
- (void)listenToBandwidthNotifications;
- (void)notifyNotApprovedUseCase:(id)a0;
- (void)overrideAdvTimeout:(double)a0;
- (void)overrideScanTimeout:(double)a0;
- (void)peerTrackingAvailable;
- (void)peerTrackingFull;
- (void)populateClientGATT:(id /* block */)a0;
- (void)receivedTestResponse:(id)a0;
- (void)registerEndpoint:(id)a0 requireAck:(char)a1 requireEncryption:(char)a2;
- (void)registerForAnyScanResults:(char)a0;
- (void)sendDataToCharacteristic:(id)a0 inService:(id)a1 forPeer:(id)a2;
- (void)sendDatatoLePipe:(id)a0 forPeer:(id)a1;
- (void)setupMachXPCService;
- (void)shouldSubscribe:(char)a0 toPeer:(id)a1 withCharacteristic:(id)a2 inService:(id)a3;
- (void)startScanning:(id)a0 andAdvertising:(id)a1;
- (void)startTrackingPeerWithRequest:(id)a0;
- (void)startTrackingZone:(id)a0;
- (void)stopAdvertising:(id)a0;
- (void)stopScanning:(id)a0;
- (void)stopTrackingAllZones;
- (void)stopTrackingPeerWithRequest:(id)a0;
- (void)stopTrackingZones:(id)a0;
- (void)updateAdvertisingRequest:(id)a0 withUpdate:(id /* block */)a1;
- (void)updateScanningRequest:(id)a0 withUpdate:(id /* block */)a1;

@end
