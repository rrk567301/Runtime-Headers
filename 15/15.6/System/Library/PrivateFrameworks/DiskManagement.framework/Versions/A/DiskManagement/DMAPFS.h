@interface DMAPFS : NSObject {
    id _instPriv;
}

- (void)dealloc;
- (id)init;
- (id)initWithManager:(id)a0;
- (int)isFusionContainer:(struct __DADisk { } *)a0 fusion:(char *)a1;
- (int)isEncryptedVolumeLocked:(struct __DADisk { } *)a0 locked:(char *)a1;
- (int)containerForVolume:(struct __DADisk { } *)a0 container:(struct __DADisk **)a1;
- (int)cryptoUserPassdataHintForVolume:(struct __DADisk { } *)a0 user:(id)a1 hintMessage:(id *)a2;
- (int)disksForVolumeGroup:(id)a0 volumeDisks:(id *)a1 systemVolumeDisks:(id *)a2 dataVolumeDisks:(id *)a3 userVolumeDisks:(id *)a4 container:(struct __DADisk **)a5;
- (int)isDataVolume:(struct __DADisk { } *)a0 dataRole:(char *)a1;
- (int)isPrebootVolume:(struct __DADisk { } *)a0 prebootRole:(char *)a1;
- (int)isSystemVolume:(struct __DADisk { } *)a0 systemRole:(char *)a1;
- (int)volumeForVolumeUUID:(id)a0 volume:(struct __DADisk **)a1;
- (int)volumeGroupForVolume:(struct __DADisk { } *)a0 id:(id *)a1;
- (int)volumeUUIDForVolume:(struct __DADisk { } *)a0 UUID:(id *)a1;
- (int)volumesForContainer:(struct __DADisk { } *)a0 volumes:(id *)a1;
- (int)isFileVaultEnabled:(struct __DADisk { } *)a0 enabled:(char *)a1;
- (int)EFIDriverVersionForMacOSSystemVolume:(struct __DADisk { } *)a0 version:(unsigned long long *)a1;
- (int)containerUUIDForContainer:(struct __DADisk { } *)a0 UUID:(id *)a1;
- (int)isRawEncryptedVolume:(struct __DADisk { } *)a0 encrypted:(char *)a1;
- (int)nameForSnapshot:(id)a0 forVolume:(struct __DADisk { } *)a1 name:(id *)a2;
- (int)rawCapacityInUseForVolume:(struct __DADisk { } *)a0 used:(id *)a1;
- (int)snapshotForName:(id)a0 forVolume:(struct __DADisk { } *)a1 uuid:(id *)a2;
- (int)EFIDriverVersionForContainer:(struct __DADisk { } *)a0 version:(unsigned long long *)a1;
- (int)institutionalRecoveryKeyBlobForVolume:(struct DMUDSPrivRec { unsigned long long x0; long long x1; char x2[150]; } *)a0 keychainFilePath:(id)a1 keyBlob:(id *)a2;
- (int)updatePrebootForVolume:(struct __DADisk { } *)a0 options:(id)a1;
- (int)addCryptoUsersToVolume:(struct __DADisk { } *)a0 user:(id)a1 newUserRecords:(id)a2 options:(id)a3;
- (int)addCryptoUsersToVolume:(struct __DADisk { } *)a0 user:(id)a1 passdata:(id)a2 newUserRecords:(id)a3 options:(id)a4;
- (int)addVolumeToContainer:(struct __DADisk { } *)a0 newFilesystem:(id)a1 newName:(id)a2 options:(id)a3;
- (void)cancelCurrentOperation;
- (int)capacityCeilingForContainer:(struct __DADisk { } *)a0 size:(id *)a1;
- (int)capacityFreeForContainer:(struct __DADisk { } *)a0 free:(id *)a1;
- (int)capacityInUseForVolume:(struct __DADisk { } *)a0 used:(id *)a1;
- (int)capacityQuotaForVolume:(struct __DADisk { } *)a0 quotaOrNull:(id *)a1;
- (int)capacityReserveForVolume:(struct __DADisk { } *)a0 reserveOrNull:(id *)a1;
- (int)capacityResizeMinimumForContainer:(struct __DADisk { } *)a0 minimum:(id *)a1 dpsMinimum:(id *)a2 designatedPhysicalStore:(struct __DADisk **)a3;
- (int)changeCryptoUserPassdataForVolume:(struct __DADisk { } *)a0 user:(id)a1 oldPassdata:(id)a2 newPassdata:(id)a3 options:(id)a4;
- (int)changeCryptoUserPassdataForVolume:(struct __DADisk { } *)a0 user:(id)a1 options:(id)a2;
- (int)containerForContainerUUID:(id)a0 container:(struct __DADisk **)a1;
- (int)containerForPhysicalStore:(struct __DADisk { } *)a0 container:(struct __DADisk **)a1;
- (int)containerSchemeDiskForContainer:(struct __DADisk { } *)a0 schemeDisk:(struct __DADisk **)a1;
- (int)containers:(id *)a0;
- (int)convertFromHFS:(struct __DADisk { } *)a0 dryRun:(char)a1 options:(id)a2;
- (int)convertFromHFS:(struct __DADisk { } *)a0 options:(id)a1;
- (int)convertFromHFSDryRun:(struct __DADisk { } *)a0 options:(id)a1;
- (int)createContainerFromDisks:(id)a0 options:(id)a1;
- (int)credentialRequirementsForVolume:(struct __DADisk { } *)a0 details:(id *)a1;
- (int)cryptoMigrationProgressForVolume:(struct __DADisk { } *)a0 percentComplete:(id *)a1;
- (int)cryptoMigrationStateForVolume:(struct __DADisk { } *)a0 type:(unsigned char *)a1 state:(unsigned char *)a2 pausedState:(unsigned char *)a3;
- (int)cryptoMigrationTimeForVolume:(struct __DADisk { } *)a0 timeRemaining:(double *)a1;
- (int)cryptoUserForMacOSUserForVolume:(struct __DADisk { } *)a0 macOSUser:(id)a1 apfsCryptoUser:(id *)a2 options:(id)a3;
- (int)cryptoUserTypeForVolume:(struct __DADisk { } *)a0 user:(id)a1 type:(unsigned char *)a2;
- (int)cryptoUsersForVolume:(struct __DADisk { } *)a0 users:(id *)a1;
- (int)dataRecordForVolume:(struct __DADisk { } *)a0 user:(id)a1 data:(id *)a2 options:(id)a3;
- (int)deleteContainer:(struct __DADisk { } *)a0 reformatToNewNames:(id)a1 options:(id)a2;
- (int)deleteCryptoUserFromVolume:(struct __DADisk { } *)a0 user:(id)a1 options:(id)a2;
- (int)deleteSnapshotForVolume:(struct __DADisk { } *)a0 uuid:(id)a1 options:(id)a2;
- (int)deleteVolume:(struct __DADisk { } *)a0 options:(id)a1;
- (int)deleteVolumeGroup:(id)a0 options:(id)a1;
- (int)designatedPhysicalStoreForContainer:(struct __DADisk { } *)a0 designatedPhysicalStore:(struct __DADisk **)a1;
- (int)ensureRecoveryBooter:(struct __DADisk { } *)a0 options:(id)a1;
- (int)eraseVolume:(struct __DADisk { } *)a0 newFilesystem:(id)a1 newName:(id)a2 options:(id)a3;
- (int)getSealedState:(struct __DADisk { } *)a0 sealedState:(id *)a1;
- (int)hasCryptoUserForVolume:(struct __DADisk { } *)a0 user:(id)a1 hasUser:(char *)a2;
- (int)inquiryCacheEnable:(char)a0;
- (int)isBackupVolume:(struct __DADisk { } *)a0 backupRole:(char *)a1;
- (int)isBasebandVolume:(struct __DADisk { } *)a0 basebandRole:(char *)a1;
- (int)isCryptoMigratingForVolume:(struct __DADisk { } *)a0 migrating:(char *)a1 encrypting:(char *)a2;
- (int)isCryptoUserVolumeOwnerForVolume:(struct __DADisk { } *)a0 user:(id)a1 isOwner:(char *)a2;
- (int)isDefragmentationEnabledForContainer:(struct __DADisk { } *)a0 enabled:(char *)a1;
- (int)isDefragmentationEnabledForVolume:(struct __DADisk { } *)a0 enabled:(char *)a1;
- (int)isDiskSuitableForConversionFromHFS:(struct __DADisk { } *)a0 suitable:(char *)a1 why:(int *)a2 options:(id)a3;
- (int)isEncryptedVolume:(struct __DADisk { } *)a0 encrypted:(char *)a1;
- (int)isEnterpriseDataVolume:(struct __DADisk { } *)a0 enterpriseDataRole:(char *)a1;
- (int)isHardwareVolume:(struct __DADisk { } *)a0 hardwareRole:(char *)a1;
- (int)isIDiagsVolume:(struct __DADisk { } *)a0 iDiagsRole:(char *)a1;
- (int)isInstallerVolume:(struct __DADisk { } *)a0 installerRole:(char *)a1;
- (int)isInternalVolume:(struct __DADisk { } *)a0 internalRole:(char *)a1;
- (int)isNoBrowseRoleVolume:(struct __DADisk { } *)a0 shouldNotBrowse:(char *)a1;
- (int)isRecoveryVolume:(struct __DADisk { } *)a0 recoveryRole:(char *)a1;
- (int)isSidecarVolume:(struct __DADisk { } *)a0 sidecarRole:(char *)a1;
- (int)isUpdateVolume:(struct __DADisk { } *)a0 updateRole:(char *)a1;
- (int)isUserVolume:(struct __DADisk { } *)a0 userRole:(char *)a1;
- (int)isVMVolume:(struct __DADisk { } *)a0 vmRole:(char *)a1;
- (int)isXartVolume:(struct __DADisk { } *)a0 xartRole:(char *)a1;
- (int)macOSUserForCryptoUserForVolume:(struct __DADisk { } *)a0 cryptoUser:(id)a1 macOSUserGUID:(id *)a2 options:(id)a3;
- (int)mountPointForSnapshot:(id)a0 forVolume:(struct __DADisk { } *)a1 mountPoint:(id *)a2;
- (int)mountedSnapshotsWithVolumePrefix:(struct __DADisk { } *)a0 snapshots:(id *)a1;
- (int)normalizedVolumeForSnapshotOrNotVolume:(struct __DADisk { } *)a0 volume:(struct __DADisk **)a1 snapshot:(char *)a2;
- (int)physicalStoreForPhysicalStoreUUID:(id)a0 physicalStore:(struct __DADisk **)a1;
- (int)physicalStoreUUIDForPhysicalStore:(struct __DADisk { } *)a0 UUID:(id *)a1;
- (int)physicalStoresForContainer:(struct __DADisk { } *)a0 physicalStores:(id *)a1;
- (int)prebootInfoForLockedOrUnlockedVolume:(struct __DADisk { } *)a0 user:(id)a1 info:(id *)a2 options:(id)a3;
- (int)purgeableSnapshotsForVolume:(struct __DADisk { } *)a0 snapshots:(id *)a1;
- (int)rawDataRecordForVolume:(struct __DADisk { } *)a0 user:(id)a1 data:(id *)a2 options:(id)a3;
- (int)resetCryptoUserPassdataForVolume:(struct __DADisk { } *)a0 recoveryUser:(id)a1 recoveryUserPassdata:(id)a2 userToReset:(id)a3 userNewPassdata:(id)a4 options:(id)a5;
- (int)resetCryptoUserPassdataForVolume:(struct __DADisk { } *)a0 recoveryUser:(id)a1 userToReset:(id)a2 options:(id)a3;
- (int)resizeContainer:(struct __DADisk { } *)a0 newSize:(id)a1 newMapEntries:(id)a2 options:(id)a3;
- (int)roleForVolume:(struct __DADisk { } *)a0 roleKey:(id *)a1 unlocalizedTechnicalName:(id *)a2 localizedUserName:(id *)a3 symbol:(id *)a4 APFSFormat16:(unsigned short *)a5;
- (int)runWithPrebootMountedForVolume:(struct __DADisk { } *)a0 blockToRun:(id /* block */)a1 options:(id)a2;
- (int)setCryptoUserPassdataHintForVolume:(struct __DADisk { } *)a0 user:(id)a1 hintMessage:(id)a2 options:(id)a3;
- (int)setDataRecordForVolume:(struct __DADisk { } *)a0 user:(id)a1 data:(id)a2 options:(id)a3;
- (int)setDefragmentationForContainer:(struct __DADisk { } *)a0 enable:(char)a1 options:(id)a2;
- (int)setDefragmentationForVolume:(struct __DADisk { } *)a0 enable:(char)a1 options:(id)a2;
- (int)setRoleForVolume:(struct __DADisk { } *)a0 options:(id)a1;
- (int)snapshotForMountPoint:(id)a0 uuid:(id *)a1 name:(id *)a2 volume:(struct __DADisk **)a3 container:(struct __DADisk **)a4;
- (int)snapshotsForVolume:(struct __DADisk { } *)a0 snapshots:(id *)a1;
- (int)snapshotsForVolumeOnly:(struct __DADisk { } *)a0 snapshots:(id *)a1;
- (int)startMigrationToDecryptedVolume:(struct __DADisk { } *)a0 options:(id)a1;
- (int)startMigrationToEncryptedVolume:(struct __DADisk { } *)a0 user:(id)a1 newUserRecords:(id)a2 options:(id)a3;
- (int)startMigrationToEncryptedVolume:(struct __DADisk { } *)a0 user:(id)a1 passdata:(id)a2 newUserRecords:(id)a3 options:(id)a4;
- (int)stateForLockedVolume:(struct __DADisk { } *)a0 user:(id)a1 rateLimitBackoff:(char *)a2 backoffTime:(double *)a3 rateLimitLockout:(char *)a4;
- (int)syncCryptoUserDataRecordsForVolumeGroupSystemToDataRoleVolumes:(struct __DADisk { } *)a0 options:(id)a1;
- (int)unEnsureRecoveryBooter:(struct __DADisk { } *)a0 targetSubject:(id)a1 options:(id)a2;
- (int)unlockEncryptedVolume:(struct __DADisk { } *)a0 diskUser:(char)a1 anyUser:(char)a2 user:(id)a3 options:(id)a4 details:(id *)a5;
- (int)unlockEncryptedVolume:(struct __DADisk { } *)a0 diskUser:(char)a1 anyUser:(char)a2 user:(id)a3 passphrase:(const char *)a4 passdata:(id)a5 options:(id)a6;
- (int)unlockEncryptedVolume:(struct __DADisk { } *)a0 diskUser:(char)a1 anyUser:(char)a2 user:(id)a3 passphrase:(const char *)a4 passdata:(id)a5 options:(id)a6 details:(id *)a7;
- (int)updatePrebootForVolumeFire:(struct __DADisk { } *)a0 completion:(id /* block */)a1 options:(id)a2;
- (int)verifyCryptoUserPassdataForVolume:(struct __DADisk { } *)a0 options:(id)a1 success:(char *)a2;
- (int)verifyCryptoUserPassdataForVolume:(struct __DADisk { } *)a0 user:(id)a1 passdata:(id)a2 success:(char *)a3;
- (int)verifyMDMKeyForVolume:(struct __DADisk { } *)a0 keydata:(id)a1 options:(id)a2 success:(char *)a3 details:(id *)a4;
- (int)volumeGroupsForContainer:(struct __DADisk { } *)a0 volumeGroups:(id *)a1;

@end
