@class NSDictionary, NSObject, FI_TNotificationCenterObserverGlue, NSFont, NSString, FI_TListHeaderRowView, NSLayoutGuide, NSIndexSet, FI_TKeyValueObserverGlue, NSArray, FI_TBrowserViewDataSource, FI_TListNameCellView, NSEvent, FI_TKindFormatter;

@interface FI_TListViewController : FI_TBrowserViewController <TListHeaderRowViewDelegate, NSOutlineViewDelegate, NSTableViewDelegate, NSOutlineViewDataSource, NSWindowDelegate, NSScrollViewDelegate, TListNameFieldDelegate, TListRowViewDelegate, TListViewDelegate> {
    struct shared_ptr<TBestFitFormatterSelector> { struct TBestFitFormatterSelector *__ptr_; struct __shared_weak_count *__cntrl_; } _dateFormatterSelector;
    struct unordered_set<TFENode, std::hash<TFENode>, std::equal_to<TFENode>, std::allocator<TFENode>> { struct __hash_table<TFENode, std::hash<TFENode>, std::equal_to<TFENode>, std::allocator<TFENode>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TFENode, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TFENode, void *> *>, std::allocator<std::__hash_node<TFENode, void *>>> { struct __hash_node_base<std::__hash_node<TFENode, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<TFENode>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<TFENode>> { float __value_; } __p3_; } __table_; } _nodesToRecursivelyExpand;
    BOOL _setupExpandingNodes;
    struct unordered_set<TFENode, std::hash<TFENode>, std::equal_to<TFENode>, std::allocator<TFENode>> { struct __hash_table<TFENode, std::hash<TFENode>, std::equal_to<TFENode>, std::allocator<TFENode>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TFENode, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TFENode, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TFENode, void *> *>, std::allocator<std::__hash_node<TFENode, void *>>> { struct __hash_node_base<std::__hash_node<TFENode, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<TFENode>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<TFENode>> { float __value_; } __p3_; } __table_; } _nodesToExpand;
    struct vector<std::pair<TFENode, TFENode>, std::allocator<std::pair<TFENode, TFENode>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<TFENode, TFENode> *, std::allocator<std::pair<TFENode, TFENode>>> { void *__value_; } __end_cap_; } _disclosedAliasNodes;
    NSFont *_monospacedDigitsCellViewFont;
    NSFont *_nameCellViewFont;
    NSFont *_cellViewFont;
    struct multimap<long, TFENode, std::less<long>, std::allocator<std::pair<const long, TFENode>>> { struct __tree<std::__value_type<long, TFENode>, std::__map_value_compare<long, std::__value_type<long, TFENode>, std::less<long>>, std::allocator<std::__value_type<long, TFENode>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<long, TFENode>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<long, std::__value_type<long, TFENode>, std::less<long>>> { unsigned long long __value_; } __pair3_; } __tree_; } _depthToOpenContainerMap;
    struct TFENode { struct OpaqueNodeRef *fNodeRef; } _fakeHeaderRowNode;
    struct TNotificationCenterObserver { NSObject *fObservedObject; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fNotificationName; FI_TNotificationCenterObserverGlue *fFunctorGlue; BOOL fIsDistributedObserving; struct function<NSNotificationCenter *()> { struct __value_func<NSNotificationCenter *()> { struct type { unsigned char __lx[32]; } __buf_; void *__f_; } __f_; } fCenterProvider; } _dateTimeFormattersChangedObserver;
    NSLayoutGuide *_nameCellViewMasterLayoutGuide;
    struct TKeyValueObserver { FI_TKeyValueObserverGlue *fObserver; NSObject *fObjectToObserve; NSArray *fArrayOfObjectsToObserve; NSIndexSet *fIndexesOfObjectsToObserve; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fKeyPathToObserve; } _nameCellViewMasterLayoutGuideFrameDidChangeObserver;
    BOOL _isRecursivelyCollapsing;
    BOOL _ignoreIncomingCollapses;
    FI_TKindFormatter *_strongKindFormatter;
}

@property (nonatomic) BOOL showDateModified;
@property (nonatomic) BOOL showShareOwner;
@property (nonatomic) BOOL showShareLastModifiedBy;
@property (nonatomic) BOOL showShareInvitationStatus;
@property (nonatomic) BOOL showDateCreated;
@property (nonatomic) BOOL showDateLastOpened;
@property (nonatomic) BOOL showDateAdded;
@property (nonatomic) BOOL showSize;
@property (nonatomic) BOOL showKind;
@property (nonatomic) BOOL showVersion;
@property (nonatomic) BOOL showComments;
@property (nonatomic) BOOL showLabel;
@property (nonatomic) BOOL showICloudStatus;
@property (nonatomic) BOOL useRelativeDates;
@property (nonatomic) BOOL calculateAllSizes;
@property (nonatomic) int sortColumn;
@property (retain, nonatomic) NSDictionary *columnSettings;
@property (nonatomic) BOOL updatingColumns;
@property (nonatomic) BOOL nodesBeingDraggedAreAllAtTheRootLevel;
@property (nonatomic, getter=isEditing) BOOL editing;
@property (retain, nonatomic) FI_TListNameCellView *originalEditedNameCellView;
@property (retain, nonatomic) FI_TListHeaderRowView *headerRowView;
@property (nonatomic) struct TFENode { struct OpaqueNodeRef *fNodeRef; } nodeBeingReloaded;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (setter=_setWantsPageAlignedHorizontalAxis:) char _wantsPageAlignedHorizontalAxis;
@property (setter=_setWantsPageAlignedVerticalAxis:) char _wantsPageAlignedVerticalAxis;
@property (nonatomic, getter=isGrouping) BOOL grouping;
@property (retain, nonatomic) FI_TBrowserViewDataSource *dataSource;
@property (retain, nonatomic) NSEvent *mouseDownEventForDrag;
@property struct TFENode { struct OpaqueNodeRef *x0; } nodeToDoubleClick;
@property (getter=isTornDown) BOOL tornDown;

+ (void)updateProgressForICloudStatusCellView:(id)a0 progressStatus:(const void *)a1 isVisible:(BOOL)a2;
+ (void)updateTagsForNameCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
+ (void)updateEjectButtonForNameCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
+ (void)updateKindForCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
+ (void)updateMasterLayoutGuide:(id)a0 containerView:(id)a1;
+ (void)updateProgressForNameCellView:(id)a0 progressStatus:(const void *)a1 isVisible:(BOOL)a2;
+ (void)updateProgressForSizeCellView:(id)a0 progressStatus:(const void *)a1 isVisible:(BOOL)a2;
+ (void)updateProperty:(int)a0 cellView:(id)a1 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a2;
+ (void)updateResumeButtonForNameCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
+ (void)updateScreenTimeBadgeForNameCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
+ (void)updateSyncBadgeForNameCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1 canShowSyncBadge:(BOOL)a2 cloudSyncedLocation:(struct optional_bool { union { char x0; BOOL x1; } x0; BOOL x1; })a3 forAccessibilityElement:(id)a4;
+ (void)updateTagsForCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
+ (void)updateTitleForNameCellView:(id)a0 node:(struct TFENode { struct OpaqueNodeRef *x0; })a1 font:(id)a2 isInICloud:(BOOL)a3 showSize:(BOOL)a4 showPath:(BOOL)a5 showSharingStatus:(BOOL)a6 showLastModifiedBy:(BOOL)a7;
+ (void)updateVendorBadgeForNameCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1 scaleFactor:(double)a2 cloudMode:(BOOL)a3 darkBackground:(BOOL)a4;
+ (void)updateVersionForCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;

- (void).cxx_destruct;
- (unsigned long long)itemCount;
- (id).cxx_construct;
- (void)outlineView:(id)a0 didDragTableColumn:(id)a1;
- (id)nibName;
- (void)menuNeedsUpdate:(id)a0;
- (char)outlineView:(id)a0 acceptDrop:(id)a1 item:(id)a2 childIndex:(long long)a3;
- (id)outlineView:(id)a0 child:(long long)a1 ofItem:(id)a2;
- (void)outlineView:(id)a0 didClickTableColumn:(id)a1;
- (void)outlineView:(id)a0 didRemoveRowView:(id)a1 forRow:(long long)a2;
- (double)outlineView:(id)a0 heightOfRowByItem:(id)a1;
- (char)outlineView:(id)a0 isGroupItem:(id)a1;
- (char)outlineView:(id)a0 isItemExpandable:(id)a1;
- (long long)outlineView:(id)a0 numberOfChildrenOfItem:(id)a1;
- (id)outlineView:(id)a0 objectValueForTableColumn:(id)a1 byItem:(id)a2;
- (id)outlineView:(id)a0 rowViewForItem:(id)a1;
- (id)outlineView:(id)a0 selectionIndexesForProposedSelection:(id)a1;
- (char)outlineView:(id)a0 shouldAutoExpandItem:(id)a1;
- (char)outlineView:(id)a0 shouldEditTableColumn:(id)a1 item:(id)a2;
- (char)outlineView:(id)a0 shouldReorderColumn:(long long)a1 toColumn:(long long)a2;
- (char)outlineView:(id)a0 shouldSelectItem:(id)a1;
- (char)outlineView:(id)a0 shouldShowOutlineCellForItem:(id)a1;
- (char)outlineView:(id)a0 shouldTypeSelectForEvent:(id)a1 withCurrentSearchString:(id)a2;
- (double)outlineView:(id)a0 sizeToFitWidthOfColumn:(long long)a1;
- (id)outlineView:(id)a0 typeSelectStringForTableColumn:(id)a1 item:(id)a2;
- (unsigned long long)outlineView:(id)a0 validateDrop:(id)a1 proposedItem:(id)a2 proposedChildIndex:(long long)a3;
- (id)outlineView:(id)a0 viewForTableColumn:(id)a1 item:(id)a2;
- (char)outlineView:(id)a0 writeItems:(id)a1 toPasteboard:(id)a2;
- (void)outlineViewColumnDidMove:(id)a0;
- (void)outlineViewColumnDidResize:(id)a0;
- (void)outlineViewItemDidCollapse:(id)a0;
- (void)outlineViewItemDidExpand:(id)a0;
- (void)outlineViewItemWillCollapse:(id)a0;
- (void)outlineViewItemWillExpand:(id)a0;
- (void)outlineViewSelectionDidChange:(id)a0;
- (void)selectAll:(id)a0;
- (char)selectionShouldChangeInOutlineView:(id)a0;
- (int)viewStyle;
- (void)aboutToTearDown;
- (void)setIconSize:(double)a0;
- (void)configureView;
- (void)initCommon;
- (void)handleDoubleClick:(id)a0;
- (struct TFENode { struct OpaqueNodeRef *x0; })nodeAtIndex:(unsigned long long)a0;
- (BOOL)containsNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)setTextSize:(double)a0;
- (id)suggestedAttributes;
- (struct CGSize { double x0; double x1; })idealContentSize;
- (id)listView;
- (struct TFENodeVector { struct TFENode *x0; struct TFENode *x1; struct __compressed_pair<TFENode *, std::allocator<TFENode>> { struct TFENode *x0; } x2; })openContainers:(const void *)a0;
- (struct TFENode { struct OpaqueNodeRef *x0; })splitNodeGetDatasourceIdentity:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)updateIconForNameCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (void)updateSizeForSizeCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (void)cmdToggleShareInvitationStatus:(id)a0;
- (struct CGImage { } *)newRestoreImageForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 outRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1;
- (BOOL)nodeIsSelected:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)reloadColumnWithColumnProperty:(int)a0;
- (BOOL)shouldDiscloseSubFolderContents;
- (void)updateSyncBadgeForRowView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (id)_zoomImageFromViewForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)addSpotlightColumnWithColumnPropertyIfNeeded:(int)a0 withSettings:(id)a1;
- (void)adjustNameColumnWidth;
- (id)browserViewState;
- (void)buildBrowserParentToChildrenMap:(void *)a0 forContainerNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (struct TFENodeVector { struct TFENode *x0; struct TFENode *x1; struct __compressed_pair<TFENode *, std::allocator<TFENode>> { struct TFENode *x0; } x2; })closeContainers:(const void *)a0;
- (void)cmdDecreaseIconSize:(id)a0;
- (void)cmdIncreaseIconSize:(id)a0;
- (void)cmdSpotlightAttribute:(id)a0;
- (void)cmdToggleBladeRunnerStatus:(id)a0;
- (void)cmdToggleComments:(id)a0;
- (void)cmdToggleDateAdded:(id)a0;
- (void)cmdToggleDateCreated:(id)a0;
- (void)cmdToggleDateLastOpened:(id)a0;
- (void)cmdToggleDateModified:(id)a0;
- (void)cmdToggleKind:(id)a0;
- (void)cmdToggleLabels:(id)a0;
- (void)cmdToggleShareLastModifiedBy:(id)a0;
- (void)cmdToggleShareOwner:(id)a0;
- (void)cmdToggleSize:(id)a0;
- (void)cmdToggleVersion:(id)a0;
- (void)columnSettingsDidChange;
- (void)configureIndentation;
- (void)configureRowHeight;
- (void)dataSourceChanged:(const void *)a0;
- (void)dataSourceItemsDidChange:(const void *)a0;
- (void)deselectAllNodes;
- (void)didChangeColumnWidthForColumn:(id)a0;
- (id)dragFlockIconImageForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 atIconSize:(double)a1 inView:(id)a2;
- (id)dragFlockLabelImageForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 outFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 inView:(id)a2;
- (int)editingSelectionType;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (unsigned long long)getSelectedNodesFromView:(void *)a0 upTo:(unsigned long long)a1;
- (void)getVisibleNodes:(void *)a0;
- (void)handleDateFormatterChange;
- (BOOL)handleKeyDown:(id)a0 currentKey:(unsigned short)a1;
- (void)headerRowView:(id)a0 updateCellView:(id)a1 forTableColumn:(id)a2;
- (id)headerRowView:(id)a0 viewForTableColumn:(id)a1;
- (id)headerRowViewColumns;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })iconFrameForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (int)includeBadgeInIconImage;
- (unsigned long long)indexForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (id)indexSetForNodes:(const void *)a0;
- (void)invertSortOrder:(id)a0;
- (BOOL)isColumnVisible:(int)a0;
- (BOOL)isDateSortBy:(int)a0;
- (BOOL)isFakeHeaderNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)isGroupNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)isNodeBeingReloaded:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)isRecursivelyExpanding;
- (id)makeCellViewForDragImage:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (id)makeCellViewWithColumn:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (id)makeDragImageForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 includeIcon:(BOOL)a1 includeText:(BOOL)a2 outTextFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a3;
- (long long)maximumDisclosedDepth;
- (id)menuForColumnHeaders;
- (double)minNameColumnWidth;
- (struct CGImage { } *)newImageForRow:(long long)a0 outRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1;
- (struct TFENode { struct OpaqueNodeRef *x0; })nextNodeInViewAfter:(const void *)a0;
- (BOOL)node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 isAChildInViewOfNodes:(const void *)a1;
- (struct TFENode { struct OpaqueNodeRef *x0; })nodeAtPoint:(const struct CGPoint { double x0; double x1; } *)a0 includeTarget:(BOOL)a1;
- (BOOL)nodeCanBeDisclosed:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)nodeIsSpringable:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (struct TFENodeVector { struct TFENode *x0; struct TFENode *x1; struct __compressed_pair<TFENode *, std::allocator<TFENode>> { struct TFENode *x0; } x2; })nodesInBrowser;
- (struct TFENodeVector { struct TFENode *x0; struct TFENode *x1; struct __compressed_pair<TFENode *, std::allocator<TFENode>> { struct TFENode *x0; } x2; })nodesWithViews;
- (struct TFENode { struct OpaqueNodeRef *x0; })outlineNodeFromFINode:(id)a0;
- (struct TFENode { struct OpaqueNodeRef *x0; })parentForNotificationHelper:(id)a0;
- (id)popoverAnchorViewForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (id)popoverAnchorViewForRow:(id)a0;
- (void)privateBindSettings;
- (void)processInvalidatedThumbnailNodes:(const void *)a0;
- (void)refreshNodeSettings:(BOOL)a0;
- (void)reloadIconsInView;
- (void)resetCloudSyncedLocation:(struct optional_bool { union { char x0; BOOL x1; } x0; BOOL x1; })a0;
- (void)resizeColumnFromRight:(id)a0 withEvent:(id)a1;
- (void)restoreBrowserViewState:(id)a0;
- (void)revealNodes:(const void *)a0 select:(BOOL)a1;
- (double)rowHeightForIconAndText;
- (void)saveScrollPosition;
- (void)scrollToLeftMargin;
- (void)selectAllNodes;
- (unsigned long long)selectedNodesCount;
- (void)setColumnAutoResizing:(BOOL)a0;
- (void)setColumnVisibility:(int)a0 visible:(BOOL)a1;
- (void)setInitialConfigInProgress:(BOOL)a0;
- (void)setResizeCursorForColumn:(id)a0;
- (BOOL)setSelectedNodeIfAllowed:(struct TFENode { struct OpaqueNodeRef *x0; })a0;
- (void)setSelectedNodes:(const void *)a0 byExtendingSelection:(BOOL)a1;
- (void)setShowIconPreview:(BOOL)a0;
- (BOOL)shouldCalculateFolderSizes:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)shouldCloseContainer:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)shouldDelayNextPreviewPaneRetargetForCurrentKey:(unsigned short)a0;
- (BOOL)shouldSaveDisclosureState:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (struct TFENode { struct OpaqueNodeRef *x0; })splitNodeGetBrowserIdentity:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)startEditingSelectedRow;
- (BOOL)startEditingWithNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 renameOp:(id)a1;
- (void)stopEditing:(BOOL)a0;
- (struct TFENode { struct OpaqueNodeRef *x0; })thumbnailTargetNodeForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (struct TFENode { struct OpaqueNodeRef *x0; })thumbnailTargetNodeFromContainerNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)updateCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (void)updateCellViewsDisabledStateAtRow:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (void)updateCellViewsForSharingColumnChange;
- (void)updateDateFormattersAndAttributes;
- (void)updateDepthToOpenContainerMap:(const void *)a0;
- (void)updateHeaderRowView;
- (void)updateProgressForRowView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (void)updateSTFEditorLocation;
- (void)updateSyncBadgeForICloudStatusCellView:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1 font:(id)a2;
- (void)updateTitleForNode:(id)a0 node:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (void)updateWidthForColumn:(id)a0;
- (BOOL)validateDecreaseIconSize:(id)a0;
- (BOOL)validateIncreaseIconSize:(id)a0;
- (BOOL)validateToggleBladeRunnerStatus:(id)a0;
- (BOOL)validateToggleShareLastModifiedBy:(id)a0;
- (BOOL)validateToggleShareOwner:(id)a0;
- (struct optional<TSortBy> { union { char x0; int x1; } x0; BOOL x1; })visibleColumnPropertyForNodeProperty:(unsigned int)a0;
- (void)willCollapseNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 recursively:(BOOL)a1;
- (void)willExpandNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 recursively:(BOOL)a1;
- (void)willPresentPopoverForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;

@end
