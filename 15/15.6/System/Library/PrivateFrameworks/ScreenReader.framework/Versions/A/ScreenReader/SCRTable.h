@class AXFUIElement, NSArray, SCRElement, NSMutableString, SCRTableHeaderManager;

@interface SCRTable : SCRElement {
    struct { unsigned char isInHeader : 1; unsigned char registeredDisclosureLevelChangedNotification : 1; unsigned char registeredRowCountChangedNotification : 1; unsigned char registeredRowExpandedNotification : 1; unsigned char registeredSelectedCellsChangedNotification : 1; unsigned char registeredSelectedRowChangeNotification : 1; unsigned char supportsAXRowHeaderAttribute : 1; unsigned char supportsAXVisibleColumnsAttribute : 1; unsigned char supportsAXVisibleRowsAttribute : 1; unsigned char supportsCellBasedAttributes : 1; unsigned char supportsHeaderForColumn : 1; unsigned char supportsHeaderForRow : 1; } _srtFlags;
    struct SCRDataCell { unsigned long long row; unsigned long long column; } _focusedCell;
    struct SCRDataCell { unsigned long long row; unsigned long long column; } _lastFocusedCell;
    SCRElement *_readContentsElement;
    AXFUIElement *_readContentsRowUIElement;
    unsigned long long _readContentsRowIndex;
    double _ignoreNotificationsUntilTime;
    NSArray *_previousSelectionUIElements;
    unsigned long long _previousSelectionCount;
    char _previousSelectionUIElementsExceededMax;
    NSMutableString *_previousRowStringRepresentation;
    unsigned long long _previousSelectedRowIndex;
    unsigned long long _rowCount;
    unsigned long long _lastColumnIndexOutputted;
    struct { double rowSelectionDidChange; double cellSelectionDidChange; } _startCountTime;
    struct { unsigned long long rowSelectionDidChange; unsigned long long cellSelectionDidChange; } _countSinceStart;
    SCRTableHeaderManager *_headerManager;
}

@property (readonly, nonatomic) NSArray *allColumns;
@property (readonly, nonatomic) char isXcodeCodeCompletionTable;

+ (id)localizedSpanInfoDescriptionForRowSpanCount:(unsigned long long)a0 columnSpanCount:(unsigned long long)a1;

- (void)dealloc;
- (void).cxx_destruct;
- (unsigned long long)columnCount;
- (id)columnAtIndex:(unsigned long long)a0;
- (char)isSelected;
- (id)rowAtIndex:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleBounds;
- (unsigned long long)rowCount;
- (id)header;
- (id)children:(char)a0;
- (id)statusDescription;
- (id)columnHeaders;
- (char)isInteractive;
- (void)setFocusedCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (struct SCRDataCell { unsigned long long x0; unsigned long long x1; })focusedCell;
- (id)allRows;
- (id)visibleColumns;
- (id)visibleRows;
- (char)interactRightWithEvent:(id)a0 request:(id)a1;
- (id)selectedColumns;
- (char)supportSyncingSelectionToCursor;
- (char)syncKBFocusToVOCursorWithOutputRequest:(id)a0 playSound:(char)a1 withSelection:(char)a2;
- (id)tableDimensions;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })droppableBounds;
- (char)nightOwlRowText:(id)a0 equalToRowText:(id)a1;
- (unsigned long long)rowSpanForCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (id)stringForCommand:(id)a0 withExtension:(id)a1;
- (char)__moveVerticallyWithEvent:(id)a0 direction:(long long)a1 request:(id)a2 allowFullWrapping:(char)a3;
- (char)_addCoordinatesRangeDescriptionForCellUIElements:(id)a0 withContentDescriptionSuffix:(id)a1 toRequest:(id)a2 category:(id)a3;
- (char)_addDescriptionForEmptyRow:(id)a0 request:(id)a1;
- (void)_addDescriptionForRowElement:(id)a0 toRequest:(id)a1 includedHeader:(char)a2 includeBlanks:(char)a3 includeElementType:(char)a4;
- (void)_addInfoOfHeaderAtIndex:(unsigned long long)a0 headerOrientation:(long long)a1 request:(id)a2 forDescribingElement:(id)a3;
- (void)_addItemToHeaderOrientationPickerGuide:(id)a0 forOrientation:(long long)a1;
- (char)_addSelectionDescriptionToRequest:(id)a0 includesSelectedCount:(char)a1;
- (char)_addSummaryForRow:(unsigned long long)a0 fromColumnIndex:(unsigned long long)a1 includeHeader:(char)a2 includeBlanks:(char)a3 includeSelected:(char)a4 request:(id)a5;
- (id)_alternateDescriptionForHeaderElements;
- (id)_alternateDescriptionForHeaderElementsInOrientation:(long long)a0;
- (struct SCRDataCell { unsigned long long x0; unsigned long long x1; })_cellAtStartOfColSpanForCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (struct SCRDataCell { unsigned long long x0; unsigned long long x1; })_cellForMoveToFirstWithCurrentDataCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0 visibleOnly:(char)a1;
- (struct SCRDataCell { unsigned long long x0; unsigned long long x1; })_cellForMoveToLastVisibleOnly:(char)a0 command:(id *)a1 wrapped:(char *)a2 shouldScroll:(char *)a3;
- (struct SCRDataCell { unsigned long long x0; unsigned long long x1; })_cellToTheLeftOfCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0 needToWrap:(char *)a1;
- (struct SCRDataCell { unsigned long long x0; unsigned long long x1; })_cellToTheRightOfCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; } *)a0 needToWrap:(char *)a1;
- (id)_columnHeaderDescriptionForCellElement:(id)a0 headerIndex:(unsigned long long)a1;
- (id)_coordinatesInfoForCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0 usedShortCoordinatesStyle:(char *)a1;
- (void)_delayedAddItemDescription;
- (void)_delayedAddSelectedRowDescription;
- (void)_delayedHandledRowChanged;
- (void)_echoChangesFromCellUIElements:(id)a0 toCellUIElements:(id)a1 request:(id)a2 isReference:(char)a3 additionalRequirementForMultipleCellsUpdate:(char)a4 singleCellOutputHandler:(id /* block */)a5;
- (id)_elementForDataCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (void)_executeBlockForReadVisible:(id /* block */)a0;
- (char)_headerAtIndex:(unsigned long long)a0 headerOrientation:(long long)a1 equalToUIElement:(id)a2;
- (id)_headerDescriptionForIndex:(unsigned long long)a0 orientation:(long long)a1;
- (id)_headerForIndex:(unsigned long long)a0 orientation:(long long)a1;
- (id)_headerInfoForIndex:(unsigned long long)a0 headerUIElement:(id)a1 orientation:(long long)a2;
- (id)_headerRelatedLocalizedStringWithKey:(id)a0 orientation:(long long)a1;
- (char)_isWebOutlineRow:(id)a0;
- (id)_localizedDescriptionForChildrenOfHeaderCell:(id)a0;
- (char)_moveDownWithEvent:(id)a0 request:(id)a1 allowFullWrapping:(char)a2;
- (char)_moveFirstWithEvent:(id)a0 request:(id)a1 visibleOnly:(char)a2;
- (char)_moveLastWithEvent:(id)a0 request:(id)a1 visibleOnly:(char)a2;
- (char)_moveLeftWithEvent:(id)a0 request:(id)a1 allowFullWrapping:(char)a2;
- (char)_moveOutOfHeader:(id)a0;
- (char)_moveRightWithEvent:(id)a0 request:(id)a1 allowFullWrapping:(char)a2;
- (void)_moveToCellWithRequest:(id)a0 event:(id)a1 direction:(long long)a2;
- (char)_moveUpWithEvent:(id)a0 request:(id)a1 allowFullWrapping:(char)a2;
- (void)_outputBorderDescriptionForRequest:(id)a0 direction:(long long)a1;
- (void)_outputRowCountChanged:(unsigned long long)a0;
- (void)_rowCollapsed:(id)a0;
- (void)_rowCountDidChange:(id)a0;
- (void)_rowExpanded:(id)a0;
- (id)_rowHeaderDescriptionForCellElement:(id)a0;
- (void)_selectedCellsDidChange:(id)a0;
- (void)_selectedRowsDidChange:(id)a0;
- (id)_setFocusedCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0 scrolling:(char)a1 selectionMode:(long long)a2 request:(id)a3 event:(id)a4 highlight:(char)a5;
- (void)_setIsKeyboardSyncInProgress:(char)a0 allowUpdatingEquivalentElementInOtherChains:(char)a1;
- (void)_setReadContentsElement:(id)a0;
- (void)_setReadContentsRowUIElement:(id)a0;
- (void)_setSelectedCellWithUIElement:(id)a0;
- (void)_setSelectedCellsWithUIElements:(id)a0;
- (char)_setSingleSelectionWithRequest:(id)a0 cell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a1;
- (id)_stringForChildUIElement:(id)a0;
- (id)_stringForHeaderUIElement:(id)a0 index:(unsigned long long)a1 orientation:(long long)a2;
- (id)_textForRowUIElement:(id)a0;
- (char)_toggleBetweenCellAndHeader:(id)a0;
- (char)_toggleDisclosureTriangle:(id)a0;
- (char)_updateRequest:(id)a0 forDirection:(long long)a1 toCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; } *)a2 allowFullWrapping:(char)a3 didWrapRowOrCol:(char)a4 didWrapAround:(char)a5 event:(id)a6;
- (void)addBrailleItemDescriptionForFallbackToRequest:(id)a0;
- (char)addColumnHeaderForCurrentCellToRequest:(id)a0;
- (char)addColumnSummaryFromCurrentCellToRequest:(id)a0;
- (char)addColumnSummaryWithColumnIndex:(unsigned long long)a0 fromRowIndex:(unsigned long long)a1 toRequest:(id)a2;
- (char)addCoordinatesForCurrentCellToRequest:(id)a0;
- (void)addDescendantsToArray:(id)a0 additionalToRetain:(id)a1 additionalToSkip:(id)a2;
- (void)addDescriptionForRowElement:(id)a0 toRequest:(id)a1 includeHeader:(char)a2 headerIndex:(unsigned long long)a3 headerOrientation:(long long)a4 includeCommandEcho:(char)a5 includeBlanks:(char)a6;
- (void)addDescriptionForSelectedRowElement:(id)a0 atCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a1 toRequest:(id)a2;
- (void)addElementEnclosureSummaryToRequest:(id)a0;
- (void)addElementSummaryToRequest:(id)a0;
- (void)addEmptyCellStatusToRequest:(id)a0 forElement:(id)a1;
- (void)addGestureItemDescriptionForElement:(id)a0 toRequest:(id)a1;
- (void)addInteractionDescriptionForFocusedItemToRequest:(id)a0;
- (void)addItemDescriptionForEndInteractionToRequest:(id)a0;
- (void)addItemDescriptionForInteractionToRequest:(id)a0;
- (void)addItemDescriptionToRequest:(id)a0;
- (char)addKeyboardSelectionSummaryToRequest:(id)a0;
- (char)addRowHeaderForCurrentCellToRequest:(id)a0;
- (char)addRowSummaryFromCurrentCellToRequest:(id)a0;
- (char)addSelectionDescriptionToRequest:(id)a0;
- (char)addSummaryForRow:(unsigned long long)a0 request:(id)a1;
- (char)addTableDimensionsToRequest:(id)a0;
- (char)addTitleAlphabeticSpellingToRequest:(id)a0;
- (char)addTitlePhoneticSpellingToRequest:(id)a0;
- (char)addTitleToRequest:(id)a0;
- (char)allowBuildChildren;
- (char)allowDirectNavigationBetweenContentOfRows;
- (char)allowMoveAttemptsPastBoundary:(char)a0 allowFullWrapping:(char)a1;
- (char)allowsEchoTitleChanges;
- (void)appendSelectedStatusDescription:(id)a0;
- (char)canSetSelectionOnChildren;
- (id)captionDescriptionContainsUserLabel:(char *)a0 containsAncestorLabel:(char *)a1;
- (double)cellDescriptionDelayTime;
- (char)cellExists:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (id)cellForDataCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (struct SCRDataCell { unsigned long long x0; unsigned long long x1; })cellForUIElement:(id)a0;
- (id)cellUIElementForRow:(unsigned long long)a0 column:(unsigned long long)a1;
- (char)chainEvent:(id)a0 request:(id)a1;
- (id)childAfterElement:(id)a0;
- (id)childAtIndex:(unsigned long long)a0 visibleOnly:(char)a1;
- (id)childBeforeElement:(id)a0;
- (id)childElementWithNameDescription:(id)a0 selectedOnly:(char)a1;
- (id)childrenInReadContentsOrder;
- (unsigned long long)columnCountForRow:(unsigned long long)a0;
- (id)columnHeaderInfoWithIndex:(unsigned long long)a0;
- (unsigned long long)columnIndexForCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (id)columnLocationInfoWithIndex:(unsigned long long)a0;
- (unsigned long long)columnSpanForCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (id)contentChooserTitle;
- (id)coordinatesInfoForCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (id)currentFocusedRow;
- (unsigned long long)directInteractionArrowCaptureMask;
- (void)dragAndDropDidFinish;
- (void)echoChangesFromCellUIElements:(id)a0 toCellUIElements:(id)a1 isReference:(char)a2;
- (id)emptyCellDescription;
- (id)firstChildForFocusing;
- (char)focusInto:(id)a0 event:(id)a1;
- (id)focusOntoUIElement:(id)a0 withScrolling:(char)a1 withSelection:(char)a2;
- (void)focusToFirstSelectionWithRequest:(id)a0 defaultToFirstVisibleItem:(char)a1 updateSelectionOnly:(char)a2;
- (void)forgetReadContentsElement;
- (id)gestureContainerOverviewDescription;
- (long long)groupBehavior;
- (void)handleBoundaryWithDirection:(long long)a0 cell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a1 outputRequest:(id)a2 event:(id)a3;
- (char)handleUntaggedOperationWithEvent:(id)a0 request:(id)a1;
- (char)hasMultipleSelection;
- (char)hasSelectedChildren;
- (id)headerInfoForUIElements:(id)a0;
- (id)headerManager;
- (char)includeColumnIndices;
- (char)includeRowIndices;
- (char)includeTableHeaders;
- (unsigned long long)indexOfElement:(id)a0 visibleOnly:(char)a1;
- (id)initWithUIElement:(id)a0 parent:(id)a1;
- (char)interactDownShiftWithEvent:(id)a0 request:(id)a1;
- (char)interactDownWithEvent:(id)a0 request:(id)a1;
- (char)interactLeftWithEvent:(id)a0 request:(id)a1;
- (char)interactUpShiftWithEvent:(id)a0 request:(id)a1;
- (char)interactUpWithEvent:(id)a0 request:(id)a1;
- (char)isCellTable;
- (char)isContainerElement;
- (char)isNightOwl;
- (char)isSectionView;
- (id)lastChildForFocusing;
- (struct CGPoint { double x0; double x1; })mouseInsertAfterChildElement:(id)a0;
- (struct CGPoint { double x0; double x1; })mouseInsertBeforeChildElement:(id)a0;
- (char)moveOutWithEvent:(id)a0 request:(id)a1;
- (void)moveSelectionBackwardWithRequest:(id)a0;
- (void)moveSelectionForwardWithRequest:(id)a0;
- (void)moveToCellAboveWithRequest:(id)a0 event:(id)a1;
- (void)moveToCellBelowWithRequest:(id)a0 event:(id)a1;
- (char)moveToFirstElementWithEvent:(id)a0 request:(id)a1;
- (char)moveToFirstVisibleElementWithEvent:(id)a0 request:(id)a1;
- (char)moveToHeaderOfOrientation:(long long)a0 withRequest:(id)a1;
- (char)moveToLastElementWithEvent:(id)a0 request:(id)a1;
- (char)moveToLastVisibleElementWithEvent:(id)a0 request:(id)a1;
- (void)moveToLeftCellWithRequest:(id)a0 event:(id)a1;
- (char)moveToLeftCellWithRequest:(id)a0 event:(id)a1 allowFullWrapping:(char)a2;
- (void)moveToRightCellWithRequest:(id)a0 event:(id)a1;
- (char)moveToRightCellWithRequest:(id)a0 event:(id)a1 allowFullWrapping:(char)a2;
- (char)navigateAcrossFromCell:(id)a0 direction:(long long)a1 request:(id)a2;
- (char)nextNavigableCellToRight:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; } *)a0 fromCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a1 didWrap:(char *)a2 didChangeRows:(char *)a3;
- (unsigned long long)numberOfChildren:(char)a0;
- (void)prepareGestureTrackingChildren;
- (void)prepareReadContentsElementVisibleOnly:(char)a0;
- (id)readContentsElement;
- (unsigned long long)readContentsElementCount;
- (id)reorderedRowChildrenForSummaryDescription:(id)a0;
- (id)rowHeaderInfoWithIndex:(unsigned long long)a0;
- (id)rowHeaders;
- (unsigned long long)rowIndexForCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0;
- (id)rowLocationInfoForCell:(id)a0 atRowIndex:(unsigned long long)a1;
- (id)selectedCellUIElements;
- (char)selectedRowCountExceedsMaxAllowed;
- (id)selectedRows;
- (void)setBrailleLineWithFocusedElement:(id)a0 forceRebuild:(char)a1;
- (void)setFocusedCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0 request:(id)a1;
- (id)setFocusedCell:(struct SCRDataCell { unsigned long long x0; unsigned long long x1; })a0 scrolling:(char)a1 selection:(char)a2 request:(id)a3 event:(id)a4;
- (void)setFocusedCellUIElement:(id)a0 scrolling:(char)a1 selection:(char)a2 request:(id)a3;
- (void)setFocusedChild:(id)a0;
- (void)setIsEventHandler:(char)a0 isKeyboardHandler:(char)a1;
- (void)setIsKeyboardSyncInProgress:(char)a0;
- (void)setReadContentsElement:(id)a0;
- (char)setSelectionForRowUIElement:(id)a0;
- (char)setSingleSelectionWithRequest:(id)a0;
- (char)shouldAutoSyncKeyboardFocus;
- (char)shouldPromoteCells;
- (char)shouldWrapNavigationForOrientation:(long long)a0;
- (void)startReadContentsVisibleOnly:(char)a0;
- (char)supportsVisibleRowsAndColumnOffsets;
- (char)synchKeyboardToVOCursor:(id)a0;
- (char)synchVOCursorToKeyboard:(id)a0;
- (char)toggleMultipleSelectionWithRequest:(id)a0;
- (char)toggleSingleSelectionWithRequest:(id)a0;
- (char)trackElementWithGestureEvent:(id)a0 request:(id)a1;
- (char)uiElementIsAHeader:(id)a0;
- (unsigned long long)uiSelectedChildrenCount;
- (id)uiSelectedChildrenElements;
- (unsigned long long)uiVisibleChildrenCount;
- (id)uiVisibleChildrenElements;
- (void)updateLastFocusedCell;
- (unsigned long long)visibleColumnOffset;
- (unsigned long long)visibleRowOffset;

@end
