@class NSLock, NSString, AXFDispatchQueue, NSMutableDictionary, AFNotifyObserver, SCRCUserDefaults, NSMutableArray, SCROutputRequest;

@interface SCROutputManager : SCROutputThreadedObject <AFNotifyObserverDelegate, AXFUserSessionObserverDelegate> {
    NSMutableDictionary *_categoryPrefsCache;
    NSMutableDictionary *_categoryConfigOverrides;
    NSLock *_prefCacheLock;
    unsigned long long _nextRequestUniqueID;
    NSLock *_requestUniqueIDLock;
    NSString *_lastSpeechAttribute;
    NSString *_clientIdentifier;
    struct __CFArray { } *_queuedOutputRequests;
    struct __CFDictionary { } *_queuedObjectsByOutputID;
    NSLock *_queuedObjectsLock;
    NSMutableArray *_announcementHistory;
    AXFDispatchQueue *_savedOutputDispatchQueue;
    unsigned long long _blockingRequestUniqueID;
    SCROutputRequest *_synchronousOutputRequest;
    char _allowAirPlay;
    NSLock *_generalLock;
    char _isAudioGraphInitialized;
    struct OpaqueAUGraph { } *_audioGraph;
    struct ComponentInstanceRecord { long long x0[1]; } *_audioMixerUnit;
    struct ComponentInstanceRecord { long long x0[1]; } *_audioOutputUnit;
    NSMutableArray *_allAudioSoundUnits;
    NSMutableArray *_standardAudioSoundUnits;
    NSMutableArray *_stereoAudioSoundUnits;
    AXFDispatchQueue *_audioGraphDispatchQueue;
    char _isUsingPositionalAudio;
    char _isDuckingOn;
    char _isAudioRunning;
    _Atomic double _lastTimeStopped;
    char _ignoringRequests;
}

@property (retain, nonatomic) AFNotifyObserver *siriObserver;
@property (nonatomic) char isDictating;
@property (nonatomic) char isSiriActive;
@property (retain, nonatomic, setter=_setComponents:) NSMutableDictionary *_components;
@property (retain, nonatomic, setter=_setComponentsLock:) NSLock *_componentsLock;
@property (retain, nonatomic, setter=_setRequestRunners:) NSMutableDictionary *_requestRunners;
@property (retain, nonatomic, setter=_setQueuedObjectsByQueueID:) NSMutableDictionary *_queuedObjectsByQueueID;
@property (retain, nonatomic, setter=_setSavedOutputRequests:) NSMutableArray *_savedOutputRequests;
@property (nonatomic, setter=_setSavedOutputIsRunning:) char _savedOutputIsRunning;
@property (nonatomic, setter=_setSavedOutputLeftInQueue:) long long _savedOutputLeftInQueue;
@property (nonatomic, setter=_setInitializationState:) unsigned char _initializationState;
@property (nonatomic) char audioGraphStarted;
@property (retain, nonatomic, setter=_setUserDefaults:) SCRCUserDefaults *_userDefaults;
@property (copy) NSString *currentPreferredLanguage;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)availableVoices;
+ (id)_systemLanguage;
+ (char)_allVoicesMatchLanguage:(id)a0;
+ (id)_getCachedSupportedSynthesizerCharactersForVoice:(id)a0;
+ (void)_matchVoiceOverLanguageToLanguage:(id)a0;
+ (void)_setCachedSupportedSynthesizerCharacters:(id)a0 forVoice:(id)a1;
+ (id)_supportedSynthesizerCharactersForVoice:(id)a0;
+ (void)matchLanguageToSystemLanguageAllowBounce:(char)a0;
+ (id)voiceConfigurableCategories;

- (void)dealloc;
- (void).cxx_destruct;
- (id)_keysToObserve;
- (void)handleEvent:(id)a0;
- (void)setClientIdentifier:(id)a0;
- (id)clientIdentifier;
- (void)addRequest:(id)a0;
- (float)systemVolume;
- (void)continueSpeech;
- (void)notifyObserver:(id)a0 didChangeStateFrom:(unsigned long long)a1 to:(unsigned long long)a2;
- (id)initWithUserDefaults:(id)a0;
- (void)cancelRequestID:(unsigned long long)a0;
- (void)userSessionObserverScreenSaverDidStart:(id)a0;
- (void)userSessionObserverScreenSaverDidStop:(id)a0;
- (void)setSystemVolume:(float)a0;
- (void)_logRecentOutputRequestsStarted;
- (void)_turnOffDuckingWithRampOutTime:(double)a0;
- (char)startAudioGraph;
- (void)_addAnnouncementRequestToHistory:(id)a0;
- (void)_addQueuedObject:(id)a0;
- (void)_adjustSpeechAttributeForCategory:(id)a0 speakAttributeChange:(char)a1 continueSpeech:(char)a2 responseAction:(long long)a3;
- (char)_adjustSystemVolumeUp:(char)a0;
- (char)_airplayOutputIsDesired;
- (unsigned int)_audioOutputDeviceIDIncludingAirPlay;
- (void)_cancelQueuedRequestsForOutputIdentifier:(id)a0 queueIdentifier:(id)a1;
- (void)_compressAndMoveLogOutput;
- (void)_configureAudioGraphForChannelLayout;
- (unsigned int)_defaultOutputDeviceIDIncludingAirPlay;
- (void)_dispatchNextQueuedSteps;
- (unsigned int)_getDesiredAudioRenderChannelCount;
- (void)_handleQueuedObjectStartNotificationForOutputIdentifier:(struct __CFString { } *)a0 withQueueIdentifier:(struct __CFString { } *)a1;
- (void)_handleSpeechActive;
- (void)_handleSpeechIdle;
- (void)_handleStopAllNotification:(id)a0;
- (int)_initializeAudio;
- (void)_logOutputRequest:(id)a0 toDirectoryURL:(id)a1;
- (void)_logRecentOutputRequestFailed;
- (void)_logRecentOutputRequestsFinished;
- (void)_monitorMixerStatus;
- (id)_popQueuedObjectForOutputID:(struct __CFString { } *)a0;
- (void)_processRequestForLogging:(id)a0;
- (char)_processTargetedCategoryRequest:(id)a0;
- (void)_removeAllQueueObjects;
- (void)_removeQueueObjectForOutputID:(struct __CFString { } *)a0;
- (void)_removeQueueObjectForQueueID:(struct __CFString { } *)a0;
- (void)_removeQueueObjectForQueueID:(struct __CFString { } *)a0 andOutputID:(struct __CFString { } *)a1;
- (void)_runOutputRequest:(id)a0 usingOutputIdentifier:(id)a1;
- (void)_setAllowAirPlay:(char)a0;
- (void)_startAudioGraph;
- (void)_startRunners:(struct __CFDictionary { } *)a0 forOutputRequest:(id)a1 usingOutputIdentifier:(id)a2;
- (void)_stopRunnersWithQueueIdentifier:(id)a0;
- (void)_stopRunnersWithQueueIdentifier:(id)a0 except:(id)a1;
- (long long)_stopSpeechAndSound:(char)a0 except:(id)a1;
- (void)_synchronizeIgnoringRequestsState;
- (void)_turnOnDucking;
- (void)_updateChannelMapping;
- (void)_updateDucking;
- (char)_usingDefaultAudioDevice;
- (id)addVoiceIdentifierToUserPrefs:(id)a0;
- (id)announcementStrings;
- (unsigned int)audioOutputDeviceID;
- (id)availableOutputAudioDevices;
- (float)azimuthForX:(double)a0 withTotalWidth:(double)a1;
- (void)cancelAllQueuedRequests;
- (void)cancelRequestWithQueueIdentifier:(id)a0;
- (void)clearConfigurationCache;
- (void)completeInitialization;
- (id)componentWithName:(id)a0;
- (void)copy:(id)a0 toDirectory:(id)a1;
- (long long)countOfSavedRequests;
- (char)decreaseSystemVolume;
- (unsigned int)defaultOutputDeviceID;
- (float)elevationForY:(double)a0 withTotalHeight:(double)a1;
- (id)getBrailleFollowSpeed;
- (id)getBrailleVerbosityLevel;
- (id)getDeleteCharacterMode;
- (id)getLanguageSpecificSpeechAttribute:(id)a0 startIndex:(unsigned long long)a1;
- (id)getLinkAndAttachmentAttributeDescriptionLevel;
- (id)getMisspelledWordsDescriptionLevel;
- (id)getNumberMode;
- (id)getPunctuationVerbosityLevel;
- (id)getStatusLevel;
- (id)getTableHeadersLevel;
- (id)getTextAttributesDescriptionLevel;
- (id)getTypingEcho;
- (id)getUpperCaseCharacterMode;
- (id)getVerbosityLevel;
- (void)handleDictationDidStart;
- (void)handleDictationDidStop;
- (char)hasCustomizedCategories;
- (char)increaseSystemVolume;
- (void)initializeAllowAirPlay;
- (void)initializeOutputManagerConfiguration;
- (char)isPositionalAudioEnabled;
- (char)isSystemVolumeInaudible;
- (id)lastSpeechAttribute;
- (float)lastSpeechAttributeValue:(long long)a0 category:(id)a1;
- (id)localizedNameOfColor:(struct CGColor { } *)a0 isExactMatch:(char *)a1;
- (id)localizedOutputStringForKey:(id)a0;
- (void)logRecentOutputRequests;
- (unsigned long long)manufactureNewRequestUniqueID;
- (struct ComponentInstanceRecord { long long x0[1]; } *)mixerUnit;
- (id)mostRecentOutputRequest;
- (id)mostRecentSpeechOutputRequest;
- (void)muteSystemVolume:(char)a0;
- (void)notifyOfFinishedRunnerWithName:(id)a0 requestID:(unsigned long long)a1 outputIdentifier:(id)a2;
- (id)objectForAttribute:(id)a0 component:(id)a1;
- (int)obtainSoundBus;
- (int)obtainStereoSoundBus;
- (void)pauseOrContinueSpeech;
- (void)pauseSpeech;
- (void)playSoundWithIdentifier:(id)a0;
- (id)preferencesForCategory:(id)a0 key:(id)a1;
- (long long)punctuationRepeatLimitForCategory:(id)a0;
- (long long)punctuationRepeateModeForCategory:(id)a0;
- (long long)punctuationVerbosityLevelForCategory:(id)a0;
- (void)releaseSoundBus:(int)a0;
- (void)removeConfigurationObservers;
- (void)runSavedRequestAtIndex:(long long)a0;
- (id)savedRequestAtIndex:(long long)a0;
- (double)screenPixelsHigh;
- (double)screenPixelsWide;
- (void)setAudioPositionForAudioUnitId:(unsigned int)a0 forAzimuth:(float)a1 andElevation:(float)a2 andDistance:(float)a3;
- (char)setChannelMapping:(id)a0 error:(id *)a1;
- (void)setIsPositionalAudioEnabled:(char)a0;
- (void)setLastSpeechAttribute:(id)a0;
- (void)setObject:(id)a0 forAttribute:(id)a1 component:(id)a2;
- (char)shouldUseRomanTextProcessingForCategory:(id)a0;
- (id)soundPathWithIdentifier:(id)a0;
- (struct ComponentInstanceRecord { long long x0[1]; } *)soundUnitForBusId:(int)a0;
- (char)soundsUseMultiChannelMixer;
- (char)stopAudioGraph;
- (void)stopIgnoringRequests;
- (void)stopIgnoringRequestsAndNotify;
- (void)stopSpeechAndSound:(char)a0;
- (void)stopSpeechAndSound:(char)a0 exclusions:(id)a1;
- (id)synthesizerLocaleForCategory:(id)a0;
- (id)synthesizerLocaleStringForCategory:(id)a0;
- (unsigned int)systemDefaultOutputDeviceID;
- (id)unsupportedCharactersForVoice:(id)a0;
- (void)updateAudioGraph;
- (void)updateAudioOutputDevice;
- (void)updateAudioQualityLevel:(id)a0;
- (void)updateDucking;
- (void)updateSpeechPitchForCategory:(id)a0 shouldSpeakResult:(char)a1;
- (void)updateSpeechRateForCategory:(id)a0 shouldSpeakResult:(char)a1;
- (void)updateSpeechRateWithoutPause;
- (void)updateSpeechVoiceIdentifierForCategory:(id)a0 shouldSpeakResult:(char)a1;
- (void)updateSpeechVolumeForCategory:(id)a0 shouldSpeakResult:(char)a1;

@end
