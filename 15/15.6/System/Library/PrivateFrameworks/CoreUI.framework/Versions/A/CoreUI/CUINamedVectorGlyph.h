@class NSValue, CUIVectorGlyphMulticolorLayer, NSDictionary, CUICatalog, CUINamedLookup, CUIVectorGlyphLayer, CUIVectorGlyphHierarchicalLayer;

@interface CUINamedVectorGlyph : CUINamedLookup <CUIVectorGlyhLayerDelegate, NSCopying> {
    double _pointSize;
    double _lookedupScaleFactor;
    struct CGImage { } *_cgImageRef;
    double _fontMatchingScaleFactor;
    CUICatalog *_catalog;
    long long _layoutDirection;
    unsigned char _generatedImage : 1;
    unsigned char _flippable : 1;
    unsigned char _canUsePathConcatenation : 1;
    short _containsNamedColorStyles;
    double _glyphSize;
    double _glyphWeight;
    CUINamedLookup *_ultralightInterpolationSource;
    CUINamedLookup *_blackInterpolationSource;
    CUIVectorGlyphLayer *_monochromeLayerGroup;
    CUIVectorGlyphMulticolorLayer *_multicolorLayerGroup;
    CUIVectorGlyphHierarchicalLayer *_hierarchicalLayerGroup;
    NSValue *_rotationAnchor;
    NSValue *_metricCenter;
    NSDictionary *_symbolDefaults;
    struct { id x0; id x1; id x2; } *_lockedRenditions;
}

@property (nonatomic) double fontMatchingScaleFactor;
@property (readonly, nonatomic) double baselineOffset;
@property (readonly, nonatomic) double capHeight;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentRect;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentBounds;
@property (readonly, nonatomic) char isFlippable;
@property (readonly, nonatomic) float templateVersion;
@property (readonly, nonatomic) double baselineOffsetUnrounded;
@property (readonly, nonatomic) double capHeightUnrounded;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentBoundsUnrounded;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentRectUnrounded;
@property (readonly, nonatomic) long long preferredRenderingMode;
@property (readonly, nonatomic, getter=isInterpolatable) char interpolatable;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } rotationAnchor;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } metricCenter;
@property double variableMinValue;
@property double variableMaxValue;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } interiorAlignmentRectUnrounded;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } interiorAlignmentRect;

+ (unsigned int)_backgroundImageNamesAtom;
+ (id)_colorStyleNames;
+ (unsigned int)_hasImageFillsAtom;
+ (id)_knockoutStyleNames;
+ (id)_layerHierarchyStyleNames;
+ (unsigned int)_rotatesClockwiseAtom;
+ (unsigned int)_variableColorContinuousAtom;
+ (unsigned int)_wiggleAngleAtom;
+ (unsigned int)_wiggleStyleAtom;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)debugDescription;
- (unsigned long long)hash;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (struct CGImage { } *)image;
- (double)scale;
- (struct CGPath { } *)CGPath;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withColorResolver:(id /* block */)a2;
- (long long)layoutDirection;
- (void)_setImage:(struct CGImage { } *)a0;
- (char)containsNamedColorStyles;
- (void)drawInContext:(struct CGContext { } *)a0;
- (struct CGImage { } *)imageWithColorResolver:(id /* block */)a0;
- (struct CGImage { } *)imageWithHierarchyColorResolver:(id /* block */)a0;
- (struct CGImage { } *)imageWithPaletteColorResolver:(id /* block */)a0;
- (unsigned long long)numberOfHierarchyLayers;
- (unsigned long long)numberOfTemplateLayers;
- (double)pointSize;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withHierarchyColorResolver:(id /* block */)a2;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withPaletteColorResolver:(id /* block */)a2;
- (id)makeLayerWithColorResolver:(id /* block */)a0;
- (id)_symbolDefaults;
- (id)hierarchyLevels;
- (id)_blackRendition;
- (id)hierarchyLayers;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withPaletteColors:(id)a2;
- (id)_blackInterpolationSource;
- (char)_canUsePathConcatenation;
- (id)_catalog;
- (struct CGImage { } *)_cgImageRef;
- (char)_containsWideGamutColor;
- (id)_createShapeGroupSubpaths;
- (void)_drawHierarchicalLayersInContext:(struct CGContext { } *)a0 scaleFactor:(double)a1 targetSize:(struct CGSize { double x0; double x1; })a2 colorResolver:(id /* block */)a3;
- (void)_drawMulticolorLayersInContext:(struct CGContext { } *)a0 scaleFactor:(double)a1 targetSize:(struct CGSize { double x0; double x1; })a2 colorResolver:(id /* block */)a3;
- (void)_drawPaletteLayersInContext:(struct CGContext { } *)a0 scaleFactor:(double)a1 targetSize:(struct CGSize { double x0; double x1; })a2 colorResolver:(id /* block */)a3;
- (id)_getAnchor:(id)a0 inRendition:(id)a1;
- (struct CGPoint { double x0; double x1; })_getMetricCenterInRendition:(id)a0;
- (struct CGSVGNode { } *)_getOutlineNodeForDocument:(struct CGSVGDocument { } *)a0;
- (struct { double x0; double x1; double x2; double x3; })_interpolatedAlignmentRectInsetsWithWeight:(double)a0 glyphSize:(double)a1 fromUltralight:(struct { double x0; double x1; double x2; double x3; })a2 regular:(struct { double x0; double x1; double x2; double x3; })a3 black:(struct { double x0; double x1; double x2; double x3; })a4;
- (struct CGPoint { double x0; double x1; })_interpolatedAnchorWithWeight:(double)a0 glyphSize:(double)a1 fromUltralight:(struct CGPoint { double x0; double x1; })a2 regular:(struct CGPoint { double x0; double x1; })a3 black:(struct CGPoint { double x0; double x1; })a4;
- (double)_interpolatedBaselineOffsetWithWeight:(double)a0 glyphSize:(double)a1 fromUltralight:(double)a2 regular:(double)a3 black:(double)a4;
- (struct CGSize { double x0; double x1; })_interpolatedCanvasSizeWithWeight:(double)a0 glyphSize:(double)a1 fromUltralight:(struct CGSize { double x0; double x1; })a2 regular:(struct CGSize { double x0; double x1; })a3 black:(struct CGSize { double x0; double x1; })a4;
- (double)_interpolatedCapHeightWithWeight:(double)a0 glyphSize:(double)a1 fromUltralight:(double)a2 regular:(double)a3 black:(double)a4;
- (id)_interpolatedPathWithWeight:(double)a0 glyphSize:(double)a1 fromUltralightSmall:(id)a2 regularSmall:(id)a3 blackSmall:(id)a4;
- (double)_interpolatedStrokeWidthWithWeight:(double)a0 glyphSize:(double)a1 fromUltralight:(double)a2 regular:(double)a3 black:(double)a4;
- (id)_layerNamesForRenderingMode:(int)a0 inRendition:(id)a1;
- (void)_legacy_drawHierarchicalLayerNamed:(id)a0 inContext:(struct CGContext { } *)a1 scaleFactor:(double)a2 targetSize:(struct CGSize { double x0; double x1; })a3 colorResolver:(id /* block */)a4;
- (void)_legacy_drawMonochromeLayerNamed:(id)a0 inContext:(struct CGContext { } *)a1 scaleFactor:(double)a2 targetSize:(struct CGSize { double x0; double x1; })a3 onFillColor:(struct CGColor { } *)a4 offFillColor:(struct CGColor { } *)a5;
- (void)_legacy_drawMulticolorLayerNamed:(id)a0 inContext:(struct CGContext { } *)a1 scaleFactor:(double)a2 targetSize:(struct CGSize { double x0; double x1; })a3 colorResolver:(id /* block */)a4;
- (void)_lookupCatalogImageForIdiom:(long long)a0 locale:(id)a1;
- (id)_partialLocale;
- (id)_regularRendition;
- (double)_requestedPointSizeRatio;
- (void)_setBlackInterpolationSource:(id)a0;
- (void)_setCanUsePathConcatenation:(char)a0;
- (void)_setCatalog:(id)a0;
- (void)_setContainsNamedColorStyles:(short)a0;
- (void)_setFlippable:(char)a0;
- (void)_setGlyphSize:(double)a0;
- (void)_setGlyphWeight:(double)a0;
- (void)_setLayoutDirection:(long long)a0;
- (void)_setPointSize:(double)a0;
- (void)_setScale:(double)a0;
- (void)_setUltralightInterpolationSource:(id)a0;
- (id)_stylePrefixForRenderingMode:(int)a0;
- (id)_ultralightInterpolationSource;
- (id)_ultralightRendition;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRectForTargetSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (struct CGSVGAttributeMap { } *)attributesForLayerNamed:(id)a0;
- (struct CGSVGAttributeMap { } *)attributesForLayerNamed:(id)a0 inRendition:(id)a1;
- (char)canBeInterpolatedWith:(id)a0;
- (char)containsNamedColorStyle:(id)a0;
- (void)drawHierarchyLayerAtIndex:(unsigned long long)a0 inContext:(struct CGContext { } *)a1 withColorResolver:(id /* block */)a2;
- (void)drawInContext:(struct CGContext { } *)a0 withPaletteColors:(id)a1;
- (void)drawMulticolorLayerAtIndex:(unsigned long long)a0 inContext:(struct CGContext { } *)a1 withColorResolver:(id /* block */)a2;
- (void)drawPaletteLayerAtIndex:(unsigned long long)a0 inContext:(struct CGContext { } *)a1 withColorResolver:(id /* block */)a2;
- (id)edgeDefinitionTextureWithBufferAllocator:(id)a0;
- (id)fillImageNames;
- (struct CGImage { } *)fillImageWithName:(id)a0;
- (char)generatedImage;
- (double)glyphContinuousSize;
- (double)glyphContinuousWeight;
- (long long)glyphSize;
- (long long)glyphWeight;
- (id)gradientTextureWithBufferAllocator:(id)a0;
- (id)graphicVariantWithOptions:(id)a0;
- (char)hasImageFills;
- (id)hierarchicalLayerThresholds;
- (id)hierarchicalLayers;
- (struct CGImage { } *)imageWithHierarchicalPrimaryColor:(struct CGColor { } *)a0;
- (struct CGImage { } *)imageWithPaletteColors:(id)a0;
- (id)initWithName:(id)a0 scaleFactor:(double)a1 deviceIdiom:(long long)a2 pointSize:(double)a3 continuousWeight:(double)a4 continuousSize:(double)a5 interpolatedFromRegular:(id)a6 ultralight:(id)a7 black:(id)a8 fromCatalog:(id)a9 themeRef:(unsigned long long)a10;
- (id)initWithName:(id)a0 scaleFactor:(double)a1 deviceIdiom:(long long)a2 pointSize:(double)a3 continuousWeight:(double)a4 continuousSize:(double)a5 interpolatedFromRegular:(id)a6 ultralight:(id)a7 black:(id)a8 fromCatalog:(id)a9 themeRef:(unsigned long long)a10 locale:(id)a11;
- (id)initWithName:(id)a0 scaleFactor:(double)a1 deviceIdiom:(long long)a2 pointSize:(double)a3 fromCatalog:(id)a4 usingRenditionKey:(id)a5 fromTheme:(unsigned long long)a6;
- (id)initWithName:(id)a0 scaleFactor:(double)a1 deviceIdiom:(long long)a2 pointSize:(double)a3 fromCatalog:(id)a4 usingRenditionKey:(id)a5 themeRef:(unsigned long long)a6 locale:(id)a7;
- (id)intWithName:(id)a0 scaleFactor:(double)a1 deviceIdiom:(long long)a2 pointSize:(double)a3 weight:(long long)a4 glyphSize:(long long)a5 interpolatedFromRegular:(id)a6 ultralight:(id)a7 black:(id)a8 fromCatalog:(id)a9 themeRef:(unsigned long long)a10;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interiorAlignmentRectForTargetSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (char)isKnockoutEnabledForHierarchicalLayerAtIndex:(long long)a0 opacity:(double *)a1;
- (char)isKnockoutEnabledForMulticolorLayerAtIndex:(long long)a0 opacity:(double *)a1;
- (char)isKnockoutEnabledForPaletteLayerAtIndex:(long long)a0 opacity:(double *)a1;
- (id)knownAvailableVectorSizes;
- (struct CGPath { } *)maskShape;
- (id)monochromeLayerNamesInRendition:(id)a0;
- (id)monochromeLayers;
- (id)multicolorColorNames;
- (id)multicolorLayerColorNames;
- (id)multicolorLayerThresholds;
- (id)multicolorLayers;
- (unsigned long long)numberOfMulticolorLayers;
- (unsigned long long)numberOfPaletteLayers;
- (id)paletteLayerThresholds;
- (id)paletteLayers;
- (id)paletteLevels;
- (id)pathForLayerNamed:(id)a0;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 hierarchicalPrimaryColor:(struct CGColor { } *)a2;
- (struct CGSize { double x0; double x1; })referenceCanvasSize;
- (struct CGSVGDocument { } *)referenceGlyph;
- (double)referencePointSize;
- (void)setRepresentsOnDemandContent:(char)a0;
- (double)strokeWidthForLayerNamed:(id)a0;
- (double)strokeWidthForLayerNamed:(id)a0 inRendition:(id)a1;
- (struct CGSVGAttributeMap { } *)styleForLayerName:(id)a0;
- (id)symbolDefaults;
- (id)templateLayerThresholds;

@end
