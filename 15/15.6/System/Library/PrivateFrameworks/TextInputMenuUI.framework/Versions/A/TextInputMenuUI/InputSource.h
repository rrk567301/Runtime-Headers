@class NSString, NSImage, NSBundle, NSArray, NSNumber, TIMIconLabel;
@protocol InputSourceOwnerProtocol;

@interface InputSource : NSObject <TSMMessageProtocol> {
    struct __TSMInputSource { } *fSourceRef;
    NSString *fSourceClassString;
    NSImage *fIconImage;
    NSImage *fOriginalIconImage;
    NSImage *fAlternateIconImage;
    NSImage *fPaletteIconImage;
    int fMessageError;
    unsigned long long fSerialNumber;
}

@property (readonly, nonatomic) NSImage *floatingIndicatorIcon;
@property (readonly, weak) id<InputSourceOwnerProtocol> owner;
@property (retain) NSNumber *transliterationInputModeCache;
@property double lastTimeUsed;
@property (readonly) NSString *intendedLanguage;
@property (readonly) TIMIconLabel *primaryIconLabel;
@property (readonly) TIMIconLabel *secondaryIconLabel;
@property (readonly) NSImage *customIcon;
@property (readonly) unsigned int sourceClass;
@property (readonly) short script;
@property (readonly) short parentScript;
@property (readonly) NSString *displayName;
@property (readonly) NSString *hudDisplayName;
@property (readonly) NSString *abbreviatedHudDisplayName;
@property (readonly) NSString *menuTitleName;
@property (readonly) NSImage *icon;
@property (readonly) NSImage *originalIcon;
@property (readonly) NSImage *alternateIcon;
@property (readonly) NSImage *paletteIcon;
@property (readonly) NSString *bundleID;
@property (readonly) NSString *uniqueIdentifier;
@property (readonly) NSBundle *bundle;
@property (readonly) NSString *keyEquivalent;
@property (readonly) long long keyEquivalentModifiers;
@property (readonly, getter=isVisible) char visible;
@property (readonly, getter=isSelected) char selected;
@property (getter=isDisabled) char disabled;
@property (getter=isAvailable) char available;
@property (readonly) long long UIOrder;
@property (readonly) char isEnabled;
@property (readonly) NSArray *inputModes;
@property (readonly) InputSource *parent;

+ (void)_draw:(id)a0 toFitCapHeight:(char)a1 within:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 graphicsContext:(id)a3;
+ (id)currentInputSourceID;
+ (id)currentInputSourceOwner;
+ (id)disabledInputSourceArrayForOwner:(id)a0;
+ (id)iconWithImage:(id)a0 size:(struct CGSize { double x0; double x1; })a1 cornerRadius:(struct CGSize { double x0; double x1; })a2 padding:(struct CGSize { double x0; double x1; })a3 scale:(double)a4;
+ (id)iconWithPrimaryLabel:(id)a0 secondaryLabel:(id)a1 size:(struct CGSize { double x0; double x1; })a2 cornerRadius:(struct CGSize { double x0; double x1; })a3 padding:(struct CGSize { double x0; double x1; })a4 scale:(double)a5 backgroundColor:(id)a6 compositingOperation:(unsigned long long)a7;
+ (id)inputSourceArrayForOwner:(id)a0;
+ (id)inputSourceArrayWithCurrentSourceForOwner:(id)a0;
+ (id)inputSourceWithInputSourceID:(id)a0 andOwner:(id)a1;
+ (id)inputSourceWithTSMInputSourceRef:(struct __TSMInputSource { } *)a0 andOwner:(id)a1;
+ (id)sortedInputSourcesInHistoricalUsageOrderFor:(id)a0 inputSourceOwner:(id)a1;

- (void)dealloc;
- (id)description;
- (void).cxx_destruct;
- (id)bundle;
- (id)bundleID;
- (char)isEnabled;
- (char)isRemovable;
- (id)parent;
- (void)enable;
- (char)remove;
- (char)activate:(id)a0;
- (id)icon;
- (void)setSelected:(char)a0;
- (void)setVisible:(char)a0;
- (id)inputModes;
- (id)initWithInputSourceID:(id)a0 andOwner:(id)a1;
- (id)newIcon;
- (long long)UIOrder;
- (char)isCurrentSource;
- (id)newOriginalIcon;
- (long long)_timeLastUsedCompare:(id)a0;
- (id)abbreviatedHudDisplayName;
- (char)activateForcibly:(id)a0;
- (char)activateFromMenuItem:(id)a0;
- (id)alternateIcon;
- (struct __CFData { } *)copyMessageReceiver:(int)a0 withInfo:(id)a1;
- (void)getCachedDataFrom:(id)a0;
- (id)hudDisplayName;
- (id)iconImageFromTISImageProperty:(id)a0;
- (id)iconImageFromTISImageProperty:(id)a0 alignImage:(char)a1;
- (id)iconImageFromTSMProperty:(id)a0;
- (unsigned long long)indexInArray:(id)a0;
- (id)initWithTSMInputSourceRef:(struct __TSMInputSource { } *)a0 andOwner:(id)a1;
- (char)isEqualToSourceFromTSM:(struct __TSMInputSource { } *)a0;
- (char)isIMComponentEqualTo:(id)a0;
- (char)isKeyboardLayoutOrTransliterationInputMode;
- (char)isTransliterationInputMode;
- (id)menuTitleName;
- (id)newAlternateIcon;
- (id)newPaletteIcon;
- (id)originalIcon;
- (struct CGSize { double x0; double x1; })overriddenIconPadding:(struct CGSize { double x0; double x1; })a0;
- (id)paletteIcon;
- (short)parentScript;
- (void)replyReceiver:(int)a0 withInfo:(id)a1;
- (void)setKeyboardEquivalent:(id)a0 andModifiers:(long long)a1;
- (struct __TISInputSource { } *)tisInputSource;
- (id)titleForSortingDisabledMode;
- (struct __TSMInputSource { } *)tsmInputSource;
- (void)updateSelfWithDictionary:(id)a0;

@end
