@class NSEvent, NSString, CIMCandidateSorter, NSView, NSAttributedString, NSArray, IMKCandidates, CIMInputController, CIMCandidate, CIMPreferences, TIMecabraEnvironment, CIMMecabraContext;

@interface CIMBaseEngine : NSObject <CIMMecabraEngineProvider, IMKCandidateSelectionViewDelegate, TIMecabraEnvironmentProvider>

@property (retain, nonatomic) CIMCandidateSorter *candidateSorter;
@property (copy, nonatomic) NSString *characters;
@property (nonatomic) unsigned short charCode;
@property (readonly, nonatomic) NSAttributedString *currentInlineText;
@property (copy, nonatomic) NSString *currentSortingMethod;
@property (retain, nonatomic) NSEvent *event;
@property (readonly, nonatomic) NSView *informationView;
@property (nonatomic) char isShowingCandidates;
@property (nonatomic) unsigned short keyCode;
@property (nonatomic) unsigned long long modifierFlags;
@property (retain, nonatomic) NSArray *punctuationCandidates;
@property (nonatomic) unsigned long long scriptType;
@property (nonatomic) char showsPunctuationDescriptions;
@property (nonatomic) char usesDynamicPunctuation;
@property (nonatomic) unsigned long long inlineState;
@property (retain, nonatomic) CIMMecabraContext *mecabraContext;
@property (readonly, nonatomic) unsigned long long candidateWindowOrientation;
@property (readonly, nonatomic) NSString *inputString;
@property (readonly, nonatomic) char inputModeShowsDynamicCandidates;
@property (readonly, nonatomic) char hasMarkedText;
@property (readonly, nonatomic) unsigned long long predictionOptions;
@property (readonly, nonatomic) char showsHorizontalWindowInIncrementalSearchMode;
@property (nonatomic) char sortingMethodChangedBeforeCandidateCommitted;
@property (nonatomic) char shouldShowInlineTextAsSecondaryCandidate;
@property (nonatomic, getter=isShowingSubstitutionCandidatesInTouchBar) char showingSubstitutionCandidatesInTouchBar;
@property (readonly, nonatomic) char selectionShouldBeReflectedInTouchBar;
@property (readonly, nonatomic) NSString *selectedText;
@property (readonly, copy) NSString *preConvertedTextForDebugging;
@property (readonly, nonatomic) char shouldOptimizeLayoutForFixedSize;
@property (readonly, nonatomic) char forceNoIncrementalSearchPositioning;
@property (retain, nonatomic) NSArray *candidates;
@property (readonly, nonatomic) IMKCandidates *candidateController;
@property (readonly) id client;
@property char currentCandidatesHaveExtendedEmoji;
@property (copy, nonatomic) NSString *displayMethod;
@property (nonatomic) char facemarksCandidateWindowTriggered;
@property (readonly, nonatomic) NSString *helpAnchorName;
@property (weak, nonatomic) CIMInputController *inputController;
@property (copy) NSString *inputModeName;
@property (retain, nonatomic) CIMCandidate *savedCandidate;
@property (retain, nonatomic) CIMCandidate *previousCandidate;
@property char showsStepperForHorizontal;
@property char sendsSelectionKeyEventsToCandidateWindow;
@property char punctuationWindowTriggeredViaFacemarkInput;
@property (readonly, nonatomic) NSArray *IMKCharCodeRemappedKeyCodes;
@property (readonly, nonatomic) NSString *stringContext;
@property (nonatomic) struct _NSRange { unsigned long long location; unsigned long long length; } trackingRange;
@property (readonly, nonatomic) int mecabraInputMethodType;
@property (readonly, nonatomic) CIMPreferences *preferences;
@property (readonly, nonatomic, getter=isInlineEmpty) char inlineEmpty;
@property (nonatomic) char selectedCandidateChanged;
@property (readonly, nonatomic) char shouldShowSubstitutionCandidatesInTouchBar;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) TIMecabraEnvironment *mecabraEnvironment;

+ (id)fullwidthToHalfwidthPunctuationMapping;

- (void)dealloc;
- (void).cxx_destruct;
- (void)reset;
- (double)numberOfColumns;
- (void)insertText:(id)a0 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (double)numberOfRows;
- (unsigned long long)panelType;
- (void)setKeyboardLayout:(id)a0;
- (void)activateServer:(id)a0;
- (void)commitComposition:(id)a0;
- (void)deactivateServer:(id)a0;
- (void)setMarkedText:(id)a0 selectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)endSession;
- (id)defaultDisplayMethod;
- (void)didSelectSortingMode:(id)a0;
- (char)handleEvent:(id)a0 client:(id)a1;
- (id)localizedSortingMethods;
- (id)makeCandidateController;
- (id)makeScrubbingCandidateController;
- (char)shouldUpdateExistingCandidates;
- (id)sortingMethods;
- (id)textClient;
- (void)updateCandidateController:(id)a0;
- (id)environmentDebuggingInformation;
- (void)adjustEnvironmentOnAction:(long long)a0;
- (id)candidatesForInputString:(id)a0;
- (void)declareEndOfSentence;
- (id)mecabraEngine;
- (id)predictionCandidatesWithOptions:(unsigned long long)a0 maxNumberOfCandidates:(unsigned long long)a1;
- (void)updateDocumentContext;
- (char)isWithinOrAtEndOfTrackingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)localizedTitleForSortingMethod:(id)a0;
- (char)_isAsciiCharacter:(unsigned short)a0;
- (void)addPunctuationSurface:(id)a0;
- (Class)auxiliaryCandidateWindowClass;
- (id)candidateListDictionaryWithCandidates:(id)a0;
- (id)candidateListDictionaryWithSortingMethod:(id)a0;
- (id)candidateStringsMatchingInline;
- (char)candidateWindowCanBePositionedAboveTextFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 windowHeight:(double)a1 screen:(id)a2;
- (void)checkPreferenceGlobalSettings;
- (void)checkSettings:(id)a0 withClient:(id)a1;
- (void)checkUbiquity;
- (void)clearStatesOnTyping;
- (void)commitCurrentlySelectedCandidateOrInline;
- (void)commitInline;
- (void)commitInlineForSpecialWindow;
- (void)convertByApplyingTransform:(id)a0;
- (void)deferredHideCandidates;
- (id)dictionaryForScriptType:(unsigned long long)a0;
- (void)didHandleCandidateSelected:(id)a0 candidateController:(id)a1;
- (void)didHandleCandidateSelectionChanged:(id)a0 candidateController:(id)a1;
- (void)didHandleEvent:(id)a0 client:(id)a1;
- (void)didHandleSecondaryCandidateSelected:(id)a0;
- (void)didHandleSecondaryCandidateSelectionChanged:(id)a0;
- (void)doCommandBySelector:(SEL)a0 withUserInfo:(id)a1;
- (void)forgetSelectedWord;
- (id)fullwidthPunctuationFromCharacter:(unsigned short)a0;
- (char)handleKeyEvent;
- (void)hideCandidateWindow;
- (void)hideCandidateWindowDirectly;
- (char)incrementalSearchClientShouldHandleEvent:(id)a0;
- (id)initWithScriptType:(unsigned long long)a0 inputModeName:(id)a1 withInputController:(id)a2;
- (id)inputStringForCharacters:(id)a0;
- (id)internalNameForLocalizedSortingMethod:(id)a0;
- (char)isNavigationCharacter:(unsigned short)a0;
- (char)isSelectionCharacter:(unsigned short)a0;
- (char)isSelectionKey;
- (char)isUsingSortingBar;
- (char)keyCodeIsNavigation:(unsigned short)a0;
- (id)leftContextWithSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void *)mecabraCandidateFromCandidate:(id)a0;
- (void)mouseClicked;
- (double)numberOfVisibleCandidatesAtOutsetForOrientation:(unsigned long long)a0;
- (id)rightContextWithSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)selectionKeyValueForKeyCode:(short)a0;
- (void)showAssociatedWords:(id)a0;
- (void)showCandidateWindow;
- (void)showCandidateWindowWithSelectedIndex:(long long)a0 sortingMethod:(id)a1;
- (void)showPunctationCandidates;
- (void)showSubstitutionCandidatesForSelectedTextWithOnScreenWindow;
- (char)supportsSubstitutionCandidates;
- (id)textFromCursorPosition:(long long)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)textScreenWithOrigin:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textStartRect;
- (void)updateInline;
- (void)updatePredictionCandidates;
- (void)updatePredictionCandidatesOnNextRunLoop;
- (void)updateTextReplacementEntries;
- (void)willHandleEvent:(id)a0 client:(id)a1;

@end
