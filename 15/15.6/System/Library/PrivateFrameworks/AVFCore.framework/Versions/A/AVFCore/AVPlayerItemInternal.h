@class NSDictionary, AVAudioMix, AVAsset, AVCustomVideoCompositorSession, NSMutableArray, NSString, AVVideoComposition, AVMediaSelection, NSError, NSArray, NSMutableDictionary, NSPointerArray, AVPlayerPlaybackCoordinator, AVWeakReference, AVPlayerItemInterstitialEventCollector, NSObject, NSData, AVPlayerItem, AVPlayerConnection, AVPlayerItemIntegratedTimeline, NSURL, NSDate;
@protocol AVLoggingIdentifier, AVPlayerItemDelegate, NSCopying, OS_dispatch_queue, NSObject;

@interface AVPlayerItemInternal : NSObject {
    NSURL *URL;
    NSObject<OS_dispatch_queue> *ivarAccessQueue;
    AVWeakReference *weakReference;
    NSObject<OS_dispatch_queue> *figConfigurationQueue;
    NSObject<OS_dispatch_queue> *figPlaybackItemAccessorQueue;
    NSObject<OS_dispatch_queue> *figPlaybackItemSetterQueue;
    NSObject<OS_dispatch_queue> *seekQueue;
    struct OpaqueFigSimpleMutex { } *seekIDMutex;
    struct OpaqueVTPixelBufferAttributesMediator { } *pixelBufferAttributeMediator;
    struct OpaqueCMTimebase { } *proxyUnfoldedTimebase;
    struct OpaqueCMTimebase { } *proxyFoldedTimebase;
    NSArray *automaticallyLoadedAssetKeys;
    char wasInitializedWithURL;
    AVAsset *asset;
    struct OpaqueFigPlaybackItem { } *figPlaybackItem;
    NSObject<OS_dispatch_queue> *stateDispatchQueue;
    NSArray *cachedTracks;
    NSArray *tracks;
    NSPointerArray *weakSyncLayers;
    NSArray *itemOutputs;
    NSMutableArray *itemVideoOutputs;
    NSMutableDictionary *itemLegibleOutputsForKeys;
    NSMutableDictionary *itemMetadataOutputsForKeys;
    NSMutableDictionary *itemRenderedLegibleOutputsForKeys;
    char suppressesVideoLayers;
    struct OpaqueCMTimebase { } *foldedTimebase;
    struct OpaqueCMTimebase { } *unfoldedFigTimebase;
    char didBecomeReadyForInspectionOfTracks;
    char didBecomeReadyForInspectionOfPresentationSize;
    char didBecomeReadyForInspectionOfDuration;
    char figAssetDidBecomeReadyForInspectionOfMediaSelectionOptions;
    char didBecomeReadyForInspectionOfRecommendedTimeOffsetFromLive;
    AVAsset *assetWithFigPlaybackItem;
    NSArray *trackIDsForAssetWithFigPlaybackItem;
    char needTimedMetadataNotification;
    char didBecomeReadyForBasicInspection;
    id<AVPlayerItemDelegate> delegate;
    AVAudioMix *audioMix;
    long long status;
    NSError *error;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } forwardPlaybackEndTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } reversePlaybackEndTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } timeToPauseBuffering;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } timeToPausePlayback;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } advanceTimeForOverlappedPlayback;
    char advanceTimeForOverlappedPlaybackWasSet;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } overlappedPlaybackEndTime;
    char overlappedPlaybackEndTimeWasSet;
    char snapTimeToPausePlayback;
    char preservesTimeOffsetFromLive;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } configuredTimeOffsetFromLive;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } recommendedTimeOffsetFromLive;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } duration;
    char seekingWaitsForVideoCompositionRendering;
    NSArray *textStyleRules;
    NSArray *textHighlightArray;
    struct __CFString { } *initialFigTimePitchAlgorithm;
    char canUseNetworkResourcesForLiveStreamingWhilePaused;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } maximumForwardBufferDuration;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } maximumTrailingBufferDuration;
    double preferredPeakBitRate;
    double preferredPeakBitRateForExpensiveNetworks;
    int startsOnFirstEligibleVariant;
    NSArray *itemCollectors;
    NSMutableArray *itemMetadataCollectors;
    AVPlayerItemInterstitialEventCollector *interstitialEventCollector;
    unsigned int RTCReportingFlags;
    NSString *reportingCategory;
    NSMutableDictionary *reportingValues;
    NSDictionary *gaplessInfo;
    float soundCheckVolumeNormalization;
    float volumeAdjustment;
    NSDictionary *loudnessInfo;
    struct opaqueMTAudioProcessingTap { } *audioProcessingTap;
    char adjustTargetLevelWasSet;
    float adjustTargetLevel;
    char adjustCompressionProfileWasSet;
    unsigned int adjustCompressionProfile;
    unsigned long long restrictions;
    char shouldOptimizeForExclusivePlayback;
    char reversesMoreVideoFramesInMemory;
    char reversesMoreVideoFramesInMemoryWasSet;
    char aggressivelyCachesVideoFrames;
    char aggressivelyCachesVideoFramesWasSet;
    char decodesAllFramesDuringOrdinaryPlayback;
    char decodesAllFramesDuringOrdinaryPlaybackWasSet;
    char initialContinuesPlayingDuringPrerollForSeek;
    char initialContinuesPlayingDuringPrerollForRateChange;
    char usesIFrameOnlyPlaybackForHighRateScaledEditsWasSet;
    char usesIFrameOnlyPlaybackForHighRateScaledEdits;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } minimumIntervalForIFrameOnlyPlayback;
    char minimumIntervalForIFrameOnlyPlaybackWasSet;
    float speedThresholdForIFrameOnlyPlayback;
    char speedThresholdForIFrameOnlyPlaybackWasSet;
    char refreshesClosedCaptionsImmediatelyAfterSeeking;
    NSDate *initialDate;
    NSDate *initialEstimatedDate;
    char requiresAccessLog;
    char suppressesAudioOnlyVariants;
    char prefersOfflinePlayableVariants;
    char autoSwitchAtmosStreamVariants;
    unsigned long long variantPreferences;
    double preferredMaximumAudioSampleRate;
    NSArray *imageQueueInterpolationCurve;
    char imageQueueInterpolationCurveWasSet;
    char blendsVideoFrames;
    char blendsVideoFramesWasSet;
    char appliesPerFrameHDRDisplayMetadata;
    char appliesPerFrameHDRDisplayMetadataWasSet;
    NSString *videoApertureMode;
    char usesMinimalLatencyForVideoCompositionRendering;
    char initialAlwaysMonitorsPlayability;
    long long initialPlaybackLikelyToKeepUpTrigger;
    char savesDownloadedDataToDiskWhenDone;
    char savesDownloadedDataToDiskWhenDoneWasSet;
    char allowProgressiveSwitchUp;
    char allowProgressiveStartup;
    char allowProgressiveResume;
    char isFigItemConfigured;
    struct CGSize { double width; double height; } IFramePrefetchTargetDimensions;
    id<NSObject, NSCopying> AVKitData;
    struct CGSize { double width; double height; } preferredMaximumResolution;
    struct CGSize { double width; double height; } preferredMaximumResolutionForExpensiveNetworks;
    struct CGSize { double width; double height; } preferredMinimumResolution;
    char canPlayFastForward;
    char canPlayFastReverse;
    char canPlayReverse;
    char canPlaySlowReverse;
    char canPlaySlowForward;
    char canStepForward;
    char canStepBackward;
    struct CGSize { double width; double height; } presentationSize;
    char playbackBufferEmpty;
    char playbackBufferFull;
    char playbackLikelyToKeepUp;
    char restrictsAutomaticMediaSelectionToAvailableOfflineOptions;
    char nonForcedSubtitlesEnabled;
    char hasEnabledVideo;
    char hasVideo;
    char hasEnabledAudio;
    char hasEnqueuedVideoFrame;
    char externalProtectionRequested;
    char automaticallyHandlesInterstitialEvents;
    AVPlayerItemIntegratedTimeline *integratedTimeline;
    NSArray *seekableTimeRanges;
    double seekableTimeRangesLastModifiedTime;
    NSArray *loadedTimeRanges;
    struct { struct { long long value; int timescale; unsigned int flags; long long epoch; } start; struct { long long value; int timescale; unsigned int flags; long long epoch; } duration; } loopTimeRange;
    id<AVLoggingIdentifier> loggingIdentifier;
    NSString *uniqueInstanceIdentifier;
    AVMediaSelection *currentMediaSelection;
    NSString *videoEnhancementMode;
    char isRenderingSpatialAudio;
    AVPlayerPlaybackCoordinator *playerPlaybackCoordinator;
    id coordinatedPlaybackIdentifierChangeNotificationToken;
    char timeJumpedNotificationIncludesExtendedDiagnosticPayload;
    char needToSeekAfterCreatingFigPlaybackItem;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } initialTime;
    char isInitialTimeDefault;
    unsigned int initialSetTimeFlags;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } initialMinSnapTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } initialMaxSnapTime;
    unsigned int nextSeekIDToGenerate;
    int pendingSeekID;
    id /* block */ seekCompletionHandler;
    AVPlayerItem *previousItem;
    AVPlayerItem *nextItem;
    AVPlayerConnection *playerConnection;
    char initialWillNeverSeekBackwardsHint;
    AVVideoComposition *videoComposition;
    AVWeakReference *clientsOriginalVideoComposition;
    AVCustomVideoCompositorSession *customVideoCompositorSession;
    void *figVideoCompositor;
    AVPlayerItem *interstitialTemplate;
    NSString *interstitialEventID;
    NSString *coordinationIdentifier;
    NSString *integratedSessionIdentifier;
    char participatesInCoordinatedPlayback;
    int eqPreset;
    long long initialVariantIndex;
    NSString *currentStableVariantID;
    NSMutableDictionary *mediaOptionsSelectedByClient;
    NSArray *timedMetadata;
    NSMutableArray *handlersToCallWhenReadyForEnqueueing;
    char haveInitialSamples;
    char haveCPEProtector;
    char didInformObserversAboutAvailabilityOfTracks;
    char didFireKVOForAssetForNonStreamingItem;
    AVAudioMix *mostRecentlyAppliedAudioMix;
    char audioSpatializationAllowed;
    char audioSpatializationAllowedWasSet;
    unsigned long long allowedAudioSpatializationFormats;
    char allowedAudioSpatializationFormatsWasSet;
    AVWeakReference *playerReference;
    char didSetAssetToAssetWithFigPlaybackItem;
    struct OpaqueFigCPEProtector { } *figCPEProtector;
    long long lastContentAuthorizationStatus;
    double delayPreparingItemDuration;
    NSMutableArray *waitingMetricEventTimelineCompletionHandlers;
    struct OpaqueFigMetricEventTimeline { } *eventTimeline;
    struct { NSData *data; unsigned long long count; char wasSet; } speedRamp;
}

@end
