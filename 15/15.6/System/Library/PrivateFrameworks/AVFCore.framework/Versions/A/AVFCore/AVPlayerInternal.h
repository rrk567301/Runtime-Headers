@class AVPixelBufferAttributeMediator, NSMutableDictionary, AVApplicationStateMonitor, AVPlayerVideoOutput, NSObject, NSDictionary, AVPlayerMediaSelectionCriteria, AVOutputContext, NSMutableArray, AVPlayerItem, AVQueuePlayer, NSString, AVPlayerPlaybackCoordinator, NSMutableSet, AVPlayerTaggedBufferOutput, NSArray, NSHashTable, AVWeakReference, NSError, AVPlayerRateState;
@protocol OS_dispatch_queue, AVBlockScheduler, AVLoggingIdentifier;

@interface AVPlayerInternal : NSObject {
    char fullyInitializedAndNotDeallocating;
    AVWeakReference *weakReference;
    AVPixelBufferAttributeMediator *pixelBufferAttributeMediator;
    NSObject<OS_dispatch_queue> *stateDispatchQueue;
    NSObject<OS_dispatch_queue> *figConfigurationQueue;
    NSObject<OS_dispatch_queue> *layerInteractionQueue;
    NSObject<OS_dispatch_queue> *ivarAccessQueue;
    NSObject<OS_dispatch_queue> *currentItemPropertyUpdateQueue;
    NSObject<OS_dispatch_queue> *layersQ;
    struct OpaqueCMTimebase { } *proxyTimebase;
    char logPerformanceData;
    struct OpaqueFigSimpleMutex { } *prerollIDMutex;
    NSObject<OS_dispatch_queue> *configurationQueue;
    id layerForegroundingChangeToken;
    id<AVBlockScheduler> KVOChangeSerializer;
    long long status;
    NSError *error;
    AVPlayerItem *currentItem;
    AVPlayerItem *lastItem;
    NSMutableSet *items;
    NSArray *queueModifications;
    NSMutableDictionary *pendingFigPlayerProperties;
    AVOutputContext *outputContext;
    char IOwnTheFigPlayer;
    AVQueuePlayer *interstitialPlayer;
    AVWeakReference *weakReferenceToPrimaryPlayer;
    struct OpaqueFigPlayerInterstitialCoordinator { } *interstitialEventCoordinator;
    long long externalPlaybackInterstitialSchedulingStrategy;
    NSString *playerName;
    long long audiovisualBackgroundPlaybackPolicy;
    NSMutableArray *handlersToCallWhenReadyToPlay;
    char shouldReduceResourceUsage;
    long long resourceConservationLevelWhilePaused;
    NSString *playerRole;
    NSString *externalPlaybackVideoGravity;
    long long actionAtItemEnd;
    float volume;
    float userVolume;
    float minRateForAudioPlayback;
    float maxRateForAudioPlayback;
    char autoSwitchStreamVariants;
    char preparesItemsForPlaybackAsynchronously;
    char allowsOutOfBandTextTrackRendering;
    char muted;
    char closedCaptionDisplayEnabled;
    char appliesMediaSelectionCriteriaAutomatically;
    char limitsBandwidthForCellularAccess;
    char usesAudioOnlyModeForExternalPlayback;
    char allowsPixelBufferPoolSharing;
    char disallowsAMRAudio;
    char disallowsHardwareAcceleratedVideoDecoder;
    char layerDestinationIsTVOut;
    char preventsDisplaySleepDuringVideoPlayback;
    char preventsAutomaticBackgroundingDuringVideoPlayback;
    char disallowsVideoLayerDisplayCompositing;
    char allowsExternalPlayback;
    char usesExternalPlaybackWhileExternalScreenIsActive;
    char supportsAdvanceTimeForOverlappedPlayback;
    char supportsSpeedRamps;
    NSString *captionPipelineStrategy;
    NSString *audioOutputDeviceUniqueID;
    NSString *clientName;
    NSString *STSLabel;
    NSString *multichannelAudioStrategy;
    long long clientPriority;
    char PIPModePossible;
    char isDisplayingClosedCaptions;
    char externalPlaybackActive;
    char airPlayVideoActive;
    char bufferedAirPlayActive;
    char isConnectedToPhysicalSecondScreen;
    char outputObscuredDueToInsufficientExternalProtection;
    long long externalProtectionStatus;
    NSString *ancillaryPerformanceInformationForDisplay;
    AVPlayerRateState *rateState;
    int rateChangeIdentifier;
    float defaultRate;
    struct CGSize { double width; double height; } currentItemPresentationSize;
    char currentItemNonForcedSubtitlesEnabled;
    unsigned long long preferredVideoDecoderGPURegistryID;
    char disallowsAutoPauseOnRouteRemovalIfNoAudio;
    char ensuresActiveAudioSessionWhenStartingPlayback;
    AVApplicationStateMonitor *applicationStateMonitor;
    char preservesAudioSessionSampleRate;
    char silencesOtherPlaybackDuringPIP;
    char prefersPlayingSilentlyWhenConflictingWithOtherPlayback;
    char suppressesAudioRendering;
    char startupSyncIgnoresAudioDeviceLatency;
    char isInterstitialPlayer;
    NSString *videoRangeOverride;
    NSArray *videoTargets;
    struct __CFDictionary { } *videoTargetsForInterstitialPlayer;
    char shouldWaitForVideoTarget;
    AVPlayerPlaybackCoordinator *playbackCoordinator;
    char clientRequestedPlaybackCoordinator;
    NSString *backgroundPIPAuthorizationToken;
    char rateDidChangeNotificationIncludesExtendedDiagnosticPayload;
    id<AVLoggingIdentifier> loggingIdentifier;
    NSDictionary *cachedFigMediaSelectionCriteriaProperty;
    AVPlayerVideoOutput *videoOutput;
    AVPlayerTaggedBufferOutput *taggedBufferOutput;
    NSMutableArray *videoLayers;
    NSMutableArray *subtitleLayers;
    NSMutableArray *closedCaptionLayers;
    NSHashTable *avPlayerLayers;
    NSHashTable *playerCaptionLayers;
    int nextPrerollIDToGenerate;
    int pendingPrerollID;
    id /* block */ prerollCompletionHandler;
    id currentItemSuppressesVideoLayersNotificationToken;
    id currentItemPreferredPixelBufferAttributesNotificationToken;
    struct OpaqueFigPlayer { } *figPlayer;
    struct OpaqueFigPlaybackItem { } *figPlaybackItemToIdentifyNextCurrentItem;
    char needsToCreateFigPlayer;
    char allowsLegibleFallbackForAllAudibleMediaSelections;
    AVPlayerMediaSelectionCriteria *cachedFigLegibleFallbackMediaSelectionCriteriaProperty;
    NSArray *itemsInFigPlayQueue;
    NSArray *expectedAssetTypes;
    char reevaluateBackgroundPlayback;
    char hadAssociatedOnscreenPlayerLayerWhenSuspended;
    char videoLayersAreAttached;
    struct OpaqueCMClock { } *figSourceClock;
    NSString *captionRenderingStrategy;
    NSArray *displaysUsedForPlayback;
}

@end
