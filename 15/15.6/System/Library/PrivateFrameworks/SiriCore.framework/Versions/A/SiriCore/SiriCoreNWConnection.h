@class SiriCoreConnectionMetrics, NSString, NSURL, NSArray, NSError, SAConnectionPolicyRoute, SAConnectionPolicy, NSObject, SiriCoreConnectionType;
@protocol SiriCoreConnectionProviderDelegate, OS_nw_content_context, OS_nw_endpoint, OS_dispatch_source, OS_dispatch_queue, OS_nw_connection;

@interface SiriCoreNWConnection : NSObject <SiriCoreConnectionProvider> {
    NSObject<OS_dispatch_queue> *_queue;
    id<SiriCoreConnectionProviderDelegate> _delegate;
    NSURL *_url;
    NSString *_resolvedHost;
    NSObject<OS_nw_connection> *_connection;
    NSObject<OS_nw_endpoint> *_endpoint;
    NSObject<OS_nw_content_context> *_content_context;
    SAConnectionPolicyRoute *_route;
    SAConnectionPolicy *_policy;
    char _prefersWWAN;
    char _connectByPOPEnabled;
    char _isMPTCP;
    char _isCanceled;
    char _isEstablishing;
    char _isReady;
    char _usingTLS;
    NSString *_connectionId;
    SiriCoreConnectionType *_connectionType;
    int _interfaceIndex;
    id /* block */ _openCompletion;
    NSObject<OS_dispatch_source> *_openTimer;
    NSObject<OS_dispatch_source> *_openSlowTimer;
    NSObject<OS_dispatch_source> *_staleConnectionTimer;
    unsigned long long _readWriteCounter;
    NSObject<OS_dispatch_source> *_connectionUnviableTimer;
    unsigned long long _betterPathAvailableNotificationMachTime;
    NSArray *_attemptedEndpoints;
    char _isViable;
    SiriCoreConnectionMetrics *_metrics;
    double _keepaliveIdleTime;
    double _keepaliveIntervalTime;
    double _retransmissionBasedConnectionDropTime;
    unsigned long long _keepaliveUnackedCount;
    double _staleConnectionInterval;
    NSError *_mostRecentErrorFromNWConnection;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)getMetricsContext:(id /* block */)a0;

- (void)dealloc;
- (void).cxx_destruct;
- (void)close;
- (id)delegate;
- (void)setDelegate:(id)a0;
- (id)connectionType;
- (char)isReady;
- (id)_queue;
- (id)_url;
- (id)initWithQueue:(id)a0;
- (char)isMultipath;
- (char)isCanceled;
- (void)readData:(id /* block */)a0;
- (void)_configureConnection:(id)a0;
- (void)_closeWithError:(id)a0;
- (void)_invokeOpenCompletionWithError:(id)a0;
- (void)setPrefersWWAN:(char)a0;
- (void)_setupOpenTimer;
- (void)setPolicyRoute:(id)a0;
- (void)_addCorrespondingMetricsFromConnection:(id)a0 inState:(int)a1;
- (void)_cancelConnectionUnviableTimer;
- (void)_cancelOpenTimer;
- (void)_cancelSlowOpenTimer;
- (void)_cancelStaleConnectionTimer;
- (char)_connectByPOPMethod;
- (id)_connectionId;
- (id)_getAttemptedEndpoints;
- (void)_getNWConnectionWithInitialData:(id)a0 completion:(id /* block */)a1;
- (void)_receivedBetterRouteNotification:(char)a0;
- (void)_receivedViabilityChangeNotification:(char)a0;
- (id)_sendBufferBytesRemaining:(id)a0;
- (id)_setParametersForHost:(const char *)a0 useTLS:(char)a1 initialPayload:(id)a2;
- (void)_setupOpenSlowTimer;
- (void)_setupStaleConnectionTimer;
- (void)_startConnectionUnviableTimer;
- (id)analysisInfo;
- (char)hasActiveConnection;
- (id)headerDataWithForceReconnect:(char)a0;
- (char)isEstablishing;
- (char)isPeerConnectionError:(id)a0;
- (char)isPeerNotNearbyError:(id)a0;
- (void)openConnectionForURL:(id)a0 withConnectionId:(id)a1 initialPayload:(id)a2 completion:(id /* block */)a3;
- (char)providerStatsIndicatePoorLinkQuality;
- (id)resolvedHost;
- (void)setConnectByPOPMethod:(char)a0;
- (void)setKeepAlive:(double)a0 withInterval:(double)a1 withCount:(unsigned long long)a2;
- (void)setProviderConnectionPolicy:(id)a0;
- (void)setRetransmitConnectionDropTime:(double)a0;
- (void)setStaleInterval:(double)a0;
- (char)shouldFallbackFromError:(id)a0;
- (char)shouldFallbackQuickly;
- (char)supportsInitialPayload;
- (void)updateConnectionMetrics:(id)a0 completion:(id /* block */)a1;
- (void)writeData:(id)a0 completion:(id /* block */)a1;

@end
