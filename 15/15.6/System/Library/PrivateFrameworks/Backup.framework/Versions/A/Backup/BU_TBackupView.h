@class BU_TTimelineOverlay, CAMediaTimingFunction, NSButton, BU_TMFloatParameterController, NSMutableArray, BU_TBUStarfieldShadowLayer, BU_DPRemoteDesktopPicture, CALayer, BU_TMTimeline, CABackdropLayer, NSArray, BU_DateText, BU_ButtonController;

@interface BU_TBackupView : NSView {
    CABackdropLayer *fBackdropLayer;
    CALayer *fBaseLayer;
    CALayer *fBackgroundLayer;
    CALayer *fDesktopPictureLayer;
    CALayer *fDesktopTintLayer;
    BOOL fFinderIsClient;
    BOOL fBackgroundAnimation;
    NSMutableArray *fSnapshotLayers;
    NSMutableArray *fRestoreLayers;
    struct vector<CGRect, std::allocator<CGRect>> { struct CGRect *__begin_; struct CGRect *__end_; struct __compressed_pair<CGRect *, std::allocator<CGRect>> { struct CGRect *__value_; } __end_cap_; } fRestoreImageBounds;
    CALayer *fWindowLayer;
    CALayer *fRevealLayer;
    CALayer *fControlsLayer;
    CALayer *fHotSpotLayer;
    unsigned long long fSnapshotsToShow;
    unsigned long long fTopSnapshot;
    long long fRequestedSnapshot;
    long long fWarpPosition;
    struct vector<CGRect, std::allocator<CGRect>> { struct CGRect *__begin_; struct CGRect *__end_; struct __compressed_pair<CGRect *, std::allocator<CGRect>> { struct CGRect *__value_; } __end_cap_; } fScaledBounds;
    struct CGPoint { double x; double y; } fStartPosition;
    double fHorizon;
    BOOL fCollapsed;
    BOOL fExiting;
    double fLastCompletion;
    BOOL fFadeWindowLayer;
    struct CGPoint { double x; double y; } fLiveWindowPosition;
    double fBackgroundAnimationStartY;
    double fBackgroundAnimationEndY;
    void *fController;
    CAMediaTimingFunction *fEaseInEaseOut;
    BOOL fRestorableLocation;
    BU_TMTimeline *fLastHitControl;
    BU_TMTimeline *fTimelineControl;
    BU_TTimelineOverlay *fTimelineOverlay;
    BU_ButtonController *fButtonController;
    NSButton *fCancelButton;
    NSButton *fRestoreButton;
    NSButton *fPreviousButton;
    NSButton *fNextButton;
    BU_DateText *fDateText;
    struct OpaqueEventHandlerRef { } *fEventMonitorHandler;
    BU_TMFloatParameterController *fStarsZOffset;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _pixelBounds;
    BU_TBUStarfieldShadowLayer *_shadowLayer;
    BU_DPRemoteDesktopPicture *fRemoteDesktopPicture;
    NSArray *fDesktopFilters;
}

@property (nonatomic) unsigned long long isAnimating;

+ (id)createBackupViewWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inWindow:(id)a1;
+ (double)fadeBackAlphaForSnapshotIndex:(unsigned long long)a0 numberShown:(unsigned long long)a1;
+ (void)initInterpolators;
+ (struct CGImage { } *)invalidSnapshotImageWithSize:(struct CGSize { double x0; double x1; })a0 imageScalingContext:(struct CGContext { } *)a1 drawContext:(struct CGContext { } *)a2 needsLoad:(BOOL)a3;

- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (char)acceptsFirstResponder;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (char)accessibilityIsIgnored;
- (void)keyDown:(id)a0;
- (void)mouseDown:(id)a0;
- (void)mouseDragged:(id)a0;
- (void)mouseMoved:(id)a0;
- (void)mouseUp:(id)a0;
- (void)scrollWheel:(id)a0;
- (void)setController:(void *)a0;
- (void)viewDidMoveToWindow;
- (void)configureLayer:(id)a0 forInvalidState:(BOOL)a1;
- (void)hideTopSnapshot;
- (void)positionButtonsForWindowBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)restorePressed:(id)a0;
- (void)showTopSnapshot;
- (char)acceptsFirstMouse;
- (void)activateTopSnapshot;
- (void)addLayer:(struct CGImage { } *)a0 forTarget:(const void *)a1;
- (void)animationComplete;
- (id)animationParametersForLayer:(id)a0 atIndex:(long long)a1;
- (id)animationParametersForLayer:(id)a0 fromIndex:(long long)a1 toIndex:(long long)a2;
- (double)backgroundOpacityForSnapshotIndex:(unsigned long long)a0;
- (struct CGPoint { double x0; double x1; })bigArrowsLocationForWindowBounds:(const struct CGPoint { double x0; double x1; } *)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caRendererBounds;
- (double)calculateExposureForSnapshotIndex:(unsigned long long)a0;
- (double)calculateInputIntensityForSnapshotIndex:(unsigned long long)a0;
- (void)calculateLayerBounds:(unsigned long long)a0 baseBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 withSunRaised:(BOOL)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })calculateLayerBoundsAtNormalizedZ:(double)a0 withBaseBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 withTargetY:(double)a2;
- (double)calculateNextStartTime:(int)a0;
- (double)calculateNextStartTime:(int)a0 withDivisor:(double)a1;
- (struct CGColor { } *)calculateShadingFilterColorForSnapshotIndex:(unsigned long long)a0;
- (void)cancelPressed:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cgScaledViewBounds;
- (void)collapseOrExpand:(BOOL)a0 startTime:(double)a1;
- (struct CGPoint { double x0; double x1; })convertPointToControlsPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointToViewPoint:(struct CGPoint { double x0; double x1; })a0;
- (int)currentSnapshotIndex;
- (id)desktopPictureLayerForDisplay:(int)a0;
- (double)divisorFor:(unsigned long long)a0;
- (void)finishAllAnimations;
- (void)finishResizingWindow:(const struct CGPoint { double x0; double x1; } *)a0;
- (void)flushFrameToDisplay;
- (void)gotoSnapshot:(unsigned long long)a0;
- (void)gotoTarget:(const void *)a0;
- (void)hideTopSnapshotComplete:(id)a0;
- (void)hideTopSnapshotNow;
- (void)initAnimationConstants;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 window:(id)a1;
- (void)invalidateSnapshotImageFor:(id)a0;
- (BOOL)isFinderClient;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layerBoundsAtPosition:(long long)a0;
- (id)layerForSnapshot:(const void *)a0;
- (id)layerForUrl:(const void *)a0;
- (struct TBackupLayerList { id *x0; id *x1; struct __compressed_pair<BU_TBackupLayer *__strong *, std::allocator<BU_TBackupLayer *>> { id *x0; } x2; })layersForTarget:(const void *)a0;
- (id)newAnimationCompleteDelegate:(int)a0 forKey:(id)a1;
- (id)newAnimationCompleteDelegate:(int)a0 forKey:(id)a1 withLayer:(id)a2;
- (void)nextPressed:(id)a0;
- (double)nextStartTime;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })pixelBounds;
- (void)prepareToHide:(BOOL)a0 windowCenterPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)prepareToReveal:(BOOL)a0;
- (void)prepareToRevealInAnimationComplete:(id)a0;
- (void)previousPressed:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })projectedBoundsAtZPosition:(double)a0 forCameraPosition:(struct CGPoint { double x0; double x1; })a1 withUnscaledBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)promoteDemoteSnapshot:(id)a0;
- (void)promoteDemoteSnapshotAnimationComplete:(id)a0 withNewTopSnapshot:(id)a1;
- (void)removeAllSnapshotLayers;
- (void)requestSnapshotImageFor:(id)a0;
- (void)restoreAllPressed:(id)a0;
- (void)retargetLayer:(unsigned long long)a0 forTarget:(const void *)a1;
- (void)revealInAnimationComplete:(id)a0;
- (void)revealOutAnimationComplete:(id)a0;
- (void)selectTarget:(const void *)a0;
- (void)setIsFinderClient:(BOOL)a0;
- (void)setMaxLayerCount:(unsigned long long)a0 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)setRestoreAnimationInfo:(id)a0;
- (void)setRevealImages:(struct CGPoint { double x0; double x1; })a0 window:(struct CGImage { } *)a1 reveal:(struct CGImage { } *)a2;
- (void)setShadowInfo:(struct CGImage { } *)a0 shadowImageBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 contentImageBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)setSunAnimationStart:(unsigned long long)a0;
- (void)setTargets:(const void *)a0;
- (void)setTopSnapshotOpacity:(double)a0;
- (void)setupEventMonitor;
- (void)showHideRevealAnimation:(BOOL)a0;
- (void)showHideRevealAnimationCompleted:(BOOL)a0;
- (void)showRestoreAnimationStartingAt:(double)a0 withDuration:(double)a1;
- (void)showRestoreLayersNow;
- (void)showRevealLayerNow;
- (void)showTopSnapshotComplete:(id)a0;
- (void)showTopSnapshotNow;
- (void)shutDownEventMonitor;
- (void)snapshotsChanged:(BOOL)a0 forceRefresh:(BOOL)a1;
- (void)spacingCurveChanged;
- (void)stabilizeForExitWithNowImage:(struct CGImage { } *)a0;
- (void)startResizingWindow;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })topBounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })topScreenLocalBounds;
- (void)triggerSnapshotWarp:(unsigned long long)a0 duration:(double)a1 warpForward:(BOOL)a2;
- (void)triggerSunriseAnimationFromY:(double)a0 toY:(double)a1 duration:(double)a2;
- (void)updateAnimationEnd:(unsigned long long)a0;
- (void)updateButtonsEnableStateForSelection:(unsigned long long)a0;
- (void)updateButtonsEnableStateForTarget:(const void *)a0;
- (void)updateButtonsEnableStateForTargetIndex:(long long)a0;
- (void)updateLayers:(const void *)a0 forImage:(struct CGImage { } *)a1;
- (void)updateLayers:(struct CGImage { } *)a0 forTarget:(const void *)a1;
- (void)updateProxyImage:(struct CGImage { } *)a0 requestNewImages:(BOOL)a1;
- (void)validateSnapshot:(const void *)a0 forTargetURL:(const void *)a1 forTarget:(struct TFENode { struct OpaqueNodeRef *x0; })a2;
- (void)validateTargetForURL:(const void *)a0 withRevisionID:(void *)a1;

@end
