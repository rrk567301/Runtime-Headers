@class NSMutableDictionary, CSPhoneCallStateMonitor, CSAudioCircularBuffer, NSObject, CSOSTransaction, CSAudioRecordDeviceIndicator, CSADPPreventStandbyAssertion, NSMutableArray, CSAudioRecorder, CSStateCapture, CSAudioTimeConverter, NSString, CSAudioRecordContext, NSHashTable, CSMicUsageReporter, CSAudioPreprocessor, NSUUID;
@protocol CSAudioAlertProvidingDelegate, CSAudioSessionProvidingDelegate, OS_dispatch_group, OS_dispatch_source, OS_dispatch_queue, CSAudioProviderDelegate;

@interface CSAudioProvider : NSObject <CSAudioRecorderDelegate, CSAudioServerCrashMonitorDelegate, CSAudioPreprocessorDelegate, CSAudioStreamProviding, CSAudioSessionProviding, CSAudioMetricProviding, CSAudioAlertProviding, CSAudioMeterProviding, CSTriggerInfoProviding>

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *recordQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *loggingQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *streamHandleQueue;
@property (retain, nonatomic) CSAudioRecorder *audioRecorder;
@property (nonatomic) unsigned long long streamState;
@property (retain, nonatomic) NSHashTable *startPendingStreams;
@property (retain, nonatomic) NSHashTable *startPendingOnStoppingStreams;
@property (retain, nonatomic) NSHashTable *alertPlaybackFinishWaitingStreams;
@property (retain, nonatomic) NSHashTable *streams;
@property (retain, nonatomic) NSHashTable *stopPendingStreams;
@property (retain, nonatomic) NSMutableArray *pendingStartCompletions;
@property (retain, nonatomic) NSMutableArray *alertPlaybackFinishWaitingCompletions;
@property (retain, nonatomic) NSMutableArray *pendingStopCompletions;
@property (retain, nonatomic) NSMutableDictionary *startPendingOnStoppingStreamToCompletionDict;
@property (weak, nonatomic) id<CSAudioProviderDelegate> providerDelegate;
@property (weak, nonatomic) id<CSAudioSessionProvidingDelegate> sessionDelegate;
@property (retain, nonatomic) NSMutableArray *streamHolders;
@property (retain, nonatomic) NSHashTable *historicalBufferRequestStreams;
@property (retain, nonatomic) CSAudioCircularBuffer *circularBuffer;
@property (weak, nonatomic) id<CSAudioAlertProvidingDelegate> alertDelegate;
@property (retain, nonatomic) CSAudioRecordContext *lastAudioRecorderContext;
@property (nonatomic) char audioSystemRecovering;
@property (retain, nonatomic) CSAudioPreprocessor *audioPreprocessor;
@property (retain, nonatomic) CSOSTransaction *recordingTransaction;
@property (retain, nonatomic) NSObject<OS_dispatch_group> *recordingWillStartGroup;
@property (nonatomic) char waitingForAlertFinish;
@property (nonatomic) unsigned long long audioStreamHandleId;
@property (retain, nonatomic) NSUUID *alertPlaybackFinishTimeoutToken;
@property (retain, nonatomic) NSUUID *startRecordingWatchDogToken;
@property (retain, nonatomic) NSUUID *stopRecordingWatchDogToken;
@property (retain, nonatomic) NSObject<OS_dispatch_source> *audioPacketWatchdog;
@property (nonatomic) unsigned long long circularBufferStartHostTime;
@property (nonatomic) unsigned long long circularBufferStartSampleCount;
@property (nonatomic) unsigned long long currentExclaveAudioSampleCount;
@property (nonatomic) unsigned long long lastFetchedExclaveAudioSampleCount;
@property (nonatomic) char isTransferringExclaveAudioSample;
@property (retain, nonatomic) CSAudioTimeConverter *exclaveAudioTimeConverter;
@property (retain, nonatomic) CSAudioTimeConverter *audioTimeConverter;
@property (nonatomic) unsigned long long estimatedStartHostTime;
@property (nonatomic) long long audioStreamType;
@property (retain, nonatomic) CSAudioRecordDeviceIndicator *recordDeviceIndicator;
@property (retain, nonatomic) CSMicUsageReporter *micUsageReporter;
@property (nonatomic) unsigned long long audioPacketDeliveryCount;
@property (retain, nonatomic) CSADPPreventStandbyAssertion *adpAssertion;
@property (retain, nonatomic) CSPhoneCallStateMonitor *phoneCallStateMonitor;
@property (nonatomic) unsigned long long phoneCallState;
@property (nonatomic) char currentSessionShouldDuckOnBuiltInSpeaker;
@property (retain, nonatomic) NSMutableDictionary *recordModeLocks;
@property (retain, nonatomic) NSMutableDictionary *listeningMicIndicatorLocks;
@property (retain, nonatomic) NSUUID *secureSessionAssertionUUID;
@property (retain, nonatomic) CSStateCapture *stateCapture;
@property (readonly, nonatomic) NSString *UUID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (void).cxx_destruct;
- (void)start;
- (char)isRecording;
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)a0;
- (id)audioChunkToEndFrom:(unsigned long long)a0 channelIdx:(unsigned long long)a1;
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)a0;
- (void)CSPhoneCallStateMonitor:(id)a0 didRecievePhoneCallStateChange:(unsigned long long)a1;
- (char)activateAudioSessionWithReason:(unsigned long long)a0 dynamicAttribute:(unsigned long long)a1 bundleID:(id)a2 error:(id *)a3;
- (id)audioDeviceInfo;
- (char)_activateAudioSessionWithReason:(unsigned long long)a0 error:(id *)a1;
- (void)_saveRecordingBufferFrom:(unsigned long long)a0 to:(unsigned long long)a1 toURL:(id)a2;
- (unsigned long long)alertStartTime;
- (void)attachTandemStream:(id)a0 toPrimaryStream:(id)a1 completion:(id /* block */)a2;
- (id)audioChunkFrom:(unsigned long long)a0 to:(unsigned long long)a1;
- (id)audioChunkFrom:(unsigned long long)a0 to:(unsigned long long)a1 channelIdx:(unsigned long long)a2;
- (id)audioChunkToEndFrom:(unsigned long long)a0;
- (id)audioMetric;
- (void)audioRecorderBufferAvailable:(id)a0 audioStreamHandleId:(unsigned long long)a1 buffer:(id)a2;
- (void)audioRecorderBufferAvailable:(id)a0 audioStreamHandleId:(unsigned long long)a1 buffer:(id)a2 remoteVAD:(id)a3 atTime:(unsigned long long)a4 arrivalTimestampToAudioRecorder:(unsigned long long)a5 numberOfChannels:(int)a6;
- (void)audioRecorderBuiltInAudioStreamInvalidated:(id)a0 error:(id)a1;
- (void)audioRecorderDidFinishAlertPlayback:(id)a0 ofType:(long long)a1 error:(id)a2;
- (void)audioRecorderDidStartRecord:(id)a0 audioStreamHandleId:(unsigned long long)a1 successfully:(char)a2 error:(id)a3;
- (void)audioRecorderDidStopRecord:(id)a0 audioStreamHandleId:(unsigned long long)a1 reason:(long long)a2;
- (void)audioRecorderDisconnected:(id)a0;
- (void)audioRecorderExclaveBufferAvailable:(id)a0 audioStreamHandleId:(unsigned long long)a1 hostTime:(unsigned long long)a2 arrivalTimestampToAudioRecorder:(unsigned long long)a3;
- (void)audioRecorderRecordHardwareConfigurationDidChange:(id)a0 toConfiguration:(long long)a1;
- (void)audioRecorderStreamHandleIdInvalidated:(unsigned long long)a0;
- (void)audioRecorderWillBeDestroyed:(id)a0;
- (unsigned long long)audioStreamId;
- (void)audioStreamWithRequest:(id)a0 streamName:(id)a1 completion:(id /* block */)a2;
- (id)audioStreamWithRequest:(id)a0 streamName:(id)a1 error:(id *)a2;
- (float)averagePowerForChannel:(unsigned long long)a0;
- (void)cancelAudioStreamHold:(id)a0;
- (void)configureAlertBehavior:(id)a0;
- (char)deactivateAudioSession:(unsigned long long)a0 error:(id *)a1;
- (void)duckAudioDevice:(unsigned int)a0 duckedLevel:(float)a1 rampDuration:(float)a2;
- (void)duckDefaultOutputAudioDeviceWithDuckedLevel:(float)a0 rampDuration:(float)a1;
- (void)enableMiniDucking:(char)a0;
- (void)enableSmartRoutingConsideration:(char)a0;
- (id)holdAudioStreamWithDescription:(id)a0 option:(id)a1;
- (id)initWithAudioStreamHandleId:(unsigned long long)a0 audioStreamType:(long long)a1 audioRecordContext:(id)a2 audioRecorder:(id)a3;
- (char)isNarrowBand;
- (void)notifyProviderContextChanged;
- (float)peakPowerForChannel:(unsigned long long)a0;
- (char)playAlertSoundForType:(long long)a0;
- (char)playRecordStartingAlertAndResetEndpointerWithAlertOverride:(long long)a0;
- (id)playbackRoute;
- (void)prepareAudioStream:(id)a0 request:(id)a1 completion:(id /* block */)a2;
- (char)prepareAudioStreamSync:(id)a0 request:(id)a1 error:(id *)a2;
- (char)prewarmAudioSessionWithError:(id *)a0;
- (id)recordDeviceInfo;
- (id)recordRoute;
- (id)recordSettings;
- (void)remoteRecorderDidDetectedTwoShotAtTime:(double)a0;
- (void)saveRecordingBufferFrom:(unsigned long long)a0 to:(unsigned long long)a1 toURL:(id)a2;
- (void)saveRecordingBufferToEndFrom:(unsigned long long)a0 toURL:(id)a1;
- (char)setAlertSoundFromURL:(id)a0 forType:(long long)a1 force:(char)a2;
- (void)setAnnounceCallsEnabled:(char)a0 withStreamHandleID:(unsigned long long)a1;
- (void)setAudioAlertDelegate:(id)a0;
- (void)setAudioProviderDelegate:(id)a0;
- (void)setAudioSessionDelegate:(id)a0;
- (char)setCurrentContext:(id)a0 error:(id *)a1;
- (void)setDuckOthersOption:(char)a0;
- (void)setLatestRecordContext:(id)a0 streamType:(long long)a1;
- (void)setMeteringEnabled:(char)a0;
- (void)startAudioStream:(id)a0 option:(id)a1 completion:(id /* block */)a2;
- (void)stopAudioStream:(id)a0 option:(id)a1 completion:(id /* block */)a2;
- (char)supportsDuckingOnCurrentRouteWithError:(id *)a0;
- (void)triggerInfoForContext:(id)a0 completion:(id /* block */)a1;
- (void)updateMeters;
- (void)_forceReleaseAllRecordModeLocks;
- (id)_acquireListeningMicIndicatorLockFrom:(unsigned long long)a0;
- (id)_acquireRecordModeLockFrom:(unsigned long long)a0;
- (id)_audioChunkFrom:(unsigned long long)a0 to:(unsigned long long)a1;
- (id)_audioChunkFrom:(unsigned long long)a0 to:(unsigned long long)a1 channelIdx:(unsigned long long)a2;
- (id)_audioStreamWithRequest:(id)a0 streamName:(id)a1 error:(id *)a2;
- (char)_canSetContext;
- (void)_cancelAudioPacketWatchDog;
- (void)_cancelAudioStreamHold:(id)a0;
- (void)_clearDidStartRecordingDelegateWatchDog;
- (void)_clearDidStopRecordingDelegateWatchDog;
- (char)_clearListeningMicIndicatorProperty;
- (void)_clearListeningMicIndicatorPropertyIfNeeded;
- (void)_createCircularBufferIfNeededWithNumChannel:(unsigned long long)a0 playbackRoute:(id)a1;
- (char)_deactivateAudioSession:(unsigned long long)a0 error:(id *)a1;
- (void)_deliverHistoricalAudioToStreamsWithRemoteVAD:(id)a0;
- (void)_deliverPostprocessAudioChunk:(id)a0 toStream:(id)a1 lastForwardedSampleCount:(unsigned long long)a2;
- (void)_didFireStreamHolderTimeout:(id)a0;
- (char)_didPlayStartAlertSoundForSiri:(id)a0 audioStream:(id)a1;
- (void)_didReceiveFinishStartAlertPlaybackAt:(unsigned long long)a0;
- (void)_fetchHistoricalAudioAndForwardToStream:(id)a0 remoteVAD:(id)a1;
- (void)_forceReleaseAllListeningMicIndicatorLocks;
- (void)_forceReleaseListeningMicIndicatorLockFrom:(unsigned long long)a0;
- (void)_forceReleaseRecordModeLockFrom:(unsigned long long)a0;
- (void)_forwardAudioChunk:(id)a0 toStream:(id)a1;
- (void)_forwardAudioChunkForTV:(id)a0 toStream:(id)a1;
- (void)_handleAudioRecorderStreamHandleIdInvalidated:(unsigned long long)a0;
- (void)_handleAudioSystemFailure;
- (void)_handleDidStartAudioStreamWithResult:(char)a0 error:(id)a1;
- (void)_handleDidStopAudioStreamWithReason:(long long)a0;
- (void)_holdAudioStreamWithHolder:(id)a0 option:(id)a1;
- (void)_holdRecordingExceptionIfNeeded:(char)a0;
- (void)_holdRecordingTransactionIfNeeded;
- (char)_isDuckingOnSpeakerOutputSupportedWithCurrentRoute;
- (void)_onAudioPacketWatchdogFire;
- (void)_postEpilogueAudioStream;
- (void)_preEpilogueAudioStream;
- (void)_prepareAudioStream:(id)a0 request:(id)a1 completion:(id /* block */)a2;
- (char)_prepareAudioStreamSync:(id)a0 request:(id)a1 error:(id *)a2;
- (void)_processAudioBuffer:(id)a0 remoteVAD:(id)a1 atTime:(unsigned long long)a2 arrivalTimestampToAudioRecorder:(unsigned long long)a3 numberOfChannels:(int)a4;
- (void)_releaseListeningMicIndicatorLock:(id)a0;
- (void)_releaseListeningMicIndicatorLockFrom:(unsigned long long)a0;
- (void)_releaseRecordModeLock:(id)a0;
- (void)_releaseRecordingTransactionIfNeeded;
- (void)_resetCircularBufferStartTime;
- (void)_schduleDidStartRecordingDelegateWatchDogWithToken:(id)a0;
- (void)_scheduleAlertFinishTimeout:(double)a0;
- (void)_scheduleAudioPacketWatchDog;
- (void)_scheduleDidStartRecordingDelegateWatchDog;
- (void)_scheduleDidStopRecordingDelegateWatchDog;
- (void)_scheduleDidStopRecordingDelegateWatchDog:(id)a0;
- (void)_setLatestRecordContext:(id)a0;
- (char)_setListeningMicIndicatorProperty;
- (char)_setListeningMicIndicatorPropertyIfNeeded;
- (char)_shouldDuckOnBuiltInSpeaker;
- (char)_shouldHandleStartPendingOnStopping:(unsigned long long)a0 withStopReason:(long long)a1;
- (char)_shouldStopRecording;
- (void)_startAudioStream:(id)a0 option:(id)a1 completion:(id /* block */)a2;
- (void)_stopAudioStream:(id)a0 option:(id)a1 completion:(id /* block */)a2;
- (id)_streamStateName:(unsigned long long)a0;
- (void)_switchToListeningMode;
- (void)_switchToRecordingMode;
- (void)_updateRemoteDeviceIdFromAVVCIfNeeded;
- (void)audioPreprocessor:(id)a0 hasAvailableBuffer:(id)a1 atTime:(unsigned long long)a2 arrivalTimestampToAudioRecorder:(unsigned long long)a3 numberOfChannels:(int)a4;
- (float)circularBufferInputRecordingDuration;
- (int)circularBufferNumInputChannel;
- (id)initWithAudioStreamHandleId:(unsigned long long)a0 audioStreamType:(long long)a1 audioRecordContext:(id)a2 audioRecorder:(id)a3 phoneCallStateMonitor:(id)a4;

@end
