@class NSHashTable, NSString, CSLaunchAgentXPCClient, CSRemoteRecordClient, NSMutableDictionary, NSMutableSet, NSObject, CSAudioFileReader, AVVoiceController, CSReusableBufferPool;
@protocol OS_dispatch_queue, CSExclaveAudioProviding, CSAudioSessionEventProvidingDelegate;

@interface CSAudioRecorder : NSObject <AVVoiceControllerRecordDelegate, CSAudioDecoderDelegate, CSAudioFileReaderDelegate, CSRemoteRecordClientDelegate, CSUserSessionActiveMonitorDelegate, CSExclaveAudioProvidingDelegate, CSLaunchAgentXPCClientDelegate, CSAudioSessionEventProviding> {
    AVVoiceController *_voiceController;
    struct AudioBufferList { unsigned int mNumberBuffers; struct AudioBuffer { unsigned int mNumberChannels; unsigned int mDataByteSize; void *mData; } mBuffers[1]; } _interleavedABL;
    struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *_pNonInterleavedABL;
    CSRemoteRecordClient *_remoteRecordClient;
    NSMutableDictionary *_opusDecoders;
    CSAudioFileReader *_audioFileReader;
    unsigned long long _audioFilePathIndex;
    char _waitingForDidStart;
    unsigned long long _pendingTwoShotVTToken;
    CSReusableBufferPool *_audioBufferPool;
    NSMutableDictionary *_hasSetAlertDictionary;
    id<CSExclaveAudioProviding> _exclaveAudioClient;
    CSLaunchAgentXPCClient *_launchAgentAudioClient;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *voiceControllerCreationQueue;
@property (retain, nonatomic) NSHashTable *observers;
@property (weak, nonatomic) id<CSAudioSessionEventProvidingDelegate> sessionEventDelegate;
@property (retain, nonatomic) NSMutableSet *remoteAccessoryStreamIdSet;
@property (nonatomic) unsigned long long exclaveSampleCountForStream;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)createSharedAudioSession;
+ (void)resetDuckSettings;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id)metrics;
- (void)unregisterObserver:(id)a0;
- (id)initWithQueue:(id)a0 error:(id *)a1;
- (void)registerObserver:(id)a0;
- (char)isNarrowBandWithStreamHandleId:(unsigned long long)a0;
- (id)_compensateChannelDataIfNeeded:(id)a0 receivedNumChannels:(unsigned int)a1;
- (char)activateAudioSessionWithReason:(unsigned long long)a0 streamHandleId:(unsigned long long)a1 error:(id *)a2;
- (unsigned long long)alertStartTime;
- (void)audioDecoderDidDecodePackets:(id)a0 audioStreamHandleId:(unsigned long long)a1 buffer:(id)a2 remoteVAD:(id)a3 timestamp:(unsigned long long)a4 arrivalTimestampToAudioRecorder:(unsigned long long)a5 wasBuffered:(char)a6 receivedNumChannels:(unsigned int)a7;
- (id)audioDeviceInfoWithStreamHandleId:(unsigned long long)a0 recordDeviceIndicator:(id)a1;
- (float)averagePowerForChannel:(unsigned long long)a0;
- (void)configureAlertBehavior:(id)a0 audioStreamHandleId:(unsigned long long)a1;
- (char)deactivateAudioSession:(unsigned long long)a0 error:(id *)a1;
- (char)deactivateAudioSession:(unsigned long long)a0 streamHandleId:(unsigned long long)a1 error:(id *)a2;
- (void)enableMiniDucking:(char)a0;
- (void)enableSmartRoutingConsiderationForStream:(unsigned long long)a0 enable:(char)a1;
- (id)fetchGibraltarVoiceTriggerInfoWithRecordDeviceIndicator:(id)a0;
- (id)getPlaybackRouteForStreamID:(unsigned long long)a0;
- (char)isRecordingWithRecordDeviceIndicator:(id)a0;
- (char)isSessionCurrentlyActivated;
- (float)peakPowerForChannel:(unsigned long long)a0;
- (char)playAlertSoundForType:(long long)a0 recordDevideIndicator:(id)a1;
- (char)playRecordStartingAlertAndResetEndpointerFromStream:(unsigned long long)a0 withAlertOverride:(long long)a1;
- (char)prepareAudioStreamRecord:(id)a0 recordDeviceIndicator:(id)a1 error:(id *)a2;
- (char)prewarmAudioSessionWithStreamHandleId:(unsigned long long)a0 error:(id *)a1;
- (id)recordDeviceInfoWithStreamHandleId:(unsigned long long)a0 recordDeviceIndicator:(id)a1;
- (id)recordRouteWithRecordDeviceIndicator:(id)a0;
- (id)recordSettingsWithStreamHandleId:(unsigned long long)a0;
- (float)recordingSampleRateWithStreamHandleId:(unsigned long long)a0;
- (char)setAlertSoundFromURL:(id)a0 forType:(long long)a1 force:(char)a2;
- (void)setAnnounceCallsEnabled:(char)a0 withStreamHandleID:(unsigned long long)a1;
- (void)setAudioSessionEventDelegate:(id)a0;
- (void)setContext:(id)a0 completion:(id /* block */)a1;
- (char)setCurrentContext:(id)a0 streamHandleId:(unsigned long long)a1 error:(id *)a2;
- (void)setMeteringEnabled:(char)a0;
- (char)setRecordMode:(long long)a0 streamHandleId:(unsigned long long)a1 error:(id *)a2;
- (char)startAudioStreamWithOption:(id)a0 recordDeviceIndicator:(id)a1 error:(id *)a2;
- (char)stopAudioStreamWithRecordDeviceIndicator:(id)a0 error:(id *)a1;
- (void)updateMeters;
- (void)userSessionActivateMonitor:(id)a0 didReceivedUserSessionActiveHasChanged:(char)a1;
- (void)willDestroy;
- (void)voiceControllerAudioCallback:(id)a0 forStream:(unsigned long long)a1 buffer:(id)a2;
- (void)voiceControllerDidFinishAlertPlayback:(id)a0 ofType:(int)a1 error:(id)a2;
- (void)voiceControllerDidStartRecording:(id)a0 forStream:(unsigned long long)a1 successfully:(char)a2 error:(id)a3;
- (void)voiceControllerDidStopRecording:(id)a0 forStream:(unsigned long long)a1 forReason:(long long)a2;
- (void)voiceControllerEncoderErrorDidOccur:(id)a0 error:(id)a1;
- (void)voiceControllerStreamInvalidated:(id)a0 forStream:(unsigned long long)a1;
- (void)_audioRecorderDidStartRecordingSuccessfully:(char)a0 streamHandleID:(unsigned long long)a1 error:(id)a2;
- (void)_audioRecorderDidStopRecordingForReason:(long long)a0 streamHandleID:(unsigned long long)a1;
- (void)_destroyVoiceController;
- (void)_processAudioBuffer:(id)a0 audioStreamHandleId:(unsigned long long)a1 arrivalTimestampToAudioRecorder:(unsigned long long)a2;
- (void)_processAudioChain:(id)a0 audioStreamHandleId:(unsigned long long)a1 remoteVAD:(id)a2 atTime:(unsigned long long)a3 arrivalTimestampToAudioRecorder:(unsigned long long)a4 numberOfChannels:(int)a5;
- (char)_shouldUseRemoteBuiltInMic:(id)a0;
- (void)remoteRecordConnectionDisconnected:(id)a0;
- (void)remoteRecordDidStartRecordingWithStreamHandleId:(unsigned long long)a0 error:(id)a1;
- (void)remoteRecordDidStopRecordingWithWithStreamHandleId:(unsigned long long)a0 error:(id)a1;
- (void)remoteRecordLPCMBufferAvailable:(id)a0 streamHandleId:(unsigned long long)a1;
- (void)remoteRecordTwoShotDetectedAtTime:(double)a0;
- (void)voiceControllerRecordHardwareConfigurationDidChange:(id)a0 toConfiguration:(int)a1;
- (char)playAlertSoundForType:(long long)a0 overrideMode:(long long)a1;
- (void)CSSystemDaemonDidFinishAlertPlaybackOfType:(unsigned long long)a0;
- (void)CSSystemDaemonDidStopRecordingForStream:(unsigned long long)a0 forReason:(long long)a1;
- (void)CSSystemDaemonAudioCallbackForStream:(unsigned long long)a0 butterTimestamp:(unsigned long long)a1;
- (void)CSSystemDaemonDidStartRecordingForStream:(unsigned long long)a0 successfully:(char)a1;
- (void)CSSystemDaemonDisconnected;
- (char)_audioIsFromRemoteAccessory:(unsigned long long)a0;
- (id)_createVoiceControllerWithError:(id *)a0;
- (id)_fetchRemoteRecordClientWithDeviceId:(id)a0 streamHandleId:(unsigned long long)a1;
- (id)_getRecordSettingsWithRequest:(id)a0;
- (id)_getVoiceController;
- (char)_hasLocalPendingTwoShot;
- (char)_isDarwinDeviceId:(id)a0;
- (void)_logResourceNotAvailableErrorIfNeeded:(id)a0;
- (char)_needResetAudioInjectionIndex:(id)a0;
- (void)_processExclaveBufferCallbackFrom:(unsigned long long)a0 hostTime:(unsigned long long)a1;
- (id)_recordDeviceInfoWithStreamHandleId:(unsigned long long)a0;
- (id)_recordModeString:(long long)a0;
- (char)_shouldInjectAudio;
- (char)_shouldLogResourceNotAvailableError;
- (char)_shouldUseRemoteRecordForContext:(id)a0;
- (char)_startAudioStreamForAudioInjectionWithAVVCContext:(id)a0;
- (void)_stopTrackingRemoteAccessoryStreamId:(unsigned long long)a0;
- (void)_trackRemoteAccessoryStreamIdIfNeeded:(id)a0;
- (id)_updateLanguageCodeForRemoteVTEIResult:(id)a0;
- (void)audioFileReaderBufferAvailable:(id)a0 buffer:(id)a1 atTime:(unsigned long long)a2;
- (void)audioFileReaderDidStartRecording:(id)a0 successfully:(char)a1 error:(id)a2;
- (void)audioFileReaderDidStopRecording:(id)a0 forReason:(long long)a1;
- (char)clearListeningMicIndicatorProperty;
- (unsigned long long)currentSensorStatus;
- (void)exclaveRecordClientAudioBuffer:(id)a0 audioStreamHandleId:(unsigned long long)a1 audioBuffer:(id)a2 hostTime:(unsigned long long)a3;
- (char)fetchSecureAudioStreamWithRecordDeviceIndicator:(id)a0 from:(unsigned long long)a1 numSamples:(unsigned long long)a2 hostTime:(unsigned long long)a3 error:(id *)a4;
- (char)isDuckingSupportedOnCurrentRouteWithStreamHandleID:(unsigned long long)a0 error:(id *)a1;
- (unsigned long long)sensorStartForStream:(unsigned long long)a0;
- (unsigned long long)sensorStop;
- (void)setDuckMixWithOthersForStream:(unsigned long long)a0 duckOthers:(char)a1 duckToLevelInDB:(id)a2 mixWithOthers:(char)a3;
- (char)setEnableInterruptionByRecordingClientsForStream:(unsigned long long)a0 enable:(char)a1;
- (char)setListeningMicIndicatorPropertyForStream:(unsigned long long)a0;
- (char)stopDeliverSecureAudioStreamWithRecordDeviceIndicator:(id)a0 from:(unsigned long long)a1 error:(id *)a2;

@end
