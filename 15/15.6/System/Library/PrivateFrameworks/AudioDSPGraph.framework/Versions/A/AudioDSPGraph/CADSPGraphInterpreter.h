@interface CADSPGraphInterpreter : NSObject {
    struct Interpreter { void /* function */ **_vptr$Interpreter; struct unique_ptr<AudioDSPGraph::Graph, std::default_delete<AudioDSPGraph::Graph>> { struct __compressed_pair<AudioDSPGraph::Graph *, std::default_delete<AudioDSPGraph::Graph>> { struct Graph *__value_; } __ptr_; } mGraph; struct NewBoxRegistry { void /* function */ **_vptr$Base; struct unordered_map<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>>> { struct __hash_table<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } mNewBoxMap; struct unordered_map<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>, std::hash<AudioComponentDescription>, AudioDSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality, std::allocator<std::pair<const AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>>> { struct __hash_table<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, std::__unordered_map_hasher<AudioComponentDescription, std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, std::hash<AudioComponentDescription>, AudioDSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality>, std::__unordered_map_equal<AudioComponentDescription, std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, AudioDSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality, std::hash<AudioComponentDescription>>, std::allocator<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<AudioComponentDescription, std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, std::hash<AudioComponentDescription>, AudioDSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<AudioComponentDescription, std::__hash_value_type<AudioComponentDescription, std::function<AudioDSPGraph::Box *(unsigned int, unsigned int)>>, AudioDSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality, std::hash<AudioComponentDescription>>> { float __value_; } __p3_; } __table_; } mNewBoxMapFromDesc; struct vector<std::pair<std::string, AudioComponentDescription>, std::allocator<std::pair<std::string, AudioComponentDescription>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<std::string, AudioComponentDescription> *, std::allocator<std::pair<std::string, AudioComponentDescription>>> { void *__value_; } __end_cap_; } mRegisteredBoxes; } mNewBoxRegistry; struct FormatAndBlockSize { struct StreamDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } mFormat; unsigned int mBlockSize; } mPrevious; struct FormatAndBlockSize *mPreviousNamed; BOOL mHavePreviousFormat; struct vector<AudioDSPGraph::Subset *, std::allocator<AudioDSPGraph::Subset *>> { struct Subset **__begin_; struct Subset **__end_; struct __compressed_pair<AudioDSPGraph::Subset **, std::allocator<AudioDSPGraph::Subset *>> { struct Subset **__value_; } __end_cap_; } mSubsetStack; } _interpreter;
}

- (void).cxx_destruct;
- (id).cxx_construct;

@end
