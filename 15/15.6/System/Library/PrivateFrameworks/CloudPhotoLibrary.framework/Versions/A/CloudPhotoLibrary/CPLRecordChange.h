@class NSData, NSString, NSArray, NSDate, CPLRecordPushContext, CPLScopedIdentifier, CPLRecordChangeDiffTracker;

@interface CPLRecordChange : NSObject <NSSecureCoding, NSCopying> {
    CPLRecordChangeDiffTracker *_attachedDiffTracker;
    CPLRecordChange *_recordKnownByCloudCache;
    CPLRecordPushContext *_pushContext;
    char _shouldNotTrustCloudCache;
    char _shouldFilterDefaultValuesForNewProperties;
    char _isSparseFullChange;
    char _shouldOnlyUploadNewResources;
    char _relatedRecordShouldBeShared;
    CPLRecordChange *_ignoredRecord;
    char _didCacheRealResourceSizeInStorage;
    unsigned long long _cachedRealResourceSizeInStorage;
}

@property (class, readonly) char supportsSecureCoding;
@property (class, readonly, nonatomic) Class relatedRecordClass;
@property (class, readonly, nonatomic) long long supportedFeatureCompatibleVersion;
@property (class, readonly, nonatomic) char relatedRelationshipIsWeak;
@property (class, readonly, nonatomic) char secondaryRelationshipIsWeak;

@property (copy, nonatomic) NSString *realIdentifier;
@property (copy, nonatomic) NSData *recordChangeData;
@property (copy, nonatomic) NSData *sharingRecordChangeData;
@property (nonatomic) char serverRecordIsCorrupted;
@property (copy, nonatomic) NSString *sharingRecordIdentifier;
@property (copy, nonatomic) CPLScopedIdentifier *scopedIdentifier;
@property (copy, nonatomic) NSDate *recordModificationDate;
@property (nonatomic) unsigned long long changeType;
@property (copy, nonatomic) NSDate *dateDeleted;
@property (copy, nonatomic) CPLScopedIdentifier *resourceCopyFromScopedIdentifier;
@property (nonatomic) char inTrash;
@property (nonatomic) char inExpunged;
@property (copy, nonatomic) NSString *sharingScopeIdentifier;
@property (copy, nonatomic) NSArray *sharingContributorUserIdentifiers;
@property (copy, nonatomic) NSArray *updateSharingContributorUserIdentifiers;

+ (id)descriptionForChangeType:(unsigned long long)a0;
+ (char)supportsSharing;
+ (char)supportsDeletion;
+ (long long)maxInlineDataSize;
+ (id)newChangeWithScopedIdentifier:(id)a0 changeType:(unsigned long long)a1;
+ (id)newDeleteChangeWithScopedIdentifier:(id)a0;
+ (id)newRecordWithScopedIdentifier:(id)a0;
+ (char)requiresStableHashForResourceType:(unsigned long long)a0;
+ (char)supportsResources;
+ (id)newRecordInScopeWithIdentifier:(id)a0;
+ (char)supportsSharingScopedIdentifier;
+ (id)_descriptionForChangeType:(unsigned long long)a0 isSparseFullChange:(char)a1 onlyUploadNewResources:(char)a2;
+ (Class)classForStoredClassName:(id)a0 forCPLArchiver:(id)a1;
+ (id /* block */)copyPropertyBlockForDirection:(unsigned long long)a0;
+ (id)cplAdditionalSecureClassesForProperty:(id)a0;
+ (char)cplShouldIgnorePropertyForCoding:(id)a0;
+ (char)cplShouldIgnorePropertyForEquality:(id)a0;
+ (id)descriptionForDirection:(unsigned long long)a0;
+ (id)descriptionForSupportedFeatureCompatibleVersion:(long long)a0;
+ (id /* block */)equalityBlockForDirection:(unsigned long long)a0;
+ (id)newChangeWithType:(unsigned long long)a0;
+ (id)newRecord;
+ (char)shouldReallyQuarantineRecord;
+ (char)supportsDirectDeletion;
+ (char)supportsResourceType:(unsigned long long)a0;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (unsigned long long)hash;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)redactedDescription;
- (id)resourceForType:(unsigned long long)a0;
- (id)resources;
- (char)isDelete;
- (Class)recordClass;
- (void)clearIdentifiers;
- (void)setResources:(id)a0;
- (id)relatedIdentifier;
- (char)supportsSharing;
- (char)supportsDeletion;
- (id)cplFullDescription;
- (char)hasChangeType:(unsigned long long)a0;
- (char)isFullRecord;
- (unsigned long long)realResourceSize;
- (char)requiresStableHashForResourceType:(unsigned long long)a0;
- (char)supportsResources;
- (char)supportsSharingScopedIdentifier;
- (id)copyChangeType:(unsigned long long)a0;
- (id)resourcePerType;
- (id)_ignoredRecord;
- (void)_noteRelatedRecordShouldBeShared;
- (id)_pushContext;
- (id)_recordKnownByCloudCache;
- (char)_relatedRecordShouldBeShared;
- (void)_setIgnoredRecord:(id)a0;
- (void)_setPushContext:(id)a0;
- (void)_setRecordKnownByCloudCache:(id)a0;
- (void)_setShouldNotTrustCloudCache:(char)a0;
- (char)_shouldNotTrustCloudCache;
- (id)_unscopedIdentifier;
- (id)allRelatedScopedIdentifiers;
- (char)allResourcesAreAvailable;
- (char)allowsToOnlyUploadNewResources;
- (void)applyChange:(id)a0;
- (char)applyChange:(id)a0 copyPropertiesToFinalChange:(id)a1 forChangeType:(unsigned long long)a2 direction:(unsigned long long)a3 diffTracker:(id)a4;
- (void)applyChangeType:(unsigned long long)a0 fromChange:(id)a1;
- (id)asRecordView;
- (void)attachDiffTracker:(id)a0;
- (id)attachedDiffTracker;
- (void)awakeFromStorage;
- (unsigned long long)baseDerivativeResourceType;
- (unsigned long long)baseVideoComplemenentResourceType;
- (char)canLowerQuota;
- (char)changeIsOnlyAddingResourcesToRecord:(id)a0 addedResources:(id *)a1;
- (id /* block */)checkDefaultValueBlockForPropertyWithSelector:(SEL)a0;
- (void)clearChangeType:(unsigned long long)a0;
- (id)compactedChangeWithRelatedChanges:(id)a0 isOnlyChange:(char)a1 fullRecord:(id)a2 usingStorageView:(id)a3;
- (void)copyDerivatives:(unsigned long long *)a0 count:(int)a1 avoidResourceType:(unsigned long long)a2 fromRecord:(id)a3 inResourcePerType:(id)a4;
- (void)copyDerivativesFromRecordIfPossible:(id)a0;
- (long long)dequeueOrder;
- (unsigned long long)effectiveResourceSizeToUploadUsingStorage:(id)a0;
- (void)enumerateChangeTypesForChangeType:(unsigned long long)a0 block:(id /* block */)a1;
- (unsigned long long)estimatedRecordSize;
- (id)fingerprintSchemeWithContext:(id)a0;
- (unsigned long long)fullChangeTypeForFullRecord;
- (id)initWithCPLArchiver:(id)a0;
- (char)isAssetChange;
- (char)isEPPRecord;
- (char)isInScopeWithIdentifier:(id)a0;
- (char)isMasterChange;
- (char)isResourceTypeAGeneratedDerivative:(unsigned long long)a0;
- (char)isScopeChange;
- (char)isSharedInScopeWithIdentifier:(id)a0;
- (char)isSparseFullChange;
- (unsigned long long)largestResourceSize;
- (void)markAsSparseFullChange;
- (void)markToOnlyUploadNewResources;
- (id)mergeRecordChangeWithNewRecordChange:(id)a0 direction:(unsigned long long)a1;
- (id)onlyAddedResources;
- (unsigned long long)originalResourceSize;
- (void)prepareForStorage;
- (id)propertiesDescription;
- (id)propertiesForChangeType:(unsigned long long)a0;
- (id)proposedCloudScopedIdentifierWithError:(id *)a0;
- (id)proposedLocalScopedIdentifier;
- (id)realRecordChangeFromRecordChange:(id)a0 direction:(unsigned long long)a1 newRecord:(id *)a2;
- (id)realRecordChangeFromRecordChange:(id)a0 direction:(unsigned long long)a1 newRecord:(id *)a2 changeType:(unsigned long long)a3 diffTracker:(id)a4;
- (id)realRecordChangeFromRecordChange:(id)a0 direction:(unsigned long long)a1 newRecord:(id *)a2 diffTracker:(id)a3;
- (id)realScopedIdentifier;
- (unsigned long long)realUploadResourceSize;
- (Class)relatedRecordClass;
- (char)relatedRelationshipIsWeak;
- (id)relatedScopedIdentifier;
- (char)resourceChangeWillOnlyChangeDerivatives:(id)a0;
- (id)resourcesDescription;
- (void)restoreRelationshipsFromFullRecord:(id)a0;
- (id)scopedIdentifiersForMapping;
- (id)secondaryIdentifier;
- (char)secondaryRelationshipIsWeak;
- (id)secondaryScopedIdentifier;
- (void)setRelatedIdentifier:(id)a0;
- (void)setScopeIndex:(long long)a0;
- (void)setSecondaryIdentifier:(id)a0;
- (void)setSharingRecordScopedIdentifier:(id)a0;
- (void)setShouldFilterDefaultValuesForNewProperties:(char)a0;
- (id)sharingRecordScopedIdentifier;
- (char)shouldApplyPropertiesWithSelector:(SEL)a0;
- (char)shouldFilterDefaultValuesForNewProperties;
- (char)shouldOnlyUploadNewResources;
- (id)storedClassNameForCPLArchiver:(id)a0;
- (unsigned long long)supportedChangeTypes;
- (char)supportsDirectDeletion;
- (char)supportsResourceType:(unsigned long long)a0;
- (unsigned long long)totalResourceSize;
- (id)translateToClientChangeUsingIDMapping:(id)a0 error:(id *)a1;
- (id)translateToCloudChangeUsingIDMapping:(id)a0 error:(id *)a1;
- (void)updateScopeIdentifier:(id)a0;
- (char)validateChangeWithError:(id *)a0;
- (char)validateFullRecord;
- (char)validateRecordForTracker:(id)a0;

@end
