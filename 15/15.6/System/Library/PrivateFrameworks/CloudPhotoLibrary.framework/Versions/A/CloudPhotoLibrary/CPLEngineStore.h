@class NSHashTable, NSURL, CPLEngineScopeCleanupTasks, CPLEngineRevertRecords, CPLEngineQuarantinedRecords, CPLResetTracker, CPLChangeBatch, NSMutableArray, NSString, CPLEngineChangePipe, CPLEngineCloudCache, NSArray, CPLEngineIDMapping, NSMutableDictionary, CPLEngineIgnoredRecords, CPLTransportScopeMapping, CPLEngineRemappedRecords, CPLEngineRecordComputeStatePushQueue, NSObject, NSSet, CPLEngineScopeStorage, CPLEngineTransientRepository, CPLEngineStatusCenter, CPLEngineLibrary, CPLEngineResourceStorage, CPLEnginePendingRecordChecks, CPLEngineOutgoingResources, CPLEnginePushRepository, CPLEngineDerivativesCache, NSDate, CPLRecordStorageView, CPLEngineResourceDownloadQueue, CPLPlatformObject;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface CPLEngineStore : NSObject <CPLAbstractObject, CPLEngineComponent> {
    NSHashTable *_storages;
    NSString *_sharingScopeIdentifier;
    NSObject<OS_dispatch_queue> *_batchedTransactionsQueue;
    NSMutableArray *_batchedTransactions;
    char _batchedTransactionDequeueIsScheduled;
    char _dontDelayChangeSessionUpdate;
    char _applyingChangeSessionUpdate;
    NSURL *_resetEventsURL;
    NSMutableArray *_resetEvents;
    CPLResetTracker *_pendingTracker;
    CPLChangeBatch *_unacknowledgedBatch;
    char _discardUnacknowledgedBatchOnTransactionFail;
    char _transactionClientCacheViewHasPushRepository;
    NSMutableDictionary *_transactionNewPredictions;
    NSSet *_lastInvalidRecordScopedIdentifiers;
    NSDate *_lastInvalidRecordsDate;
    NSObject<OS_dispatch_source> *_pendingUpdateTimer;
    NSObject<OS_dispatch_queue> *_pendingUpdateQueue;
    double _pendingUpdateInterval;
    char _unschedulePendingUpdateApplyOnWriteSuccess;
    char _schedulePendingUpdateApplyOnWriteSuccess;
    char _scheduleSetupOnWriteSuccess;
    char _scheduleDisabledFeatureUpdateOnWriteSuccess;
    char _schedulePullFromClient;
    NSObject<OS_dispatch_queue> *_shouldSyncScopeListQueue;
    char _shouldEnableScopeListSyncOnWriteSuccess;
    NSArray *_disabledFeatures;
    char _hasUpdatedDisabledFeatures;
    char _isUpdatingDisabledFeatures;
    char _shouldTriggerCompleteResetSyncAfterDisabledFeaturesUpdate;
    char _shouldTriggerResetSyncAfterDisabledFeaturesUpdate;
}

@property (class, nonatomic) char dontBatchTransactions;
@property (class, readonly, nonatomic) NSArray *storageNames;

@property (readonly, nonatomic) NSString *mainScopeIdentifier;
@property (readonly, nonatomic) char hasPendingResetSync;
@property (nonatomic) unsigned long long state;
@property (readonly, nonatomic) NSArray *storages;
@property (readonly, weak, nonatomic) CPLEngineLibrary *engineLibrary;
@property (readonly) char shouldSyncScopeList;
@property (readonly, nonatomic) CPLEnginePushRepository *pushRepository;
@property (readonly, nonatomic) char pushRepositoryIsFull;
@property (readonly, nonatomic) CPLEngineScopeStorage *scopes;
@property (readonly, nonatomic) CPLEngineScopeCleanupTasks *cleanupTasks;
@property (readonly, nonatomic) CPLEngineChangePipe *pullQueue;
@property (readonly, nonatomic) CPLEngineRevertRecords *revertRecords;
@property (readonly, nonatomic) CPLEngineIDMapping *idMapping;
@property (readonly, nonatomic) CPLEngineCloudCache *cloudCache;
@property (readonly, nonatomic) CPLRecordStorageView *transactionClientCacheView;
@property (readonly, nonatomic) CPLEngineTransientRepository *transientPullRepository;
@property (readonly, nonatomic) CPLEngineResourceStorage *resourceStorage;
@property (readonly, nonatomic) CPLEngineResourceDownloadQueue *downloadQueue;
@property (readonly, nonatomic) CPLEngineOutgoingResources *outgoingResources;
@property (readonly, nonatomic) CPLEngineRemappedRecords *remappedRecords;
@property (readonly, nonatomic) CPLEngineQuarantinedRecords *quarantinedRecords;
@property (readonly, nonatomic) CPLEngineStatusCenter *statusCenter;
@property (readonly, nonatomic) CPLEnginePendingRecordChecks *pendingRecordChecks;
@property (readonly, nonatomic) CPLEngineIgnoredRecords *ignoredRecords;
@property (readonly, nonatomic) CPLEngineRecordComputeStatePushQueue *recordComputeStatePushQueue;
@property (readonly) NSDate *libraryCreationDate;
@property (readonly, nonatomic) id corruptionInfo;
@property (readonly, nonatomic) CPLEngineDerivativesCache *derivativesCache;
@property (readonly, nonatomic) char shouldGenerateDerivatives;
@property (readonly, nonatomic) NSArray *pushPullGatekeepers;
@property (readonly, nonatomic) NSArray *disabledFeatures;
@property (readonly, nonatomic) char shouldUpdateDisabledFeatures;
@property (readonly, nonatomic) NSString *sharingScopeIdentifier;
@property (readonly, nonatomic) char syncSessionShouldRequestMoreTime;
@property (readonly, nonatomic) CPLTransportScopeMapping *transactionTransportScopeMapping;
@property (readonly, nonatomic) CPLPlatformObject *platformObject;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)stateDescriptionForState:(unsigned long long)a0;
+ (id)platformImplementationProtocol;

- (void)dealloc;
- (void).cxx_destruct;
- (id)userIdentifier;
- (void)openWithCompletionHandler:(id /* block */)a0;
- (void)performBarrier;
- (id)componentName;
- (id)libraryVersion;
- (id)performReadTransactionWithBlock:(id /* block */)a0;
- (void)_addCleanupBlock:(id /* block */)a0;
- (void)_dropTransactionClientCacheView;
- (void)_setTransactionOnCurrentThread:(id)a0;
- (char)resetSyncAnchorWithCause:(id)a0 error:(id *)a1;
- (char)storeChangeSessionUpdate:(id)a0 error:(id *)a1;
- (char)_resetCompleteSyncStateIncludingIDMappingWithCause:(id)a0 scope:(id)a1 error:(id *)a2;
- (void)getStatusWithCompletionHandler:(id /* block */)a0;
- (void)markAsCorrupted;
- (void)predictSyncSessionValue:(id)a0 ofType:(id)a1;
- (char)_applyAndDiscardPendingUpdate:(id)a0 error:(id *)a1;
- (char)_applyPendingUpdate:(id)a0 error:(id *)a1;
- (char)_canHaveActivatedScope:(id)a0 libraryOptions:(unsigned long long)a1 error:(id *)a2;
- (char)_canRead;
- (char)_canWrite;
- (void)_closeAndDeactivate:(char)a0 completionHandler:(id /* block */)a1;
- (void)_commitWriteTransaction:(id)a0 commitError:(id)a1;
- (id)_currentTransaction;
- (void)_finishTransaction;
- (char)_handleException:(id)a0;
- (void)_loadResetEvents;
- (void)_performBarrierTransaction:(id)a0 withBlock:(id /* block */)a1;
- (void)_performTransaction:(id)a0 withBlock:(id /* block */)a1;
- (id)_performWriteTransactionByPassBlocker:(id)a0 WithBlock:(id /* block */)a1 completionHandler:(id /* block */)a2;
- (void)_reallyPerformBatchedTransactionsLocked;
- (void)_reallySchedulePendingUpdateApply;
- (void)_reallyUnschedulePendingUpdateApply;
- (void)_removeTransactionOnCurrentThread:(id)a0;
- (char)_resetCompleteSyncStateWithCause:(id)a0 scope:(id)a1 error:(id *)a2;
- (id)_resetEventsDescriptions;
- (id)_resetEventsJSON;
- (char)_resetGlobalStateWithError:(id *)a0;
- (char)_resetLocalSyncStateWithCause:(id)a0 scope:(id)a1 date:(id)a2 error:(id *)a3;
- (char)_resetSyncAnchorWithCause:(id)a0 scope:(id)a1 error:(id *)a2;
- (void)_scheduleBatchedTransactionsLocked;
- (void)_schedulePendingUpdateApply;
- (void)_setSharingScopeIdentifier:(id)a0;
- (char)_shouldSyncScopeListWithOptions:(unsigned long long)a0;
- (char)_storeChangeSessionUpdate:(id)a0 error:(id *)a1;
- (void)_storeResetEvent:(id)a0 scopeIdentifier:(id)a1 date:(id)a2 cause:(id)a3;
- (void)_storeResetEvent:(id)a0 scopeIdentifier:(id)a1 date:(id)a2 pending:(char)a3 cause:(id)a4;
- (id)_storedDisabledFeatures;
- (void)_unschedulePendingUpdateApply;
- (void)_updateShouldSyncScopeList:(char)a0;
- (char)addPushPullGatekeeper:(id)a0 error:(id *)a1;
- (char)applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:(id)a0 error:(id *)a1;
- (void)assertCanRead;
- (void)assertCanWrite;
- (void)assertNoUnacknowledgedChanges;
- (char)beginChangeSession:(id)a0 withLibraryVersion:(id)a1 resetTracker:(id)a2 error:(id *)a3;
- (void)blockWriteTransactionsWithCompletionHandler:(id /* block */)a0;
- (char)canActivateScope:(id)a0 error:(id *)a1;
- (char)checkExpectedLibraryVersion:(id)a0 error:(id *)a1;
- (char)clearAllPushPullGatekeepersWithError:(id *)a0;
- (id)clientCacheIdentifier;
- (void)closeAndDeactivate:(char)a0 completionHandler:(id /* block */)a1;
- (id)createNewLibraryVersion;
- (char)createStoragesDynamically:(id)a0 error:(id *)a1;
- (char)deleteDynamicallyCreatedStorages:(id)a0 error:(id *)a1;
- (id)derivativesFilter;
- (void)dropSharingScopeIdentifier:(id)a0;
- (void)dropUnacknowledgedBatch;
- (void)emergencyClose;
- (char)forceApplyPendingChangeSessionUpdateWithError:(id *)a0;
- (void)getStatusDictionaryWithCompletionHandler:(id /* block */)a0;
- (char)hasPendingChangeSessionUpdate;
- (char)hasUnacknowledgedChanges;
- (id)initWithEngineLibrary:(id)a0;
- (char)isClientInSyncWithClientCache;
- (char)isFeatureDisabled:(id)a0;
- (void)keepUnacknowledgedBatch:(id)a0;
- (id)lastQuarantineCountReportDate;
- (unsigned long long)libraryOptions;
- (id)localResourceForCloudResource:(id)a0 recordClass:(Class *)a1;
- (char)mainScopeSupportsSharingScopeWithIdentifier:(id)a0;
- (id)newClientCacheViewUsesPushRepository:(char *)a0;
- (void)noteInvalidRecordScopedIdentifiersInPushSession:(id)a0;
- (void)noteOtherResetEvent:(id)a0 cause:(id)a1;
- (void)notePushRepositoryStoredSomeChanges;
- (void)noteResetSyncFinished;
- (void)performBatchedWriteTransactionBarrier;
- (void)performBatchedWriteTransactionBarrierWithCompletionBlock:(id /* block */)a0;
- (void)performBatchedWriteTransactionWithBlock:(id /* block */)a0 completionHandler:(id /* block */)a1;
- (id)performWriteTransactionByPassBlocker:(id)a0 withBlock:(id /* block */)a1 completionHandler:(id /* block */)a2;
- (id)performWriteTransactionWithBlock:(id /* block */)a0 completionHandler:(id /* block */)a1;
- (void)registerStorage:(id)a0;
- (char)resetCompleteSyncStateIncludingIDMappingWithCause:(id)a0 error:(id *)a1;
- (char)resetCompleteSyncStateWithCause:(id)a0 error:(id *)a1;
- (char)resetLocalSyncStateWithCause:(id)a0 date:(id)a1 error:(id *)a2;
- (char)resetLocalSyncStateWithCause:(id)a0 error:(id *)a1;
- (char)setShouldUpdateDisabledFeaturesWithError:(id *)a0;
- (void)startVacuumWithCompletionHandler:(id /* block */)a0;
- (void)stopVacuum;
- (char)storeClientIsInSyncWithClientCacheWithError:(id *)a0;
- (char)storeDerivativesFilter:(id)a0 error:(id *)a1;
- (char)storeLastQuarantineCountReportDate:(id)a0 error:(id *)a1;
- (char)storeLibraryVersion:(id)a0 withError:(id *)a1;
- (void)storeSharingScopeIdentifier:(id)a0;
- (char)storeUserIdentifier:(id)a0 error:(id *)a1;
- (char)supportsSharingScopeWithIdentifier:(id)a0 forScopeWithIdentifier:(id)a1;
- (void)testKey:(id)a0 value:(id)a1 completionHandler:(id /* block */)a2;
- (void)transactionDidFinish;
- (id)unacknowledgedChangeWithLocalScopedIdentifier:(id)a0;
- (char)updateDisabledFeatures:(id)a0 didReset:(char *)a1 error:(id *)a2;
- (char)updateLibraryOptions:(unsigned long long)a0 error:(id *)a1;
- (void)wipeStoreAtNextOpeningWithReason:(id)a0 completionBlock:(id /* block */)a1;
- (void)writeTransactionDidFail;
- (void)writeTransactionDidSucceed;

@end
