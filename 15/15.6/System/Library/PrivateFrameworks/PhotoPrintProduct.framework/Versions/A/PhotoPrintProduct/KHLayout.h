@class NSDate, NSString, NSMutableSet, NSLock, NSMutableDictionary, NSMutableString, NSMutableArray, KHFrame, KHTreatment, KHEnvironment, NSUndoManager;

@interface KHLayout : KHModel <KHSelectable, KHJSONGeneratorProtocol, KHSortingProtocol> {
    long long _treatmentId;
    long long _designTag;
    unsigned long long _layoutTypeId;
    NSString *_name;
    double _width;
    double _height;
    long long _holeCount;
    long long _showsPageNumber;
    long long _thumbnailId;
    long long _hasPhotoFrames;
    long long _hasTextFrames;
    long long _hasMapFrames;
    unsigned long long _mirror;
    long long _drawingBehavior;
    NSString *_alternativeLayoutIds;
    double _favorability;
    long long _disableBackground;
    NSMutableDictionary *_attributeCache;
    KHTreatment *_treatment;
    double _bindingEdgeTrim;
    KHFrame *_treatmentFrame;
    KHFrame *_frameMat;
    KHEnvironment *_environment;
    KHFrame *_parentFrame;
    NSMutableString *_aspectRatioString;
    NSMutableString *_aspectRatioStringWithWildcards;
    NSMutableArray *_framesByDrawingOrder;
    NSMutableDictionary *_cachedPageTypes;
    NSMutableArray *_selectionFrames;
    NSMutableSet *_alternativeLayouts;
    long long _updateCount;
    NSLock *_environmentLock;
    NSLock *_treatmentLock;
    NSLock *_renderingLock;
    char _isRendering;
    NSLock *_pageTypeCacheLock;
    NSLock *_frameCacheLock;
    char _ignoresBehaviors;
    char _hovering;
    char _isFullBleed;
    char _didCacheFullBleedTest;
    char _hasFullBleedArtFrame;
    char _didCacheFullBleedArtTest;
    char _changingOrientation;
    NSMutableDictionary *_increasedHoleCountLayouts;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain) NSDate *modificationDate;
@property (retain) NSDate *modificationDateInBatchUpdates;
@property char notifyProjectAfterBatchUpdates;
@property (readonly, nonatomic) NSUndoManager *undoManager;
@property (nonatomic) struct CGSize { double x0; double x1; } size;
@property char locked;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)bestMatchForAspectRatios:(id)a0 inLayouts:(id)a1 matchingLengthOnly:(char)a2 allowMap:(char)a3;
+ (id)flapLayoutsForTheme:(id)a0 andProduct:(id)a1;
+ (id)layoutsWithHoleCount:(long long)a0 inLayouts:(id)a1;
+ (id)fullBleedPhotoLayoutsInLayouts:(id)a0;
+ (id)allLayoutsFromDatabase:(id)a0;
+ (id)allLayoutsSortedBy:(unsigned long long)a0 fromDatabase:(id)a1;
+ (id)backCoverLayoutsForTheme:(id)a0 andProduct:(id)a1;
+ (id)bestMatchForAspectRatios:(id)a0 inAlternativeLayoutsOf:(id)a1;
+ (id)bestMatchForAspectRatios:(id)a0 inLayouts:(id)a1;
+ (id)bestMatchForUnorderedAspectRatios:(id)a0 inAlternativeLayoutsOf:(id)a1;
+ (id)bestMatchForUnorderedAspectRatios:(id)a0 inLayouts:(id)a1;
+ (id)coverLayoutsForTheme:(id)a0 andProduct:(id)a1;
+ (id)coverLayoutsForTheme:(id)a0 andProduct:(id)a1 withHoleCount:(long long)a2;
+ (Class)frameClass;
+ (id)generateModelFromJSON:(id)a0 inDatabase:(id)a1 bundlePath:(id)a2;
+ (char)hasLayoutWithHoleCount:(long long)a0 inLayouts:(id)a1;
+ (id)holeCountSequenceForLayouts:(id)a0;
+ (id)insideLayoutsForTheme:(id)a0 andProduct:(id)a1;
+ (id)layoutForKey:(long long)a0;
+ (id)layoutForKey:(long long)a0 fromDatabase:(id)a1;
+ (id)layoutForTheme:(id)a0 andProduct:(id)a1 withLegacyName:(id)a2;
+ (id)layoutForTheme:(id)a0 andProduct:(id)a1 withName:(id)a2;
+ (id)layoutsForTheme:(id)a0 andProduct:(id)a1;
+ (id)layoutsForTheme:(id)a0 andProduct:(id)a1 sortedBy:(unsigned long long)a2;
+ (id)layoutsOfType:(unsigned long long)a0 inLayouts:(id)a1;
+ (id)layoutsSuitableForPhotoCount:(unsigned long long)a0 inLayouts:(id)a1;
+ (long long)maximumHoleCountForLayouts:(id)a0;
+ (double)maximumLayoutFavorabilityForLayouts:(id)a0;
+ (id)modifyModelFromJSON:(id)a0 inDatabase:(id)a1 bundlePath:(id)a2;
+ (id)perfectMatchesForAspectRatios:(id)a0 inLayouts:(id)a1;
+ (id)perfectMatchesForUnorderedAspectRatios:(id)a0 inLayouts:(id)a1;
+ (void)scanFrame:(id)a0 holeCount:(long long *)a1 hasText:(char *)a2 primarilyText:(char *)a3 hasMap:(char *)a4 primarilyMap:(char *)a5;
+ (id)spreadLayoutsInLayouts:(id)a0;

- (void)dealloc;
- (id)init;
- (id)name;
- (void)setName:(id)a0;
- (void)setEnvironment:(id)a0;
- (id)environment;
- (double)height;
- (void)setHeight:(double)a0;
- (void)setWidth:(double)a0;
- (double)width;
- (id)attributes;
- (id)calendarDate;
- (void)remove;
- (void)unload;
- (id)accessibilityLabel;
- (id)accessibilityRoleDescription;
- (void)beginUpdates;
- (void)commonInit;
- (void)endUpdates;
- (id)frames;
- (void)performBatchUpdates:(id /* block */)a0;
- (id)attributeForKey:(id)a0;
- (long long)pageNumber;
- (id)debugQuickLookObject;
- (id)debugInfo;
- (void)encodeWithDictionary:(id)a0;
- (id)theme;
- (id)formattedDescription;
- (void)setPrimaryTextColor:(id)a0;
- (void)setSecondaryTextColor:(id)a0;
- (void)setTreatmentId:(long long)a0;
- (long long)treatmentId;
- (id)parentFrame;
- (char)isFullBleed;
- (id)uniqueName;
- (unsigned long long)layoutTypeId;
- (void)setLayoutTypeId:(unsigned long long)a0;
- (void)removeAttributeForKey:(id)a0;
- (void)frameDidChange:(id)a0;
- (id)treatment;
- (char)isHovering;
- (void)setIsHovering:(char)a0;
- (id)pageName;
- (id)baseLayout;
- (long long)holeCount;
- (void)setHoleCount:(long long)a0;
- (unsigned long long)mirror;
- (id)JSONRepresentation;
- (void)setMirror:(unsigned long long)a0;
- (void)reflow;
- (long long)thumbnailId;
- (id)masterLayout;
- (void)setCalendarDate:(id)a0;
- (id)project;
- (char)applyMaster:(id)a0 mirror:(char)a1 allowResize:(char)a2;
- (double)bindingEdgeTrim;
- (void)cacheDesignTag:(long long)a0;
- (void)cacheHoleCount:(long long)a0;
- (void)destroyFrameMat;
- (long long)drawingBehavior;
- (id)duplicateFrame:(id)a0;
- (id)framesSortedBy:(unsigned long long)a0;
- (double)heightWithBleed;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForFrameMat;
- (void)setThumbnailId:(long long)a0;
- (void)setWidth:(double)a0 force:(char)a1;
- (void)didRemoveFrame:(id)a0;
- (id)setValue:(id)a0 forKey:(id)a1 type:(id)a2 momentary:(char)a3;
- (long long)showsPageNumber;
- (void)_didPerformModification:(char)a0;
- (id)_layerFramesOnFrame:(id)a0;
- (void)_mirrorFramesMomentary;
- (void)_willPerformModification:(char)a0;
- (id)addAttributeValue:(id)a0 forKey:(id)a1 type:(id)a2;
- (id)addAttributeValue:(id)a0 forKey:(id)a1 type:(id)a2 momentary:(char)a3;
- (id)addDefaultFrameOfType:(id)a0;
- (void)addSelectionFrame:(id)a0 rotation:(double)a1 strokeStyle:(unsigned long long)a2;
- (void)alignFrames:(id)a0 alignType:(unsigned long long)a1;
- (id)alternativeLayoutIds;
- (id)alternativeLayouts;
- (void)applyBehavior:(id)a0;
- (char)applyMaster:(id)a0 mirror:(char)a1;
- (void)applyRepresentativeLayout:(id)a0;
- (id)artFramesSortedBy:(unsigned long long)a0;
- (id)aspectRatioStringPhotoFrames;
- (id)backgroundPhotoFrame;
- (struct CGPoint { double x0; double x1; })basePoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (double)baseRotation;
- (id)bindableTreatment;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectOfFrames;
- (id)brandingFillFrames;
- (void)cacheAlternativeLayoutIds:(id)a0;
- (void)cacheDisableBackground:(long long)a0;
- (void)cacheDrawingBehavior:(long long)a0;
- (void)cacheFavorability:(double)a0;
- (void)cacheHasMapFrames:(long long)a0;
- (void)cacheHasPhotoFrames:(long long)a0;
- (void)cacheHasTextFrames:(long long)a0;
- (void)cacheHeight:(double)a0;
- (void)cacheLayoutTypeId:(unsigned long long)a0;
- (void)cacheMirror:(unsigned long long)a0;
- (void)cacheName:(id)a0;
- (void)cacheParentFrame:(id)a0;
- (void)cacheShowsPageNumber:(long long)a0;
- (void)cacheThumbnailId:(long long)a0;
- (void)cacheTreatmentId:(long long)a0;
- (void)cacheWidth:(double)a0;
- (void)cacheWildcardScale:(double)a0;
- (id)calendarFramesSortedBy:(unsigned long long)a0;
- (void)clearAspectRatioString;
- (void)clearBehaviorCache;
- (void)clearFrameCaches;
- (void)createFrameMat;
- (void)createTreatmentFrame;
- (long long)designTag;
- (void)destroyTreatmentFrame;
- (void)didAddFrame:(id)a0;
- (long long)disableBackground;
- (void)distributeFrames:(id)a0 distributeType:(unsigned long long)a1;
- (void)drawBackgroundInContext:(struct CGContext { } *)a0 scale:(double)a1 drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (unsigned long long)emptyHoleCount;
- (unsigned long long)emptyHoleCountIncludeBackground:(char)a0;
- (id)emptyPhotoFramesSortedBy:(unsigned long long)a0;
- (id)emptyPhotoFramesSortedBy:(unsigned long long)a0 includeBackground:(char)a1;
- (void)evaluateEnvironmentFromFrame:(id)a0;
- (double)favorability;
- (void)fillContext:(struct CGContext { } *)a0 scale:(double)a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)fillContext:(struct CGContext { } *)a0 scale:(double)a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 clippingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 includeBackground:(char)a4 environment:(id)a5;
- (void)fillContext:(struct CGContext { } *)a0 scale:(double)a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 includeBackground:(char)a3;
- (void)fillContext:(struct CGContext { } *)a0 scale:(double)a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 includeBackground:(char)a3 environment:(id)a4;
- (void)fillContext:(struct CGContext { } *)a0 scale:(double)a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 includeBackground:(char)a3 leftFacing:(char)a4 environment:(id)a5;
- (void)fillThumbnailContext:(struct CGContext { } *)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)fillTreatmentContext:(struct CGContext { } *)a0 scale:(double)a1 environment:(id)a2;
- (id)frameAtPoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (id)frameMat;
- (void)frameRectDidChangeForFrame:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)frameRectWillChangeForFrame:(id)a0 toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)frameWillChange:(id)a0;
- (id)framesOfType:(unsigned long long)a0 sortedBy:(unsigned long long)a1 includeLayerFrames:(char)a2 includeBackground:(char)a3 includeChildFrames:(char)a4;
- (id)framesSortedBy:(unsigned long long)a0 includeBackground:(char)a1;
- (id)framesSortedBy:(unsigned long long)a0 includeChildFrames:(char)a1;
- (id)framesSortedBy:(unsigned long long)a0 includeLayerFrames:(char)a1;
- (id)framesSortedBy:(unsigned long long)a0 includeLayerFrames:(char)a1 includeBackground:(char)a2 includeChildFrames:(char)a3;
- (id)framesWithBoilerPlateText;
- (id)framesWithClippedText;
- (id)framesWithContentIssueOfType:(unsigned long long)a0;
- (id)framesWithCroppedPhotos;
- (id)framesWithEmptyPhotos;
- (id)framesWithInvalidPhotos;
- (id)framesWithLowResolutionPhotos;
- (id)framesWithMissingPhotos;
- (id)framesWithUserEditedText;
- (char)hasFullBleedArtFrame;
- (long long)hasMapFrames;
- (long long)hasPhotoFrames;
- (long long)hasTextFrames;
- (id)hyperlinkFramesSortedBy:(unsigned long long)a0;
- (char)ignoresBehaviors;
- (id)increasedHoleCountLayoutForTheme:(id)a0 andProduct:(id)a1;
- (id)initWithUuid:(id)a0 forEntity:(id)a1;
- (void)invalidateDrawingFrameCache;
- (char)isChangingOrientation;
- (char)isPageType:(unsigned long long)a0 forTheme:(id)a1;
- (char)isSimilarToModel:(id)a0 skippingFields:(id)a1 differences:(id *)a2;
- (void)loadAttributes;
- (id)mapFramesSortedBy:(unsigned long long)a0;
- (id)mapFramesSortedBy:(unsigned long long)a0 includeBackground:(char)a1;
- (id)mergeFrames:(id)a0;
- (void)moveFrame:(id)a0 toIndex:(unsigned long long)a1;
- (void)moveToFront:(id)a0;
- (id)photoFramesSortedBy:(unsigned long long)a0;
- (id)photoFramesSortedBy:(unsigned long long)a0 includeBackground:(char)a1;
- (id)placedPhotoIDs;
- (id)placedPhotoIDsIncludeBackground:(char)a0;
- (id)placedPhotoInfos;
- (id)primaryTextFrames;
- (void)projectDidChange;
- (void)projectWillChange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectWithScale:(double)a0;
- (id)representativeLayout;
- (void)resizeFrames:(id)a0 resizeType:(unsigned long long)a1;
- (id)secondaryTextFrames;
- (struct CGPath { } *)selectionPathAtScale:(double)a0;
- (void)sendToBack:(id)a0;
- (void)setAlternativeLayoutIds:(id)a0;
- (void)setBackgroundTreatment:(id)a0 momentary:(char)a1;
- (void)setBindableTreatment:(id)a0;
- (void)setBindingEdgeTrim:(double)a0;
- (void)setBrandingFillColor:(id)a0;
- (void)setChangingOrientation:(char)a0;
- (void)setDesignTag:(long long)a0;
- (void)setDisableBackground:(long long)a0;
- (void)setDrawingBehavior:(long long)a0;
- (void)setFavorability:(double)a0;
- (void)setFrameTreatmentFillColor:(id)a0;
- (void)setFrameTreatmentStrokeColor:(id)a0;
- (void)setHasMapFrames:(long long)a0;
- (void)setHasPhotoFrames:(long long)a0;
- (void)setHasTextFrames:(long long)a0;
- (void)setHeight:(double)a0 force:(char)a1;
- (void)setIgnoresBehaviors:(char)a0;
- (void)setShowsPageNumber:(long long)a0;
- (void)setTextOnlyBehaviorColor:(id)a0;
- (id)setValue:(id)a0 forKey:(id)a1 type:(id)a2;
- (void)setWildcardScale:(double)a0;
- (long long)sortByDefault:(id)a0;
- (long long)sortByHoleCount:(id)a0;
- (long long)sortById:(id)a0;
- (long long)sortByName:(id)a0;
- (long long)sortByUsage:(id)a0;
- (id)splitFrames:(id)a0 withGap:(double)a1 columns:(unsigned long long)a2 rows:(unsigned long long)a3;
- (id)strokeBehaviorFrames;
- (id)textFramesSortedBy:(unsigned long long)a0;
- (id)textFramesSortedBy:(unsigned long long)a0 includeBackground:(char)a1;
- (id)textFramesSortedBy:(unsigned long long)a0 includeBackground:(char)a1 textFramesOption:(unsigned long long)a2;
- (id)textOnlyBehaviorFrames;
- (id)treatmentFillFrames;
- (id)treatmentFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trimmedRectForScale:(double)a0;
- (char)undoRedoApplyMaster:(id)a0 mirror:(char)a1 allowResize:(char)a2;
- (void)undoRedoSetBackgroundTreatment:(id)a0 linked:(char)a1;
- (void)updateFrameMat;
- (double)widthWithBleed;
- (double)wildcardScale;
- (char)wildcardsEnabled;
- (void)willAddFrame:(id)a0;
- (void)willRemoveFrame:(id)a0;
- (void)writeValue:(id)a0 toField:(id)a1;

@end
