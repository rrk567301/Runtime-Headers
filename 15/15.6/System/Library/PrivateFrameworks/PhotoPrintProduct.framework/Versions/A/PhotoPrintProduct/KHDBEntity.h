@class NSMutableDictionary, NSObject, KHDBLockedDictionary, KHDBLockedSet, KHDBLockedRidList, KHDBPreparedSql, KHDBDatabase, NSMutableArray, KHDBRidIter, NSString, KHDBRidIndexEntity, NSMutableSet, KHDBDatabaseManager, NSCountedSet;
@protocol OS_dispatch_queue;

@interface KHDBEntity : NSObject {
    int _spinlock;
    KHDBDatabase *_database;
    KHDBDatabaseManager *_databaseManager;
    NSString *_tableName;
    NSMutableArray *_fieldDefs;
    NSMutableDictionary *_fieldDefsByName;
    NSMutableArray *_derivedFieldDefs;
    NSMutableArray *_fieldNames;
    NSString *_primaryKeyField;
    NSMutableArray *_multiColumnIndexes;
    NSMutableArray *_uniqueMultiColumnIndexes;
    NSString *_infoDictionaryColumns;
    Class _modelClass;
    int _numOutstandingWrites;
    char _hasModelIdField;
    char _hasUuidField;
    char _hasCreateDateField;
    char _hasModDateField;
    char _hasIsInTrashField;
    char _supportsOpenClose;
    char _hasInfoDictionary;
    char _nextModelIdIsDirty;
    unsigned long long _nextModelId;
    char _canFlushModels;
    NSMutableDictionary *_cachedModelsByUuid;
    NSMutableDictionary *_cachedModelsById;
    KHDBLockedRidList *_cachedModelIdList;
    KHDBRidIter *_flushModelIdIterator;
    NSObject<OS_dispatch_queue> *_cachedModelsQueue;
    NSMutableSet *_cachedModels;
    NSString *_allFieldsList;
    NSString *_autoLoadFieldList;
    KHDBPreparedSql *_persistModelSql;
    KHDBPreparedSql *_copyRecordSql;
    KHDBLockedDictionary *_commonQueries;
    KHDBLockedDictionary *_commonDistinctQueries;
    KHDBLockedDictionary *_commonUpdates;
    KHDBLockedDictionary *_commonModifies;
    KHDBLockedDictionary *_commonMultiUpdates;
    KHDBLockedDictionary *_commonDeletes;
    KHDBLockedDictionary *_inMemoryFilters;
    KHDBLockedDictionary *_entityMemoryFilters;
    KHDBLockedSet *_reusableStrings;
    KHDBLockedDictionary *_ridIndexes;
    KHDBLockedDictionary *_ridIndexesByFieldName;
    KHDBLockedRidList *_allModelIds;
    NSCountedSet *_allQueriesUsed;
    NSCountedSet *_couldHaveBeenInMemory;
    unsigned long long _indentLevel;
    KHDBLockedDictionary *_relationshipCaches;
}

@property (retain, nonatomic) KHDBRidIndexEntity *ridIndexEntity;
@property (nonatomic) char useOverreleaseChecking;
@property (nonatomic) char entityIsClosing;
@property (nonatomic) char canCreateModels;
@property (nonatomic) char canPrepareSql;
@property (nonatomic) char allModelsLoaded;
@property (nonatomic) char canFlushModels;
@property (nonatomic) unsigned long long flushModelCount;

+ (void)initialize;
+ (id)makeUpdateList:(id)a0;
+ (id)stripCComments:(id)a0;
+ (void)addObjectOrNull:(id)a0 toArray:(id)a1;
+ (void)appendToArray:(id)a0 ofType:(int)a1 forQuery:(id)a2 withArgs:(id)a3;
+ (void)appendToArray:(id)a0 ofType:(int)a1 withCanceler:(id)a2 forQuery:(id)a3 withArgs:(id)a4;
+ (id)arrayOfType:(int)a0 forQuery:(id)a1 withArgs:(id)a2;
+ (id)arrayOfType:(int)a0 withCanceler:(id)a1 forQuery:(id)a2 withArgs:(id)a3;
+ (id)bucketReaderForSqlType:(int)a0;
+ (id)capitalizedString:(id)a0;
+ (id)castToObjectFor:(id)a0 withSqlType:(int)a1;
+ (id)classForSqlType:(int)a0;
+ (id)classNameForName:(id)a0;
+ (void)createEntitiesForDatabaseFile:(id)a0;
+ (void)createEntitiesForDatabaseFile:(id)a0 asReadOnly:(char)a1;
+ (void)delayAfterBeingPostponed;
+ (id)entitiesFromDatabaseFile:(id)a0;
+ (int)fieldTypeFromDefinition:(id)a0;
+ (unsigned long long)fillDropInBucket:(id)a0 fromResultSet:(id)a1 forColumnIndex:(long long)a2;
+ (void)flushModels:(id)a0;
+ (void)flushModelsAggressively:(id)a0;
+ (id)indexedReaderForSqlType:(int)a0;
+ (id)instanceNameForName:(id)a0;
+ (id)makeList:(id)a0;
+ (char)needRetainForSqlType:(int)a0;
+ (id)newLoadDataFromResultSet:(id)a0 forFieldsWithDefs:(id)a1;
+ (id)normalizeSql:(id)a0;
+ (id)objectFromResultSet:(id)a0 forType:(int)a1 forColumnIndex:(long long)a2;
+ (id)readerForSqlType:(int)a0;
+ (id)setOfType:(int)a0 forQuery:(id)a1 withArgs:(id)a2;
+ (id)setOfType:(int)a0 withCanceler:(id)a1 forQuery:(id)a2 withArgs:(id)a3;
+ (id)sqlTypeStringForSqlType:(int)a0;
+ (id)stringForSqlType:(int)a0;
+ (id)stripSqlComments:(id)a0;
+ (id)tablePrefixes;

- (void)dealloc;
- (id)description;
- (id)database;
- (void)update:(id)a0;
- (unsigned long long)indentLevel;
- (id)tableName;
- (Class)modelClass;
- (void)setModelClass:(Class)a0;
- (void)updateModel:(id)a0;
- (id)fieldNames;
- (void)executeUpdate:(id)a0;
- (void)deleteModel:(id)a0;
- (id)allCachedModels;
- (void)didOpenDatabase;
- (char)hasModelIdField;
- (void)incrIndentLevel;
- (char)isModelIdInUse:(unsigned long long)a0;
- (id)numberValueForField:(id)a0 forModelId:(id)a1;
- (id)primaryKeyField;
- (id)ridIndexListForIndexName:(id)a0 value:(id)a1;
- (id)sqlForUpdateOf:(id)a0;
- (id)stringValueForField:(id)a0 forModelId:(id)a1;
- (id)cachedModelsForIdList:(id)a0 notFound:(id *)a1;
- (void)copyRecordsToEntity:(id)a0 where:(id)a1 args:(id)a2;
- (void)decrIndentLevel;
- (void)dispatch_async:(id /* block */)a0;
- (char)hasModDateField;
- (id)modelsForUuids:(id)a0;
- (id)persistModelSql;
- (void)reportCachedSql;
- (id)reusableString:(id)a0;
- (void)saveNextModelId;
- (void)_dispatch_async_suspend:(char)a0 withBlock:(id /* block */)a1;
- (void)_dispatch_sync_if_needed_suspend:(char)a0 withBlock:(id /* block */)a1;
- (char)_logErrors;
- (void)addDerivedField:(id)a0 withType:(int)a1;
- (void)addField:(id)a0 withType:(int)a1;
- (void)addField:(id)a0 withType:(int)a1 changeMask:(unsigned long long)a2;
- (void)addField:(id)a0 withType:(int)a1 options:(int)a2;
- (void)addField:(id)a0 withType:(int)a1 options:(int)a2 changeMask:(unsigned long long)a3;
- (void)addMultiColumnIndex:(id)a0 unique:(char)a1;
- (void)addRidIndex:(id)a0 forFieldName:(id)a1;
- (void)addRidIndex:(id)a0 forIndexName:(id)a1;
- (void)addRidIndexForField:(id)a0 options:(int)a1;
- (void)addRidIndexForFields:(id)a0;
- (id)addressForModelId:(id)a0;
- (id)addressesForModelIds:(id)a0;
- (id)allCachedModelIdList;
- (id)allFieldsList;
- (id)allModelIds;
- (id)anyModelFromQuery:(id)a0;
- (id)anyModelWhere:(id)a0;
- (id)anyModelWhere:(id)a0 args:(id)a1;
- (void)appendAddressesToArray:(id)a0 forQuery:(id)a1 withArgs:(id)a2;
- (void)appendAddressesToArray:(id)a0 orderedBy:(id)a1 where:(id)a2 args:(id)a3;
- (void)appendAddressesToArray:(id)a0 withCanceler:(id)a1 forQuery:(id)a2 withArgs:(id)a3;
- (id)arrayForColumn:(id)a0 fromQuery:(id)a1;
- (id)arrayOfModelsFromQuery:(id)a0;
- (id)arrayOfModelsWhere:(id)a0;
- (id)arrayOfModelsWhere:(id)a0 args:(id)a1;
- (void)async_deleteModelsWhere:(id)a0;
- (void)async_deleteModelsWhere:(id)a0 args:(id)a1;
- (id)autoLoadFieldList;
- (id)autoLoadFields;
- (char)boolValueForField:(id)a0 forModelId:(id)a1;
- (id)cacheModel:(id)a0;
- (unsigned long long)cachedModelCount;
- (id)cachedModelForId:(unsigned long long)a0;
- (id)cachedModelForIdNumber:(id)a0;
- (id)cachedModelForUuid:(id)a0;
- (id)cachedModels;
- (id)cachedModelsForIds:(id)a0 notFound:(id *)a1;
- (id)cachedModelsForUuids:(id)a0 uuidsNotFound:(id)a1;
- (id)cachedModelsQueue;
- (id)cachedQueryInDictionary:(id)a0 selectList:(id)a1 whereClause:(id)a2;
- (unsigned long long)changeMaskForField:(id)a0;
- (char)checkForModelOverreleases;
- (void)copyFields:(id)a0 toEntity:(id)a1 withInsertSql:(id)a2 fromQuery:(id)a3;
- (void)copyFields:(id)a0 toEntity:(id)a1 withInsertSql:(id)a2 where:(id)a3;
- (void)copyFields:(id)a0 toEntity:(id)a1 withInsertSql:(id)a2 where:(id)a3 args:(id)a4;
- (id)copyRecordSql;
- (void)copyRecordsToEntity:(id)a0 fromQuery:(id)a1;
- (void)copyRecordsToEntity:(id)a0 where:(id)a1;
- (void)copyRecordsToEntity:(id)a0 withCanceler:(id)a1 where:(id)a2;
- (void)copyRecordsToEntity:(id)a0 withCanceler:(id)a1 where:(id)a2 args:(id)a3;
- (void)copyRecordsWithMappings:(id)a0 toEntity:(id)a1 fromQuery:(id)a2;
- (void)copyRecordsWithMappings:(id)a0 toEntity:(id)a1 where:(id)a2;
- (void)copyRecordsWithMappings:(id)a0 toEntity:(id)a1 where:(id)a2 args:(id)a3;
- (unsigned long long)countOfModelsFromQuery:(id)a0;
- (unsigned long long)countOfModelsWhere:(id)a0;
- (unsigned long long)countOfModelsWhere:(id)a0 args:(id)a1;
- (long long)createIndexOnColumnNames:(id)a0 unique:(char)a1;
- (char)createIndexOnField:(id)a0;
- (id)createRelationshipCacheForFieldName:(id)a0 forKeyField:(id)a1 isOneToOne:(char)a2;
- (char)createTableIfMissing;
- (id)dataValueForField:(id)a0 forModelId:(id)a1;
- (id)databaseMgr;
- (id)dateValueForField:(id)a0 forModelId:(id)a1;
- (void)decrementOutstandingWrites;
- (void)delayAfterBeingPostponed;
- (void)deleteModels:(id)a0;
- (void)deleteModelsForIdList:(id)a0;
- (void)deleteModelsForIds:(id)a0;
- (void)deleteModelsForIds:(id)a0 deleteInfoDictionary:(char)a1;
- (char)deleteModelsFromQuery:(id)a0;
- (char)deleteModelsWhere:(id)a0;
- (char)deleteModelsWhere:(id)a0 args:(id)a1;
- (void)deleteOfModelObjectWithId:(id)a0;
- (void)deleteOfModelObjectWithId:(id)a0 deleteInfoDictionary:(char)a1;
- (void)deleteOfModelsWithIds:(id)a0;
- (void)deleteOfModelsWithIds:(id)a0 deleteInfoDictionary:(char)a1;
- (id)dictionaryForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 fromQuery:(id)a3;
- (id)dictionaryForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 where:(id)a3;
- (id)dictionaryForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 where:(id)a3 args:(id)a4;
- (id)dictionaryOfListsForKey:(id)a0 value:(id)a1 fromQuery:(id)a2;
- (id)dictionaryOfListsForKey:(id)a0 value:(id)a1 where:(id)a2;
- (id)dictionaryOfListsForKey:(id)a0 value:(id)a1 where:(id)a2 args:(id)a3;
- (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 fromQuery:(id)a3;
- (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 where:(id)a3;
- (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 where:(id)a3 args:(id)a4;
- (void)dispatch_sync_if_needed:(id /* block */)a0;
- (void)dropRelationshipCacheForFieldName:(id)a0 forKeyField:(id)a1;
- (id)entityMemoryFilterForWhere:(id)a0;
- (void)executeMultiUpdate:(id)a0 withListOfArgs:(id)a1;
- (void)executeUpdate:(id)a0 withArgs:(id)a1;
- (id)fieldDefForField:(id)a0;
- (id)fieldDefs;
- (id)fieldDefsForFields:(id)a0;
- (id)fieldKeyForFieldName:(id)a0;
- (id)fieldTypesForFields:(id)a0;
- (void)flushAllModels;
- (void)flushModels;
- (void)flushModels:(char)a0;
- (void)generateDatabaseClassForDatabase:(id)a0 withEntities:(id)a1 asReadOnly:(char)a2;
- (void)generateFilesAsReadOnly:(char)a0;
- (id)hasCachedModelForModelId:(id)a0;
- (char)hasCreateDateField;
- (char)hasIndexForField:(id)a0;
- (char)hasInfoDictionary;
- (char)hasIsInTrashField;
- (char)hasOutstandingWrites;
- (char)hasUuidField;
- (id)inMemoryFilterForWhere:(id)a0;
- (void)incrementOutstandingWrites;
- (id)infoDictionariesWhere:(id)a0;
- (id)infoDictionariesWhere:(id)a0 args:(id)a1;
- (id)infoDictionaryColumns;
- (id)initWithTableName:(id)a0 forDatabaseManager:(id)a1;
- (id)initWithTableName:(id)a0 forDatabaseManager:(id)a1 forDatabase:(id)a2;
- (void)insertIntoRidList:(id)a0 idsForColumn:(id)a1 fromQuery:(id)a2;
- (void)insertIntoRidList:(id)a0 idsForColumn:(id)a1 where:(id)a2;
- (void)insertIntoRidList:(id)a0 idsForColumn:(id)a1 where:(id)a2 args:(id)a3;
- (void)insertIntoRidList:(id)a0 withCanceler:(id)a1 idsForColumn:(id)a2 where:(id)a3;
- (void)insertIntoRidList:(id)a0 withCanceler:(id)a1 idsForColumn:(id)a2 where:(id)a3 args:(id)a4;
- (long long)intValueForField:(id)a0 forModelId:(id)a1;
- (void)invalidateNextModelId;
- (id)iteratorFromQuery:(id)a0;
- (id)iteratorWhere:(id)a0;
- (id)iteratorWhere:(id)a0 args:(id)a1;
- (id)loadArrayOfModelsFromBucket:(id)a0 limit:(unsigned long long)a1;
- (id)loadArrayOfModelsFromResultSet:(id)a0 limit:(unsigned long long)a1;
- (id)loadInfoDictionariesFromResultSet:(id)a0;
- (id)loadModelFromBucket:(id)a0;
- (id)loadModelFromResultSet:(id)a0;
- (id)loadModelsFromBucket:(id)a0 limit:(unsigned long long)a1;
- (id)loadModelsFromIdResultSet:(id)a0 limit:(unsigned long long)a1;
- (id)loadModelsFromResultSet:(id)a0 limit:(unsigned long long)a1;
- (void)loadRelationshipCache:(id)a0;
- (void)loadRelationshipCache:(id)a0 where:(id)a1;
- (void)loadRelationshipCache:(id)a0 where:(id)a1 args:(id)a2;
- (id)mappingsForEntity;
- (char)modelExistsFromQuery:(id)a0;
- (char)modelExistsWhere:(id)a0;
- (char)modelExistsWhere:(id)a0 args:(id)a1;
- (id)modelForId:(id)a0;
- (id)modelForUuid:(id)a0;
- (id)modelIdListFromQuery:(id)a0;
- (id)modelIdListWhere:(id)a0;
- (id)modelIdListWhere:(id)a0 args:(id)a1;
- (id)modelIdsFromQuery:(id)a0;
- (id)modelIdsWhere:(id)a0;
- (id)modelIdsWhere:(id)a0 args:(id)a1;
- (id)modelUuidsFromQuery:(id)a0;
- (id)modelUuidsWhere:(id)a0;
- (id)modelUuidsWhere:(id)a0 args:(id)a1;
- (id)modelsForIdList:(id)a0;
- (id)modelsForIdList:(id)a0 withCanceler:(id)a1;
- (id)modelsForIds:(id)a0;
- (id)modelsForIds:(id)a0 withCanceler:(id)a1;
- (id)modelsForUuids:(id)a0 withCanceler:(id)a1;
- (id)modelsFromQuery:(id)a0;
- (id)modelsWhere:(id)a0;
- (id)modelsWhere:(id)a0 args:(id)a1;
- (id)nestedDictionariesForOuterKey:(id)a0 innerKey:(id)a1 value:(id)a2 fromQuery:(id)a3;
- (id)nestedDictionariesForOuterKey:(id)a0 innerKey:(id)a1 value:(id)a2 where:(id)a3;
- (id)nestedDictionariesForOuterKey:(id)a0 innerKey:(id)a1 value:(id)a2 where:(id)a3 args:(id)a4;
- (unsigned long long)nextModelId;
- (id)persistFields;
- (void)persistModel:(id)a0;
- (id)readForDupSqlWhere:(id)a0;
- (void)rebuildRidIndexes;
- (void)rebuildRidIndexes:(id /* block */)a0;
- (void)recomputeAllModelIds;
- (void)recomputeNextModelId;
- (void)refreshPreparedSql;
- (id)registerEntityMemoryFilterForWhere:(id)a0;
- (id)relationshipCacheForFieldName:(id)a0 forKeyField:(id)a1;
- (void)releaseExtraRetainsForModel:(id)a0;
- (void)repairRidIndexes;
- (void)repairRidIndexes:(id /* block */)a0;
- (void)resetUuidForModel:(id)a0 fromUuid:(id)a1;
- (unsigned long long)retainCountForCachedModel:(id)a0;
- (void)retainExtraForModel:(id)a0;
- (id)ridIndexForFieldName:(id)a0;
- (id)ridIndexForIndexName:(id)a0;
- (id)ridIndexListForIndexName:(id)a0 boolValue:(char)a1;
- (id)ridIndexes;
- (id)ridIndexesForFieldName:(id)a0;
- (void)saveRidIndexes;
- (id)select:(id)a0 orderedBy:(id)a1 where:(id)a2 args:(id)a3;
- (id)selectDictionaryOfDictionaries:(id)a0 forKey:(id)a1 fromQuery:(id)a2;
- (id)selectDictionaryOfDictionaries:(id)a0 forKey:(id)a1 withCanceler:(id)a2 where:(id)a3;
- (id)selectDictionaryOfDictionaries:(id)a0 forKey:(id)a1 withCanceler:(id)a2 where:(id)a3 args:(id)a4;
- (id)selectDictionaryOfObjects:(id)a0 forKey:(id)a1 fromQuery:(id)a2;
- (id)selectDictionaryOfObjects:(id)a0 forKey:(id)a1 withCanceler:(id)a2 where:(id)a3;
- (id)selectDictionaryOfObjects:(id)a0 forKey:(id)a1 withCanceler:(id)a2 where:(id)a3 args:(id)a4;
- (id)selectDistinct:(id)a0 fromQuery:(id)a1;
- (id)selectDistinct:(id)a0 where:(id)a1;
- (id)selectDistinct:(id)a0 where:(id)a1 args:(id)a2;
- (id)selectDistinctColumns:(id)a0 fromQuery:(id)a1;
- (id)selectDistinctColumns:(id)a0 where:(id)a1;
- (id)selectDistinctColumns:(id)a0 where:(id)a1 args:(id)a2;
- (id)selectDistinctList:(id)a0 fromQuery:(id)a1;
- (id)selectDistinctList:(id)a0 where:(id)a1;
- (id)selectDistinctList:(id)a0 where:(id)a1 args:(id)a2;
- (id)selectDistinctPrefixForColumn:(id)a0;
- (id)selectObjects:(id)a0 fromQuery:(id)a1;
- (id)selectObjects:(id)a0 where:(id)a1;
- (id)selectObjects:(id)a0 where:(id)a1 args:(id)a2;
- (id)selectObjectsAsDictionaries:(id)a0 fromQuery:(id)a1;
- (id)selectObjectsAsDictionaries:(id)a0 where:(id)a1;
- (id)selectObjectsAsDictionaries:(id)a0 where:(id)a1 args:(id)a2;
- (id)selectOneObject:(id)a0 fromQuery:(id)a1;
- (id)selectOneObject:(id)a0 where:(id)a1;
- (id)selectOneObject:(id)a0 where:(id)a1 args:(id)a2;
- (id)selectPrefixForColumn:(id)a0;
- (id)selectPrefixForColumns:(id)a0;
- (id)setCachedQuery:(id)a0 inDictionary:(id)a1 selectList:(id)a2 whereClause:(id)a3;
- (id)setForColumn:(id)a0 fromQuery:(id)a1;
- (void)setHasInfoDictionary:(char)a0;
- (void)setupIntrospection;
- (id)someModelsForIdList:(id)a0;
- (id)someModelsForIdList:(id)a0 withCanceler:(id)a1;
- (id)sqlForDeleteWhere:(id)a0;
- (id)sqlForModifyOfField:(id)a0;
- (id)sqlForModifyOfField:(id)a0 where:(id)a1;
- (id)sqlForSelect:(id)a0 where:(id)a1;
- (id)sqlForSelectDistinct:(id)a0 where:(id)a1;
- (id)sqlForSelectOf:(id)a0 where:(id)a1;
- (id)sqlForSelectWhere:(id)a0;
- (id)sqlForUpdateOf:(id)a0 where:(id)a1;
- (id)sqlForUpdateOfField:(id)a0;
- (id)sqlForUpdateOfField:(id)a0 where:(id)a1;
- (char)supportsOpenClose;
- (int)typeForField:(id)a0;
- (void)uncacheAllModels;
- (void)uncacheModel:(id)a0;
- (void)uncacheModels:(id)a0;
- (void)update:(id)a0 args:(id)a1;
- (void)update:(id)a0 withData:(id)a1 forModelId:(id)a2;
- (void)updateColumn:(id)a0 remappings:(id)a1;
- (void)updateColumn:(id)a0 toValue:(id)a1 where:(id)a2;
- (void)updateColumn:(id)a0 toValue:(id)a1 where:(id)a2 args:(id)a3;
- (void)usedModelId:(unsigned long long)a0;
- (id)valueForFieldName:(id)a0 forKeyField:(id)a1 withKeyValue:(id)a2;
- (id)valueForFieldName:(id)a0 forModelId:(id)a1;
- (id)valueForFieldName:(id)a0 forUuid:(id)a1;
- (id)valueSelectorForField:(id)a0;
- (void)waitForOutstandingWrites;
- (void)whereUsed:(id)a0;
- (void)willDeleteModel:(id)a0;
- (void)willSaveDatabase;
- (void)writeCopyrightHeaderForName:(id)a0 toHandle:(id)a1;
- (void)writeDatabaseImplementationToHandle:(id)a0 forDatabase:(id)a1 withEntities:(id)a2 asReadOnly:(char)a3;
- (void)writeDatabaseInterfaceToHandle:(id)a0 forDatabaseClass:(id)a1 withEntities:(id)a2;
- (void)writeEntityImplementationToHandle:(id)a0;
- (void)writeEntityInterfaceToHandle:(id)a0;
- (void)writeIndentedString:(id)a0 toHandle:(id)a1;
- (void)writeModelImplementationToHandle:(id)a0 asReadOnly:(char)a1;
- (void)writeModelInterfaceToHandle:(id)a0 asReadOnly:(char)a1;
- (void)writeOptions:(int)a0 toHandle:(id)a1;
- (void)writeString:(id)a0 toHandle:(id)a1;
- (void)writeValue:(id)a0 toField:(id)a1 forModelId:(id)a2 withModDate:(id)a3;

@end
