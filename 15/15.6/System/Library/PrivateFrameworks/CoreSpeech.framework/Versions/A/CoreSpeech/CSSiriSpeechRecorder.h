@class NSDictionary, NSFileHandle, SASResultCandidate, CSEndpointerMetrics, CSSpeechController, AFClientConfiguration, NSString, AFWatchdogTimer, NSArray, AFSpeechSynthesisRecord, CSSiriAudioFileWriter, NSMutableDictionary, CSEndpointDelayReporter, CSSiriAudioPlaybackService, NSObject, CSSiriSpeechRecordingContext, CSSiriAudioActivationInfo, CSAudioSessionController, AFExperimentContext, NSUUID, NSXPCConnection, AFBluetoothWirelessSplitterSessionStateObserver, CSSiriAcousticFingerprinter, CSFAudioDeviceInfo;
@protocol OS_dispatch_group, CSSiriSpeechCapturingDelegate, OS_dispatch_source, OS_dispatch_queue, CSEndpointAnalyzer;

@interface CSSiriSpeechRecorder : NSObject <CSSiriAcousticFingerprinterDelegate, CSSpeechControllerDelegate, CSEndpointAnalyzerDelegate, CSLanguageDetectorDelegate, CSSpeakerIdentificationDelegate, CSAudioSessionControllerDelegate, CSSiriSpeechCapturing> {
    id<CSSiriSpeechCapturingDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_queue;
    char _isSpeechControllerInitialized;
    CSSpeechController *_speechController;
    CSAudioSessionController *_audioSessionController;
    CSSiriAudioPlaybackService *_audioPlaybackService;
    long long _packetCount;
    long long _speechCapturingMode;
    long long _recordingAlertsConfiguration;
    NSObject<OS_dispatch_source> *_extendedEndpointTimer;
    id<CSEndpointAnalyzer> _endpointAnalyzer;
    CSSiriSpeechRecordingContext *_context;
    CSSiriAudioActivationInfo *_currentActivationInfo;
    CSSiriAudioActivationInfo *_pendingActivationInfo;
    CSFAudioDeviceInfo *_currentAudioDeviceInfo;
    char _fingerprintingEnabled;
    CSSiriAcousticFingerprinter *_fingerprinter;
    long long _audioFileType;
    char _needsAVVCLPCMCallbacks;
    char _hasReceivedEmptyLPCMRecordBuffer;
    NSFileHandle *_audioFileHandle;
    CSSiriAudioFileWriter *_audioFileWriter;
    long long _startEvent;
    long long _recordingState;
    long long _endpointerOperationMode;
    char _didReceiveFirstBuffer;
    char _didReceiveLastBuffer;
    char _didDetectStartpoint;
    char _didDetectEndpoint;
    char _didFakeTwoShotWithAlert;
    NSUUID *_fakeTwoShotTTSPromptUUID;
    char _serverDidRecognizeSpeech;
    char _fingerprintWasRecognized;
    char _serverDidEndpoint;
    char _didTimeout;
    char _wasCanceled;
    char _suppressRecordingStoppedAlert;
    char _isRecordingUsingBTRoute;
    double _twoShotStartTime;
    char _didPerformTwoShotPrompt;
    char _forceSuccessAlertOnStop;
    char _isDriving;
    char _shouldDisableSpeechPacketGeneration;
    char _hybridUODEnabled;
    double _startRecordingTimestamp;
    double _firstBufferTimestamp;
    unsigned long long _firstBufferHostTime;
    unsigned long long _estimatedSpeechEndHostTime;
    double _lastPrepareTimestamp;
    double _accumulatedBufferDuration;
    NSDictionary *_speechRecognizedContextForServerEndpointInstrumentation;
    double _skippedSamplesTimeInSec;
    NSObject<OS_dispatch_group> *_recordingWillStartGroup;
    unsigned long long _stopRecordingReason;
    unsigned long long _stopRecordingMachContinuousTime;
    struct OpaqueAudioConverter { } *_decoder;
    double _expectedFirstBufferTimestamp;
    char _isOpus;
    NSString *_recordDevice;
    char _audioDuckingEnabled;
    NSXPCConnection *_speechRecordingEventListenerConnection;
    AFWatchdogTimer *_fakeTwoShotTTSPromptWatchdogTimer;
    unsigned long long _lastAudioRecordBufferStartTime;
    unsigned long long _lastAudioRecordBufferReceiptTime;
    CSEndpointerMetrics *_lastEndpointerMetrics;
    CSEndpointDelayReporter *_endpointDelayReporter;
    NSArray *_lastEndpointHintFeatures;
    id /* block */ _lastEndpointHintCompletion;
    SASResultCandidate *_lastEndpointHintRC;
    char _lastEndpointHintRCProcessedForMitigation;
    AFSpeechSynthesisRecord *_mostRecentSpeechSynthesisRecord;
    AFClientConfiguration *_currentClientConfiguration;
    NSObject<OS_dispatch_group> *_alertPlaybackGroup;
    NSMutableDictionary *_numberOfAVVCAlertPlaybacksByType;
    AFBluetoothWirelessSplitterSessionStateObserver *_bluetoothWirelessSplitterSessionStateObserver;
    AFExperimentContext *_experimentContext;
    NSUUID *_mhUUID;
}

@property (nonatomic) char suppressInterruptionEndedNotifications;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (void).cxx_destruct;
- (void)setDelegate:(id)a0;
- (void)eagerlyInitializeAudioRecording;
- (id)_currentMHUUID:(char)a0;
- (void)prepareForMode:(long long)a0;
- (unsigned int)_audioDeviceID;
- (void)_cancelExtendedEndpointTimer;
- (char)_checkAudioLoggingLimits:(id)a0;
- (void)_checkIfLastEndpointHintShouldBeAccepted:(char)a0;
- (void)_clearEndpointHint;
- (id)_convertToAFSpeechPackage:(id)a0;
- (id)_currentPlaybackRoute;
- (id)_currentRecordDeviceInfo;
- (id)_currentRecordRoute;
- (id)_currentRecordingInfo;
- (id)_currentRtsSessionId:(char)a0;
- (void)_enforceEndpointHintWithMitigation:(char)a0;
- (id)_fingerprinter;
- (id)_getFanInfoArray;
- (void)_handleFakeTwoShotPromptCallbackWithUUID:(id)a0 timestamp:(double)a1 duration:(double)a2 error:(id)a3;
- (void)_handleFakeTwoShotPromptTimeoutWithUUID:(id)a0;
- (void)_hardEndpointWasDetectedWithMetrics:(id)a0 atTime:(double)a1;
- (void)_logAudioMetrics:(id)a0 mhUUID:(id)a1;
- (void)_logBluetoothStateWithMHUUID:(id)a0;
- (void)_logFanState;
- (void)_logVoiceTriggerInfo:(id)a0 withMHUUID:(id)a1;
- (int)_mapInstrumentationEndpointTypeFromStopRecordingReason:(union { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; })a0;
- (id)_mhUUIDFromSpeechRequestOptions:(id)a0;
- (void)_performTwoShotPromptForType:(long long)a0 withOverride:(long long)a1 atTime:(double)a2;
- (void)_playAudioAlert:(long long)a0;
- (void)_playPhaticWithCompletion:(id /* block */)a0;
- (void)_playStopAlertIfNecessaryForReason:(long long)a0 endpointMode:(long long)a1 error:(id)a2;
- (char)_prepareDirectoryAtPath:(id)a0;
- (char)_prepareSpeechControllerWithOptions:(unsigned long long)a0 error:(id *)a1;
- (id)_recordingInfoForEvent:(long long)a0 audioAlertStyle:(long long)a1 includeBTInfo:(char)a2 includeRecordDeviceInfo:(char)a3;
- (void)_reportServerEndpointMetricsIfNeeded;
- (void)_resetSpeechController;
- (id)_rtsSessionIdFromSpeechRequestOptions:(id)a0;
- (void)_scheduleExtendedEndpointTimer;
- (void)_setAlertsIfNeeded;
- (char)_setAudioContextWithInfo:(id)a0 forReason:(id)a1;
- (void)_setAudioDuckingEnabled:(char)a0;
- (void)_setDictationAudioModeEnabled:(char)a0;
- (void)_setEndpointStyle:(long long)a0;
- (void)_setEndpointerOperationMode:(long long)a0 forceUpdate:(char)a1;
- (void)_setLanguageDetectorDelegateIfRequired;
- (void)_setSpeechCapturingMode:(long long)a0;
- (void)_setupAudioFileWritingForSpeechController:(id)a0 info:(id)a1 context:(id)a2;
- (char)_shouldEmitInstrumentation;
- (char)_shouldPlaySummonedToneOnTopCapInvocationOnHorseman;
- (char)_shouldPlayTwoShotToneFeedbackOnHorseman;
- (id)_speechController;
- (void)_speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:(unsigned long long)a0 atHostTime:(unsigned long long)a1 mhUUID:(id)a2;
- (void)_speechControllerDidReceiveLastAudioRecordBuffer:(id)a0 forReason:(long long)a1 estimatedSpeechEndHostTime:(unsigned long long)a2 isRecordingStopped:(char)a3;
- (void)_speechControllerDidStartRecording:(id)a0 successfully:(char)a1 error:(id)a2;
- (void)_speechControllerDidStopRecording:(id)a0 audioDeviceInfo:(id)a1 forReason:(long long)a2 estimatedSpeechEndHostTime:(unsigned long long)a3 errorCodeOverride:(long long)a4 underlyingError:(id)a5;
- (void)_speechControllerRequestsOperation:(unsigned long long)a0 forReason:(unsigned long long)a1 completion:(id /* block */)a2;
- (id)_speechControllerWithError:(id *)a0;
- (id)_speechRecordingEventListener;
- (char)_startAudioPlaybackRequest:(id)a0 options:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)_stopRecordingForEndpointReason:(union { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; })a0 withEndpointMetrics:(id)a1;
- (void)_stopRecordingWithReason:(union { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; })a0 hostTime:(unsigned long long)a1;
- (char)_updateAudioContextToPostVoiceForReason:(id)a0;
- (void)_updateAudioContextWithInfo:(id)a0 reason:(id)a1;
- (char)_updateAudioContextWithPendingInfoForReason:(id)a0;
- (void)_updateAudioDeviceInfo:(id)a0 forReason:(id)a1 forcesUpdate:(char)a2;
- (void)_updateRecordBufferDuration;
- (void)acousticFingerprinter:(id)a0 hasFingerprint:(id)a1 duration:(double)a2;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionInterruptionNotificationWithUserInfo:(id)a1;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:(id)a1;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)a1;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionOwnerLostNotification:(id)a1;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionOwnerResetNotification:(id)a1;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionRouteChangeNotificationWithUserInfo:(id)a1;
- (void)cancelSpeechCaptureSuppressingAlert:(char)a0;
- (int)convertSISchemaAudioInputRouteToMHRoute:(int)a0 withRecordingInfo:(id)a1;
- (id)currentVTSatScore;
- (void)disableSpeechPacketGeneration:(char)a0;
- (void)endpointer:(id)a0 didDetectHardEndpointAtTime:(double)a1 withMetrics:(id)a2;
- (void)endpointer:(id)a0 didDetectStartpointAtTime:(double)a1;
- (void)enforcePreviousEndpointHint;
- (id)fetchAudioDeviceInfo;
- (id)fetchRecordingInfo;
- (void)forceSuccessAudioAlertOnStop;
- (id)getAudioRouteInstrumentationWithRecordingInfo:(id)a0;
- (void)getLastStartpointTimestampAndCurrentTime:(id /* block */)a0;
- (id)initWithQueue:(id)a0 speechController:(id)a1 audioSessionController:(id)a2 audioPlaybackService:(id)a3 experimentContext:(id)a4;
- (void)languageDetectorDidDetectLanguageWithConfidence:(id)a0 confidence:(id)a1 isConfident:(char)a2;
- (void)performBlockAfterAlerts:(id /* block */)a0 timeout:(double)a1;
- (void)playRecordingStartAlert;
- (void)preheatRecognizerWithOption:(id)a0;
- (void)preheatWithOption:(id)a0;
- (void)prepareForMode:(long long)a0 withOptions:(id)a1;
- (char)prepareSpeechCaptureWithOptions:(unsigned long long)a0 error:(id *)a1;
- (id)recordingInfoForPreheatWithEvent:(long long)a0;
- (void)releaseAudioSession;
- (void)setAudioFileHandle:(id)a0;
- (void)setAudioFileType:(long long)a0;
- (void)setClientConfiguration:(id)a0;
- (void)setEARLanguageDetectorSpeechRequestId:(id)a0;
- (void)setEndpointerDelayedTrigger:(char)a0;
- (void)setEndpointerThreshold:(double)a0;
- (void)setFingerprintWasRecognized;
- (void)setFingerprintingEnabled:(char)a0;
- (void)setHybridUODEnabled:(char)a0;
- (void)setIsDriving:(char)a0;
- (void)setSpeechRecognizedContext:(id)a0;
- (void)setSpeechRecordingEventListeningEndpoint:(id)a0;
- (void)setSpeechRequestOptions:(id)a0;
- (void)setSpeechWasRecognizedForElapsedTime:(double)a0 isFinal:(char)a1;
- (void)speakerIdentificationDidDetectSpeakerWithScores:(id)a0;
- (void)speechController:(id)a0 didSetAudioSessionActive:(char)a1;
- (void)speechController:(id)a0 willSetAudioSessionActive:(char)a1;
- (void)speechControllerBeginRecordInterruption:(id)a0 withContext:(id)a1;
- (void)speechControllerDidDeliverLastBuffer:(id)a0 forReason:(long long)a1 estimatedSpeechEndHostTime:(unsigned long long)a2;
- (void)speechControllerDidDetectVoiceTriggerTwoShot:(id)a0 atTime:(double)a1 wantsAudibleFeedback:(char)a2;
- (void)speechControllerDidFinishAlertPlayback:(id)a0 ofType:(long long)a1 error:(id)a2;
- (void)speechControllerDidStartRecording:(id)a0 audioDeviceInfo:(id)a1 successfully:(char)a2 error:(id)a3;
- (void)speechControllerDidStopRecording:(id)a0 audioDeviceInfo:(id)a1 forReason:(long long)a2 estimatedSpeechEndHostTime:(unsigned long long)a3;
- (void)speechControllerDidUpdateSmartSiriVolume:(id)a0 forReason:(unsigned long long)a1;
- (void)speechControllerEndRecordInterruption:(id)a0;
- (void)speechControllerLPCMRecordBufferAvailable:(id)a0 buffer:(id)a1 recordedAt:(unsigned long long)a2;
- (void)speechControllerRecordBufferAvailable:(id)a0 buffers:(id)a1 durationInSec:(float)a2 recordedAt:(unsigned long long)a3 audioDeviceInfo:(id)a4;
- (void)speechControllerRecordHardwareConfigurationDidChange:(id)a0 toConfiguration:(long long)a1;
- (void)speechControllerRequestsOperation:(unsigned long long)a0 forReason:(unsigned long long)a1;
- (void)speechControllerRequestsOperation:(unsigned long long)a0 forReason:(unsigned long long)a1 completion:(id /* block */)a2;
- (char)startSpeechCaptureWithContext:(id)a0 willStartHandler:(id /* block */)a1 error:(id *)a2;
- (void)stopSpeechCaptureForEvent:(long long)a0 suppressAlert:(char)a1 hostTime:(unsigned long long)a2;
- (void)suppressUtteranceGradingIfRequired;
- (void)suspendAutomaticEndpointingInRange:(struct AFTimeRange { double x0; double x1; })a0;
- (void)updateASRFeatures:(id)a0;
- (void)updateEndpointHintForRC:(id)a0 forceAccept:(char)a1 completion:(id /* block */)a2;
- (void)updateSpeechSynthesisRecord:(id)a0;

@end
