@class NSDictionary, CSAudioConverter, CSAudioSampleRateConverter, CSAudioSessionController, CSAudioStopStreamOption, SOMediaNowPlayingObserver, CSXPCClientFactory, CSAudioZeroCounter, CSVolumeMonitor, SOClockTimerObserver, SOClockAlarmObserver, CSAsset, CSEndpointerProxy, CSLanguageDetector, SSRVoiceProfileManager, CSSmartSiriVolumeController, CSFAudioDeviceInfo, CSRCHandlingXPCClient, CSUncompressedAudioLogging, CSPlainAudioFileWriter, CSSpeakerRecognitionProxy, CSAudioPowerMeter, NSArray, CSContinuousVoiceTrigger, CSAudioStream, SSRSpeakerRecognitionController, CSSelectiveChannelAudioFileWriter, NSMutableDictionary, NSString, NSObject, CSAudioRecordContext, NSUUID, CSXPCClient, CSSpeechEndHostTimeEstimator;
@protocol CSAudioAlertProviding, CSAudioMeterProviding, CSSpeechControllerDelegate, CSSpeakerIdentificationDelegate, CSAudioSessionProviding, CSAudioMetricProviding, CSAudioStreamProviding, OS_dispatch_queue, CSEndpointAnalyzer, OS_dispatch_group, CSLanguageDetectorDelegate;

@interface CSSpeechController : NSObject <CSAudioConverterDelegate, CSSmartSiriVolumeControllerDelegate, CSAudioStreamProvidingDelegate, CSAudioAlertProvidingDelegate, CSAudioSessionControllerDelegate, CSAudioDecoderDelegate, CSEndpointAnalyzerImplDelegate, CSLanguageCodeUpdateMonitorDelegate, SOMediaNowPlayingListening, SOClockAlarmListening, SOClockTimerListening, CSSpeakerRecognitionProxyProtocol, SSRSpeakerRecognitionControllerDelegate, CSSpeakerRecognitionAssetDownloadMonitorDelegate, CSVoiceTriggerAssetHandlerDelegate, CSXPCClientDelegate, CSAudioSessionProvidingDelegate, CSContinuousVoiceTriggerDelegate> {
    NSObject<OS_dispatch_queue> *_targetQueue;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_contextResetQueue;
    CSAudioConverter *_opusAudioConverter;
    CSAudioConverter *_narrowBandOpusConverter;
    CSAudioConverter *_audioConverter;
    CSAudioSampleRateConverter *_downsampler;
    NSDictionary *_requestedRecordSettings;
    NSDictionary *_lastVoiceTriggerInfo;
    NSDictionary *_lastRTSTriggerInfo;
    CSAudioZeroCounter *_continuousZeroCounter;
    NSObject<OS_dispatch_queue> *_audibleFeedbackQueue;
    NSObject<OS_dispatch_group> *_twoShotAudibleFeedbackDecisionGroup;
}

@property (nonatomic) char supportPhatic;
@property (nonatomic) char supportHearstVoiceTrigger;
@property (nonatomic) char supportTriagleModeSessionActivationRetry;
@property (nonatomic) char supportSessionActivateDelay;
@property (retain, nonatomic) CSEndpointerProxy *endpointerProxy;
@property (retain, nonatomic) CSAudioRecordContext *audioRecordContext;
@property (retain, nonatomic) CSAudioStream *audioStream;
@property (retain, nonatomic) id<CSAudioStreamProviding> streamProvider;
@property (retain, nonatomic) id<CSAudioSessionProviding> sessionProvider;
@property (retain, nonatomic) id<CSAudioAlertProviding> alertProvider;
@property (retain, nonatomic) id<CSAudioMeterProviding> audioMeterProvider;
@property (retain, nonatomic) id<CSAudioMetricProviding> audioMetricProvider;
@property (nonatomic) char isAsrOnDevice;
@property (nonatomic) char isOpus;
@property (nonatomic) char isSiriClientListening;
@property (nonatomic) char hasRequestedTwoShotFeedback;
@property (nonatomic) char isNarrowBand;
@property (retain, nonatomic) CSPlainAudioFileWriter *audioFileWriter;
@property (retain, nonatomic) CSSelectiveChannelAudioFileWriter *serverLoggingWriter;
@property (retain, nonatomic) CSSmartSiriVolumeController *volumeController;
@property (retain, nonatomic) NSString *recordEventUUID;
@property (nonatomic) char isAudioSessionActivated;
@property (retain, nonatomic) NSDictionary *speakerRecognitionScores;
@property (nonatomic) unsigned long long activeChannel;
@property (nonatomic) char twoShotNotificationEnabled;
@property (nonatomic) char isMediaPlaying;
@property (nonatomic) char isAlarmPlaying;
@property (nonatomic) char isTimerPlaying;
@property (nonatomic) char isSoundPlaying;
@property (nonatomic) char isRemoteVADAvailableStream;
@property (nonatomic) char myriadPreventingTwoShotFeedback;
@property (retain, nonatomic) CSSpeechEndHostTimeEstimator *speechEndHostTimeEstimator;
@property (retain, nonatomic) NSString *bundleIdFromDictation;
@property (nonatomic) char isHybridUODEnabled;
@property (retain, nonatomic) CSContinuousVoiceTrigger *continuousVoiceTrigger;
@property (retain, nonatomic) CSLanguageDetector *languageDetector;
@property (nonatomic) char shouldUseLanguageDetectorForCurrentRequest;
@property (retain, nonatomic) NSUUID *pendingAudioSessionActivationToken;
@property (copy, nonatomic) id /* block */ pendingAudioSessionActivationCompletion;
@property (nonatomic) unsigned long long pendingAudioSessionActivationReason;
@property (retain, nonatomic) CSXPCClientFactory *xpcClientFactory;
@property (retain, nonatomic) CSXPCClient *xpcClient;
@property (retain, nonatomic) CSXPCClient *duckAudioXPCClient;
@property (nonatomic) float cachedAvgPower;
@property (nonatomic) float cachedPeakPower;
@property (retain, nonatomic) CSAudioPowerMeter *powerMeter;
@property (nonatomic) char didDeliverLastBuffer;
@property (nonatomic) char didDeliverFirstSpeechPacket;
@property (retain, nonatomic) NSString *requestMHUUID;
@property (nonatomic) char canPerformDelayedStop;
@property (nonatomic) char hasPerformedDelayedStop;
@property (retain, nonatomic) CSAudioStopStreamOption *requestedStopRecordingOptions;
@property (nonatomic) unsigned long long numTrailingSamplesAfterSchedulingStop;
@property (nonatomic) unsigned long long maxAllowedTrailingSamplesAfterSchedulingStop;
@property (retain, nonatomic) NSMutableDictionary *decodersForTV;
@property (nonatomic) unsigned long long decoderProcessedSampleCountForTV;
@property (retain, nonatomic) NSString *logEventUUID;
@property (retain, nonatomic) CSSpeakerRecognitionProxy *speakerRecognitionProxy;
@property (retain, nonatomic) SSRSpeakerRecognitionController *speakerRecognitionController;
@property (retain, nonatomic) SSRVoiceProfileManager *voiceProfileManager;
@property (retain, nonatomic) CSAsset *asset;
@property (retain, nonatomic) NSArray *ssrAssets;
@property (retain, nonatomic) NSString *ssvLogFilePath;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *mediaPlayingObserverQueue;
@property (retain, nonatomic) SOMediaNowPlayingObserver *mediaPlayingMonitor;
@property (retain, nonatomic) SOClockAlarmObserver *alarmMonitor;
@property (retain, nonatomic) SOClockTimerObserver *timerMonitor;
@property (retain, nonatomic) CSVolumeMonitor *volumeMonitor;
@property (retain, nonatomic) CSFAudioDeviceInfo *audioDeviceInfoImpl;
@property (readonly, copy, nonatomic) NSUUID *endpointId;
@property (nonatomic) char setupStarted;
@property (retain, nonatomic) CSAudioSessionController *audioSessionController;
@property (retain, nonatomic) CSRCHandlingXPCClient *rcHandlingClient;
@property (retain, nonatomic) CSUncompressedAudioLogging *uncompressedAudioLogging;
@property (copy, nonatomic) id /* block */ supportsDuckingOnSpeakerOutputEvaluator;
@property (weak, nonatomic) id<CSSpeechControllerDelegate> delegate;
@property (weak, nonatomic) id<CSLanguageDetectorDelegate> languageDetectorDelegate;
@property (weak, nonatomic) id<CSSpeakerIdentificationDelegate> speakerIdDelegate;
@property (readonly, nonatomic) id<CSEndpointAnalyzer> endpointAnalyzer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sharedController;
+ (char)isSmartSiriVolumeAvailable;

- (id)init;
- (void).cxx_destruct;
- (void)reset;
- (char)isRecording;
- (void)CSLanguageCodeUpdateMonitor:(id)a0 didReceiveLanguageCodeChanged:(id)a1;
- (void)CSSpeakerRecognitionAssetDownloadMonitor:(id)a0 didInstallNewAsset:(char)a1 assetProviderType:(unsigned long long)a2;
- (void)CSXPCClient:(id)a0 didDisconnect:(char)a1;
- (long long)_currentAudioRecorderSampleRate;
- (char)_isHubRequestTV;
- (void)_logRecordingStopErrorIfNeeded:(long long)a0;
- (char)_shouldUseVoiceIsolationChannel;
- (void)_startFeedbackForTwoShotAtTime:(double)a0;
- (void)keywordDetectorDidDetectKeyword;
- (void)resetEndpointer;
- (char)startRecording:(id *)a0;
- (void)_createLanguageDetectorIfNeeded;
- (char)_fetchAudioProviderWithContext:(id)a0;
- (char)_shouldUseSoundPlaybackMonitors;
- (id)audioDeviceInfo;
- (void)preheat;
- (void)startController;
- (void)updateEndpointerDelayedTrigger:(char)a0;
- (char)_activateAudioSessionWithReason:(unsigned long long)a0 delay:(double)a1 delayRequested:(char)a2 error:(id *)a3;
- (char)_activateAudioSessionWithReason:(unsigned long long)a0 error:(id *)a1;
- (unsigned long long)_audibleFeedbackPlaybackReason;
- (void)_audioStreamProvider:(id)a0 audioBufferAvailable:(id)a1;
- (unsigned long long)_calculateEstimatedSpeechEndHostTimeWithStopOptions:(id)a0;
- (char)_canDelayStopRecording;
- (char)_canPlayTwoShotFeedbackDuringMediaPlayback;
- (void)_cancelPendingAudioSessionActivateForReason:(id)a0;
- (id)_contextToString:(id)a0;
- (id)_createAlarmMonitor;
- (void)_createAudioPowerMeterIfNeeded;
- (char)_createAudioProviderFromXPCWithContext:(id)a0;
- (id)_createMediaPlayingMonitor;
- (id)_createTimerMonitor;
- (char)_currentConfigurationSupportsDucking;
- (void)_delayedStopRecordingWithOptions:(id)a0;
- (void)_deviceAudioLoggingWithFileWriter:(id)a0;
- (void)_didStopForReason:(long long)a0;
- (char)_doActivateAudioSessionWithReason:(unsigned long long)a0 error:(id *)a1;
- (id)_fetchAudioDecoderForTV:(unsigned int)a0;
- (id)_fetchFallbackAudioSessionReleaseProviding;
- (char)_fetchLastTriggerInfo;
- (void)_fetchMetricsAndLog;
- (id)_getSerialQueueWithName:(id)a0 targetQueue:(id)a1;
- (id)_getSpeechIdentifier;
- (void)_initializeAlarmState;
- (void)_initializeMediaPlayingState;
- (void)_initializeTimerState;
- (char)_isDelayedDuckingSupportedContext;
- (char)_isDuckingAvailableRoute:(id)a0;
- (char)_isRecordRouteBuiltinMic;
- (char)_isRecordRouteStudioDisplay;
- (id)_languageDetectorOptionFromSettings:(id)a0;
- (char)_lastVoiceTriggerWasHearst;
- (id)_mapScoresToSharedSiriId:(id)a0;
- (void)_performPendingAudioSessionActivateForReason:(id)a0;
- (id)_processSpeakerRecognitionResult:(id)a0;
- (void)_refreshSpeakerRecognitionAssets;
- (void)_scheduleActivateAudioSessionWithDelay:(double)a0 sessionActivateReason:(unsigned long long)a1 scheduleReason:(id)a2 validator:(id /* block */)a3 completion:(id /* block */)a4;
- (void)_scheduleAudibleFeedbackAtStartRecording;
- (float)_scheduledAudibleFeedbackDelay;
- (void)_setAlarmIsPlaying:(char)a0;
- (void)_setMediaPlaybackState:(char)a0 isInterrupted:(char)a1;
- (void)_setSoundPlayingState;
- (void)_setTimerIsPlaying:(char)a0;
- (char)_setupAudioConverter:(char)a0 isNarrowBand:(char)a1;
- (void)_setupAudioProviderFromXPC:(id)a0;
- (void)_setupDownsamplerIfNeeded;
- (void)_setupSpeakerRecognitionController;
- (char)_shouldCalculateEstimatedSpeechEndHostTimeFromCachedEPMetrics;
- (char)_shouldFetchRaiseToSpeakInfo;
- (char)_shouldFetchVoiceTriggerInfo;
- (char)_shouldResetContextAtPrepare;
- (char)_shouldRunHybridSDSDMitigation;
- (char)_shouldSetStartSampleCount;
- (char)_shouldSetStartSampleCountForRTS;
- (char)_shouldTrackLaunchLatency;
- (char)_shouldUseLanguageDetector:(id)a0;
- (char)_shouldUseSpeakerRecognitionProxy;
- (void)_startPhaticDecision;
- (void)_startTwoShotFeedbackDecisionForDetectionAtTime:(double)a0;
- (char)_supportsHybridSDSD;
- (void)_teardownAudioProviderIfNeeded;
- (void)_updateRecordContextIfNeeded:(id)a0;
- (void)audioAlertProvidingDidFinishAlertPlayback:(id)a0 ofType:(long long)a1 error:(id)a2;
- (void)audioConverterDidConvertPackets:(id)a0 packets:(id)a1 durationInSec:(float)a2 timestamp:(unsigned long long)a3 arrivalTimestampToAudioRecorder:(unsigned long long)a4;
- (void)audioDecoderDidDecodePackets:(id)a0 audioStreamHandleId:(unsigned long long)a1 buffer:(id)a2 remoteVAD:(id)a3 timestamp:(unsigned long long)a4 arrivalTimestampToAudioRecorder:(unsigned long long)a5 wasBuffered:(char)a6 receivedNumChannels:(unsigned int)a7;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)a1;
- (void)audioSessionProvider:(id)a0 didChangeContext:(char)a1;
- (void)audioSessionProvider:(id)a0 didSetAudioSessionActive:(char)a1;
- (void)audioSessionProvider:(id)a0 providerInvalidated:(char)a1;
- (void)audioSessionProvider:(id)a0 willSetAudioSessionActive:(char)a1;
- (void)audioSessionProviderBeginInterruption:(id)a0;
- (void)audioSessionProviderBeginInterruption:(id)a0 withContext:(id)a1;
- (void)audioSessionProviderEndInterruption:(id)a0;
- (void)audioStreamProvider:(id)a0 audioBufferAvailable:(id)a1;
- (void)audioStreamProvider:(id)a0 audioChunkForTVAvailable:(id)a1;
- (void)audioStreamProvider:(id)a0 didHardwareConfigurationChange:(long long)a1;
- (void)audioStreamProvider:(id)a0 didStopStreamUnexpectedly:(long long)a1;
- (void)audioStreamProvider:(id)a0 remoteRecorderDidDetectedTwoShotAtTime:(double)a1;
- (float)averagePowerForChannel:(unsigned long long)a0;
- (float)averagePowerForOutputReference;
- (void)beginWaitingForMyriad;
- (void)cancelCurrentLanguageDetectorRequest;
- (void)clockAlarmObserver:(id)a0 alarmDidDismiss:(id)a1;
- (void)clockAlarmObserver:(id)a0 alarmDidFire:(id)a1;
- (void)clockAlarmObserver:(id)a0 snapshotDidUpdateFrom:(id)a1 to:(id)a2;
- (void)clockTimerObserver:(id)a0 snapshotDidUpdateFrom:(id)a1 to:(id)a2;
- (void)clockTimerObserver:(id)a0 timerDidDismiss:(id)a1;
- (void)clockTimerObserver:(id)a0 timerDidFire:(id)a1;
- (void)continuousVoiceTrigger:(id)a0 detectedSilenceAfterVoiceTriggerAt:(double)a1;
- (void)continuousVoiceTrigger:(id)a0 detectedVoiceTriggerResult:(id)a1;
- (void)didFinishSpeakerRecognition:(id)a0;
- (void)didReceiveSpeakerRecognitionScoreCard:(id)a0;
- (void)didTTSVolumeChange:(id)a0 forReason:(unsigned long long)a1;
- (void)duckAudioDevice:(unsigned int)a0 duckedLevel:(float)a1 rampDuration:(float)a2;
- (void)duckDefaultOutputAudioDeviceWithDuckedLevel:(float)a0 rampDuration:(float)a1;
- (void)endWaitingForMyriadWithDecision:(unsigned long long)a0;
- (void)endpointer:(id)a0 detectedTwoShotAtTime:(double)a1;
- (id)endpointerModelVersion;
- (void)fetchAudioMetricsWithCompletion:(id /* block */)a0;
- (id)getAudioConverterForTest;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })getLPCMAudioStreamBasicDescription;
- (void)getMitigationDecisionForRCId:(unsigned long long)a0 requestId:(id)a1 completion:(id /* block */)a2;
- (double)getRecordBufferDuration;
- (float)getSmartSiriVolume;
- (float)getVolumeForTTSType:(unsigned long long)a0;
- (void)handleStopRecordingRequestWithOptions:(id)a0;
- (id)initWithEndpointId:(id)a0;
- (id)initWithEndpointId:(id)a0 xpcClientFactory:(id)a1 endpointer:(id)a2 continuousVoiceTrigger:(id)a3 siriVolumeController:(id)a4 mediaPlayingMonitor:(id)a5 alarmMonitor:(id)a6 timerMonitor:(id)a7 audioSessionController:(id)a8 supportPhatic:(char)a9 supportHearstVoiceTrigger:(char)a10 supportTriagleModeSessionActivationRetry:(char)a11 supportSessionActivateDelay:(char)a12 supportsDuckingOnSpeakerEvaluator:(id /* block */)a13;
- (char)initializeRecordSessionWithRecordContext:(id)a0;
- (char)isSmartSiriVolumeAvailable;
- (void)languageDetectorSetMostRecentRecognitionLanguage:(id)a0;
- (double)lastEndOfVoiceActivityTime;
- (void)nowPlayingObserver:(id)a0 playbackStateDidChangeFrom:(long long)a1 to:(long long)a2 lastPlayingDate:(id)a3;
- (unsigned long long)outputReferenceChannel;
- (float)peakPowerForChannel:(unsigned long long)a0;
- (float)peakPowerForOutputReference;
- (char)playAlertSoundForType:(long long)a0;
- (char)playRecordStartingAlertAndResetEndpointerWithAlertOverride:(long long)a0;
- (id)playbackRoute;
- (char)prepareRecordWithSettings:(id)a0 error:(id *)a1;
- (char)prewarmAudioSession;
- (void)processASRFeatures:(id)a0;
- (void)processRCWithId:(unsigned long long)a0 requestId:(id)a1 speechPackage:(id)a2 taskId:(id)a3 forceAccept:(char)a4 completionHandler:(id /* block */)a5;
- (id)recordDeviceInfo;
- (id)recordRoute;
- (id)recordSettings;
- (void)resetAudioSession;
- (char)setAlertSoundFromURL:(id)a0 forType:(long long)a1 force:(char)a2;
- (char)setCurrentRecordContext:(id)a0 error:(id *)a1;
- (void)setDuckOthersOption:(char)a0;
- (void)setEndpointAnalyzerDelegate:(id)a0;
- (void)setEndpointerOperationMode:(long long)a0;
- (void)setLanguageDetectorInteractionID:(id)a0;
- (void)setMeteringEnabled:(char)a0;
- (void)setPermanentVolumeOffsetWithDirection:(char)a0;
- (char)setRecordBufferDuration:(double)a0;
- (void)setSmartSiriVolumeDirection:(char)a0;
- (void)setSmartSiriVolumePercentage:(float)a0;
- (void)setSynchronousCallbackEnabled:(char)a0;
- (void)shouldAcceptEagerResultForDuration:(double)a0 resultsCompletionHandler:(id /* block */)a1;
- (void)speakerRecognitionController:(id)a0 hasSpeakerInfo:(id)a1;
- (void)speakerRecognitionFinishedProcessing:(id)a0 withFinalSpeakerInfo:(id)a1;
- (char)startRecordingWithSettings:(id)a0 error:(id *)a1;
- (void)stopEndpointer;
- (void)stopRecording;
- (void)stopRecordingWithOptions:(id)a0;
- (void)updateEndpointerThreshold:(float)a0;
- (void)updateMeters;
- (void)voiceTriggerAssetHandler:(id)a0 endpointId:(id)a1 didChangeCachedAsset:(id)a2;
- (id)voiceTriggerInfo;

@end
