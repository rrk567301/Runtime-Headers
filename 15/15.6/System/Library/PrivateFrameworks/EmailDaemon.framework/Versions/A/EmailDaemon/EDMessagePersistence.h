@class NSString, EMBlockedSenderManager, EDGmailLabelPersistence, EDMessagePersistenceStatistics, EDMessageQueryParser, EDMailboxPersistence, EDPersistenceHookRegistry, NSObject, EDMessageTransformer, EDPersistenceDatabase, NSNumber;
@protocol OS_os_log, EMUserProfileProvider, EFSQLValueExpressable, OS_dispatch_queue, EMVIPReader;

@interface EDMessagePersistence : NSObject <EFSignpostable, EDBusinessChangeHookResponder, EDCategoryChangeHookResponder, EDMessageObjectIDToDatabaseIDConverter>

@property (class, readonly, copy, nonatomic) NSString *messagesTableName;
@property (class, readonly, copy, nonatomic) NSString *globalMessageIDColumnName;
@property (class, readonly, copy, nonatomic) NSString *attachmentsTableName;
@property (class, readonly, copy, nonatomic) NSString *addressesTableName;
@property (class, readonly, copy, nonatomic) NSString *addressesTableCommentColumnName;
@property (class, readonly, copy, nonatomic) NSString *addressesTableAddressColumnName;
@property (class, readonly, copy, nonatomic) NSString *messageGlobalDataTableName;
@property (class, readonly, copy, nonatomic) NSString *generatedSummariesTableName;
@property (class, readonly, copy, nonatomic) NSString *messageGlobalDataCategoryIsTemporaryColumnName;
@property (class, readonly, copy, nonatomic) NSString *messageGlobalDataModelCategoryColumnName;
@property (class, readonly, copy, nonatomic) NSString *messageGlobalDataCategoryModelVersionColumnName;
@property (class, readonly, copy, nonatomic) NSString *messageGlobalDataModelSubcategoryColumnName;
@property (class, readonly, copy, nonatomic) NSString *messageGlobalDataHighImpactColumnName;
@property (class, readonly, copy, nonatomic) NSString *messageBusinessCategoryColumnAlias;
@property (class, readonly, copy, nonatomic) NSString *messageGlobalDataModelAnalyticsColumnName;
@property (class, readonly, copy, nonatomic) NSString *messageGlobalDataValidationState;
@property (class, readonly) NSObject<OS_os_log> *signpostLog;

@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *cachedMetadataIsolation;
@property (retain, nonatomic) NSNumber *cachedMetadataEstimatedRowCount;
@property (nonatomic) int cachedMetadataUpdatesSinceLastCheck;
@property (readonly, nonatomic) EMBlockedSenderManager *blockedSenderManager;
@property (readonly, nonatomic) id<EMUserProfileProvider> userProfileProvider;
@property (readonly, nonatomic) id<EMVIPReader> vipReader;
@property (readonly, nonatomic) EDGmailLabelPersistence *gmailLabelPersistence;
@property (readonly, nonatomic) EDPersistenceHookRegistry *hookRegistry;
@property (readonly, nonatomic) EDPersistenceDatabase *database;
@property (retain, nonatomic) EDMessageTransformer *messageTransformer;
@property (retain, nonatomic) EDMessageQueryParser *queryParser;
@property (readonly, nonatomic) id<EFSQLValueExpressable> expressionForFindingOnlyJournaledMessages;
@property (readonly, nonatomic) id<EFSQLValueExpressable> expressionForFilteringUnavailableMessages;
@property (readonly, nonatomic) id<EFSQLValueExpressable> expressionForFilteringUnavailableMessagesFromCount;
@property (readonly, nonatomic) id<EFSQLValueExpressable> expressionForFilteringUnavailableMessagesFromCountForGlobalMessageQuery;
@property (readonly, weak, nonatomic) EDMailboxPersistence *mailboxPersistence;
@property (readonly, nonatomic) EDMessagePersistenceStatistics *persistenceStatistics;
@property (readonly) unsigned long long signpostID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)log;
+ (id)additionalSelectExpressions;
+ (id)_addressMetadataTableSchema;
+ (id)_addressesTableSchema;
+ (id)_brandIndicatorEvidenceTableSchema;
+ (id)_brandIndicatorsTableSchema;
+ (id)_cachedMetadataTableSchema;
+ (long long)_databaseIDFromSelect:(id)a0 connection:(id)a1;
+ (id)_generatedSummariesTableSchema;
+ (id)_messageReferencesTableSchema;
+ (id)_protectedMessageDataTableSchema;
+ (id)_recipientClauseForType:(unsigned long long)a0 addressValue:(id)a1;
+ (id)_subjectsTableSchema;
+ (id)_summariesTableSchema;
+ (void)addAdditionalKeyPathMappersToDictionary:(id)a0 schema:(id)a1;
+ (void)addCategoryKeyPathMappersToDictionary:(id)a0 schema:(id)a1 protectedSchema:(id)a2;
+ (id)addJoinsForAddressToSelectComponent:(id)a0 withSourceAddressColumn:(id)a1;
+ (void)addStandardKeyPathMappersToDictionary:(id)a0 schema:(id)a1 protectedSchema:(id)a2;
+ (id)allDatabaseIDsForSimpleAddresses:(id)a0 connection:(id)a1;
+ (id)attachmentsTableSchemaAndForeignKeysToResolve:(id *)a0;
+ (id)bitExpressionForAttachments;
+ (id)bitExpressionForConversationFlag:(unsigned long long)a0;
+ (long long)databaseIDForEmailAddress:(id)a0 connection:(id)a1;
+ (id)messageGlobalDataTableSchemaAndAssociationsToResolve:(id *)a0;
+ (id)messagesDateReceivedColumnName;
+ (id)messagesDisplayDateColumnName;
+ (id)messagesSenderColumnName;
+ (id)objectPropertyMapperForSchema:(id)a0 protectedSchema:(id)a1;
+ (id)partialMessagesTableSchemaAndForeignKeysToResolve:(id *)a0 associationsToResolve:(id *)a1;
+ (id)protectedTablesAndForeignKeysToResolve:(id *)a0;
+ (id)recipientsTableSchemaAndForeignKeysToResolve:(id *)a0 associationsToResolve:(id *)a1;
+ (id)selectAddressesStatementWithResultColumns:(id *)a0;
+ (id)tableRelationshipsForSchema:(id)a0 protectedSchema:(id)a1;
+ (id)tablesAndForeignKeysToResolve:(id *)a0 associationsToResolve:(id *)a1;

- (void).cxx_destruct;
- (id)messageObjectIDForURL:(id)a0;
- (char)compressDirectory:(id)a0 shouldCancel:(id /* block */)a1 error:(id *)a2;
- (char)compressFile:(id)a0 error:(id *)a1;
- (id)persistedMessagesForBusinessID:(long long)a0;
- (char)_addBrandIndicatorEvidenceWithInfo:(id)a0 brandIndicatorDatabaseID:(long long)a1 withConnection:(id)a2 evidenceDatabaseID:(long long *)a3 existingEvidence:(id *)a4;
- (char)_addBrandIndicatorWithInfo:(id)a0 withConnection:(id)a1 indicatorDatabaseID:(long long *)a2 existingIndicator:(id *)a3;
- (id)_cachedMetadataJSONForKey:(id)a0 globalMessageID:(long long)a1;
- (void)_checkCachedMetadataRowLimitWithConnection:(id)a0;
- (void)_checkForFollowUpExpirationWithQuery:(id)a0;
- (long long)_countForSQLQuery:(id)a0;
- (id)_databaseIDsDictionaryForGlobalMessageIDs:(id)a0 mailboxScope:(id)a1 includingDisabledAccounts:(char)a2;
- (id)_expressionForNonDeletedMessagesDisqualifyingColumn:(char)a0;
- (id)_groupMessageObjectIDsByMailboxScope:(id)a0;
- (void)_iterateMessagesMatchingQuery:(id)a0 limit:(long long)a1 cancelationToken:(id)a2 handler:(id /* block */)a3;
- (void)_iteratePersistedMessagesMatchingQuery:(id)a0 limit:(long long)a1 cancelationToken:(id)a2 requireProtectedData:(char)a3 handler:(id /* block */)a4;
- (id)_messageForSQLRow:(id)a0 connection:(id)a1 mailboxScope:(id)a2 recipientsCache:(id)a3;
- (char)_persistAuthenticationState:(id)a0 forGlobalMessageID:(id)a1 connection:(id)a2;
- (id)_persistedMessageIDsForMessagesForConversationIDs:(id)a0 onlyFollowUps:(char)a1;
- (id)_predicatesSeparatedByMailboxOrAccountForAndPredicate:(id)a0 containsMailboxPredicate:(char *)a1;
- (id)_predicatesSeparatedByMailboxOrAccountForOrPredicate:(id)a0 containsMailboxPredicate:(char *)a1;
- (id)_predicatesSeparatedByMailboxOrAccountForPredicate:(id)a0 containsMailboxPredicate:(char *)a1;
- (void)_recipientsForMessageWithDatabaseID:(long long)a0 connection:(id)a1 recipientsCache:(id)a2 toRecipientStrings:(id)a3 ccRecipientStrings:(id)a4;
- (void)_setCachedMetadataJSON:(id)a0 forKey:(id)a1 globalMessageID:(long long)a2;
- (id)_threadQueryForThreadObjectID:(id)a0;
- (id)addBrandIndicatorWithInfo:(id)a0;
- (void)addMessagesToVerify:(id)a0 forBrandIndicatorEvidenceDatabaseID:(long long)a1;
- (id)baseMessageForOutgoingMessage:(id)a0 isDraft:(char)a1;
- (id)brandIndicatorForURL:(id)a0;
- (id)brandIndicatorsForURLs:(id)a0;
- (id)cachedDatabaseIDsDictionaryForGlobalMessageIDs:(id)a0;
- (id)cachedMetadataJSONForKey:(id)a0 messageID:(id)a1;
- (id)collectStatistics;
- (void)collectStatisticsWithStatistics:(id)a0;
- (id)completeCachedMetadataJSONForGlobalMessageID:(long long)a0;
- (long long)countOfJournaledMessagesMatchingQuery:(id)a0;
- (long long)countOfMessageStatement:(id)a0;
- (long long)countOfMessagesMatchingQuery:(id)a0;
- (id)countOfMessagesMatchingQueryPerMailbox:(id)a0;
- (long long)countOfMessagesWithGlobalMessageID:(long long)a0 matchingQuery:(id)a1;
- (id)createContextForIteration;
- (id)databaseIDsDictionaryForMessageObjectIDs:(id)a0;
- (id)databaseIDsDictionaryForMessageObjectIDs:(id)a0 includingDisabledAccounts:(char)a1;
- (id)diagnosticsForForMessageObjectIDs:(id)a0;
- (id)enabledAccountMailboxesExpression;
- (long long)findAddressIDForAddress:(id)a0;
- (id)flagsForLegacyFlags:(long long)a0 numberOfAttachments:(long long *)a1;
- (id)fullDataIfAvailableForMessage:(id)a0;
- (long long)globalIDForMessageIDHash:(id)a0;
- (long long)globalIDForMessageIDHeader:(id)a0;
- (long long)globalIDForMessageWithDatabaseID:(long long)a0 mailboxScope:(id *)a1;
- (id)initWithMailboxPersistence:(id)a0 database:(id)a1 hookRegistry:(id)a2 userProfileProvider:(id)a3 blockedSenderManager:(id)a4 vipReader:(id)a5 gmailLabelPersistence:(id)a6;
- (void)iterateMessagesMatchingQuery:(id)a0 batchSize:(long long)a1 firstBatchSize:(long long)a2 limit:(long long)a3 cancelationToken:(id)a4 handler:(id /* block */)a5;
- (void)iteratePersistedMessagesMatchingQuery:(id)a0 limit:(long long)a1 cancelationToken:(id)a2 handler:(id /* block */)a3;
- (void)iteratePersistedMessagesMatchingQuery:(id)a0 limit:(long long)a1 cancelationToken:(id)a2 requireProtectedData:(char)a3 handler:(id /* block */)a4;
- (id)mailboxesQueryExpressionForMailboxDatabaseIDs:(id)a0 forExclusion:(char)a1;
- (struct { unsigned char x0; unsigned char x1; unsigned char x2; })messageColorFromStringRepresentation:(id)a0;
- (id)messageIDsWithBasePaths:(id)a0;
- (id)messageObjectIDCriterionExpressionForPredicateValue:(id)a0;
- (id)messageObjectIDsForSearchableItemIdentifiers:(id)a0;
- (id)messagesForMessageObjectIDs:(id)a0 missedMessageObjectIDs:(id *)a1;
- (id)messagesForPersistedMessages:(id)a0 mailboxScope:(id)a1;
- (id)messagesMatchingQuery:(id)a0;
- (id)messagesMatchingQuery:(id)a0 limit:(long long)a1;
- (id)messagesMatchingQuery:(id)a0 limit:(long long)a1 cancelationToken:(id)a2;
- (id)metadataForAddresses:(id)a0;
- (void)notifyGeneratedSummaryChangeForMessage:(id)a0 window:(id)a1;
- (void)performDatabaseReadBlock:(id /* block */)a0;
- (void)performDatabaseWorkInBlockWithHighPriority:(id /* block */)a0;
- (void)persistFollowUp:(id)a0 forMessages:(id)a1;
- (char)persistMessageAuthenticationState:(long long)a0 forMessage:(id)a1;
- (char)persistMessageAuthenticationState:(long long)a0 forMessageWithGlobalMessageID:(long long)a1;
- (char)persistMessageAuthenticationStates:(id)a0;
- (void)persistSendLaterForMessages:(id)a0 date:(id)a1;
- (id)persistedMessageForSQLRow:(id)a0 connection:(id)a1 iterationContext:(id)a2;
- (id)persistedMessageIDsForGlobalMessageIDs:(id)a0;
- (id)persistedMessageIDsForMessagesForConversationIDs:(id)a0;
- (id)persistedMessageIDsForMessagesWithFollowUpsForConversationIDs:(id)a0;
- (id)persistedMessagesForDatabaseIDs:(id)a0 requireProtectedData:(char)a1 temporarilyUnavailableDatabaseIDs:(id *)a2;
- (id)persistedMessagesForForMessageIDHeader:(id)a0 requireProtectedData:(char)a1;
- (id)persistedMessagesForMessageObjectIDs:(id)a0 requireProtectedData:(char)a1 temporarilyUnavailableMessageObjectIDs:(id *)a2;
- (id)persistedMessagesForObjectIDs:(id)a0 requireProtectedData:(char)a1;
- (id)persistedMessagesFromSendersWithAddressIDs:(id)a0 temporarilyUnavailableMessageObjectIDs:(id)a1;
- (id)persistedMessagesFromSendersWithAddressIDs:(id)a0 temporarilyUnavailableMessageObjectIDs:(id)a1 limit:(unsigned long long)a2;
- (id)persistedMessagesMatchingQuery:(id)a0 limit:(long long)a1;
- (id)persistedMessagesMatchingQuery:(id)a0 limit:(long long)a1 requireProtectedData:(char)a2;
- (void)persistenceDidChangeBusinessIDForAddressID:(id)a0 fromBusinessID:(long long)a1;
- (void)persistenceDidChangeCategoryForAddressIDs:(id)a0 userInitiated:(char)a1 generationWindow:(id)a2;
- (void)persistenceDidNotChangeCategoryForAddressIDs:(id)a0;
- (void)persistenceWillChangeCategoryForAddressIDs:(id)a0;
- (long long)priorityFromLegacyFlags:(long long)a0 actedOnByExtension:(char *)a1 colorIsHighlight:(char *)a2;
- (id)queriesSeparatedByMailboxForQuery:(id)a0;
- (id)queryWithExpandedMailboxesFromQuery:(id)a0;
- (void)recipientsForMessageWithDatabaseID:(long long)a0 connection:(id)a1 recipientsCache:(id)a2 toRecipientStrings:(id)a3 ccRecipientStrings:(id)a4;
- (void)reconcileJournalWithCompletionBlock:(id /* block */)a0;
- (void)removeBrandIndicatorEvidenceWithDatabaseID:(long long)a0 forBrandIndicatorDatabaseID:(long long)a1;
- (void)removeBrandIndicatorWithDatabaseID:(long long)a0;
- (id)requestContentForMessageObjectID:(id)a0 requestID:(unsigned long long)a1 options:(id)a2 delegate:(id)a3 completionHandler:(id /* block */)a4;
- (id)requestSummaryForMessageObjectID:(id)a0;
- (id)retrieveFollowUpJsonStringForModelEvaluationForSuggestionsForMessages:(id)a0;
- (void)setBrandIndicator:(id)a0 forDatabaseID:(long long)a1;
- (void)setBrandIndicatorEvidence:(id)a0 forDatabaseID:(long long)a1;
- (char)setBrandIndicatorForMessages:(id)a0 fromPersistedBIMIInfo:(id)a1;
- (void)setCachedMetadataJSON:(id)a0 forKey:(id)a1 messageID:(id)a2;
- (void)setContentProtectionForAttachmentFile:(id)a0;
- (void)setGeneratedSummaries:(id)a0;
- (void)setGeneratedSummary:(id)a0 forPersistedMessage:(id)a1;
- (void)setGeneratedSummary:(id)a0 forSearchableItemIdentifer:(id)a1;
- (void)setMetadata:(id)a0 forAddress:(id)a1;
- (id)sortableMessagesForPersistedMessages:(id)a0 mailboxScope:(id)a1;
- (id)sortableMessagesMatchingQuery:(id)a0 limit:(long long)a1;
- (id)sqlQueryForQuery:(id)a0 connection:(id)a1;
- (void)test_tearDown;
- (id)unverifiedBrandIndicatorsWithLimit:(unsigned long long)a0;
- (void)updateBeforeDisplayForMessagesMatchingQuery:(id)a0;
- (void)updateBeforeDisplayForPersistedMessages:(id)a0;
- (void)updateDisplayDateForPersistedMessages:(id)a0 displayDate:(id)a1 changeIsRemote:(char)a2;
- (void)updatePersistedMessages:(id)a0 withPersistedBIMIInfo:(id)a1;

@end
