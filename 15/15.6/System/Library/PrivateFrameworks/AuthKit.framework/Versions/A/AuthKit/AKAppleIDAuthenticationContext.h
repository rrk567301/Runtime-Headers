@class AKDevice, AKAuthenticatableResource, NSDictionary, NSObject, AKCompanionKeyEnvelope, NSString, NSSet, AKAnisetteData, NSArray, NSData, AKProtoAccountContext, NSNumber, NSUUID;
@protocol OS_dispatch_queue, AKAnisetteServiceProtocol;

@interface AKAppleIDAuthenticationContext : NSObject <AKAppleIDAuthenticationLimitedUIProvider, AKCommandLineSupporting, AKAuthenticationContext_Internal, AKPasswordAuthenticationContext, AKAuthenticationContext, NSSecureCoding> {
    NSString *_generatedCode;
    NSNumber *_latitude;
    NSNumber *_longitude;
    NSString *_deviceClass;
    NSString *_deviceColor;
    NSString *_deviceEnclosureColor;
    NSString *_notificationDisclaimer;
    struct __CFUserNotification { } *_activeSecondFactoryEntryPrompt;
    id /* block */ _secondFactoryEntryCompletion;
    NSObject<OS_dispatch_queue> *_secondFactorQueue;
    NSString *_interpolatedReason;
    char _isContextRequestingReauthForExistingService;
}

@property (class, readonly) char supportsSecureCoding;

@property (copy, nonatomic) NSString *generatedCode;
@property (copy, nonatomic) NSNumber *latitude;
@property (copy, nonatomic) NSNumber *longitude;
@property (copy, nonatomic) NSString *deviceClass;
@property (copy, nonatomic) NSString *deviceColor;
@property (copy, nonatomic) NSString *deviceEnclosureColor;
@property (copy, nonatomic) NSString *notificationDisclaimer;
@property (nonatomic) char _shouldSendIdentityTokenForRemoteUI;
@property (nonatomic) char _shouldSendGrandSlamTokensForRemoteUI;
@property (readonly, nonatomic) char _requiresPasswordInput;
@property (readonly, nonatomic) NSString *_interpolatedReason;
@property (readonly, nonatomic) NSString *_interpolatedReasonWithBlame;
@property (nonatomic) char _shouldSkipInitialReachabilityCheck;
@property (nonatomic) char _shouldBroadcastForProximityAuthOnly;
@property (nonatomic) unsigned long long _attemptIndex;
@property (readonly, nonatomic, getter=isContextEligibleForSilentAuthCoercion) char contextEligibleForSilentAuthCoercion;
@property (readonly, nonatomic, getter=isContextEligibleForSilentAuth) char contextEligibleForSilentAuth;
@property (readonly, nonatomic, getter=isContextEligibleForBiometricOrPasscodeAuth) char contextEligibleForBiometricOrPasscodeAuth;
@property (readonly, nonatomic, getter=isContextRequestingReauthForExistingService) char contextRequestingReauthForExistingService;
@property (nonatomic) char _keepAlive;
@property (readonly, nonatomic) char _shouldRefreshAccountAndUpdateContext;
@property (retain, nonatomic) NSData *displayImageData;
@property (nonatomic, getter=_isForcedEligibleForForegroundAuthentication, setter=set_forceEligibleForForegroundAuthentication:) char _forceEligibleForForegroundAuthentication;
@property (nonatomic) char deviceRegionRequired;
@property (nonatomic, getter=isPasscodeOnlyPolicy) char passcodeOnlyPolicy;
@property (copy, nonatomic) NSString *telemetryDeviceSessionID;
@property (copy, nonatomic) NSString *telemetryFlowID;
@property (copy, nonatomic) NSString *passwordlessToken;
@property (copy, nonatomic) NSString *idmsDataToken;
@property (nonatomic) char isNativeTakeover;
@property (nonatomic) char isRequestedFromOOPViewService;
@property (nonatomic) unsigned long long securityCode;
@property (readonly, nonatomic) char isConfiguredForTokenUpgrade;
@property (nonatomic) char piggybackingForTrustedDevice;
@property (nonatomic) char shouldPromptForPasswordOnly;
@property (nonatomic) char shouldUpdatePersistentServiceTokens;
@property (nonatomic, setter=_setProxyingForApp:) char _isProxyingForApp;
@property (copy, nonatomic, setter=_setProxiedAppBundleID:) NSString *_proxiedAppBundleID;
@property (copy, nonatomic) NSString *_passwordPromptTitle;
@property (nonatomic) char _isPasswordEditable;
@property (copy, nonatomic, setter=_setShortLivedToken:) NSString *_shortLivedToken;
@property (copy, nonatomic, setter=_setIdentityToken:) NSString *_identityToken;
@property (copy, nonatomic, setter=_setRemoteUIIdentityToken:) NSString *_remoteUIIdentityToken;
@property (retain, nonatomic) id<AKAnisetteServiceProtocol> anisetteDataProvider;
@property (copy, nonatomic, setter=setAppleIDLoginEnabled:) NSNumber *isAppleIDLoginEnabled;
@property (copy, nonatomic, setter=setHasEmptyPassword:) NSNumber *hasEmptyPassword;
@property (nonatomic) char shouldRequestRecoveryPET;
@property (nonatomic) char shouldRequestShortLivedToken;
@property (nonatomic) char shouldRequestConfigurationInfo;
@property (nonatomic) char supportsPiggybacking;
@property (nonatomic) char anticipateEscrowAttempt;
@property (copy, nonatomic) NSSet *desiredInternalTokens;
@property (nonatomic, setter=setFirstTimeLogin:) char isFirstTimeLogin;
@property (nonatomic) char shouldSkipSettingsLaunchAlert;
@property (copy, nonatomic) NSString *securityUpgradeContext;
@property (copy, nonatomic, setter=_setMessage:) NSString *_message;
@property (copy, nonatomic, setter=_setMasterKey:) NSString *_masterKey;
@property (retain, nonatomic) AKAnisetteData *proxiedDeviceAnisetteData;
@property (retain, nonatomic) AKAnisetteData *companionDeviceAnisetteData;
@property (nonatomic) char shouldPreventInteractiveAuth;
@property (nonatomic) char shouldForceInteractiveAuth;
@property (nonatomic) char needsNewChildAccount;
@property (nonatomic) char needsSecurityUpgradeUI;
@property (nonatomic) char isRKVerification;
@property (copy, nonatomic) NSString *dependentAltDSID;
@property (copy, nonatomic) NSString *cellularDataAttributionAppBundleID;
@property (nonatomic) long long verifyCredentialReason;
@property (copy, nonatomic, setter=setCustodianRecoveryToken:) NSString *custodianRecoveryToken;
@property (copy, nonatomic) NSString *callerIconBundlePath;
@property (copy, nonatomic) NSString *localizedCallerName;
@property (nonatomic) char enablePasscodeAuth;
@property (readonly, nonatomic, getter=isContextEligibleForPasscodeAuth) char contextEligibleForPasscodeAuth;
@property (copy, nonatomic) NSString *serviceToken;
@property (copy, nonatomic) NSString *proxiedAppleID;
@property (copy, nonatomic) NSString *sourceAltDSID;
@property (nonatomic) char allowAuthenticationBeforeFirstUnlock;
@property (retain, nonatomic) AKProtoAccountContext *protoAccountContext;
@property (retain, nonatomic) AKAuthenticatableResource *authenticatableResource;
@property (copy, nonatomic) NSString *displayString;
@property (copy, nonatomic) NSString *displayTitle;
@property (nonatomic) char isUsernameEditable;
@property (nonatomic) char shouldAllowAppleIDCreation;
@property (nonatomic) char needsCredentialRecovery;
@property (nonatomic) char needsNewAppleID;
@property (nonatomic) char needsPasswordChange;
@property (nonatomic, setter=setTriggeredByNotification:) char isTriggeredByNotification;
@property (copy, nonatomic) NSString *reason;
@property (copy, nonatomic) NSString *defaultButtonString;
@property (nonatomic) long long maximumLoginAttempts;
@property (copy, nonatomic) NSString *serviceIdentifier;
@property (copy, nonatomic) NSArray *serviceIdentifiers;
@property (nonatomic) char isEphemeral;
@property (copy, nonatomic) NSString *DSID;
@property (copy, nonatomic) NSDictionary *httpHeadersForRemoteUI;
@property (retain, nonatomic) id clientInfo;
@property (nonatomic) char shouldOfferSecurityUpgrade;
@property (nonatomic) char needsRepair;
@property (retain, nonatomic) NSString *title;
@property (copy, nonatomic) NSString *helpAnchor;
@property (copy, nonatomic) NSString *helpBook;
@property (nonatomic) long long authenticationPromptStyle;
@property (retain, nonatomic) NSString *cancelButtonString;
@property (retain, nonatomic) NSString *alternativeButtonString;
@property (nonatomic) char hideAlternativeButton;
@property (nonatomic) char hideCancelButton;
@property (nonatomic) char hideReasonString;
@property (nonatomic) char clientShouldHandleAlternativeButtonAction;
@property (retain, nonatomic) NSString *windowTitle;
@property (nonatomic) char alwaysShowUsernameField;
@property (copy, nonatomic) NSString *privacyBundleIdentifier;
@property (nonatomic) char disableProximityAuth;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) char cliMode;
@property (readonly, nonatomic) char isContextEligibleForSilentAuth;
@property (readonly, nonatomic) unsigned long long _capabilityForUIDisplay;
@property (nonatomic) char _performUIOutOfProcess;
@property (nonatomic) char ignorePasswordCache;
@property (nonatomic) char _ignoreShouldContinueProxy;
@property (copy, nonatomic) NSString *username;
@property (nonatomic) long long serviceType;
@property (nonatomic) unsigned long long authenticationType;
@property (nonatomic) unsigned long long authenticationMode;
@property (nonatomic) char isMDMInformationRequired;
@property (copy, nonatomic, setter=_setProxiedAppName:) NSString *_proxiedAppName;
@property (copy, nonatomic) NSDictionary *appProvidedData;
@property (copy, nonatomic) NSString *appProvidedContext;
@property (copy, nonatomic) AKDevice *proxiedDevice;
@property (copy, nonatomic) AKDevice *companionDevice;
@property (retain, nonatomic) AKCompanionKeyEnvelope *companionKeyEnvelope;
@property (readonly, nonatomic) NSUUID *_identifier;
@property (copy, nonatomic) NSString *altDSID;
@property (copy, nonatomic, setter=_setPassword:) NSString *_password;

+ (id)_identifierForContext:(id)a0;

- (id)init;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)initWithContext:(id)a0;
- (id)_initWithIdentifier:(id)a0;
- (id)authKitAccount:(id *)a0;
- (id)_appendBlameIfRequiredTo:(id)a0;
- (char)_isEligibleForPasscodeAuth;
- (char)_isVerifyCredentialReasonEligibleForBiometricOrPasscodeAuth;
- (char)_localUserHasEmptyPassword;
- (id)_sanitizedCopy;
- (void)_updateWithValuesFromContext:(id)a0;
- (id)authKitAccountForSilentServiceToken:(id *)a0;
- (void)dismissBasicLoginUIWithCompletion:(id /* block */)a0;
- (void)dismissSecondFactorUIWithCompletion:(id /* block */)a0;
- (id)initWithAuthenticatedServerRequestContext:(id)a0;
- (void)isConfiguredForTokenUpgradeWithCompletion:(id /* block */)a0;
- (void)presentBasicLoginUIWithCompletion:(id /* block */)a0;
- (void)presentBiometricOrPasscodeValidationForAppleID:(id)a0 completion:(id /* block */)a1;
- (void)presentLoginAlertWithError:(id)a0 title:(id)a1 message:(id)a2 completion:(id /* block */)a3;
- (void)presentSecondFactorAlertWithError:(id)a0 title:(id)a1 message:(id)a2 completion:(id /* block */)a3;
- (void)presentSecondFactorUIWithCompletion:(id /* block */)a0;

@end
