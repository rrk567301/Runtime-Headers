@class NSArray, NSString, NSDictionary, _PASCFBurstTrie;

@interface PPConfigurationGuardedData : NSObject {
    float remoteTopicsMultiplier;
    double halfValuePosition;
    double nonReaderTextWeight;
    double analyticsSamplingRate;
    double musicDataCollectionSamplingRateForCTS;
    double musicDataCollectionSamplingRateForAMP;
    int musicDataCollectionMaximumRecordsPerType;
    char musicDataCollectionCollectNonAMPNowPlaying;
    NSArray *musicDataCollectionAMPBundleIds;
    int sportsMetricsNumberOfTeamsLogged;
    int sportsMetricsNumberOfLeaguesLogged;
    NSString *sportsMetricsEventName;
    double sportsMetricsSamplingRate;
    NSString *variantName;
    NSString *naturalVariantName;
    NSArray *availableVariantNames;
    NSDictionary *differentiallyPrivateEntityLogLevels;
    NSDictionary *topicsSourceMultiplier;
    NSDictionary *topicsAlgorithmMultiplier;
    NSDictionary *namedEntityAlgorithmConfiguration;
    NSDictionary *topicAlgorithmConfiguration;
    NSDictionary *locationAlgorithmConfiguration;
    _PASCFBurstTrie *topicCalibration;
    char safariDonationTitleExtractionEnabled;
    char safariDataDetectorsEnabledForHighMemoryDevices;
    float scoreThresholdForNamedEntity;
    float scoreThresholdForTopic;
    float scoreThresholdForLocation;
    float feedbackSessionLogsSamplingRate;
    NSDictionary *feedbackSessionLogsSamplingRateOverrides;
    float feedbackSessionLogsExtractionsSamplingRate;
    int feedbackSessionLogsGeohashLength;
    int analyticsMaximumNumberOfRecords;
    double topicDecayHalfLifeSeconds;
    double namedEntityDecayHalfLifeSeconds;
    double locationDecayHalfLifeSeconds;
    char topicScoringUsesCoreML;
    char namedEntityScoringUsesCoreML;
    char flattenTopicsForCoreML;
    char flattenNamedEntitiesforCoreML;
    char namedEntityScoringUsesHybrid;
    char topicScoringUsesHybrid;
    char locationScoringUsesHybrid;
    double decayedFeedbackCountsHalfLifeDays;
    char notificationExtractionEnabled;
    char namedEntityFeedbackUsesCoreML;
    char topicFeedbackUsesCoreML;
    char locationFeedbackUsesCoreML;
    NSArray *engagementKValues;
    char use2StageScoreInterpreterForNEScoring;
    char use2StageScoreInterpreterForTPScoring;
    char use2StageScoreInterpreterForLocationScoring;
    char topicMappingUsesCoreML;
    double topicMappingCoreMLThreshold;
    char locationScoringUsesCoreML;
    double routineExtractionScoreCountWeight;
    double routineExtractionScoreDurationWeight;
    double routineExtractionScoreDecayHalfLifeDays;
    NSDictionary *linearModelHyperparameters;
    int maxNumberMappedTopics;
    int maxNumberNamedEntities;
    unsigned char customTaggerMaxTokenCount;
    unsigned int mapsSearchQueryLimit;
    double mapsSearchQueryFromDateInterval;
    unsigned int namedEntityLoadAndMonitorInitialLoadLimit;
    NSDictionary *contactsLabelScoringMap;
    float recordSourceContactsInitialScore;
    float recordSourceNonContactsInitialScore;
    unsigned char peopleSuggesterMaxCount;
    double navigationMinimumTimeInterval;
    unsigned int navigationMinimumDistanceInMeters;
    unsigned char nextEventFuzzMinutes;
    int queryTimeNextEventFromMinutes;
    unsigned int queryTimeNextEventToMinutes;
    unsigned int queryTimeOtherEventToMinutes;
    unsigned long long sentenceEmbeddingVersion;
    unsigned int maxRelevantHighlightContacts;
    unsigned int maxNEExtractions;
    double scoreThreshold;
    char storeNewExtractions;
    char useRawNEExtractionScores;
    char useCachedPortraitScores;
    unsigned int maxItemsInFeatureDictionary;
    double socialHighlightDecayInterval;
    double socialHighlightRankedStorageMaxAge;
    double socialHighlightCacheTimeoutInterval;
    double socialHighlightFeedbackDeletionInterval;
    double socialHighlightMetricReportingInterval;
    unsigned int socialHighlightMaxNumHighlights;
    unsigned int socialHighlightTopKCount;
    char skipInsignificantEmailExtractions;
    double maxEmailHarvestingEligiblityInterval;
    char enableECRMessageTokenCountsPlugin;
    unsigned long long maxUniqueTokensInECRTokenCounts;
}

- (void).cxx_destruct;

@end
