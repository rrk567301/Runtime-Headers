@class VFXPhysicsShape, VFXNode, VFXBtShapeWrapper;

@interface VFXPhysicsBody : NSObject <NSCopying, NSSecureCoding> {
    VFXNode *_node;
    float _mass;
    float _charge;
    float _friction;
    float _restitution;
    float _rollingFriction;
    BOOL _defaultShape;
    VFXPhysicsShape *_physicsShape;
    long long _type;
    float _damping;
    void /* unknown type, empty encoding */ _angularVelocity;
    float _angularDamping;
    void /* unknown type, empty encoding */ _velocityFactor;
    void /* unknown type, empty encoding */ _angularVelocityFactor;
    void /* unknown type, empty encoding */ _velocity;
    char _ignoreGravity;
    float _linearRestingThreshold;
    float _angularRestingThreshold;
    char _explicitMomentOfInertia;
    void /* unknown type, empty encoding */ _momentOfInertia;
    void /* unknown type, empty encoding */ _centerOfMassOffset;
    unsigned long long _categoryBitMask;
    unsigned long long _collisionBitMask;
    unsigned long long _contactTestBitMask;
    char _allowsResting;
    void *_body;
    VFXBtShapeWrapper *_btShapeWrapper;
    char _active;
}

@property (class, readonly) char supportsSecureCoding;

@property (nonatomic) long long type;
@property (nonatomic) float mass;
@property (nonatomic) void /* unknown type, empty encoding */ momentOfInertia;
@property (nonatomic) char usesDefaultMomentOfInertia;
@property (nonatomic) float charge;
@property (nonatomic) float friction;
@property (nonatomic) float restitution;
@property (nonatomic) float rollingFriction;
@property (retain, nonatomic) VFXPhysicsShape *physicsShape;
@property (readonly, nonatomic) char hasDefaultShape;
@property (readonly, nonatomic) char isResting;
@property (nonatomic) char allowsResting;
@property (nonatomic) void /* unknown type, empty encoding */ velocity;
@property (nonatomic) void /* unknown type, empty encoding */ angularVelocity;
@property (nonatomic) float damping;
@property (nonatomic) float angularDamping;
@property (nonatomic) void /* unknown type, empty encoding */ velocityFactor;
@property (nonatomic) void /* unknown type, empty encoding */ angularVelocityFactor;
@property (nonatomic) unsigned long long categoryBitMask;
@property (nonatomic) unsigned long long collisionBitMask;
@property (nonatomic) unsigned long long contactTestBitMask;
@property (nonatomic, getter=isAffectedByGravity) char affectedByGravity;
@property (nonatomic) float continuousCollisionDetectionThreshold;
@property (nonatomic) void /* unknown type, empty encoding */ centerOfMassOffset;
@property (nonatomic) float linearRestingThreshold;
@property (nonatomic) float angularRestingThreshold;

+ (id)bodyWithType:(long long)a0 shape:(id)a1;
+ (id)dynamicBody;
+ (id)kinematicBody;
+ (id)staticBody;
+ (id)VFXUID_enumForProperty:(id)a0;
+ (id)VFXUID_creationOptions;
+ (id)VFXUID_instanciateWithOption:(id)a0;
+ (id)_generateDefaultShapeForNode:(id)a0;

- (void)dealloc;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)_activate;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setValue:(id)a0 forKey:(id)a1;
- (char)isActive;
- (id)valueForKey:(id)a0;
- (void *)_handle;
- (void)moveToPosition:(SEL)a0;
- (void *)_createBody;
- (id)_owner;
- (void)_ownerWillDie;
- (void)_removeOwner;
- (void)_setOwner:(id)a0;
- (float)angularSleepingThreshold;
- (void)applyForce:(id)a0 atPosition:(SEL)a1 impulse:(char)a2;
- (void)applyForce:(SEL)a0 impulse:(char)a1;
- (void)applyTorque:(SEL)a0 impulse:(char)a1;
- (void)clearAllForces;
- (float)continuousCollisionDetection;
- (id)initWithType:(long long)a0 shape:(id)a1;
- (float)linearSleepingThreshold;
- (void)moveToTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a0;
- (void)resetToTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a0;
- (void)resetTransform;
- (void)rotateToAxisAngle:(SEL)a0;
- (void)setAngularSleepingThreshold:(float)a0;
- (void)setLinearSleepingThreshold:(float)a0;
- (void)setResting:(char)a0;
- (void)updateGlobalScale:(double)a0;
- (void)_setBtShape:(id)a0;
- (void)_setPhysicsShape:(id)a0;
- (void)_updateCollisionShape;
- (id)angularVelocityFactorValue;
- (id)angularVelocityValue;
- (void)applyForceValue:(id)a0 atPosition:(id)a1 impulse:(char)a2;
- (void)applyForceValue:(id)a0 impulse:(char)a1;
- (void)applyTorqueValue:(id)a0 impulse:(char)a1;
- (void)cleanCollisionCache;
- (void)flagAsActive:(char)a0;
- (id)momentOfInertiaValue;
- (void)setAngularVelocityFactorValue:(id)a0;
- (void)setAngularVelocityValue:(id)a0;
- (void)setMomentOfInertiaValue:(id)a0;
- (void)setVelocityFactorValue:(id)a0;
- (void)setVelocityValue:(id)a0;
- (void)updateDefaultShape;
- (id)velocityFactorValue;
- (id)velocityValue;
- (struct __CFXWorld { } *)worldRef;

@end
