@class AVAudioEngine, VFXNode, MTLRenderPassDescriptor, NSObject, MTKView, VFXRenderGraph, AVAudioEnvironmentNode, VFXRenderOptions, VFXWorld, NSString, VFXRenderer, VFXTextureAttachmentDescriptor, NSColor;
@protocol MTLTexture, MTLBuffer, MTLRenderCommandEncoder, VFXWorldRendererDelegate, MTLComputePipelineState, MTLDevice, OS_dispatch_queue, MTLRasterizationRateMap, MTLCommandQueue, OS_dispatch_source;

@interface VFXCompositorRenderer : NSObject <MTKViewDelegate, VFXTextureAttachmentProvider, VFXWorldRenderer> {
    MTKView *_mtkView;
    NSObject<OS_dispatch_source> *_coalescingSource;
    unsigned long long _layout;
    unsigned long long _viewpointCoordinateSpace;
    id<MTLRasterizationRateMap> _rasterizationRateMap;
    id<MTLBuffer> _rasterizationRateMapDataBuffer[3];
    id<MTLComputePipelineState> _rasterizationRateMapBlitPipeline;
    VFXRenderer *_renderer;
    VFXRenderOptions *_renderOptions;
    VFXTextureAttachmentDescriptor *_colorAttachmentDescriptor;
    unsigned long long _loadAction;
    unsigned int _logicalWidth;
    unsigned int _logicalHeight;
    id<MTLTexture> _colorTexture;
    id<MTLTexture> _depthTexture;
    unsigned long long _sampleCount;
    id<MTLTexture> _colorTextures[3];
    id<MTLTexture> _depthTextures[3];
    struct { void /* unknown type, empty encoding */ columns[4]; } _viewMatrix0;
    struct { void /* unknown type, empty encoding */ columns[4]; } _viewMatrix1;
    NSObject<OS_dispatch_queue> *_renderingQueue;
}

@property (copy, nonatomic) NSColor *backgroundColor;
@property (nonatomic) struct { void /* unknown type, empty encoding */ x0[4]; } viewMatrix0;
@property (nonatomic) struct { void /* unknown type, empty encoding */ x0[4]; } viewMatrix1;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, retain, nonatomic) VFXTextureAttachmentDescriptor *finalColorDescriptor;
@property (retain, nonatomic) VFXWorld *world;
@property (weak, nonatomic) id<VFXWorldRendererDelegate> delegate;
@property (retain, nonatomic) VFXNode *pointOfView;
@property (nonatomic) char autoenablesDefaultLighting;
@property (nonatomic) unsigned long long antialiasingMode;
@property (nonatomic, getter=isJitteringEnabled) char jitteringEnabled;
@property (nonatomic, getter=isTemporalAntialiasingEnabled) char temporalAntialiasingEnabled;
@property (nonatomic) char additiveWritesToAlpha;
@property (nonatomic) char showsStatistics;
@property (nonatomic) unsigned long long debugOptions;
@property (readonly, nonatomic) id<MTLRenderCommandEncoder> currentRenderCommandEncoder;
@property (readonly, nonatomic) MTLRenderPassDescriptor *currentRenderPassDescriptor;
@property (readonly, nonatomic) id<MTLDevice> device;
@property (readonly, nonatomic) unsigned long long colorPixelFormat;
@property (readonly, nonatomic) unsigned long long depthPixelFormat;
@property (readonly, nonatomic) unsigned long long stencilPixelFormat;
@property (readonly, nonatomic) id<MTLCommandQueue> commandQueue;
@property (readonly, nonatomic) AVAudioEngine *audioEngine;
@property (readonly, nonatomic) AVAudioEnvironmentNode *audioEnvironmentNode;
@property (retain, nonatomic) VFXNode *audioListener;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentViewport;
@property (readonly, nonatomic) struct CGColorSpace { } *workingColorSpace;
@property (retain, nonatomic) VFXRenderGraph *renderGraph;

+ (unsigned char)frameBufferFeatures;
+ (Class)rendererClass;

- (void)dealloc;
- (id)init;
- (id)renderer;
- (void)mtkView:(id)a0 drawableSizeWillChange:(struct CGSize { double x0; double x1; })a1;
- (void)drawInMTKView:(id)a0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 options:(id)a1;
- (void *)__CFObject;
- (void)_addGPUFramePresentedHandler:(id /* block */)a0;
- (void)_allowGPUBackgroundExecution;
- (char)prepareObject:(id)a0 shouldAbortBlock:(id /* block */)a1;
- (void)_addGPUFrameCompletedHandler:(id /* block */)a0;
- (void)_addGPUFrameScheduledHandler:(id /* block */)a0;
- (void)set_commandBufferStatusMonitor:(id)a0;
- (void /* unknown type, empty encoding */)unprojectPoint:(SEL)a0;
- (id)_commandBufferStatusMonitor;
- (id)_resourceManagerMonitor;
- (char)isNodeInsideFrustum:(id)a0 withPointOfView:(id)a1;
- (id)nodesInsideFrustumWithPointOfView:(id)a0;
- (void)prepareObjects:(id)a0 withCompletionHandler:(id /* block */)a1;
- (void /* unknown type, empty encoding */)projectPoint:(SEL)a0;
- (void)set_resourceManagerMonitor:(id)a0;
- (void)_drawInRenderingQueueWithDrawable:(id)a0 renderPassDescriptor:(id)a1;
- (void)_initRendererWithOptions:(id)a0;
- (void)_rebuildRasterizationRateMap;
- (void)_rebuildTextures;
- (void)_setAntialiasingMode:(unsigned long long)a0 forcingReset:(char)a1;
- (char)_usesLayeredRendering;
- (char)_usesMultipleViewportRendering;
- (char)_wantsWorldRendererDelegationMessages;
- (id)initWithMTKView:(id)a0 options:(id)a1;
- (unsigned long long)loadActionForAttachment:(id)a0;
- (void)setViewpointCoordinateSpace:(unsigned long long)a0;
- (void)set_wantsWorldRendererDelegationMessages:(char)a0;
- (id)textureForAttachment:(id)a0 withDescriptor:(id)a1;
- (unsigned long long)viewpointCoordinateSpace;

@end
