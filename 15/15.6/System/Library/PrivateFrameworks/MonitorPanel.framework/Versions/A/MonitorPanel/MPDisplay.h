@class NSUUID, NSString, NSArray, MPDisplayHW, NSMutableDictionary, NSMutableArray, MPDisplayPreset, NSImage, MPDisplayEnclosurePreview, MPDisplayMode;

@interface MPDisplay : NSObject {
    unsigned int _ioService;
    NSString *_displayName;
    NSMutableArray *_allModes;
    NSMutableArray *_trimmedModes;
    NSMutableArray *_listHQModes;
    NSMutableArray *_listModes;
    NSMutableArray *_proMotionModes;
    NSMutableArray *_userModes;
    NSMutableArray *_vrrModes;
    NSMutableDictionary *_trimmedResolutions;
    NSMutableDictionary *_listHQResolutions;
    NSMutableDictionary *_listResolutions;
    NSMutableDictionary *_proMotionResolutions;
    NSMutableDictionary *_userResolutions;
    NSMutableDictionary *_vrrResolutions;
    NSMutableDictionary *_translationDict;
    NSMutableArray *_scanRates;
    NSMutableArray *_scanRateStrings;
    int _maximumAllowedDPI;
    NSUUID *_uuid;
    NSImage *_displayIcon;
    MPDisplayEnclosurePreview *_displayEnclosurePreview;
    MPDisplayEnclosurePreview *_displayEnclosurePreviewLarge;
    char _isRetina;
    char _hqModesForChiclets;
    char _uiProjectorOverride;
    char _hasHDRModes;
    char _preferHDRModes;
    char _needsUpdate;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _accessLock;
    void *_coreDisplayFrameworkBundle;
    void /* function */ *_isHDRModeSupported;
    void /* function */ *_isHDRModeEnabled;
    void /* function */ *_enableHDRMode;
    char _hasHDRModeSupport;
    NSMutableArray *_presetsArray;
    unsigned int _numberOfPresets;
    char _usePreciseRefreshRate;
    char _loadingPresets;
    char _isAppleProDisplay;
    MPDisplayHW *_displayHW;
}

@property (retain, nonatomic) NSString *displayName;
@property (readonly) NSString *titleName;
@property (retain) MPDisplayMode *currentMode;
@property (retain) MPDisplayMode *nativeMode;
@property (retain) MPDisplayMode *defaultMode;
@property (readonly) int displayID;
@property (readonly) int aliasID;
@property (readonly) int mirrorMasterDisplayID;
@property unsigned int userFlags;
@property (readonly) NSArray *scanRates;
@property (readonly) NSArray *scanRateStrings;
@property (nonatomic) int orientation;
@property char overscanEnabled;
@property char bestForVideoMode;
@property int underscan;
@property (readonly) int minUnderscan;
@property (readonly) int maxUnderscan;
@property (readonly) char isSmartDisplay;
@property (readonly) char hasSafeMode;
@property (readonly) char hasSimulscan;
@property (readonly) char hasTVModes;
@property (readonly) char isHiDPI;
@property (readonly) char isBuiltIn;
@property (readonly) char isBuiltInRetina;
@property (readonly) char isMirrored;
@property (readonly) char isMirrorMaster;
@property (readonly) char isForcedToMirror;
@property (readonly) char isTV;
@property (readonly) char is4K;
@property (readonly) char isProjector;
@property (readonly) char isAirPlayDisplay;
@property (readonly) char isSidecarDisplay;
@property (readonly) char hasMultipleRates;
@property (readonly) char hasZeroRate;
@property (readonly) char hasHDRModes;
@property (readonly) char preferHDRModes;
@property (readonly) char hasPresets;
@property (readonly) char hasRotationSensor;
@property (readonly) char isAppleProDisplay;
@property (readonly) NSArray *presets;
@property (readonly) MPDisplayPreset *activePreset;
@property (readonly) MPDisplayPreset *defaultPreset;
@property (readonly) char hasMenuBar;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } displayBounds;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } hardwareBounds;
@property (readonly) NSUUID *uuid;
@property (readonly) NSImage *displayIcon;
@property (readonly) NSImage *displayResolutionPreviewIcon;
@property (readonly) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } displayResolutionPreviewRect;

+ (id)_findPreviewFromDictionary:(id)a0 forOrientation:(long long)a1 size:(long long)a2 iPad:(char)a3 fallback:(char)a4;
+ (id)_imageForDisplay:(id)a0;
+ (id)_previewFromDictionary:(id)a0 forOrientation:(long long)a1 size:(long long)a2;
+ (id)displayEnclosurePreview:(long long)a0 typeIdentifier:(id)a1 orientation:(long long)a2;
+ (id)displayEnclosurePreview:(long long)a0 typeIdentifier:(id)a1 orientation:(long long)a2 fallback:(char)a3;
+ (id)displayEnclosurePreview:(long long)a0 vendorID:(unsigned int)a1 productID:(unsigned int)a2 orientation:(long long)a3 fallback:(char)a4;
+ (id)displayResolutionDict;

- (void)dealloc;
- (int)setMode:(id)a0;
- (id)allModes;
- (void)setMirrorMode:(id)a0;
- (id)modeWithNumber:(int)a0;
- (id)_loadPreview:(long long)a0 fallback:(char)a1;
- (void)addMatchingModesToTrimmed;
- (void)addTVModesToPreferred;
- (void)bucketizeDisplayModes;
- (void)buildPresetsList;
- (char)canChangeOrientation;
- (void)determineTrimmedModeList;
- (id)displayEnclosurePreview:(long long)a0;
- (id)displayEnclosurePreview:(long long)a0 fallback:(char)a1;
- (id)displayEnclosurePreviewIcon;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })displayEnclosurePreviewRect;
- (char)hasMultipleScanRates;
- (char)inDefaultMode;
- (id)initWithCGSDisplayID:(int)a0;
- (id)initWithCGSDisplayID:(int)a0 testDisplayInfo:(id)a1;
- (id)initWithTestDisplayInfo:(id)a0;
- (char)isAlias:(int)a0;
- (char)isModeNative:(id)a0;
- (char)isProMotionModeAtIndex:(int)a0 modeNumber:(int)a1;
- (char)isVRRModeAtIndex:(int)a0 modeNumber:(int)a1;
- (float)minRefreshRateForModeAtIndex:(int)a0 modeNumber:(int)a1;
- (id)modeMatchingResolutionOfMode:(id)a0 withScanRate:(id)a1;
- (id)modesForResolution:(id)a0;
- (id)modesMatchingResolutionOfMode:(id)a0;
- (id)modesOfType:(unsigned long long)a0;
- (id)multiscanModesForMode:(id)a0;
- (void)refreshModes;
- (void)refreshResolutions;
- (void)refreshResolutions:(id)a0 usingModeList:(id)a1;
- (void)refreshScanRates;
- (id)resolutionsOfType:(unsigned long long)a0;
- (id)scanRateForString:(id)a0;
- (char)setActivePreset:(id)a0;
- (void)setMirrorMaster:(char)a0;
- (void)setMirrorModeNumber:(int)a0;
- (int)setModeNumber:(int)a0;
- (void)setPreferHDRModes:(char)a0;
- (id)stringForScanRate:(id)a0;
- (char)supportsBestForVideoMode;
- (char)supportsOverscan;
- (char)supportsUnderscan;

@end
