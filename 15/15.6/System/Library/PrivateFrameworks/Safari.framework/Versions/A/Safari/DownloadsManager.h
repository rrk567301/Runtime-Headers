@class NSTimer, NSString, NSURL, WBSCoalescedAsynchronousWriter, NSMutableDictionary, NSMutableSet, NSMutableArray, NSMapTable;
@protocol DownloadsManagerDelegate;

@interface DownloadsManager : NSObject <WalletOrderFileDownloadDelegate, DownloadProgressEntryDelegate, PassFileDownloadDelegate, AuthenticationSheetRequestDelegate, DownloadAlertsManagerDataSource, DownloadViewControllerDataSource, DownloadViewControllerDelegate, WKDownloadDelegate> {
    NSMutableArray *_entries;
    NSMutableSet *_entriesPendingAlwaysShowSavePanelDownloadLocationRequest;
    NSMutableSet *_autoApprovedEntriesPendingDownload;
    NSMapTable *_pendingDownloadOriginatingWebViewsToNavigatedWebViews;
    NSMapTable *_wkDownloadToEntry;
    NSMapTable *_progressToDownload;
    NSMutableDictionary *_identifierToEntry;
    NSMutableSet *_openableDownloadURLs;
    NSMapTable *_wkDownloadToPassFileDownload;
    NSMutableDictionary *_passFileDownloadURLs;
    NSMapTable *_wkDownloadToWalletOrderFileDownload;
    NSMutableDictionary *_walletOrderFileDownloadURLs;
    NSMutableDictionary *_authenticationSessionDownloadURLs;
    NSMutableSet *_urlsOfPendingDownloadsInitiatedFromPrivateBrowsing;
    WBSCoalescedAsynchronousWriter *_historyWriter;
    NSURL *_cachedDownloadLocationURL;
    char _cachedShouldAlwaysPrompt;
    char _cachedIsDownloadLocationForced;
    char _loadedDownloadHistory;
    char _hadEntriesOnDisk;
    char _isPlanningToWriteOnQuit;
    char _hasStartedLoadingDownloadHistory;
    NSMutableArray *_blocksToExecuteWhenDownloadHistoryIsLoaded;
    struct unique_ptr<SafariShared::SuddenTerminationDisabler, std::default_delete<SafariShared::SuddenTerminationDisabler>> { struct __compressed_pair<SafariShared::SuddenTerminationDisabler *, std::default_delete<SafariShared::SuddenTerminationDisabler>> { struct SuddenTerminationDisabler *__value_; } __ptr_; } _suddenTerminationDisabler;
    float _totalProgress;
    NSTimer *_updateTotalProgressTimer;
    NSTimer *_removeDownloadsAfterOneDayTimer;
    unsigned int _downloadsAssertion;
}

@property (class, readonly, copy, nonatomic) NSString *downloadBundleExtension;

@property (weak, nonatomic) id<DownloadsManagerDelegate> delegate;
@property (readonly, nonatomic) long long numberOfDownloads;
@property (readonly, nonatomic) long long numberOfBusyDownloads;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)download:(id)a0 didReceiveResponse:(id)a1;
- (void)downloadDidFinish:(id)a0;
- (void)_download:(id)a0 didCreateDestination:(id)a1;
- (void)_downloadDidStart:(id)a0;
- (void)download:(id)a0 decideDestinationUsingResponse:(id)a1 suggestedFilename:(id)a2 completionHandler:(id /* block */)a3;
- (void)download:(id)a0 didFailWithError:(id)a1 resumeData:(id)a2;
- (void)download:(id)a0 didReceiveAuthenticationChallenge:(id)a1 completionHandler:(id /* block */)a2;
- (void)savePendingChangesBeforeTermination;
- (void)_removeEntry:(id)a0;
- (void)_removeEntries:(id)a0;
- (void)_updateSuddenTerminationSetting;
- (char)_areDownloadURLsHTTPFamilyURLs:(id)a0;
- (id)_passFileDownloadForWKDownload:(id)a0;
- (void)updateDownloadLocationURL:(id)a0 alwaysPromptForDownloadPath:(char)a1 isForced:(char)a2;
- (void)_addEntry:(id)a0 withNotification:(char)a1;
- (void)_addHistoryEntryFromLoadedDownloadHistory:(id)a0;
- (id)_busyEntries;
- (float)_calculateTotalProgress;
- (void)_cancelDownloadForEntry:(id)a0;
- (void)_cancelRemoveDownloadsAfterOneDayTimer;
- (id)_createEntryForWKDownload:(id)a0 profileIdentifier:(id)a1;
- (id)_createEntryForWKDownload:(id)a0 suggestedFilename:(id)a1 shouldAvoidPersistingIdentifyingInformation:(char)a2 profileIdentifier:(id)a3;
- (void)_didStartDownloadEntry:(id)a0 withNotification:(id)a1 voiceOverMessage:(id)a2;
- (void)_download:(id)a0 didWriteTotalBytes:(unsigned long long)a1 totalBytesExpectedToWrite:(unsigned long long)a2;
- (void)_downloadDidCancel:(id)a0 withResumeData:(id)a1;
- (void)_downloadEntryStageChanged:(id)a0;
- (char)_downloadFailsDueToNotEnoughFreeDiskSpaceForEntry:(id)a0 error:(id)a1;
- (id)_downloadHistoryFile;
- (long long)_downloadLocationRequestTypeForEntry:(id)a0;
- (id)_downloadMetadataIOQueue;
- (id)_downloadStartedString;
- (void)_downloadsClearingPolicyDidChange:(id)a0;
- (unsigned long long)_indexOfEntry:(id)a0;
- (void)_insertEntry:(id)a0 atIndex:(unsigned long long)a1;
- (void)_insertEntry:(id)a0 atIndex:(unsigned long long)a1 withNotification:(char)a2 removeOld:(char)a3;
- (char)_isDownloadURLStringHTTPFamilyURL:(id)a0;
- (void)_loadDownloadHistoryIfNeededWithCompletionHandler:(id /* block */)a0;
- (char)_needToWriteHistoryFileOnQuit;
- (void)_noteDownloadsChanged;
- (void)_notifyAboutStartingDownloadEntryAndUpdateProgressTimer:(id)a0 notificationToSend:(id)a1 voiceOverMessage:(id)a2;
- (id)_prepareToWriteDownloadHistory;
- (void)_removeEntries:(id)a0 withNotification:(char)a1 removeQuarantineHistoryEntry:(char)a2;
- (void)_removeEntriesFinishedBeforeDate:(id)a0;
- (void)_removeEntriesFinishedOverOneDayAgoAndUpdateTimerIfAppropriate;
- (void)_reportInsufficientDiskSpaceSheetForDownload:(id)a0;
- (void)_reportInvalidDownloadFileErrorForPath:(id)a0;
- (void)_requestFreeSpaceFromStorageManagerFromEntry:(id)a0 completion:(id /* block */)a1;
- (void)_requestSpaceOrShowSheetForInsufficientDiskSpaceErrorForEntry:(id)a0;
- (void)_saveDownloadHistory;
- (void)_scheduleCleanupOfOldestDownload;
- (void)_setEntry:(id)a0 forDownload:(id)a1;
- (char)_shouldCleanupHistoryAfterOneDay;
- (char)_shouldClearHistoryOnQuit;
- (char)_shouldRequestSpaceFromStorageManagerForEntry:(id)a0;
- (void)_startUpdateTotalProgressTimerIfNeeded;
- (void)_updateTotalProgress:(id)a0;
- (id)_validEntriesFromEntries:(id)a0 forBooleanKey:(id)a1;
- (id)_walletOrderFileDownloadForWKDownload:(id)a0;
- (void)_wkDownload:(id)a0 entry:(id)a1 didFailWithError:(id)a2 wasCanceled:(char)a3 resumeData:(id)a4;
- (void)addDownloadURL:(id)a0 forAuthenticationSession:(id)a1;
- (void)addPassFileDownloadURL:(id)a0 withMIMEType:(id)a1;
- (void)addPendingDownloadURLInitiatedFromPrivateBrowsing:(id)a0;
- (void)addWalletOrderFileDownloadURL:(id)a0 withMIMEType:(id)a1;
- (void)didCompleteAuthenticationSheetRequest:(id)a0;
- (id)downloadFilenameInProgressForDownloadAlertsManager:(id)a0;
- (void)downloadMayBeOpenedForURL:(id)a0;
- (void)downloadProgressEntry:(id)a0 createBundleToResumeDownloadWithFilename:(id)a1 completionHandler:(id /* block */)a2;
- (void)downloadProgressEntry:(id)a0 didResumeWithDownload:(id)a1;
- (void)downloadProgressEntryDidFinish:(id)a0 shouldClear:(char)a1;
- (void)downloadProgressEntryDidStop:(id)a0;
- (void)downloadViewController:(id)a0 didAcceptURLs:(id)a1;
- (void)downloadViewController:(id)a0 didRemoveEntries:(id)a1;
- (void)downloadViewController:(id)a0 didUndoRemovingEntry:(id)a1 atIndex:(unsigned long long)a2;
- (unsigned long long)downloadViewController:(id)a0 indexForEntry:(id)a1;
- (id)downloadViewController:(id)a0 validEntriesFromEntries:(id)a1 withBooleanKey:(id)a2;
- (void)downloadViewControllerDidRemoveIdleEntries:(id)a0;
- (id)downloadViewControllerGetEntries:(id)a0;
- (void)getDownloadLocationURLWithCompletionHandler:(id /* block */)a0;
- (void)getEntriesWithCompletionHandler:(id /* block */)a0;
- (unsigned long long)numberOfBusyEntriesForDownloadAlertsManager:(id)a0;
- (void)passFileDownload:(id)a0 downloadDidEnd:(id)a1;
- (id)pendingDownloadNavigatedWebViewForOriginatingWebView:(id)a0;
- (void)removeEntriesAddedAfterDate:(id)a0 profileIdentifiers:(id)a1;
- (void)removeIdleEntries;
- (void)removeIdleEntriesForProfilesWithIdentifiers:(id)a0;
- (void)removePassFileDownloadForWKDownload:(id)a0;
- (void)removeWalletOrderFileDownloadForWKDownload:(id)a0;
- (void)resumeDownloadAtPath:(id)a0;
- (void)setPendingDownloadNavigatedWebView:(id)a0 forOriginatingWebView:(id)a1;
- (void)showQueuedPassFromDownload:(id)a0;
- (void)showQueuedWalletOrderFromDownload:(id)a0;
- (void)startDownloadForRequest:(id)a0 shouldAvoidPersistingIdentifyingInformation:(char)a1 profileIdentifier:(id)a2;
- (void)startDownloadForRequest:(id)a0 suggestedFilename:(id)a1 downloadLocationRequestType:(long long)a2 shouldAvoidPersistingIdentifyingInformation:(char)a3 originatingWebView:(id)a4 profileIdentifier:(id)a5;
- (void)stopAllDownloads;
- (void)walletOrderFileDownload:(id)a0 downloadDidEnd:(id)a1;
- (void)wkDownload:(id)a0 willResumeWithResponse:(id)a1 fromByte:(long long)a2;

@end
