@class BrowserDiagnosticLoggingDelegate, NSEvent, BrowserWindowController, NSTrackingArea, History, NSUserActivity, NSMutableDictionary, WBSCreditCardData, NewExtensionBanner, WKWebView, PrintSheetSuppressionManager, TabDialogViewController, ReadingListItem, WBSQueryParameterFilteringDataQueue, WBSMutableOrderedSet, BrowserContainerViewController, PointerLockBanner, NSURLProtectionSpace, BrowserInspectorDelegate, NSURLRequest, NSObject, BrowserNavigationDelegate, NSURL, BackgroundLoad, WBSFormMetadata, AppExtensionPermissionMigrationBanner, BrowserResourceLoadDelegate, WebAppDocument, TabContentView, WBSTranslationContext, SearchableWKView, HighlightBanner, ScribbleUnifiedFieldOverlayController, WBSScribbleQuirksManager, NSDate, ResponsiveDesignViewController, PagePreviewAnimationController, PrivateBrowsingPrivacyProtectionsBanner, BrowserTabPersistentState, WBSWebExtensionTabPosition, FullscreenUnifiedFieldWindowController, NSWindow, WebCrashBanner, WBSSameDocumentNavigationToHistoryVisitCorrelator, CKContextCompleter, WBSSecIdentitiesCache, NSMapTable, WBSHistoryVisit, AutoFillInternalFeedbackActivityNoticeView, StartPageViewController, NSHTTPURLResponse, SafariAppExtensionsController, OnDeviceSummarization, WBSFluidProgressState, WBSMultiRoundAutoFillManager, BookmarksViewController, WalletOrderDownloadSuppressionManager, NSUUID, NSSet, WBSGeneratedPassword, NSMutableSet, WBSScribbleElement, LPLinkMetadata, NSString, WKNavigation, StatusMessage, SFAutoFillOneTimeCode, BrowserTabViewItem, NSMutableArray, PassDownloadSuppressionManager, ContinuousReadingListPageItem, WBSHistoryContextController, SafariWebExtensionsController, Banner, NSHashTable, BrowserDocument, WBSScribbleController, BrowserWKView, AutoFillFunctionBarProvider, WBSBrowsingAssistantController, NSTimer, WBSBrowsingAssistantAvailabilityLabels, SummarizationAnimationCoordinator, CKContextResponse, WBProfile, NSMutableIndexSet, _WKRemoteObjectInterface, NSDictionary, NSArray, AppLinkBannerController, WBSFormTelemetryDataMonitor, TextFieldInformation, WBSPermissionDialogThrottler, RemoteNotificationVerificationRequest, PrivateBrowsingExplanationBanner, ScribbleOverlay, DownloadLocationRemoteViewController, WBSSiriIntelligenceDonorTabData, WBSUserDefinedContentBlockerManager, NSValue, ContinuousReadingListViewController, NSPrintInfo, DefaultBrowserBanner, NSView, WBSReaderConfigurationManager, NSData, WBSURLSpoofingMitigator, WBSReaderFontManager, TabDialogPresentationManager, WBSPasswordsNotificationManager, SheetRequest;
@protocol AppExtensionMessageReceiver, WBSSandboxExtensionToken, RemoteNotificationStateObserver, WBSCertificateWarningPagePresenter, AuthenticationSessionNavigationHandling, BundleBrowserViewController, WBSWebExtensionWindow, OS_dispatch_queue, FormAutoFiller, WKUIDelegate, WBSContentBlockerStatisticsStore, BrowserContentLoaderDelegate;

@interface BrowserViewController : WebViewController <AppExtensionContentScriptMessageReceiver, AutoFillFunctionBarProviderDelegate, AutomaticBugCaptureObserver, BookmarksViewControllerDelegate, BrowserViewIconLoadingDelegate, DefaultBrowserBannerDelegate, FormAutoFillCompletionControllerObserver, FormMetadataObserver, NSOpenSavePanelDelegate, PagePreviewAnimationControllerDelegate, ReaderStateObserver, RemoteNotificationControllerClient, RemoteNotificationPermissionHandler, SandboxExtensionPresentationDelegate, TabDialogPresentationManagerDelegate, WBSCertificateWarningPageHandler, TabEntityInfoProviding, BrowserDiagnosticLoggingBiomeDelegate, WBSBiomeNavigationDonor, _WKAppHighlightDelegate, OnDeviceSummarizationDelegate, SummarizationAnimationCoordinatorDelegate, AssistantPopoverResultCollectionViewCellDelegate, WBSBrowsingAssistantControllerDelegate, PrivateBrowsingPrivacyProtectionsBannerDelegate, WBSQueryParameterFilteringDataQueueDelegate, WBSTranslationConsentAlertHelperDelegate, WBSTranslationContextDelegate, ScribbleUnifiedFieldOverlayControllerDelegate, WBSScribbleControllerDelegate, WBSSiriIntelligenceDonorTabDataProviding, AuthenticationSheetRequestDelegate, BrowserViewControllerLoading, MutableMediaSource, ReaderActivationDelegate, ReaderAvailabilityDelegate, SearchableWKViewCancelDelegate, TabDialogPresenter, WBSCloudFeedbackSource, WBSFluidProgressStateSource, WBSWebExtensionTab> {
    struct URLRequest { struct WKRetainPtr<const void *> { void *m_ptr; } m_webKit2Object; } _initialContents;
    char _isBetweenSidebarAnimationInformationGatheringSteps;
    char _waitingToForcePauseWebProcess;
    SheetRequest *_sheetRequest;
    struct RefPtr<Safari::ReaderController, WTF::RawPtrTraits<Safari::ReaderController>, WTF::DefaultRefDerefTraits<Safari::ReaderController>> { struct ReaderController *m_ptr; } _readerController;
    NSURL *_navigationURLFromClientRedirect;
    char _clientRedirectWasDoneDuringPageNavigation;
    char _shouldStayInContinuousModeOnNextNavigationToBackForwardListItem;
    struct unique_ptr<Safari::QueuedNavigation, std::default_delete<Safari::QueuedNavigation>> { struct __compressed_pair<Safari::QueuedNavigation *, std::default_delete<Safari::QueuedNavigation>> { struct QueuedNavigation *__value_; } __ptr_; } _queuedNavigation;
    BrowserDiagnosticLoggingDelegate *_diagnosticLoggingDelegate;
    struct unique_ptr<Safari::BrowserPageFormClient, std::default_delete<Safari::BrowserPageFormClient>> { struct __compressed_pair<Safari::BrowserPageFormClient *, std::default_delete<Safari::BrowserPageFormClient>> { struct BrowserPageFormClient *__value_; } __ptr_; } _pageFormClient;
    NSTimer *_sessionStateUpdatePageLoadSafetyTimer;
    char _hasDisplayedValidURL;
    int _currentPageType;
    int _expectedPageType;
    int _previousPageType;
    NSURL *_pendingBrowserInitiatedURL;
    NSString *_httpReferrerForFallbackURLs;
    NSMutableArray *_fallbackURLs;
    struct BackForwardListItem { struct WKRetainPtr<const void *> { void *m_ptr; } m_webKit2Object; } _previousItem;
    NSURL *_previousWebPageURL;
    id /* block */ _completionHandlerForTryingToCloseBeforeCommittingToBackgroundLoad;
    char _didDetermineReaderAvailability;
    char _performingWebSearch;
    NSDate *_pageLoadStartDate;
    char _didFailProvisionalLoad;
    long long _initiateLoadOperation;
    id /* block */ _initiateLoadBlock;
    NSMutableArray *_authenticationChallengeQueue;
    NSString *_committedEVCertificateOrganizationName;
    long long _tabLabelLifetime;
    char _shouldResetDialogSuppressionOnNextCommit;
    PrintSheetSuppressionManager *_printSheetSuppressionManager;
    NSString *_internetAccountDomain;
    NSString *_internetAccountUsername;
    NSString *_internetAccountPassword;
    char _readyToDisplayInternetAccountSetupPrompt;
    char _shouldDisplayInternetAccountSetupPrompt;
    struct BackForwardListItem { struct WKRetainPtr<const void *> { void *m_ptr; } m_webKit2Object; } _searchResultsForSnapBack;
    ResponsiveDesignViewController *_responsiveDesignModeViewController;
    NSString *_userAgentBeforeResponsiveMode;
    long long _autoplaySignalToSend;
    double _timestampOfLastPageCommit;
    struct RefPtr<Safari::FormAutoFillCompletionController, WTF::RawPtrTraits<Safari::FormAutoFillCompletionController>, WTF::DefaultRefDerefTraits<Safari::FormAutoFillCompletionController>> { struct FormAutoFillCompletionController *m_ptr; } _formCompletionController;
    struct RefPtr<Safari::FormAutoFillCompletionController, WTF::RawPtrTraits<Safari::FormAutoFillCompletionController>, WTF::DefaultRefDerefTraits<Safari::FormAutoFillCompletionController>> { struct FormAutoFillCompletionController *m_ptr; } _submenuFormCompletionController;
    NSEvent *_lastKeyDownEventHandledByFormCompletionController;
    unsigned long long _formTextStatusValidationRequestIdentifier;
    NSMapTable *_backForwardItemToGeneratedPasswordMap;
    NSMapTable *_backForwardItemToGeneratedTypablePasswordMap;
    NSMapTable *_backForwardItemToGeneratedAlphanumericPasswordMap;
    WBSFormMetadata *_unsubmittedFormMetadata;
    NSDictionary *_unsubmittedPasswordGenerationCredentials;
    struct Frame { struct WKRetainPtr<const void *> { void *m_ptr; } m_webKit2Object; } _unsubmittedFormSourceFrame;
    NSMutableSet *_navigationsNeedingNewProcess;
    NSMutableDictionary *_frameHandlesToUniqueIDsOfControlsThatWereAutoFilled;
    id<FormAutoFiller> _formAutoFillerProxy;
    _WKRemoteObjectInterface *_formMetadataObserverInterface;
    TextFieldInformation *_editedPasswordFieldInformation;
    SFAutoFillOneTimeCode *_oneTimeCodeBeingFilled;
    WBSFormTelemetryDataMonitor *_formTelemetryDataMonitor;
    NSObject<OS_dispatch_queue> *_formTelemetryDataMonitorQueue;
    PrivateBrowsingPrivacyProtectionsBanner *_privateBrowsingPrivacyProtectionsBanner;
    char _canShowPrivateBrowsingPrivacyProtectionsBanner;
    char _didAlreadyShowPrivateBrowsingPrivacyProtectionsBannerForDomain;
    NSDate *_dateOfLastFinishedNavigation;
    DefaultBrowserBanner *_defaultBrowserBanner;
    AppLinkBannerController *_appLinkBannerController;
    Banner *_appLinkBanner;
    NewExtensionBanner *_newExtensionBanner;
    HighlightBanner *_highlightBanner;
    char _isDeferringHighlightBanner;
    BookmarksViewController *_bookmarksViewController;
    FullscreenUnifiedFieldWindowController *_fullscreenWindowController;
    NSURL *_openSearchURLToProcessAfterBackgroundLoadIsCommitted;
    NSMutableArray *_pagePreviewHistoryOperations;
    NSTimer *_updateAudioUITimer;
    char _shouldGoBackAfterBackgroundNavigationIsCommitted;
    NSHashTable *_spawnedTabsBrowserViewControllers;
    struct HashSet<Safari::WK::BackForwardListItem, WTF::DefaultHash<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>, WTF::HashTableTraits, WTF::ShouldValidateKey::Yes> { struct HashTable<Safari::WK::BackForwardListItem, Safari::WK::BackForwardListItem, WTF::IdentityExtractor, WTF::DefaultHash<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>, WTF::ShouldValidateKey::Yes> { union { struct BackForwardListItem *m_table; unsigned int *m_tableForLLDB; } ; } m_impl; } _invalidatedBackForwardItems;
    TabDialogPresentationManager *_tabDialogPresentationManager;
    char _didCrashOrWasTerminatedForBeingUnresponsiveInTheBackground;
    char _shouldResetOriginatingWindowWithPossibleJavaScriptAccessOnNextCommit;
    PagePreviewAnimationController *_pagePreviewAnimationController;
    NSMutableSet *_pagePreviewBrowserViewControllers;
    char _pagePreviewNeedsReloadOnTabTransition;
    NSMutableDictionary *_formAutoFillMetadataCorrectorsByFrameID;
    AutoFillFunctionBarProvider *_autoFillFunctionBarProvider;
    char _hasCheckedForPIPBeforePageUnloadForCurrentNavigation;
    char _hasInitializedTopContentInsets;
    id<AppExtensionMessageReceiver> _appExtensionMessageReceiverProxy;
    _WKRemoteObjectInterface *_appExtensionContentScriptMessageReceiverInterface;
    RemoteNotificationVerificationRequest *_remoteNotificationVerificationRequest;
    id<RemoteNotificationStateObserver> _remoteNotificationStateObserverProxy;
    _WKRemoteObjectInterface *_remoteNotificationStateObserverInterface;
    _WKRemoteObjectInterface *_remoteNotificationPermissionHandlerInterface;
    _WKRemoteObjectInterface *_readerStateObserverInterface;
    _WKRemoteObjectInterface *_certicateWarningPageHandlerInterface;
    NSDictionary *_certificateWarningContext;
    id<WBSCertificateWarningPagePresenter> _certificateWarningPagePresenterProxy;
    unsigned long long _postVisuallyNonEmptyLayoutBlockRequestIdentifier;
    NSMutableDictionary *_postVisuallyNonEmptyLayoutBlocks;
    _WKRemoteObjectInterface *_automaticBugCaptureObserver;
    WBSSecIdentitiesCache *_secIdentitiesCache;
    NSMutableArray *_sheetsToDismissOnNavigation;
    CKContextCompleter *_cachedContextCompleter;
    WBSHistoryContextController *_contextController;
    struct optional<SearchSuggestionNavigation> { union { char __null_state_; struct SearchSuggestionNavigation { char hasParsecResults; unsigned long long queryID; char sendCorrectButAbandonedFeedbackOnNextCommittedLoad; } __val_; } ; BOOL __engaged_; } _searchSuggestionNavigation;
    NSString *_domainWhereUserDeclinedAutomaticStrongPassword;
    NSMutableSet *_downloadURLs;
    NSMutableDictionary *_downloadDomainsToPendingPermissionDecisionHandlers;
    NSMutableArray *_blockedPopUpWindowConfigurations;
    WBSMutableOrderedSet *_allowedPopUpWindowDomainCache;
    char _isObservingKeyValueChanges;
    char _isObservingWebProcessStateKeyValueChanges;
    unsigned long long _clientsWaitingOnSandboxPresentationControllerBeforeFileLoadBegins;
    NSURL *_urlAssociatedWithScreenTimeShield;
    unsigned long long _mediaSuspensionReasons;
    char _shouldIgnoreURLAsAnalyticsImpression;
    char _shouldNotifyImpressionAnalyticsRecorder;
    char _shouldNotifyImpressionAnalyticsRecorderWhenDisplayedToUser;
    char _wantsToShowDefaultBrowserBanner;
    char _isTabClosing;
    char _firedClosedEvent;
    char _scheduledUpdateTabGroup;
    NSMutableSet *_potentialDownloadURLsFromReader;
    NSTimer *_heightPercentageUpdateTimer;
    DownloadLocationRemoteViewController *_saveDialogController;
    AppExtensionPermissionMigrationBanner *_permissionMigrationBanner;
    char _needsUpdateToolbarTrackerCount;
    WBSQueryParameterFilteringDataQueue *_queryParameterFilteringDataQueue;
    id<WBSContentBlockerStatisticsStore> _contentBlockerStatisticsStore;
    char _wasInspectorVisibleBeforeLocking;
    char _wasReaderInspectorVisibleBeforeLocking;
    NSString *_profileIdentifierForExtensions;
    _WKRemoteObjectInterface *_biomeNavigationDonorInterface;
    NSHTTPURLResponse *_navigationResponseToDonateAfterBackgroundLoadIsCommitted;
    WKNavigation *_contentBlockerOverrideNavigation;
    NSMutableIndexSet *_uniqueIDsOfFormsThatWereAutoFilled;
    NSMutableSet *_valuesAutoFilledForCurrentPage;
    char _hasPresentedAutoFillInternalFeedbackNoticeForCurrentPage;
    NSTimer *_activeAutoFillInternalFeedbackNoticeDismissalTimer;
    AutoFillInternalFeedbackActivityNoticeView *_activeAutoFillInternalFeedbackNoticeView;
    char _shouldDonatePageLoad;
    WBSScribbleController *_scribbleController;
    NSTrackingArea *_trackingAreaOverWebView;
    ScribbleOverlay *_scribbleOverlay;
    WBSScribbleElement *_lastSelectedScribbleElement;
    NSValue *_pendingScribbleSelectionLocation;
    ScribbleUnifiedFieldOverlayController *_scribbleUnifiedFieldOverlayController;
    WBSPasswordsNotificationManager *_passwordsNotificationManager;
    OnDeviceSummarization *_summarizer;
    SummarizationAnimationCoordinator *_summarizationAnimationCoordinator;
    NSUUID *_biomeWebpageIdentifier;
    NSURL *_previousBiomeURL;
    char _locked;
}

@property (readonly, nonatomic) id<BundleBrowserViewController> _bundleBrowserViewControllerProxy;
@property (retain, nonatomic, setter=_setStatusMessage:) StatusMessage *statusMessage;
@property (nonatomic, setter=_setShouldDownloadNextPage:) char shouldDownloadNextPage;
@property (copy, nonatomic, setter=_setOriginalURLString:) NSString *originalURLString;
@property (copy, nonatomic, setter=_setCommittedTabLabel:) NSString *committedTabLabel;
@property (nonatomic) char skipAnimationsWhenDismissingPendingTabDialogs;
@property (nonatomic, setter=_setShouldShowOriginalURLInsteadOfExpectedURLInUnifiedField:) char shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField;
@property (retain, nonatomic) CKContextResponse *contextResponse;
@property (nonatomic, getter=isTryingToClose) char tryingToClose;
@property (readonly, nonatomic) char skipSyncableTabUpdates;
@property (readonly, copy, nonatomic) NSUUID *pageUUID;
@property (readonly, nonatomic) BrowserWKView *browserView;
@property (readonly, weak, nonatomic) BrowserDocument *document;
@property (readonly, weak, nonatomic) WebAppDocument *webAppDocument;
@property (readonly, nonatomic) char contentBlockersWereDisabledDuringLastLoad;
@property (readonly, nonatomic) NSArray *ancestorTabUUIDs;
@property (readonly, nonatomic) NSWindow *hostWindow;
@property (weak, nonatomic) BrowserViewController *originatingContentViewControllerWithPossibleJavaScriptAccess;
@property (readonly, nonatomic) char isDisposable;
@property (readonly, nonatomic) BrowserWindowController *browserWindowController;
@property (readonly, nonatomic) NSMutableArray *linkIconParameters;
@property (readonly, nonatomic) BrowserContainerViewController *parentBrowserContainerViewController;
@property (readonly, nonatomic) id<BrowserContentLoaderDelegate> contentLoaderDelegate;
@property (readonly, nonatomic) void *browserViewControllerWKAdapter;
@property (readonly, nonatomic) BrowserTabViewItem *tabViewItem;
@property (readonly, nonatomic) TabContentView *tabContentView;
@property (readonly, nonatomic) SearchableWKView *frontmostContentView;
@property (readonly, nonatomic, getter=isControlledByAutomation) char controlledByAutomation;
@property (readonly, nonatomic) WBSPermissionDialogThrottler *permissionDialogThrottler;
@property (readonly, nonatomic) SafariAppExtensionsController *appExtensionsController;
@property (readonly, nonatomic) SafariWebExtensionsController *webExtensionsController;
@property (readonly, nonatomic) BrowserNavigationDelegate *navigationDelegate;
@property (readonly, nonatomic) BrowserResourceLoadDelegate *resourceLoadDelegate;
@property (readonly, nonatomic) id<WKUIDelegate> UIDelegate;
@property (readonly, nonatomic) BrowserInspectorDelegate *inspectorDelegate;
@property (readonly, nonatomic) NSDate *dateFinishedLoading;
@property (nonatomic) char webPageIsUnresponsive;
@property (readonly, nonatomic) NSString *currentPageTitle;
@property (readonly, copy, nonatomic) NSString *mediaMenuItemTitle;
@property (readonly, nonatomic) NSString *pageName;
@property (readonly, nonatomic) NSString *displayName;
@property (readonly, nonatomic) NSString *expectedOrCurrentOriginalURLString;
@property (copy, nonatomic) NSString *provisionalOriginalURLString;
@property (readonly, nonatomic) NSURL *expectedURL;
@property (readonly, nonatomic) NSURL *expectedOrCurrentURL;
@property (readonly, nonatomic) NSURL *expectedOrCurrentURLOrLastActiveURL;
@property (readonly, nonatomic) NSURL *failedURL;
@property (readonly, nonatomic) NSURL *failedOrCurrentURL;
@property (readonly, nonatomic) WBSURLSpoofingMitigator *urlSpoofingMitigator;
@property (readonly, nonatomic) NSString *currentPageHostName;
@property (readonly, nonatomic) NSURL *currentBackForwardItemURL;
@property (readonly, nonatomic) NSString *readerText;
@property (nonatomic) char mainDocumentDidFirstLayout;
@property (nonatomic) char mainDocumentDidFirstVisuallyNonEmptyLayout;
@property (nonatomic) char mainDocumentDidFirstMeaningfulPaint;
@property (nonatomic) char mainDocumentDidLoad;
@property (readonly, nonatomic) char shouldFinishFluidProgress;
@property (retain, nonatomic) NSURL *urlOfMostRecentFirstVisuallyNonEmptyLayout;
@property (copy, nonatomic) id /* block */ backgroundDocumentFirstVisuallyNonEmptyLayoutHandler;
@property (copy, nonatomic) id /* block */ backgroundDocumentFirstMeaningfulPaintHandler;
@property (readonly, nonatomic) char hasOnlySecureContent;
@property (readonly, nonatomic) double bestWidthForCurrentPage;
@property (copy, nonatomic) NSSet *allowedKnownTrackingThirdParties;
@property (copy, nonatomic) NSSet *blockedKnownTrackingThirdParties;
@property (copy, nonatomic) NSSet *preventedKnownTrackingThirdParties;
@property (readonly, nonatomic) char supportsTextEncoding;
@property (copy, nonatomic) NSString *customTextEncodingName;
@property (nonatomic, getter=isWebProcessForcePaused) char webProcessForcePaused;
@property (nonatomic) char swapProcessesOnNavigation;
@property (nonatomic) char redirectOccurredWhileRecoveringFromWebProcessCrash;
@property (nonatomic, getter=isWaitingForSamplingProfilerOutput) char waitingForSamplingProfilerOutput;
@property (readonly, copy, nonatomic) NSSet *relatedBrowserViewControllers;
@property (readonly, nonatomic) int loadingStatus;
@property (readonly, nonatomic) char isLoadingSingleResource;
@property (readonly, nonatomic) char isLoadingOrWaitingToLoadPage;
@property (readonly, nonatomic) char isLoadingProvisionally;
@property (nonatomic) char mainFrameLoadEndedInError;
@property (readonly, nonatomic) char canReload;
@property (readonly, nonatomic) char shouldSuppressJavaScriptDialogsDueToProvisionalLoad;
@property (readonly, nonatomic) char shouldSuppressOpenPanelDueToProvisionalLoad;
@property (retain, nonatomic) id<WBSSandboxExtensionToken> sandboxExtensionToken;
@property (readonly, nonatomic) NSURLRequest *currentRequest;
@property (nonatomic) long long currentRequestResponseCode;
@property (readonly, nonatomic) char didLoadCurrentURLWithContentBlockersEnabled;
@property (readonly, nonatomic) char isNavigatingViaReloadWithoutContentBlocker;
@property (readonly, nonatomic) char didLoadCurrentURLWithLockdownModeEnabled;
@property (readonly, nonatomic) char didLoadCurrentURLWithPrivateRelayEnabled;
@property (nonatomic) char isNavigatingViaReloadWithoutPrivateRelay;
@property (readonly, nonatomic) char didLoadCurrentURLWithAdvancedPrivateBrowsingPrivacyProtectionsEnabled;
@property (readonly, nonatomic) WBSScribbleQuirksManager *scribbleQuirksManager;
@property (readonly, nonatomic) WBSUserDefinedContentBlockerManager *userDefinedContentBlockerManagerForCurrentBrowsingMode;
@property (readonly, nonatomic) struct SessionState { struct WKRetainPtr<const void *> { void *x0; } x0; } sessionState;
@property (readonly, nonatomic) NSData *sessionStateDataFilteringURLs;
@property (readonly, nonatomic) BackgroundLoad *backgroundLoad;
@property (readonly, nonatomic) char isBackgroundLoadContentViewController;
@property (nonatomic, getter=isTryingToCloseBeforeCommittingToBackgroundLoad) char tryingToCloseBeforeCommittingToBackgroundLoad;
@property (nonatomic) long long lastBackgroundTerminationReason;
@property (nonatomic) char hasEverBeenVisible;
@property (readonly, weak, nonatomic) BackgroundLoad *backgroundNavigationBackgroundLoad;
@property (readonly, nonatomic) char canGoBack;
@property (readonly, nonatomic) char canGoForward;
@property (nonatomic) long long urlImpressionProvenance;
@property (readonly, nonatomic) char canSave;
@property (readonly, nonatomic) char canSaveWhenLoading;
@property (readonly, nonatomic) char isShowingSaveDialog;
@property (readonly, nonatomic) NSArray *certificateChain;
@property (readonly, nonatomic) char isPageEligibileToShowNotSecureWarning;
@property (readonly, nonatomic) char sensitiveFormFieldHasEverHadFocus;
@property (readonly, nonatomic) struct __SecTrust { } *serverTrust;
@property (retain, nonatomic) NSURLProtectionSpace *protectionSpaceForInvalidCertificateBypass;
@property (readonly, nonatomic) char extendedValidationCertificateAvailableForPage;
@property (readonly, nonatomic) char committedExtendedValidationCertificateOrganizationNameHasBeenDetermined;
@property (copy, nonatomic) NSString *extendedValidationCertificateOrganizationName;
@property (readonly, nonatomic) PassDownloadSuppressionManager *passDownloadSuppressionManager;
@property (readonly, nonatomic) WalletOrderDownloadSuppressionManager *walletOrderDownloadSuppressionManager;
@property (nonatomic, getter=isRestoringFromSessionStateData) char restoringFromSessionStateData;
@property (readonly, nonatomic, getter=isSuppressingDownloads) char suppressingDownloads;
@property (readonly, nonatomic) BrowserTabPersistentState *pendingTabStateToRestore;
@property (readonly, nonatomic) char hasTabDataPendingForRestoration;
@property (readonly, nonatomic) char shouldDeferRestorationUntilSelected;
@property (readonly, nonatomic) char hasQueuedNavigation;
@property (readonly, nonatomic) struct QueuedNavigation { void /* function */ **x0; id x1; id x2; } *queuedNavigation;
@property (readonly, nonatomic, getter=isShowingWebView) char showingWebView;
@property (readonly, nonatomic) char willShowWebView;
@property (readonly, nonatomic, getter=isShowingEmptyPage) char showingEmptyPage;
@property (readonly, nonatomic, getter=isShowingExtensionPage) char showingExtensionPage;
@property (readonly, nonatomic, getter=isShowingHTMLPage) char showingHTMLPage;
@property (readonly, nonatomic, getter=isShowingLoadErrorPage) char showingLoadErrorPage;
@property (readonly, nonatomic, getter=isShowingSecurePage) char showingSecurePage;
@property (readonly, nonatomic, getter=isShowingPDFDocument) char showingPDFDocument;
@property (readonly, nonatomic, getter=isShowingWebArchive) char showingWebArchive;
@property (readonly, nonatomic, getter=isShowingSecurityWarningPage) char showingSecurityWarningPage;
@property (readonly, nonatomic, getter=isShowingOtherPage) char showingOtherPage;
@property (readonly, nonatomic, getter=isShowingWebContent) char showingWebContent;
@property (readonly, nonatomic, getter=isShowingInitialPage) char showingInitialPage;
@property (readonly, nonatomic, getter=isShowingCertificateWarning) char showingCertificateWarning;
@property (nonatomic) char shouldStartEmpty;
@property (readonly, nonatomic) NSURL *unifiedFieldURL;
@property (retain, nonatomic) NSURL *unifiedFieldFallbackURLForAboutBlank;
@property (readonly, nonatomic) NSString *titleForUnifiedFieldURL;
@property (readonly, copy, nonatomic) NSString *authenticationHost;
@property (readonly, nonatomic) char canAttemptUpgradingRequestURLToHTTPS;
@property (nonatomic) char shouldBlockAllMouseEvents;
@property (nonatomic) char shouldBlockAllKeyEvents;
@property (nonatomic) char shouldBlockFirstResponder;
@property (nonatomic, getter=isWindowFocusDisabled) char windowFocusDisabled;
@property (nonatomic, getter=isMovingToAnotherWindow) char movingToAnotherWindow;
@property (readonly, nonatomic) WBSFluidProgressState *fluidProgressState;
@property (readonly, nonatomic) char wasFormTextEdited;
@property (readonly, nonatomic) char meetsEditedFormTextWarningCriteria;
@property (readonly, nonatomic) char shouldWarnAboutUnsavedCredentials;
@property (readonly, nonatomic) char canAutoFill;
@property (readonly, nonatomic) WBSMultiRoundAutoFillManager *multiRoundAutoFillManager;
@property (readonly, nonatomic) id<FormAutoFiller> formAutoFiller;
@property (nonatomic, getter=isPresentingSheetToSaveCredentials) char presentingSheetToSaveCredentials;
@property (nonatomic) char waitingForCreditCardDataFromWallet;
@property (nonatomic) unsigned long long numberOfCreditCardsShownInCompletionList;
@property (retain, nonatomic) NSDictionary *creditCardFormFieldValues;
@property (retain, nonatomic) WBSCreditCardData *lastFilledCreditCardData;
@property (retain, nonatomic) NSMutableSet *previouslyFilledVirtualCardNumbers;
@property (retain, nonatomic) NSDictionary *lastFilledCreditCardDataTypes;
@property (readonly, copy, nonatomic) NSString *previouslyGeneratedAlphanumericPassword;
@property (readonly, copy, nonatomic) NSString *previouslyGeneratedMoreTypablePassword;
@property (nonatomic, getter=isSuppressingBeforeUnloadPrompts) char suppressingBeforeUnloadPrompts;
@property (readonly, nonatomic) WBSSameDocumentNavigationToHistoryVisitCorrelator *sameDocumentNavigationToHistoryVisitCorrelator;
@property (readonly, nonatomic) History *history;
@property (retain, nonatomic) WBSHistoryVisit *lastVisit;
@property (readonly, nonatomic) BookmarksViewController *bookmarksViewController;
@property (readonly, nonatomic) char canShowBookmarks;
@property (readonly, nonatomic) char isShowingBookmarks;
@property (readonly, nonatomic) char canShowHistory;
@property (readonly, nonatomic) char isShowingHistory;
@property (readonly, nonatomic) char canSetCurrentPageToHomePage;
@property (readonly, nonatomic, getter=isShowingStartPage) char showingStartPage;
@property (readonly, nonatomic, getter=isLoadingStartPage) char loadingStartPage;
@property (readonly, nonatomic, getter=isShowingOrWillShowStartPageView) char showingOrWillShowStartPageView;
@property (readonly, nonatomic) StartPageViewController *startPageViewController;
@property (nonatomic, getter=isSuspended) char suspended;
@property (readonly, nonatomic, getter=isShowingReader) char showingReader;
@property (readonly, nonatomic) void *readerController;
@property (nonatomic) char readerShouldBeShownIfPossible;
@property (copy, nonatomic) NSDictionary *initialReaderArticleScrollPositionAsDictionary;
@property (nonatomic, getter=isReaderViewStale) char readerViewStale;
@property (readonly, nonatomic) char canEnableScribble;
@property (readonly, nonatomic) char isScribbling;
@property (readonly, nonatomic) char hasEnteredScribbleMode;
@property (readonly, nonatomic) unsigned long long hiddenElementsCount;
@property (readonly, nonatomic) WBSTranslationContext *translationContext;
@property (readonly, nonatomic) char shouldReflectTranslationProgressAsFluidProgress;
@property (readonly, nonatomic) unsigned long long numberOfBlockedPopUpWindows;
@property (nonatomic) char isObscuredForDigitalHealth;
@property (nonatomic) char pendingBrowserInitiatedLoadWasForDownload;
@property (readonly, nonatomic) struct BackForwardList { struct WKRetainPtr<const void *> { void *x0; } x0; } backForwardList;
@property (readonly, nonatomic) char hasNonEmptyBackForwardList;
@property (readonly, nonatomic, getter=isNavigatingViaBackForwardList) char navigatingViaBackForwardList;
@property (readonly, nonatomic, getter=isNavigatingToCachedPageInBackForwardList) char navigatingToCachedPageInBackForwardList;
@property (readonly, nonatomic) NSString *titleOfPrintMenuItem;
@property (readonly, nonatomic) NSPrintInfo *printInfo;
@property (readonly, nonatomic) char isShowingPrintDialog;
@property (readonly, copy, nonatomic) NSSet *pagePreviewBrowserViewControllers;
@property (readonly, nonatomic, getter=isForPagePreviews) char forPagePreviews;
@property (weak, nonatomic) PagePreviewAnimationController *parentPagePreviewAnimationController;
@property (copy, nonatomic) NSString *requestedTabLabel;
@property (copy, nonatomic) NSString *provisionalTabLabel;
@property (readonly, nonatomic) char canSharePage;
@property (readonly, nonatomic) char hasMadeSound;
@property (readonly, nonatomic) char hasFullScreenWindowController;
@property (readonly, nonatomic, getter=isPlayingVideoInPIP) char playingVideoInPIP;
@property (readonly, weak, nonatomic) BrowserTabViewItem *parentTab;
@property (nonatomic) struct BackForwardListItem { struct WKRetainPtr<const void *> { void *m_ptr; } m_webKit2Object; } backForwardListItemForReturningToParentTab;
@property (readonly, nonatomic, getter=isNavigatingToSpawnedTabParentURL) char navigatingToSpawnedTabParentURL;
@property (nonatomic) struct SessionState { struct WKRetainPtr<const void *> { void *m_ptr; } m_webKit2Object; } sessionStateToRestoreAfterFinishingNavigation;
@property (readonly, nonatomic, getter=isDisposableAfterNavigation) char disposableAfterNavigation;
@property (readonly, nonatomic) char isPinnedStateToggleable;
@property (readonly, nonatomic) char canAddBookmark;
@property (readonly, nonatomic) NSURL *urlForSharingOrSaving;
@property (readonly, nonatomic) LPLinkMetadata *linkMetadataForSharingOrSaving;
@property (readonly, nonatomic) NSString *titleForNewBookmark;
@property (readonly, nonatomic) char canAddReadingListItem;
@property (readonly, nonatomic, getter=isCurrentPageLoadedFromReadingList) char currentPageLoadedFromReadingList;
@property (readonly, nonatomic, getter=isShowingReadingListItemArchive) char showingReadingListItemArchive;
@property (readonly, nonatomic, getter=isShowingReadingListItemArchiveURL) char showingReadingListItemArchiveURL;
@property (readonly, nonatomic) ReadingListItem *currentlyLoadedReadingListItem;
@property (readonly, nonatomic) unsigned long long currentlyLoadedReadingListItemPageNumber;
@property (nonatomic, getter=isInContinuousMode) char inContinuousMode;
@property (readonly, nonatomic) char isInactiveContinuousReadingView;
@property (readonly, nonatomic) ContinuousReadingListViewController *continuousReadingListViewController;
@property (readonly, nonatomic) ContinuousReadingListPageItem *readingListPageItemToLoadInContinuousMode;
@property (nonatomic) char alwaysInitiateLoadsInContinuousModeUsingCurrentController;
@property (nonatomic, getter=isBlockedFromKeyViewLoop) char blockedFromKeyViewLoop;
@property (readonly, nonatomic) NSView *keyView;
@property (readonly, nonatomic) char canViewSource;
@property (readonly, nonatomic, getter=isShowingWebInspector) char showingWebInspector;
@property (readonly, nonatomic, getter=isShowingResponsiveDesignView) char showingResponsiveDesignView;
@property (readonly, nonatomic) char canShowResponsiveDesignView;
@property (readonly, nonatomic) char isShowingAnyBanner;
@property (readonly, nonatomic) PointerLockBanner *pointerLockBanner;
@property (readonly, nonatomic, getter=isShowingPointerLockBanner) char showingPointerLockBanner;
@property (nonatomic, getter=isPointerLocked) char pointerLocked;
@property (readonly, nonatomic) WebCrashBanner *webCrashBanner;
@property (readonly, nonatomic, getter=isShowingWebCrashBanner) char showingWebCrashBanner;
@property (readonly, nonatomic) char shouldHideTransientBannerOnNextUserInitiatedNavigation;
@property (nonatomic) char shouldHideTransientBannerOnVisuallyNonEmptyLayout;
@property (readonly, nonatomic) PrivateBrowsingExplanationBanner *privateBrowsingExplanationBanner;
@property (readonly, nonatomic, getter=isShowingPrivateBrowsingExplanationBanner) char showingPrivateBrowsingExplanationBanner;
@property (readonly, nonatomic) char isShowingPrivateBrowsingPrivacyProtectionsBanner;
@property (nonatomic, getter=isWaitingToContinueUserActivity) char waitingToContinueUserActivity;
@property (readonly, nonatomic, getter=isShowingDefaultBrowserBanner) char showingDefaultBrowserBanner;
@property (readonly, nonatomic) char canSnapBackToSearchResults;
@property (nonatomic) char overrideMaintainsInactiveSelectionForVoiceOver;
@property (nonatomic) char suppressJavaScriptDialogPresentation;
@property (readonly, nonatomic, getter=isSuppressingJavaScriptShowModalDialogPresentation) char suppressJavaScriptShowModalDialogPresentation;
@property (readonly, nonatomic) char isUnresponsiveDueToJavaScriptDialogRunningInProcess;
@property (readonly, nonatomic) TabDialogViewController *tabDialogViewController;
@property (readonly, nonatomic) WBSBrowsingAssistantController *assistantController;
@property (nonatomic) unsigned long long assistantAllAvailableContentOptions;
@property (readonly, nonatomic) unsigned long long assistantContentOptionsForNonToastPrimaryIcon;
@property (retain, nonatomic) NSMutableDictionary *presentedAssistantCalloutsForURLs;
@property (retain, nonatomic) WBSBrowsingAssistantAvailabilityLabels *availabilityLabels;
@property (nonatomic) unsigned long long displayedAvailabilityLabelsIndex;
@property (nonatomic) unsigned long long deferredAvailabilityLabelsCount;
@property (nonatomic, getter=isWaitingForBytecodeProfile) char waitingForBytecodeProfile;
@property (nonatomic) void *pageLoadTestViewController;
@property (readonly, nonatomic) id<WBSContentBlockerStatisticsStore> contentBlockerStatisticsStore;
@property (readonly, nonatomic) char privacyReportShouldSeparateBlockedTrackers;
@property (readonly, nonatomic) WBSQueryParameterFilteringDataQueue *queryParameterFilteringDataQueue;
@property (copy, nonatomic) id /* block */ test_metadataHandler;
@property (readonly, nonatomic) id<AppExtensionMessageReceiver> appExtensionMessageReceiver;
@property (weak, nonatomic) id<AuthenticationSessionNavigationHandling> authenticationSessionNavigationHandler;
@property (readonly, nonatomic, getter=isShowingAutomaticStrongPasswordExplanation) char showingAutomaticStrongPasswordExplanation;
@property (readonly, nonatomic) WBSGeneratedPassword *previouslyGeneratedPassword;
@property (readonly, nonatomic) char canShowBlockedPageContentDialog;
@property (nonatomic) char performingAccountSecurityUpgrade;
@property (copy, nonatomic) id /* block */ linkAddedToUserActivityCallback;
@property (retain, nonatomic) NSUserActivity *userActivityFromNotes;
@property (readonly, nonatomic) NSUserActivity *userActivity;
@property (readonly, nonatomic) char supportsLocking;
@property (nonatomic) char shouldDonateResponseForCurrentNavigation;
@property (nonatomic) char nextLoadComesFromSearchPage;
@property (readonly, nonatomic, getter=isSearchPage) char isSearchPage;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) char canDonateToBiome;
@property (retain, nonatomic) WBSReaderConfigurationManager *assistantReaderCardConfigurationManager;
@property (retain, nonatomic) WBSReaderFontManager *assistantReaderCardFontManager;
@property (readonly, nonatomic) char isPrivateBrowsing;
@property (readonly, nonatomic) NSArray *normalBrowsingUserContentControllers;
@property (readonly, nonatomic) WBSUserDefinedContentBlockerManager *userDefinedContentBlockerManager;
@property (readonly, nonatomic) NSString *appEntityUUIDString;
@property (readonly, nonatomic) WBSSiriIntelligenceDonorTabData *tabDataForSpotlightDonation;
@property (readonly, copy, nonatomic) NSString *userVisibleMediaOrigin;
@property (readonly, nonatomic) unsigned long long mutableMediaState;
@property (readonly, nonatomic, getter=isPlayingMutableMedia) char playingMutableMedia;
@property (readonly, nonatomic, getter=isMuted) char muted;
@property (nonatomic) long long mutedState;
@property (nonatomic, getter=isMediaCaptureMuted) char mediaCaptureMuted;
@property (nonatomic, getter=isScreenCapturePaused) char screenCapturePaused;
@property (readonly, nonatomic, getter=isShowingTabDialog) char showingTabDialog;
@property (readonly, nonatomic) long long currentTabDialogType;
@property (readonly, nonatomic) SearchableWKView *webView;
@property (readonly, nonatomic) double idForWebExtensions;
@property (readonly, nonatomic) WKWebView *webViewForExtensions;
@property (readonly, nonatomic) NSURL *urlForExtensions;
@property (readonly, nonatomic) NSURL *pendingURLForWebExtensions;
@property (readonly, nonatomic) char isLoadingComplete;
@property (readonly, nonatomic) char isAudible;
@property (readonly, nonatomic) char isMuted;
@property (readonly, nonatomic) char isFrontmost;
@property (readonly, nonatomic) char isSelected;
@property (readonly, nonatomic) char isPinnedTab;
@property (readonly, nonatomic) char isPrivate;
@property (readonly, nonatomic) char isArticle;
@property (readonly, nonatomic) char isInReaderMode;
@property (readonly, copy, nonatomic) NSString *tabTitle;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } tabViewSize;
@property (readonly, nonatomic) id<WBSWebExtensionWindow> webExtensionWindow;
@property (retain, nonatomic) WBSWebExtensionTabPosition *previousWebExtensionTabPosition;
@property (readonly, nonatomic) WBProfile *profile;
@property (nonatomic) unsigned long long changedPropertiesForOnUpdatedWebExtensionEvent;
@property (nonatomic) double zoomFactor;

+ (id)_allocatedBrowserViewControllers;
+ (id)browserViewControllersWithMutableMediaState:(unsigned long long)a0;
+ (void)enumerateBrowserContentViewControllersSharingWebProcessWithPID:(int)a0 skippingContentViewController:(id)a1 usingBlock:(id /* block */)a2;
+ (void)enumerateBrowserViewControllersUsingBlock:(id /* block */)a0;
+ (id)findAutoSelectableBrowserViewControllerWithURL:(id)a0 windowPolicy:(long long)a1 tabPlacementHint:(id)a2;
+ (id)findBrowserViewControllerForSafariPage:(id)a0;
+ (id)javaScriptDialogTitleForURL:(id)a0;
+ (id)resourceDirectoryURLForToken:(id)a0;
+ (id)resourceDirectoryURLForToken:(id)a0 developMenuController:(id)a1;
+ (id)test_javaScriptDialogTitleForSecurityOrigin:(const void *)a0;

- (void).cxx_destruct;
- (void)close;
- (void)invalidate;
- (void)select;
- (id).cxx_construct;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)_close;
- (void)dismissViewController:(id)a0;
- (char)isLocked;
- (void)loadView;
- (void)loadViewIfNeeded;
- (void)mouseExited:(id)a0;
- (void)mouseMoved:(id)a0;
- (void)viewDidAppear;
- (void)viewDidChangeEffectiveAppearance;
- (void)viewDidLoad;
- (void)stopLoading;
- (void)reload;
- (void)loadURLRequest:(const void *)a0;
- (void)_printOperationDidRun:(id)a0 success:(char)a1 contextInfo:(void *)a2;
- (char)_canSaveAsWebArchive;
- (double)estimatedProgress;
- (void)exitFullscreen;
- (void)goBack;
- (void)goForward;
- (void)reloadFromOrigin;
- (void)autoFill;
- (char)isPinnedForWebExtensionContext:(id)a0;
- (void)_reloadWithoutContentBlockers;
- (void)_webView:(id)a0 storeAppHighlight:(id)a1 inNewGroup:(char)a2 requestOriginatedInApp:(char)a3;
- (void)activateForWebExtensionContext:(id)a0 completionHandler:(id /* block */)a1;
- (void)closeForWebExtensionContext:(id)a0 completionHandler:(id /* block */)a1;
- (void)detectWebpageLocaleForWebExtensionContext:(id)a0 completionHandler:(id /* block */)a1;
- (void)didReceiveAuthenticationChallenge:(id)a0 completionHandler:(id /* block */)a1;
- (void)disableFrameSizeUpdates;
- (void)duplicateUsingConfiguration:(id)a0 forWebExtensionContext:(id)a1 completionHandler:(id /* block */)a2;
- (void)enableFrameSizeUpdates;
- (void)goBackForWebExtensionContext:(id)a0 completionHandler:(id /* block */)a1;
- (void)goForwardForWebExtensionContext:(id)a0 completionHandler:(id /* block */)a1;
- (void)goToBackForwardListItem:(const void *)a0;
- (unsigned long long)indexInWindowForWebExtensionContext:(id)a0;
- (char)isLoadingCompleteForWebExtensionContext:(id)a0;
- (char)isMutedForWebExtensionContext:(id)a0;
- (char)isPlayingAudioForWebExtensionContext:(id)a0;
- (char)isReaderModeActiveForWebExtensionContext:(id)a0;
- (char)isReaderModeAvailableForWebExtensionContext:(id)a0;
- (char)isSelectedForWebExtensionContext:(id)a0;
- (void)loadURL:(id)a0 forWebExtensionContext:(id)a1 completionHandler:(id /* block */)a2;
- (id)parentTabForWebExtensionContext:(id)a0;
- (id)pendingURLForWebExtensionContext:(id)a0;
- (void)reloadFromOrigin:(char)a0 forWebExtensionContext:(id)a1 completionHandler:(id /* block */)a2;
- (void)setMuted:(char)a0 forWebExtensionContext:(id)a1 completionHandler:(id /* block */)a2;
- (void)setParentTab:(id)a0 forWebExtensionContext:(id)a1 completionHandler:(id /* block */)a2;
- (void)setPinned:(char)a0 forWebExtensionContext:(id)a1 completionHandler:(id /* block */)a2;
- (void)setReaderModeActive:(char)a0 forWebExtensionContext:(id)a1 completionHandler:(id /* block */)a2;
- (void)setSelected:(char)a0 forWebExtensionContext:(id)a1 completionHandler:(id /* block */)a2;
- (void)setZoomFactor:(double)a0 forWebExtensionContext:(id)a1 completionHandler:(id /* block */)a2;
- (char)shouldBypassPermissionsForWebExtensionContext:(id)a0;
- (char)shouldGrantPermissionsOnUserGestureForWebExtensionContext:(id)a0;
- (struct CGSize { double x0; double x1; })sizeForWebExtensionContext:(id)a0;
- (id)titleForWebExtensionContext:(id)a0;
- (id)urlForWebExtensionContext:(id)a0;
- (id)webViewForWebExtensionContext:(id)a0;
- (id)windowForWebExtensionContext:(id)a0;
- (double)zoomFactorForWebExtensionContext:(id)a0;
- (void)stopPictureInPicture;
- (void)goHome;
- (void)browsingAssistantController:(id)a0 didUpdateContentOptionsForURL:(id)a1;
- (void)browsingAssistantControllerDidUpdateUserConsentState:(id)a0;
- (char)browsingAssistantControllerShouldCheckRemoteContent:(id)a0;
- (char)queryParameterFilteringDataQueueShouldMergePendingData:(id)a0;
- (void)resetZoom;
- (void)didDetermineReaderAvailability:(id)a0;
- (void)loadURL:(id)a0;
- (void)mute;
- (void)hostWindowDidResize;
- (void)_autocompleteInTextFieldInFrame:(const void *)a0 textFieldMetaData:(id)a1 formMetaData:(id)a2;
- (char)_canPersistTabs;
- (id)_computeErrorPageTitleForError:(id)a0;
- (void)_installWebView;
- (struct RetainPtr<__SecIdentity *> { void *x0; })_preferredIdentityForChallenge:(id)a0;
- (void)_previewPageDidLoadMainDocument;
- (void)_resetKnownTrackingThirdParties;
- (void)_sheetRequestConditionsChanged:(id)a0;
- (id)authenticationSessionForHandlingNavigationFromURL:(id)a0 withResponse:(id)a1;
- (void)browserWKViewDidMoveToNewWindow;
- (void)deactivateReaderNowOnNavigation;
- (void)didInjectScriptForAppExtension:(id)a0;
- (void)handlePossibleChangeToProvisionalURLClearingReaderAvailability:(char)a0;
- (struct URLRequest { struct WKRetainPtr<const void *> { void *x0; } x0; })initialContents;
- (void)oneTimeCodeFieldFocused:(id)a0 textFieldMetadata:(id)a1 formMetadata:(id)a2 inFrame:(id)a3;
- (void)passwordFieldFocusedInFrame:(id)a0 formMetadata:(id)a1 passwordFieldMetadata:(id)a2;
- (void)presentExportPDFDialogForFrame:(const void *)a0;
- (void)simulateKeysToTypeTextInToBrowserView:(id)a0 shouldSendReturnKeyEvent:(char)a1;
- (void)updateTabGroupTabShouldPersist:(char)a0;
- (void)usernameFieldFocusedInFrame:(id)a0 formMetadata:(id)a1 usernameFieldMetadata:(id)a2;
- (void)visitWebsiteWithoutPrivateRelay;
- (void)zoomWithFactor:(id)a0;
- (void)_cancelCheckForConfirmationPage;
- (void)_updateScribbleControllerForElementAtPointInBrowserView:(struct CGPoint { double x0; double x1; })a0 forced:(char)a1;
- (void)addNavigationNeedingNewProcess:(id)a0;
- (void)didClearFormMetadataDueToLoadForFrameContainingFocusedTextField;
- (void)hideNewExtensionBannerAnimated:(char)a0;
- (void)loadURL:(id)a0 additionalHeaderFields:(id)a1;
- (void)passwordFieldBlurredInFrame:(id)a0 formMetadata:(id)a1 passwordFieldMetadata:(id)a2;
- (void)readerControllerWillDeactivate:(const void *)a0;
- (void)reloadFromWebContentContextMenu;
- (char)shouldDoNavigationInNewProcess:(id)a0;
- (void)startScribbling;
- (void)userChoseToUseGeneratedPassword;
- (void)usernameFieldBlurredInFrame:(id)a0 formMetadata:(id)a1 usernameFieldMetadata:(id)a2;
- (void)zoomOut;
- (void)_abortInitiateLoad;
- (void)_addBackForwardListItem:(const void *)a0 toMenu:(id)a1 withIdentifier:(id)a2;
- (void)_addDomainToAllowedPopUpWindowDomainCache:(id)a0;
- (void)_addMediaPlaybackSuspensionReason:(unsigned long long)a0;
- (void)_addSpawnedTabBrowserViewController:(id)a0;
- (void)_addValuesAutoFilledForCurrentPage:(id)a0;
- (void)_allowUserToPickCertificateForAuthenticationChallengeInfo:(id)a0;
- (char)_analyticsRecorderShouldIgnoreURLWithNavigationPolicy:(long long)a0 forNavigationAction:(id)a1;
- (void)_applyAutomaticStrongPasswordTreatmentToPasswordControlInFrame:(void *)a0 withMetadata:(id)a1 formMetadata:(id)a2 blurAfterSubstitution:(char)a3;
- (id)_autoFillMetadataCorrectorForFrame:(const void *)a0 createIfNeeded:(char)a1;
- (id)_autogeneratedPasswordForFrame:(void *)a0 formMetadata:(id)a1 passwordFieldMetadata:(id)a2;
- (void)_autoplayPreferenceDidChange:(id)a0;
- (void)_beginPendingNavigation;
- (void)_cacheSecIdentityIfNeeded:(struct __SecIdentity { } *)a0 forIdentityDomain:(id)a1;
- (id)_cachedContextCompleter;
- (char)_canPerformAnySharingAction;
- (char)_canShowPointerLockBanner;
- (char)_canShowWebCrashBanner;
- (void)_cancelPendingAutoFillInternalFeedbackNoticeDismissal;
- (void)_cancelPostQueuedNavigationEnqueuedBlockWithToken:(id)a0;
- (id)_certificateWarningPagePresenterProxy;
- (void)_checkIfPageContainsCalendarEventNow:(id)a0;
- (void)_checkIfPageContainsCalendarEventSoon:(char)a0;
- (void)_clearCurrentUnsubmittedFormInformation;
- (void)_clearFallbackURLs;
- (void)_clearWebKitDelegates;
- (void)_collectDiagnosticsForAutoFillIncludingPageContents:(char)a0 completionHandler:(id /* block */)a1;
- (void)_commonInitializationWithDocument:(id)a0;
- (void)_completeSidebarAnimationIfNecessary;
- (int)_computeErrorPageTemplateForError:(id)a0;
- (id)_computeExtendedValidationCertificateOrganizationName;
- (int)_computeLoadingStatus;
- (int)_computePageTypeFromURL:(id)a0;
- (void)_continueAuthenticationChallenge:(id)a0 withCertificateIdentity:(struct __SecIdentity { } *)a1;
- (void)_continueHTTPSConnectionWithIdentitySheetDidEnd:(id)a0 returnCode:(long long)a1 contextInfo:(void *)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertFrameFromWebContentToBrowserView:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_correctControlMetadata:(id)a0 inFrame:(const void *)a1;
- (id)_correctMetadata:(id)a0 forFormInFrame:(const void *)a1;
- (void)_createAutoFillFunctionBarProviderIfNeeded;
- (char)_createFormCompletionControllerAndFunctionBarProviderIfNeededForFrame:(const void *)a0 textFieldMetadata:(id)a1 formMetadata:(id)a2;
- (void)_createFormCompletionControllerIfNeededForFrame:(const void *)a0 textFieldMetadata:(id)a1 formMetadata:(id)a2;
- (void)_createFormTelemetryDataMonitorIfNeeded;
- (void)_createNewExtensionBannerIfNecessary;
- (void)_createStartPageViewControllerIfNeeded;
- (id)_createWebViewWithConfiguration:(id)a0;
- (void)_currentURLHasChangedWithPreviousOriginalURL:(id)a0;
- (void)_decidePolicyForRemoteNotificationPermissionRequestWithID:(unsigned long long)a0 referrerURLHost:(id)a1;
- (unsigned long long)_defaultDatabaseQuota;
- (void)_denyAllPendingDownloads;
- (void)_detectWebpageLocaleWithTextSamples:(id)a0 url:(id)a1;
- (void)_didDismissTabDialogs;
- (void)_didEditFormText;
- (void)_didReceiveNetworkChangeNotification:(id)a0;
- (void)_didRemoveBackForwardHistoryItems:(id)a0;
- (void)_didStartBrowserInitiatedLoadUsingBackForwardList:(char)a0;
- (char)_didUserDeclineAutomaticStrongPasswordForCurrentDomain;
- (void)_didVerifyEditedFormTextStatus;
- (void)_dismissAllDialogsOnCommit;
- (void)_dismissAutoFillInternalFeedbackNotice:(id)a0;
- (void)_dismissAutoFillInternalFeedbackNoticeImmediately:(char)a0;
- (void)_dispatchBlocksWaitingForVisuallyNonEmptyLayoutAfterQueuedNavigation;
- (void)_displayInternetAccountSetupPromptIfAppropriate;
- (id)_displayNameForFileURL:(id)a0;
- (char)_displayRequestedSheetNowIfAppropriate;
- (void)_displayRestrictionAlert;
- (void)_donateCurrentNavigationWithResponse:(id)a0;
- (void)_donateCurrentPageLoad;
- (id)_effectiveTopSitesController;
- (id)_emptyPageName;
- (void)_endAnimationsAndUpdateSummaryWithString:(id)a0;
- (void)_enqueueDownloadsDecisionHandler:(id /* block */)a0 forDomain:(id)a1;
- (void)_enqueueRestoredNavigation:(id)a0 withTabState:(id)a1;
- (id)_errorMessageForNSURLErrorDomain:(id)a0 failingURL:(id)a1;
- (void)_fetchEscapedErrorPageMessageForError:(id)a0 completionHandler:(id /* block */)a1;
- (struct BackForwardListItem { struct WKRetainPtr<const void *> { void *x0; } x0; })_firstItemWithUniqueURLInBackList;
- (void)_flushKnownTrackingThirdPartiesAfterITPPreferenceUpdated;
- (void)_focusFieldForStreamlinedLoginWithFormDataController:(id)a0 metadataProvider:(id)a1 completionHandler:(id /* block */)a2;
- (void)_focusSearchFieldInOutlineView;
- (struct Frame { struct WKRetainPtr<const void *> { void *x0; } x0; })_frameFromHandle:(id)a0;
- (void)_fulfillDownloadsPendingPermissionDecisionHandlerForDomain:(id)a0 permitted:(char)a1;
- (id)_generatePageHTMLForErrorTemplate:(int)a0 withTitle:(id)a1 messageHTML:(id)a2;
- (void)_getPrintInfoForFrame:(const void *)a0 pdfFirstPageSize:(struct CGSize { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)_getSaveDataForFrame:(const void *)a0 originURL:(id)a1 usingMode:(long long)a2 completionHandler:(id /* block */)a3;
- (void)_getSuggestedFilenameForSavingFrame:(const void *)a0 canUseWebArchiveName:(char)a1 completionHandler:(id /* block */)a2;
- (char)_handleCertificateError:(id)a0 forWebView:(id)a1 isMainFrame:(char)a2;
- (void)_handleCollectedAutoFillFormMetadata:(id)a0 mode:(long long)a1;
- (void)_handleErrorForWebView:(id)a0 isMainFrame:(char)a1 pageLoadType:(int)a2 error:(id)a3 getIsTryingFallbackURLs:(char *)a4;
- (void)_handleNextAuthenticationChallenge;
- (void)_handleNextPrintRequestWithCompletionHandler:(id /* block */)a0;
- (char)_handleScribbleKeyEventIfNeeded:(id)a0;
- (char)_hasFallbackURLs;
- (void)_hideAppExtensionPermissionMigrationBannerAnimated:(char)a0;
- (id)_hideAppLinkBannerDeferred:(char)a0;
- (void)_hideAutoFillButtonInFieldWithControlUniqueID:(id)a0 inFrame:(id)a1;
- (void)_hideControlsForScribbleAnimated:(char)a0;
- (void)_hideHighlightBannerAnimated:(char)a0;
- (void)_hidePrivateBrowsingExplanationBannerAnimated:(char)a0;
- (void)_hidePrivateBrowsingPrivacyProtectionsBannerAnimated:(char)a0;
- (void)_hideSelectedElement:(id)a0;
- (void)_hideTransientBannerDueToUserInitiatedNavigationOrVisuallyNonEmptyLayout;
- (struct CGImage { } *)_imageForScribbleAnimationWithElementFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_initializeScribbleOut;
- (void)_initiateLoad;
- (void)_initiateQueuedNavigation;
- (void)_installAlternativeWebViewFunctionBarProvider:(id)a0;
- (void)_installContinuousReadingListView;
- (void)_installStartPage;
- (void)_installStartPageWithPreservingFirstResponder:(char)a0;
- (void)_installWebKitDelegates;
- (void)_invalidateUpdateAudioUITimer;
- (void)_invalidatedBackForwardItemsDidChange;
- (char)_isAutoSelectableWithURL:(id)a0;
- (char)_isBackForwardListItemDisposable:(const void *)a0;
- (char)_isCurrentPageSearchable;
- (char)_isFluidProgressAnimating;
- (char)_isHTMLPage;
- (char)_isOnlyTabInWebProcessThatIsShowingWebContent;
- (char)_isPageTypeSameAsPreviousPage;
- (char)_isShowingControlsForScribble;
- (void)_loadCertificateWarningPageForError:(id)a0 failingTrust:(struct __SecTrust { } *)a1 failingURL:(id)a2 certificateWarningContext:(id)a3;
- (id)_loadNextFallbackURL;
- (void)_loadOutlineViewWithBookmarks;
- (void)_loadOutlineViewWithHistory;
- (void)_loadScribbleIfNeededForMainFrame:(char)a0;
- (id)_loadURLRequest:(const void *)a0 tabLabel:(id)a1 lifetime:(long long)a2 allowJavaScript:(char)a3 waitInQueue:(char)a4 clearFallbackURLs:(char)a5 inNewProcess:(char)a6 skipSyncableTabUpdates:(char)a7 canAttemptUpgradingRequestURLToHTTPS:(char)a8;
- (void)_logInvalidCertificateErrorWithErrorCode:(long long)a0 trustIncludesRevokedCertificate:(char)a1;
- (char)_mainContentViewDiffersFromPreviousPage;
- (void)_manualAutoFillButtonClickedInAddressBookAutoFillableFieldMetadata:(id)a0 formMetadata:(id)a1 inFrame:(const void *)a2;
- (void)_manualAutoFillButtonClickedInCredentialFieldMetadata:(id)a0 formMetadata:(id)a1 inFrame:(const void *)a2;
- (void)_manualAutoFillButtonClickedInCreditCardFieldMetadata:(id)a0 formMetadata:(id)a1 inFrame:(const void *)a2;
- (void)_metadataProviderForForms:(const void *)a0 inFrames:(const void *)a1 completionHandler:(id /* block */)a2;
- (void)_notifyImpressionAnalyticsRecorderIfNeededIsInViewDidAppear:(char)a0;
- (id)_otherContentViewControllersThatAreShowingWebContent;
- (char)_pageLoadOperationUsesBackForwardList:(long long)a0;
- (unsigned long long)_pageMutableMediaState;
- (char)_passwordFieldHasAutomaticStrongPasswordTreatment:(id)a0 form:(id)a1 frame:(id)a2;
- (void)_passwordFieldTextDidChangeWithMetadata:(id)a0 inFrame:(id)a1;
- (void)_perSiteAutomaticReaderActivationPreferenceDidChange:(id)a0;
- (void)_perSiteContentBlockersPreferenceDidChange:(id)a0;
- (void)_perSiteLockdownModePreferenceDidChange:(id)a0;
- (id)_performBlockNowOrOnVisuallyNonEmptyLayoutAfterPerformingQueuedNavigation:(id /* block */)a0;
- (void)_performReloadWithInvertedAdvancedPrivateBrowsingPrivacyProtectionsEnabledSetting;
- (void)_performReloadWithInvertedContentBlockersEnabledSetting;
- (void)_performReloadWithInvertedPrivateRelayEnabledSetting;
- (void)_performReloadWithoutContentBlockers;
- (void)_pickCertificateForAuthenticationChallengeSheetDidEnd:(id)a0 returnCode:(long long)a1 contextInfo:(void *)a2;
- (void)_prepareToCancelOwnDialogs;
- (void)_presentAutoFillInternalFeedbackNoticeIfNeeded;
- (void)_presentTranslationConsentAlertWithType:(unsigned long long)a0 completionHandler:(id /* block */)a1;
- (void)_previewPageDidFirstMeaningfulPaint;
- (id)_previousBackForwardItemTitle;
- (void *)_previousWebPageBackForwardListItem;
- (void)_printFrame:(const void *)a0 waitUntilDone:(char)a1 pdfFirstPageSize:(struct CGSize { double x0; double x1; })a2 completionHandler:(id /* block */)a3;
- (void)_printFrame:(const void *)a0 withPrintInfo:(id)a1 waitUntilDone:(char)a2 completionHandler:(id /* block */)a3;
- (struct Frame { struct WKRetainPtr<const void *> { void *x0; } x0; })_printingMailingFrame;
- (void)_processOpenSearchURL:(id)a0;
- (void)_reloadAfterWebProcessExit;
- (id)_reloadWebPageButtonTitleWithTemplateAppName:(id)a0;
- (void)_reloadWithInvertedAdvancedPrivateBrowsingPrivacyProtectionsEnabledSetting;
- (void)_reloadWithInvertedContentBlockersEnabledSetting;
- (void)_reloadWithInvertedPrivateRelayEnabledSetting;
- (id)_remoteNotificationStateObserver;
- (void)_removeMediaPlaybackSuspensionReason:(unsigned long long)a0;
- (void)_removeQueuedNavigation;
- (void)_removeSpawnedTabBrowserViewController:(id)a0;
- (void)_removeTabFromCoreSpotlight;
- (void)_reportForAutoFillInternalFeedbackActivityNoticeView:(id)a0;
- (void)_reportSignalAfterAutoplayPreferenceDidChange:(long long)a0;
- (id)_requestBySettingAdvancedPrivacyProtectionsFlag:(id)a0;
- (void)_requestDigitalHealthPoliciesForCurrentOrExpectedURL;
- (void)_requestQueryResultsForText:(id)a0 contentType:(long long)a1 pageMetadata:(id)a2;
- (void)_requestToShowCreditCardButtonInFieldIfNecessaryInFrame:(id)a0 textFieldMetadata:(id)a1;
- (void)_restoreFromSessionStateData:(const void *)a0 expectedURL:(id)a1;
- (void)_restorePendingState;
- (void)_restoreSessionStateAfterFinishingNavigationIfNecessary;
- (void)_restoreTabIdentifiersWithPersistentTabState:(id)a0;
- (char)_returnToParentTabAndOptionallyCloseTab:(char)a0;
- (void)_runScribbleAnimationInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_saveWebPageUsingDataProvider:(id)a0 withSuggestedFilename:(id)a1 rawSourceMIMEType:(id)a2 savePanelMode:(long long)a3;
- (id)_scribbleController;
- (void)_selectTabViewItem:(id)a0 inWindowController:(id)a1 cancelIfInvalid:(char)a2;
- (void)_sensitiveFormFieldDidFocusOnPage;
- (void)_sessionStateUpdatePageLoadSafetyTimerDidFire:(id)a0;
- (void)_setDeferredNavigation:(struct unique_ptr<Safari::QueuedNavigation, std::default_delete<Safari::QueuedNavigation>> { struct __compressed_pair<Safari::QueuedNavigation *, std::default_delete<Safari::QueuedNavigation>> { struct QueuedNavigation *x0; } x0; })a0 shouldInformQueuedNavigationController:(char)a1;
- (void)_setPageMutedState;
- (void)_setSheetRequest:(id)a0;
- (void)_setWebProcessForcePaused:(char)a0;
- (char)_shouldDisplayRequestedSheet;
- (char)_shouldLinkSpawnedTabToParentTabForURLRequest:(id)a0;
- (char)_shouldOfferAnyTypeOfAutoFill;
- (char)_shouldOfferCreditCardDataAfterUserHasFilledCreditCardData:(id)a0;
- (char)_shouldPersistIdentityPreferencesToKeychain;
- (char)_shouldReportProgressForCurrentURL;
- (char)_shouldSuppressExtensionTabEvents;
- (char)_shouldTrackFormMetadataForUnsubmittedFormData:(id)a0;
- (char)_shouldTryUsingFormCredentialsCompletionControllerToPerformAction:(unsigned int)a0 textFieldMetadata:(id)a1;
- (char)_shouldUpdateTabGroupTab;
- (void)_showBannerForHighlightAnimated:(char)a0;
- (void)_showControlsForScribble;
- (void)_showDefaultBrowserBannerAnimated:(char)a0;
- (void)_showDefaultBrowserBannerIfNeeded;
- (void)_showHTTPAuthenticationDialogForChallenge:(id)a0;
- (void)_showHighlightBannerIfNeeded;
- (void)_showOutlineView;
- (void)_showPrintSheetBlockedDialogForFrame:(const void *)a0 waitUntilDone:(char)a1 pdfFirstPageSize:(struct CGSize { double x0; double x1; })a2 completionHandler:(id /* block */)a3;
- (void)_showPrivacyProtectionsBannerIfNecessary;
- (void)_showPrivateBrowsingPrivacyProtectionsBannerAnimated:(char)a0;
- (void)_showStartPageView;
- (void)_showSummarizeButtonIfNeeded;
- (void)_showWebCrashBanner:(id)a0 animated:(char)a1;
- (void)_showWebCrashBannerAnimated:(char)a0 type:(long long)a1;
- (void)_simulateCarriageReturnKeyEventInBrowserView;
- (void)_simulateKeysToTypeTextInToBrowserView:(id)a0 textToType:(id)a1 characterIndex:(unsigned long long)a2 windowNumber:(long long)a3 shouldSendReturnKeyEvent:(char)a4;
- (void)_startObservingNetworkChangeNotifications;
- (void)_startObservingNotificationsThatMightDisplayRequestedSheet;
- (void)_startObservingWKWebViewKeyValueChanges;
- (id)_startPageView;
- (void)_startScribbling;
- (void)_stopLoadingPage;
- (void)_stopObservingNetworkChangeNotifications;
- (void)_stopObservingNotificationsThatMightDisplayRequestedSheet;
- (void)_stopObservingWKWebViewKeyValueChanges;
- (char)_supportsNetworkDiagnostics;
- (char)_suppressReloadToPreventLoadingJavaScriptIfNecessary;
- (id)_tabLabel;
- (void)_tearDownFormCompletionMachinery;
- (id)_templateStringForPageLoadErrorTemplate:(int)a0;
- (void)_terminateSafariFromWebProcessCrashIfNeededForError:(id)a0;
- (id)_tryToInitiateLoad:(long long)a0 initiateLoadBlock:(id /* block */)a1;
- (void)_uninstallAlternativeWebViewFunctionBarProvider;
- (id)_unresponsiveWebProcessDialogTerminateButtonTitle;
- (id)_unresponsiveWebProcessDialogTitle;
- (id)_unresponsiveWebProcessDialogTitleForSingleOtherPageWithName:(id)a0;
- (id)_unresponsiveWebProcessDialogTitleWithNumberOfOtherPages:(unsigned long long)a0;
- (void)_updateAudioUINow:(id)a0;
- (void)_updateCachedPageTypesAfterCommit;
- (void)_updateExpectedPageType;
- (void)_updateFormTelemetryDataMonitorWithFormMetadata:(id)a0 textFieldMetadata:(id)a1 textFieldValueLength:(unsigned long long)a2;
- (void)_updateGeneratedPasswordWithPassword:(id)a0;
- (void)_updateHiddenElementCount;
- (void)_updateImpressionAnalyticsRecorderWithNavigationPolicy:(long long)a0 inMainFrameForNavigationAction:(id)a1;
- (void)_updateMaxVisibleHeightPercentageNowUserDriven:(char)a0;
- (void)_updateMaxVisibleHeightPercentageUserDriven:(char)a0;
- (void)_updatePageLoadDonorWithNavigationPolicy:(long long)a0 inMainFrameForNavigationAction:(id)a1;
- (void)_updateScribbleControllerForContentChange;
- (char)_updateScribbleControllerForMouseEvent:(id)a0;
- (void)_updateSummaryWithString:(id)a0;
- (void)_updateTitlesInResponseToLabelChange;
- (void)_updateToolbarTrackerCount;
- (void)_updateUnsubmittedFormDataInFrame:(const void *)a0 formMetadata:(id)a1;
- (void)_updateWKViewLayoutModeForWindow:(id)a0;
- (id)_urlRequestWithURL:(id)a0 httpReferrer:(id)a1 additionalHeaderFields:(id)a2;
- (void)_useClientCertificatesForAuthenticationChallengeInfo:(id)a0;
- (void)_usernameFieldTextDidChangeWithMetadata:(id)a0;
- (id)_viewBelowBanner;
- (void)_willPresentTabDialog;
- (void)_willReload;
- (char)_windowCanBeResized:(id)a0;
- (long long)_windowPolicyForCreateBrowserViewController;
- (void)addAppHighlightForURL:(id)a0 creatingLink:(char)a1;
- (void)addBlockedPopUpWindowConfiguration:(id)a0;
- (void)addReadingListItemFromMouseLocationWithTitle:(id)a0 label:(id)a1 URL:(id)a2;
- (void)addSheetToDismissOnNavigation:(id)a0;
- (void)addressBookAutoFillableFieldBlurredInFrame:(id)a0 textFieldMetadata:(id)a1;
- (void)addressBookAutoFillableFieldFocused:(id)a0 textFieldMetadata:(id)a1 formMetadata:(id)a2 inFrame:(id)a3;
- (void)agentDidRegisterRemoteNotificationsWithAllowedDomains:(id)a0 deviceToken:(id)a1 forPermissionRequest:(unsigned long long)a2;
- (void)agentDidUnregisterRemoteNotificationsWithDisallowedDomains:(id)a0 forPermissionRequest:(unsigned long long)a1;
- (void)agentDidVerifyRemoteNotificationProviderRequestID:(unsigned long long)a0 isValid:(char)a1 forReferrerURLHost:(id)a2 errorMessages:(id)a3;
- (void)animateProgressForPreloadedDocument;
- (void)announceIfLinkOpenedInNewTabOrWindowWithVoiceOverLinkPolicy:(id)a0;
- (void)announceIfLinkOpenedInNewTabOrWindowWithWindowPolicy:(long long)a0;
- (void)applyAutomaticStrongPasswordTreatmentToPasswordControlInFrameWithHandle:(id)a0 withMetadata:(id)a1 formMetadata:(id)a2 blurAfterSubstitution:(char)a3;
- (void)applyCloudTabReaderPropertiesIfNeeded:(id)a0;
- (void)attemptToCloseAfterHandlingDownload;
- (void)authenticationChallenge:(id)a0 clickThroughURL:(id)a1 shouldAllowLegacyTLS:(id /* block */)a2;
- (void)authenticationChallengeDidNegotiateModernTLS:(id)a0;
- (void)autoFillFormInFrame:(id)a0 withValues:(id)a1 fieldToFocus:(id)a2 autoFillType:(long long)a3 shouldSubmit:(char)a4 recursivelyClearFormMetadata:(char)a5;
- (void)autoFillFormInFrame:(id)a0 withValues:(id)a1 fieldToFocus:(id)a2 fieldsToObscure:(id)a3 autoFillType:(long long)a4 shouldSubmit:(char)a5 recursivelyClearFormMetadata:(char)a6;
- (void)autoFillWillStart;
- (void)autoFilledFieldWithMetadata:(id)a0 inForm:(id)a1;
- (void)autoFilledFormWithMetadata:(id)a0 inFrame:(id)a1 shouldSubmit:(char)a2;
- (void)autoFilledOneTimeCode:(id)a0 inFrame:(id)a1 shouldSubmit:(char)a2;
- (id)autogeneratedPasswordForFrameWithHandle:(id)a0 formMetadata:(id)a1 passwordFieldMetadata:(id)a2;
- (void)backForwardListDidChange:(id)a0;
- (id)backListMenuForButton:(id)a0;
- (void)bannerContainerView:(id)a0 didInstallBanner:(id)a1;
- (void)bannerContainerView:(id)a0 didUninstallBanner:(id)a1;
- (void)bannerContainerView:(id)a0 willUninstallBanner:(id)a1 animated:(char)a2 completionHandler:(id /* block */)a3;
- (char)bannerContainerViewShouldUseWhiteBackgroundColor:(id)a0;
- (void)beginPendingNavigation;
- (id)bookmarksUndoControllerForBookmarksViewController:(id)a0;
- (void)bookmarksViewControllerDidChangePageTitle:(id)a0;
- (void)bringTabAndWindowToFront;
- (void)bringTabAndWindowToFrontForUserNotification:(char)a0;
- (id)browserContentViewControllerForNavigationPurposes;
- (void)browserView:(id)a0 didFindIconWithParameters:(id)a1 downloadHandler:(id /* block */)a2;
- (void)browserViewDidMoveToWindow;
- (void)browserViewVisibilityChanged;
- (void)browserViewWillMoveToWindow:(id)a0;
- (void)calculateBestWidthForCurrentPage;
- (char)canAuthenticateAgainstProtectionSpace:(id)a0;
- (char)canAuthenticationSessionHandleUntrustedProtectionSpace:(id)a0;
- (char)canFocusContentSearchField;
- (char)canPrint;
- (char)canShowCertificateInformation;
- (char)canShowWebInspector;
- (void)cancelBackgroundNavigation;
- (void)cancelPostQueuedNavigationBlockWithToken:(id)a0;
- (void)clearAllStatus;
- (void)clearAutoFilledCreditCardFieldsInFrame:(id)a0 completionHandler:(id /* block */)a1;
- (void)clearBackForwardList;
- (void)clearBlockedWindowConfigurationCaches;
- (void)clearCachedContextCompleter;
- (void)clearFluidProgressState;
- (void)clearForwardHistory;
- (void)clearIgnoredNavigationURL;
- (void)clearLinkIconParameters;
- (void)clearMultiRoundAutoFillManager;
- (void)clearParentTab;
- (void)clearParentTabIfNecessary;
- (void)clearPendingBrowserInitiatedLoad;
- (void)clearQueuedNavigation:(struct QueuedNavigation { void /* function */ **x0; id x1; id x2; } *)a0;
- (void)clearScribbleEdits;
- (void)clearSearchResultsForSnapBack;
- (void)clearSheetsToDismissOnNavigation;
- (void)clearUnsubmittedInformationInFormWithID:(double)a0 sourceFrame:(const void *)a1;
- (void)closeWebInspector;
- (void)collectAutoFillFormMetadataJSONForScope:(long long)a0 mode:(long long)a1;
- (void)collectDataForSavingPageInliningOrDiscardingExternalResources;
- (void)collectFormMetadataForPreFillingFormIfNecessaryAtURL:(id)a0;
- (void)commitAllPagePreviewHistoryOperations;
- (void)commitOrCancelBackgroundNavigationLoadAsAppropriate;
- (id)computeTabLabelIncludingDebuggingContent:(char)a0;
- (void)confirmReloadingWithEditedFormTextWithOption:(long long)a0;
- (void)confirmReloadingWithPIPIfNecessaryWithOption:(long long)a0;
- (void)confirmUnloadingPageWithPIPDuringNavigationWithCompletionHandler:(id /* block */)a0 isReload:(char)a1;
- (char)contentIsCapableOfZoom;
- (id)createBrowserViewControllerFromWindowConfiguration:(id)a0;
- (struct Ref<Safari::WebViewControllerWKAdapter, WTF::RawPtrTraits<Safari::WebViewControllerWKAdapter>, WTF::DefaultRefDerefTraits<Safari::WebViewControllerWKAdapter>> { struct WebViewControllerWKAdapter *x0; })createContentViewController;
- (char)createFluidProgressState;
- (void)createReaderControllerIfNeeded;
- (void)createVisibleContentsSnapshotForSharingWithCompletionHandler:(id /* block */)a0;
- (void)creditCardFieldBlurredInFrame:(id)a0 formMetadata:(id)a1 creditCardFieldMetadata:(id)a2;
- (void)creditCardFieldFocusedInFrame:(id)a0 formMetadata:(id)a1 creditCardFieldMetadata:(id)a2;
- (void)deactivateReaderAfterAnimationWithDeactivationMode:(int)a0;
- (void)deactivateReaderFromWebProcessUserAction;
- (void)decideStorageQuotaForURL:(id)a0 originDisplayName:(id)a1 currentQuota:(unsigned long long)a2 currentOriginUsage:(unsigned long long)a3 currentDatabaseUsage:(unsigned long long)a4 expectedUsage:(unsigned long long)a5 completionHandler:(id /* block */)a6;
- (void)defaultBrowserBanner:(id)a0 presentViewControllerAsSheet:(id)a1;
- (void)deferredLoadingWatchdogTimerFired;
- (void)defersPageLoadingCountDidUnderflow;
- (void)detachWebInspector;
- (void)determinePresenceOfSchemaOrgMarkup;
- (char)didAllowPopUpWindowsForDomain:(id)a0;
- (void)didAutoDetectSearchURLTemplateString:(id)a0 inFrame:(const void *)a1;
- (void)didBecomeCurrentBrowserViewController;
- (void)didCalculateBestWidthForPage:(double)a0;
- (void)didCancelClientRedirectForFrame:(const void *)a0;
- (void)didChangeContentSize:(struct CGSize { double x0; double x1; })a0;
- (void)didClickGoBackFromSafeBrowsingWarning;
- (void)didCollectDataForSavingPageInliningOrDiscardingExternalResources:(id)a0;
- (void)didCollectFormsMetadata:(const void *)a0 forManualAutoFillInFrames:(const void *)a1;
- (void)didCollectFormsMetadata:(const void *)a0 forSafeAutoFillConfirmationInFrames:(const void *)a1 contactProperty:(const void *)a2 contactIdentifier:(const void *)a3 contactLabel:(const void *)a4;
- (void)didCollectMetadataForPrefillingFormInFrames:(const void *)a0 metadataForAllForms:(const void *)a1 isInitialCollectionAtPageLoad:(char)a2;
- (void)didCollectOpenSearchURL:(id)a0;
- (void)didCollectPageBoundsInformation:(const void *)a0;
- (void)didCollectPageLayoutInformationForSidebarAnimationBeforeResize;
- (void)didCollectTemplateIconMetadataForPageURL:(id)a0 iconURL:(id)a1 themeColorComponents:(id)a2;
- (void)didCollectTouchIconURLStrings:(id)a0;
- (void)didCommitFavorites;
- (void)didCommitLoadForFrame:(const void *)a0;
- (void)didCommitTopSites;
- (void)didCompleteAuthenticationSheetRequest:(id)a0;
- (void)didCreateSnapshotOfContinuousReadingViewForRubberBandingArea:(const void *)a0;
- (void)didDecideNavigationPolicy:(long long)a0 inMainFrameForNavigationAction:(id)a1;
- (void)didDetermineAdditionalTextSamples:(id)a0;
- (void)didErrorOutForSummarization:(id)a0;
- (void)didExtractReaderText:(id)a0 pageMetadata:(id)a1 wasDeterminingAvailability:(char)a2;
- (void)didFailProvisionalLoad;
- (void)didFinishLoading;
- (void)didFinishNavigation:(id)a0 withError:(id)a1;
- (void)didFinishNavigationProgressForURL:(id)a0;
- (void)didFinishSummaryForSummarization:(id)a0;
- (void)didForceContentRepaintAndCollectPageLayoutInformationForSidebarAnimationAfterResize:(id)a0;
- (void)didGenerateAlphanumericPassword:(id)a0;
- (void)didGeneratePassword:(id)a0;
- (void)didGenerateTypablePassword:(id)a0;
- (void)didLosePointerLock;
- (void)didMakeStrongPasswordFieldViewableAndEditable;
- (void)didMoveToDocument:(id)a0;
- (void)didOpenURLExternally;
- (void)didPerformWebSearch;
- (void)didRemoveGeneratedPassword:(id)a0;
- (void)didReplaceNavigationState;
- (void)didRunJavaScriptForSharingExtension:(id)a0 forRequestWithIdentifier:(unsigned long long)a1;
- (void)didSaveNewSavedAccountWithGeneratedPassword:(id)a0;
- (char)didWantToDownloadURL:(id)a0;
- (void)disconnectParentTabFromSpawnedTabs;
- (void)dismissAllDialogs;
- (void)dismissDialogsBlockingActivation;
- (void)dismissDialogsBlockingNavigation;
- (void)dismissFormCompletionList;
- (void)dismissPagePreviewAnimationController:(id)a0;
- (void)dismissReaderAppearanceCustomizationPopover;
- (void)dismissTabDialog;
- (void)dispatchMessageWithName:(id)a0 toExtensionWithIdentifier:(id)a1 userInfo:(id)a2;
- (void)displayInitialContents;
- (void)displayInternetAccountSetupPromptOnNextLoadForDomain:(id)a0 username:(id)a1 password:(id)a2;
- (id)displayTitleForBackForwardListItem:(const void *)a0 showURL:(char)a1;
- (char)doesPageReferenceSiriSuggestion:(id)a0;
- (void)donateCurrentNavigationWithResponse:(id)a0;
- (void)donateSameDocumentNavigationIfNecessary;
- (char)downloadIsFromReader:(id)a0;
- (void)endScribblingAndSaveEdits:(char)a0;
- (void)enqueuePagePreviewHistoryOperation:(id)a0;
- (void)enqueuePendingNavigationIfNeeded;
- (void)enumerateRelatedBrowserViewControllersUsingBlock:(id /* block */)a0;
- (void)evaluateJavaScript:(id)a0;
- (void)fetchReaderContentForAssistant;
- (void)fetchTemplateIconMetadataIfNecessary;
- (void)fetchTouchIconsIfNecessary;
- (void)fetchWebAppManifestIfNecessary;
- (void)finalizeJavaScriptForSharingExtensionNamed:(id)a0 arguments:(id)a1;
- (char)fireClosedEventToExtensionsIfNecessaryWindowIsClosing:(char)a0;
- (char)fireCreatedEventToExtensionsIfNecessary;
- (char)fireReplacedEventToExtensionsIfNecessaryWithNewBrowserViewController:(id)a0;
- (void)focusContentSearchField;
- (void)focusLastSpawnedPopupFromOriginatingContentViewControllerIfNecessary;
- (void)forceCrashWebProcess;
- (void)forgetAllAuthenticationChallenges;
- (void)formAutoFillController:(id)a0 didRefreshCompletionListItems:(const void *)a1 formURL:(id)a2;
- (id)forwardListMenuForButton:(id)a0;
- (void)functionBarProvider:(id)a0 didSelectCompletionListItem:(void *)a1;
- (id)generateSnapshotFromWindowBackingStore;
- (void)getExtendedValidationCertificateOrganizationNameWithCompletionHandler:(id /* block */)a0;
- (void)getMetadataForTextField:(id)a0 inFrame:(id)a1 withCompletion:(id /* block */)a2;
- (void)getVisibleContentsSnapshotWithCompletionHandler:(id /* block */)a0;
- (void)goBackButtonClicked;
- (void)goToOverridePageForWebExtensionWithComposedIdentifier:(id)a0;
- (void)goToStartPage;
- (char)handleAuthenticationSessionNavigationToURL:(id)a0;
- (void)handleAutoplayEvent:(long long)a0 flags:(unsigned long long)a1;
- (char)handleCancelForSearchableWKView:(id)a0;
- (void)handleInternetAccountSetupForDomain:(id)a0 shouldPrompt:(char)a1;
- (char)hasFailedURL;
- (char)hasFrameBeenAutoFilled:(const void *)a0;
- (void)hideAllBannersAnimated:(char)a0;
- (void)hideAppLinkBanner;
- (void)hideBookmarks;
- (void)hideDefaultBrowserBannerAnimated:(char)a0;
- (void)hideDigitalHealthOverlayAnimated:(char)a0;
- (void)hideFunctionBarForProvider:(id)a0;
- (void)hideHighlightBanner;
- (void)hideHistory;
- (void)hidePagePreviewControllerIfNeeded;
- (void)hidePointerLockBannerAnimated:(char)a0;
- (void)hidePrivateBrowsingPrivacyProtectionsBannerIfNecessary;
- (void)hideResponsiveDesignView;
- (void)hideTransientBannerAnimated:(char)a0;
- (void)hideWebCrashBannerAnimated:(char)a0;
- (char)historyClientShouldIgnoreNavigationToURL:(id)a0;
- (void)hostWindowDidEndLiveResize;
- (void)hostWindowWillStartLiveResize;
- (void)indexTabToCoreSpotlight;
- (id)initWithDefaultWebViewConfigurationWithDocument:(id)a0 browsingMode:(unsigned long long)a1;
- (id)initWithDocument:(id)a0 configuration:(id)a1 browsingMode:(unsigned long long)a2;
- (void)insertSummaryTextPlaceholderForSummarizationAnimationCoordinator:(id)a0 completionHandler:(id /* block */)a1;
- (id)installationTargetForReaderController:(const void *)a0;
- (void)invalidateBackForwardHistoryItem:(const void *)a0;
- (void)invalidatePageLoadTest:(const char *)a0;
- (void)invalidateUserActivity;
- (char)isAuthenticationSession;
- (char)isAwaitingBiometricAuthentication;
- (char)isNavigatingToURLFromClientRedirectDuringPageNavigation:(id)a0;
- (char)isShowingBanner:(id)a0;
- (char)isShowingNativePage;
- (char)isTextFieldFocused;
- (char)isTopContentInsetCurrentlyUsed;
- (char)isValidBackForwardItem:(const void *)a0;
- (char)isValidBackHistoryItem:(const void *)a0;
- (void)loadCertificateWarningPageForLegacyTLSWithURL:(id)a0 clickThroughURL:(id)a1;
- (void)loadCertificateWarningPageForPrivateRelayFailClosedNavigationWithURL:(id)a0;
- (void)loadReadingListItemInContinuousMode:(id)a0;
- (void)loadStateOfBrowserViewController:(id)a0;
- (void)loadURL:(id)a0 tabLabel:(id)a1 httpReferrer:(id)a2 inNewProcess:(char)a3 canAttemptUpgradingRequestURLToHTTPS:(char)a4;
- (void)loadURL:(id)a0 tabLabel:(id)a1 httpReferrer:(id)a2 inNewProcess:(char)a3 canAttemptUpgradingRequestURLToHTTPS:(char)a4 additionalHeaderFields:(id)a5;
- (void)loadURL:(id)a0 tabLabel:(id)a1 waitInQueue:(char)a2 skipSyncableTabUpdates:(char)a3;
- (void)loadURL:(id)a0 waitInQueue:(char)a1;
- (void)loadURLFromReader:(id)a0;
- (void)loadURLRequest:(const void *)a0 tabLabel:(id)a1;
- (void)loadURLRequest:(const void *)a0 tabLabel:(id)a1 inNewProcess:(char)a2 canAttemptUpgradingRequestURLToHTTPS:(char)a3;
- (void)loadURLRequest:(const void *)a0 tabLabel:(id)a1 lifetime:(long long)a2 allowJavaScript:(char)a3 waitInQueue:(char)a4 inNewProcess:(char)a5 canAttemptUpgradingRequestURLToHTTPS:(char)a6;
- (void)loadURLTryingToReuseBackForwardItem:(id)a0;
- (void)loadingStatusHasChanged;
- (void)locationChangeDoneForWebView:(id)a0 isMainFrame:(char)a1 pageLoadType:(int)a2 error:(id)a3;
- (void)logEngagementWithSiriSuggestion:(id)a0 forInput:(id)a1;
- (void)logNumberOfDisplayedSiriSuggestions:(unsigned long long)a0 numberOfSuppressedSuggestions:(unsigned long long)a1;
- (id)makeBookmark;
- (id)makePreviewBrowserViewControllerForPagePreviewAnimationController:(id)a0;
- (void)manualAutoFillButtonClickedInTextFieldWithMetadataAsData:(id)a0 formMetadataAsData:(id)a1 inFrameHandle:(id)a2 autoFillButtonType:(long long)a3;
- (void)modifiedGeneratedPasswordContentInFormOrFieldWithFormMetadata:(const void *)a0 inFrame:(const void *)a1;
- (void)mutableMediaPlayingStateDidChange;
- (void)noteNavigationFromSearchSuggestionsIncludingParsecResults:(char)a0 queryID:(unsigned long long)a1;
- (void)notifyContentMediaPlayingStateChangedFromPreviousMutableMediaState:(unsigned long long)a0;
- (void)oneTimeCodeFieldBlurredInFrame:(id)a0 textFieldMetadata:(id)a1;
- (void)openBlockedPopUpWindows;
- (void)openClockSettings;
- (void)openFeedbackAppForScribbleReportIssueCategory:(long long)a0;
- (id)openWindowWithConfiguration:(id)a0;
- (void)otherCreditCardFieldOrUnidentifiedFieldBlurredInFrame:(id)a0 formMetadata:(id)a1 textFieldMetadata:(id)a2;
- (void)otherCreditCardFieldOrUnidentifiedFieldFocusedInFrame:(id)a0 formMetadata:(id)a1 textFieldMetadata:(id)a2;
- (void)pageDidScroll;
- (void)pagePinnedStateDidChange;
- (void)pagePreviewAnimationController:(id)a0 addURLToReadingList:(id)a1;
- (void)pagePreviewAnimationController:(id)a0 didFinishPreviewWithBrowserViewController:(id)a1;
- (void)pagePreviewAnimationController:(id)a0 handleClickInPreviewBrowserViewController:(id)a1;
- (id)pagePreviewAnimationControllerWithURL:(id)a0 originRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (void)pageTitleHasChanged;
- (id)performBlockNowOrAfterVisuallyNonEmptyLayoutCommittingQueuedNavigationIfNecessary:(id /* block */)a0;
- (void)pinnedTabStateChange;
- (void)preloadBookmarksUI;
- (void)prepareNavigationIfFirstNavigationInTabCreatedFromParentTab;
- (void)preparePageToReturnFromFullscreenToInline;
- (void)presentSaveDialogForFrame:(const void *)a0;
- (void)presentTabDialogWithConfiguration:(id)a0 dismissalBlock:(id /* block */)a1 blocksWebProcessUntilDismissed:(char)a2 cancellationExemptions:(id)a3;
- (id)previewTitleForURL:(id)a0;
- (id)previouslySavedAccount;
- (void)printFrame:(const void *)a0 waitUntilDone:(char)a1 isUserInitiated:(char)a2 pdfFirstPageSize:(struct CGSize { double x0; double x1; })a3 completionHandler:(id /* block */)a4;
- (void)printFrameHandle:(id)a0 waitUntilDone:(char)a1 isUserInitiated:(char)a2 pdfFirstPageSize:(struct CGSize { double x0; double x1; })a3 completionHandler:(id /* block */)a4;
- (void)printPage;
- (void)processNavigationResponseAfterBackgroundLoadHasBeenCommittedIfNecessary;
- (void)processOpenSearchURLAfterBackgroundLoadHasBeenCommittedIfNecessary;
- (id)progressState;
- (void)promptToAllowDownloadFileOnDomain:(id)a0 withParentDomain:(id)a1 originatingURLString:(id)a2 withDecisionHandler:(id /* block */)a3;
- (void)provisionalURLHasChanged;
- (id)querySuggestionsForSearchString:(id)a0;
- (void)readerArticleScrolled;
- (void)readerConfigurationChanged;
- (void)readerControllerDidActivate:(const void *)a0;
- (void)readerControllerDidBecomeUnavailableUnexpectedly:(const void *)a0;
- (void)readerControllerDidDeactivate:(const void *)a0;
- (char)readerControllerShouldActivateUponDeterminingAvailability:(const void *)a0;
- (char)readerControllerShouldDeactivateFromUserAction:(const void *)a0;
- (void)readerControllerWillActivate:(const void *)a0;
- (void)readerWebViewDidScroll;
- (void)recoverFromWebProcessExit;
- (void)reloadIfShowingErrorPage;
- (void)reloadScribbleData;
- (void)reloadWithOption:(long long)a0;
- (void)removeAutomaticStrongPasswordVisualTreatment;
- (void)removeSheetToDismissOnNavigation:(id)a0;
- (void)replacePlaceholderWithSummaryForSummarizationAnimationCoordinator:(id)a0;
- (void)reportAutoFillIssue;
- (void)reportAutoFillOfferedType:(unsigned long long)a0 forTextFieldWithID:(id)a1 forFormMetadata:(id)a2;
- (void)reportCurrentAutoplaySignalIfNecessary;
- (void)requestOnDeviceSummary;
- (char)requestPointerLock;
- (void)requestRemoteNotificationPermissionForAPIURL:(id)a0 websiteIdentifier:(id)a1 queryParameters:(id)a2;
- (void)requestSnapshotWithWidth:(double)a0 completionHandler:(id /* block */)a1;
- (void)resetEditedFormTextStatus;
- (void)restoreAppHighlights;
- (void)restoreParentTabSessionState;
- (void)restorePersistentState:(id)a0 allowJavaScript:(char)a1 waitInQueue:(char)a2;
- (char)returnToParentTabIfNeededForNavigationToBackForwardListItem:(id)a0;
- (void)reuseForURLRequest:(id)a0;
- (void)runAlertAsSheet:(id)a0 completionHandler:(id /* block */)a1;
- (void)runJavaScript:(id)a0 forSharingExtensionNamed:(id)a1 requestIdentifier:(unsigned long long)a2 preserveScriptWorld:(char)a3;
- (void)runPageContentInitializationErrorSheet:(id)a0 completionHandler:(id /* block */)a1;
- (id)safariApplicationVersionForTranslationContext:(id)a0;
- (void)sandboxExtensionPresentationController:(id)a0 configureOpenPanel:(id)a1 forURL:(id)a2;
- (id)sandboxExtensionPresentationController:(id)a0 windowForURL:(id)a1;
- (void)saveContinuousReadingListItemForCurrentBackForwardItemIfNecessary:(id)a0;
- (void)saveFrame:(const void *)a0 withOriginURL:(id)a1 suggestedFilename:(id)a2 mimeType:(id)a3;
- (void)saveUnsubmittedFormDataFromRemovedFrameIfNecessaryInFrame:(const void *)a0 sourceFrame:(const void *)a1;
- (id)savedAccountWithGeneratedPassword;
- (void)scheduleCorrectButAbandonedParsecFeedbackIfPossible;
- (void)schedulePasswordManagementOnboardingUserNotificationsIfNeeded;
- (void)scheduleValidationForHiddenElementsIfNeeded;
- (void)scribbleController:(id)a0 didUpdateSelectedElement:(id)a1 withError:(id)a2;
- (void)scribbleController:(id)a0 runHidingAnimationWithElementRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)scribbleControllerDidUpdateHiddenElementCount:(id)a0;
- (void)scribbleUnifiedFieldOverlayDidClickCancel:(id)a0;
- (void)scribbleUnifiedFieldOverlayDidClickDone:(id)a0;
- (id)searchURLWithTrialGroupIdentifier:(id)a0;
- (void)searchableWKViewDidEnterFullscreenWindow:(id)a0;
- (void)searchableWKViewDidReturnFromFullscreenWindow:(id)a0;
- (void)searchableWKViewWillEnterFullscreenWindow:(id)a0;
- (void)sendEventsForAutoFillTelemetry;
- (void)sensitiveFieldFocusedInFrame:(id)a0;
- (void)sessionStateDidChange;
- (void)setAncestorTabIdentifiersWithRelatedTab:(id)a0 relationType:(unsigned long long)a1;
- (void)setAutoFillSpinnerVisibility:(char)a0 formAutoFillController:(id)a1;
- (void)setContextMenuUserInfo:(id)a0 forExtensionWithIdentifier:(id)a1;
- (void)setCurrentlyLoadedReadingListItem:(id)a0 pageNumber:(unsigned long long)a1;
- (void)setDidCrashOrWasTerminatedForBeingUnresponsiveInTheBackground:(char)a0;
- (void)setInitialContents:(const void *)a0;
- (void)setPagePreviewNeedsReloadOnTabTransition;
- (void)setRequestedTabLabel:(id)a0 lifetime:(long long)a1;
- (void)setSearchResultsForSnapBackToCurrentPage;
- (void)setStatusForMouseoverWithUserData:(id)a0 linkURL:(id)a1 modifiers:(unsigned long long)a2 forPage:(const void *)a3;
- (void)setTextVisibilityForSummarizationAnimationCoordinator:(id)a0 isVisible:(char)a1;
- (void)setURLOfMostRecentFirstVisuallyNonEmptyLayout:(id)a0;
- (void)setUpSpawnedTabFromParentTab:(id)a0;
- (void)setUserActivityNeedsSave:(char)a0;
- (void)sharePageViaMail;
- (char)shouldConfirmUnloadingPageWithPIPDuringNavigation;
- (char)shouldDeferLoadingWhileSavingFormDataInFrame:(const void *)a0 sourceFrame:(const void *)a1;
- (char)shouldPerformActionInFormTextFieldWithMetadata:(const void *)a0 formMetadata:(const void *)a1 inFrame:(const void *)a2 uncheckedActionType:(unsigned long long)a3;
- (char)shouldSaveBackForwardListItemInTabState:(const void *)a0;
- (char)shouldSpawnNewTabOnBrowserUIInitiatedNavigationFromPinnedTabWithDestinationURL:(id)a0;
- (char)shouldSpawnNewTabOnNavigationFromPinnedTabWithDestinationURL:(id)a0;
- (char)shouldUsePrivateBrowsingInBookmarksViewController:(id)a0;
- (void)showBannerForAppLink:(id)a0;
- (void)showBannerForHighlight:(id)a0;
- (void)showBannerForMigratedPermissionsForExtensionsWithIdentifiers:(id)a0;
- (void)showBookmarks;
- (void)showCertificateInformation;
- (char)showCreditCardSubmenuFromEscapeHatchInCreditCardFieldMetadata:(id)a0 formMetadata:(id)a1 inFrame:(const void *)a2;
- (void)showDefaultBrowserBanner;
- (void)showErrorPageForJavaScriptInUnifiedField:(id)a0;
- (void)showErrorPageWithTemplate:(int)a0 pageURL:(id)a1 title:(id)a2 messageHTML:(id)a3;
- (void)showFunctionBarForProvider:(id)a0;
- (void)showHistory;
- (void)showJavaScriptAlertWithMessage:(id)a0 origin:(id)a1 completionHandler:(id /* block */)a2;
- (void)showJavaScriptConfirmWithMessage:(id)a0 origin:(id)a1 completionHandler:(id /* block */)a2;
- (void)showJavaScriptPromptWithPrompt:(id)a0 defaultText:(id)a1 origin:(id)a2 completionHandler:(id /* block */)a3;
- (void)showNewExtensionBannerForExtensionsWithIdentifiers:(id)a0;
- (void)showNewExtensionBannerForRemotelyEnabledExtensionWithIdentifier:(id)a0;
- (void)showOrUpdateDigitalHealthOverlayWithPolicy:(long long)a0 animated:(char)a1;
- (void)showPassBlockedDialogForDownload:(id)a0;
- (void)showPointerLockBannerAnimated:(char)a0;
- (void)showPrivateBrowsingExplanationBannerAnimated:(char)a0;
- (void)showPrivateBrowsingPrivacyProtectionsBanner;
- (void)showProcessIDsInPageTitlesPreferenceHasChanged;
- (void)showResponsiveDesignView;
- (void)showSharingServicePickerAtBottomOfView:(id)a0;
- (void)showWalletOrderBlockedDialogForDownload:(id)a0;
- (void)showWalletOrderImportFailedDialogForDownload:(id)a0;
- (void)showWebCrashBannerAnimated:(char)a0 terminationReason:(long long)a1;
- (void)showWebInspector;
- (void)snapBackToSearchResults;
- (void)startReadingListAnimationsUsingHopAnimationStartPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startReadingListHopAnimationFromMouseLocation;
- (id)startSpawnedTabBackgroundNavigationWithURL:(id)a0 shouldGoBackAfterBackgroundNavigationIsCommitted:(char)a1;
- (void)stopAllMediaPlayback;
- (char)supportsAdvancedPrivacyProtectionsForURL:(id)a0;
- (void)tabContentDidMoveFromBrowserTabViewItem:(id)a0 toBrowserTabViewItem:(id)a1;
- (id)tabDialogInstallationTargetForTabDialogPresentationManager:(id)a0;
- (void)tabDialogPresentationManagerDidDismissTabDialogs:(id)a0;
- (char)tabDialogPresentationManagerShouldDisplayDialogs:(id)a0;
- (char)tabDialogPresentationManagerShouldSkipAnimations:(id)a0;
- (int)tabDialogPresentationManagerWebProcessID:(id)a0;
- (void)tabDialogPresentationManagerWillPresentTabDialogs:(id)a0;
- (char)tabEntityIsSelectedForView:(id)a0;
- (id)tabEntityUUIDForView:(id)a0;
- (char)tearDownCreditCardSubmenu;
- (void)terminateAndReloadPageDueToUnresponsiveWebProcess;
- (void)terminatePageForClosingUnresponsiveWebProcess;
- (void)terminateWithoutReloadingPageDueToUnresponsiveWebProcess;
- (id)test_hostContentViewControllerForManager:(id)a0;
- (void)textDidChangeInTextArea;
- (void)textDidChangeInTextFieldDelayCompletedForTextFieldWithUniqueID:(id)a0 inFrame:(id)a1;
- (void)textDidChangeInTextFieldWithMetadata:(id)a0 formMetadata:(id)a1 inFrame:(id)a2;
- (void)textFieldBlurredInFrame:(id)a0 formMetadata:(id)a1 textFieldMetadata:(id)a2;
- (void)textFieldDidEndEditingInFrame:(const void *)a0 textFieldMetadata:(const void *)a1;
- (void)textFieldFocusedInFrame:(id)a0 formMetadata:(id)a1 textFieldMetadata:(id)a2;
- (void)toggleReader;
- (void)toggleReaderAppearanceCustomizationPopover;
- (void)toggleReaderWithoutUpdatingButtonState;
- (void)toggleWebInspector;
- (void)transferStateFromBrowserContentViewController:(id)a0;
- (void)transferStateFromBrowserContentViewControllerSpawnedFromPinnedTab:(id)a0;
- (void)translationConsentAlertDidClickHelpButton;
- (void)translationContext:(id)a0 shouldReportProgressInUnifiedField:(char)a1;
- (void)translationContext:(id)a0 showFeedbackConsentAlertWithCompletionHandler:(id /* block */)a1;
- (void)translationContext:(id)a0 showFirstTimeConsentAlertWithCompletionHandler:(id /* block */)a1;
- (void)translationContext:(id)a0 showTranslationErrorAlertWithTitle:(id)a1 message:(id)a2;
- (void)translationContext:(id)a0 urlForCurrentPageWithCompletionHandler:(id /* block */)a1;
- (char)translationContextIsUsingPrivateBrowsing:(id)a0;
- (void)translationContextNeedsScrollHeightVisibilityUpdate:(id)a0;
- (void)translationContextReloadPageInOriginalLanguage:(id)a0;
- (void)translationContextWillRequestTranslatingWebpage:(id)a0;
- (void)triedToCloseBeforeCommittingToBackgroundLoadWithResult:(long long)a0;
- (char)tryClose;
- (id)tryDownloadWithMultipleURLs:(id)a0 httpReferrer:(id)a1;
- (id)tryMultipleURLs:(id)a0 httpReferrer:(id)a1 canAttemptUpgradingRequestURLToHTTPS:(char)a2;
- (char)tryToCloseBeforeCommittingToBackgroundLoadWithDeferredCompletionHandler:(id /* block */)a0;
- (void)uninstallBanner:(id)a0 animated:(char)a1;
- (id)uniqueIDsOfControlsThatWereAutoFilledInFrame:(const void *)a0;
- (void)unmute;
- (void)updateBackForwardReferencesFromBrowserViewController:(id)a0 oldBackForwardListItemsToNewBackForwardListItemsMap:(id)a1;
- (void)updateBackItemAfterSwappingBrowserViewControllerIfNeeded;
- (void)updateContentBlockersWereDisabledDuringLastLoadForNavigation:(id)a0;
- (void)updateCountForElementsHiddenByPaintingAvoidance;
- (void)updateCustomSwipeViews;
- (void)updateFrequentlyVisitedSiteTitleIfNecessary;
- (void)updateKnownTrackingThirdPartiesWithITPEnabled:(char)a0 completionHandler:(id /* block */)a1;
- (void)updateLockedBrowsingState;
- (void)updatePageMutedState;
- (char)updateSavedAccountWithStrongPasswordEditedByUserWithURL:(id)a0;
- (void)updateToolbarTrackerCountSoon;
- (void)updateTopContentInset;
- (void)updateUnsubmittedPasswordGenerationCredentialsWithUsername:(id)a0 suggestedPassword:(id)a1;
- (void)updateUserActivity;
- (void)updateWKViewLayoutMode;
- (void)userDeclinedAutomaticStrongPasswordForCurrentDomain;
- (void)userDidDecideRemoteNotificationPolicy:(char)a0 forPermissionRequest:(unsigned long long)a1;
- (void)userDidDismissDefaultBrowserBanner:(id)a0;
- (void)userDidDismissPrivateBrowsingPrivacyProtectionsBanner:(id)a0;
- (void)userDidReloadWithReducedPrivateBrowsingPrivacyProtectionsInPrivateBrowsingPrivacyProtectionsBanner:(id)a0;
- (void)verifyEditedFormTextStatus;
- (void)viewMainFrameSource;
- (void)viewSourceForFrame:(const void *)a0;
- (void)visitInsecureWebsite;
- (void)visitInsecureWebsiteWithTemporaryBypass;
- (void)wantsDownloadURL:(id)a0;
- (void)warnAboutUnsavedCredentialsWithCompletionHandler:(id /* block */)a0;
- (id)webViewForSummarizationAnimationCoordinator:(id)a0;
- (void)willFillOneTimeCode:(id)a0;
- (char)willHandleEvent:(id)a0;
- (void)willNavigateInNewProcess:(id)a0;
- (void)willNavigateToBackForwardListItem:(id)a0 inPageCache:(char)a1;
- (void)willPerformClientRedirectForFrame:(const void *)a0 toURL:(id)a1;
- (void)willSubmitFormInFrame:(const void *)a0 targetURL:(id)a1;
- (void)zoomIn;

@end
