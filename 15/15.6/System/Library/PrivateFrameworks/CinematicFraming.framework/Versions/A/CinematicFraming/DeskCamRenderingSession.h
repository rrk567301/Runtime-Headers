@class DeskCamSessionOptions, NSString;
@protocol MTLDevice, MTLLibrary, MTLTexture, MTLCommandQueue;

@interface DeskCamRenderingSession : NSObject <DeskCamRenderingManager> {
    BOOL _isFrontFacingCamera;
    int _cameraOrientation;
    NSString *_portType;
    int _deviceType;
    int _outputType;
    struct { int width; int height; } _outputDimensions;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _outputCropRectangle;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _framingSpaceRectangle;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _subjectRectangleInSensorSpace;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _subjectRectangleInFramingSpace;
    void /* unknown type, empty encoding */ _gravity;
    float _pitch;
    float _roll;
    BOOL _gimbalLock;
    struct { void /* unknown type, empty encoding */ sensorSize; struct { void /* unknown type, empty encoding */ columns[3]; } intrinsicMatrixT; BOOL hasGeometricDistortionCalibration; void /* unknown type, empty encoding */ lensDistortionCenter; float mmFactor; int distortionCalibrationValidMaxRadiusInPixels; struct { float c0; float c2; float c4; float c6; float c8; float c10; float c12; float c14; } inverseGeometricDistortionPolynomial; struct { float c0; float c2; float c4; float c6; float c8; float c10; float c12; float c14; } forwardGeometricDistortionPolynomial; } _calibrationParameters;
    struct { void /* unknown type, empty encoding */ columns[3]; } _pitchMatrix;
    struct { void /* unknown type, empty encoding */ columns[3]; } _rollMatrix;
    void /* unknown type, empty encoding */ _translationVector;
    void /* unknown type, empty encoding */ _inputPlaneShift;
    void /* unknown type, empty encoding */ _outputPlaneShift;
    void /* unknown type, empty encoding */ _camera2PlaneShift;
    void /* unknown type, empty encoding */ _plane2CameraShift;
    id<MTLDevice> _metalDevice;
    id<MTLCommandQueue> _commandQueue;
    id<MTLLibrary> _library;
    struct __CVMetalTextureCache { } *_metalTextureCacheRef;
    id<MTLTexture> _warpedRGBLowResTexture;
    id<MTLTexture> _blurredRGBLowResTexture;
    id<MTLTexture> _warpedRGBHiResTexture;
    float _autoZoomScalingFactor;
    struct { float radiusUpscaler; float blendingPercentage; } _imageBlendingControls;
    struct { BOOL enabled; int size; float sigma; float weights[256]; } _imageBlurringControls;
    struct { BOOL enabled; int size; float sigma; float weights[256]; float amount; } _imageSharpeningControls;
    struct { BOOL enabled; float exponent; float scaler; } _imageToneMappingControls;
    struct { id<MTLTexture> inputTexture; id<MTLTexture> auxiliaryTexture; void /* unknown type, empty encoding */ lowestPointOfDominantLineInOutputCrop; float alpha; int resetCounter; id<MTLTexture> rowSumsTexture; void *rowSums; float *cumRowSum; struct *spans; BOOL useFurthestPoint; float spanStrengthWeighting; float spanLengthWeighting; float spanAngleWeighting; struct { BOOL enabled; int size; float sigma; float weights[256]; } imageBlurringControls; } _lineDetectionController;
    struct { float temporalAlpha; float smallChangeThresh; float largeChangeThresh; int smallChangeObservationDurationMaxValue; int largeChangeObservationDurationMaxValue; int smallSteadyErrorObservationDurationMaxValue; int smallChangeObservationDuration; int largeChangeObservationDuration; int smallSteadyErrorObservationDuration; float errorMarginToCatch; float errorVarThresh; struct { float *data; int currIdx; int size; int count; } runningBuffer; int autoZoomState; } _autoZoomFilteringController;
}

@property (retain, nonatomic) DeskCamSessionOptions *options;
@property (readonly, nonatomic) struct { struct { } x0; } trapezoid;
@property (readonly, nonatomic) struct { void /* unknown type, empty encoding */ x0[3]; } transformMatrix;
@property (readonly, nonatomic) BOOL transformIsValid;
@property (readonly, nonatomic) BOOL autoZoomSupported;
@property (readonly, nonatomic) float autoZoomValue;
@property (readonly, nonatomic) void /* unknown type, empty encoding */ focusPoint;
@property (readonly, nonatomic) unsigned int exifOrientation;

- (void)dealloc;
- (void).cxx_destruct;
- (void)_initializeControls;
- (int)_compileShaders;
- (id)_newBufferWithLength:(unsigned long long)a0 options:(unsigned long long)a1 label:(id)a2;
- (int)_allocateTextures;
- (id)_compileComputeShader:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_defaultFramingSpaceViewport:(float)a0;
- (struct { int x0; })_deskEdgeDetectorResult;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_estimateSubjectRectangleInFramingSpaceFromSubjectRectangleInSensorSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (float)_filterAutoZoomScalingFactor:(float)a0;
- (void)_filterDeskEdgeDetectorEndPoints:(id)a0 :(SEL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_framingSpaceRectangleLandscapeLeft;
- (void)_initializeMetal;
- (void /* unknown type, empty encoding */)_mapNormalizedPointInFramingSpaceToOutputCropRect:(SEL)a0 withTransformMatrix:(struct { void /* unknown type, empty encoding */ x0[3]; })a1;
- (void /* unknown type, empty encoding */)_mapPointFromNormalizedSensorSpaceToNormalizedFramingSpace:(SEL)a0;
- (struct { void /* unknown type, empty encoding */ x0[3]; })_pitchMatrix;
- (void /* unknown type, empty encoding */)_projectPoint:(SEL)a0 intrinsicMatrix:(struct { void /* unknown type, empty encoding */ x0[3]; })a1 rotationMatrix:(struct { void /* unknown type, empty encoding */ x0[3]; })a2;
- (struct { void /* unknown type, empty encoding */ x0[3]; })_rollMatrix;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_scaleViewportToFitInFramingSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_shiftFramingSpaceRectangleToExploitSensorSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct { void /* unknown type, empty encoding */ x0[3]; })_transformMatrixWithOutputCropRectangle:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void /* unknown type, empty encoding */)_translationVector;
- (struct { struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; int x2; } x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; struct { struct { void /* unknown type, empty encoding */ x0[3]; } x0; BOOL x1; float x2; int x3; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x4; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x5; } x2; float x3; float x4; int x5; BOOL x6; })_undistortControls;
- (void)_updateDeskEdgeDetectionDataInOutputSpace;
- (void)_updatePitch;
- (void)_updatePitchAndRoll;
- (void)_updateRoll;
- (void)_updateSubjectRectangleInSensorSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 withDetections:(id)a1;
- (float)_viewportScaleMultiplier;
- (id)initWithOutputDimensions:(struct { int x0; int x1; })a0 portType:(id)a1 deviceType:(int)a2 isFrontFacingCamera:(BOOL)a3;
- (int)processBuffer:(struct __CVBuffer { } *)a0 outputPixelBuffer:(struct __CVBuffer { } *)a1;
- (void)registerBodyDetections:(id)a0;
- (void)registerCameraCalibrationDictionary:(id)a0;
- (void)registerCameraOrientation:(int)a0;
- (void)registerGravity:(SEL)a0;
- (void)registerOutputType:(int)a0;

@end
