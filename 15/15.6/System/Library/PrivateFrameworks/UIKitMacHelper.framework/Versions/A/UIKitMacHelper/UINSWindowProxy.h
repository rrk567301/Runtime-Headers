@class NSURL, NSToolbar, NSViewHost, NSObject, NSTrackingSeparatorToolbarItem, NSISEngine, NSString, UINSSceneViewController, NSPointerArray, UIScene, UINSWindowProxyFocusHelper, NSWindow, NSArray, NSView, UIWindow;
@protocol NSSidebarTrackingAdapter, NSSplitViewItemSeparatorTrackingAdapter, NSObject, UINSTouchBarCoordinator;

@interface UINSWindowProxy : NSObject <UINSWindow, NSSharingServicePickerDelegate> {
    NSWindow *_attachedWindow;
    UINSWindowProxyFocusHelper *_focusHelper;
    char _areKVOObserversSetUp;
    char _autoHidesToolbarInFullScreen;
    int _fauxModalStackCount;
    NSObject<UINSTouchBarCoordinator> *_touchBarCoordinator;
    long long _windowAppearance;
    id<NSObject> _startLiveResizeObserver;
    id<NSObject> _endLiveResizeObserver;
    NSPointerArray *_uiWindows;
    UIWindow *_keyUIWindow;
    NSTrackingSeparatorToolbarItem *_primarySidebarSeparatorItem;
    NSObject<NSSidebarTrackingAdapter> *_primarySidebarAdapter;
    NSTrackingSeparatorToolbarItem *_supplementarySidebarSeparatorItem;
    NSObject<NSSidebarTrackingAdapter> *_supplementarySidebarAdapter;
    struct { unsigned char hideWindowOnceAttached : 1; } _flags;
}

@property (retain, nonatomic) UIWindow *uiWindow;
@property (retain, nonatomic) NSArray *uiWindows;
@property (weak, nonatomic) UIWindow *keyUIWindow;
@property (readonly, weak, nonatomic) NSWindow *attachedWindow;
@property (readonly, weak, nonatomic) UINSSceneViewController *sceneViewController;
@property (copy, nonatomic) NSString *title;
@property (retain, nonatomic) NSToolbar *toolbar;
@property (nonatomic) long long toolbarStyle;
@property (nonatomic) long long titlebarSeparatorStyle;
@property (nonatomic) char drawsBottomDividerWhenTransparent;
@property (copy) NSURL *representedURL;
@property (retain, nonatomic) NSObject<UINSTouchBarCoordinator> *touchBarCoordinator;
@property (nonatomic) struct CGSize { double x0; double x1; } contentMinSize;
@property (nonatomic) char autoHidesToolbarInFullScreen;
@property (nonatomic, getter=isTitleHidden) char titleHidden;
@property (nonatomic, getter=isTitlebarTransparent) char titlebarTransparent;
@property (nonatomic, getter=isTitlebarHidden) char titlebarHidden;
@property (nonatomic) char titlebarAppearsTransparentWhenFullscreen;
@property (nonatomic, getter=isExcludedFromWindowsMenu) char excludedFromWindowsMenu;
@property (readonly, copy, nonatomic) NSString *sceneIdentifier;
@property (readonly, copy, nonatomic) NSString *persistentIdentifier;
@property (readonly, nonatomic) UIScene *UIScene;
@property (nonatomic) long long windowAppearance;
@property (readonly, weak, nonatomic) NSView *sceneView;
@property (readonly) NSISEngine *_layoutEngine;
@property (readonly, nonatomic, getter=isVisible) char visible;
@property (nonatomic) long long tabbingMode;
@property (readonly, nonatomic, getter=isInLiveResize) char inLiveResize;
@property (copy, nonatomic) id /* block */ toggleFullScreenOverride;
@property (readonly, nonatomic) char appearsKey;
@property (readonly, nonatomic) char appearsKeyIncludingSheets;
@property (readonly, nonatomic, getter=isFullscreen) char fullscreen;
@property (readonly, nonatomic) char hasFullSizeContentView;
@property (readonly, nonatomic) char isMovableByWindowBackground;
@property (weak, nonatomic, setter=_setHostedView:) NSViewHost *_hostedView;
@property (readonly, nonatomic) NSArray *titlebarAccessoryViewControllers;
@property (retain) NSObject<NSSidebarTrackingAdapter> *primarySidebarAdapter;
@property (retain) NSObject<NSSidebarTrackingAdapter> *supplementarySidebarAdapter;
@property (retain) NSObject<NSSplitViewItemSeparatorTrackingAdapter> *splitViewItemSeparatorTrackingAdapter;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } hostWindowContentFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } hostWindowFrame;
@property (copy, nonatomic) id /* block */ representedDragItemsProvider;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)windowProxyWithSceneIdentifier:(id)a0;

- (id)forwardingTargetForSelector:(SEL)a0;
- (char)respondsToSelector:(SEL)a0;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (id)NS_touchBars;
- (id)_newStandardItemWithItemIdentifier:(id)a0 willBeInsertedIntoToolbar:(char)a1;
- (id)_responderDebugAdditionalItemsForAction:(SEL)a0 withSender:(id)a1;
- (void)_setFullScreenSidebarToolbarMaterial:(long long)a0;
- (void)_setFullScreenSidebarUsesWithinWindowBlending:(char)a0;
- (void)_sidebarAdapterWasAddedToWindow:(id)a0;
- (void)_sidebarProviderWillRemoveFromWindow:(id)a0;
- (void)addTitlebarAccessoryViewController:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromScreen:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToScreen:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)insertTitlebarAccessoryViewController:(id)a0 atIndex:(long long)a1;
- (void)makeKeyAndOrderFront:(id)a0;
- (void)makeKeyWindow;
- (void)orderFront:(id)a0;
- (void)orderOut:(id)a0;
- (void)performClose:(id)a0;
- (char)registerScrollViewSeparatorTrackingAdapter:(id)a0;
- (void)removeTitlebarAccessoryViewControllerAtIndex:(long long)a0;
- (void)unregisterScrollViewSeparatorTrackingAdapter:(id)a0;
- (void)setCursor:(id)a0;
- (void)applyCursorLock;
- (void)attachToWindow:(id)a0;
- (void)inputViewResignedFirstResponder;
- (void)_registerSplitViewItemSeparatorTrackingAdapter:(id)a0;
- (id)_responderProxyForAction:(SEL)a0 sender:(id)a1;
- (void)_rotateDeviceOrientationIfNeeded;
- (void)_unregisterSplitViewItemSeparatorTrackingAdapter:(id)a0;
- (void)acceptKeyViewHandoff:(char)a0 completionQueue:(id)a1 completionHandler:(id /* block */)a2;
- (void)beginDragWithItems:(id)a0 handler:(id)a1;
- (void)beginHostModalSession;
- (char)cancelOutstandingUserInput;
- (void)convertEdgeInsetsFromUIWindow:(const void *)a0 nsEdgeInsets:(void *)a1;
- (void)convertEdgeInsetsToUIWindow:(const void *)a0 uiEdgeInsets:(void *)a1;
- (struct CGPoint { double x0; double x1; })convertPointFromUIWindow:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointToUIWindow:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromUIWindow:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToUIWindow:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })convertSizeFromUIWindow:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })convertSizeToUIWindow:(struct CGSize { double x0; double x1; })a0;
- (void)detachFromWindow:(id)a0;
- (void)endHostModalSession;
- (void)forwardShowWritingToolsToAppKit:(id)a0;
- (void)forwardUINSEventToAppKit:(id)a0;
- (id)hostEnterExitEventWithType:(long long)a0 sceneLocation:(struct CGPoint { double x0; double x1; })a1;
- (id)hostEventsFromHIDEvent:(struct __IOHIDEvent { } *)a0;
- (id)initForSceneViewController:(id)a0;
- (void)inputViewFinishedBecomeFirstResponder:(char)a0;
- (void)inputViewStartedBecomeFirstResponder;
- (void)markTouchBarAsDirty;
- (id)newDocumentBrowserViewController;
- (id)newSheetAlert;
- (id)newSheetDocumentPickerViewController;
- (void)noteUIWindowContextsChanged;
- (void)performResizeTestWithPreTestHandler:(id /* block */)a0 postTestHandler:(id /* block */)a1;
- (void)preferredPointerLockStateChanged:(id)a0;
- (void)presentContextualMenuForShareableItems:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1;
- (void)removeCursorLock;
- (void)sendInitialWindowVisibilityChangedNotifications;
- (void)setNeedsDragRegionsUpdate;
- (void)setNeedsSizeRestrictionsUpdate;
- (void)setWindowVisibility:(char)a0;
- (void)takeCursor:(id)a0;
- (void)updateAndNotifyIfAppearsKeyChanged;
- (void)updateFullScreenBehavior;
- (void)updatePointerLockState:(char)a0;
- (void)warpCursorToScene;
- (void)windowFullScreenStatusDidChange:(id)a0;
- (void)windowItselfBecameFirstResponder;
- (id)windowSupportingPointerLockState;

@end
