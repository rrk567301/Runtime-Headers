@class NSData, NSString, NSView, AKController, UTType, NSStackView, MUCGPDFReader, MUContentBorderView, NSViewController, NSUndoManager;
@protocol MUContentViewControllerProtocol, MUContentViewControllerLiveTextProtocol, MarkupViewControllerDelegate;

@interface MarkupViewController : NSViewController <MUContentViewControllerDelegate, AKSidecarControllerDelegate, NSMenuItemValidation, MUContentViewControllerDataDelegate, NSTouchBarDelegate, NSWindowDelegate>

@property (retain) id digestedSourceContent;
@property (retain) NSData *sourceArchivedModelData;
@property (retain) MUCGPDFReader *pdfReader;
@property double creationTimeStamp;
@property (retain) NSViewController<MUContentViewControllerProtocol> *contentViewController;
@property (readonly, nonatomic) id<MUContentViewControllerLiveTextProtocol> liveTextContentViewController;
@property (retain) NSUndoManager *undoManager;
@property (retain) MUContentBorderView *borderOverlayView;
@property double initialContentScale;
@property char viewDidAppearWasDoneOnce;
@property char alreadyLoggedSavingForThisDocument;
@property char needToPerformFullTeardown;
@property char needToPerformDocumentClosedTeardown;
@property char wantsToolbarAndPadding;
@property (retain) id sourceContent;
@property char sourceContentIsLoaded;
@property (copy, nonatomic) NSString *originalImageDescription;
@property char encryptPrivateMetadata;
@property (copy, nonatomic) NSString *hostProcessBundleIdentifier;
@property (weak, nonatomic) id<MarkupViewControllerDelegate> delegate;
@property char cropToolEnabled;
@property (nonatomic) char hideAKToolbarItems;
@property (nonatomic) char liveTextEnabled;
@property (nonatomic) char liveTextVisualSearchEnabled;
@property (readonly, nonatomic) NSString *visualSearchInfoButtonGlyphName;
@property (readonly, nonatomic) NSString *visualSearchInfoButtonFilledGlyphName;
@property (readonly, nonatomic) char liveTextActiveTextSelectionExists;
@property (weak, nonatomic) NSStackView *toolBarViewHolder;
@property (weak, nonatomic) NSView *contentViewHolder;
@property (readonly, nonatomic) AKController *annotationController;
@property char allEditingDisabled;
@property (readonly, nonatomic) UTType *outputContentType;
@property (readonly, nonatomic) NSString *outputType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)cleanImageMetadataFromData:(id)a0;
+ (char)hasPrivateImageMetadata:(id)a0;
+ (struct CGSize { double x0; double x1; })minimumToolbarSize;
+ (id)supportedOutputTypes;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id)initWithCoder:(id)a0;
- (char)writeToURL:(id)a0 error:(id *)a1;
- (id)initWithNibName:(id)a0 bundle:(id)a1;
- (void)delete:(id)a0;
- (id)nibName;
- (id)_getUndoManager:(char)a0;
- (void)awakeFromNib;
- (void)copy:(id)a0;
- (void)cut:(id)a0;
- (void)keyDown:(id)a0;
- (void)keyUp:(id)a0;
- (void)loadView;
- (id)makeTouchBar;
- (id)nibBundle;
- (void)paste:(id)a0;
- (void)redo:(id)a0;
- (void)selectAll:(id)a0;
- (void)undo:(id)a0;
- (char)validateMenuItem:(id)a0;
- (char)validateUserInterfaceItem:(id)a0;
- (void)viewDidAppear;
- (void)viewDidLoad;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })window:(id)a0 willPositionSheet:(id)a1 usingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)windowWillClose:(id)a0;
- (id)dataRepresentationWithError:(id *)a0;
- (void)_updatePreferredContentSizeIfNeeded;
- (void)revert;
- (void)deleteMessages:(id)a0;
- (void)setImage:(id)a0 withArchivedModelData:(id)a1;
- (void)_loadContent;
- (void)_loadContentWithPreloadedView:(id)a0;
- (void)_setupInitialBaseModelScaleFactorWithScreenSize:(struct CGSize { double x0; double x1; })a0 windowDecorationSize:(struct CGSize { double x0; double x1; })a1;
- (void)_someViewDidChangeFrame:(id)a0;
- (id)_sourceContentType;
- (char)_sourceImageMayContainBaseImageAndModel;
- (void)_updateBorderOverlayView;
- (struct CGSize { double x0; double x1; })_usableScreenSize;
- (char)_validateItem:(id)a0;
- (char)_writeToDataConsumer:(struct CGDataConsumer { } *)a0 embedSourceImageAndEditModel:(char)a1 error:(id *)a2;
- (void)addToolbarButton:(id)a0;
- (id)annotationControllerOfContentViewController:(id)a0 willSetToolbarItems:(id)a1;
- (id)applicationDataForSidecarController:(id)a0;
- (char)containsResultsForAnalysisTypes:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentViewRectInScreenCoordinates;
- (void)copyLiveTextSelection:(id)a0;
- (id)createArchivedModelData;
- (id)dataRepresentationEmbeddingSourceImageAndEditModel:(char)a0 error:(id *)a1;
- (void)documentDidCloseTeardown;
- (void)duplicate:(id)a0;
- (void)editDetectedForAnnotationController:(id)a0;
- (id)filteredToolbarItemsForItems:(id)a0 fromController:(id)a1;
- (void)finalizeCrop;
- (id)flattenedDataForCurrentRepresentation:(id)a0;
- (void)fullTeardown;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })idealScreenFrame;
- (struct CGSize { double x0; double x1; })idealViewSizeWithScaleFactor:(double)a0 windowDecorationSize:(struct CGSize { double x0; double x1; })a1;
- (id)initWithToolbar:(char)a0;
- (void)liveTextAnalysisDidCompleteForMUContentViewController:(id)a0;
- (double)modelBaseScaleFactorOfPageAtIndex:(unsigned long long)a0 forContentViewController:(id)a1;
- (void)performActionForSender:(id)a0;
- (void)positionSketchOverlay:(id)a0 forContentViewController:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })positioningRectForCandidatePickerForContentViewController:(id)a0;
- (void)setData:(id)a0 withArchivedModelData:(id)a1;
- (void)setFileURL:(id)a0 withArchivedModelData:(id)a1;
- (void)setFileURL:(id)a0 withArchivedModelData:(id)a1 preloadedView:(id)a2;
- (id)undoManagerForContentViewController:(id)a0;
- (void)willBeginLoadingNewDocument;
- (char)writeToURL:(id)a0 embeddingSourceImageAndEditModel:(char)a1 error:(id *)a2;

@end
