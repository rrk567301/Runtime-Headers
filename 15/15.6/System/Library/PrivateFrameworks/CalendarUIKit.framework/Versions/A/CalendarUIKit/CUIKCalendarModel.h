@class _EKNotificationMonitor, NSMutableDictionary, EKEventStore, NSDate, CUIKPasteboardManager, EKCalendarDate, CUIKEventLoader, NSMutableArray, CUIKIPendingReminderTracker, NSCalendar, EKEvent, NSSet, NSString, EKSource, CUIKUndoManager, NSArray, CUIKCalendarModelSceneState, NSLock;
@protocol CUIKOccurrenceCacheDataSourceProtocol;

@interface CUIKCalendarModel : NSObject <CUIKEventLoaderDelegate, CUIKPasteboardManagerCalendarProvider, CUIKPasteboardManagerEventStoreProvider> {
    char _modelLocked;
    char _notificationMonitorSetUp;
    CUIKEventLoader *_eventLoader;
    unsigned long long _focusFilterMode;
    NSLock *_filterLock;
    NSArray *_visibleCalendars;
    NSSet *_unselectedCalendarsForFocusMode;
    char _hasLoadedUnselectedCalendarsForFocusMode;
    long long _readWriteCalendarCount;
    NSArray *_delegateSources;
    long long _invitationBearingStoresExist;
    _EKNotificationMonitor *_notificationMonitor;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _dataSourceLock;
    id<CUIKOccurrenceCacheDataSourceProtocol> _occurrenceCacheDataSource;
    id<CUIKOccurrenceCacheDataSourceProtocol> _occurrenceCacheFilteredDataSource;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _cachedFakeTodayIndexLock;
    long long _cachedFakeTodayIndex;
    NSMutableDictionary *_displayableAccountErrorCounts;
    long long _initialAccountSyncCount;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _selectedDateLock;
    EKCalendarDate *_selectedDate;
    char _suspendSelectedDateChanges;
    EKCalendarDate *_suspendedSelectedDate;
    CUIKCalendarModelSceneState *_persistedSceneState;
    NSMutableArray *_selectedOccurrences;
    NSDate *_lastKnownToday;
    int _apHiddenNotificationToken;
    int _apLockedNotificationToken;
    NSString *_cachedHiddenAppsHash;
}

@property (readonly, nonatomic) EKEventStore *eventStore;
@property (copy, nonatomic) NSCalendar *calendar;
@property (readonly, nonatomic) CUIKPasteboardManager *pasteboardManager;
@property (readonly, nonatomic) CUIKUndoManager *undoManager;
@property (copy, nonatomic) EKCalendarDate *selectedDate;
@property (readonly, nonatomic) EKCalendarDate *selectedDay;
@property (readonly, nonatomic) long long readWriteCalendarCount;
@property (readonly, nonatomic) long long accountsInInitialSyncCount;
@property (readonly, nonatomic) char currentlyLocked;
@property (nonatomic) unsigned long long firstVisibleSecond;
@property (retain, nonatomic) EKEvent *selectedOccurrence;
@property (copy, nonatomic) NSArray *selectedOccurrences;
@property (copy, nonatomic) NSSet *collapsedSectionIdentifiers;
@property (retain, nonatomic) NSSet *selectedCalendars;
@property (readonly, nonatomic) NSSet *selectedCalendarsIgnoringFocus;
@property (copy, nonatomic) NSSet *unselectedCalendars;
@property (readonly, nonatomic) NSSet *unselectedCalendarsIgnoringFocus;
@property (readonly, nonatomic) NSSet *unselectedCalendarsForFocusMode;
@property (nonatomic) unsigned long long focusFilterMode;
@property (nonatomic) char disableFocusFiltering;
@property (retain, nonatomic) NSString *searchString;
@property (nonatomic) char showDayAsList;
@property (nonatomic) long long numDaysToShow;
@property (nonatomic) char showMonthAsDivided;
@property (readonly, retain, nonatomic) EKSource *sourceForSelectedIdentity;
@property (retain, nonatomic) NSArray *sortedEnabledDelegates;
@property (readonly, nonatomic) char containsDelegateSources;
@property (copy, nonatomic) NSString *sceneIdentifier;
@property (nonatomic) char autoStartNotificationMonitor;
@property (nonatomic) char allowEventLocationPrediction;
@property (retain, nonatomic) CUIKIPendingReminderTracker *pendingReminderTracker;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (unsigned long long)errorForSource:(id)a0;
+ (unsigned long long)errorForSubscribedCalendarChildrenOfSource:(id)a0;
+ (id)sortedEnabledDelegateSourcesFromStore:(id)a0;
+ (void)temporarilyIgnoreInsecureConnectionErrorsForCalendars:(id)a0;
+ (void)temporarilyIgnoreInvalidCredentialsErrorForSource:(id)a0;

- (void)dealloc;
- (void).cxx_destruct;
- (void)_significantTimeChange;
- (void)_localeChanged:(id)a0;
- (void)_eventStoreChanged:(id)a0;
- (id)defaultCalendarForNewEvents;
- (void)_timeZoneChanged:(id)a0;
- (double)_tomorrow;
- (char)_eventBelongsToCurrentIdentity:(id)a0;
- (id)cachedSpecialDayDataForSection:(long long)a0;
- (void)_focusModeConfigurationChanged:(id)a0;
- (char)selectedOccurrenceIsSearchMatch;
- (long long)_cachedFakeTodayIndexLocked;
- (id)_calendarsEnabledInFocus:(id)a0;
- (id)_calendarsExcludingLockedReminder:(id)a0;
- (id)_calendarsForCurrentIdentityFromCalendars:(id)a0 lock:(char)a1;
- (void)_checkSources;
- (void)_createOccurrenceCacheDataSources;
- (id)_dataSourceUsingFilter:(char)a0;
- (void)_deselectOccurrence:(id)a0 notify:(char)a1;
- (void)_deselectOccurrences:(id)a0 notify:(char)a1;
- (unsigned long long)_eventNotificationCountForCurrentIdentityIgnoringFilter:(char)a0;
- (id)_eventNotificationsForCurrentIdentityIgnoringFilter:(char)a0;
- (void)_executeBlockWithOccurrenceCacheDataSources:(id /* block */)a0;
- (void)_finishedFirstLoad;
- (void)_ignoredErrorsChanged;
- (void)_invalidateCachedOccurrences;
- (void)_invalidateOccurrenceCacheDataSources;
- (void)_loadVisibleCalendarsIfNeeded;
- (void)_notificationBlacklisted;
- (id)_notificationMonitor;
- (void)_notificationsExpired:(id)a0;
- (void)_notificationsLoaded:(id)a0;
- (void)_occurrenceCacheChanged;
- (void)_occurrenceCacheChangedNotificationHandler;
- (void)_performCommonInitializationWithPasteboardManager:(id)a0;
- (void)_processReloadForCacheOnly:(char)a0 includingCalendars:(char)a1 checkCalendarsValid:(char)a2 checkSources:(char)a3;
- (void)_recreateOccurrenceCacheDataSources;
- (void)_reloadEventsIfTodayChanged;
- (id)_reminderCalendar;
- (void)_searchResultsAvailable:(id)a0;
- (long long)_sectionForCachedOccurrencesOnDate:(id)a0 sectionExistsForDay:(char *)a1 usingFilter:(char)a2;
- (char)_selectOccurrence:(id)a0 notify:(char)a1;
- (void)_setFocusFilterMode:(unsigned long long)a0 force:(char)a1;
- (char)_setSelectedCalendars:(id)a0;
- (void)_setupUndoManager;
- (char)_shouldShowNotification:(id)a0;
- (void)_systemWake;
- (void)_tzSupportTodayRolledOver;
- (id)_unselectedCalendarsForFocusMode;
- (void)addOccurrenceAwaitingDeletion:(id)a0;
- (void)addOccurrenceAwaitingRefresh:(id)a0;
- (void)addRespondedNotificationObjectID:(id)a0;
- (id)allCalendarsForCurrentIdentity;
- (id)allEventNotificationReferences;
- (unsigned long long)allEventNotificationsCount;
- (id)cachedOccurrenceAtIndexPath:(id)a0;
- (id)cachedOccurrenceAtIndexPath:(id)a0 usingFilter:(char)a1;
- (char)cachedOccurrencesAreLoaded;
- (id)cachedOccurrencesForSection:(long long)a0;
- (void)calendarEventLoader:(id)a0 occurrencesDidUpdateBetweenStart:(double)a1 end:(double)a2 generation:(int)a3 wasEmptyLoad:(char)a4;
- (id)calendarsForCurrentIdentityFromCalendars:(id)a0;
- (void)checkLocationAuthorizationAndAllowEventLocationPrediction;
- (id)closestOccurrenceToTomorrowForEventObjectID:(id)a0;
- (long long)countAccountsInInitialSync;
- (char)countSourcesWithErrors;
- (id)dateForCachedOccurrencesInSection:(long long)a0;
- (id)dateForCachedOccurrencesInSection:(long long)a0 usingFilter:(char)a1;
- (id)dateForCachedOccurrencesInSection:(long long)a0 usingFilter:(char)a1 holdingCachedFakeTodayIndexLock:(char)a2;
- (void)deselectOccurrence:(id)a0;
- (void)deselectOccurrences:(id)a0;
- (long long)displayableAccountErrorsForSource:(id)a0;
- (void)ensureCalendarVisibleWithId:(id)a0;
- (id)eventNotificationReferencesForCurrentIdentity;
- (id)eventNotificationReferencesForCurrentIdentityIgnoringFilter;
- (id)eventNotificationReferencesForIdentity:(id)a0;
- (id)eventNotificationReferencesForIdentity:(id)a0 ignoringFilter:(char)a1;
- (unsigned long long)eventNotificationsForCurrentIdentityCount;
- (unsigned long long)eventNotificationsForCurrentIdentityIgnoringFilterCount;
- (void)fetchCachedDaysInBackgroundStartingFromSection:(long long)a0 usingFilter:(char)a1;
- (void)fetchDaysStartingFromSection:(long long)a0 sectionsToLoadInBothDirections:(long long)a1;
- (id)indexPathsForOccurrence:(id)a0 usingFilter:(char)a1;
- (id)initWithDataPath:(id)a0 pasteboardManager:(id)a1;
- (id)initWithEventStore:(id)a0 pasteboardManager:(id)a1;
- (id)initWithPasteboardManager:(id)a0;
- (char)invitationBearingStoresExistForEvents;
- (char)isCalendarVisibleWithID:(id)a0;
- (char)isLoadedOrLoading:(id)a0 endDate:(id)a1;
- (void)locationPrecisionDeterminedNotification:(id)a0;
- (long long)numberOfCachedOccurrencesInSection:(long long)a0;
- (long long)numberOfCachedOccurrencesInSection:(long long)a0 usingFilter:(char)a1;
- (long long)numberOfDaysWithCachedOccurrences;
- (long long)numberOfDaysWithCachedOccurrencesUsingFilter:(char)a0;
- (id)occurrencesForDay:(id)a0 waitForLoad:(char)a1;
- (id)occurrencesForStartDate:(id)a0 endDate:(id)a1 preSorted:(char)a2 waitForLoad:(char)a3;
- (id)occurrencesForStartDay:(id)a0 endDay:(id)a1 preSorted:(char)a2 waitForLoad:(char)a3;
- (id)persistedSceneState;
- (void)postSelectedCalendarsChanged;
- (void)prepareForAppSuspend;
- (id)refreshAccountListIfNeeded:(char)a0;
- (id)refreshCalendarDataIfNeeded:(char)a0;
- (id)reminderCalendar;
- (char)removeEvent:(id)a0 withSpan:(long long)a1 error:(id *)a2;
- (char)searchingOccurrences;
- (long long)sectionForCachedOccurrencesOnDate:(id)a0;
- (long long)sectionForCachedOccurrencesOnDate:(id)a0 sectionExistsForDay:(char *)a1;
- (long long)sectionForCachedOccurrencesOnDate:(id)a0 usingFilter:(char)a1;
- (void)selectOccurrence:(id)a0;
- (void)selectOccurrences:(id)a0;
- (id)selectedDateOccurrences:(char)a0 loadIsComplete:(char *)a1;
- (void)setComponentForExpandingPadding:(unsigned long long)a0;
- (void)setDesiredPaddingDays:(unsigned int)a0;
- (void)setFocusFilterMode:(unsigned long long)a0 force:(char)a1;
- (void)setMaxCachedDays:(unsigned int)a0;
- (void)setPreferredReloadStartDate:(id)a0 endDate:(id)a1;
- (void)setSelectedCalendarsAndRequestPreferenceSave:(id)a0 reason:(id)a1;
- (void)setSelectedDateChangesDelayedUntilAfterTransition:(char)a0;
- (void)setSelectedOccurrence:(id)a0 forceChange:(char)a1;
- (void)setSelectedOccurrences:(id)a0 forceChange:(char)a1;
- (void)setSourceForSelectedIdentity:(id)a0;
- (void)simulateFirstLoadFinished;
- (void)startNotificationMonitor;
- (void)updateAfterAppResume;
- (void)updateSelectedDateTimeZone;
- (void)updateSourceForSelectedIdentity:(id)a0 selectedCalendars:(id)a1;

@end
