@class NSString, CRLineWrappingParameters, CRLineWrappingContext;
@protocol CRLineWrappable;

@interface CRWrappingEvaluationResult : NSObject

@property char matchingLocales;
@property (retain) NSString *paragraphText;
@property (retain) id<CRLineWrappable> featureInTest;
@property (retain) CRLineWrappingParameters *parameters;
@property (weak) CRLineWrappingContext *context;
@property float textHeightRatio;
@property float textWidthRatio;
@property float angleDiff;
@property char isOversegmented;
@property char leadingAligned;
@property char centerAligned;
@property char continuesToNewColumn;
@property double verticalSpacing;
@property struct CGSize { double width; double height; } featureInTestSize;
@property struct CGSize { double width; double height; } lastFeatureSize;
@property float topDistanceLeft;
@property float topDistanceRight;
@property float topDistanceRightToBottomLeft;
@property float leftDistance;
@property float rightDistance;
@property float midDistance;
@property float newParagraphIndentDistanceRatio;
@property float horizontalOverlap;
@property float verticalOverlap;
@property float xSpace;
@property float ySpace;
@property char midSentencePunctuated;
@property char bothBeginWithDigits;
@property char f2StartOfSentence;
@property char oversegmentedListItem;
@property char f2BeginsWithDD;
@property char f1EndsWithDD;
@property char f2FullyDD;
@property char multilineDD;
@property char wrappedDD;
@property (retain) NSString *sentencePuncStringToCheck;
@property char lmScoreSet;
@property char eosLMScoreSet;
@property double cachedLMScore;
@property double cachedEOSLMScore;
@property char featureTokensSet;
@property struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } cachedFeatureTokens;
@property char contextNoText;
@property char featureInTestNoText;
@property (readonly) struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *x0; } x2; } featureTokens;
@property (readonly) char contributesToVerticalSpacing;
@property (readonly) double verticalSpacingToHeightRatio;
@property (readonly) long long tokenCountDiff;
@property (readonly) struct CGSize { double width; double height; } imageSize;
@property (readonly) char similarHeights;
@property (readonly) char similarAngles;
@property (readonly) double widthGrowth;
@property (readonly) char excessiveVerticalDistance;
@property (readonly) char isHyphenatedPrefixOfWord;
@property (readonly) char shouldAllowWhitespaceDelimiter;
@property (readonly) long long textBasedEvaluation;
@property (readonly) long long textContentWrappingScore;
@property (readonly) long long wordCountWrappingScore;
@property (readonly) double lmScore;
@property (readonly) double eosLMScore;

- (id)description;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)_computeCharLMScores;
- (void)_computeDDPropertiesWithContext:(id)a0;
- (void)_computeGeometricProperties;
- (void)_computeIsHyphenatedPrefixOfWord:(id)a0;
- (void)_computeLMScoreComputingEOS:(char)a0;
- (void)_computeNoTextWithContext:(id)a0;
- (void)_processDDWithCombinedString:(id)a0 locale:(id)a1 withResultBlock:(id /* block */)a2;
- (void)_setParagraphTextWithString:(id)a0 context:(id)a1;
- (id)_spaceSeparatedTokens:(id)a0;
- (long long)_tokenCountForString:(id)a0;
- (long long)caseWrappingScoreUsingCustomConfiguration:(char)a0;
- (id)initWithTextFeature:(id)a0 context:(id)a1 imageSize:(struct CGSize { double x0; double x1; })a2 parameters:(id)a3;
- (id)initWithTextFeature:(id)a0 context:(id)a1 imageSize:(struct CGSize { double x0; double x1; })a2 parameters:(id)a3 skipTextComputation:(char)a4;
- (long long)punctuationWrappingScoreUsingCustomConfiguration:(char)a0;
- (id)resultByMerging:(id)a0;

@end
