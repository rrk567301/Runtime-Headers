@class RSObjectAlign, RSFloorPlan;

@interface RSFloorPlanRender : NSObject {
    struct Room_Standardization { struct StandardFloorPlan { struct Standard_Param { float pixel_sz_dynamic; int init_minimum_walls; float shortest_wall_length; float duplicate_point_thresh; float unique_point_angle; float tiny_small_wall_length; float parallel_dis_thresh; float parallel_angle_thresh; float lbfgs_drift_angle_thresh; float lbfgs_dist_thresh; float lbfgs_optimize_min_length; float lbfgs_move_region; float lbfgs_move_region_rate; float lbfgs_tm_score_diff_thresh; float min_first_wall_length; float manhattan_angle_offset; float keep_connect_angle_thresh; float keep_connect_intersection_distance; float need_rotate_small_wall_length; float need_rotate_wall_angle; float need_rotate_small_wall_angle; float standard_manhattan_angle; float merge_cross_lines_dis_thresh; float merge_cross_lines_angle_thresh; float merge_cross_lines_split_dist_th; float merge_cross_gap_dist_th; float merge_cross_gap_angle_th; float add_tiny_corner_dist_th; float add_tiny_corner_vertical_angle_th; float add_tiny_corner_parallel_angle_th; float add_tiny_opening_dist_th; float add_tiny_opening_parallel_angle_th; float add_tiny_opening_parallel_dist_th; } param_; struct vector<roomscancore::Line<float __attribute__((ext_vector_type(2)))>, std::allocator<roomscancore::Line<float __attribute__((ext_vector_type(2)))>>> { void *__begin_; void *__end_; struct __compressed_pair<roomscancore::Line<float __attribute__((ext_vector_type(2)))> *, std::allocator<roomscancore::Line<float __attribute__((ext_vector_type(2)))>>> { void *__value_; } __end_cap_; } walls; struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } vertex; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } vertex_1d; struct vector<std::vector<unsigned long>, std::allocator<std::vector<unsigned long>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<unsigned long> *, std::allocator<std::vector<unsigned long>>> { void *__value_; } __end_cap_; } line_mask; struct vector<std::vector<unsigned long>, std::allocator<std::vector<unsigned long>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<unsigned long> *, std::allocator<std::vector<unsigned long>>> { void *__value_; } __end_cap_; } vertex_walls; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } vertex_angles; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } vertex_angles_180; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *__value_; } __end_cap_; } tiny_sw_vertex; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *__value_; } __end_cap_; } tiny_sw_line_id; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } scores; struct Line<float __attribute__((ext_vector_type(2)))> { void /* unknown type, empty encoding */ corners[2]; } first_wall; struct GeometryMeta { BOOL is_center_scale_updated; float pixel_size; float floor_height; float ceiling_height; float support_height; void /* unknown type, empty encoding */ center; void /* unknown type, empty encoding */ scale; void /* unknown type, empty encoding */ shift; int image_size; void /* unknown type, empty encoding */ floor_ceiling_count; int z_slice; float visual_ceiling_height; float visual_floor_height; } geo_meta_; struct Tensor<float, 2UL> { void /* function */ **_vptr$Tensor; struct Inside_View<2UL> { struct Shape<2UL> { unsigned long long _sp[6]; } _shape_of_view; struct Shape<2UL> { unsigned long long _sp[6]; } _stride_of_view; unsigned long long _length_of_view; unsigned long long _offset_of_view; } _view; struct shared_ptr<wt::Storage<float>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _storage; BOOL _is_contiguous; BOOL _is_empty; float *_buffer_head; } density_map_; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } before_tm_scores_; } standardizer_; struct unordered_map<std::string, std::vector<wlw::lcnn_flp::ProjectParam>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<wlw::lcnn_flp::ProjectParam>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<wlw::lcnn_flp::ProjectParam>>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } project_map_; struct RSLocalStandardization { void /* function */ **_vptr$RSLocalStandardization; struct ONLINE_STANDARDIZATION_CONFIG { float large_wall_len_thr; float small_wall_len_thr; float noise_wall_len_thr; float angle_thr; float noise_wall_angle_thr; float angle_eps; float anchor_wall_len_factor; float corner_dist_thr; } _online_std_config; struct ONLINE_CONFIG { float major_fov_angle_thres; float major_fov_angle_thres_buffer; float dist_thres; float iou_thres; float angle_thres; float angle_thres_for_small_walls; float small_wall_length_thres; float corner_dist_thres; float overlap_angle_thres; float overlap_dist_thres; float overlap_iou_thres; float acute_angle_thres; float shorten_len_thr; float one_vs_two_shorten_len_thr; int shorten_non_match_thr; float iou_thres_opening; int standalone_opening_thr; float hold_score_thres; float hold_small_wall_length_thres; float opening_checking_range; float opening_checking_thres; float opening_checking_occlusion_range; float min_length_thres; float parallel_angle_epsilon; float dup_dist_thr; float dup_angle_thr; float dup_iou_thr; float curved_wall_early_stop_score_thr; float low_conf_wall_score_thr; int low_conf_wall_non_match_thr; } _online_config; } localStandardizer_; } _roomStandardizer;
    RSObjectAlign *_objAlign;
    BOOL _isObjectBeautificationEnabled;
    BOOL _isChairBeautificationEnabled;
    BOOL _isStandardizationEnabled;
    BOOL _isEstimateFloorPlanColorEnabled;
    BOOL _isUniformHeightPolygonEnabled;
    RSFloorPlan *_floorPlan;
}

- (id)init;
- (void).cxx_destruct;
- (id).cxx_construct;

@end
