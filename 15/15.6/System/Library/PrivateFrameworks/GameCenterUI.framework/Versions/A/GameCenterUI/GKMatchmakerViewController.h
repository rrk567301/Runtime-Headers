@class NSString, GKPlayerPickerContext, GKMatch, NSObject, GKDispatchGroup, NSMutableArray, GKInvite, GKMatchRequest;
@protocol GKRemoteViewController, GKMatchmakerViewControllerDelegate, OS_dispatch_queue, GKInternalPlayerPickerDelegate;

@interface GKMatchmakerViewController : NSViewController <GKMatchDelegate, GKRemoteViewControllerDelegate, GKDialogControllerSizing, GKViewController>

@property (retain, nonatomic) GKMatchRequest *matchRequest;
@property (retain, nonatomic) GKInvite *acceptedInvite;
@property (retain, nonatomic) GKMatch *match;
@property (retain, nonatomic) id<GKRemoteViewController> remoteViewController;
@property (retain, nonatomic) NSMutableArray *hostedPlayers;
@property (nonatomic) char finished;
@property char didRequestRemoteViewController;
@property char didRequestDismissRemoteViewController;
@property char userCancelledMatching;
@property (nonatomic) char inviterCancelNotificaitonReceived;
@property (readonly) NSObject<OS_dispatch_queue> *cancellingQueue;
@property (readonly) NSObject<OS_dispatch_queue> *invitationQueue;
@property (retain, nonatomic) GKDispatchGroup *invitationGroup;
@property (readonly, weak, nonatomic) id<GKInternalPlayerPickerDelegate> internalPlayerPickerDelegate;
@property (readonly, nonatomic) GKPlayerPickerContext *playerPickerContext;
@property (weak, nonatomic) id<GKMatchmakerViewControllerDelegate> matchmakerDelegate;
@property (nonatomic, getter=isHosted) char hosted;
@property (nonatomic) long long matchmakingMode;
@property (nonatomic) char canStartWithMinimumPlayers;
@property (copy, nonatomic) NSString *defaultInvitationMessage;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (void).cxx_destruct;
- (id)view;
- (void)cancel;
- (void)loadView;
- (void)viewDidDisappear;
- (void)viewDidLoad;
- (void)viewWillAppear;
- (void)finishWithError:(id)a0;
- (id)initialState;
- (void)sendData:(id)a0;
- (void)setupNotifications;
- (void)requestRemoteViewController;
- (void)cancelInviteToPlayer:(id)a0;
- (void)match:(id)a0 didFailWithError:(id)a1;
- (void)match:(id)a0 didReceiveData:(id)a1 fromRemotePlayer:(id)a2;
- (void)match:(id)a0 player:(id)a1 didChangeConnectionState:(long long)a2;
- (id)matchmaker;
- (void)setAutomatchPlayerCount:(long long)a0;
- (void)setConnectingStateForPlayer:(id)a0;
- (void)setShareInvitees:(id)a0;
- (void)finishWithMatch;
- (id)initWithInvite:(id)a0;
- (id)_gkInGameUIUnavailableAlertWithDismissHandler:(id /* block */)a0;
- (char)_gkMatchParentContentSize;
- (struct CGSize { double x0; double x1; })_gkSizeForDialogController;
- (void)activateGroupActivities;
- (void)addPlayersToMatch:(id)a0;
- (void)authenticationChanged:(id)a0;
- (void)cancelMatching;
- (void)createMatchForAcceptedInvite;
- (id)defaultInvitationMessage;
- (void)endGroupActivities;
- (void)finishWithPlayers;
- (void)groupActivityJoiningPlayer:(id)a0 devicePushToken:(id)a1 participantServerIdentifier:(id)a2;
- (void)handleRecipientPropertiesNeededForPlayer:(id)a0 completionHandler:(id /* block */)a1;
- (id)initWithMatchRequest:(id)a0;
- (id)initWithPlayerPickerDelegate:(id)a0 andPlayerPickerContext:(id)a1;
- (void)inviteSharePlayPlayer:(id)a0;
- (void)invitedPlayer:(id)a0 responded:(long long)a1;
- (void)inviterCancelledNotification:(id)a0;
- (void)localPlayerAcceptedGameInvite:(id)a0;
- (void)playersToInvite:(id)a0;
- (void)presentSharePlaySharingController;
- (void)recipientPropertiesNeededForPlayer:(id)a0;
- (id)registerGroupActivitySharingControllerItemProvider:(id)a0;
- (void)reloadOrDismissRemoteViewController;
- (void)remoteViewController:(id)a0 receivedMessageFromService:(id)a1;
- (char)remoteViewControllerRequestingDismiss:(id)a0;
- (void)setBrowsingForNearbyPlayers:(char)a0;
- (void)setDefaultInvitationMessage:(id)a0;
- (void)setFailedToStartMatchingWithError:(id)a0 inviting:(char)a1;
- (void)setHostedPlayer:(id)a0 connected:(char)a1;
- (void)setHostedPlayer:(id)a0 didConnect:(char)a1;
- (void)setHostedPlayerReady:(id)a0;
- (void)setSharePlayEligible:(char)a0;
- (void)shareMatchWithRequest:(id)a0;
- (void)sharePlayEligibilityChanged:(id)a0;
- (void)sharePlaySharingControllerResultSucceeded:(char)a0;
- (void)startMatchingWithRequest:(id)a0 devicePushToken:(id)a1;

@end
