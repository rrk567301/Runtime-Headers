@class CMIStyleEngineCreateLinearSystem, FigMetalTextureDescriptor, NSDictionary, CMIStyleEngineDownScaler, CMIStyleEngineSolveLinearSystem, CMIStyleEngineCoefficientConverterF32ToF16, FigMetalBufferDescriptor, CMIStyleEngineCreateSpotlights, FigMetalContext, CMIStyleEngineCoefficientConverterF16ToF32, NSString, CMIMetalEventSynchronizer, CMIStyleEngineApplyStyle, CMIExternalMemoryResource, CMIStyleEngineConfiguration, CMIStyleEngineIntegrateCoefficients, NSData, CMIStyleEngineCreateWeightPlanes, CMIStyleEngineIdentityCoefficientCreator, CMIMetalResourceCache;
@protocol MTLTexture, MTLBuffer, MTLCommandQueue;

@interface CMIStyleEngineProcessor : NSObject <MetalImageBufferProcessor> {
    CMIMetalEventSynchronizer *_metalSynchronizer;
    struct CGSize { double width; double height; } _imageSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _inputImageRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _optionalInputImageRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _outputImageRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _regionToRender;
    CMIMetalResourceCache *_textureCache;
    struct __CVMetalBufferCache { } *_bufferCache;
    FigMetalContext *_metalContext;
    unsigned long long _memoryAllocationType;
    char _performLearning;
    char _performIntegration;
    char _performApplication;
    char _outputCoefficientsReady;
    FigMetalTextureDescriptor *_textureDescriptor;
    FigMetalBufferDescriptor *_bufferDescriptor;
    CMIStyleEngineDownScaler *_downScale;
    CMIStyleEngineIdentityCoefficientCreator *_identityCoefficientCreator;
    unsigned int _weightPlaneCount;
    float _weightPlaneStandardDeviationForLearn;
    float _weightPlaneStandardDeviationForIntegrate;
    char _weightPlaneApplySpatialFilterForLearn;
    char _weightPlaneApplySpatialFilterForIntegrate;
    float _weightPlaneSpatialFilterWeightForLearn;
    float _weightPlaneSpatialFilterWeightForIntegrate;
    CMIStyleEngineCreateWeightPlanes *_createWeightPlanes;
    void /* unknown type, empty encoding */ _spotlightCount;
    CMIStyleEngineCreateSpotlights *_createSpotlights;
    id<MTLBuffer> _rhsBuffer;
    CMIStyleEngineCreateLinearSystem *_createLinearSystem;
    id<MTLBuffer> _coefficientsBuffer;
    id<MTLBuffer> _linSysStatusBuffer;
    id<MTLBuffer> _linSysStatusFlagBuffer;
    CMIStyleEngineSolveLinearSystem *_solveLinearSystem;
    char _inputCoefficientsF16;
    char _outputCoefficientsF16;
    CMIStyleEngineCoefficientConverterF16ToF32 *_coefficientConverterF16ToF32;
    CMIStyleEngineCoefficientConverterF32ToF16 *_coefficientConverterF32ToF16;
    id<MTLTexture> _integratedCoefficientsTexture;
    CMIStyleEngineIntegrateCoefficients *_integrateCoefficients;
    CMIStyleEngineApplyStyle *_applyStyle;
}

@property (class, readonly, nonatomic) unsigned long long APIVersion;

@property (copy, nonatomic) NSString *label;
@property (retain, nonatomic) NSDictionary *inputNoiseModel;
@property (weak, nonatomic) id<MTLTexture> inputThumbnailTexture;
@property (nonatomic) struct __CVBuffer { } *inputThumbnailPixelBuffer;
@property (weak, nonatomic) id<MTLTexture> inputThumbnailTextureForLearning;
@property (nonatomic) struct __CVBuffer { } *inputThumbnailPixelBufferForLearning;
@property (weak, nonatomic) id<MTLTexture> inputThumbnailTextureForLearningWeights;
@property (nonatomic) struct __CVBuffer { } *inputThumbnailPixelBufferForLearningWeights;
@property (weak, nonatomic) id<MTLTexture> inputThumbnailTextureForIntegration;
@property (nonatomic) struct __CVBuffer { } *inputThumbnailPixelBufferForIntegration;
@property (weak, nonatomic) id<MTLTexture> inputThumbnailTextureForResidualCorrection;
@property (nonatomic) struct __CVBuffer { } *inputThumbnailPixelBufferForResidualCorrection;
@property (weak, nonatomic) id<MTLTexture> inputTexture;
@property (nonatomic) struct __CVBuffer { } *inputPixelBuffer;
@property (weak, nonatomic) id<MTLTexture> outputTexture;
@property (nonatomic) struct __CVBuffer { } *outputPixelBuffer;
@property (weak, nonatomic) id<MTLTexture> inputDeltaMapTexture;
@property (nonatomic) struct __CVBuffer { } *inputDeltaMapPixelBuffer;
@property (weak, nonatomic) id<MTLTexture> inputOriginalTexture;
@property (nonatomic) struct __CVBuffer { } *inputOriginalPixelBuffer;
@property (weak, nonatomic) id<MTLTexture> outputDeltaMapTexture;
@property (nonatomic) struct __CVBuffer { } *outputDeltaMapPixelBuffer;
@property (weak, nonatomic) id<MTLTexture> targetThumbnailTexture;
@property (nonatomic) struct __CVBuffer { } *targetThumbnailPixelBuffer;
@property (weak, nonatomic) id<MTLTexture> targetThumbnailTextureForLearning;
@property (nonatomic) struct __CVBuffer { } *targetThumbnailPixelBufferForLearning;
@property (weak, nonatomic) id<MTLTexture> targetThumbnailTextureForResidualCorrection;
@property (nonatomic) struct __CVBuffer { } *targetThumbnailPixelBufferForResidualCorrection;
@property (weak, nonatomic) id<MTLTexture> inputWeightPlaneTexture;
@property (weak, nonatomic) id<MTLTexture> inputLearningModulationMaskTexture;
@property (retain, nonatomic) NSData *inputLinearSystemCoefficients;
@property (weak, nonatomic) id<MTLBuffer> inputLinearSystemCoefficientsBuffer;
@property (weak, nonatomic) id<MTLTexture> inputLinearSystemCoefficientsTexture;
@property (nonatomic) struct __CVBuffer { } *inputLinearSystemCoefficientsPixelBuffer;
@property (readonly, nonatomic) NSData *outputLinearSystemCoefficients;
@property (weak, nonatomic) id<MTLBuffer> outputLinearSystemCoefficientsBuffer;
@property (weak, nonatomic) id<MTLTexture> outputLinearSystemCoefficientsTexture;
@property (nonatomic) struct __CVBuffer { } *outputLinearSystemCoefficientsPixelBuffer;
@property (readonly, nonatomic) id<MTLTexture> outputIntegratedCoefficients;
@property (readonly, nonatomic) id<MTLBuffer> outputLinearSystemStatusFlag;
@property (weak, nonatomic) id<MTLTexture> outputLumaGradientTexture;
@property (nonatomic) struct __CVBuffer { } *outputLumaGradientPixelBuffer;
@property (retain, nonatomic) CMIStyleEngineConfiguration *configuration;
@property (nonatomic) char residualsCalculationDisabled;
@property (nonatomic) struct CGSize { double width; double height; } imageSize;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputImageRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } outputImageRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputDeltaMapImageRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputOriginalImageRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } regionToRender;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } spotlightIntegrationROI;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } spotlightZoomROI;
@property (nonatomic) struct { void /* unknown type, empty encoding */ columns[3]; } spotlightAffineTransform;
@property (nonatomic) char useLiveMetalAllocations;
@property (nonatomic) char applyDither;
@property (retain, nonatomic) id<MTLCommandQueue> metalCommandQueue;
@property (readonly, nonatomic) char supportsExternalMemoryResource;
@property (retain, nonatomic) CMIExternalMemoryResource *externalMemoryResource;
@property (retain, nonatomic) NSDictionary *tuningParameters;
@property (retain, nonatomic) NSDictionary *cameraInfoByPortType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct CGSize { double x0; double x1; })coefficientPixelBufferSizeForConfiguration:(id)a0 float16:(char)a1;
+ (unsigned long long)coefficientCountForConfiguration:(id)a0;
+ (struct CGSize { double x0; double x1; })coefficientPixelBufferSizeForTotalSize:(unsigned long long)a0 float16:(char)a1;

- (void)dealloc;
- (void).cxx_destruct;
- (int)prewarm;
- (int)finishProcessing;
- (int)process;
- (int)resetState;
- (int)setup;
- (int)prepareToProcess:(unsigned int)a0;
- (int)createIdentityTransformCoefficients:(struct __CVBuffer { } *)a0;
- (id)externalMemoryDescriptorForConfiguration:(id)a0;
- (id)initWithOptionalMetalCommandQueue:(id)a0;
- (int)purgeResources;
- (int)downScaleInputTexture:(id)a0 toOutputTexture:(id)a1;
- (id)_instanceLabel:(id)a0;
- (void)_allocateBuffer:(id *)a0 withDescriptor:(id)a1 useFigMetalAllocator:(char)a2;
- (int)_allocatePermanentResources;
- (void)_allocateTexture:(id *)a0 withDescriptor:(id)a1 useFigMetalAllocator:(char)a2;
- (char)_applyResidualCorrection;
- (struct InternalIOBuffers { id x0; id x1; })_bindAllInternalIOBuffers:(int *)a0;
- (struct InternalIOTextures { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; })_bindAllInternalIOTextures:(int *)a0;
- (int)_bindAllInternalYUVTextures:(struct InternalIOTextures { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; } *)a0;
- (int)_bindPixelBuffer:(struct __CVBuffer { } *)a0 toBuffer:(id *)a1;
- (int)_bindPixelBufferToTexture:(struct __CVBuffer { } *)a0 usage:(unsigned long long)a1 texturePtr:(id *)a2;
- (int)_bindPixelBufferToTexture:(struct __CVBuffer { } *)a0 usage:(unsigned long long)a1 texturePtr:(id *)a2 plane:(unsigned int)a3;
- (int)_bindTexture:(id)a0 toBuffer:(id *)a1;
- (int)_bindYUV420PixelBufferToTextures:(struct __CVBuffer { } *)a0 usage:(unsigned long long)a1 lumaTexturePtr:(id *)a2 chromaTexturePtr:(id *)a3;
- (int)_checkConfigurationForTexture:(struct InternalIOTextures { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; } *)a0 buffers:(struct InternalIOBuffers { id x0; id x1; } *)a1;
- (int)_checkIOTexturePair:(struct InternalIOTextures { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; } *)a0;
- (int)_checkIntegrationThumbnailTexture:(struct InternalIOTextures { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; } *)a0;
- (int)_checkLearningThumbnailTexturePair:(struct InternalIOTextures { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; } *)a0;
- (int)_checkLearningWeightThumbnailTexture:(struct InternalIOTextures { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; } *)a0;
- (int)_checkROISpecification:(struct InternalIOTextures { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; } *)a0;
- (int)_checkResidualCorrectionThumbnailTexturePair:(struct InternalIOTextures { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; id x14; id x15; id x16; id x17; id x18; id x19; id x20; id x21; } *)a0;
- (int)_createMetalStages;
- (void)_freePermanentResources;
- (unsigned int)_independentPlusSpatialAverageLinearSystemCount;
- (unsigned int)_linearSystemCount;
- (unsigned int)_linearSystemNumberOfExpansionTerms;
- (unsigned int)_linearSystemNumberOfPolynomials;
- (unsigned int)_linearSystemSize;
- (unsigned long long)_requiredMetalHeapMemory:(unsigned int)a0;
- (int)_setTuningParameters;
- (unsigned int)_spatialAverageLinearSystemCount;
- (int)downScaleInputPixelBuffer:(struct __CVBuffer { } *)a0 toOutputPixelBuffer:(struct __CVBuffer { } *)a1;
- (int)downScaleInputPixelBuffer:(struct __CVBuffer { } *)a0 toOutputPixelBuffer:(struct __CVBuffer { } *)a1 copyAttachments:(char)a2;
- (int)downScaleInputPixelBuffer:(struct __CVBuffer { } *)a0 toOutputPixelBuffer:(struct __CVBuffer { } *)a1 copyAttachments:(char)a2 gdcParams:(const struct { float x0; float x1; float x2[8]; float x3[8]; float x4; } *)a3;
- (int)downScaleInputPixelBuffer:(struct __CVBuffer { } *)a0 withInputCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 toOutputPixelBuffer:(struct __CVBuffer { } *)a2 copyAttachments:(char)a3;
- (int)downScaleInputPixelBuffer:(struct __CVBuffer { } *)a0 withInputCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 usingBoxSize:(struct CGSize { double x0; double x1; })a2 toOutputPixelBuffer:(struct __CVBuffer { } *)a3 copyAttachments:(char)a4;
- (int)downScaleInputPixelBuffer:(struct __CVBuffer { } *)a0 withInputCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 usingBoxSize:(struct CGSize { double x0; double x1; })a2 toOutputPixelBuffer:(struct __CVBuffer { } *)a3 filter:(unsigned long long)a4 copyAttachments:(char)a5 gdcParams:(const struct { float x0; float x1; float x2[8]; float x3[8]; float x4; } *)a6;
- (int)downScaleInputTexture:(id)a0 withInputCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 toOutputTexture:(id)a2;
- (int)downScaleInputTexture:(id)a0 withInputCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 usingBoxSize:(struct CGSize { double x0; double x1; })a2 toOutputTexture:(id)a3;
- (int)downScaleInputTexture:(id)a0 withInputCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 usingBoxSize:(struct CGSize { double x0; double x1; })a2 toOutputTexture:(id)a3 filter:(unsigned long long)a4 gdcParams:(const struct { float x0; float x1; float x2[8]; float x3[8]; float x4; } *)a5;
- (void)forceMetalCachesFlush;
- (id)initWithOptionalMetalCommandQueue:(id)a0 withCoefficientSynchronization:(char)a1;

@end
