@class NSDictionary, MPCDeferrableTask, ICMusicSubscriptionLeaseStatus, ICAVAssetDownloadURLSession, MPCModelGenericAVItemTimedMetadataResponse, MPCPlaybackRequestEnvironment, ICStoreRequestContext, NSString, ICUserIdentity, ICMusicSubscriptionLeaseSession, ICURLRequest, MPGaplessInfo, MPCPlayerAudioFormat, MPCModelGenericAVItemTimedMetadataRequest, MPCAudioAssetTypeSelection, MPPropertySet, NSArray, MPModelGenericObject, MPMediaLibrary, NSObject, MPCSuzeLeaseSession, NSData, NSOperationQueue, MPCPlayerAudioRoute, MPCPlaybackEngineEventStream, ICContentKeySession, MPCAudioAssetTypeSelector, MPSubscriptionStatusPlaybackInformation, NSURL, NSNumber, MPCModelGenericAVItemUserIdentityPropertySet;
@protocol OS_dispatch_queue, MPCReportingIdentityPropertiesLoading, MPCModelPlaybackAssetCacheProviding;

@interface MPCModelGenericAVItem : MPAVItem <AVAssetResourceLoaderDelegate, AVPlayerItemMetadataOutputPushDelegate, ICEnvironmentMonitorObserver, ICContentKeySessionDelegateProtocol, MPCPlaybackEngineInfoProvider> {
    NSObject<OS_dispatch_queue> *_accessQueue;
    char _allowsAirPlayFromCloud;
    char _hasLoadedSubscriptionLeaseSession;
    NSObject<OS_dispatch_queue> *_subscriptionLeaseSessionLoadQueue;
    ICMusicSubscriptionLeaseSession *_subscriptionLeaseSession;
    char _hasLoadedSubscriptionPlaybackInformation;
    MPSubscriptionStatusPlaybackInformation *_subscriptionPlaybackInformation;
    NSObject<OS_dispatch_queue> *_subscriptionPlaybackInformationLoadQueue;
    char _shouldAutomaticallyRefreshSubscriptionLease;
    char _isSubscriptionPolicyContent;
    char _lastPreparedForNonZeroRate;
    long long _subscriptionLeaseRequestCount;
    char _didDeferPreventionStatusUpdate;
    MPCSuzeLeaseSession *_suzeLeaseSession;
    char _isAutomaticallyRefreshingSuzeLeaseSession;
    id /* block */ _firstBecomeActivePlayerItemBlock;
    NSArray *_currentGlobalTimedMetadataGroups;
    MPModelGenericObject *_flattenedGenericObject;
    MPModelGenericObject *_flattenedMetadataGenericObject;
    MPModelGenericObject *_metadataGenericObject;
    MPPropertySet *_itemProperties;
    id<MPCReportingIdentityPropertiesLoading> _identityPropertiesLoader;
    MPCModelGenericAVItemTimedMetadataRequest *_timedMetadataRequest;
    MPCModelGenericAVItemTimedMetadataResponse *_timedMetadataResponse;
    NSOperationQueue *_timedMetadataOperationQueue;
    char _isMusicCellularStreamingAllowed;
    char _didReceiveHLSTimedMetadata;
    NSString *_hlsStreamIdentifier;
    char _isiTunesStoreStream;
    ICStoreRequestContext *__storeRequestContext;
    NSURL *_streamingKeyCertificateURL;
    NSURL *_streamingKeyServerURL;
    NSString *_rtcReportingServiceIdentifier;
    MPCModelGenericAVItemUserIdentityPropertySet *_identityPropertySet;
    ICContentKeySession *_contentKeySession;
    ICAVAssetDownloadURLSession *_hlsDownloadURLSession;
    ICURLRequest *_hlsDownloadURLRequest;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _genericObjectLock;
    char _didSetupContentTasteObservation;
    NSURL *_tempFileURLToCleanup;
    MPCDeferrableTask *_deferredLeaseAcquisitionTask;
    MPCDeferrableTask *_deferredHLSDownloadTask;
    long long _leasePlaybackPreventionState;
    ICMusicSubscriptionLeaseStatus *_leaseStatus;
}

@property (copy, nonatomic) NSDictionary *audioFormatsDictionary;
@property (retain, nonatomic) NSArray *availableSortedFormats;
@property (retain, nonatomic) id<MPCModelPlaybackAssetCacheProviding> assetCacheProvider;
@property (nonatomic) long long equivalencySourceAdamID;
@property (retain, nonatomic) MPModelGenericObject *genericObject;
@property (readonly, copy, nonatomic) NSData *jingleTimedMetadata;
@property (retain, nonatomic) MPMediaLibrary *mediaLibrary;
@property (copy, nonatomic, getter=isSiriInitiated) NSNumber *siriInitiated;
@property (nonatomic, getter=isRadioPlayback) char radioPlayback;
@property (nonatomic, getter=isRadioStreamPlayback) char radioStreamPlayback;
@property (nonatomic, getter=isSubscriptionRequired) char subscriptionRequired;
@property (readonly, nonatomic) char hasVideo;
@property (readonly, nonatomic) char shouldReportPlayEventsToStore;
@property (readonly, copy, nonatomic) MPCPlaybackRequestEnvironment *playbackRequestEnvironment;
@property (nonatomic) long long stationItemLikedState;
@property (retain, nonatomic) NSDictionary *trackInfo;
@property (readonly, nonatomic) NSData *trackInfoData;
@property (readonly, nonatomic) MPGaplessInfo *gaplessInfo;
@property (copy, nonatomic) NSString *playerID;
@property (weak, nonatomic) MPCPlaybackEngineEventStream *eventStream;
@property (retain, nonatomic) MPCPlayerAudioFormat *preferredFormat;
@property (retain, nonatomic) MPCPlayerAudioFormat *activeFormat;
@property (nonatomic) long long activeFormatJustification;
@property (retain, nonatomic) NSArray *alternateFormats;
@property (retain, nonatomic) MPCPlayerAudioRoute *audioRoute;
@property (copy, nonatomic) NSString *previousQueueItemID;
@property (retain, nonatomic) MPCAudioAssetTypeSelector *audioAssetTypeSelector;
@property (readonly, nonatomic) long long preferredAudioAssetType;
@property (readonly, nonatomic) MPCAudioAssetTypeSelection *preferredAudioAssetTypeSelection;
@property (readonly, nonatomic) long long loadedAudioAssetType;
@property (readonly, nonatomic, getter=isHLSAsset) char hlsAsset;
@property (readonly, nonatomic, getter=isDownloadedAsset) char downloadedAsset;
@property (nonatomic) char prioritizeStartupOverQuality;
@property (readonly, nonatomic) ICUserIdentity *playbackRequestUserIdentity;
@property (retain, nonatomic) NSArray *chapters;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSString *playbackEngineID;

+ (id)_downloadCompletionPendingItems;
+ (char)_prefersHighQualityAudioContentForNetworkType:(long long)a0;
+ (char)_prefersHighQualityVideoContentForNetworkType:(long long)a0;
+ (long long)_unwrapPlaybackError:(id)a0;
+ (id)_utilitySerialQueue;
+ (char)automaticallyNotifiesObserversOfChapters;

- (void)dealloc;
- (void).cxx_destruct;
- (long long)type;
- (id)genre;
- (unsigned long long)persistentID;
- (unsigned long long)cloudID;
- (id)album;
- (id)artist;
- (unsigned long long)mediaType;
- (id)databaseID;
- (unsigned long long)albumPersistentID;
- (id)composer;
- (char)isStreamable;
- (void)setRating:(float)a0;
- (id)personID;
- (long long)stationID;
- (char)allowsExternalPlayback;
- (void)metadataOutput:(id)a0 didOutputTimedMetadataGroups:(id)a1 fromPlayerItemTrack:(id)a2;
- (char)resourceLoader:(id)a0 shouldWaitForLoadingOfRequestedResource:(id)a1;
- (char)resourceLoader:(id)a0 shouldWaitForRenewalOfRequestedResource:(id)a1;
- (id)mediaItem;
- (id)playbackInfo;
- (id)albumArtist;
- (id)stationName;
- (float)userRating;
- (char)isExplicitTrack;
- (long long)reportingAdamID;
- (long long)albumYear;
- (char)isAlwaysLive;
- (long long)lyricsAdamID;
- (id)mainTitle;
- (id)storeFrontIdentifier;
- (unsigned long long)albumTrackCount;
- (char)isValidPlayerSubstituteForItem:(id)a0;
- (id)stationStringID;
- (char)usesBookmarking;
- (void)_applyLoudnessInfo;
- (void)_currentPlaybackRateDidChange:(float)a0;
- (void)_didBecomeActivePlayerItem;
- (void)_didResignActivePlayerItem;
- (void)_handleUpdatedLikedState:(long long)a0 forUserIdentity:(id)a1 completion:(id /* block */)a2;
- (long long)_persistedLikedState;
- (void)_updateAudioFormatInfoForContentItem:(id)a0;
- (void)_updateContentItemIncludingPlaybackState:(char)a0;
- (void)_willBecomeActivePlayerItem;
- (void)_willResignActivePlayerItem;
- (unsigned long long)albumArtistPersistentID;
- (long long)albumStoreID;
- (unsigned long long)albumTrackNumber;
- (char)allowsAirPlayFromCloud;
- (char)allowsEQ;
- (id)analyticsContentType;
- (id)analyticsFormatType;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(char)a0;
- (unsigned long long)artistPersistentID;
- (long long)artistStoreID;
- (id /* block */)artworkCatalogBlock;
- (id)artworkTimeMarkers;
- (id)bookmarkTime;
- (char)canUseLoadedAsset;
- (id)chapterTimeMarkers;
- (id)cloudAlbumID;
- (id)cloudUniversalLibraryID;
- (unsigned long long)composerPersistentID;
- (id)containerUniqueID;
- (id)copyrightText;
- (double)durationFromExternalMetadata;
- (void)environmentMonitorDidChangeNetworkType:(id)a0;
- (id)explicitBadge;
- (id)externalContentIdentifier;
- (unsigned long long)genrePersistentID;
- (char)hasStoreLyrics;
- (char)hasTimeSyncedLyrics;
- (char)isArtistUploadedContent;
- (char)isLikedStateEnabled;
- (char)isRadioItem;
- (long long)leasePlaybackPreventionState;
- (id)leaseStatus;
- (id)libraryLyrics;
- (void)loadAssetAndPlayerItemWithTask:(id)a0 completion:(id /* block */)a1;
- (id)modelGenericObject;
- (void)notePlaybackFinishedByHittingEnd;
- (void)nowPlayingInfoCenter:(id)a0 lyricsForContentItem:(id)a1 completion:(id /* block */)a2;
- (void)pauseContentKeySession;
- (id)playbackError;
- (long long)playbackMode;
- (char)prefersSeekOverSkip;
- (void)prepareForRate:(float)a0 completionHandler:(id /* block */)a1;
- (void)reevaluateType;
- (char)requiresLoadedAssetForAirPlayProperties;
- (void)resolvePlaybackError:(id)a0 withCompletion:(id /* block */)a1;
- (void)resumeContentKeySession;
- (id)rtcReportingServiceIdentifier;
- (void)setupWithPlaybackInfo;
- (char)shouldPreventPlayback;
- (char)shouldShowComposer;
- (id)stationHash;
- (long long)stationProviderID;
- (id)storeAccountID;
- (long long)storeAlbumArtistID;
- (long long)storeItemInt64ID;
- (long long)storePurchasedAdamID;
- (long long)storeSubscriptionAdamID;
- (char)supportsLikedState;
- (char)supportsRating;
- (char)supportsVocalAttenuation;
- (void)updatePlayerItemMetadata;
- (id)urlTimeMarkers;
- (char)useEmbeddedChapterData;
- (char)usesSubscriptionLease;
- (id)_storeRequestContext;
- (void)contentKeySession:(id)a0 didFinishProcessingKey:(id)a1 withResponse:(id)a2 error:(id)a3;
- (double)_startTime;
- (id)_chapterDataAt:(double)a0;
- (char)_removeLocalAssetFileIfPossible;
- (void)_addToDownloadCompletionPendingItems;
- (void)_ageVerificationStateDidChangeNotification:(id)a0;
- (void)_allowsHighQualityMusicStreamingOnCellularDidChangeNotification:(id)a0;
- (char)_allowsStreamingPlayback;
- (void)_applyPreferredPeakBitRateToPlayerItem:(id)a0 withItemType:(long long)a1;
- (id)_assetLoadPropertiesWithUserIdentityProperties:(id)a0 delegatedUserIdentityProperties:(id)a1 subscriptionPlaybackInfo:(id)a2;
- (unsigned long long)_audioFormatPreference;
- (id)_bookmarkTime;
- (void)_checkDownloadErrorAndValidityOfDownloadedHLSAsset:(id)a0 downloadLocationURL:(id)a1 completion:(id /* block */)a2;
- (void)_contentTasteControllerDidChangeNotification:(id)a0;
- (id)_createOrUpdateDatabaseEntry:(id)a0 loadResult:(id)a1 urlBag:(id)a2 destinationURL:(id)a3 purgeable:(char)a4;
- (id)_decorateAssetLoadResult:(id)a0 withURLBag:(id)a1;
- (id)_delegatedUserIdentityProperties:(id *)a0;
- (void)_downloadHLSAsset:(id)a0 destinationURL:(id)a1 sharedCacheURL:(id)a2 assetLoadProperties:(id)a3 loadResult:(id)a4 storeRequestContext:(id)a5 urlBag:(id)a6 fileUpgradeRecommendation:(long long)a7;
- (void)_downloadHLSAssetWhilePlaying:(id)a0 assetLoadProperties:(id)a1 assetLoadResult:(id)a2 destinationURL:(id)a3 sharedCacheURL:(id)a4 storeRequestContext:(id)a5 urlBag:(id)a6 fileUpgradeRecommendation:(long long)a7;
- (void)_emitAudioAssetTypeSelection:(id)a0 assetLoadInfo:(id)a1;
- (void)_emitAudioFormatChangeEvent;
- (void)_emitNetworkOperationWithPerformanceMetrics:(id)a0 operationType:(long long)a1 reason:(id)a2 blocksPlayback:(char)a3;
- (void)_getHLSServerDataForLoadResults:(id)a0 bag:(id)a1 keyCertificateURL:(id *)a2 keyServerURL:(id *)a3 keyServerAdamID:(id *)a4 keyServerProtocolType:(long long *)a5;
- (void)_getSubscriptionLeasePropertiesWithCompletion:(id /* block */)a0;
- (void)_getSubscriptionStatusWithStoreRequestContext:(id)a0 completion:(id /* block */)a1;
- (void)_getUnverifiedSubscriptionLeaseSessionWithCompletion:(id /* block */)a0;
- (id)_hlsDownloadOptionsDictionary:(id)a0;
- (id)_iTunesStorePurchasedMediaKind;
- (void)_invalidateContentItemForTimedMetadataChangesChangingRevisionID:(char)a0;
- (char)_isAssetLoadResultValidForPlayback:(id)a0 error:(id *)a1;
- (long long)_keyServerAdamID;
- (char)_linkAssetIfNeededAtURL:(id)a0 toDestinationURL:(id)a1 shareCacheURL:(id)a2;
- (id)_loudnessInfoMediaKind;
- (id)_modelPlaybackPosition;
- (void)_postInvalidationNotifications;
- (char)_prefersHighQualityContent;
- (void)_prepareAssetForHLSPlayback:(id)a0 loadResult:(id)a1 destinationURL:(id)a2 storeRequestContext:(id)a3 urlBag:(id)a4 identityProperties:(id)a5 isStoreKeyServer:(char)a6;
- (void)_prepareLeaseWithShouldRequireLeaseAcquisition:(char)a0 completionHandler:(id /* block */)a1;
- (id)_radioStation;
- (void)_reloadTimedMetadataRequest;
- (void)_removeFromDownloadCompletionPendingItems;
- (id)_rtcReportingMediaIdentifierWithAssetLoadProperties:(id)a0;
- (id)_rtcReportingServiceIdentifierWithAssetURL:(id)a0;
- (id)_stopTime;
- (id)_storeUbiquitousIdentifier;
- (void)_subscriptionLeaseStatusDidChangeNotification:(id)a0;
- (long long)_suzeLeaseMediaType;
- (void)_suzeLeaseSessionRenewDidFailNotification:(id)a0;
- (void)_timedMetadataResponseDidInvalidateNotification:(id)a0;
- (struct { long long x0; long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; long long x7; long long x8; })_timeoutValues;
- (void)_updateActiveFormatJustification:(long long)a0;
- (void)_updateAutomaticSubscriptionLeaseRefresh;
- (void)_updateJingleTimedMetadata;
- (void)_updatePreventionStatusWithLeaseSession:(id)a0;
- (float)_volumeAdjustment;
- (id)audioFormatForStableVariantID:(id)a0;
- (id)chapterAt:(double)a0;
- (void)configureAVPlayerItemWithAudioFormat:(id)a0 forceSpatial:(char)a1;
- (id)initWithGenericObject:(id)a0 itemProperties:(id)a1 playbackRequestEnvironment:(id)a2 identityPropertySet:(id)a3;
- (id)nextChapterAfter:(double)a0;
- (long long)playerItemType;
- (id)previousChapterBefore:(double)a0;
- (void)resetPlaybackStartTimeForReuse;
- (char)updateActiveFormat:(id)a0 justification:(long long)a1;
- (char)updateAudioFormatsDictionary:(id)a0;
- (char)updatePreferredFormat:(id)a0;

@end
