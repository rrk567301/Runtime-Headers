@interface AMSCB1PHTTPError : NSError {
    struct optional<AMSCore::HTTPError> { union { char __null_state_; struct HTTPError { void /* function */ **_vptr$exception; struct __libcpp_refstring { char *__imp_; } __imp_; struct error_code { int __val_; struct error_category *__cat_; } __ec_; struct map<std::string, AMSCore::Any, std::less<void>, std::allocator<std::pair<const std::string, AMSCore::Any>>> { struct __tree<std::__value_type<std::string, AMSCore::Any>, std::__map_value_compare<std::string, std::__value_type<std::string, AMSCore::Any>, std::less<void>>, std::allocator<std::__value_type<std::string, AMSCore::Any>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, AMSCore::Any>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, AMSCore::Any>, std::less<void>>> { unsigned long long __value_; } __pair3_; } __tree_; } mUserInfo; struct shared_ptr<AMSCore::Error> { struct Error *__ptr_; struct __shared_weak_count *__cntrl_; } mCause; struct HTTPTransactionMetrics { struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } cellularDataBearerTechnology; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } connectionStartTime; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } connectionEndTime; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } secureConnectionStartTime; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } secureConnectionEndTime; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } domainLookupStartTime; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } domainLookupEndTime; struct vector<std::string, std::allocator<std::string>> { void *__begin_; void *__end_; struct __compressed_pair<std::string *, std::allocator<std::string>> { void *__value_; } __end_cap_; } formattedDNSAddresses; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } fetchStartTime; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } requestStartTime; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } requestEndTime; struct optional<unsigned long long> { union { char __null_state_; unsigned long long __val_; } ; BOOL __engaged_; } requestMessageSize; struct optional<unsigned long long> { union { char __null_state_; unsigned long long __val_; } ; BOOL __engaged_; } compressedResponseMessageSize; struct optional<unsigned long long> { union { char __null_state_; unsigned long long __val_; } ; BOOL __engaged_; } uncompressedResponseMessageSize; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } responseStartTime; struct optional<std::chrono::time_point<std::chrono::system_clock>> { union { char __null_state_; struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __val_; } ; BOOL __engaged_; } responseEndTime; struct optional<bool> { union { char __null_state_; BOOL __val_; } ; BOOL __engaged_; } responseLoadedFromCache; struct optional<bool> { union { char __null_state_; BOOL __val_; } ; BOOL __engaged_; } connectionReused; struct optional<unsigned long long> { union { char __null_state_; unsigned long long __val_; } ; BOOL __engaged_; } redirectCount; struct optional<bool> { union { char __null_state_; BOOL __val_; } ; BOOL __engaged_; } isTCPFastOpenEnabled; struct optional<bool> { union { char __null_state_; BOOL __val_; } ; BOOL __engaged_; } isConstrained; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } resolvedIPAddress; } mMetrics; } __val_; } ; BOOL __engaged_; } _error;
    struct optional<AMSCore::URL> { union { char __null_state_; struct URL { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } mScheme; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } mHost; struct optional<unsigned short> { union { char __null_state_; unsigned short __val_; } ; BOOL __engaged_; } mPort; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } mPath; struct OrderedMap<std::string, std::string> { struct __list_node_base<std::pair<std::string, std::string>, void *> { void *__prev_; void *__next_; } __end_; struct __compressed_pair<unsigned long, std::allocator<std::__list_node<std::pair<std::string, std::string>, void *>>> { unsigned long long __value_; } __size_alloc_; } mQueryParameters; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } mFragment; } __val_; } ; BOOL __engaged_; } _URL;
}

- (void).cxx_destruct;
- (id).cxx_construct;

@end
