@interface AMSCB1PHTTPRequest : NSObject {
    struct optional<AMSCore::EncodeHTTPRequestTask::Result> { union { char __null_state_; struct Result { struct Options { struct shared_ptr<AMSCore::IMediaAccount> { struct IMediaAccount *__ptr_; struct __shared_weak_count *__cntrl_; } mAccount; BOOL mAlwaysAddCacheBuster; BOOL mAlwaysSendDeviceGUID; unsigned char mAnisetteType; struct shared_ptr<AMSCore::IBag> { struct IBag *__ptr_; struct __shared_weak_count *__cntrl_; } mBag; struct shared_ptr<const AMSCore::IBundleInfo> { struct IBundleInfo *__ptr_; struct __shared_weak_count *__cntrl_; } mBundleInfo; struct Any { struct variant<std::monostate, bool, double, long long, unsigned long long, std::string, AMSCore::DataBuffer, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { struct __impl<std::monostate, bool, double, long long, unsigned long long, std::string, AMSCore::DataBuffer, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { union __union<std::__variant_detail::_Trait::_Available, 0UL, std::monostate, bool, double, long long, unsigned long long, std::string, AMSCore::DataBuffer, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { char __dummy; struct __alt<0UL, std::monostate> { struct monostate { } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 1UL, bool, double, long long, unsigned long long, std::string, AMSCore::DataBuffer, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { char __dummy; struct __alt<1UL, bool> { BOOL __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 2UL, double, long long, unsigned long long, std::string, AMSCore::DataBuffer, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { char __dummy; struct __alt<2UL, double> { double __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 3UL, long long, unsigned long long, std::string, AMSCore::DataBuffer, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { char __dummy; struct __alt<3UL, long long> { long long __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 4UL, unsigned long long, std::string, AMSCore::DataBuffer, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { char __dummy; struct __alt<4UL, unsigned long long> { unsigned long long __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 5UL, std::string, AMSCore::DataBuffer, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { char __dummy; struct __alt<5UL, std::string> { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 6UL, AMSCore::DataBuffer, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { char __dummy; struct __alt<6UL, AMSCore::DataBuffer> { struct DataBuffer { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 7UL, std::chrono::time_point<std::chrono::system_clock>, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { char __dummy; struct __alt<7UL, std::chrono::time_point<std::chrono::system_clock>> { struct time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000>>> { struct duration<long long, std::ratio<1, 1000000>> { long long __rep_; } __d_; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 8UL, std::map<std::string, AMSCore::Any, std::less<void>>, std::vector<AMSCore::Any>> { char __dummy; struct __alt<8UL, std::map<std::string, AMSCore::Any, std::less<void>>> { struct map<std::string, AMSCore::Any, std::less<void>, std::allocator<std::pair<const std::string, AMSCore::Any>>> { struct __tree<std::__value_type<std::string, AMSCore::Any>, std::__map_value_compare<std::string, std::__value_type<std::string, AMSCore::Any>, std::less<void>>, std::allocator<std::__value_type<std::string, AMSCore::Any>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, AMSCore::Any>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, AMSCore::Any>, std::less<void>>> { unsigned long long __value_; } __pair3_; } __tree_; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 9UL, std::vector<AMSCore::Any>> { char __dummy; struct __alt<9UL, std::vector<AMSCore::Any>> { struct vector<AMSCore::Any, std::allocator<AMSCore::Any>> { struct Any *__begin_; struct Any *__end_; struct __compressed_pair<AMSCore::Any *, std::allocator<AMSCore::Any>> { struct Any *__value_; } __end_cap_; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 10UL> { } __tail; } __tail; } __tail; } __tail; } __tail; } __tail; } __tail; } __tail; } __tail; } __tail; } __data; unsigned int __index; } __impl_; } mAny; } mBody; unsigned char mBodyContentType; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } mCachePolicyHeader; struct IHTTPHeaderMap { struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, AMSCore::StringUtils::CaseInsensitiveHash, AMSCore::StringUtils::CaseInsensitiveEqualTo>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, AMSCore::StringUtils::CaseInsensitiveEqualTo, AMSCore::StringUtils::CaseInsensitiveHash>, std::allocator<std::__hash_value_type<std::string, std::string>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, AMSCore::StringUtils::CaseInsensitiveHash, AMSCore::StringUtils::CaseInsensitiveEqualTo>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, AMSCore::StringUtils::CaseInsensitiveEqualTo, AMSCore::StringUtils::CaseInsensitiveHash>> { float __value_; } __p3_; } __table_; } mHTTPHeaders; BOOL mIgnoreFairPlay; unsigned char mMescalType; struct optional<std::map<std::string, AMSCore::Any, std::less<void>>> { union { char __null_state_; struct map<std::string, AMSCore::Any, std::less<void>, std::allocator<std::pair<const std::string, AMSCore::Any>>> { struct __tree<std::__value_type<std::string, AMSCore::Any>, std::__map_value_compare<std::string, std::__value_type<std::string, AMSCore::Any>, std::less<void>>, std::allocator<std::__value_type<std::string, AMSCore::Any>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, AMSCore::Any>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, AMSCore::Any>, std::less<void>>> { unsigned long long __value_; } __pair3_; } __tree_; } __val_; } ; BOOL __engaged_; } mFPDIInfo; int mMethod; struct URL { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } mScheme; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } mHost; struct optional<unsigned short> { union { char __null_state_; unsigned short __val_; } ; BOOL __engaged_; } mPort; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } mPath; struct OrderedMap<std::string, std::string> { struct __list_node_base<std::pair<std::string, std::string>, void *> { void *__prev_; void *__next_; } __end_; struct __compressed_pair<unsigned long, std::allocator<std::__list_node<std::pair<std::string, std::string>, void *>>> { unsigned long long __value_; } __size_alloc_; } mQueryParameters; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } mFragment; } mURL; BOOL mUseOnlyCacheData; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char __is_long_ : 1; unsigned char __size_ : 7; } ; char __padding_[0]; char __data_[23]; } __s; struct __long { struct { unsigned char __is_long_ : 1; unsigned long __cap_ : 63; } ; unsigned long long __size_; char *__data_; } __l; } __value_; } __r_; } __val_; } ; BOOL __engaged_; } mUserAgentSuffix; } mOptions; struct shared_ptr<AMSCore::HTTPRequest> { struct HTTPRequest *__ptr_; struct __shared_weak_count *__cntrl_; } mRequest; } __val_; } ; BOOL __engaged_; } _encodeRequestResult;
}

- (void).cxx_destruct;
- (id).cxx_construct;

@end
