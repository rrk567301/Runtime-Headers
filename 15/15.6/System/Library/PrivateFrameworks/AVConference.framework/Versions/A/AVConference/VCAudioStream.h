@class VCMediaRecorder, VCAudioTransmitter, VCTelephonyInterface, VCAudioIO, NSObject, VCAudioHALPluginRemoteDeviceInfo, NSMutableArray, VCAudioPowerSpectrumSource, NSString, DTMFEventHandler, AVCStatisticsCollector, VCAudioCaptionsCoordinator, NSNumber, WRMClient, VCAudioPayload;
@protocol VCMomentsCollectorDelegate, OS_dispatch_source, VCMediaStreamDelegate, OS_dispatch_semaphore;

@interface VCAudioStream : VCMediaStream <VCTelephonyInterfaceDelegate, VCMediaStreamRateAdaptationDelegate, VCMediaStreamSyncSource, VCAudioIOSource, VCAudioIOSink, VCAudioIODelegate> {
    int _clientPid;
    int numBufferBytesAvailable;
    NSObject<OS_dispatch_source> *pausedAudioHeartBeat;
    double dAudioHostTime;
    char lastVoiceActive;
    double _remoteMediaStallTimeout;
    unsigned int lastInputAudioTimeStamp;
    unsigned int lastSentAudioSampleTime;
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } stateLock;
    NSMutableArray *audioPayloads;
    struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } format; unsigned int samplesPerFrame; } _vpioFormat;
    char _useExternalIO;
    int preferredAudioCodec;
    DTMFEventHandler *dtmfEventHandler;
    WRMClient *wrmClient;
    VCAudioPayload *currentAudioPayload;
    VCAudioPayload *currentDTXPayload;
    int _reportingModuleID;
    VCTelephonyInterface *_telephonyInterface;
    unsigned int *_reportingSSRCList;
    unsigned int _reportingSSRCCount;
    char _sendActiveVoiceOnly;
    char _rtpEnabledBeforeInterrupt;
    char _rtcpEnabledBeforeInterrupt;
    unsigned int _pullAudioSamplesCount;
    struct _VCAudioStreamSinkContext { struct _METER_INFO { char frequencyMeteringEnabled; struct opaqueVCFFTMeter *fftMeter; } soundMeter; } _sinkContext;
    struct _VCAudioStreamSourceContext { BOOL isRemoteMuted; struct _METER_INFO { char frequencyMeteringEnabled; struct opaqueVCFFTMeter *fftMeter; } soundMeter; struct tagVCAudioReceiver *audioReceiver; unsigned int framesProcessed; float volume; BOOL shouldPostProcessSamples; BOOL isSendOnly; BOOL isRemoteMediaStalled; double lastReceivedAudioTimestamp; int packetsSinceStallCount; double remoteMediaStallTimeout; unsigned int awdTimeReceiver; unsigned char stallReportCount; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry *head; BOOL initialized; void /* function */ *compare; unsigned long long countEntries; } transports; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry *head; BOOL initialized; void /* function */ *compare; unsigned long long countEntries; } syncDelegateList; unsigned short oneToOneStreamID; AVCStatisticsCollector *oneToOneStatisticsCollector; BOOL isMultiwayConfig; unsigned int targetBitrate; id<VCMediaStreamDelegate> delegate; struct tagVCMediaStreamDelegateRealtimeInstanceVTable { void /* function */ *updateFrequencyLevel; } delegateFunctions; VCAudioStream *self; id<VCMomentsCollectorDelegate> momentsCollectorDelegate; struct tagWRMMetricsInfo *wrmInfo; struct tagHANDLE *defaultRtpHandle; } _sourceContext;
    VCAudioPowerSpectrumSource *_audioPowerSpectrumSourceUplink;
    VCAudioPowerSpectrumSource *_audioPowerSpectrumSourceDownlink;
    unsigned int _abnormalOWRDCount;
    double _lastAbnormalOWRDVerificationTime;
    double _lastNetworkHealthPrintTime;
    double _packetLossRateAccum;
    int _packetLossRateCount;
    double _packetLossRate5Secs;
    double _timeLastPLR5Secs;
    char _anbrEnabled;
    char _anbrActive;
    char _basebandThermalMitigationsEnabled;
    struct _VCAudioCodecModeChangeEvent { int payload; int codecRateMode; int codecBandwidth; unsigned int codecBitrate; struct EVSRFParams { unsigned int offset; unsigned int indicator; } RFParams; } _lastCodecModeChangeEvent;
    char _cmrBitrateActive;
    struct tagVCNWConnectionNotification { unsigned char version; unsigned char direction; unsigned char interfaceType; union { int basebandAdvisoryType; int wifiAdvisoryType; } ; union { struct ifnet_interface_advisory { union { struct { unsigned char version; unsigned char direction; unsigned short _reserved; int rate_trend_suggestion; unsigned long long timestamp; unsigned long long max_bandwidth; unsigned long long total_byte_count; unsigned long long average_throughput; unsigned int flushable_queue_size; unsigned int non_flushable_queue_size; unsigned int average_delay; unsigned char frequency_band; unsigned char intermittent_state; unsigned short estimated_intermittent_period; unsigned short single_outage_period; unsigned char bt_coex; unsigned char quality_score_delay; unsigned char quality_score_loss; unsigned char quality_score_channel; } ; struct { struct ifnet_interface_advisory_header { unsigned char version; unsigned char direction; unsigned char interface_type; union { unsigned char cell; unsigned char wifi; } notification_type; } header; struct ifnet_interface_advisory_capacity { int rate_trend_suggestion; unsigned long long timestamp; unsigned long long max_bandwidth; unsigned long long total_byte_count; unsigned long long average_throughput; unsigned int flushable_queue_size; unsigned int non_flushable_queue_size; unsigned int average_delay; } capacity; union { struct ifnet_interface_advisory_wifi_context { unsigned char frequency_band; unsigned char intermittent_state; unsigned short estimated_intermittent_period; unsigned short single_outage_period; unsigned char bt_coex; unsigned char quality_score_delay; unsigned char quality_score_loss; unsigned char quality_score_channel; unsigned char radio_coex; unsigned short wlan_duty_cycle; unsigned int wifi_observed_tx_bitrate[6]; } wifi_context; struct ifnet_interface_advisory_cell_context { unsigned char radio_access_technology; short reference_signal_level; short signal_level; char signal_quality; unsigned char uplink_bler; unsigned char downlink_bler; unsigned char bandwidth_limitation_indication; unsigned char cdrx_state; unsigned short cdrx_cycle; unsigned short estimated_outage_period; unsigned char outage_state; unsigned char __pad; } cell_context; } ; } ; } ; } advisory; struct tagVCNWConnectionNotification_BBUplinkCRA { int radioAccessTechnology; unsigned long long timestamp; unsigned long long totalByteCount; unsigned int flushableQueueSize; unsigned int nonFlushableQueueSize; } codecRateAdaptation; struct tagVCNWConnectionNotification_BBLinkMeasurement { int radioAccessTechnology; short referenceSignalLevel; short signalLevel; char signalQuality; unsigned char uplinkBler; unsigned char downlinkBler; } linkMeasurement; struct tagVCNWConnectionNotification_BBBWLimitation { unsigned char bandwidthLimitationIndication; } bandwidthLimitation; struct tagVCNWConnectionNotification_BBCDRXUpdate { unsigned char cdrxState; unsigned short cdrxCycle; } cdrxUpdate; struct tagVCNWConnectionNotification_BBOutage { int radioAccessTechnology; unsigned short estimatedOutagePeriod; unsigned char outageState; } outage; struct tagVCNWConnectionNotification_BBThermalUpdate { int rateTrendSuggestion; } thermalUpdate; } ; } _lastNWConnectionNotification;
    unsigned int _awdTimeTransmitter;
    struct opaqueCMSimpleQueue { } *_syncSourceDelegateQueue;
    struct __CFArray { } *_syncSourceDelegates;
    char _isTelephony;
    unsigned int _uplinkRateAdaptationMaxAllowedBitrate;
    char _isVoiceProcessingAt24KSupported;
    char _isRamStadSRCEnabled;
    struct tagVCAudioStreamPeriodicReportingMetrics { _Atomic unsigned int timestampJumpCount; _Atomic unsigned long long timestampJumpDuration; _Atomic unsigned long long timestampJumpMax; } _periodicReportingMetrics;
    NSMutableArray *_allowedAudioPayloads;
    char _shouldEnableJBLatencySenstiveModeForVoWiFi;
    VCAudioHALPluginRemoteDeviceInfo *_remoteDeviceInfo;
    unsigned int _preferredMediaBitrate;
    AVCStatisticsCollector *_statsCollector;
    char _enableAudioPowerSpectrum;
    unsigned int _audioSessionId;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _delegateLock;
    NSObject<OS_dispatch_semaphore> *_runLock;
    unsigned int _cachedConnectionMTU;
    unsigned int _constantTransportOverhead;
    double _audioPlayoutDelay;
    VCMediaRecorder *_mediaRecorder;
    char _shouldSetUpCaptions;
    char _isCaptionsFormatValid;
    struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } format; unsigned int samplesPerFrame; } _captionsFormat;
    VCAudioCaptionsCoordinator *_captionsCoordinator;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain) VCAudioIO *audioIO;
@property (readonly) unsigned int conferenceID;
@property (nonatomic) char isValid;
@property (nonatomic) int deviceRole;
@property (nonatomic, getter=isMuted) char muted;
@property (nonatomic, getter=isRemoteMuted) char remoteMuted;
@property (nonatomic) char sendActiveVoiceOnly;
@property (nonatomic, getter=isCurrentDTXEnabled) char currentDTXEnable;
@property (retain, nonatomic) NSNumber *targetStreamID;
@property (nonatomic) long long overlayToken;
@property (nonatomic) float volume;
@property (readonly, nonatomic) void *realtimeSourceContext;
@property (readonly, nonatomic) unsigned int actualAudioSendingBitrate;
@property (nonatomic) unsigned int lastNoVoiceActivityPacketCount;
@property (retain) VCAudioTransmitter *audioTransmitter;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)capabilities;
+ (unsigned int)audioChannelCountForMode:(id)a0;
+ (unsigned char)audioIODirectionWithMediaStreamDirection:(long long)a0;
+ (unsigned int)audioIOTypeForMode:(long long)a0;
+ (char)isTelephony:(long long)a0;
+ (char)isVoLTE:(long long)a0;
+ (char)isVoWiFi:(long long)a0;
+ (id)newPayloadConfigForCodecConfig:(id)a0 streamConfig:(id)a1 inputSampleRate:(unsigned int)a2;
+ (int)operatingModeForAudioStreamMode:(long long)a0;
+ (char)shouldUseAACELDSBRForMode:(long long)a0;
+ (char)shouldUseRandomRTPTimestampForMode:(int)a0;
+ (id)supportedAudioPayloads;
+ (void)terminateProcess:(id)a0 terminateSource:(id)a1 agent:(struct opaqueRTCReporting { } *)a2;

- (void)dealloc;
- (void)setJitterBufferMode:(int)a0;
- (void)setStreamDirection:(long long)a0;
- (int)getConnectionTypeForStreamMode:(long long)a0;
- (void)onCallIDChanged;
- (void)stopAudioWithCompletionHandler:(id /* block */)a0;
- (char)canProcessAudio;
- (void)getCodecConfigForPayload:(int)a0 block:(id /* block */)a1;
- (unsigned int)internalSampleRateForCodecType:(long long)a0;
- (char)networkUplinkClockUsesBaseband:(long long)a0;
- (void)notifyCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; })a0 didUpdateBandwidth:(char)a1 didUpdateBitrate:(char)a2;
- (void)registerForThermalNotifications;
- (void)reportingAlgosAudioStreamEvent:(unsigned short)a0;
- (void)_computeInternalFormatForStreamConfigurations:(id)a0;
- (id)addAudioPayload:(int)a0;
- (void)addStreamStartingMetricsToReport:(const struct __CFDictionary { } *)a0;
- (void)addSyncSourceDelegate:(id)a0;
- (char)bitrateIsAudioOnly;
- (void)cleanUpCaptionsCoordinators;
- (void)cleanUpMediaRecorder;
- (void)cleanupAudio;
- (void)cleanupBeforeReconfigure:(id)a0;
- (id)codecConfigForOpusWithStreamConfig:(id)a0;
- (void)collectRxChannelMetrics:(struct { unsigned int x0; unsigned int x1[5]; unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)a0;
- (void)collectRxChannelMetrics:(struct { unsigned int x0; unsigned int x1[5]; unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)a0 interval:(float)a1;
- (void)collectTxChannelMetrics:(struct { unsigned int x0; unsigned int x1[5]; unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)a0;
- (unsigned int)computePacketTimestampWithInputTimestamp:(unsigned int)a0 numSamples:(int)a1 hostTime:(double)a2;
- (id)configForPayloadType:(int)a0;
- (void)configureAudioJBAlgos:(struct tagVCAudioReceiverConfig { unsigned int x0; struct tagVCAudioReceiverStream { struct tagHANDLE *x0; unsigned short x1; BOOL x2; BOOL x3; struct tagVCCryptor *x4; int x5; BOOL x6; struct tagVCAudioReceiver *x7; void *x8; void *x9; } x1[4]; void *x2; unsigned int x3; int x4; unsigned int x5; int x6; int x7; BOOL x8; struct opaqueRTCReporting *x9; int x10; BOOL x11; struct __CFString *x12; struct __CFString *x13; unsigned short x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; int x20; BOOL x21; void *x22; void /* function */ *x23; void /* function */ *x24; void /* function */ *x25; void /* function */ *x26; struct tagVCJBTargetEstimatorSynchronizer *x27; void *x28; void *x29; unsigned int x30; BOOL x31; unsigned int x32; int x33; BOOL x34; BOOL x35; unsigned long long x36; BOOL x37; BOOL x38; struct __CFString *x39; BOOL x40; BOOL x41; BOOL x42; BOOL x43; int x44; } *)a0;
- (void)configureCellularFeatures;
- (char)createAudioReceiver;
- (char)createAudioTransmitter:(long long)a0 streamIDs:(id)a1;
- (void)createReportSSRCListWithStreamConfigs:(id)a0;
- (id)createTransportWithStreamConfig:(id)a0;
- (void)didEnterState:(int)a0 oldState:(int)a1;
- (void)didResumeAudioIO:(id)a0;
- (void)didSuspendAudioIO:(id)a0;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x0; double x1; } *)a0;
- (void)gatherRealtimeStats:(struct __CFDictionary { } *)a0;
- (char)generateRTCPXRSummaryReports:(struct tagVCRTCPXRSummaryReport { BOOL x0; BOOL x1; BOOL x2; int x3; unsigned int x4; unsigned short x5; unsigned short x6; unsigned int x7; unsigned int x8; int x9; int x10; int x11; int x12; unsigned char x13; unsigned char x14; unsigned char x15; unsigned char x16; } *)a0 reportCount:(char *)a1;
- (char)generateRTCPXRVoIPMetricsReports:(struct tagVCRTCPXRVoIPMetricsReport { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; unsigned char x16; unsigned short x17; unsigned short x18; unsigned short x19; unsigned short x20; unsigned short x21; } *)a0 reportCount:(char *)a1;
- (char)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned char x8; } *)a0 reportCount:(char *)a1;
- (struct __CFDictionary { } *)getClientSpecificUserInfo:(id)a0;
- (char)getCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; } *)a0 forCodecBitrate:(unsigned int)a1 payload:(int)a2;
- (int)getPacketsPerBundleForStreamConfig:(id)a0;
- (int)getRTPTimeStampRateScaleFactor;
- (struct __CFString { } *)getReportingClientName;
- (int)getReportingClientType;
- (id)getReportingServiceID;
- (id)getSupportedPayloads;
- (long long)getSyncSourceSampleRate;
- (void)handleANBR:(unsigned int)a0 forDirection:(long long)a1;
- (void)handleActiveConnectionChange:(id)a0;
- (void)handleBasebandRateTrendSuggestion:(int)a0;
- (void)handleCellularToWiFiHandover;
- (void)handleCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; })a0;
- (void)handleDownlinkANBR:(struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; })a0;
- (void)handleThermalPressureNotification:(id)a0;
- (void)handleUplinkANBR:(struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; })a0;
- (char)handleUplinkBitrateChange:(struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; })a0 reason:(unsigned char)a1;
- (void)handleWiFiToCelluarHandover;
- (id)initWithClientPid:(int)a0;
- (id)initWithClientPid:(int)a0 ssrc:(unsigned int)a1 transportSessionID:(unsigned int)a2 streamToken:(long long)a3;
- (char)isFrequencyMeteringEnabled:(int)a0;
- (char)isStandaloneStreamClientSpecificUserInfoSupported;
- (char)isVoLTERateAdaptationEnabled;
- (double)lastReceivedRTCPPacketTime;
- (double)lastReceivedRTPPacketTime;
- (struct _METER_INFO { char x0; struct opaqueVCFFTMeter *x1; } *)meterWithType:(int)a0;
- (void)notifyCodecModeChangeToCT:(struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; })a0;
- (char)onConfigureStreamWithConfiguration:(id)a0 error:(id *)a1;
- (void)onPauseWithCompletionHandler:(id /* block */)a0;
- (void)onRTCPTimeout;
- (void)onRTPTimeout;
- (void)onResumeWithCompletionHandler:(id /* block */)a0;
- (void)onSendRTCPPacket;
- (void)onStartWithCompletionHandler:(id /* block */)a0;
- (void)onStopWithCompletionHandler:(id /* block */)a0;
- (unsigned int)packetExpirationTimeForStreamConfig:(id)a0 codecType:(long long)a1;
- (unsigned int)preferredAudioBitrateForPayload:(int)a0;
- (int)preferredAudioCodecWithStreamConfig:(id)a0;
- (void)prepareAudio;
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList { } *)a0;
- (void /* function */ *)pullSamplesCallback;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { } *)a0;
- (void)queryAnbrBitrate:(unsigned int)a0 forDirection:(long long)a1;
- (void)rateAdaptation:(id)a0 targetBitrateDidChange:(unsigned int)a1 rateChangeCounter:(unsigned int)a2;
- (void)redundancyController:(id)a0 redundancyPercentageDidChange:(unsigned int)a1;
- (void)registerActiveAudioStreamChangeNotifications;
- (void)registerCodecRateModeChangeNotifications;
- (void)removeSyncSourceDelegate:(id)a0;
- (void)reportTimestampJumpsWithReportingDictionary:(struct __CFDictionary { } *)a0;
- (void)reportingAudioStreamEvent:(unsigned short)a0;
- (double)rtcpHeartbeatLeeway;
- (int)selectCodecBandwidthForCodecRateMode:(int)a0;
- (void)sendDTMFEvent:(id)a0;
- (void)serverDidDie;
- (void)setCanProcessAudio:(char)a0;
- (void)setDTXPayload:(id)a0;
- (void)setDeviceRoleForAudioStreamMode:(long long)a0 direction:(long long)a1;
- (void)setFrequencyMeteringEnabled:(char)a0 meterType:(int)a1;
- (void)setIsLocalCelluar:(unsigned int)a0;
- (id)setLocalParticipantInfo:(id)a0 networkSockets:(id)a1 withError:(id *)a2;
- (void)setPreferredMediaBitrateWithConfiguration:(id)a0;
- (char)setReceiverPayloads;
- (void)setRemoteCodecTypeAndSampleRate:(struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; })a0;
- (void)setStreamIDs:(id)a0 repairStreamIDs:(id)a1;
- (void)setTargetBitrate:(unsigned int)a0 rateChangeCounter:(unsigned int)a1;
- (void)setUpMediaRecorder;
- (void)setVCStatistics:(struct tagVCStatisticsMessage { int x0; int x1; double x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; union { struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; double x7; double x8; double x9; double x10; double x11; char x12[64]; int x13; } x0; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; double x13; double x14; unsigned int x15; unsigned int x16; double x17; unsigned int x18; BOOL x19; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; double x5; double x6; double x7; unsigned int x8; unsigned int x9; } x20; struct { unsigned short x0; BOOL x1; BOOL x2; unsigned int x3; } x21; struct tagVCStatisticsECNStats { unsigned short x0; unsigned short x1; } x22; struct tagVCStatisticsECNStats { unsigned short x0; unsigned short x1; } x23; BOOL x24; BOOL x25; } x1; struct { double x0; double x1; double x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned long long x8; unsigned int x9; } x2; struct { unsigned int x0; BOOL x1; BOOL x2; BOOL x3; unsigned int x4; unsigned int x5; double x6; unsigned int x7; BOOL x8; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; double x5; double x6; double x7; unsigned int x8; unsigned int x9; } x9; } x3; struct { unsigned char x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; double x10; double x11; double x12; double x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; } x4; struct { unsigned int x0; unsigned int x1; unsigned int x2; double x3; } x5; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; double x5; double x6; double x7; unsigned int x8; unsigned int x9; } x6; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } x7; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; BOOL x6; unsigned int x7; } x8; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; BOOL x5; BOOL x6; double x7; double x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned long long x12; } x9; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned long long x10; int x11; unsigned int x12; unsigned short x13; union { struct { unsigned char x0; unsigned char x1; unsigned short x2; unsigned short x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; float x11; BOOL x12; unsigned short x13; unsigned int x14[6]; unsigned char x15; long long x16; unsigned short x17; float x18; float x19; float x20; float x21; float x22; } x0; struct { unsigned char x0; short x1; short x2; char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned short x8; unsigned short x9; unsigned char x10; } x1; } x14; } x10; struct tagVCStatisticsVideoLossFeedback { unsigned int x0; unsigned short x1; unsigned char x2; unsigned char x3; } x11; struct tagVCStatisticsLocalRCEvent { double x0; double x1; unsigned int x2; } x12; } x7; })a0;
- (void)setupAudioPowerSpectrum;
- (char)setupAudioStreamWithClientPid:(int)a0 enableAudioPowerSpectrum:(char)a1;
- (void)setupCaptionsCoordinatorsWithFormat:(struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } x0; unsigned int x1; } *)a0 direction:(long long)a1;
- (char)setupPayloads;
- (void)setupPeriodicReporting;
- (void)setupReportingAgent:(id)a0;
- (char)setupSourceTransport:(id)a0;
- (char)shouldCreateReceiveSideTransmitter;
- (char)shouldRegisterReportingPeriodicTask;
- (char)shouldReportNetworkInterfaceType;
- (char)shouldResetRTPTimestampOnStart;
- (char)shouldSetUpMediaRecorderWithParticipantInfoDictionary:(id)a0;
- (char)shouldUseNWConnectionBackingSocket;
- (void)startAudioWithCompletionHandler:(id /* block */)a0;
- (void)stopSendDTMFEvent;
- (void)storeLastCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; })a0;
- (id)streamIDsFromTransport;
- (id)supportedPayloads;
- (void)telephonyInterface:(id)a0 anbrActivationUpdate:(char)a1;
- (void)telephonyInterface:(id)a0 anbrRecommendation:(unsigned int)a1 forDirection:(long long)a2;
- (void)unregisterCodecRateModeChangeNotifications;
- (void)unregisterForThermalNotifications;
- (void)updateCodecPayloadAndBitrateForStartEvent:(int *)a0 bitrate:(unsigned int *)a1;
- (void)updateRateAdaptationWithNetworkNotification:(struct tagVCNWConnectionNotification { unsigned char x0; unsigned char x1; unsigned char x2; union { int x0; int x1; } x3; union { struct ifnet_interface_advisory { union { struct { unsigned char x0; unsigned char x1; unsigned short x2; int x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned char x11; unsigned char x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; unsigned char x17; unsigned char x18; } x0; struct { struct ifnet_interface_advisory_header { unsigned char x0; unsigned char x1; unsigned char x2; union { unsigned char x0; unsigned char x1; } x3; } x0; struct ifnet_interface_advisory_capacity { int x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned int x5; unsigned int x6; unsigned int x7; } x1; union { struct ifnet_interface_advisory_wifi_context { unsigned char x0; unsigned char x1; unsigned short x2; unsigned short x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned short x9; unsigned int x10[6]; } x0; struct ifnet_interface_advisory_cell_context { unsigned char x0; short x1; short x2; char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned short x8; unsigned short x9; unsigned char x10; unsigned char x11; } x1; } x2; } x1; } x0; } x0; struct tagVCNWConnectionNotification_BBUplinkCRA { int x0; unsigned long long x1; unsigned long long x2; unsigned int x3; unsigned int x4; } x1; struct tagVCNWConnectionNotification_BBLinkMeasurement { int x0; short x1; short x2; char x3; unsigned char x4; unsigned char x5; } x2; struct tagVCNWConnectionNotification_BBBWLimitation { unsigned char x0; } x3; struct tagVCNWConnectionNotification_BBCDRXUpdate { unsigned char x0; unsigned short x1; } x4; struct tagVCNWConnectionNotification_BBOutage { int x0; unsigned short x1; unsigned char x2; } x5; struct tagVCNWConnectionNotification_BBThermalUpdate { int x0; } x6; } x4; } *)a0;
- (void)updateSyncSourceState:(int)a0;
- (char)validateAudioStreamConfigurations:(id)a0;
- (void)waitIdleForSyncSourceDelegates;
- (void)willExitState:(int)a0 newState:(int)a1;

@end
