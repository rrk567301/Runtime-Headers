@class VideoAttributes, NSString, VCVideoSourceTokenManager, VCImageQueue, NSMutableDictionary, VCImageRotationConverter, VCImageMirroringConverter, NSObject, NSMutableArray;
@protocol AVConferencePreviewDelegate, OS_dispatch_source, OS_dispatch_queue, VCVideoSource;

@interface VCVideoCaptureServer : NSObject <VCVideoCaptureServer> {
    int currentWidth;
    int currentHeight;
    int currentFrameRate;
    int _screenConfiguredFrameRate;
    int _screenCurrentFrameRate;
    int _maxFrameRate;
    int _encodingWidth;
    int _encodingHeight;
    unsigned int _defaultCapturePixelFormat;
    int previewFrameCount;
    int captureFrameCount;
    NSObject<OS_dispatch_source> *cameraHealthMonitor;
    NSObject<OS_dispatch_source> *screenHealthMonitor;
    int pendingWidth;
    int pendingHeight;
    int pendingFrameRate;
    VCVideoSourceTokenManager *_tokenManager;
    char _firstPreviewFrameReceived;
    int snapshotRequestCount;
    NSMutableArray *cameraVideoSinks;
    NSMutableArray *screenCaptureClients;
    NSMutableDictionary *_cameraPreviewClients;
    NSMutableDictionary *_cameraSinkVideoRules;
    VideoAttributes *localVideoAttributes;
    struct CGSize { double width; double height; } localScreenPortraitAspectRatio;
    struct CGSize { double width; double height; } localScreenLandscapeAspectRatio;
    struct CGSize { double width; double height; } localExpectedPortraitAspectRatio;
    struct CGSize { double width; double height; } localExpectedLandscapeAspectRatio;
    struct CGSize { double width; double height; } _defaultPortraitAspectRatio;
    struct CGSize { double width; double height; } _defaultLandscapeAspectRatio;
    NSObject<OS_dispatch_queue> *captureServerQueue;
    NSObject<OS_dispatch_queue> *captureClientQueue;
    NSObject<OS_dispatch_queue> *captureCameraQueue;
    NSObject<OS_dispatch_queue> *_cameraPreviewClientMonitorQueue;
    NSObject<OS_dispatch_queue> *_xpcCommandQueue;
    NSObject<OS_dispatch_queue> *delegateNotificationQueue;
    NSObject<OS_dispatch_queue> *variablesQueue;
    NSObject<OS_dispatch_queue> *snapshotQueue;
    char _useAVCaptureSession;
    NSObject<VCVideoSource> *avCapture;
    NSObject<VCVideoSource> *_screenCapture;
    NSMutableDictionary *_screenShareCaptureConfig;
    unsigned long long _biomeEventType;
    struct OpaqueVTPixelTransferSession { } *transferSession;
    struct __CVPixelBufferPool { } *bufferPool;
    char resize;
    struct tagAVConferencePreviewDelegateRealtimeRealtimeInstanceVTable { void /* function */ *didReceiveFirstPreviewFrameFromCameraUniqueID; } _delegateFunctions;
    double falteredRenderingtimeStamp;
    VCImageQueue *frontQueue;
    VCImageQueue *backQueue;
    char _frontLayerInLayerHostMode;
    char _backLayerInLayerHostMode;
    int _thermalNotificationToken;
    int _thermalLevel;
    int _newThermalLevel;
    int _peakPowerNotificationToken;
    int _peakPowerLevel;
    int _newPeakPowerLevel;
    char _viewPointCorrectionEnabledByThermal;
    char _viewPointCorrectionEnabledByClient;
    char _isPreviewRunning;
    char _isScreenCaptureForScreenShare;
    char _thermalLightMitigationsEnabled;
    char _forceDisableThermal;
    char _isCapturing;
    char _cinematicFramingEnabled;
    char _preferPresentationTimeStamp;
    char _isExternalCamera;
    double _cameraZoomFactor;
    VCImageRotationConverter *_previewImageRotationConverter;
    VCImageMirroringConverter *_previewMirroringConverter;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _enqueueLock;
    NSMutableDictionary *_streamInputCaptureSources;
    NSMutableDictionary *_streamInputs;
    NSObject<OS_dispatch_queue> *_streamInputQueue;
    NSMutableDictionary *_screenCaptureSource;
    NSMutableDictionary *_screenCaptureConfig;
    NSMutableDictionary *_screenClientToCaptureSourceID;
    NSMutableDictionary *_screenCaptureThermalFrameRateThresholds;
    NSMutableDictionary *_systemAudioCapture;
    NSMutableDictionary *_systemAudioCaptureConfig;
    NSMutableDictionary *_systemAudioSourceToClients;
    char _useScreenCaptureKitForAudio;
    double _previousFrameTime;
    struct __sFILE { char *x0; int x1; int x2; short x3; short x4; struct __sbuf { char *x0; int x1; } x5; int x6; void *x7; void /* function */ *x8; void /* function */ *x9; void /* function */ *x10; void /* function */ *x11; struct __sbuf { char *x0; int x1; } x12; struct __sFILEX *x13; int x14; unsigned char x15[3]; unsigned char x16[1]; struct __sbuf { char *x0; int x1; } x17; int x18; long long x19; } *_bufferStatsDumpFile;
    struct tagVCVideoBufferStatistics { int bufferWidth; int bufferHeight; BOOL preferPTS; double frameTime; double hostTimeFromBufferAttachment; double presentationTime; double presentationTimeConvertedToHost; double clockTime; } _bufferStatsData;
    char _isBufferStatsDumpEnabled;
    double _previousClockTime;
    char _skipPreviewTransform;
    char _previewShouldMirrorOnly;
    char _isVideoMirrored;
}

@property (readonly, nonatomic) struct _VCVideoSourceToken { union { struct { unsigned int identifier : 24; unsigned char type : 8; } ; unsigned int bits; } ; } currentVideoSourceToken;
@property (retain, nonatomic) NSObject<AVConferencePreviewDelegate> *appDelegate;
@property (nonatomic) struct tagAVConferencePreviewDelegateRealtimeRealtimeInstanceVTable { void /* function */ *didReceiveFirstPreviewFrameFromCameraUniqueID; } delegateFunctions;
@property (readonly, nonatomic) int thermalPressureLevel;
@property (nonatomic) char followSystemCamera;
@property (readonly, nonatomic) int bestCameraCaptureFrameRate;
@property (readonly, nonatomic) char is1080pCameraAvailable;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)VCVideoCaptureServerSingleton;
+ (char)clientPID:(id)a0 matchesProcessName:(id)a1;

- (oneway void)release;
- (void)dealloc;
- (id)allocWithZone:(struct _NSZone { } *)a0;
- (id)autorelease;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (id)retain;
- (unsigned long long)retainCount;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)stopCapture;
- (void)startPreview;
- (void)stopPreview;
- (void)beginPIPToPreviewAnimation;
- (void)beginPreviewToPIPAnimation;
- (void)endPIPToPreviewAnimation;
- (void)endPreviewToPIPAnimation;
- (id)localScreenAttributesForVideoAttributes:(id)a0;
- (id)localVideoAttributes;
- (void)pausePreview;
- (void)setCameraZoomFactor:(double)a0;
- (void)setCameraZoomFactor:(double)a0 withRate:(double)a1;
- (char)setLocalScreenAttributes:(id)a0;
- (char)setLocalVideoAttributes:(id)a0;
- (void)didStopReacting;
- (void)setSystemPreferredAsLocalCamera;
- (void)updateViewPointCorrectionStatus;
- (void)addObserveSystemPreferredCamera;
- (void)dispatchedUpdateSystemAudioConfigTapTypeForClientKey:(id)a0 forSource:(int)a1;
- (void)notifyThermalPressureObservers:(int)a0;
- (void)setLocalCamera:(id)a0;
- (id)updateScreenCapture:(long long)a0 withConfig:(id)a1;
- (void)addScreenStatsToDict:(struct __CFDictionary { } *)a0;
- (void)addStreamInputStatsToDict:(struct __CFDictionary { } *)a0 captureSource:(int)a1;
- (char)cameraSupportsWidth:(int)a0 height:(int)a1;
- (char)canStopPreview;
- (void)captureSourceVideoFeatureStatusDidChange:(struct tagVCVideoCaptureFeatureStatus { char x0; char x1; char x2; char x3; char x4; char x5; })a0;
- (char)captureVideoWidth:(int *)a0 height:(int *)a1 frameRate:(int *)a2;
- (void)centerStageEnabledDidChange:(char)a0;
- (void)changeCameraToPendingSettingsWithReset:(char)a0;
- (void)cleanupStreamInputs;
- (struct __CFDictionary { } *)copyCameraColorInfo;
- (struct __CFDictionary { } *)copyInitialStatsDictionary;
- (id)copyLocalScreenAttributesForVideoAttributes:(id)a0;
- (struct __CFDictionary { } *)copyRealtimeStatsDictionary;
- (struct __CFDictionary { } *)copyReportingStatsForCaptureSource:(int)a0;
- (int)createVideoCaptureWithWidth:(int)a0 height:(int)a1 frameRate:(int)a2 useBackFacingCamera:(char)a3;
- (void)deregisterCaptureClientForScreenShare:(id)a0;
- (char)deregisterCaptureConfig:(id)a0 forSource:(int)a1;
- (char)deregisterForVideoFramesFromSource:(int)a0 withClient:(id)a1;
- (void)deregisterScreenVideoConfig:(id)a0 forSource:(int)a1;
- (char)deregisterSystemAudioConfig:(id)a0 forSource:(int)a1;
- (char)dispatchedAddScreenCaptureAudioOutputForConfig:(id)a0;
- (char)dispatchedRemoveScreenCaptureAudioOutput;
- (void)dispatchedSetCaptureCameraWithToken:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a0;
- (void)dispatchedSetCaptureFrameRate:(int)a0;
- (void)dispatchedSetCaptureWidth:(int)a0 height:(int)a1 rate:(int)a2;
- (char)dispatchedStartSystemAudioForClientKey:(id)a0;
- (void)dispatchedStartSystemAudioForSource:(int)a0;
- (char)dispatchedStopSystemAudioForClientKey:(id)a0;
- (void)dispatchedStopSystemAudioForSource:(int)a0;
- (void)dispatchedUpdateCaptureRuleForClient:(id)a0 width:(int)a1 height:(int)a2 frameRate:(float)a3;
- (int)findNextAvailableCaptureSourceID;
- (int)getCappedFrameRate:(int)a0;
- (int)getCaptureFrameRateForSource:(int)a0;
- (int)getFrameRateForPeakPowerLevel:(int)a0;
- (int)getFrameRateForThermalLevel:(int)a0;
- (int)getFrameRateForThermalLevel:(int)a0 peakPowerPressure:(int)a1;
- (int)getScreenFrameRateForThermalLevel:(int)a0;
- (void)handleAVCaptureError:(int)a0 domain:(id)a1;
- (void)handleAVCaptureError:(int)a0 error:(id)a1;
- (void)handleCaptureEvent:(id)a0;
- (void)handleCaptureEvent:(id)a0 subType:(id)a1;
- (void)handleCaptureSourcePositionDidChange:(char)a0;
- (char)internalRegisterStreamInput:(id)a0;
- (char)internalUnregisterStreamInput:(id)a0;
- (char)isAirPlayXPCHelper;
- (char)isClientRegisteredForVideoFrames:(id)a0 fromSource:(int)a1;
- (char)isFaceTimeScreenSharingWithDict:(id)a0;
- (char)isValidStreamInput:(id)a0;
- (struct CGSize { double x0; double x1; })localExpectedRatioForScreenOrientation:(int)a0;
- (struct CGSize { double x0; double x1; })localScreenRatioForScreenOrientation:(int)a0;
- (struct opaqueCMFormatDescription { } *)newFormatDescriptionForCaptureSource:(int)a0;
- (void)notifyCameraDidChangeAvailability:(id)a0 available:(char)a1;
- (void)notifyFrameRateBeingThrottledForClients:(id)a0 newFrameRate:(int)a1 thermalLevelDidChange:(BOOL)a2 powerLevelDidChange:(BOOL)a3;
- (void)notifyThermalChangeForClients:(id)a0;
- (void)onCaptureScreenFrame:(struct opaqueCMSampleBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 orientation:(int)a2;
- (char)onVideoFrame:(struct opaqueCMSampleBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 attribute:(struct { char x0; char x1; int x2; char x3; char x4; int x5; unsigned char x6; })a2;
- (void)populateThermalFrameRateThresholdsForCaptureSourceID:(long long)a0 captureConfig:(id)a1;
- (void)portraitBlurEnabledDidChange:(char)a0;
- (void)previewVideoWidth:(int *)a0 height:(int *)a1 frameRate:(int *)a2;
- (void)reactionDidStart:(id)a0;
- (void)reconnectClientLayerFront:(char)a0;
- (void)registerBlocksForServer;
- (void)registerCaptureClientForScreenShare:(id)a0;
- (char)registerCaptureConfig:(id)a0 forSource:(int)a1;
- (char)registerForFrames:(id)a0;
- (char)registerForVideoFramesFromSource:(int)a0 sourceConfig:(id)a1;
- (char)registerForVideoFramesFromSource:(int)a0 withClient:(id)a1 width:(int)a2 height:(int)a3 frameRate:(int)a4;
- (void)registerScreenVideoConfig:(id)a0 forSource:(int)a1;
- (char)registerStreamInput:(id)a0;
- (int)registerStreamInputCaptureSourceWithConfiguration:(id)a0;
- (int)registerStreamInputCaptureSourceWithID:(long long)a0 frameRate:(unsigned int)a1;
- (char)registerSystemAudioConfig:(id)a0 forSource:(int)a1;
- (void)registerVideoSink:(id)a0 withCaptureSource:(int)a1;
- (void)removeObserveSystemPreferredCamera;
- (void)resetCameraToPreviewSettingsForced:(char)a0;
- (void)resumeVideoSink:(id)a0 withCaptureSource:(int)a1;
- (void)screenAndCameraMixingEnable:(char)a0;
- (int)screenFrameRateForThermalLevel:(int)a0 configuredFrameRate:(int)a1 captureSourceID:(id)a2;
- (void)sendBiomeEventIsStarting:(char)a0;
- (int)setBoundsForRemoteLayerWithFacing:(char)a0 frameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 fenceHandle:(id)a2;
- (void)setCFAvailabilityChange:(char)a0;
- (void)setCameraZoomAvailable:(char)a0 currentZoomFactor:(double)a1 maxZoomFactor:(double)a2;
- (char)setCaptureCameraWithToken:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a0;
- (void)setCaptureFrameRate:(int)a0;
- (void)setCaptureWidth:(int)a0 height:(int)a1 rate:(int)a2;
- (void)setCaptureWidth:(int)a0 height:(int)a1 rate:(int)a2 forced:(char)a3;
- (void)setCurrentFrameRate:(int)a0;
- (unsigned int)setLocalVideoDestination:(struct { id x0; char x1; char *x2; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x3; char x4; char x5; } *)a0;
- (unsigned int)setLocalVideoDestination:(id)a0 facing:(char)a1;
- (void)setPauseCapture:(char)a0;
- (void)setScreenCaptureFrameRate:(int)a0;
- (void)setScreenCaptureFrameRate:(int)a0 captureSourceID:(id)a1;
- (void)setThermalLightMitigationsEnabled:(char)a0;
- (void)setUpDefaultAspectRatios;
- (void)setUpImageConverters;
- (char)setUpScreenVideoCaptureSource:(id)a0;
- (void)setViewPointCorrectionEnabled:(char)a0;
- (void)setupLogFiles;
- (char)setupScreenCaptureForSource:(int)a0 config:(id)a1;
- (char)setupStreamInputs;
- (char)shouldSendVideoAttributeCallback:(id)a0;
- (void)sourceFrameRateDidChange:(unsigned int)a0;
- (void)startCaptureWithWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (void)startPreviewWithWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (char)startScreenShareCapture:(id)a0;
- (char)stopScreenShareCapture:(long long)a0;
- (long long)streamInputIDForCaptureSourceID:(int)a0;
- (char)supportsPortraitResolution;
- (void)suspendVideoSink:(id)a0 withCaptureSource:(int)a1;
- (void)tearDownImageConverters;
- (void)terminateProcessServerDueToUnexpectedUse;
- (void)thermalLevelDidChange:(int)a0;
- (void)unregisterStreamInput:(id)a0;
- (char)unregisterStreamInputCaptureSourceWithCaptureSourceID:(int)a0;
- (void)unregisterVideoSink:(id)a0 withCaptureSource:(int)a1;
- (void)updateCaptureRuleForClient:(id)a0 width:(int)a1 height:(int)a2 frameRate:(float)a3;
- (void)updateCaptureWidth:(int *)a0 height:(int *)a1 frameRate:(int *)a2 withVideoRule:(id)a3;
- (void)updateCenterStageEnabled:(char)a0 requestCaptureChange:(char)a1;
- (void)updateImageQueueFrameRate:(int)a0;
- (void)updateLocalAspectRatios:(int)a0 localScreenAspectRatio:(struct CGSize { double x0; double x1; })a1;
- (void)updatePreviewState;
- (id)videoRuleForClient:(id)a0;

@end
