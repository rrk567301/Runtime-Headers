@class NSDictionary, VCAudioTransmitter, VCRedundancyControllerVideo, NSMutableArray, VideoAttributes, VCBitrateArbiter, VCImageAttributeRules, VCControlChannel, VCConnectionManager, GKRingBuffer, NSData, VCSwitchManager, VCWCMClient, TimingCollection, AVCRateController, VCControlChannelMultiWay, VCTransportSession, NSNumber, VCVideoRule, VCCaptionsReceiver, VCMediaNegotiator, NSArray, VCDisplayLink, NSMutableDictionary, NSString, VCCapabilities, NSObject, VCAudioPayload, VCRateControlMediaController, VCCallInfo, WRMClient, VCSessionMessaging, VCSecureDataChannel, VCCallLinkCongestionDetector;
@protocol VideoConferenceChannelQualityDelegate, VCCallSessionDelegate, VCAudioCaptionsDelegate, VCConnectionProtocol, OS_dispatch_queue, OS_dispatch_source;

@interface VCCallSession : NSObject <AVCRateControllerDelegate, VCTransportSessionLegacyDelegate, VCCaptionsReceiverDelegate, VCSecureDataChannelDelegate, VCAudioIOSink, VCRedundancyControllerDelegate> {
    VCCallInfo *remoteCallInfo;
    long long packetMultiplexMode;
    struct tagHANDLE { int x0; } *rtpVideo;
    void *videoMediaControlInfoGenerator;
    void *audioMediaControlInfoGenerator;
    id<VCConnectionProtocol> toBeChangedPrimaryConnection;
    VCMediaNegotiator *_mediaNegotiator;
    VCSwitchManager *_switchManager;
    NSObject<OS_dispatch_queue> *connectionChangeQueue;
    NSMutableArray *negotiatedAudioPayloads;
    VCAudioPayload *currentAudioPayload;
    VCAudioPayload *currentDTXPayload;
    int _currentRedPayloadType;
    VCVideoRule *_currentEncodeRule;
    char _isRedEnabled;
    long long screenPayload;
    struct tagHANDLE { int x0; } *hSIP;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } mutex;
    int iRemoteRTPPort;
    int iRemoteRTCPPort;
    VCCapabilities *caps;
    AVCRateController *_rateController;
    VCRateControlMediaController *_mediaController;
    char useSBR;
    NSDictionary *_allPayloadsLocalFeaturesString;
    NSMutableDictionary *featureListStringDict;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } pauseLock;
    NSObject<OS_dispatch_queue> *videoQueue;
    NSObject<OS_dispatch_queue> *videoAsyncQueue;
    NSObject<OS_dispatch_queue> *audioQueue;
    NSObject<OS_dispatch_queue> *delegateNotificationQueue;
    char allowAudioRecording;
    int aacBlockSize;
    char _isUseCaseWatchContinuity;
    int carrierBitrateCap;
    struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } format; unsigned int samplesPerFrame; } _vpioFormat;
    char allowAudioSwitching;
    char shouldUpdateLastReceivedPacketTimestamp;
    double lastReceivedPacketTimestamp;
    unsigned int _mediaStallCount;
    double _mediaStallTotalTime;
    double _maxMediaStallTime;
    double _lastMediaStallStartTime;
    char _isRemoteMediaStalledShort;
    int packetsSinceStall;
    int packetsSinceShortMediaStall;
    NSObject<OS_dispatch_source> *pausedAudioHeartBeat;
    TimingCollection *perfTimers;
    double timeLastCheckedNetworkConditions;
    double packetLossRateAccum;
    double packetLossRateCount;
    double timeLastPLR5Secs;
    double timeLastKnowGoodNetworkPLR;
    double timeLastKnowGoodNetworkRTT;
    int abnormalOWRDCount;
    int sampleLogCount;
    double timeSinceLastReportedNoPackets;
    double noRemotePacketsTimeout;
    double _remoteMediaStallTimeout;
    char previousNoRemoteInProgress;
    char didAttemptSIPInvite;
    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } qualityDelegateLock;
    NSObject<OS_dispatch_queue> *qualityQueue;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } srtpLock;
    char didPrepareSRTP;
    char useAFRC;
    char useVCRC;
    VCCallLinkCongestionDetector *congestionDetector;
    char isGKVoiceChat;
    BOOL bBWEstOperatingModeInitialized;
    BOOL bBWEstNewBWEstModeEnabled;
    BOOL bBWEstFakeLargeFrameModeEnabled;
    BOOL bBWEstActiveProbingSenderLog;
    struct CGSize { double width; double height; } remoteScreenPortraitAspectRatio;
    struct CGSize { double width; double height; } remoteScreenLandscapeAspectRatio;
    struct CGSize { double width; double height; } remoteExpectedPortraitAspectRatio;
    struct CGSize { double width; double height; } remoteExpectedLandscapeAspectRatio;
    char isInitiator;
    char sentClientSuccessfulDidStart;
    double videoThrottlingTimeout;
    unsigned int awdCallNonce;
    VCSessionMessaging *messaging;
    VCControlChannel *controlChannel;
    VCControlChannelMultiWay *secureControlChannel;
    char isCurrentNetworkBad;
    unsigned int callSessionBitrate;
    NSObject<OS_dispatch_queue> *cellTechQueue;
    NSObject<OS_dispatch_source> *cellTechChangeSource;
    VCBitrateArbiter *callSessionBitrateArbiter;
    NSObject<OS_dispatch_source> *connectionTimeoutSource;
    NSObject<OS_dispatch_source> *firstRemoteFrameTimemoutSource;
    long long initialSentBytes;
    long long initialReceivedBytes;
    VCAudioTransmitter *audioTransmitter;
    VCCaptionsReceiver *_captionsReceiver;
    struct tagHANDLE { int x0; } *hVideoReceiver;
    struct tagHANDLE { int x0; } *hVideoTransmitter;
    VCDisplayLink *_displayLink;
    VCRedundancyControllerVideo *_videoRedundancyController;
    char remoteSupportsVisibleRect;
    char remoteSupportsExpectedAspectRatio;
    char canLocalResizePIP;
    char canRemoteResizePIP;
    char receivedFirstRemoteFrame;
    int fecMode;
    NSObject<OS_dispatch_source> *sessionHealthMonitor;
    double lastVideoQualityNotificationUpdate;
    double lastVideoCallAlarmTime;
    VCWCMClient *vcWCMClient;
    WRMClient *vcWRMClient;
    char iRATSuggestionEnabled;
    struct OpaqueVTPixelTransferSession { } *hdTransferSession;
    struct __CVPixelBufferPool { } *hdBufferPool;
    struct CGSize { double width; double height; } expectedDecodeSize;
    struct opaqueRTCReporting { } *reportingAgent;
    int reportingModuleID;
    char didReportNoRemotePackets;
    char didReportLongConnectionTime;
    char didReportAudioStall;
    char enableRateControlDump;
    unsigned int _targetBitrate;
    unsigned int _rateChangeCounter;
    unsigned int awdTime;
    struct SKEStateOpaque { } *skeState;
    struct __CFData { } *secretKey;
    VCSecureDataChannel *secureDataChannel;
    unsigned int dwRTT_ice;
    NSObject<OS_dispatch_queue> *timestampQueue;
    char shouldSendBlackFrame;
    unsigned int _peerProtocolVersion;
    struct tagWRMMetricsInfo { BOOL x0; struct tagHANDLE *x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; int x17; void /* function */ *x18; struct { void *x0; void /* function */ *x1; void /* function */ *x2; } x19; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned long long x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; } *wrmInfo;
    char _shouldReportWRMMetrics;
    char _inviteDataRequested;
    unsigned int _transportType;
    VCTransportSession *_transportSession;
    char _cleanupDone;
    char _isLocalCellular_LowestConnectionQuality;
    char _isRemoteCellular_LowestConnectionQuality;
    char _isConnectedOnIPv6_LowestConnectionQuality;
    void *_callLogFile;
    unsigned char _relayedCallType;
    char _isWRMNotificationPending;
    struct { int applicationType; int linkTypeSuggestion; unsigned long long linkTypeChangeReasonCode; char linkTypeChangeReasonString[128]; unsigned long long linkBandwidthMin; unsigned long long linkBandwidthMax; } _savedWRMNotification;
    double _initTime;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property long long connectionChangeState;
@property (retain) VCConnectionManager *connectionManager;
@property (readonly) VCCallInfo *localCallInfo;
@property (nonatomic) double packetLossRate5Secs;
@property double lastDecodedFrameTime;
@property (copy, nonatomic) NSString *peerCN;
@property (readonly) struct tagVCAudioReceiver { struct tagVCAudioReceiverConfig { unsigned int x0; struct tagVCAudioReceiverStream { struct tagHANDLE *x0; unsigned short x1; BOOL x2; BOOL x3; struct tagVCCryptor *x4; int x5; BOOL x6; struct tagVCAudioReceiver *x7; void *x8; void *x9; } x1[4]; void *x2; unsigned int x3; int x4; unsigned int x5; int x6; int x7; BOOL x8; struct opaqueRTCReporting *x9; int x10; BOOL x11; struct __CFString *x12; struct __CFString *x13; unsigned short x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; int x20; BOOL x21; void *x22; void /* function */ *x23; void /* function */ *x24; void /* function */ *x25; void /* function */ *x26; struct tagVCJBTargetEstimatorSynchronizer *x27; void *x28; void *x29; unsigned int x30; BOOL x31; unsigned int x32; int x33; BOOL x34; BOOL x35; unsigned long long x36; BOOL x37; BOOL x38; struct __CFString *x39; BOOL x40; BOOL x41; BOOL x42; BOOL x43; int x44; } x0; void *x1; struct opaqueVCJitterBuffer *x2; BOOL x3; struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } x0; unsigned int x1; } x4; double x5; struct { long long x0; int x1; unsigned int x2; long long x3; } x6; struct { long long x0; int x1; unsigned int x2; long long x3; } x7; unsigned int x8; struct tagVCRealTimeThread *x9; struct tagVCAudioReceiverReportingTask { struct opaqueRTCReporting *x0; int x1; struct tagHANDLE *x2; BOOL x3; } x10; BOOL x11; BOOL x12; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x13; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x14; struct tagVCAudioDecoderList { struct tagDecoderSettings *x0; unsigned int x1; } x15; unsigned int x16; struct tagVCAudioReceiverStatistics { _Atomic unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; float x8; _Atomic unsigned int x9; } x17; struct tagWRMMetricsInfo *x18; void /* function */ *x19; struct tagVCAudioReceiverCallbackContext { void *x0; void /* function */ *x1; void /* function */ *x2; } x20; void /* function */ *x21; struct tagVCAudioReceiverCallbackContext { void *x0; void /* function */ *x1; void /* function */ *x2; } x22; unsigned int x23; struct _RTCPPacketList { union tagNTP { unsigned long long x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; unsigned char x1; struct tagRTCPPACKET *x2[10]; struct OpaqueCMBlockBuffer *x3; char *x4; unsigned long long x5; unsigned int x6; unsigned char x7[1472]; unsigned short x8[12]; unsigned char x9; BOOL x10; unsigned long long x11; struct { struct _RTCPPacketList *x0; } x12; } x24[2]; double x25; unsigned int x26; unsigned int x27; struct tagPacketHistoryInfo { unsigned int x0; unsigned short x1; unsigned int x2; BOOL x3; BOOL x4; } x28[300]; unsigned short x29; unsigned short x30; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x31; struct tagVCAudioReceiverStream *x32; unsigned short x33; unsigned short x34; double x35; BOOL x36; unsigned short x37; unsigned short x38; struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; } x39; BOOL x40; unsigned short x41; unsigned short x42; unsigned short x43; unsigned int x44; BOOL x45; BOOL x46; unsigned long long x47; BOOL x48; void *x49; void /* function */ *x50; void /* function */ *x51; void /* function */ *x52; void /* function */ *x53; struct tagVCJBTargetEstimatorSynchronizer *x54; struct tagVCJitterBufferWRMReportingMetrics { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned int x7; } x55; void *x56; BOOL x57; double x58; int x59; double x60; double x61; unsigned int x62; double x63; struct tagVCAudioIssueDetector *x64; int x65; int x66; unsigned int x67[128]; unsigned int x68[128]; unsigned int x69; unsigned int x70; unsigned int x71; int x72; struct tagVCAudioDump *x73; struct tagVCAudioDumpPayloadInfo { BOOL x0; int x1; BOOL x2; BOOL x3; struct AudioStreamBasicDescription *x4; } x74; BOOL x75; BOOL x76; struct tagVCAudioFrameDelay *x77; double x78; long long x79; struct tagVCOverlaySource *x80; BOOL x81; double x82; unsigned int x83; double x84; } *audioReceiver;
@property (readonly) char isCurrentPayloadTypeValid;
@property (readonly, nonatomic) char isCaller;
@property (copy, nonatomic) NSString *sessionID;
@property (nonatomic) char isStarted;
@property (retain, nonatomic) VCImageAttributeRules *imageAttributeRules;
@property (nonatomic) char shouldSendAudio;
@property (nonatomic) double roundTripTime;
@property (nonatomic) char useRateControl;
@property (nonatomic) char isRTCPFBEnabled;
@property (nonatomic) double packetLossRate;
@property (nonatomic) float packetLateAndMissingRatio;
@property (readonly) double networkQuality;
@property (nonatomic) double networkConditionsTimeoutInSeconds;
@property (nonatomic) int signalStrengthBars;
@property (nonatomic) int signalStrengthDisplayBars;
@property (nonatomic) int signalStrengthMaxDisplayBars;
@property (readonly) unsigned int lastSentAudioSampleTime;
@property (nonatomic) int natType;
@property (nonatomic) char requiresWifi;
@property (nonatomic) char useCompressedConnectionData;
@property (retain) NSObject<VCCallSessionDelegate> *delegate;
@property (retain) NSObject<VCAudioCaptionsDelegate> *captionsDelegate;
@property struct tagHANDLE { int x0; } *rtpHandle;
@property (readonly) int numBufferBytesAvailable;
@property unsigned short maxPacketLength;
@property long long state;
@property long long sipState;
@property char didSend200OK;
@property long long videoPayload;
@property long long sampleRate;
@property (readonly) char isAudioRunning;
@property (readonly) char isVideoRunning;
@property (readonly) char videoIsPaused;
@property (readonly) char audioIsPaused;
@property char isGKVoiceChat;
@property char isWaitingForICEResult;
@property char receivedSIPInvite;
@property struct tagHANDLE { int x0; } *hMediaQueue;
@property struct tagHANDLE { int x0; } *hAFRC;
@property (retain, nonatomic) GKRingBuffer *ringBuf;
@property unsigned int lastReceived;
@property (readonly) int bundledPackets;
@property int packetsPerBundle;
@property int preferredAudioCodec;
@property char useControlByte;
@property char useUEP;
@property unsigned char inputMeter;
@property int bandwidthUpstream;
@property int bandwidthDownstream;
@property (retain, nonatomic) NSArray *mutedPeers;
@property NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
@property char shouldTimeoutPackets;
@property (retain) NSData *srtpKeyBytes;
@property (retain, nonatomic) VideoAttributes *remoteVideoAttributes;
@property unsigned int remoteFrameWidth;
@property unsigned int remoteFrameHeight;
@property (nonatomic) int operatingMode;
@property (readonly) char isSKEOptimizationEnabled;
@property (readonly) char isRemoteMediaStalled;
@property (retain) VCCapabilities *capabilities;
@property int deviceRole;
@property (copy, nonatomic) NSString *peerReportingID;
@property (retain, nonatomic) NSNumber *basebandCodecSampleRate;
@property (copy, nonatomic) NSString *basebandCodecType;
@property (readonly, nonatomic) int audioTierNetworkBitrate;
@property (readonly, nonatomic) int audioTierAudioCodecBitrate;
@property (readonly, nonatomic) int audioTierPacketsPerBundle;
@property (readonly, nonatomic) int audioTierRedNumPayloads;
@property (readonly, nonatomic) int audioTierPayload;
@property (readonly, nonatomic) NSDictionary *dtxMetrics;
@property (readonly, nonatomic) struct opaqueRTCReporting { } *reportingAgent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)getDecodePayloadTypes:(int)a0 secondaryPayloadTypes:(id)a1;
+ (char)isRelayDeviceRole:(int)a0;
+ (id)keyPathsForValuesAffectingNetworkQuality;
+ (int)setRxPayloadList:(struct tagHANDLE { int x0; } *)a0 withPayloadTypes:(id)a1;
+ (int)setRxPayloadList:(struct tagHANDLE { int x0; } *)a0 withPayloadTypes:(id)a1 isRedEnabled:(char)a2;
+ (void)stopSecureControlChannel:(id)a0;

- (void)dealloc;
- (id)init;
- (void)lock;
- (void)unlock;
- (char)cancel:(id)a0;
- (void)resetState;
- (id)localParticipantID;
- (id)remoteParticipantID;
- (unsigned int)callID;
- (id)callMetadata;
- (int)learntBitrateForSegment:(id)a0 defaultValue:(int)a1;
- (void)applyNegotiatedFaceTimeSettings;
- (char)chooseVideoPayloadForInterface:(int)a0;
- (unsigned int)currentAudioCap;
- (void)initWithRelevantStorebagEntries;
- (void)sendData:(id)a0 messageType:(unsigned int)a1 encrypted:(char)a2;
- (void)setSuspendVideo;
- (void)stopAudioWithCompletionHandler:(id /* block */)a0;
- (char)stopMediaQueue:(id *)a0;
- (int)Conference_SetBWEstMode:(BOOL)a0 bFakeLargeFrameMode:(BOOL)a1;
- (void)applyNegotiatedCaptionsSettings;
- (void)cleanUpVideoRTP;
- (id)getFeatureListStringForPayload:(int)a0;
- (int)handleIncomingWithCallID:(unsigned int)a0 msgIn:(const char *)a1 msgOut:(char *)a2 optional:(void *)a3 confIndex:(int *)a4 error:(id *)a5;
- (void)handleReceivedPiggybackBlobIDS:(id)a0;
- (char)initializeDisplayLinkWithError:(id *)a0;
- (void)reportImmediateWRMMetric:(int)a0 value:(unsigned long long)a1;
- (void)setSuspendAudio;
- (char)setupCallerRTPChannelWithError:(id *)a0;
- (void)setupWRMAlertStateUpdateMessage;
- (char)treatAsCellular;
- (void)updateVideoQualityNotification:(double)a0;
- (void)wcmGetCallConfig:(unsigned int *)a0 targetBitrate:(unsigned int *)a1;
- (id)activeControlChannel;
- (id)addAudioPayload:(int)a0;
- (void)addLocalCallInfoToInviteDictionary:(id)a0;
- (char)addMediaConfigurationsToLocalConfiguration:(id)a0;
- (void)addScreenConfigToSDP:(id)a0;
- (void)adjustBitrateForConnectionType;
- (id)allPayloadsLocalFeaturesString;
- (int)applyFeatureListStringForPayload:(int)a0;
- (char)applyNegotiatedAudioSettings:(id *)a0;
- (void)applyNegotiatedMediaRecorderSettings;
- (void)applyNegotiatedSettings;
- (char)applyNegotiatedVideoSettings:(id *)a0;
- (unsigned int)audioRTPID;
- (double)audioReceivingBitrateKbps;
- (double)audioTransmittingBitrateKbps;
- (long long)calculateSIPEndAction:(char)a0 currentState:(long long)a1 error:(id)a2;
- (char)canNegotiateVideoPayload:(int)a0 supportedPayloads:(id)a1 isLocalOnCellular:(char)a2 isRemoteOnCellular:(char)a3;
- (char)canSendSIPInviteWithError:(id *)a0;
- (void)cancelConnectionTimeoutTimer;
- (void)cancelFirstRemoteFrameTimer;
- (void)checkAbnormalOWRDAndResetLagReference;
- (void)checkAndReportThermalIncreaseAudioOnly:(int)a0;
- (char)chooseDTXPayloads:(id)a0;
- (char)choosePayload:(id)a0;
- (char)chooseSecondaryPayloads:(id)a0;
- (char)chooseVideoPayload:(id)a0 operatingMode:(int)a1 isLocalOnCellular:(char)a2 isRemoteOnCellular:(char)a3;
- (void)cleanUpDisplayLink;
- (void)cleanUpVideoReceiver;
- (void)cleanUpVideoTransmitter;
- (void)cleanupMedia;
- (void)cleanupWRMClient;
- (unsigned int)codecBitmapForPayloads:(id)a0;
- (struct CGSize { double x0; double x1; })computeVisibleAspectRatioWithRemoteScreenAspectRatio:(struct CGSize { double x0; double x1; })a0 remoteExpectedAspectRatio:(struct CGSize { double x0; double x1; })a1 encodeWidth:(int)a2 encodeHeight:(int)a3;
- (char)configureLegacyTransportWithInviteInfo:(id)a0 error:(id *)a1;
- (void)configureRateController;
- (void)controlChannel:(id)a0 receivedData:(id)a1 transactionID:(unsigned int)a2 fromParticipant:(id)a3;
- (char)createAudioTransmitter:(id *)a0;
- (id)createInviteSDPWithError:(id *)a0;
- (char)createMediaQueueHandle:(id *)a0;
- (char)createRTPHandles:(id *)a0;
- (char)createSDP:(int *)a0 audioPayloadCount:(int)a1 secondaryPayloadTypes:(int *)a2 secondaryPayloadCount:(int)a3 videoPayloadTypes:(int *)a4 videoPayloadCount:(int)a5 localFeatureList:(id)a6 answerBandwidth:(int)a7 maxBandwidth:(int)a8 imageSizesSend:(struct imageTag **)a9 imageSendCount:(int *)a10 imageSizesRecv:(struct imageTag **)a11 imageRecvCount:(int *)a12 sdp:(char *)a13 numSDPBytes:(int *)a14 error:(id *)a15;
- (char)createVideoReceiverWithReportingAgent:(struct opaqueRTCReporting { } *)a0 fecHeaderV1Enabled:(char)a1 videoJBEnabled:(char)a2 error:(id *)a3;
- (unsigned char)defaultMediaControlInfoFECFeedbackVersion;
- (void)deregisterForReportingNotifications;
- (void)didReceiveCaptions:(id)a0;
- (void)disableSessionHealthMonitor;
- (char)disconnect:(id)a0 didRemoteCancel:(char)a1;
- (char)disconnectInternal:(char)a0 disconnectError:(id)a1 didRemoteCancel:(char)a2;
- (void)disconnectWithNoRemotePackets:(long long)a0;
- (void)disconnectWithNoRemotePackets:(long long)a0 timeoutUsed:(double)a1;
- (void)doSipEndAction:(int)a0 callID:(unsigned int)a1 error:(id)a2;
- (void)doSipEndProc:(id)a0;
- (char)doesVideoPayloadMatchRemoteImageAttributeRules:(id)a0;
- (void)enableAudio:(char)a0;
- (void)enableSessionHealthMonitor;
- (char)establishSIPDialogWithSDP:(id)a0 error:(id *)a1;
- (char)evaluateEnableRRx:(int *)a0;
- (int)fillMediaControlInfo:(void *)a0;
- (int)flushBasebandQueueWithPayloads:(id)a0 flushCount:(unsigned int *)a1;
- (void)gatherRealtimeStats:(struct __CFDictionary { } *)a0;
- (int)getAllCompatibleVideoPayloads:(int **)a0 forMediaType:(int)a1;
- (void)getAllPayloadsForAudio:(int **)a0 count:(int *)a1 secondaryPayloads:(int **)a2 secondaryCount:(int *)a3;
- (void)getAllPayloadsForScreen:(int **)a0 count:(int *)a1;
- (void)getAllPayloadsForVideo:(int **)a0 count:(int *)a1;
- (int)getAudioTxBitrate;
- (id)getCompatibleLocalFeatureListForPayloads:(int *)a0 count:(int)a1;
- (long long)getCurrentMicMode;
- (void)getVideoFeatureStatusSettings:(struct tagVCReportingClientSettingsPersist { char x0; char x1; char x2; char x3; char x4; char x5; char x6; unsigned long long x7; struct tagVCReportingClientExperimentSettings { BOOL x0; BOOL x1; } x8; } *)a0;
- (id)getVideoRuleForVideoMode:(unsigned long long)a0 interface:(int)a1 sessionBitrate:(int *)a2;
- (char)getVideoSettings:(int)a0 forInterface:(int)a1 payload:(int)a2 width:(int *)a3 height:(int *)a4 framerate:(int *)a5 bitRate:(int *)a6;
- (void)handleCellTechChange:(int)a0;
- (void)handleCellularMTUChanged:(unsigned short)a0;
- (void)handleDuplicationEnabled:(char)a0 activeConnection:(id)a1;
- (void)handleFirstConnectionSetup:(id)a0;
- (void)handleKeyExchangeCompleted;
- (void)handleMediaReceivedOverPeerToPeerLinkWithConnectionId:(int)a0;
- (void)handleMediaReceivedOverRelayLinkWithConnectionId:(int)a0;
- (void)handleMicModeNotification:(id)a0;
- (void)handleNewConnectionSetup:(id)a0 isInitialConnection:(char)a1;
- (void)handlePendingPrimaryConnectionChange;
- (void)handlePrimaryConnectionChanged:(id)a0 oldPrimaryConnection:(id)a1;
- (void)handleReceivedPiggybackBlobLegacy:(id)a0;
- (void)handleThermalPressureNotification:(id)a0;
- (void)handleVideoReceiverInitializationFailed;
- (id)initWithDeviceRole:(int)a0 transportType:(unsigned int)a1 isGKVoiceChat:(char)a2 reportingHierarchyToken:(id)a3;
- (char)initializeVideoReceiver:(id *)a0 reportingAgent:(struct opaqueRTCReporting { } *)a1 fecHeaderV1Enabled:(char)a2 videoJBEnabled:(char)a3;
- (char)initializeVideoTransmitter:(id *)a0 videoRules:(struct VCCSVideoTransmitterVideoRules_t { id x0; id x1; id x2; } *)a1 unpausing:(char)a2 reportingAgent:(struct opaqueRTCReporting { } *)a3 fecHeaderV1Enabled:(char)a4 isFECGeneratorEnabled:(char)a5;
- (int)interfaceForCurrentCall;
- (id)inviteDataForParticipantID:(id)a0 callID:(unsigned int *)a1 remoteInviteData:(id)a2 nonCellularCandidateTimeout:(double)a3 error:(id *)a4;
- (char)isBetterForSIPInviteWithSourceDestinationInfo:(struct tagVCSourceDestinationInfo { int x0; union { struct { struct tagIPPORT { int x0; char x1[16]; union { unsigned int x0; unsigned char x1[16]; } x2; unsigned short x3; } x0; struct tagIPPORT { int x0; char x1[16]; union { unsigned int x0; unsigned char x1[16]; } x2; unsigned short x3; } x1; struct { BOOL x0; unsigned short x1; } x2; } x0; struct { int x0; int x1; struct tagIPPORT { int x0; char x1[16]; union { unsigned int x0; unsigned char x1[16]; } x2; unsigned short x3; } x2; int x3; } x1; struct { unsigned int x0; struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; } x1; BOOL x2; } x2; struct { id x0; } x3; } x1; unsigned int x2; struct tagVCSourceDestinationInfo *x3; void *x4; } *)a0 thanSession:(id)a1;
- (char)isCallOngoing;
- (char)isFECGeneratorEnabled;
- (char)isLocalOrRemoteOnCellular;
- (char)isLowBitrateCodecPreferred:(id)a0;
- (char)isSIPEnabled;
- (char)isSecureMessagingRequired;
- (char)isValidVideoPayloadOverride:(id)a0;
- (void)logConnectionSuccess;
- (void)logDetailedNetworkInformation;
- (void)logIdentity:(struct __SecIdentity { } *)a0;
- (void)logPerfTimings;
- (int)mapPacketMultiplexModeToRTPMode:(long long)a0;
- (int)mapPacketMultiplexModeToSIPMode:(long long)a0;
- (const char *)matchedFeaturesStringForPayload:(int)a0;
- (unsigned int)maxBitrateForConnectionType;
- (unsigned char)mediaControlInfoFECFeedbackVersion;
- (void)mediaController:(void *)a0 mediaSuggestionDidChange:(struct VCRateControlMediaSuggestion { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; })a1;
- (void)messageVCMomentsRequest:(id)a0;
- (void)negotiateFeaturesString:(id)a0 forPayload:(int)a1;
- (char)negotiateMaxBandwidth:(int *)a0;
- (void)negotiateMediaMaxBandwidth;
- (char)negotiatePayloads:(id *)a0 withError:(id *)a1;
- (id)negotiatedAudioPayloadTypes;
- (int)negotiatedReceivingFramerate;
- (id)newCameraConfiguration;
- (id)newConfigForPayloadType:(int)a0;
- (id)newMediaBlobWithRemoteMediaBlob:(id)a0 localCallID:(unsigned int)a1 isLowBitrateCodecPreferred:(char)a2;
- (id)newMediaNegotiatorAudioConfigurationWithAllowAudioSwitching:(char)a0 useSBR:(char)a1 aacBlockSize:(unsigned int)a2;
- (id)newRemoteScreenAttributesForOrientation:(int)a0;
- (id)newSKEBlobWithRemoteSKEBlob:(id)a0;
- (id)newScreenConfigurationWithCameraConfiguration:(id)a0;
- (void)nofityDelegateReceivedRemoteFrame:(struct __CVBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 cameraStatusBits:(unsigned char)a2 newRemoteVideoAttributes:(id)a3 remoteScreenAttributes:(id)a4;
- (void)notifyDelegateActiveConnectionDidChange;
- (void)notifyDelegateAndEndCall:(long long)a0 didRemoteCancel:(char)a1 error:(id)a2;
- (void)notifyDelegateSessionStarted;
- (char)onCaptureFrame:(struct opaqueCMSampleBuffer { } *)a0 audioTS:(unsigned int)a1 audioHT:(double)a2 videoHT:(struct { long long x0; int x1; unsigned int x2; long long x3; })a3 cameraBits:(unsigned char)a4;
- (void)onPlayVideo:(struct __CVBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 cameraStatusBits:(unsigned char)a2;
- (void)packMeters:(char *)a0 withLength:(char *)a1;
- (unsigned int)parameterSetForPayload:(int)a0;
- (id)pickFeaturesStringForPayload:(int)a0 featureListDict:(id)a1 remote:(char)a2;
- (char)prepareSRTPWithError:(id *)a0;
- (void)primaryConnectionDidChangeTo:(id)a0 oldConnection:(id)a1;
- (unsigned int)primaryConnectionType;
- (void)processBlackFrame:(struct opaqueCMSampleBuffer { } *)a0;
- (void)processCancelRelayRequest:(id)a0 didOriginateRequest:(char)a1;
- (int)processMediaControlInfo:(void *)a0 isAudio:(char)a1;
- (void)processRelayRequestResponseDict:(id)a0 didOriginateRequest:(char)a1;
- (void)processRelayUpdateDict:(id)a0 didOriginateRequest:(char)a1;
- (void)processRemoteIPChange:(id)a0 callID:(unsigned int)a1;
- (void)processResolutionChangeToVideoRule:(id)a0 captureRule:(id)a1 featureListString:(id)a2;
- (void)processSIPMessage:(char *)a0 msgOut:(char *)a1 optional:(void *)a2 confIndex:(int *)a3;
- (void)processSymptomFromMessage:(id)a0 participantID:(id)a1 isLocalInitiated:(char)a2 isLocalSideOnly:(char)a3;
- (char)pullAudioSamples:(struct opaqueVCAudioBufferList { } *)a0 rtpTimestamp:(unsigned int *)a1 lastReceivedAudioTime:(double *)a2 padding:(char *)a3 paddingLength:(char *)a4 silence:(int *)a5;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { } *)a0;
- (void)rateController:(id)a0 targetBitrateDidChange:(unsigned int)a1 rateChangeCounter:(unsigned int)a2;
- (void)rcvdFirstRemoteFrame;
- (void)redundancyController:(id)a0 redundancyIntervalDidChange:(double)a1;
- (void)redundancyController:(id)a0 redundancyPercentageDidChange:(unsigned int)a1;
- (void)redundancyController:(id)a0 redundancyVectorDidChange:(struct { unsigned short x0; struct { unsigned char x0; unsigned char x1; } x1[32]; })a1;
- (void)registerForReportingNotifications;
- (void)releaseRTPHandles;
- (void)remoteCellTechStateUpdate:(int)a0 maxRemoteBitrate:(unsigned int)a1;
- (void)remotePauseDidChangeToState:(char)a0 forVideo:(char)a1;
- (void)reportClientPersistentSettings;
- (void)reportDashboardEndResult:(char)a0;
- (void)reportHandoverResultsWithDictionary:(id)a0 localBitrateCap:(int)a1 remoteBitrateCap:(int)a2;
- (void)reportOperatingMode;
- (void)reportSymptom:(unsigned int)a0;
- (void)reportWRMMetrics:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; unsigned long long x17; unsigned long long x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; unsigned long long x22; unsigned long long x23; unsigned long long x24; unsigned long long x25; unsigned long long x26; unsigned long long x27; unsigned long long x28; unsigned long long x29; unsigned long long x30; unsigned long long x31; unsigned long long x32; unsigned long long x33; unsigned long long x34; unsigned long long x35; unsigned long long x36; unsigned long long x37; } *)a0;
- (void)reportingMomentsWithRequest:(id)a0;
- (void)requestWRMNotification;
- (void)resetVideoRulesForInterface:(int)a0 videoReportingDictionary:(id)a1;
- (struct __SecIdentity { } *)retrieveIdentity;
- (void)schedulePrimaryConnectionChange:(id)a0 oldConnection:(id)a1;
- (void)sendARPLData:(id)a0 toCallID:(unsigned int)a1;
- (void)sendBasebandCodecMessage;
- (void)sendCallingModeMessage;
- (char)sendSIPInviteWithError:(id *)a0;
- (void)sendSymptomToRemote:(id)a0 groupID:(id)a1;
- (void)sendTimings;
- (void)sendWRMStatusUpdate:(const struct { int x0; int x1; int x2; unsigned int x3; } *)a0;
- (double)sessionReceivingBitrate;
- (double)sessionReceivingFramerate;
- (double)sessionTransmittingBitrate;
- (double)sessionTransmittingFramerate;
- (void)setCurrentEncodeRule:(id)a0;
- (void)setDuplicationFlag:(char)a0 withPreferredLocalLinkTypeForDuplication:(int)a1 notifyPeer:(char)a2;
- (void)setLocalIdentityForKeyExchange;
- (char)setMatchedFeaturesString:(char *)a0 localFeaturesString:(id)a1 remoteFeaturesString:(id)a2;
- (char)setMediaQueueStreamSettings;
- (char)setPauseAudio:(char)a0 error:(id *)a1;
- (char)setPauseAudio:(char)a0 force:(char)a1 error:(id *)a2;
- (char)setPauseVideo:(char)a0 error:(id *)a1;
- (char)setPauseVideo:(char)a0 force:(char)a1 error:(id *)a2;
- (void)setPeerProtocolVersion:(unsigned int)a0;
- (void)setPreWarmState:(char)a0;
- (char)setRTPPayloads:(id)a0 withError:(id *)a1;
- (void)setRemoteCallInfoFromInviteDictionary:(id)a0;
- (void)setResumeAudio;
- (void)setResumeVideo;
- (int)setSKEBlobOnTransportSession;
- (void)setSessionConferenceState:(unsigned int)a0 callID:(unsigned int)a1;
- (void)setSessionConferenceVisualRectangle:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 callID:(unsigned int)a1;
- (void)setUpFirstRemoteFrameTimer;
- (void)setWRMCoexMetrics:(id)a0;
- (void)setWRMMetricConfig:(struct { unsigned long long x0; } *)a0;
- (void)setWRMNotification:(struct { int x0; int x1; unsigned long long x2; char x3[128]; unsigned long long x4; unsigned long long x5; } *)a0;
- (void)setupAACELDPayload:(int)a0;
- (void)setupABTesting;
- (char)setupAudioCodecWithPayload:(int)a0;
- (char)setupAudioCookies;
- (void)setupAudioOnOffStateMessages;
- (void)setupAudioPauseMessages;
- (void)setupAudioPausedHBMessages;
- (void)setupBasebandCodecInfoMessages;
- (void)setupBitrateNegotiation;
- (void)setupCalleeSIPStartTimeout:(float)a0;
- (void)setupCallingModeMessages;
- (void)setupCellTechChangeMessages;
- (void)setupConnectionTimeoutTimerWithErrorCode:(int)a0 detailedCode:(int)a1 description:(id)a2 reason:(id)a3;
- (void)setupDTLSDefaults;
- (void)setupDisconnectMessage;
- (int)setupEncryptionWithKey:(const struct __CFData **)a0 confIndex:(int *)a1;
- (void)setupHandoverCandidateChangeMessage;
- (char)setupIDSConnectionForCallID:(unsigned int)a0 destination:(id)a1 socket:(int)a2 error:(id *)a3;
- (void)setupMessaging;
- (void)setupMomentsMessages;
- (void)setupPeerInfo:(id)a0 usingInviteData:(id)a1 isCaller:(char)a2 capabilities:(id)a3;
- (void)setupPiPStateChangeMessage;
- (void)setupPreferredInterfaceMessage;
- (void)setupSecureDataChannel;
- (void)setupSymptomEnabledMessage;
- (void)setupVideoPauseMessages;
- (void)setupWRMClient;
- (void)setupWRMCoexMetricsMessage;
- (char)shouldNotifyDelegateDidStartBeforeAudioSetup;
- (void)shouldSendBlackFrame:(char)a0;
- (void)shutdownVoiceChatFromRemoteSIPSignal:(int)a0 withReason:(const char *)a1;
- (int)sipCallback:(int)a0 callID:(unsigned int)a1 msgIn:(const char *)a2 msgOut:(char *)a3 optional:(void *)a4 confIndex:(int *)a5;
- (void)sipConnectThreadProc:(id)a0;
- (char)sipConnectWithError:(id *)a0;
- (char)startAFRC:(id *)a0;
- (void)startAWDStats;
- (void)startAudioIOWithCompletionHandler:(id /* block */)a0;
- (void)startAudioWithCompletionHandler:(id /* block */)a0;
- (char)startConnectionWithParticipantID:(id)a0 callID:(unsigned int)a1 usingInviteData:(id)a2 isCaller:(char)a3 capabilities:(id)a4 idsSocket:(int)a5 destination:(id)a6 error:(id *)a7;
- (char)startMediaQueue:(id *)a0;
- (char)startMediaWithPreNegotiatedSettings:(id *)a0;
- (void)startPausedHeartbeat;
- (char)startRateControl:(id *)a0;
- (char)startVCRC:(id *)a0;
- (char)startVideo:(char)a0 error:(id *)a1;
- (char)startVideoReceive:(id *)a0;
- (char)startVideoSend:(char)a0 error:(id *)a1;
- (char)stillWantsToRelay;
- (void)stopAudioIO:(id /* block */)a0;
- (void)stopPausedHeartbeat;
- (char)stopRateControl:(id *)a0;
- (char)stopVideo:(char)a0 error:(id *)a1;
- (char)stopVideoReceive:(id *)a0 isPausing:(char)a1;
- (char)stopVideoSend:(char)a0 error:(id *)a1;
- (void)thermalLevelDidChange:(int)a0;
- (void)timeoutUnfinishedConnection;
- (void)transportSession:(id)a0 cancelRelayRequest:(id)a1;
- (void)transportSession:(id)a0 connectionSetupDataDidChange:(id)a1;
- (void)transportSession:(id)a0 initiateRelayRequest:(id)a1;
- (void)transportSession:(id)a0 sendRelayResponse:(id)a1;
- (void)triggerInterfaceChange;
- (void)updateCachedConnectionState;
- (void)updateDeviceRole:(int)a0;
- (void)updateLastReceivedAudioTime;
- (void)updateLastReceivedPacket:(char)a0 packetType:(int)a1;
- (void)updateLastReceivedPacketWithTimestamp:(double)a0 packetType:(int)a1;
- (void)updateMaxPktLength;
- (void)updateNetworkCheckHint:(double)a0;
- (void)updateRelayedCallType:(unsigned char)a0;
- (void)updateRemoteMediaStallState:(double)a0;
- (void)updateRemoteMediaStallStateReporting:(double)a0;
- (void)updateSourcePlayoutTime:(const struct tagVCMediaTime { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; double x1; } *)a0;
- (void)updateStatistics:(struct tagVCStatisticsMessage { int x0; int x1; double x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; union { struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; double x7; double x8; double x9; double x10; double x11; char x12[64]; int x13; } x0; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; double x13; double x14; unsigned int x15; unsigned int x16; double x17; unsigned int x18; BOOL x19; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; double x5; double x6; double x7; unsigned int x8; unsigned int x9; } x20; struct { unsigned short x0; BOOL x1; BOOL x2; unsigned int x3; } x21; struct tagVCStatisticsECNStats { unsigned short x0; unsigned short x1; } x22; struct tagVCStatisticsECNStats { unsigned short x0; unsigned short x1; } x23; BOOL x24; BOOL x25; } x1; struct { double x0; double x1; double x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned long long x8; unsigned int x9; } x2; struct { unsigned int x0; BOOL x1; BOOL x2; BOOL x3; unsigned int x4; unsigned int x5; double x6; unsigned int x7; BOOL x8; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; double x5; double x6; double x7; unsigned int x8; unsigned int x9; } x9; } x3; struct { unsigned char x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; double x10; double x11; double x12; double x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; } x4; struct { unsigned int x0; unsigned int x1; unsigned int x2; double x3; } x5; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; double x5; double x6; double x7; unsigned int x8; unsigned int x9; } x6; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } x7; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; BOOL x6; unsigned int x7; } x8; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; BOOL x5; BOOL x6; double x7; double x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned long long x12; } x9; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned long long x10; int x11; unsigned int x12; unsigned short x13; union { struct { unsigned char x0; unsigned char x1; unsigned short x2; unsigned short x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; float x11; BOOL x12; unsigned short x13; unsigned int x14[6]; unsigned char x15; long long x16; unsigned short x17; float x18; float x19; float x20; float x21; float x22; } x0; struct { unsigned char x0; short x1; short x2; char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned short x8; unsigned short x9; unsigned char x10; } x1; } x14; } x10; struct tagVCStatisticsVideoLossFeedback { unsigned int x0; unsigned short x1; unsigned char x2; unsigned char x3; } x11; struct tagVCStatisticsLocalRCEvent { double x0; double x1; unsigned int x2; } x12; } x7; })a0;
- (void)updateVCRateControlWRMMetrics:(struct tagWRMMetricsInfo { BOOL x0; struct tagHANDLE *x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; int x17; void /* function */ *x18; struct { void *x0; void /* function */ *x1; void /* function */ *x2; } x19; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned long long x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; } *)a0;
- (void)updateVideoQualityStatusWithTime:(double)a0 isRemote:(char)a1;
- (void)vcSecureDataChannel:(id)a0 messageType:(unsigned int)a1 receivedData:(id)a2;
- (id)vcrcServerBag;
- (unsigned int)vcrcServerBagProfileNumber;
- (void)verifyFaceTimeClassicNotOnNewerBuilds;
- (unsigned int)videoRTPID;
- (char)videoReceiverInitializationError:(id *)a0 withDescription:(id)a1;
- (void)wcmSetCallConfig:(unsigned int)a0 interferenceLevel:(unsigned int)a1;

@end
