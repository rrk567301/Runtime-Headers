@class AVConferenceXPCClient, VideoAttributes, AVCPreviewCALayerHost, NSString, CALayer, NSObject;
@protocol OS_dispatch_queue, AVConferencePreviewClientDelegate;

@interface AVConferencePreview : NSObject {
    AVConferenceXPCClient *connection;
    char clientWantsPreview;
    unsigned int connectionAttempts;
    CALayer *caLayerFront;
    CALayer *caLayerBack;
    AVCPreviewCALayerHost *_caLayerHostFront;
    AVCPreviewCALayerHost *_caLayerHostBack;
    VideoAttributes *localVideoAttributes;
    struct CGSize { double width; double height; } localScreenPortraitAspectRatio;
    struct CGSize { double width; double height; } localScreenLandscapeAspectRatio;
    NSObject<AVConferencePreviewClientDelegate> *delegate;
    NSObject<OS_dispatch_queue> *avConferencePreviewQueue;
    NSObject<OS_dispatch_queue> *avConferencePreviewNotificationQueue;
    char _isPreviewRunning;
    char _zoomAvailable;
    char _CFAvailable;
    double _currentZoomFactor;
    double _maxZoomFactor;
    NSString *_localCameraUID;
}

@property (retain, nonatomic) NSObject<AVConferencePreviewClientDelegate> *delegate;

+ (id)AVConferencePreviewSingleton;
+ (char)isEyeContactSupported;

- (oneway void)release;
- (void)dealloc;
- (id)allocWithZone:(struct _NSZone { } *)a0;
- (id)autorelease;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (id)retain;
- (unsigned long long)retainCount;
- (void)invalidate;
- (void)startPreview;
- (void)stopPreview;
- (double)maxZoomFactor;
- (void)setCinematicFramingEnabled:(char)a0;
- (void)didChangeLocalScreenAttributes:(id)a0;
- (void)didGetSnapshot:(id)a0;
- (void)didStartPreview;
- (void)didPausePreview;
- (void)beginPIPToPreviewAnimation;
- (void)beginPreviewToPIPAnimation;
- (void)cameraDidBecomeAvailableForUniqueID:(id)a0;
- (void)cameraDidBecomeInterruptedForForUniqueID:(id)a0 reason:(long long)a1;
- (void)cameraZoomAvailabilityDidChange:(char)a0 currentZoomFactor:(double)a1 maxZoomFactor:(double)a2;
- (void)didChangeLocalCameraUID:(id)a0;
- (void)didChangeLocalVideoAttributes:(id)a0;
- (void)didReceiveCommError;
- (void)didReceiveErrorFromCameraUniqueID:(id)a0 error:(id)a1;
- (void)didStopPreview;
- (void)endPIPToPreviewAnimation;
- (void)endPreviewToPIPAnimation;
- (void)followSystemCameraDidChange:(char)a0;
- (void)getSnapshot;
- (char)isPreviewRunning;
- (id)localCameraUID;
- (id)localScreenAttributesForVideoAttributes:(id)a0;
- (id)localVideoAttributes;
- (id)localVideoLayer:(char)a0;
- (void)pausePreview;
- (void)setCameraZoomFactor:(double)a0;
- (void)setCameraZoomFactor:(double)a0 withRate:(double)a1;
- (void)setFollowSystemCameraEnabled:(char)a0;
- (void)setLocalCameraWithUID:(id)a0;
- (void)setLocalScreenAttributes:(id)a0;
- (void)setLocalVideoAttributes:(id)a0;
- (void)setLocalVideoLayer:(id)a0 front:(char)a1;
- (void)setLocalVideoLayerHost:(id)a0 front:(char)a1;
- (double)currentZoomFactor;
- (void)setLocalCamera:(unsigned int)a0;
- (void)addStickerWithURL:(id)a0 isFaceSticker:(char)a1 atPosition:(struct CGPoint { double x0; double x1; })a2 identifier:(id)a3;
- (void)applyTransform:(struct CATransform3D { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; })a0 forLayer:(id)a1;
- (void)cameraCFramingAvailabilityDidChange:(char)a0;
- (void)cleanupPreviewLayerHost:(id *)a0;
- (void)clearAllStickers:(char)a0;
- (void)connectLayer:(id)a0 layerHost:(id)a1 withContextId:(unsigned int)a2;
- (void)connectLayer:(id)a0 withSlot:(unsigned int)a1;
- (void)createPreviewCALayerHostForRootLayer:(id)a0 withContextId:(unsigned int)a1 front:(char)a2;
- (void)deregisterBlocksForDelegateNotifications;
- (char)isCameraZoomAvailable;
- (unsigned int)localCamera;
- (id)newXPCObjectForFenceHandle:(id *)a0 forLayerHost:(id)a1;
- (void)notifyCenterStageEnabled:(char)a0;
- (void)registerBlocksForDelegateNotifications;
- (void)resetLayersAfterServerDisconnect;
- (void)resetLocalCameraAfterServerDisconnect;
- (void)restartPreview;
- (void)setAnimoji:(id)a0;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forLayerHost:(id)a1;
- (void)setMemoji:(id)a0;
- (char)setRootPreviewLayer:(id)a0 front:(char)a1;
- (void)startPreviewUnpausing:(char)a0;

@end
