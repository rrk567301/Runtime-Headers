@class NSView, NSString, NSTimer, AXVOverlayWindow, ZMVisualEventNotificationManager, ZMFZScreenTransitionStateMachine, NSDictionary, AXVHighlightOutlineView;
@protocol ZMFZManagerDelegate, ZMVisualIndicating;

@interface ZMFZManager : NSObject <ZMVisualEventNotificationManagerDelegate, AXEEventTapListener, ZMFZScreenTransitionStateMachineDelegate> {
    char mIgnoreNextDeltaChange;
    char mSmoothImages;
    char mZoomFollowsFocus;
    long long mObservingMouseMove;
    unsigned long long mPanningMode;
    struct CGPoint { double x; double y; } mZoomOrigin;
    double mSpeedFactor;
    double mNearPoint;
    double mFarPoint;
    unsigned int mCGSConnectionID;
    NSTimer *mRepeatTimer;
    NSDictionary *mFocusDidChangeDict;
    double mLastAnimatedZoomTime;
    double mLastUAFocusTime;
    double mLastPotentialFocusTrigger;
    char mObservingFocusChangeNotifications;
}

@property (nonatomic) char isStarted;
@property (nonatomic) char zoomedOutForTouchBarZoom;
@property (nonatomic) double currentZoomFactor;
@property (retain, nonatomic) ZMFZScreenTransitionStateMachine *_screenTransitionStateMachine;
@property (nonatomic) double _zoomFactorBeforeDFRHUDShowing;
@property (retain, nonatomic) ZMVisualEventNotificationManager *_visualEventNotificationManager;
@property (retain, nonatomic) AXVOverlayWindow *_overlayWindow;
@property (retain, nonatomic) NSView<ZMVisualIndicating> *_visualEventIndicatorView;
@property (nonatomic) unsigned long long _currentVisualEventIndicatorStyle;
@property (nonatomic) char _isMouseDetached;
@property (nonatomic) struct CGPoint { double x; double y; } _mouseDetachStartMouseLocation;
@property (nonatomic) struct CGPoint { double x; double y; } _mouseDetachStartZoomOriginLocation;
@property (nonatomic) char _poroOn;
@property (nonatomic) char _showPreviewRectangle;
@property (retain, nonatomic) AXVHighlightOutlineView *_zoomPreviewView;
@property (retain, nonatomic) AXVOverlayWindow *_zoomPreviewOverlayWindow;
@property (nonatomic) char _swipeScrollDirectionIsNatural;
@property (weak, nonatomic) id<ZMFZManagerDelegate> delegate;
@property (nonatomic) char zoomActionsCurrentlyDisabled;
@property (readonly, nonatomic) char isZoomedIn;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } currentZoomOrigin;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentZoomRegion;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)keyPathsForValuesAffectingIsZoomedIn;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)start;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)stop;
- (char)handleEvent:(const struct UAEvent { long long x0; unsigned int x1; unsigned int x2; double x3; struct CGPoint { double x0; double x1; } x4; struct CGPoint { double x0; double x1; } x5; unsigned long long x6; unsigned int x7; unsigned int x8; int x9; } *)a0;
- (void)zoomOut;
- (void)zoomIn;
- (unsigned int)_cgsConnectionID;
- (struct __CGEvent { } *)eventTapManager:(id)a0 activelyTappedEvent:(struct __CGEvent { } *)a1 type:(unsigned int)a2 withProxy:(struct __CGEventTapProxy { } *)a3;
- (void)eventTapManager:(id)a0 passivelyTappedKeyboardEvent:(id)a1 withProxy:(struct __CGEventTapProxy { } *)a2;
- (char)isSafeToQuit;
- (double)_pinZoomFactor:(double)a0;
- (void)_ensureVisualEventIndicatorViewStyleMatchesPreferences;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_globalScreenRect;
- (void)_handleDFRHUDHiding:(id)a0;
- (void)_handleDFRHUDShowing:(id)a0;
- (void)_handleUAFocusChange:(id)a0;
- (void)_handleZoomLevelChangeEvent:(const struct UAEvent { long long x0; unsigned int x1; unsigned int x2; double x3; struct CGPoint { double x0; double x1; } x4; struct CGPoint { double x0; double x1; } x5; unsigned long long x6; unsigned int x7; unsigned int x8; int x9; } *)a0;
- (char)_hotKeyAction:(const struct UAEvent { long long x0; unsigned int x1; unsigned int x2; double x3; struct CGPoint { double x0; double x1; } x4; struct CGPoint { double x0; double x1; } x5; unsigned long long x6; unsigned int x7; unsigned int x8; int x9; } *)a0;
- (void)_hotKeyEvent:(const struct UAEvent { long long x0; unsigned int x1; unsigned int x2; double x3; struct CGPoint { double x0; double x1; } x4; struct CGPoint { double x0; double x1; } x5; unsigned long long x6; unsigned int x7; unsigned int x8; int x9; } *)a0;
- (char)_isExpectedZoomFactor:(double)a0;
- (void)_moveZoomToFocusRect:(id)a0;
- (void)_registerForFocusChangeNotifications;
- (void)_repeatedHotKey:(id)a0;
- (void)_respondToFocusChange;
- (int)_setZoomParametersWithOrigin:(struct CGPoint { double x0; double x1; } *)a0 factor:(double)a1 interpolate:(char)a2 warpCursor:(char)a3 velocity:(double)a4;
- (void)_signalPauseListeningForSettingsNotifications;
- (void)_signalResumeListeningForSettingsNotifications;
- (void)_signalStartListeningForSettingsNotifications;
- (void)_signalStopListeningForSettingsNotifications;
- (void)_swipeScrollDirectionChanged:(id)a0;
- (void)_toggleSmoothing;
- (void)_toggleZoom;
- (void)_toggleZoomFollowKeyboardFocus;
- (void)_trackMouseWithZoomedScreen:(const struct UAEvent { long long x0; unsigned int x1; unsigned int x2; double x3; struct CGPoint { double x0; double x1; } x4; struct CGPoint { double x0; double x1; } x5; unsigned long long x6; unsigned int x7; unsigned int x8; int x9; } *)a0;
- (void)_unregisterForFocusChangeNotifications;
- (void)_updateEventListenersBasedOnZoomState;
- (void)_updatePreviewOverlayView;
- (void)_updatePreviewWindow;
- (void)_updateSwipeScrollDirectionBasedOnPreferences;
- (unsigned long long)_visualEventIndicatorStyle;
- (void)_zoomFocusDidChangeNotification:(id)a0;
- (char)_zoomIn:(char)a0 toPoint:(struct CGPoint { double x0; double x1; } *)a1 usingPrefZoomFactor:(char)a2;
- (void)_zoomSnapBack:(id)a0;
- (void)applySettingsFromPreferencesAndForceUpdateZoom:(char)a0;
- (void)handlePossibleFocusTrigger;
- (void)notableWindowAppeared:(id)a0;
- (void)stateMachine:(id)a0 moveMouseTo:(struct CGPoint { double x0; double x1; })a1;
- (void)stateMachine:(id)a0 zoomToFactor:(double)a1 zoomOrigin:(struct CGPoint { double x0; double x1; })a2 suppressAnimation:(char)a3;

@end
