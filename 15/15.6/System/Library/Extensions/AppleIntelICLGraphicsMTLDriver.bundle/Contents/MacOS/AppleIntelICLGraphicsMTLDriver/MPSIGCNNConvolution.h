@class NSString;
@protocol MTLComputePipelineState, MTLCommandBuffer, MTLDevice, MTLTexture, MTLBuffer, MTLCommandQueue;

@interface MPSIGCNNConvolution : MPSExternalCNNUnary <MPSExternalCNNConvolution> {
    id<MTLDevice> igDevice;
    struct convKernelInfo { id<MTLCommandQueue> reorderCmdQueue; id<MTLCommandBuffer> reorderCmdBuf; id<MTLComputePipelineState> conv_naive; id<MTLComputePipelineState> conv_accumulator; id<MTLComputePipelineState> conv_fp16_opt; id<MTLComputePipelineState> conv_fp32_opt; id<MTLComputePipelineState> conv_fp32_b2_opt; id<MTLComputePipelineState> optimized; id<MTLComputePipelineState> fullyConnected; id<MTLComputePipelineState> optimizedReducedPrecision; id<MTLBuffer> weights; id<MTLTexture> weightsTex; id<MTLBuffer> biases; id<MTLBuffer> A; struct optimizedConvKernelParams { unsigned int outBlockWidth; unsigned int outBlockHeight; unsigned int prefetch; unsigned int input_block_array_size; unsigned int input_block_width; BOOL useOptimizedKernel; unsigned int outBatchBlockWidth; unsigned int outBatchBlockHeight; BOOL useAccBatchKernel; } optimizedParams; struct fusedWinogradParams { unsigned int IDEPTH; unsigned int ODEPTH; unsigned int OWIDTH; int inputOffsetX; int inputOffsetY; unsigned int inputFeatureSliceOffset; int outputOffsetX; int outputOffsetY; unsigned int outputFeatureSliceOffset; int activationFunctionType; float activationParameterA; float activationParameterB; } fusedWinoParams; struct sepWinogradParams { unsigned int M; unsigned int K; unsigned int N; unsigned int IDEPTH; unsigned int ODEPTH; unsigned int TROWS; unsigned int KROWSW; unsigned int OCOLS; unsigned int NR_TILES_X; unsigned int inputOffsetX; unsigned int inputOffsetY; unsigned int inputFeatureSliceOffset; int activationFunctionType; float activationParameterA; float activationParameterB; unsigned int clipRectW; unsigned int clipRectH; unsigned int outputOffsetX; unsigned int outputOffsetY; unsigned int outputFeatureSliceOffset; } sepWinoParams; struct cnnGEMMKernelInfo *gemmInfo; struct cnnSepWinogradKernelInfo *sepWinogradInfo; struct cnnFusedWinogradKernelInfo *fusedWinogradInfo; struct cnnBfloatKernelInfo *bfloatInfo; struct cnnMBR1x1KernelInfo *MBR1x1Info; char gpuInitWeights; id<MTLComputePipelineState> conv_grad_naive; id<MTLComputePipelineState> conv_grad_opt; id<MTLComputePipelineState> conv_grad_opt_spatial; id<MTLComputePipelineState> conv_grad_opt_spatial_clamp_to_zero; id<MTLComputePipelineState> conv_grad_weights_naive; id<MTLComputePipelineState> conv_grad_weights_opt; } kernelInfo;
    int winogradFuncType;
    struct ConvParams { unsigned int kernelWidth; unsigned int kernelHeight; unsigned int inputFeatureChannels; unsigned int outputFeatureChannels; unsigned int groups; unsigned int strideX; unsigned int strideY; unsigned int dilationRateX; unsigned int dilationRateY; unsigned int inputWeightsDataType; unsigned int weightsQuantizationType; void *rangesForUInt8Kernel; float *lookupTableForUInt8Kernel; struct MPSCNNBatchNormParamsForInference *batchNormalizationParameters; BOOL depthwiseConvolution; BOOL isFullyConnected; BOOL convGradient; BOOL canUseOptimizedKernel; BOOL canUseOptimizedFCKernel; BOOL canUseAccBasedConvKernel; BOOL canUseMBR1x1ConvKernel; BOOL canUseGEMMBasedConvKernel; BOOL canUseFusedWinogradBasedConvKernel; BOOL canUseSepWinogradBasedConvKernel; BOOL useBias; BOOL useActivation; BOOL clampToZero; int neuronType; float *activationParameterA; float activationParameterB; } cp;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (unsigned long long)maxBatchSize;
- (unsigned long long)encodeBatchToCommandBuffer:(id)a0 computeCommandEncoder:(id)a1 options:(unsigned long long)a2 pluginOptions:(unsigned long long)a3 sourceTextures:(id)a4 sourceInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a5 destinationTextures:(id)a6 destinationInfo:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x3; unsigned long long x4; } *)a7 predicationBuffer:(id)a8 predicationOffset:(unsigned long long)a9;
- (unsigned long long)encodeToCommandBuffer:(id)a0 computeCommandEncoder:(id)a1 options:(unsigned long long)a2 sourceTexture:(id)a3 sourceInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a4 destinationTexture:(id)a5 destinationInfo:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x3; unsigned long long x4; } *)a6;
- (void)exportWeightsAndBiasesWithCommandBuffer:(id)a0 encoder:(id)a1 weights:(id)a2 weightsDataType:(unsigned int)a3 biases:(id)a4 predicationBuffer:(id)a5 predicationOffset:(unsigned long long)a6;
- (void)reloadWeightsAndBiases:(struct MPSPluginCNNConvolutionData { unsigned int x0; int x1; unsigned int x2; void *x3; float *x4; float *x5; struct MPSCNNBatchNormParamsForInference **x6; } *)a0;
- (void)reloadWeightsAndBiasesWithCommandBuffer:(id)a0 encoder:(id)a1 weights:(id)a2 weightsDataType:(unsigned int)a3 biases:(id)a4 predicationBuffer:(id)a5 predicationOffset:(unsigned long long)a6;
- (unsigned long long)MPSIG_fallbackToDirectConv:(int)a0 activationParameterA:(float *)a1 activationParameterB:(float)a2 prec:(unsigned long long)a3;
- (unsigned long long)getTensorShape:(id)a0;
- (unsigned long long)MPSIG_recheckAndSetKernels:(unsigned long long)a0 sourceTexture:(id)a1 sourceInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a2 destinationTexture:(id)a3 destinationInfo:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x3; unsigned long long x4; } *)a4 prec:(unsigned long long)a5 batchSize:(int)a6;
- (char)canSupport;
- (int)getFusedWinogradBasedFuncType:(id)a0 dstTex:(id)a1 sourceInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a2 destinationInfo:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x3; unsigned long long x4; } *)a3 inFC:(unsigned long long)a4 outFC:(unsigned long long)a5 prec:(unsigned long long)a6;
- (int)getGEMMBasedFuncType:(id)a0 dstTex:(id)a1 inFC:(unsigned long long)a2 outFC:(unsigned long long)a3 prec:(unsigned long long)a4;
- (int)getSepWinogradBasedFuncType:(id)a0 dstTex:(id)a1 destinationInfo:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x3; unsigned long long x4; } *)a2 inFC:(unsigned long long)a3 outFC:(unsigned long long)a4 prec:(unsigned long long)a5;
- (char)initMPSPluginIntelCNNConvolution:(const struct MPSPluginCNNConvolutionData { unsigned int x0; int x1; unsigned int x2; void *x3; float *x4; float *x5; struct MPSCNNBatchNormParamsForInference **x6; } *)a0;
- (id)initPluginWithDevice:(id)a0 Descriptor:(id)a1 dataSource:(const struct MPSPluginCNNConvolutionData { unsigned int x0; int x1; unsigned int x2; void *x3; float *x4; float *x5; struct MPSCNNBatchNormParamsForInference **x6; } *)a2;
- (char)isSimpleActivation:(struct ConvParams { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; float **x11; struct MPSCNNBatchNormParamsForInference *x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; BOOL x24; BOOL x25; int x26; float *x27; float x28; })a0;
- (void)releaseFusedWinogradMem:(struct cnnFusedWinogradKernelInfo { int x0; int x1; struct CHAL_DECODED_BINARY_INFO *x2; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x3; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x4; id x5; id x6; id x7; } *)a0;
- (void)releaseGEMMConvMem:(struct cnnGEMMKernelInfo { id x0; id x1; id x2; id x3; int x4; struct CHAL_DECODED_BINARY_INFO *x5; struct CHAL_DECODED_BINARY_INFO *x6; struct CHAL_DECODED_BINARY_INFO *x7; struct CHAL_DECODED_BINARY_INFO *x8; struct CHAL_DECODED_BINARY_INFO *x9; struct CHAL_DECODED_BINARY_INFO *x10; struct CHAL_DECODED_BINARY_INFO *x11; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x12; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x13; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x14; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x15; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x16; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x17; unsigned long long x18; int x19; float x20; float x21; } *)a0;
- (void)releaseMBR1x1KernelInfo;
- (void)releaseMBR1x1Mem:(struct cnnMBR1x1KernelInfo { struct CHAL_DECODED_BINARY_INFO *x0; struct CHAL_DECODED_BINARY_INFO *x1; struct CHAL_DECODED_BINARY_INFO *x2; id x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; float x11; float x12; unsigned int x13; } *)a0;
- (void)releaseSepWinogradMem:(struct cnnSepWinogradKernelInfo { int x0; int x1; int x2; int x3; struct CHAL_DECODED_BINARY_INFO *x4; struct CHAL_DECODED_BINARY_INFO *x5; struct CHAL_DECODED_BINARY_INFO *x6; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x7; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x8; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x9; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x10; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x11; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x12; id x13; id x14; id x15; id x16; id x17; } *)a0;
- (char)setInitParams_MBR1x1;
- (char)setInitParams_fusedwinograd:(unsigned long long)a0 outFC:(unsigned long long)a1;
- (char)setInitParams_gemm:(struct gemmConvTexInfo { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 inFC:(unsigned long long)a1 outFC:(unsigned long long)a2;
- (char)setInitParams_sepwinograd:(unsigned long long)a0 outFC:(unsigned long long)a1;

@end
