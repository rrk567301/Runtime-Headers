@class NSObject;
@protocol OS_dispatch_data;

@interface MTLIGFunctionVariant : MTLFunctionVariant {
    NSObject<OS_dispatch_data> *mCompilerOutputMap;
    void *mCompilerOutputData;
    unsigned long long mCompilerOutputSize;
    struct unique_ptr<AIR::SCompilerOutputVertexShader, AIR::Serialization::uniqueFree<AIR::SCompilerOutputVertexShader>> { struct __compressed_pair<AIR::SCompilerOutputVertexShader *, AIR::Serialization::uniqueFree<AIR::SCompilerOutputVertexShader>> { struct SCompilerOutputVertexShader *__value_; } __ptr_; } mVsCompilerSerialOut;
    struct unique_ptr<AIR::SCompilerOutputPixelShader, AIR::Serialization::uniqueFree<AIR::SCompilerOutputPixelShader>> { struct __compressed_pair<AIR::SCompilerOutputPixelShader *, AIR::Serialization::uniqueFree<AIR::SCompilerOutputPixelShader>> { struct SCompilerOutputPixelShader *__value_; } __ptr_; } mPsCompilerSerialOut;
    struct unique_ptr<AIR::SCompilerOutputHullShader, AIR::Serialization::uniqueFree<AIR::SCompilerOutputHullShader>> { struct __compressed_pair<AIR::SCompilerOutputHullShader *, AIR::Serialization::uniqueFree<AIR::SCompilerOutputHullShader>> { struct SCompilerOutputHullShader *__value_; } __ptr_; } mHsCompilerSerialOut;
    struct unique_ptr<AIR::SCompilerOutputDomainShader, AIR::Serialization::uniqueFree<AIR::SCompilerOutputDomainShader>> { struct __compressed_pair<AIR::SCompilerOutputDomainShader *, AIR::Serialization::uniqueFree<AIR::SCompilerOutputDomainShader>> { struct SCompilerOutputDomainShader *__value_; } __ptr_; } mDsCompilerSerialOut;
    struct MTLIGCompilerStatisticsRec { void *kernelBinary; unsigned int kernelBinarySize; unsigned int compileTimeInMilliSeconds; unsigned char SIMDSize; unsigned int threadMem; } stats;
    unsigned int inlineSamplerBindfulOffset;
    unsigned int inlineSamplerBindlessOffsets[16];
    unsigned int inlineSamplerBindlessMask;
    unsigned int inlineSamplerLocationIndex[16];
    unsigned long long inlineSamplerSzAllocated;
    BOOL inlineConstantEnable;
    unsigned int inlineConstantPushOffset;
    unsigned long long inlineConstantStatelessAddress;
    unsigned long long inlineConstantSzAllocated;
    struct IGVertexShaderInfo { void /* function */ **_vptr$ShaderInfo; void *m_pKernelDescriptor; void *m_pKernelDescriptorHigh; void *m_pKernelDescriptorHighLocal; void *m_pKernelOutput; void *m_pKernelOutputHigh; void *m_pBTILayout; BOOL m_isValid; unsigned int m_threadCount; unsigned int m_scratchSize; unsigned int m_scratchSizeAligned; unsigned int m_perThreadScratchSpace; unsigned int m_perThreadScratchSizeExp; unsigned int m_kernelSize; unsigned int m_kernelSizeAligned; unsigned int m_constantBuffer0ReadLength; unsigned int m_constantBuffer1ReadLength; unsigned int m_constantBuffer2ReadLength; unsigned int m_constantBuffer3ReadLength; unsigned int m_numConstantDecls; unsigned int m_maxConstantHandle; unsigned long long m_constantDeclMask; void *m_pKernelProgramPtr; unsigned int m_kernelProgramSize; unsigned int m_simplePushCount; struct gtpinShaderInformation_s { unsigned long long kernelId; unsigned int kernelProgramSize; char *pKernelProgram; } m_gtpinShaderInfo; struct inlineSamplerStateInfo_s { unsigned int *inlineSamplerBindlessOffsets; unsigned int inlineSamplerBindlessMask; unsigned int *inlineSamplerLocationIndex; } m_inlineSamplerStateInfo; unsigned int m_indirectionEnableMask; unsigned int m_indirectionBufferIndex[3]; } vsInfo;
    struct IGPixelShaderInfo { void /* function */ **_vptr$ShaderInfo; void *m_pKernelDescriptor; void *m_pKernelDescriptorHigh; void *m_pKernelDescriptorHighLocal; void *m_pKernelOutput; void *m_pKernelOutputHigh; void *m_pBTILayout; BOOL m_isValid; unsigned int m_threadCount; unsigned int m_scratchSize; unsigned int m_scratchSizeAligned; unsigned int m_perThreadScratchSpace; unsigned int m_perThreadScratchSizeExp; unsigned int m_kernelSize; unsigned int m_kernelSizeAligned; unsigned int m_constantBuffer0ReadLength; unsigned int m_constantBuffer1ReadLength; unsigned int m_constantBuffer2ReadLength; unsigned int m_constantBuffer3ReadLength; unsigned int m_numConstantDecls; unsigned int m_maxConstantHandle; unsigned long long m_constantDeclMask; void *m_pKernelProgramPtr; unsigned int m_kernelProgramSize; unsigned int m_simplePushCount; struct gtpinShaderInformation_s { unsigned long long kernelId; unsigned int kernelProgramSize; char *pKernelProgram; } m_gtpinShaderInfo; struct inlineSamplerStateInfo_s { unsigned int *inlineSamplerBindlessOffsets; unsigned int inlineSamplerBindlessMask; unsigned int *inlineSamplerLocationIndex; } m_inlineSamplerStateInfo; unsigned int m_indirectionEnableMask; unsigned int m_indirectionBufferIndex[3]; void *m_pPsKernelProgramPtr[3]; unsigned int m_PsKernelProgramSize[3]; struct gtpinShaderInformation_s { unsigned long long kernelId; unsigned int kernelProgramSize; char *pKernelProgram; } m_gtpinPixelShaderSimdInfo[3]; } psInfo;
    struct IGHullShaderInfo { void /* function */ **_vptr$ShaderInfo; void *m_pKernelDescriptor; void *m_pKernelDescriptorHigh; void *m_pKernelDescriptorHighLocal; void *m_pKernelOutput; void *m_pKernelOutputHigh; void *m_pBTILayout; BOOL m_isValid; unsigned int m_threadCount; unsigned int m_scratchSize; unsigned int m_scratchSizeAligned; unsigned int m_perThreadScratchSpace; unsigned int m_perThreadScratchSizeExp; unsigned int m_kernelSize; unsigned int m_kernelSizeAligned; unsigned int m_constantBuffer0ReadLength; unsigned int m_constantBuffer1ReadLength; unsigned int m_constantBuffer2ReadLength; unsigned int m_constantBuffer3ReadLength; unsigned int m_numConstantDecls; unsigned int m_maxConstantHandle; unsigned long long m_constantDeclMask; void *m_pKernelProgramPtr; unsigned int m_kernelProgramSize; unsigned int m_simplePushCount; struct gtpinShaderInformation_s { unsigned long long kernelId; unsigned int kernelProgramSize; char *pKernelProgram; } m_gtpinShaderInfo; struct inlineSamplerStateInfo_s { unsigned int *inlineSamplerBindlessOffsets; unsigned int inlineSamplerBindlessMask; unsigned int *inlineSamplerLocationIndex; } m_inlineSamplerStateInfo; unsigned int m_indirectionEnableMask; unsigned int m_indirectionBufferIndex[3]; } hsInfo;
    struct IGDomainShaderInfo { void /* function */ **_vptr$ShaderInfo; void *m_pKernelDescriptor; void *m_pKernelDescriptorHigh; void *m_pKernelDescriptorHighLocal; void *m_pKernelOutput; void *m_pKernelOutputHigh; void *m_pBTILayout; BOOL m_isValid; unsigned int m_threadCount; unsigned int m_scratchSize; unsigned int m_scratchSizeAligned; unsigned int m_perThreadScratchSpace; unsigned int m_perThreadScratchSizeExp; unsigned int m_kernelSize; unsigned int m_kernelSizeAligned; unsigned int m_constantBuffer0ReadLength; unsigned int m_constantBuffer1ReadLength; unsigned int m_constantBuffer2ReadLength; unsigned int m_constantBuffer3ReadLength; unsigned int m_numConstantDecls; unsigned int m_maxConstantHandle; unsigned long long m_constantDeclMask; void *m_pKernelProgramPtr; unsigned int m_kernelProgramSize; unsigned int m_simplePushCount; struct gtpinShaderInformation_s { unsigned long long kernelId; unsigned int kernelProgramSize; char *pKernelProgram; } m_gtpinShaderInfo; struct inlineSamplerStateInfo_s { unsigned int *inlineSamplerBindlessOffsets; unsigned int inlineSamplerBindlessMask; unsigned int *inlineSamplerLocationIndex; } m_inlineSamplerStateInfo; unsigned int m_indirectionEnableMask; unsigned int m_indirectionBufferIndex[3]; } dsInfo;
    unsigned long long variantID;
    unsigned long long kernelPointer1;
    unsigned long long kernelPointer2;
    unsigned long long kernelPointer3;
    unsigned long long kernelSizeAllocated;
    unsigned long long scratchPointer1;
    unsigned long long scratchPointer2;
    unsigned long long scratchSpaceAllocated;
    char *kernelCPUAddress1;
    char *kernelCPUAddress2;
    char *kernelCPUAddress3;
    unsigned int kernelSpace1;
    unsigned int kernelSpace2;
    unsigned int kernelSpace3;
    BOOL requiresRelocation;
}

- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)extractHSCompilerOutput:(struct IGHullShaderInfo { void /* function */ **x0; void *x1; void *x2; void *x3; void *x4; void *x5; void *x6; BOOL x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned long long x21; void *x22; unsigned int x23; unsigned int x24; struct gtpinShaderInformation_s { unsigned long long x0; unsigned int x1; char *x2; } x25; struct inlineSamplerStateInfo_s { unsigned int *x0; unsigned int x1; unsigned int *x2; } x26; unsigned int x27; unsigned int x28[3]; } *)a0 device:(id)a1;
- (void)extractVSCompilerOutput:(struct IGVertexShaderInfo { void /* function */ **x0; void *x1; void *x2; void *x3; void *x4; void *x5; void *x6; BOOL x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned long long x21; void *x22; unsigned int x23; unsigned int x24; struct gtpinShaderInformation_s { unsigned long long x0; unsigned int x1; char *x2; } x25; struct inlineSamplerStateInfo_s { unsigned int *x0; unsigned int x1; unsigned int *x2; } x26; unsigned int x27; unsigned int x28[3]; } *)a0 device:(id)a1;
- (void)extractDSCompilerOutput:(struct IGDomainShaderInfo { void /* function */ **x0; void *x1; void *x2; void *x3; void *x4; void *x5; void *x6; BOOL x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned long long x21; void *x22; unsigned int x23; unsigned int x24; struct gtpinShaderInformation_s { unsigned long long x0; unsigned int x1; char *x2; } x25; struct inlineSamplerStateInfo_s { unsigned int *x0; unsigned int x1; unsigned int *x2; } x26; unsigned int x27; unsigned int x28[3]; } *)a0 device:(id)a1;
- (void)extractPSCompilerOutput:(struct IGPixelShaderInfo { void /* function */ **x0; void *x1; void *x2; void *x3; void *x4; void *x5; void *x6; BOOL x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned long long x21; void *x22; unsigned int x23; unsigned int x24; struct gtpinShaderInformation_s { unsigned long long x0; unsigned int x1; char *x2; } x25; struct inlineSamplerStateInfo_s { unsigned int *x0; unsigned int x1; unsigned int *x2; } x26; unsigned int x27; unsigned int x28[3]; void *x29[3]; unsigned int x30[3]; struct gtpinShaderInformation_s { unsigned long long x0; unsigned int x1; char *x2; } x31[3]; } *)a0 device:(id)a1;
- (char)allocateIndirectWithDevice:(id)a0 kernelProgram1:(void *)a1 kernelSize1:(unsigned int)a2 kernelProgram2:(void *)a3 kernelSize2:(unsigned int)a4 kernelProgram3:(void *)a5 kernelSize3:(unsigned int)a6 scratchSize1:(unsigned int)a7 scratchSize2:(unsigned int)a8;
- (BOOL)generateInlineConstantWithDevice:(id)a0 functionType:(unsigned int)a1;
- (unsigned int)generateInlineSamplerHash:(unsigned int)a0 samplerStates:(struct IGAlignedSamplerTable { struct SGfxSamplerState { unsigned char x0 : 1; unsigned short x1 : 13; unsigned char x2 : 3; unsigned char x3 : 3; unsigned char x4 : 2; unsigned char x5 : 5; unsigned char x6 : 2; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; unsigned char x10 : 1; unsigned char x11 : 3; unsigned char x12 : 1; unsigned char x13 : 2; unsigned char x14 : 1; unsigned short x15 : 12; unsigned short x16 : 12; unsigned char x17 : 1; unsigned char x18 : 1; unsigned char x19 : 1; unsigned char x20 : 1; unsigned char x21 : 2; unsigned int x22 : 18; unsigned char x23 : 8; unsigned char x24 : 3; unsigned char x25 : 3; unsigned char x26 : 3; unsigned char x27 : 1; unsigned char x28 : 1; unsigned char x29 : 2; unsigned char x30 : 1; unsigned char x31 : 1; unsigned char x32 : 1; unsigned char x33 : 1; unsigned char x34 : 1; unsigned char x35 : 1; unsigned char x36 : 3; unsigned char x37 : 2; unsigned char x38 : 8; } x0; unsigned int x1[4]; } *)a1;
- (const void *)getCompilerOutputData;
- (id)getCompilerOutputMap;
- (unsigned long long)getCompilerOutputSize;
- (unsigned int)getFreeSamplerSlot:(unsigned int)a0;
- (char)getInlineConstantData:(unsigned int)a0 constantSize:(unsigned int *)a1 constantData:(void **)a2 constantPushOffset:(unsigned int *)a3;
- (id)initWithCompilerOutput:(id)a0 device:(id)a1;
- (BOOL)isPostTessellationVertexFunction;
- (void)generateInlineSamplerWithDevice:(id)a0 samplerMask:(unsigned long long)a1 samplerStates:(const unsigned long long *)a2 functionType:(int)a3 isPosh:(BOOL)a4;
- (unsigned int)getSamplerBindingIndex:(int)a0 isPosh:(BOOL)a1 inputIndex:(unsigned int)a2;

@end
