@class NSMutableDictionary;

@interface GFX9_MPSPlugin : GFX9AMD_MPSPlugin {
    struct GFX9_MPSPluginMembersRec { NSMutableDictionary *dict; NSMutableDictionary *cachedComputePipelineStatesDict; struct shared_ptr<Tensile::SolutionLibrary<Tensile::ContractionProblem, Tensile::ContractionSolution>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } tensileLibrary; void *mpsPlist; } m_gfx9_members;
}

- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (id)initWithDevice:(id)a0;
- (void)checkAndInitializePlugin;
- (char)createComputePipelineStateForKey:(id)a0;
- (void)createComputePipelineStateFromTensile:(void *)a0;
- (void)createTensileLibrary;
- (id)getCachedComputePipelineStatesDict;
- (struct AMDGPU { void /* function */ **x0; int x1; int x2; int x3; int x4; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x5; })getHardware;
- (id)getIsaHardwareString;
- (struct shared_ptr<Tensile::ContractionSolution> { struct ContractionSolution *x0; struct __shared_weak_count *x1; })getTensileSolutionWithProblem:(struct ContractionProblem { void /* function */ **x0; struct TensorDescriptor { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; } x1; struct TensorDescriptor { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; } x2; struct TensorDescriptor { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; } x3; struct TensorDescriptor { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; } x4; struct vector<Tensile::TensorOp, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; struct TensorOp *x1; struct __compressed_pair<Tensile::TensorOp *, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; } x2; } x5; struct vector<Tensile::TensorOp, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; struct TensorOp *x1; struct __compressed_pair<Tensile::TensorOp *, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; } x2; } x6; struct vector<Tensile::TensorOp, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; struct TensorOp *x1; struct __compressed_pair<Tensile::TensorOp *, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; } x2; } x7; struct vector<Tensile::TensorOp, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; struct TensorOp *x1; struct __compressed_pair<Tensile::TensorOp *, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; } x2; } x8; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x9; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x10; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x11; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x12; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x13; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; int x22; int x23; int x24; int x25; int x26; int x27; int x28; struct vector<Tensile::ContractionProblem::FreeIndex, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; struct FreeIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::FreeIndex *, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; } x2; } x29; struct vector<Tensile::ContractionProblem::FreeIndex, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; struct FreeIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::FreeIndex *, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; } x2; } x30; struct vector<Tensile::ContractionProblem::FreeIndex, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; struct FreeIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::FreeIndex *, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; } x2; } x31; struct vector<Tensile::ContractionProblem::BatchIndex, std::allocator<Tensile::ContractionProblem::BatchIndex>> { struct BatchIndex *x0; struct BatchIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::BatchIndex *, std::allocator<Tensile::ContractionProblem::BatchIndex>> { struct BatchIndex *x0; } x2; } x32; struct vector<Tensile::ContractionProblem::BoundIndex, std::allocator<Tensile::ContractionProblem::BoundIndex>> { struct BoundIndex *x0; struct BoundIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::BoundIndex *, std::allocator<Tensile::ContractionProblem::BoundIndex>> { struct BoundIndex *x0; } x2; } x33; struct vector<Tensile::ContractionProblem::ZeroPad, std::allocator<Tensile::ContractionProblem::ZeroPad>> { struct ZeroPad *x0; struct ZeroPad *x1; struct __compressed_pair<Tensile::ContractionProblem::ZeroPad *, std::allocator<Tensile::ContractionProblem::ZeroPad>> { struct ZeroPad *x0; } x2; } x34; struct vector<Tensile::ContractionProblem::ZeroPad, std::allocator<Tensile::ContractionProblem::ZeroPad>> { struct ZeroPad *x0; struct ZeroPad *x1; struct __compressed_pair<Tensile::ContractionProblem::ZeroPad *, std::allocator<Tensile::ContractionProblem::ZeroPad>> { struct ZeroPad *x0; } x2; } x35; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x36; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x37; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x38; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x39; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x40; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x41; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x42; BOOL x43; double x44; unsigned long long x45; unsigned long long x46; unsigned long long x47; unsigned long long x48; })a0;
- (id)getWinogradFP16KernelName;

@end
