@interface GFX9AMD_MtlComputeVariant : MTLFunctionVariant {
    struct AMD_ComputeVariantMembersRec { struct { unsigned long long textureUsage[4]; unsigned int dirtyBuffers[1]; unsigned int LDSUsgBitMask[1]; } resourceDirtyMask; unsigned int staticThreadgroupMemoryLength; BOOL passISAHashToMTLStats; unsigned char isaMD5Hash[16]; unsigned char ilMD5Hash[16]; unsigned int airHash; char ilFunctionName[32]; struct _SC_SHADERSTATS { unsigned int uNumInst; unsigned int uNumVGPR; unsigned int uNumVALUInst; unsigned int uNumVMemInst; unsigned int uNumPosFetchBytes; unsigned int uNumParamFetchBytes; unsigned int uNumDSInst; unsigned int uNumExportInst; unsigned int uNumSGPR; unsigned int uNumCFlowInst; unsigned int uNumSALUInst; unsigned int uNumSMemInst; double f64SchedScores[3]; unsigned int uNumInterpInst; unsigned int uNumTransInst; unsigned int uNumAtomicOper; unsigned int uNumBranchInst; unsigned int uNumLocalAtomicOper; unsigned int uNumGlobalAtomicOper; unsigned int uNumLocalLoads; unsigned int uNumGlobalLoads; unsigned int uNumLocalStores; unsigned int uNumGlobalStores; unsigned int uNumWait; unsigned int uNumTexReads; unsigned int uNumTexWrites; unsigned int uNumTexAtomics; unsigned int uNumF16Inst; unsigned int uNumF32Inst; unsigned int uNumInt16Inst; unsigned int uNumInt32Inst; unsigned int uNumIntInst; unsigned int uNumFpInst; unsigned int uMemSizePerThread; unsigned int uNumCompilerSpills; unsigned int uNumCompilerVectorSpills; unsigned int uNumCompilerScalarSpills; unsigned int uNumSMovInst; unsigned int uNumVMovInst; unsigned int uNumMovInst; unsigned int uNumDualInst; unsigned int modelNumInst; unsigned int modelVALUInst; unsigned int modelVMemInst; unsigned int modelSALUInst; unsigned int modelSMemInst; unsigned int modelCFlowInst; unsigned int modelExportInst; unsigned int modelVectorInst; unsigned int modelScalarInst; unsigned int modelInterpInst; unsigned int modelTransInst; unsigned int modelWaveCount; unsigned int modelNumVgpr; unsigned int modelNumSgpr; unsigned int modelWaveSizeDecision; unsigned int modelCullingDecision; unsigned int modelDuplicatedVALUCount; unsigned int modelDuplicatedVMemCount; unsigned int modelAsVALUCount; unsigned int modelAsVMemCount; unsigned int numTotalInstIR; unsigned int costTotalInstIR; unsigned int numVectorInstIR; unsigned int costVectorInstIR; unsigned int numScalarInstIR; unsigned int costScalarInstIR; unsigned int numUniformInstIR; unsigned int costUniformInstIR; unsigned int numVMemInstIR; unsigned int costVMemInstIR; unsigned int numVALUInstIR; unsigned int costVALUInstIR; unsigned int numBasicBlocksIR; unsigned int costBasicBlocksIR; unsigned int numExportInstIR; unsigned int costExportInstIR; unsigned int numCFlowInstIR; unsigned int costCFlowInstIR; unsigned int numSALUInstIR; unsigned int costSALUInstIR; unsigned int numSMemInstIR; unsigned int costSMemInstIR; unsigned int VRegPred; unsigned int SRegPred; unsigned int LDSBarrierCount; unsigned int WorkgroupSize; unsigned int uNumSlowMemOps; unsigned int uNumVMemBytes; unsigned int uNumEstCycles; unsigned int uNumEstWeight; unsigned int uNumParameterExports; unsigned int uNumPositionExports; unsigned int pConfidence; unsigned int pThreshold; unsigned int uMaxPath; unsigned int uMaxAlus; unsigned int uMaxMems; unsigned int uMinPath; unsigned int uMinAlus; unsigned int uMinMems; } stats; unsigned int shaderType; unsigned int objectHeaderByteSize; unsigned int isaSize; unsigned int instrSet; unsigned long long entryIsaOffset; unsigned long long maxTotalThreadsPerThreadgroup; } m_members;
}

- (void)dealloc;
- (void)setResourceDirtyMaskWithHSACodeObject:(struct AMD_HSACodeObjectInfoRec { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; } *)a0 numBufArgs:(unsigned int)a1;
- (void)setResourceDirtyMaskWithHSACodeObject:(struct AMD_HSACodeObjectInfoRec { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; } *)a0 numBufArgs:(unsigned int)a1 readOnlyArgs:(BOOL)a2;

@end
