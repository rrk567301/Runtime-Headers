@class NSMapTable, MTLIOAccelFence, NSDictionary, MTLCompiler, MTLTargetDeviceArchitecture, MTLArchitecture, GFX9AMD_MtlBuffer, NSString, MTLGPUBVHBuilder, GFX9AMD_MtlCmdBuffer, MTLIOAccelResource, NSArray, MTLMotionEstimatorCapabilities;
@protocol MTLTexture, MTLDevice;

@interface GFX9AMD_MtlDevice : MTLIOAccelDevice <MTLDeviceSPI, AmdPrivateDevice, AmdSPMSPIPrivateDevice, AmdDevDriverSPIPrivateDevice, AmdCLKSPIPrivateDevice, AmdIccDevice> {
    struct AMD_DeviceMembersRec { struct AMDCommonHwInfoRec *commonHwInfo; struct AMD_DeviceSettings { unsigned char allowVRAM : 1; unsigned char allowSmallPointPrimFilter : 1; unsigned char allowSmallLinePrimFilter : 1; unsigned char allowSmallTriPrimFilter : 1; unsigned char allowDegenPrimFilter : 1; unsigned char allowSpiVsLateAlloc : 1; unsigned char allowMSAA : 1; unsigned char allowDCC : 1; unsigned char allowDccTcCompatible : 1; unsigned char allowDccShaderWrite : 1; unsigned char allowFastColorClear : 1; unsigned char allowFastDepthClear : 1; unsigned char allowFMask : 1; unsigned char allowDccForPixelFormatView : 1; unsigned char allowHTile : 1; unsigned char allowHTileTcCompatible : 1; unsigned char allowHiStencil : 1; unsigned char allow4xPrimRate : 1; unsigned char allowNGGMode : 1; unsigned char icbSupportsNGG : 1; unsigned char optimizeCbColorCntl : 1; unsigned char optimizeNoDepthWrites : 1; unsigned char optimizeNoStencilWrites : 1; unsigned char preferUBMSwBlt : 1; unsigned char allowDeferredSurfSync : 1; unsigned char enableDccDeferredExpand : 1; unsigned char enableTexturePerfMod : 1; unsigned char enableTexturePipeBankXor : 1; unsigned char enableLinearMSAABlit : 1; unsigned char enableBlitDMA : 1; unsigned char enableBiDirectionalBlitDMA : 1; unsigned char enableDMAPaging : 1; unsigned char skipUbmClearBltSync : 1; unsigned char enableCrossCmdBufHazardFix : 1; unsigned char allowRBPlus : 1; unsigned char allowProgNearZClip : 1; unsigned char linearSwizzleTextures : 1; unsigned char forceLinearSwizzleFor1D : 1; unsigned char allowClipGuardband : 1; unsigned char writeOutOfBoundViewports : 1; unsigned char allowDccFor64bppAndAbove : 1; unsigned char allowPrimBatchBinning : 1; unsigned char allowGePcAllocOverSub : 1; unsigned char allowShaderPrefetch : 1; unsigned char allowVRR : 1; unsigned char vrrAllowAlpha : 1; unsigned char csForceWaveSize32 : 1; unsigned char csForceWaveSize64 : 1; unsigned char psForceWaveSize32 : 1; unsigned char psForceWaveSize64 : 1; unsigned char vsForceWaveSize32 : 1; unsigned char vsForceWaveSize64 : 1; unsigned char enableMlModelForPsWaveSize : 1; unsigned char allowDccClearToSingle : 1; unsigned char allowStereoRendering : 1; unsigned char rgb422FormatsAre4Bpe : 1; unsigned char enableIndexedRsrc : 1; unsigned char disableNonTccFastColorClear : 1; unsigned char blitMemcpyForceDispatch : 1; unsigned char allowVARSwizzleModes : 1; unsigned char enableFunctionPointer : 1; unsigned char enableMlModelForCsWaveSize : 1; unsigned char forceRequiresRaytracingEmulationSetting : 1; unsigned char requiresRaytracingEmulationSetting : 1; unsigned char disableFMAForVs : 1; unsigned char disableFMAForPs : 1; unsigned char disableFMAForCompute : 1; unsigned char enableFMAForGFX : 1; unsigned char enableFMAForCompute : 1; unsigned char preferRSwizzle3DRtShaderWrite : 1; unsigned char allowResIndirectionTableInVRAM : 1; unsigned char use3DEnginePagingForRITable : 1; unsigned char allowExtraLinearAlign : 1; unsigned short maxTraversalDepth : 10; unsigned short reserved : 13; float SCMLModelCSThreshold; float SCMLModelPSThreshold; unsigned int minSurfaceSizeForDccEnable; unsigned int tessDistributionMode; float clipGuardbandClampX; float clipGuardbandClampY; unsigned int hwGuardbandPosLimit; unsigned int hwGuardbandNegLimit; unsigned int smallHeapAllocationAlignment; unsigned int maxShaderPrefetchSizeInBytes; unsigned int vrrBinWidth; unsigned int vrrBinHeight; unsigned int mtlCmdBufIsaHashCountLimit; struct { unsigned char texImgRsrcDescNoAlloc : 2; unsigned char cbCMaskSurfaceNoAlloc : 1; unsigned char cbFMaskSurfaceNoAlloc : 1; unsigned char cbDCCSurfaceNoAlloc : 1; unsigned char cbColorSurfaceNoAlloc : 1; unsigned char dbDepthSurfaceNoAlloc : 1; unsigned char dbStencilSurfaceNoAlloc : 1; unsigned char dbHTileSurfaceNoAlloc : 1; unsigned char dbZPassStatsSurfaceNoAlloc : 1; unsigned char rtShaderWriteNoAlloc : 3; unsigned char rtNoAlloc : 2; unsigned char shaderWriteNoAlloc : 2; unsigned char depthStencilNoAlloc : 2; unsigned char shaderReadNoAlloc : 1; unsigned char textureNoAlloc : 1; unsigned char vtxBufRsrcDescNoAlloc : 2; unsigned char cmdBufNoAlloc : 1; unsigned char vramTmpBufNoAlloc : 1; unsigned char shaderMemNoAlloc : 1; unsigned char scratchBufNoAlloc : 1; unsigned char logResNoAlloc : 1; unsigned char unusedBits : 4; unsigned int noAllocTexSizeThreshold; unsigned int noAllocBufSizeThreshold; } mallPolicyControls; struct { unsigned char enableCulling : 1; unsigned char enableSmallPrimFilter : 1; unsigned char enableCullDistanceCull : 1; unsigned char enableFrustumCull : 1; unsigned char disableBackFaceCull : 1; unsigned char disableCompaction : 1; unsigned char enableDynamicCulling : 1; unsigned int unusedBits : 25; } nggCullControls; BOOL enableSharedHeaps; } deviceSettings; struct AMD_AddrLibInterfaceRec { void *handle; } addrLibInterface; struct AMD_UBMInterfaceRec { void *handle; void *deviceHandle; struct AMD_UBMClientContextRec { struct AMD_HwCmdBufInfoRec *hwCmdBufferInfo; struct RgpSqttMarkerLayoutTransitionFlags { union { struct { unsigned char depthStencilExpand : 1; unsigned char htileHiZRangeExpand : 1; unsigned char depthStencilResummarize : 1; unsigned char dccDecompress : 1; unsigned char fmaskDecompress : 1; unsigned char fastClearEliminate : 1; unsigned char fmaskColorExpand : 1; unsigned char initMaskRam : 1; } ; unsigned int dword01; } ; } flags; unsigned int barrierReason; unsigned int eventType; unsigned int space; } ubmClientContext; unsigned char vramIsAvailable : 1; unsigned int reserved : 31; id<MTLDevice> device; MTLIOAccelResource *ubmBuffers[2]; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } ubmInterface; MTLCompiler *amdCompiler; struct AMDPPMemMgrRec *shaderMemMgr; struct CpuTexInterfaceRec *cpuTexInterface; BOOL lazyInitOccurred; unsigned int cbSwizzleIdx; unsigned int txSwizzleIdx; unsigned int videoEncoderSessionId; unsigned int videoEncoderSessionActive; unsigned char useDmaForMultiGpuAll : 1; unsigned char useDmaForMultiGpuB2B : 1; unsigned char useDmaForMultiGpuB2T : 1; unsigned char useDmaForMultiGpuT2B : 1; unsigned char useDmaForMultiGpuT2T : 1; unsigned char unused : 3; int peerReadChannel; BOOL enableWriteForXgmi; MTLMotionEstimatorCapabilities *motionEstimatorCapabilities; MTLIOAccelResource *motionEstimationBuffer; unsigned int minDeviceGFXscale; unsigned int medDeviceGFXscale; unsigned int maxDeviceGFXscale; unsigned int minDeviceMEMscale; unsigned int medDeviceMEMscale; unsigned int maxDeviceMEMscale; BOOL scaleInitialized; unsigned int engineClockScale; unsigned int memoryClockScale; struct AMDMtlProfiler { GFX9AMD_MtlDevice *device; struct __IOAccelShared *sharedRef; GFX9AMD_MtlBuffer *defaultRingBuffer; GFX9AMD_MtlBuffer *kernelRingBuffer; unsigned int spiConfigCntlRegister; unsigned int spiConfigCntlDefault; unsigned int spiConfigCntlEnabled; unsigned int engineClockScale; unsigned int memoryClockScale; int clockMode; union { struct { unsigned char spiConfigEnabled : 1; unsigned char kmdProfilingEnabled : 1; unsigned char gfxOffEnabled : 1; unsigned char spiRefCount : 4; unsigned char kmdRefCount : 4; unsigned char dumpPM4Enabled : 1; unsigned char reserved : 3; } ; unsigned short u16All; } flags; } profiler; struct AMDMtlFrameCounter { id<MTLTexture> lastFrameBuffer; GFX9AMD_MtlCmdBuffer *lastFrameCmdBuffer; unsigned int frameCount; unsigned int cmdBufCount; unsigned char frameCountMode; } frameCounter; struct AMDMtlDevDriver *devDriver; unsigned int vramType; unsigned int deviceRevisionId; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; struct _sAMD_GET_HW_INFO_VALUES *kernelHwInfoValues; void /* function */ *pipelineRetain; void /* function */ *pipelineRelease; struct AMDPPMemMgrRec *deferredExpandControlMemMgr; union { struct { struct AMDBitVectorRec *vectorStack; struct AMDBitVectorRec *allocatedBits; } bitClassTracker[9]; } ; struct AMDUniqueRegistryRec *psoCtxRegRegistry; struct AMD_MtlThreadTrace *pThreadTrace; struct AMD_MtlSPMTrace *pSpmTrace; struct __IOAccelDevice *amdMtldeviceRef; struct vector<AMD_IcbRsrcListElement, std::allocator<AMD_IcbRsrcListElement>> { struct *__begin_; struct *__end_; struct __compressed_pair<AMD_IcbRsrcListElement *, std::allocator<AMD_IcbRsrcListElement>> { struct *__value_; } __end_cap_; } psoGfxReadRsrcList; struct vector<AMD_IcbRsrcListElement, std::allocator<AMD_IcbRsrcListElement>> { struct *__begin_; struct *__end_; struct __compressed_pair<AMD_IcbRsrcListElement *, std::allocator<AMD_IcbRsrcListElement>> { struct *__value_; } __end_cap_; } psoGfxWriteRsrcList; struct vector<AMD_IcbRsrcListElement, std::allocator<AMD_IcbRsrcListElement>> { struct *__begin_; struct *__end_; struct __compressed_pair<AMD_IcbRsrcListElement *, std::allocator<AMD_IcbRsrcListElement>> { struct *__value_; } __end_cap_; } psoComputeReadRsrcList; struct vector<AMD_IcbRsrcListElement, std::allocator<AMD_IcbRsrcListElement>> { struct *__begin_; struct *__end_; struct __compressed_pair<AMD_IcbRsrcListElement *, std::allocator<AMD_IcbRsrcListElement>> { struct *__value_; } __end_cap_; } psoComputeWriteRsrcList; unsigned int icbPsoStamp; struct AMD_MtlInternalShadersRec *internalShaders; struct AMD_CompressionMgr_HWL_DispatchMethodsRec *compressionMgrDispatch; NSMapTable *ppRsrcMap; MTLIOAccelFence *internalFences[9]; unsigned int mpsPluginUsage; struct vector<AMD_DevicePoolEntry *, std::allocator<AMD_DevicePoolEntry *>> { struct AMD_DevicePoolEntry **__begin_; struct AMD_DevicePoolEntry **__end_; struct __compressed_pair<AMD_DevicePoolEntry **, std::allocator<AMD_DevicePoolEntry *>> { struct AMD_DevicePoolEntry **__value_; } __end_cap_; } smallAllocPool; MTLIOAccelResource *encoderIdRsrc; struct AMDBitVectorRec *usedEncoderIdVec; MTLIOAccelResource *globalSrdTables[7]; unsigned long long globalSrdTableStamp; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } globalSrdTableLock; Class textureClass; Class heapClass; struct MTLTargetDeviceArch { unsigned long long deviceType; unsigned int driverVersion; char *extension; } deviceArch; GFX9AMD_MtlBuffer *meshIntermediateBuffer; void *apiLayerData; unsigned int gfxOffRefCount; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } gfxOffRefCountLock; BOOL stablePerfStateActive; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } stablePerfStateLock; } m_baseMembers;
}

@property (readonly) struct IndirectArgumentBufferCapabilities { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned int x3 : 29; } indirectArgumentBufferCapabilities;
@property (readonly) unsigned long long maxThreadgroupMemoryLength;
@property (readonly) unsigned long long maxBufferLength;
@property (readonly) char supportsGlobalVariableRelocationCompute;
@property (readonly) char supportsGlobalVariableRelocationRender;
@property (readonly) NSArray *counterSets;
@property (readonly, nonatomic) char supportsBufferlessClientStorageTexture;
@property (readonly, nonatomic) char supportsComputeMemoryBarrier;
@property (readonly, nonatomic) char supportsRenderMemoryBarrier;
@property (readonly, nonatomic) char supportsPartialRenderMemoryBarrier;
@property (readonly, nonatomic) char supportsArgumentBuffersTier2;
@property (readonly, nonatomic) char supportsReadWriteTextureArgumentsTier2;
@property (readonly, nonatomic) char supportsStreamingCodecSignaling;
@property (readonly, nonatomic) char supportsProgrammableSamplePositions;
@property (readonly, nonatomic) char supportsLargeFramebufferConfigs;
@property (readonly, nonatomic) char supportsCustomBorderColor;
@property (readonly, nonatomic) char supportsSamplerAddressModeClampToHalfBorder;
@property (readonly, nonatomic) char supportsBCTextureCompression;
@property (readonly, nonatomic) char supports3DBCTextures;
@property (readonly, nonatomic) char supportsRGBA10A2Gamma;
@property (readonly, nonatomic) char supportsBGR10A2;
@property (readonly, nonatomic) char supportsPrimitiveRestartOverride;
@property (readonly, nonatomic) char supportsGlobalVariableRelocation;
@property (readonly, nonatomic) char supportsTLS;
@property (readonly, nonatomic) char supportsGlobalVariableBindings;
@property (readonly, nonatomic) char supportsGlobalVariableBindingInDylibs;
@property (readonly, nonatomic) char supports32bpcMSAATextures;
@property (readonly, nonatomic) char supports32BitMSAA;
@property (readonly, nonatomic) char supports32BitFloatFiltering;
@property (readonly, nonatomic) char supportsQueryTextureLOD;
@property (readonly, nonatomic) char supportsVertexAmplification;
@property (readonly, nonatomic) char supportsSamplerReductionMode;
@property (readonly, nonatomic) char supportsPlacementHeaps;
@property (readonly, nonatomic) char supportsOpenCLTextureWriteSwizzles;
@property (readonly, nonatomic) char supportsPullModelInterpolation;
@property (readonly, nonatomic) char supportsInt64;
@property (readonly, nonatomic) char supportsFixedLinePointFillDepthGradient;
@property (readonly, nonatomic) char supportsLateEvalEvent;
@property (readonly, nonatomic) char supportsNonZeroTextureWriteLOD;
@property (readonly, nonatomic) char supportsSharedTextureHandles;
@property (readonly, nonatomic) char supportsBufferPrefetchStatistics;
@property (readonly, nonatomic) char supportsLimitedYUVFormats;
@property (readonly, nonatomic) char supportsNonPrivateDepthStencilTextures;
@property (readonly, nonatomic) char supportsNonPrivateMSAATextures;
@property (readonly, nonatomic) char supportsSharedStorageHeapResources;
@property (readonly, nonatomic) char supportsSharedStorageTextures;
@property (readonly, nonatomic) char supportsLinearTextureFromSharedBuffer;
@property (readonly, nonatomic) char supportsPipelineLibraries;
@property (readonly, nonatomic) char supportsFragmentOnlyEncoders;
@property (readonly, nonatomic) char supportsBufferWithIOSurface;
@property (readonly, nonatomic) char supportsProgrammableBlending;
@property (readonly, nonatomic) char supportsRenderToLinearTextures;
@property (readonly, nonatomic) char supportsMemorylessRenderTargets;
@property (readonly, nonatomic) char supportsFastMathInfNaNPropagation;
@property (readonly, nonatomic) char supportsInvariantVertexPosition;
@property (readonly, nonatomic) char supportsShaderLODAverage;
@property (readonly, nonatomic) char supportsRelaxedTextureViewRequirements;
@property (readonly, nonatomic) char supportsSeparateDepthStencil;
@property (readonly, nonatomic) char supportsGPUStatistics;
@property (readonly, nonatomic) char supportsCompressedTextureViewSPI;
@property (readonly, nonatomic) char supportsRenderTargetTextureRotation;
@property (readonly, nonatomic) char supportsDynamicControlPointCount;
@property (readonly, nonatomic) char supportsIABHashForTools;
@property (readonly, nonatomic) char supportsBinaryArchives;
@property (readonly, nonatomic) char supportsBinaryLibraries;
@property (readonly, nonatomic) char supportsDeadlineProfile;
@property (readonly, nonatomic) char supportsFillTexture;
@property (readonly, nonatomic) char supportsSetThreadgroupPackingDisabled;
@property (readonly, nonatomic) char supportsASTCTextureCompression;
@property (readonly, nonatomic) char supportsExtendedYUVFormats;
@property (readonly, nonatomic) char supportsPublicXR10Formats;
@property (readonly, nonatomic) char supportsSRGBwrites;
@property (readonly, nonatomic) char supportsDepthClipMode;
@property (readonly, nonatomic) char supportsResourceHeaps;
@property (readonly, nonatomic) char supportsArgumentBuffers;
@property (readonly, nonatomic) char supportsPacked32TextureBufferWrites;
@property (readonly, nonatomic) char supports3DASTCTextures;
@property (readonly, nonatomic) char supportsExtendedXR10Formats;
@property (readonly, nonatomic) char supportsFragmentBufferWrites;
@property (readonly, nonatomic) char supportsCountingOcclusionQuery;
@property (readonly, nonatomic) char supportsBaseVertexInstanceDrawing;
@property (readonly, nonatomic) char supportsIndirectDrawAndDispatch;
@property (readonly, nonatomic) char supportsTessellation;
@property (readonly, nonatomic) char supportsReadWriteBufferArguments;
@property (readonly, nonatomic) char supportsArrayOfTextures;
@property (readonly, nonatomic) char supportsArrayOfSamplers;
@property (readonly, nonatomic) char supportsCombinedMSAAStoreAndResolveAction;
@property (readonly, nonatomic) char supportsMutableTier1ArgumentBuffers;
@property (readonly, nonatomic) char supportsSamplerCompareFunction;
@property (readonly, nonatomic) char supportsMSAADepthResolve;
@property (readonly, nonatomic) char supportsMSAAStencilResolve;
@property (readonly, nonatomic) char supportsMSAADepthResolveFilter;
@property (readonly, nonatomic) char supportsGFXIndirectCommandBuffers;
@property (readonly, nonatomic) char supportsCMPIndirectCommandBuffers;
@property (readonly, nonatomic) char supportsIndirectStageInRegion;
@property (readonly, nonatomic) char supportsIndirectTextures;
@property (readonly, nonatomic) char supportsNorm16BCubicFiltering;
@property (readonly, nonatomic) char supportsTextureOutOfBoundsReads;
@property (readonly, nonatomic) char supportsTextureSwizzle;
@property (readonly, nonatomic) char supportsAlphaYUVFormats;
@property (readonly, nonatomic) char supportsMemoryOrderAtomics;
@property (readonly, nonatomic) char supportsQuadGroup;
@property (readonly, nonatomic) char supportsRenderTextureWrites;
@property (readonly, nonatomic) char supportsImageBlocks;
@property (readonly, nonatomic) char supportsTileShaders;
@property (readonly, nonatomic) char supportsImageBlockSampleCoverageControl;
@property (readonly, nonatomic) char supportsNativeHardwareFP16;
@property (readonly, nonatomic) char supportsPostDepthCoverage;
@property (readonly, nonatomic) char supportsMipLevelsSmallerThanBlockSize;
@property (readonly, nonatomic) char supportsNonUniformThreadgroupSize;
@property (readonly, nonatomic) char supportsReadWriteTextureArguments;
@property (readonly, nonatomic) char supportsReadWriteTextureCubeArguments;
@property (readonly, nonatomic) char supportsTextureCubeArray;
@property (readonly, nonatomic) char supportsQuadShufflesAndBroadcast;
@property (readonly, nonatomic) char supportsConcurrentComputeDispatch;
@property (readonly, nonatomic) char supportsRenderPassWithoutRenderTarget;
@property (readonly, nonatomic) char supportsRasterOrderGroups;
@property (readonly, nonatomic) char supportsRasterOrderGroupsColorAttachment;
@property (readonly, nonatomic) char supportsDynamicAttributeStride;
@property (readonly, nonatomic) char supportsLinearTexture2DArray;
@property (readonly, nonatomic) char supportsNonSquareTileShaders;
@property (readonly, nonatomic) char supportsSeparateVisibilityAndShadingRate;
@property (readonly, nonatomic) char supports2DLinearTexArraySPI;
@property (readonly, nonatomic) char supportsLayeredRendering;
@property (readonly, nonatomic) char supportsViewportAndScissorArray;
@property (readonly, nonatomic) char supportsIndirectTessellation;
@property (readonly, nonatomic) char supportsMSAAStencilResolveFilter;
@property (readonly, nonatomic) char supportsStencilFeedback;
@property (readonly, nonatomic) char supportsFP32TessFactors;
@property (readonly, nonatomic) char supportsUnalignedVertexFetch;
@property (readonly, nonatomic) char supportsExtendedVertexFormats;
@property (readonly, nonatomic) char supportsResourceDetachBacking;
@property (readonly, nonatomic) char supportsBufferWithAddressRanges;
@property (readonly, nonatomic) char supportsHeapWithAddressRanges;
@property (readonly, nonatomic) char supportsSIMDGroup;
@property (readonly, nonatomic) char supportsShaderMinLODClamp;
@property (readonly, nonatomic) char supportsSIMDShufflesAndBroadcast;
@property (readonly, nonatomic) char supportsWritableArrayOfTextures;
@property (readonly, nonatomic) char supportsVariableRateRasterization;
@property (readonly, nonatomic) char supportsYCBCRFormats;
@property (readonly, nonatomic) char supportsYCBCRFormatsPQ;
@property (readonly, nonatomic) char supportsYCBCRFormats12;
@property (readonly, nonatomic) char supportsYCBCRFormatsXR;
@property (readonly, nonatomic) char supportsASTCHDRTextureCompression;
@property (readonly, nonatomic) char supportsSparseTextures;
@property (readonly, nonatomic) char supportsSparseHeaps;
@property (readonly, nonatomic) char supportsIndirectWritableTextures;
@property (readonly, nonatomic) char supportsFunctionPointers;
@property (readonly, nonatomic) char supportsDynamicLibraries;
@property (readonly, nonatomic) char supportsStatefulDynamicLibraries;
@property (readonly, nonatomic) char supportsRenderDynamicLibraries;
@property (readonly, nonatomic) char supportsFunctionPointersFromRender;
@property (readonly, nonatomic) char supportsSharedFunctionTables;
@property (readonly, nonatomic) char supportsRaytracingFromRender;
@property (readonly, nonatomic) char supportsPrimitiveMotionBlur;
@property (readonly, nonatomic) char supportsRayTracingExtendedVertexFormats;
@property (readonly, nonatomic) char supportsHeapAccelerationStructureAllocation;
@property (readonly, nonatomic) char supportsRayTracingPerPrimitiveData;
@property (readonly, nonatomic) char supportsRayTracingTraversalMetrics;
@property (readonly, nonatomic) char supportsRayTracingBuffersFromTables;
@property (readonly, nonatomic) char supportsRayTracingAccelerationStructureCPUDeserialization;
@property (readonly, nonatomic) char supportsRayTracingMultiLevelInstancing;
@property (readonly, nonatomic) char supportsRayTracingIndirectInstanceAccelerationStructureBuild;
@property (readonly, nonatomic) char supportsRayTracingGPUTableUpdateBuffers;
@property (readonly, nonatomic) char supportsRayTracingCurves;
@property (readonly, nonatomic) char supportsShaderBarycentricCoordinates;
@property (readonly, nonatomic) char supportsBlackOrWhiteSamplerBorderColors;
@property (readonly, nonatomic) char supportsMirrorClampToEdgeSamplerMode;
@property (readonly, nonatomic) char supportsSIMDReduction;
@property (readonly, nonatomic) char supportsDepthClipModeClampExtended;
@property (readonly, nonatomic) char supportsTexture2DMultisampleArray;
@property (readonly, nonatomic) char supportsForceSeamsOnCubemaps;
@property (readonly, nonatomic) char supportsFloat16BCubicFiltering;
@property (readonly, nonatomic) char supportsFloat16InfNanFiltering;
@property (readonly, nonatomic) char supportsRTZRounding;
@property (readonly, nonatomic) char supportsAnisoSampleFix;
@property (readonly, nonatomic) char supportsYCBCRPackedFormatsPQ;
@property (readonly, nonatomic) char supportsYCBCRPackedFormats12;
@property (readonly, nonatomic) char supportsYCBCRPackedFormatsXR;
@property (readonly, nonatomic) char supportsBufferBoundsChecking;
@property (readonly, nonatomic) char supportsForkJoin;
@property (readonly, nonatomic) char supportsDevicePartitioning;
@property (readonly, nonatomic) char supportsComputeCompressedTextureWrite;
@property (readonly, nonatomic) char supportsSIMDGroupMatrix;
@property (readonly, nonatomic) char supportsInterchangeTiled;
@property (readonly, nonatomic) char supportsQuadReduction;
@property (readonly, nonatomic) char supportsVirtualSubstreams;
@property (readonly, nonatomic) char supportsSIMDShuffleAndFill;
@property (readonly, nonatomic) char supportsBfloat16Format;
@property (readonly, nonatomic) char supportsSparseDepthAttachments;
@property (readonly, nonatomic) char supportsAtomicUlongVoidMinMax;
@property (readonly, nonatomic) char supportsLossyCompression;
@property (readonly, nonatomic) char supportsAtomicFloat;
@property (readonly, nonatomic) char supportsMeshShaders;
@property (readonly, nonatomic) char supportsFunctionPointersFromMesh;
@property (readonly, nonatomic) char supportsMeshShadersInICB;
@property (readonly, nonatomic) char supportsMeshRenderDynamicLibraries;
@property (readonly, nonatomic) char supportsBfloat16Buffers;
@property (readonly, nonatomic) char supportsCommandBufferJump;
@property (readonly, nonatomic) char supportsColorSpaceConversionMatrixSelection;
@property (readonly, nonatomic) char supportsPerPlaneCompression;
@property (readonly, nonatomic) char supportsConditionalLoadStore;
@property (readonly, nonatomic) char supportsStackOverflowErrorCode;
@property (readonly, nonatomic) char supportsRayTracingICBs;
@property (readonly, nonatomic) char supportsPerformanceStateAssertion;
@property (readonly, nonatomic) char supportsExplicitVisibilityGroups;
@property (readonly, nonatomic) char supportsRayTracingMatrixLayout;
@property (readonly, nonatomic) char supportsRayTracingDirectIntersectionResultAccess;
@property (readonly, nonatomic) char supportsRayTracingPerComponentMotionInterpolation;
@property (readonly, nonatomic) char supportsExtendedSamplerLODBiasRange;
@property (readonly, nonatomic) char supportsDeviceCoherency;
@property (readonly) unsigned long long bufferRobustnessSupport;
@property (readonly) unsigned long long deviceCreationFlags;
@property (getter=areGPUAssertionsEnabled, setter=setGPUAssertionsEnabled:) char gpuAssertionsEnabled;
@property (getter=areWritableHeapsEnabled, setter=setWritableHeapsEnabled:) char writableHeapsEnabled;
@property (nonatomic) unsigned long long commandBufferErrorOptions;
@property (readonly, getter=isBCTextureCompressionSupported) char BCTextureCompressionSupported;
@property (readonly) const struct MTLTargetDeviceArch { unsigned long long x0; unsigned int x1; char *x2; } *targetDeviceInfo;
@property (readonly) MTLTargetDeviceArchitecture *targetDeviceArchitecture;
@property char shaderDebugInfoCaching;
@property (readonly, getter=isSystemDefaultDevice) char systemDefaultDevice;
@property (readonly, getter=isASTCPixelFormatsSupported) char ASTCPixelFormatsSupported;
@property (readonly, getter=isFramebufferReadSupported) char framebufferReadSupported;
@property (readonly, getter=isMagicMipmapSupported) char magicMipmapSupported;
@property (readonly) unsigned long long halfFPConfig;
@property (readonly) unsigned long long singleFPConfig;
@property (readonly) unsigned long long doubleFPConfig;
@property (nonatomic) char metalAssertionsEnabled;
@property (readonly) unsigned long long featureProfile;
@property (readonly) const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; float x26; float x27; unsigned int x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; unsigned int x59; unsigned int x60; unsigned int x61; unsigned int x62; unsigned int x63; unsigned long long x64; } *limits;
@property (readonly) unsigned long long maxFramebufferStorageBits;
@property (readonly) unsigned long long linearTextureArrayAlignmentBytes;
@property (readonly) unsigned long long linearTextureArrayAlignmentSlice;
@property (readonly) unsigned long long maxTileBuffers;
@property (readonly) unsigned long long maxTileTextures;
@property (readonly) unsigned long long maxTileSamplers;
@property (readonly) unsigned long long maxTileInlineDataSize;
@property (readonly) unsigned long long minTilePixels;
@property (readonly) unsigned long long maxColorAttachments;
@property (readonly) unsigned long long maxVertexAttributes;
@property (readonly) unsigned long long maxVertexBuffers;
@property (readonly) unsigned long long maxVertexTextures;
@property (readonly) unsigned long long maxVertexSamplers;
@property (readonly) unsigned long long maxVertexInlineDataSize;
@property (readonly) unsigned long long maxInterpolants;
@property (readonly) unsigned long long maxFragmentBuffers;
@property (readonly) unsigned long long maxFragmentTextures;
@property (readonly) unsigned long long maxFragmentSamplers;
@property (readonly) unsigned long long maxFragmentInlineDataSize;
@property (readonly) unsigned long long maxComputeBuffers;
@property (readonly) unsigned long long maxComputeTextures;
@property (readonly) unsigned long long maxComputeSamplers;
@property (readonly) unsigned long long maxComputeInlineDataSize;
@property (readonly) unsigned long long maxComputeLocalMemorySizes;
@property (readonly) unsigned long long maxTotalComputeThreadsPerThreadgroup;
@property (readonly) unsigned long long maxComputeThreadgroupMemory;
@property (readonly) float maxLineWidth;
@property (readonly) float maxPointSize;
@property (readonly) unsigned long long maxVisibilityQueryOffset;
@property (readonly) unsigned long long minConstantBufferAlignmentBytes;
@property (readonly) unsigned long long minBufferNoCopyAlignmentBytes;
@property (readonly) unsigned long long maxTextureWidth1D;
@property (readonly) unsigned long long maxTextureWidth2D;
@property (readonly) unsigned long long maxTextureHeight2D;
@property (readonly) unsigned long long maxTextureWidth3D;
@property (readonly) unsigned long long maxTextureHeight3D;
@property (readonly) unsigned long long maxTextureDepth3D;
@property (readonly) unsigned long long maxTextureDimensionCube;
@property (readonly) unsigned long long maxTextureLayers;
@property (readonly) unsigned long long linearTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long maxFunctionConstantIndices;
@property (readonly) unsigned long long maxComputeThreadgroupMemoryAlignmentBytes;
@property (readonly) unsigned long long maxInterpolatedComponents;
@property (readonly) unsigned long long maxTessellationFactor;
@property (readonly) unsigned long long maxIndirectBuffers;
@property (readonly) unsigned long long maxIndirectTextures;
@property (readonly) unsigned long long maxIndirectSamplers;
@property (readonly) unsigned long long maxIndirectSamplersPerDevice;
@property (readonly) unsigned long long maxFenceInstances;
@property (readonly) unsigned long long maxViewportCount;
@property (readonly) unsigned long long maxCustomSamplePositions;
@property (readonly) unsigned long long maxVertexAmplificationFactor;
@property (readonly) unsigned long long maxVertexAmplificationCount;
@property (readonly) unsigned long long maxTextureBufferWidth;
@property (readonly) unsigned long long maxComputeAttributes;
@property (readonly) unsigned long long maxIOCommandsInFlight;
@property (readonly) unsigned long long maxPredicatedNestingDepth;
@property (readonly) unsigned long long maxAccelerationStructureLevels;
@property (readonly) unsigned long long maxConstantBufferArguments;
@property (readonly) unsigned int acceleratorPort;
@property (readonly) char supportPriorityBand;
@property (readonly) unsigned long long sharedMemorySize;
@property (readonly) unsigned long long dedicatedMemorySize;
@property (readonly) unsigned long long currentCommandQueueCount;
@property (readonly) unsigned long long commandQueueLimit;
@property (readonly, getter=isQuadDataSharingSupported) char quadDataSharingSupported;
@property (readonly) unsigned long long sparseTexturesSupport;
@property (readonly, getter=isFloat32FilteringSupported) char float32FilteringSupported;
@property (readonly, getter=isMsaa32bSupported) char msaa32bSupported;
@property (readonly, getter=isRTZRoundingSupported) char RTZRoundingSupported;
@property (readonly) long long defaultTextureWriteRoundingMode;
@property (readonly, getter=isAnisoSampleFixSupported) char AnisoSampleFixSupported;
@property (readonly, getter=isFixedLinePointFillDepthGradientSupported) char FixedLinePointFillDepthGradientSupported;
@property (readonly) unsigned long long samplerReductionModeSupport;
@property (readonly, getter=isLargeMRTSupported) char largeMRTSupported;
@property (readonly) unsigned long long maxRasterizationRateLayerCount;
@property (readonly, getter=isRGB10A2GammaSupported) char RGB10A2GammaSupported;
@property (readonly, getter=isCustomBorderColorSupported) char CustomBorderColorSupported;
@property (readonly, getter=isClampToHalfBorderSupported) char ClampToHalfBorderSupported;
@property (readonly, getter=isPlacementHeapSupported) char placementHeapSupported;
@property (readonly) MTLGPUBVHBuilder *GPUBVHBuilder;
@property (readonly) char requiresRaytracingEmulation;
@property (readonly) unsigned long long latestSupportedGenericBVHVersion;
@property (copy, nonatomic) NSDictionary *pluginData;
@property (readonly) char requiresMeshShaderEmulation;
@property (readonly, nonatomic) long long currentPerformanceState;
@property (readonly) unsigned long long maxConcurrentExecutingCompilationTasks;
@property (readonly) unsigned long long maxAccelerationStructureTraversalDepth;
@property (readonly) char requiresBFloat16Emulation;
@property (readonly) NSString *name;
@property (readonly) unsigned long long registryID;
@property (readonly) MTLArchitecture *architecture;
@property (readonly) struct { unsigned long long width; unsigned long long height; unsigned long long depth; } maxThreadsPerThreadgroup;
@property (readonly, getter=isLowPower) char lowPower;
@property (readonly, getter=isHeadless) char headless;
@property (readonly, getter=isRemovable) char removable;
@property (readonly) char hasUnifiedMemory;
@property (readonly) unsigned long long recommendedMaxWorkingSetSize;
@property (readonly) unsigned long long location;
@property (readonly) unsigned long long locationNumber;
@property (readonly) unsigned long long maxTransferRate;
@property (readonly, getter=isDepth24Stencil8PixelFormatSupported) char depth24Stencil8PixelFormatSupported;
@property (readonly) unsigned long long readWriteTextureSupport;
@property (readonly) unsigned long long argumentBuffersSupport;
@property (readonly, getter=areRasterOrderGroupsSupported) char rasterOrderGroupsSupported;
@property (readonly, getter=areBarycentricCoordsSupported) char barycentricCoordsSupported;
@property (readonly) unsigned long long currentAllocatedSize;
@property (readonly) unsigned long long maxArgumentBufferSamplerCount;
@property (readonly, getter=areProgrammableSamplePositionsSupported) char programmableSamplePositionsSupported;
@property (readonly) unsigned long long peerGroupID;
@property (readonly) unsigned int peerIndex;
@property (readonly) unsigned int peerCount;
@property (readonly) unsigned long long sparseTileSizeInBytes;
@property (readonly) char supportsRaytracing;
@property char shouldMaximizeConcurrentCompilation;
@property (readonly) unsigned long long maximumConcurrentCompilationTaskCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)registerDevices;

- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (id)vendorName;
- (id)newCommandQueue;
- (id)copyIOSurfaceSharedTextureProperties:(id)a0;
- (id)familyName;
- (void)getDefaultSamplePositions:(struct { float x0; float x1; } *)a0 count:(unsigned long long)a1;
- (struct { unsigned long long x0; unsigned long long x1; })heapAccelerationStructureSizeAndAlignWithSize:(unsigned long long)a0;
- (struct { unsigned long long x0; unsigned long long x1; })heapBufferSizeAndAlignWithLength:(unsigned long long)a0 options:(unsigned long long)a1;
- (struct { unsigned long long x0; unsigned long long x1; })heapTextureSizeAndAlignWithDescriptor:(id)a0;
- (unsigned long long)minimumTextureBufferAlignmentForPixelFormat:(unsigned long long)a0;
- (id)motionEstimatorCapabilities;
- (id)newArgumentEncoderWithBufferBinding:(id)a0;
- (id)newArgumentEncoderWithLayout:(id)a0;
- (id)newBufferWithBytes:(const void *)a0 length:(unsigned long long)a1 options:(unsigned long long)a2;
- (id)newBufferWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 options:(unsigned long long)a2 deallocator:(id /* block */)a3;
- (id)newBufferWithDescriptor:(id)a0;
- (id)newBufferWithIOSurface:(struct __IOSurface { } *)a0;
- (id)newBufferWithLength:(unsigned long long)a0 options:(unsigned long long)a1;
- (id)newCommandQueueWithMaxCommandBufferCount:(unsigned long long)a0;
- (id)newCounterSampleBufferWithDescriptor:(id)a0 error:(id *)a1;
- (id)newDepthStencilStateWithDescriptor:(id)a0;
- (id)newHeapWithDescriptor:(id)a0;
- (id)newIndirectArgumentBufferLayoutWithStructType:(id)a0;
- (id)newIndirectCommandBufferWithDescriptor:(id)a0 maxCount:(unsigned long long)a1 options:(unsigned long long)a2;
- (id)newIndirectComputeCommandEncoderWithBuffer:(id)a0;
- (id)newIndirectRenderCommandEncoderWithBuffer:(id)a0;
- (id)newMotionEstimationPipelineWithDescriptor:(id)a0;
- (id)newPerformanceStateAssertion:(long long)a0 error:(id *)a1;
- (void)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)newSamplerStateWithDescriptor:(id)a0;
- (id)newTextureWithDescriptor:(id)a0;
- (id)newTextureWithDescriptor:(id)a0 iosurface:(struct __IOSurface { } *)a1 plane:(unsigned long long)a2;
- (id)newTextureWithSurface:(unsigned long long)a0 buffer:(unsigned long long)a1;
- (id)newVisibleFunctionTableWithDescriptor:(id)a0;
- (id)productName;
- (void)reserveResourceIndicesForResourceType:(unsigned long long)a0 indices:(unsigned long long *)a1 indexCount:(unsigned long long)a2;
- (unsigned long long)resourcePatchingTypeForResourceType:(unsigned long long)a0;
- (void)sampleTimestamps:(unsigned long long *)a0 gpuTimestamp:(unsigned long long *)a1;
- (unsigned long long)sparseTileSizeInBytesForSparsePageSize:(long long)a0;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })sparseTileSizeWithTextureType:(unsigned long long)a0 pixelFormat:(unsigned long long)a1 sampleCount:(unsigned long long)a2;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })sparseTileSizeWithTextureType:(unsigned long long)a0 pixelFormat:(unsigned long long)a1 sampleCount:(unsigned long long)a2 sparsePageSize:(long long)a3;
- (char)supportsSampleCount:(unsigned long long)a0;
- (id)compiler;
- (id)initWithAcceleratorPort:(unsigned int)a0;
- (void)receive:(id)a0;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })tileSizeWithTextureType:(unsigned long long)a0 pixelFormat:(unsigned long long)a1 sampleCount:(unsigned long long)a2;
- (void)amdMtl_PostInit;
- (void)getAMDMtlClkScale:(float *)a0 memClkScale:(float *)a1;
- (unsigned long long)getTimestampFrequency;
- (int)queryAMDMtlClk;
- (id)queryAMDMtlClkCaps;
- (id)queryGpuInfo;
- (BOOL)setAMDMtlClk:(int)a0;
- (BOOL)setDefaultAMDMtlClk;
- (char)amdMtl_LazyInit;
- (id)amdMtl_HWL_AcquireScratchBufferMinSize:(unsigned int)a0;
- (void *)amdMtl_HWL_GetHwInfo;
- (unsigned int)amdMtl_HWL_GetHwInfoSize;
- (id)amdMtl_HWL_NewDepthStencilStateWithDescriptor:(id)a0;
- (id)amdMtl_HWL_NewSamplerStateWithDescriptor:(id)a0;
- (void)amdMtl_HWL_ReleaseScratchBuffer:(id)a0;
- (id)amdMtl_HWL_allocCounterSets;
- (void)amdMtl_dumpMPSUsageFlags:(unsigned int)a0;
- (char)amdMtl_getMPSUsageFlags:(const char *)a0 usage:(unsigned int *)a1;
- (void)finalizeSPM;
- (BOOL)initSPMwithInterval:(unsigned int)a0;
- (int)perfStateAssertionQueryAMDMtlClk;
- (id)queryInfinityCacheSetting;
- (id)readSPMTrace;
- (void)resetInfinityCacheControl;
- (char)setInfinityCacheControl:(id)a0;
- (char)supportInfinityCacheControl;

@end
