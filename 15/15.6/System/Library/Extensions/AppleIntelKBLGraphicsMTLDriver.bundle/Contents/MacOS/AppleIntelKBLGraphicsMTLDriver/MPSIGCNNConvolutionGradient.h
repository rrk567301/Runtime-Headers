@class NSString;
@protocol MTLDevice, MTLTexture, MTLComputePipelineState, MTLBuffer;

@interface MPSIGCNNConvolutionGradient : MPSExternalCNNBinary <MPSExternalCNNConvolutionGradient> {
    id<MTLDevice> igDevice;
    struct convGradKernelInfo { id<MTLComputePipelineState> conv_grad_naive; id<MTLComputePipelineState> conv_grad_opt; id<MTLComputePipelineState> conv_grad_opt_spatial; id<MTLComputePipelineState> conv_grad_opt_spatial_clamp_to_zero; id<MTLComputePipelineState> conv_grad_weights_naive; id<MTLComputePipelineState> conv_grad_weights_opt; id<MTLComputePipelineState> optimized; id<MTLComputePipelineState> conv_naive; id<MTLComputePipelineState> conv_accumulator; id<MTLComputePipelineState> conv_fp32_b2_opt; id<MTLComputePipelineState> conv_fp32_opt; id<MTLComputePipelineState> conv_fp16_opt; id<MTLBuffer> weights; id<MTLTexture> weightsTex; struct cnnBfloatKernelInfo *bfloatInfo; struct optimizedConvKernelParams { unsigned int outBlockWidth; unsigned int outBlockHeight; unsigned int prefetch; unsigned int input_block_array_size; unsigned int input_block_width; BOOL useOptimizedKernel; unsigned int outBatchBlockWidth; unsigned int outBatchBlockHeight; BOOL useAccBatchKernel; } optimizedParams; struct cnnGEMMKernelInfo *gemmInfo; struct cnnSepWinogradKernelInfo *sepWinogradInfo; struct cnnFusedWinogradKernelInfo *fusedWinogradInfo; struct cnnMBR1x1KernelInfo *MBR1x1Info; } kernelInfo;
    struct ConvParams { unsigned int kernelWidth; unsigned int kernelHeight; unsigned int inputFeatureChannels; unsigned int outputFeatureChannels; unsigned int groups; unsigned int strideX; unsigned int strideY; unsigned int dilationRateX; unsigned int dilationRateY; unsigned int inputWeightsDataType; unsigned int weightsQuantizationType; void *rangesForUInt8Kernel; float *lookupTableForUInt8Kernel; struct MPSCNNBatchNormParamsForInference *batchNormalizationParameters; BOOL depthwiseConvolution; BOOL isFullyConnected; BOOL convGradient; BOOL canUseOptimizedKernel; BOOL canUseOptimizedFCKernel; BOOL canUseAccBasedConvKernel; BOOL canUseMBR1x1ConvKernel; BOOL canUseGEMMBasedConvKernel; BOOL canUseFusedWinogradBasedConvKernel; BOOL canUseSepWinogradBasedConvKernel; BOOL useBias; BOOL useActivation; BOOL clampToZero; int neuronType; float *activationParameterA; float activationParameterB; } cp;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (unsigned long long)maxBatchSize;
- (unsigned long long)encodeBatchToCommandBuffer:(id)a0 computeCommandEncoder:(id)a1 options:(unsigned long long)a2 pluginOptions:(unsigned long long)a3 primaryTextures:(id)a4 primaryInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a5 secondaryTextures:(id)a6 secondaryInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a7 destinationTextures:(id)a8 destinationInfo:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x3; unsigned long long x4; } *)a9 predicationBuffer:(id)a10 predicationOffset:(unsigned long long)a11;
- (unsigned long long)encodeBatchToCommandBuffer:(id)a0 computeCommandEncoder:(id)a1 options:(unsigned long long)a2 pluginOptions:(unsigned long long)a3 primaryTextures:(id)a4 primaryInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a5 secondaryTextures:(id)a6 secondaryInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a7 weightsGradient:(id)a8 biasesGradient:(id)a9 accumulate:(char)a10 predicationBuffer:(id)a11 predicationOffset:(unsigned long long)a12;
- (void)reloadWeights:(struct MPSPluginCNNConvolutionData { unsigned int x0; int x1; unsigned int x2; void *x3; float *x4; float *x5; struct MPSCNNBatchNormParamsForInference **x6; } *)a0;
- (void)reloadWeightsWithCommandBuffer:(id)a0 encoder:(id)a1 weights:(id)a2 weightsDataType:(unsigned int)a3 predicationBuffer:(id)a4 predicationOffset:(unsigned long long)a5;
- (unsigned long long)encodeToCommandBuffer:(id)a0 computeCommandEncoder:(id)a1 options:(unsigned long long)a2 pluginOptions:(unsigned long long)a3 primaryTexture:(id)a4 primaryInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a5 secondaryTexture:(id)a6 secondaryInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a7 destinationTexture:(id)a8 destinationInfo:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x3; unsigned long long x4; } *)a9;
- (char)initMPSIntelCNNConvolutionGradient:(const struct MPSPluginCNNConvolutionData { unsigned int x0; int x1; unsigned int x2; void *x3; float *x4; float *x5; struct MPSCNNBatchNormParamsForInference **x6; } *)a0;
- (id)initWithDevice:(id)a0 Descriptor:(id)a1 convolutionData:(struct MPSPluginCNNConvolutionData { unsigned int x0; int x1; unsigned int x2; void *x3; float *x4; float *x5; struct MPSCNNBatchNormParamsForInference **x6; } *)a2;
- (void)releaseMBR1x1KernelInfo;
- (void)releaseMBR1x1Mem:(struct cnnMBR1x1KernelInfo { struct CHAL_DECODED_BINARY_INFO *x0; struct CHAL_DECODED_BINARY_INFO *x1; struct CHAL_DECODED_BINARY_INFO *x2; id x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; float x11; float x12; unsigned int x13; } *)a0;
- (char)setInitParams_MBR1x1;

@end
