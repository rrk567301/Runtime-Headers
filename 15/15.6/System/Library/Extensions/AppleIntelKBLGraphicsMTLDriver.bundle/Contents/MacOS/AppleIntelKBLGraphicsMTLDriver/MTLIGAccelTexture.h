@class NSString;
@protocol MTLDevice, MTLHeap, MTLTexture, MTLBuffer, MTLResource;

@interface MTLIGAccelTexture : MTLIOAccelTexture <MTLTextureImplementation> {
    struct MTLIGAccelTextureInfo { struct SGfxRenderSurfaceState { union { struct { unsigned char Overridden381 : 6; unsigned char MediaBoundaryPixelMode : 2; unsigned char RenderCacheReadWriteMode : 1; unsigned char SamplerL2BypassModeDisable : 1; unsigned char VerticalLineStrideOffset : 1; unsigned char VerticalLineStride : 1; unsigned char TileMode : 2; unsigned char SurfaceHorizontalAlignment : 2; unsigned char SurfaceVerticalAlignment : 2; unsigned short SurfaceFormat : 9; unsigned char Astc_Enable : 1; unsigned char SurfaceArray : 1; unsigned char SurfaceType : 3; unsigned short SurfaceQpitch : 15; unsigned char Reserved395 : 4; unsigned char BaseMipLevel : 5; unsigned char Reserved397 : 1; unsigned char MemoryObjectControlState_IndexToMocsTables : 6; unsigned char Reserved399 : 1; unsigned short Width : 14; unsigned char Reserved401 : 2; unsigned short Height : 14; unsigned char Reserved403 : 2; unsigned int SurfacePitch : 18; unsigned char Reserved405 : 3; unsigned short Depth : 11; unsigned int Overridden407[1]; unsigned char MipCount : 4; unsigned char SurfaceMinLod : 4; unsigned char MipTailStartLod : 4; unsigned char Reserved411 : 2; unsigned char CoherencyType : 1; unsigned char Reserved413 : 3; unsigned char TiledResourceMode : 2; unsigned char EwaDisableForCube : 1; unsigned char YOffset : 3; unsigned char Reserved417 : 1; unsigned char XOffset : 7; unsigned short Overridden419 : 15; unsigned char Reserved420 : 1; unsigned short Overridden421 : 16; unsigned short ResourceMinLod : 12; unsigned char Reserved423 : 4; unsigned char ShaderChannelSelectAlpha : 3; unsigned char ShaderChannelSelectBlue : 3; unsigned char ShaderChannelSelectGreen : 3; unsigned char ShaderChannelSelectRed : 3; unsigned char Reserved428 : 2; unsigned char MemoryCompressionEnable : 1; unsigned char MemoryCompressionMode : 1; unsigned long SurfaceBaseAddress : 64; unsigned char QuiltWidth : 5; unsigned char QuiltHeight : 5; unsigned char Reserved434 : 2; unsigned long Overridden435 : 52; unsigned int Overridden436[4]; } ; struct { unsigned char CubeFaceEnablePositiveZ : 1; unsigned char CubeFaceEnableNegativeZ : 1; unsigned char CubeFaceEnablePositiveY : 1; unsigned char CubeFaceEnableNegativeY : 1; unsigned char CubeFaceEnablePositiveX : 1; unsigned char CubeFaceEnableNegativeX : 1; unsigned int Overridden445 : 26; unsigned int Overridden446[15]; } ; struct { unsigned char Reserved449 : 6; unsigned int Overridden450 : 26; unsigned int Overridden451[15]; } ; struct { unsigned int Overridden454[4]; unsigned char MultisamplePositionPaletteIndex : 3; unsigned char NumberOfMultisamples : 3; unsigned char MultisampledSurfaceStorageFormat : 1; unsigned short RenderTargetViewExtent : 11; unsigned short MinimumArrayElement : 11; unsigned char RenderTargetAndSampleUnormRotation : 2; unsigned char Reserved461 : 1; unsigned int Overridden462[11]; } ; struct { unsigned int Overridden465[4]; unsigned int Reserved466 : 32; unsigned int Overridden467[11]; } ; struct { unsigned int Overridden470[6]; unsigned char AuxiliarySurfaceMode : 3; unsigned short AuxiliarySurfacePitch : 9; unsigned char Reserved473 : 3; unsigned char Overridden474 : 1; unsigned short AuxiliarySurfaceQpitch : 15; unsigned char Reserved476 : 1; unsigned int Overridden477[9]; } ; struct { unsigned int Overridden480[6]; unsigned short YOffsetForUOrUvPlane : 14; unsigned char Reserved482 : 1; unsigned char Overridden483 : 1; unsigned short XOffsetForUOrUvPlane : 14; unsigned char Reserved485 : 1; unsigned char SeparateUvPlaneEnable : 1; unsigned int Overridden487[3]; unsigned int Overridden488 : 32; unsigned short YOffsetForVPlane : 14; unsigned char Reserved490 : 2; unsigned short XOffsetForVPlane : 14; unsigned char Reserved492 : 2; unsigned int Overridden493[4]; } ; struct { unsigned int Overridden496[10]; unsigned short Overridden497 : 12; unsigned long AuxiliarySurfaceBaseAddress : 52; unsigned int Overridden499[4]; } ; struct { unsigned int Overridden502[10]; unsigned int Overridden503 : 21; unsigned short AuxiliaryTableIndexForMediaCompressedSurface : 11; unsigned int Overridden505 : 32; unsigned int Overridden506[4]; } ; struct { unsigned int Overridden509[12]; unsigned int RedClearColor : 32; unsigned int GreenClearColor : 32; unsigned int BlueClearColor : 32; unsigned int AlphaClearColor : 32; } ; struct { unsigned int Overridden516[12]; unsigned int Reserved517 : 32; unsigned int Overridden518[3]; } ; struct { unsigned int Overridden521[12]; float HierarchicalDepthClearValue; unsigned int Reserved523 : 32; unsigned int Reserved524 : 32; unsigned int Reserved525 : 32; } ; } ; } hwSurfaceState; struct SGfxRenderSurfaceState { union { struct { unsigned char Overridden381 : 6; unsigned char MediaBoundaryPixelMode : 2; unsigned char RenderCacheReadWriteMode : 1; unsigned char SamplerL2BypassModeDisable : 1; unsigned char VerticalLineStrideOffset : 1; unsigned char VerticalLineStride : 1; unsigned char TileMode : 2; unsigned char SurfaceHorizontalAlignment : 2; unsigned char SurfaceVerticalAlignment : 2; unsigned short SurfaceFormat : 9; unsigned char Astc_Enable : 1; unsigned char SurfaceArray : 1; unsigned char SurfaceType : 3; unsigned short SurfaceQpitch : 15; unsigned char Reserved395 : 4; unsigned char BaseMipLevel : 5; unsigned char Reserved397 : 1; unsigned char MemoryObjectControlState_IndexToMocsTables : 6; unsigned char Reserved399 : 1; unsigned short Width : 14; unsigned char Reserved401 : 2; unsigned short Height : 14; unsigned char Reserved403 : 2; unsigned int SurfacePitch : 18; unsigned char Reserved405 : 3; unsigned short Depth : 11; unsigned int Overridden407[1]; unsigned char MipCount : 4; unsigned char SurfaceMinLod : 4; unsigned char MipTailStartLod : 4; unsigned char Reserved411 : 2; unsigned char CoherencyType : 1; unsigned char Reserved413 : 3; unsigned char TiledResourceMode : 2; unsigned char EwaDisableForCube : 1; unsigned char YOffset : 3; unsigned char Reserved417 : 1; unsigned char XOffset : 7; unsigned short Overridden419 : 15; unsigned char Reserved420 : 1; unsigned short Overridden421 : 16; unsigned short ResourceMinLod : 12; unsigned char Reserved423 : 4; unsigned char ShaderChannelSelectAlpha : 3; unsigned char ShaderChannelSelectBlue : 3; unsigned char ShaderChannelSelectGreen : 3; unsigned char ShaderChannelSelectRed : 3; unsigned char Reserved428 : 2; unsigned char MemoryCompressionEnable : 1; unsigned char MemoryCompressionMode : 1; unsigned long SurfaceBaseAddress : 64; unsigned char QuiltWidth : 5; unsigned char QuiltHeight : 5; unsigned char Reserved434 : 2; unsigned long Overridden435 : 52; unsigned int Overridden436[4]; } ; struct { unsigned char CubeFaceEnablePositiveZ : 1; unsigned char CubeFaceEnableNegativeZ : 1; unsigned char CubeFaceEnablePositiveY : 1; unsigned char CubeFaceEnableNegativeY : 1; unsigned char CubeFaceEnablePositiveX : 1; unsigned char CubeFaceEnableNegativeX : 1; unsigned int Overridden445 : 26; unsigned int Overridden446[15]; } ; struct { unsigned char Reserved449 : 6; unsigned int Overridden450 : 26; unsigned int Overridden451[15]; } ; struct { unsigned int Overridden454[4]; unsigned char MultisamplePositionPaletteIndex : 3; unsigned char NumberOfMultisamples : 3; unsigned char MultisampledSurfaceStorageFormat : 1; unsigned short RenderTargetViewExtent : 11; unsigned short MinimumArrayElement : 11; unsigned char RenderTargetAndSampleUnormRotation : 2; unsigned char Reserved461 : 1; unsigned int Overridden462[11]; } ; struct { unsigned int Overridden465[4]; unsigned int Reserved466 : 32; unsigned int Overridden467[11]; } ; struct { unsigned int Overridden470[6]; unsigned char AuxiliarySurfaceMode : 3; unsigned short AuxiliarySurfacePitch : 9; unsigned char Reserved473 : 3; unsigned char Overridden474 : 1; unsigned short AuxiliarySurfaceQpitch : 15; unsigned char Reserved476 : 1; unsigned int Overridden477[9]; } ; struct { unsigned int Overridden480[6]; unsigned short YOffsetForUOrUvPlane : 14; unsigned char Reserved482 : 1; unsigned char Overridden483 : 1; unsigned short XOffsetForUOrUvPlane : 14; unsigned char Reserved485 : 1; unsigned char SeparateUvPlaneEnable : 1; unsigned int Overridden487[3]; unsigned int Overridden488 : 32; unsigned short YOffsetForVPlane : 14; unsigned char Reserved490 : 2; unsigned short XOffsetForVPlane : 14; unsigned char Reserved492 : 2; unsigned int Overridden493[4]; } ; struct { unsigned int Overridden496[10]; unsigned short Overridden497 : 12; unsigned long AuxiliarySurfaceBaseAddress : 52; unsigned int Overridden499[4]; } ; struct { unsigned int Overridden502[10]; unsigned int Overridden503 : 21; unsigned short AuxiliaryTableIndexForMediaCompressedSurface : 11; unsigned int Overridden505 : 32; unsigned int Overridden506[4]; } ; struct { unsigned int Overridden509[12]; unsigned int RedClearColor : 32; unsigned int GreenClearColor : 32; unsigned int BlueClearColor : 32; unsigned int AlphaClearColor : 32; } ; struct { unsigned int Overridden516[12]; unsigned int Reserved517 : 32; unsigned int Overridden518[3]; } ; struct { unsigned int Overridden521[12]; float HierarchicalDepthClearValue; unsigned int Reserved523 : 32; unsigned int Reserved524 : 32; unsigned int Reserved525 : 32; } ; } ; } hwSurfaceStateTarget; struct SGfx3dStateDepthBuffer { unsigned char DWordLength : 8; unsigned char  : 8; unsigned char _3DCommandSubOpcode : 8; unsigned char _3DCommandOpcode : 3; unsigned char CommandSubType : 2; unsigned char CommandType : 3; unsigned int SurfacePitch : 18; unsigned char SurfaceFormat : 3; unsigned char  : 1; unsigned char HierarchicalDepthBufferEnable : 1; unsigned char  : 4; unsigned char StencilWriteEnable : 1; unsigned char DepthWriteEnable : 1; unsigned char SurfaceType : 3; unsigned long SurfaceBaseAddress : 48; unsigned short  : 16; unsigned char Lod : 4; unsigned short Width : 14; unsigned short Height : 14; unsigned char  : 1; unsigned char DepthBufferObjectControlState_IndexToMocsTables : 6; unsigned char  : 3; unsigned short MinimumArrayElement : 11; unsigned short Depth : 11; unsigned int  : 26; unsigned char MipTailStartLOD : 4; unsigned char TiledResourceMode : 2; unsigned short SurfaceQpitch : 15; unsigned char  : 6; unsigned short RenderTargetViewExtent : 11; } hwDepthBufferState; struct sClearRequirements { union { struct { unsigned char  : 3; unsigned char isTiled : 1; unsigned char isMSAA : 1; unsigned char isMCS : 1; unsigned char isHiZ : 1; unsigned char isLODAndSlice0 : 1; unsigned char isColorByteAlign8 : 1; unsigned char isColorByteAlign16 : 1; unsigned char isDepthAligned : 1; unsigned char isSingleLayer : 1; unsigned char isFastClearFormat : 1; unsigned char isFastClearFormatSRGB : 1; unsigned char isFastDepthClearFormat : 1; unsigned char canSampleCCS : 1; } ; unsigned short value; } ; } clearRequirements[15]; int HWPixelFormat; unsigned int vramRowBytes; unsigned int sysRowBytes; unsigned int surfaceHeight; unsigned int tileMode; unsigned int bytesPerTexel; unsigned int hizQPitch; unsigned int hiz_offset; unsigned int hiz_pitch; unsigned int ss_offset; unsigned int ss_width; unsigned int ss_height; unsigned int ss_pitch; unsigned int ssQPitch; unsigned int sd_offset; unsigned int sd_pitch; unsigned int ccs_offset; unsigned int ccs_pitch; unsigned int ccs_qpitch; unsigned int combinedSurfaceHeight; unsigned int blitWidth; unsigned int blitHeight; struct MTLPixelFormatInfo { char *name; unsigned int flags; unsigned long long castClass; union { struct MTLNormalPixelFormatInfo { unsigned long long pixelBytes; unsigned char componentCount; unsigned char alignment; unsigned long long pixelBytesRender; unsigned long long pixelBytesRenderMSAA; } normal; struct MTLCompressedPixelFormatInfo { unsigned long long blockBytes; unsigned long long blockWidth; unsigned long long blockHeight; unsigned long long blockDepth; } compressed; } type; } formatInfo; struct IOAccelClientSharedROPrivate *clientSharedROPrivate; MTLIGAccelTexture *pRootTexture; unsigned long long topLevelResourceID; unsigned short relativeLevel; unsigned short relativeLevelRange; unsigned short relativeSlice; unsigned short relativeSliceRange; unsigned long long cacheId; unsigned long long IGResourceId; unsigned long long bindlessId; unsigned long long resourceOffset; unsigned long long planeOffset; unsigned int bindlessOffset; struct { unsigned char hasCCS : 1; unsigned char isCubemap : 1; unsigned char canCacheOffsets : 1; unsigned char canUseSWSwizzle : 1; unsigned char validTarget : 1; unsigned char validClearReq : 1; unsigned char isTexView : 1; unsigned char iosurfaceDisplayable : 1; unsigned char isDisplayRC : 1; unsigned char isMagicMipMap : 1; unsigned char canSampleHiZ : 1; unsigned char allowRenderCompression : 1; unsigned char hasEDRAM : 1; unsigned char needsHiZInit : 1; unsigned char rccHangDisableMCSTexture : 1; unsigned char isSubresource : 1; unsigned char needKMDTracking : 1; unsigned char isStrideTexture : 1; unsigned char isTextureWriteable : 1; } ; union { struct { unsigned char isCompressed : 1; unsigned char isASTC : 1; unsigned char isArray : 1; unsigned char is2D : 1; unsigned char is3D : 1; unsigned char hasDepth : 1; unsigned char hasHiZ : 1; unsigned char hasStencil : 1; unsigned char isDepthView : 1; unsigned char isStencilView : 1; } ; unsigned short resourceProps; } ; unsigned short pad; struct { unsigned int clearRectWidth; unsigned int clearRectHeight; unsigned int qpitch; unsigned int pitch; unsigned int offset; } fastClearMCS; struct { struct { unsigned int gtt_offset; unsigned int vram_offset; unsigned int gtt_rowbytes; unsigned int vram_rowbytes; unsigned short w; unsigned short h; unsigned short w_uncompressed; unsigned short h_uncompressed; unsigned short depth; unsigned short bpp; unsigned short pixel_fmt; unsigned short tile_mode; union { struct *offsetData; unsigned long long offsetDataAddr; } ; } maps[6][15]; } textureHeader; } m_Info;
    unsigned long long _uniqueIdentifier;
}

@property (readonly) unsigned long long uniqueIdentifier;
@property (readonly) struct __IOSurface { } *iosurface;
@property (readonly) unsigned long long iosurfacePlane;
@property (readonly) unsigned long long rotation;
@property (readonly) char isCompressed;
@property (readonly) long long compressionFeedback;
@property (readonly, nonatomic) unsigned long long resourceIndex;
@property (readonly, nonatomic) unsigned long long gpuAddress;
@property (readonly) unsigned int swizzleKey;
@property (readonly) unsigned long long numFaces;
@property (readonly) char isDrawable;
@property (readonly) unsigned long long sparseSurfaceDefaultValue;
@property (readonly, nonatomic) unsigned long long compressionFootprint;
@property (readonly, nonatomic) unsigned long long colorSpaceConversionMatrix;
@property (readonly) unsigned long long gpuHandle;
@property (readonly) id<MTLResource> rootResource;
@property (readonly) id<MTLTexture> parentTexture;
@property (readonly) unsigned long long parentRelativeLevel;
@property (readonly) unsigned long long parentRelativeSlice;
@property (readonly) id<MTLBuffer> buffer;
@property (readonly) unsigned long long bufferOffset;
@property (readonly) unsigned long long bufferBytesPerRow;
@property (readonly) unsigned long long textureType;
@property (readonly) unsigned long long pixelFormat;
@property (readonly) unsigned long long width;
@property (readonly) unsigned long long height;
@property (readonly) unsigned long long depth;
@property (readonly) unsigned long long mipmapLevelCount;
@property (readonly) unsigned long long sampleCount;
@property (readonly) unsigned long long arrayLength;
@property (readonly) unsigned long long usage;
@property (readonly, getter=isShareable) char shareable;
@property (readonly, getter=isFramebufferOnly) char framebufferOnly;
@property (readonly) unsigned long long firstMipmapInTail;
@property (readonly) unsigned long long tailSizeInBytes;
@property (readonly) char isSparse;
@property (readonly) char allowGPUOptimizedContents;
@property (readonly) long long compressionType;
@property (readonly) struct MTLResourceID { unsigned long long x0; } gpuResourceID;
@property (readonly) id<MTLTexture> remoteStorageTexture;
@property (readonly, nonatomic) struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; } swizzle;
@property (copy) NSString *label;
@property (readonly) id<MTLDevice> device;
@property (readonly) unsigned long long cpuCacheMode;
@property (readonly) unsigned long long storageMode;
@property (readonly) unsigned long long hazardTrackingMode;
@property (readonly) unsigned long long resourceOptions;
@property (readonly) id<MTLHeap> heap;
@property (readonly) unsigned long long heapOffset;
@property (readonly) unsigned long long allocatedSize;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property int responsibleProcess;
@property (readonly) unsigned long long allocationID;
@property (readonly) unsigned long long protectionOptions;
@property (readonly) unsigned long long unfilteredResourceOptions;

- (void)dealloc;
- (id).cxx_construct;
- (void)getBytes:(void *)a0 bytesPerRow:(unsigned long long)a1 bytesPerImage:(unsigned long long)a2 fromRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a3 mipmapLevel:(unsigned long long)a4 slice:(unsigned long long)a5;
- (void)getBytes:(void *)a0 bytesPerRow:(unsigned long long)a1 fromRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a2 mipmapLevel:(unsigned long long)a3;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 resourceIndex:(unsigned long long)a1;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 resourceIndex:(unsigned long long)a4;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a4;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a4 resourceIndex:(unsigned long long)a5;
- (void)replaceRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a0 mipmapLevel:(unsigned long long)a1 slice:(unsigned long long)a2 withBytes:(const void *)a3 bytesPerRow:(unsigned long long)a4 bytesPerImage:(unsigned long long)a5;
- (void)replaceRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a0 mipmapLevel:(unsigned long long)a1 withBytes:(const void *)a2 bytesPerRow:(unsigned long long)a3;
- (id)initWithDevice:(id)a0 descriptor:(id)a1 iosurface:(struct __IOSurface { } *)a2 plane:(unsigned int)a3 field:(unsigned int)a4 args:(struct IOAccelNewResourceArgs { struct IOAccelNewResourceData { unsigned int x0; unsigned int x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned long long x6; unsigned long long x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned int x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; union { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; } x0; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x1; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4[2]; } x2; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x3; } x16; } x0; } *)a5 argsSize:(unsigned int)a6;
- (id)initWithDevice:(id)a0 descriptor:(id)a1 sysMemSize:(unsigned long long)a2 sysMemRowBytes:(unsigned long long)a3 vidMemSize:(unsigned long long)a4 vidMemRowBytes:(unsigned long long)a5 args:(struct IOAccelNewResourceArgs { struct IOAccelNewResourceData { unsigned int x0; unsigned int x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned long long x6; unsigned long long x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned int x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; union { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; } x0; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x1; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4[2]; } x2; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x3; } x16; } x0; } *)a6 argsSize:(unsigned int)a7;
- (id)initWithDevice:(id)a0 surface:(unsigned int)a1 buffer:(unsigned int)a2 args:(struct IOAccelNewResourceArgs { struct IOAccelNewResourceData { unsigned int x0; unsigned int x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned long long x6; unsigned long long x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned int x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; union { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; } x0; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x1; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4[2]; } x2; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x3; } x16; } x0; } *)a3 argsSize:(unsigned int)a4 returnData:(struct IOAccelGetResourceInfoReturnData { unsigned int x0; unsigned short x1; unsigned short x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12[2]; unsigned int x13; unsigned long long x14[0]; } *)a5 returnDataSize:(unsigned int)a6;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1 textureType:(unsigned long long)a2 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1 textureType:(unsigned long long)a2 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a5;
- (unsigned int)fixedHeapOffset;
- (unsigned int)fixedHeapOffsetAtIndex:(unsigned long long)a0;
- (void)generateClearRequirements;
- (void)generateDepthBufferState;
- (void)generateSurfaceStateTarget;
- (unsigned int)hasFixedHeapOffset;
- (id)initWithBuffer:(id)a0 descriptor:(id)a1 device:(id)a2 sysMemOffset:(unsigned long long)a3 sysMemRowBytes:(unsigned long long)a4 vidMemSize:(unsigned long long)a5 vidMemRowBytes:(unsigned long long)a6 args:(struct IOAccelNewResourceArgs { struct IOAccelNewResourceData { unsigned int x0; unsigned int x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned long long x6; unsigned long long x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned int x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; union { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; } x0; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x1; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4[2]; } x2; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x3; } x16; } x0; } *)a7 argsSize:(unsigned int)a8 isStrideTexture:(char)a9;
- (id)initWithDevice:(id)a0 descriptor:(id)a1 iosurface:(struct __IOSurface { } *)a2 plane:(unsigned int)a3 field:(unsigned int)a4 hizQPitch:(unsigned int)a5 ssQPitch:(unsigned int)a6 args:(struct IOAccelNewResourceArgs { struct IOAccelNewResourceData { unsigned int x0; unsigned int x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned long long x6; unsigned long long x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned int x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; union { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; } x0; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x1; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4[2]; } x2; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x3; } x16; } x0; } *)a7 argsSize:(unsigned int)a8;
- (id)initWithDevice:(id)a0 descriptor:(id)a1 sysMemSize:(unsigned long long)a2 sysMemRowBytes:(unsigned long long)a3 vidMemSize:(unsigned long long)a4 vidMemRowBytes:(unsigned long long)a5 hizQPitch:(unsigned int)a6 ssQPitch:(unsigned int)a7 args:(struct IOAccelNewResourceArgs { struct IOAccelNewResourceData { unsigned int x0; unsigned int x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned long long x6; unsigned long long x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned int x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; union { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; } x0; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x1; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4[2]; } x2; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x3; } x16; } x0; } *)a8 argsSize:(unsigned int)a9;
- (id)initWithHeap:(id)a0 resource:(id)a1 offset:(unsigned long long)a2 length:(unsigned long long)a3 device:(id)a4 descriptor:(id)a5 args:(struct VendorNewTextureDataStruc { struct IOAccelNewResourceData { unsigned int x0; unsigned int x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned long long x6; unsigned long long x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned int x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; union { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; } x0; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x1; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4[2]; } x2; struct { unsigned int x0; unsigned int x1; unsigned long long x2[3]; } x3; } x16; } x0; struct { struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; union { struct *x0; unsigned long long x1; } x12; } x0[6][15]; } x1; struct IntelResourceInfo { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned char x17; unsigned char x18; unsigned char x19[1]; struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; } x20; union { struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; } x0; unsigned short x1; } x21; unsigned short x22; unsigned int x23; } x2; } *)a6 argsSize:(unsigned int)a7 hizQPitch:(unsigned int)a8 ssQPitch:(unsigned int)a9;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1 resourceIndex:(unsigned long long)a2;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1 textureType:(unsigned long long)a2 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 resourceIndex:(unsigned long long)a5;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1 textureType:(unsigned long long)a2 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a5 resourceIndex:(unsigned long long)a6;
- (void)initializeCCSState:(id)a0 descPriv:(const struct MTLTextureDescriptorPrivate { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; char x8; unsigned long long x9; char x10; char x11; unsigned int x12; char x13; unsigned long long x14; union { unsigned long long x0; unsigned long long x1; } x15; unsigned long long x16; unsigned long long x17; char x18; char x19; unsigned long long x20; unsigned long long x21; unsigned long long x22; long long x23; unsigned long long x24; unsigned long long x25; unsigned long long x26; unsigned long long x27; } *)a1 texData:(const void *)a2;
- (void)initializeHWSurfaceState;
- (unsigned long long)lockForCPUAccess:(unsigned int *)a0 readOnly:(char)a1;
- (char)resolveCCS:(unsigned long long)a0 slice:(unsigned long long)a1 waitForCompletion:(char)a2;
- (unsigned long long)subresourceID;
- (char)unlockForCPUAccess:(unsigned int)a0 readOnly:(char)a1;

@end
