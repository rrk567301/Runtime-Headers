@class NSString, GFXAAMD_MtlComputePipelineState;
@protocol MTLDevice, MTLHeap, MTLTexture, MTLBuffer, MTLResource;

@interface GFXAAMD_MtlTexture : MTLIOAccelTexture <MTLTextureImplementation> {
    struct AMD_TextureMembersRec { struct ATIMipmapBufferHeader *mipHeaders; struct AMD_TextureFMaskInfoRec *fMaskInfo; struct AMD_TextureCMaskInfoRec *cMaskInfo; struct AMD_TextureDccInfoRec *dccInfo; struct AMD_TextureHTileInfoRec *hTileInfo; struct AMD_CompressionMgrRec *compressionMgr; struct _UBM_MASKRAMINFO *dcnDccMaskRamInfo; void *apiLayerData; struct AMD_TextureParamsRec { struct { unsigned char samplesLog2 : 3; unsigned char hasStencilMipHeaders : 1; unsigned char sRGB : 1; unsigned char isTexView : 1; unsigned char isTcCompatible : 1; unsigned char swizzleMode : 6; unsigned char epitchIsHeight : 1; unsigned char stencilEpitchIsHeight : 1; unsigned char stencilMipHeaderIdx : 5; unsigned char stencilViewFromCombinedDepthStencil : 1; unsigned char shaderRead : 1; unsigned char shaderWrite : 1; unsigned char renderTarget : 1; unsigned char pixelFormatView : 1; unsigned char canDeferExpand : 1; unsigned char expandOnTexBind : 1; unsigned char useDbForFastClear : 1; unsigned char is24to32f : 1; unsigned char isCube : 1; unsigned char isCubeArray : 1; unsigned char canDeferSync : 1; unsigned int reserved : 32; unsigned char isShared : 1; unsigned char bppExpandLog2 : 3; unsigned char finalizeIfWritten : 1; unsigned char depthStencil : 1; unsigned char hasCustomPitch : 1; unsigned int pad0 : 25; } ; unsigned long long texType; unsigned int width; unsigned int height; unsigned short depth; unsigned short mipChainPitch; unsigned short mipChainHeight; unsigned short mipChainLevel; unsigned int firstMipIdInTail; unsigned short stencilMipChainPitch; unsigned short stencilMipChainHeight; unsigned long long stencilOffset; unsigned int baseAlign; unsigned short viewBaseSlice; unsigned short viewLastSlice; unsigned char viewBaseLevel; unsigned char viewLastLevel; unsigned char atiFormat; unsigned char viewNumLevels; unsigned int pipeBankXor; unsigned short renderTargetId; } params; GFXAAMD_MtlComputePipelineState *retilePso; void *retileParamBytes; unsigned int retileParamNumBytes; unsigned short retileDispatchX; unsigned short retileDispatchY; unsigned int resourceIndex; unsigned char isRsrcIndexReserved : 1; unsigned int reserved : 31; } m_members;
}

@property (readonly) unsigned long long uniqueIdentifier;
@property (readonly, nonatomic) unsigned long long resourceIndex;
@property (readonly) char isSparse;
@property (readonly) struct __IOSurface { } *iosurface;
@property (readonly) unsigned long long iosurfacePlane;
@property (readonly) unsigned long long rotation;
@property (readonly) char isCompressed;
@property (readonly) long long compressionFeedback;
@property (readonly, nonatomic) unsigned long long gpuAddress;
@property (readonly) unsigned int swizzleKey;
@property (readonly) unsigned long long numFaces;
@property (readonly) char isDrawable;
@property (readonly) unsigned long long sparseSurfaceDefaultValue;
@property (readonly, nonatomic) unsigned long long compressionFootprint;
@property (readonly, nonatomic) unsigned long long colorSpaceConversionMatrix;
@property (readonly) unsigned long long gpuHandle;
@property (readonly) id<MTLResource> rootResource;
@property (readonly) id<MTLTexture> parentTexture;
@property (readonly) unsigned long long parentRelativeLevel;
@property (readonly) unsigned long long parentRelativeSlice;
@property (readonly) id<MTLBuffer> buffer;
@property (readonly) unsigned long long bufferOffset;
@property (readonly) unsigned long long bufferBytesPerRow;
@property (readonly) unsigned long long textureType;
@property (readonly) unsigned long long pixelFormat;
@property (readonly) unsigned long long width;
@property (readonly) unsigned long long height;
@property (readonly) unsigned long long depth;
@property (readonly) unsigned long long mipmapLevelCount;
@property (readonly) unsigned long long sampleCount;
@property (readonly) unsigned long long arrayLength;
@property (readonly) unsigned long long usage;
@property (readonly, getter=isShareable) char shareable;
@property (readonly, getter=isFramebufferOnly) char framebufferOnly;
@property (readonly) unsigned long long firstMipmapInTail;
@property (readonly) unsigned long long tailSizeInBytes;
@property (readonly) char allowGPUOptimizedContents;
@property (readonly) long long compressionType;
@property (readonly) struct MTLResourceID { unsigned long long x0; } gpuResourceID;
@property (readonly) id<MTLTexture> remoteStorageTexture;
@property (readonly, nonatomic) struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; } swizzle;
@property (copy) NSString *label;
@property (readonly) id<MTLDevice> device;
@property (readonly) unsigned long long cpuCacheMode;
@property (readonly) unsigned long long storageMode;
@property (readonly) unsigned long long hazardTrackingMode;
@property (readonly) unsigned long long resourceOptions;
@property (readonly) id<MTLHeap> heap;
@property (readonly) unsigned long long heapOffset;
@property (readonly) unsigned long long allocatedSize;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property int responsibleProcess;
@property (readonly) unsigned long long allocationID;
@property (readonly) unsigned long long protectionOptions;
@property (readonly) unsigned long long unfilteredResourceOptions;

- (void)dealloc;
- (void)getBytes:(void *)a0 bytesPerRow:(unsigned long long)a1 bytesPerImage:(unsigned long long)a2 fromRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a3 mipmapLevel:(unsigned long long)a4 slice:(unsigned long long)a5;
- (void)getBytes:(void *)a0 bytesPerRow:(unsigned long long)a1 fromRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a2 mipmapLevel:(unsigned long long)a3;
- (id)newRemoteTextureViewForDevice:(id)a0;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 resourceIndex:(unsigned long long)a1;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 resourceIndex:(unsigned long long)a4;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a4;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a4 resourceIndex:(unsigned long long)a5;
- (void)replaceRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a0 mipmapLevel:(unsigned long long)a1 slice:(unsigned long long)a2 withBytes:(const void *)a3 bytesPerRow:(unsigned long long)a4 bytesPerImage:(unsigned long long)a5;
- (void)replaceRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a0 mipmapLevel:(unsigned long long)a1 withBytes:(const void *)a2 bytesPerRow:(unsigned long long)a3;
- (unsigned long long)setPurgeableState:(unsigned long long)a0;
- (id)initWithHeap:(id)a0 resource:(id)a1 offset:(unsigned long long)a2 length:(unsigned long long)a3 device:(id)a4 descriptor:(id)a5;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1 resourceIndex:(unsigned long long)a2;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1 textureType:(unsigned long long)a2 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a5 resourceIndex:(unsigned long long)a6;
- (id)initIOAccelSurfaceBufferWithDevice:(id)a0 surface:(unsigned long long)a1 buffer:(unsigned long long)a2;
- (id)initIOSurfaceWithDevice:(id)a0 descriptor:(id)a1 iosurface:(struct __IOSurface { } *)a2 plane:(unsigned int)a3 field:(unsigned int)a4;
- (id)initInternalWithDevice:(id)a0 descriptor:(id)a1;
- (id)initShareableWithDevice:(id)a0 descriptor:(id)a1 iosurface:(struct __IOSurface { } *)a2 plane:(unsigned int)a3 field:(unsigned int)a4;
- (id)initTiledWithBuffer:(id)a0 descriptor:(id)a1 offset:(unsigned long long)a2 rowBytes:(unsigned long long)a3;
- (id)initWithBuffer:(id)a0 descriptor:(id)a1 offset:(unsigned long long)a2 rowBytes:(unsigned long long)a3;
- (id)initWithSharedDevice:(id)a0 remoteStorageTexture:(id)a1;

@end
