@class _MTLComputePipelineState;
@protocol MTLDevice;

@interface GFXAAMD_MPSPlugin : NSObject {
    struct AMD_MPSPluginMembersRec { id<MTLDevice> mtlDevice; unsigned int numTotalCUs; _MTLComputePipelineState *computePipelineState_MPS_Tex_To_MIOpen_Buf; _MTLComputePipelineState *computePipelineState_MIOpen_Buf_To_MPS_Tex; _MTLComputePipelineState *computePipelineState_FP16_MPS_Tex_To_MIOpen_Buf; _MTLComputePipelineState *computePipelineState_FP16_MIOpen_Buf_To_MPS_Tex; _MTLComputePipelineState *computePipelineState_GEMM_F32F32; _MTLComputePipelineState *computePipelineState_CNN_3x3_32x32; _MTLComputePipelineState *computePipelineState_Winograd; _MTLComputePipelineState *computePipelineState_Winograd_FP16; _MTLComputePipelineState *computePipelineState_MPS_Tex_To_MIOpen_Buf_Conv3x3; _MTLComputePipelineState *computePipelineState_MIOpen_Buf_To_MPS_Tex_Conv3x3; _MTLComputePipelineState *computePipelineState_MPS_FP16_Weights_To_MIOpen_Buf; _MTLComputePipelineState *computePipelineState_MPS_FP16_Weights_To_MIOpen_Buf_Conv3x3; _MTLComputePipelineState *computePipelineState_Translation_Data_NHWC_to_NCHW; _MTLComputePipelineState *computePipelineState_Translation_Data_NKHW_to_NHWK; _MTLComputePipelineState *computePipelineState_Translation_Weights_HWIO_to_OIHW; _MTLComputePipelineState *computePipelineState_gradient_translateNHWC_to_NCHW; _MTLComputePipelineState *computePipelineState_gradient_translateNKHW_to_NHWK; _MTLComputePipelineState *computePipelineState_gradient_translateHWIO_to_OIHW; _MTLComputePipelineState *computePipelineState_gradient_translateOIHW_to_HWIO; _MTLComputePipelineState *computePipelineState_Translation_Data_NHWC_to_NCHW_FP16; _MTLComputePipelineState *computePipelineState_Translation_Data_NKHW_to_NHWK_FP16; _MTLComputePipelineState *computePipelineState_Translation_Weights_HWIO_to_OIHW_FP16; _MTLComputePipelineState *computePipelineState_gradient_translateNHWC_to_NCHW_FP16; _MTLComputePipelineState *computePipelineState_gradient_translateNKHW_to_NHWK_FP16; _MTLComputePipelineState *computePipelineState_gradient_translateHWIO_to_OIHW_FP16; } m_members;
}

+ (unsigned long long)decompressBytesWithMode:(int)a0 dstSize:(unsigned long long)a1 dstData:(char *)a2 srcSize:(unsigned long long)a3 srcData:(const char *)a4;
+ (char)decompressData:(id)a0 output:(void *)a1;
+ (char)extractInfoFromCodeObject:(id)a0 codeObjectInfo:(struct AMD_HSACodeObjectInfoRec { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; } *)a1;

- (void)dealloc;
- (id)initWithDevice:(id)a0;
- (void)checkCompressedKernelsInDictionary:(id)a0;
- (void)configureContractionProblem:(void *)a0 isHalf:(char)a1;
- (char)createComputePipelineStateForKey:(id)a0;
- (void)createComputePipelineStateFromTensile:(void *)a0;
- (void)createTensileLibrary;
- (void)dispatchTensileGEMMKernelsWithComputePipelineStatesDict:(id)a0 encoder:(id)a1 commandBuffer:(id)a2 A:(id)a3 B:(id)a4 C:(id)a5 dispatcher:(void *)a6;
- (id)getCachedComputePipelineStatesDict;
- (struct AMDGPU { void /* function */ **x0; int x1; int x2; int x3; int x4; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x5; })getHardware;
- (id)getIsaHardwareString;
- (struct shared_ptr<Tensile::ContractionSolution> { struct ContractionSolution *x0; struct __shared_weak_count *x1; })getTensileSolutionWithProblem:(struct ContractionProblem { void /* function */ **x0; struct TensorDescriptor { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; } x1; struct TensorDescriptor { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; } x2; struct TensorDescriptor { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; } x3; struct TensorDescriptor { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x0; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; } x4; struct vector<Tensile::TensorOp, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; struct TensorOp *x1; struct __compressed_pair<Tensile::TensorOp *, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; } x2; } x5; struct vector<Tensile::TensorOp, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; struct TensorOp *x1; struct __compressed_pair<Tensile::TensorOp *, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; } x2; } x6; struct vector<Tensile::TensorOp, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; struct TensorOp *x1; struct __compressed_pair<Tensile::TensorOp *, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; } x2; } x7; struct vector<Tensile::TensorOp, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; struct TensorOp *x1; struct __compressed_pair<Tensile::TensorOp *, std::allocator<Tensile::TensorOp>> { struct TensorOp *x0; } x2; } x8; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x9; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x10; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x11; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x12; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x13; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { union __rep { struct __short { struct { unsigned char x0 : 1; unsigned char x1 : 7; } x0; char x1[0]; char x2[23]; } x0; struct __long { struct { unsigned char x0 : 1; unsigned long x1 : 63; } x0; unsigned long long x1; char *x2; } x1; } x0; } x0; } x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; int x22; int x23; int x24; int x25; int x26; int x27; int x28; struct vector<Tensile::ContractionProblem::FreeIndex, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; struct FreeIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::FreeIndex *, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; } x2; } x29; struct vector<Tensile::ContractionProblem::FreeIndex, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; struct FreeIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::FreeIndex *, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; } x2; } x30; struct vector<Tensile::ContractionProblem::FreeIndex, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; struct FreeIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::FreeIndex *, std::allocator<Tensile::ContractionProblem::FreeIndex>> { struct FreeIndex *x0; } x2; } x31; struct vector<Tensile::ContractionProblem::BatchIndex, std::allocator<Tensile::ContractionProblem::BatchIndex>> { struct BatchIndex *x0; struct BatchIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::BatchIndex *, std::allocator<Tensile::ContractionProblem::BatchIndex>> { struct BatchIndex *x0; } x2; } x32; struct vector<Tensile::ContractionProblem::BoundIndex, std::allocator<Tensile::ContractionProblem::BoundIndex>> { struct BoundIndex *x0; struct BoundIndex *x1; struct __compressed_pair<Tensile::ContractionProblem::BoundIndex *, std::allocator<Tensile::ContractionProblem::BoundIndex>> { struct BoundIndex *x0; } x2; } x33; struct vector<Tensile::ContractionProblem::ZeroPad, std::allocator<Tensile::ContractionProblem::ZeroPad>> { struct ZeroPad *x0; struct ZeroPad *x1; struct __compressed_pair<Tensile::ContractionProblem::ZeroPad *, std::allocator<Tensile::ContractionProblem::ZeroPad>> { struct ZeroPad *x0; } x2; } x34; struct vector<Tensile::ContractionProblem::ZeroPad, std::allocator<Tensile::ContractionProblem::ZeroPad>> { struct ZeroPad *x0; struct ZeroPad *x1; struct __compressed_pair<Tensile::ContractionProblem::ZeroPad *, std::allocator<Tensile::ContractionProblem::ZeroPad>> { struct ZeroPad *x0; } x2; } x35; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x36; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x37; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x38; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x39; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x40; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x41; struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; } x42; BOOL x43; double x44; unsigned long long x45; unsigned long long x46; unsigned long long x47; unsigned long long x48; })a0;
- (id)getWinogradFP16KernelName;
- (char)mpsPluginUsageLoggingOn;

@end
