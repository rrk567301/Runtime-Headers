@class BronzeMtlComputePipelineState, __end_, MTLCompiler, NSDictionary, MTLIOAccelFence, MTLTargetDeviceArchitecture, BronzeMtlBuffer, MTLArchitecture, BronzeMtlCmdBuffer, NSMutableArray, NSString, MTLGPUBVHBuilder, MTLIOAccelResource, NSArray, __end_cap_, MTLMotionEstimatorCapabilities;
@protocol MTLTexture, MTLDevice;

@interface BronzeMtlDevice : MTLIOAccelDevice <MTLDeviceSPI, AmdPrivateDevice, AmdDevDriverSPIPrivateDevice, AmdCLKSPIPrivateDevice> {
    struct BronzeDeviceMembersRec { struct BronzeHwInfoRec { struct AMDCommonHwInfoRec { unsigned int gpuFamily; unsigned int gfxIPVersion; unsigned int rtIPVersion; unsigned int asicID; unsigned int asicRev; unsigned int vramSize; unsigned int vramBitWidth; unsigned int cgRefClkFreq; unsigned int refClkFreq; unsigned int sysClkFreq; unsigned int memClkFreq; unsigned int uCodeVersionPFP; unsigned int uCodeVersionME; unsigned int uCodeVersionCE; unsigned int uCodeVersionSDMA0; unsigned int uCodeVersionSDMA1; union { unsigned int activeCUMask[4]; unsigned int activeCUMasks[4][2]; } ; unsigned int numComputeUnits; unsigned int totalNumComputeUnits; unsigned int numWavesPerSIMD; unsigned int numPhysicalSGPRsPerSIMD; unsigned int numPhysicalVGPRsPerSIMD; unsigned int numRasterBackEnds; unsigned int numShaderEngines; unsigned int activeShaderEngineMask; unsigned int numShaderArrays; unsigned int numGsWavesPerVGT; unsigned int numOffChipLdsBuffersPerSE; unsigned int numParameterCacheLines; unsigned int numTCC; unsigned int numSDP; unsigned int numSDMAEngines; unsigned int firstActiveCUIdx; unsigned char usesHBM : 1; unsigned char supportsRBPlus : 1; unsigned char supportsCMask : 1; unsigned char supportsFMask : 1; unsigned char isMobile : 1; unsigned char isAPU : 1; unsigned char isValid : 1; unsigned int reserved : 25; } common; unsigned int asicID; unsigned int asicRev; unsigned int vramSize; unsigned short refClkFreq; unsigned short sysClkFreq; unsigned int uCodeVersionPFP; unsigned int uCodeVersionME; unsigned int uCodeVersionCE; unsigned int paScRasterConfig; unsigned int paScRasterConfig1; unsigned char numShaderEngines; unsigned char numShaderArrays; unsigned char numComputeUnits; unsigned char numRasterBackEnds; unsigned int totalNumComputeUnits; unsigned int spiVsLateAllocLimit; unsigned short cgRefClkFreq; struct { unsigned char isTahiti : 1; unsigned char isPitcairn : 1; unsigned char isVerde : 1; unsigned char isUnknownSI : 1; unsigned char isBonaire : 1; unsigned char isHawaii : 1; unsigned char isUnknownCI : 1; unsigned char isTonga : 1; unsigned char isFiji : 1; unsigned char isEllesmere : 1; unsigned char isBaffin : 1; unsigned char isLexa : 1; unsigned char isUnknownVI : 1; unsigned char isSouthernIslandsFamily : 1; unsigned char isSeaIslandsFamily : 1; unsigned char isVolcanicIslandsFamily : 1; unsigned char isCiViBased : 1; unsigned char isMobile : 1; unsigned char supportsSpiVsLateAlloc : 1; unsigned char supportsOutOfOrderPrims : 1; unsigned char supportsDistributedTess : 1; unsigned char supportsSmallPrimFilter : 1; unsigned char supportsDegenPrimFilter : 1; unsigned char usesHighBandwidthMemory : 1; unsigned char reserved : 8; } chip; struct BronzeHwWorkAroundsRec { unsigned char cbFMaskAddressError : 1; unsigned char cbDCCThickTilingHang : 1; unsigned char cbDCCOverWriteCombCorruption : 1; unsigned char cpDispOver4KThreadGroups : 1; unsigned char dbReZStencilCorruption : 1; unsigned char dbHtileIncorrectPadding : 1; unsigned char dbOverrasterInEarlyZ : 1; unsigned char dbTcCompatibilityHang : 1; unsigned char iaIndexType : 1; unsigned char paLineSmallPrimFilterBroken : 1; unsigned char scOutOfOrderPrimsHang : 1; unsigned char spiNullWaveHang : 1; unsigned char spiPersistentStateHang : 1; unsigned char spiLoadBalCUMaskHang : 1; unsigned char spiPgmRsrcLS2State : 1; unsigned char spiSGPRInit : 1; unsigned char sqReadLaneSMRD : 1; unsigned char sqVCCZBitSMRD : 1; unsigned char sqVINTRPReadLane : 1; unsigned char sqSMemBufferAddrClamp : 1; unsigned char sxZExportCorruption : 1; unsigned char tcpMipmapSwizzlePad : 1; unsigned char tcpLocalWriteCorruption : 1; unsigned char vgtGSDeadlockHang : 1; unsigned char vgtGSVSRingOverflowHang : 1; unsigned char vgtSpiVsWaveHang : 1; unsigned char vgtManyInstancesHang : 1; unsigned char miscCoalesceStore : 1; unsigned char pixelPipeStatCntl : 1; unsigned char miscOffChipGSHang : 1; unsigned char spareBits : 2; } hwWorkArounds; } hwInfo; struct BronzeAddrLibInterfaceRec { void *handle; union GB_TILE_MODE0)"gbMacroTileModeTable"^(GB_MACROTILE_MODE0__CI__VI)"numGBTileModeEntries"I"numGBMacroTileModeEntries"I"tileIndexLinearGeneral"i"tileIndexLinearAligned"i { } *gbTileModeTable; union GB_MACROTILE_MODE0__CI__VI)"numGBTileModeEntries"I"numGBMacroTileModeEntries"I"tileIndexLinearGeneral"i"tileIndexLinearAligned"i { } *gbMacroTileModeTable; unsigned int numGBTileModeEntries; unsigned int numGBMacroTileModeEntries; int tileIndexLinearGeneral; int tileIndexLinearAligned; } addrLibInterface; MTLIOAccelResource *zpassStagingBuffer; struct BronzeUBMInterfaceRec { void *handle; void *deviceHandle; union GB_TILE_MODE0)"gbMacroTileModeTable"^(GB_MACROTILE_MODE0__CI__VI)"numGBTileModeEntries"I"numGBMacroTileModeEntries"I"device"@"<MTLDevice>""ubmClientContext"{BronzeUBMClientContextRec { } *gbTileModeTable; union GB_MACROTILE_MODE0__CI__VI)"numGBTileModeEntries"I"numGBMacroTileModeEntries"I"device"@"<MTLDevice>""ubmClientContext"{BronzeUBMClientContextRec { } *gbMacroTileModeTable; unsigned int numGBTileModeEntries; unsigned int numGBMacroTileModeEntries; id<MTLDevice> device; struct BronzeUBMClientContextRec { struct BronzeCmdBufInfoRec *cmdBufferInfo; struct RgpSqttMarkerLayoutTransitionFlags { union { struct { unsigned char depthStencilExpand : 1; unsigned char htileHiZRangeExpand : 1; unsigned char depthStencilResummarize : 1; unsigned char dccDecompress : 1; unsigned char fmaskDecompress : 1; unsigned char fastClearEliminate : 1; unsigned char fmaskColorExpand : 1; unsigned char initMaskRam : 1; } ; unsigned int dword01; } ; } flags; unsigned int barrierReason; unsigned int eventType; unsigned int space; } ubmClientContext; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; MTLIOAccelResource *ubmBuffers[2]; } ubmInterface; struct BronzeCpuTexInterfaceRec *cpuTexInterface; struct BronzeRsrcMgrRec **rsrcMgrStack; unsigned int rsrcMgrStackTop; unsigned int rsrcMgrStackSize; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } rsrcMgrStackLock; unsigned int videoEncoderSessionId; unsigned int videoEncoderSessionActive; MTLMotionEstimatorCapabilities *motionEstimatorCapabilities; MTLIOAccelResource *motionEstimationBuffer; struct BronzeStaticHwCtxRegsRec { union CB_DCC_CONTROL__VI { struct { unsigned char OVERWRITE_COMBINER_DISABLE : 1; unsigned char OVERWRITE_COMBINER_MRT_SHARING_DISABLE : 1; unsigned char OVERWRITE_COMBINER_WATERMARK : 5; unsigned int  : 25; } bitfields; struct { unsigned char OVERWRITE_COMBINER_DISABLE : 1; unsigned char OVERWRITE_COMBINER_MRT_SHARING_DISABLE : 1; unsigned char OVERWRITE_COMBINER_WATERMARK : 5; unsigned int  : 25; } bits; unsigned int u32All; int i32All; float f32All; } CB_DCC_CONTROL; union DB_RENDER_CONTROL { struct { unsigned char DEPTH_CLEAR_ENABLE : 1; unsigned char STENCIL_CLEAR_ENABLE : 1; unsigned char DEPTH_COPY : 1; unsigned char STENCIL_COPY : 1; unsigned char RESUMMARIZE_ENABLE : 1; unsigned char STENCIL_COMPRESS_DISABLE : 1; unsigned char DEPTH_COMPRESS_DISABLE : 1; unsigned char COPY_CENTROID : 1; unsigned char COPY_SAMPLE : 4; unsigned char DECOMPRESS_ENABLE__VI : 1; unsigned int  : 19; } bitfields; struct { unsigned char DEPTH_CLEAR_ENABLE : 1; unsigned char STENCIL_CLEAR_ENABLE : 1; unsigned char DEPTH_COPY : 1; unsigned char STENCIL_COPY : 1; unsigned char RESUMMARIZE_ENABLE : 1; unsigned char STENCIL_COMPRESS_DISABLE : 1; unsigned char DEPTH_COMPRESS_DISABLE : 1; unsigned char COPY_CENTROID : 1; unsigned char COPY_SAMPLE : 4; unsigned char DECOMPRESS_ENABLE__VI : 1; unsigned int  : 19; } bits; unsigned int u32All; int i32All; float f32All; } DB_RENDER_CONTROL; union PA_SC_WINDOW_OFFSET { struct { unsigned short WINDOW_X_OFFSET : 16; unsigned short WINDOW_Y_OFFSET : 16; } bitfields; struct { unsigned short WINDOW_X_OFFSET : 16; unsigned short WINDOW_Y_OFFSET : 16; } bits; unsigned int u32All; int i32All; float f32All; } PA_SC_WINDOW_OFFSET; union PA_SC_CLIPRECT_RULE { struct { unsigned short CLIP_RULE : 16; unsigned short  : 16; } bitfields; struct { unsigned short CLIP_RULE : 16; unsigned short  : 16; } bits; unsigned int u32All; int i32All; float f32All; } PA_SC_CLIPRECT_RULE; union PA_SC_EDGERULE { struct { unsigned char ER_TRI : 4; unsigned char ER_POINT : 4; unsigned char ER_RECT : 4; unsigned char ER_LINE_LR : 6; unsigned char ER_LINE_RL : 6; unsigned char ER_LINE_TB : 4; unsigned char ER_LINE_BT : 4; } bitfields; struct { unsigned char ER_TRI : 4; unsigned char ER_POINT : 4; unsigned char ER_RECT : 4; unsigned char ER_LINE_LR : 6; unsigned char ER_LINE_RL : 6; unsigned char ER_LINE_TB : 4; unsigned char ER_LINE_BT : 4; } bits; unsigned int u32All; int i32All; float f32All; } PA_SC_EDGERULE; union PA_SU_HARDWARE_SCREEN_OFFSET { struct { unsigned short HW_SCREEN_OFFSET_X : 9; unsigned char  : 7; unsigned short HW_SCREEN_OFFSET_Y : 9; unsigned char  : 7; } bitfields; struct { unsigned short HW_SCREEN_OFFSET_X : 9; unsigned char  : 7; unsigned short HW_SCREEN_OFFSET_Y : 9; unsigned char  : 7; } bits; unsigned int u32All; int i32All; float f32All; } PA_SU_HARDWARE_SCREEN_OFFSET; union PA_SC_RASTER_CONFIG { struct { unsigned char RB_MAP_PKR0 : 2; unsigned char RB_MAP_PKR1 : 2; unsigned char RB_XSEL2 : 2; unsigned char RB_XSEL : 1; unsigned char RB_YSEL : 1; unsigned char PKR_MAP : 2; unsigned char PKR_XSEL : 2; unsigned char PKR_YSEL : 2; unsigned char PKR_XSEL2__CI__VI : 2; unsigned char SC_MAP : 2; unsigned char SC_XSEL : 2; unsigned char SC_YSEL : 2; unsigned char  : 2; unsigned char SE_MAP : 2; unsigned char SE_XSEL : 2; unsigned char SE_YSEL : 2; unsigned char  : 2; } bitfields; struct { unsigned char RB_MAP_PKR0 : 2; unsigned char RB_MAP_PKR1 : 2; unsigned char RB_XSEL2 : 2; unsigned char RB_XSEL : 1; unsigned char RB_YSEL : 1; unsigned char PKR_MAP : 2; unsigned char PKR_XSEL : 2; unsigned char PKR_YSEL : 2; unsigned char PKR_XSEL2__CI__VI : 2; unsigned char SC_MAP : 2; unsigned char SC_XSEL : 2; unsigned char SC_YSEL : 2; unsigned char  : 2; unsigned char SE_MAP : 2; unsigned char SE_XSEL : 2; unsigned char SE_YSEL : 2; unsigned char  : 2; } bits; unsigned int u32All; int i32All; float f32All; } PA_SC_RASTER_CONFIG; union PA_SC_RASTER_CONFIG_1__CI__VI { struct { unsigned char SE_PAIR_MAP : 2; unsigned char SE_PAIR_XSEL : 2; unsigned char SE_PAIR_YSEL : 2; unsigned int  : 26; } bitfields; struct { unsigned char SE_PAIR_MAP : 2; unsigned char SE_PAIR_XSEL : 2; unsigned char SE_PAIR_YSEL : 2; unsigned int  : 26; } bits; unsigned int u32All; int i32All; float f32All; } PA_SC_RASTER_CONFIG_1; union PA_CL_POINT_X_RAD { struct { unsigned int DATA_REGISTER : 32; } bitfields; struct { unsigned int DATA_REGISTER : 32; } bits; unsigned int u32All; int i32All; float f32All; } PA_CL_POINT_X_RAD; union PA_CL_POINT_Y_RAD { struct { unsigned int DATA_REGISTER : 32; } bitfields; struct { unsigned int DATA_REGISTER : 32; } bits; unsigned int u32All; int i32All; float f32All; } PA_CL_POINT_Y_RAD; union PA_CL_POINT_SIZE { struct { unsigned int DATA_REGISTER : 32; } bitfields; struct { unsigned int DATA_REGISTER : 32; } bits; unsigned int u32All; int i32All; float f32All; } PA_CL_POINT_SIZE; union PA_CL_POINT_CULL_RAD { struct { unsigned int DATA_REGISTER : 32; } bitfields; struct { unsigned int DATA_REGISTER : 32; } bits; unsigned int u32All; int i32All; float f32All; } PA_CL_POINT_CULL_RAD; union PA_CL_VTE_CNTL { struct { unsigned char VPORT_X_SCALE_ENA : 1; unsigned char VPORT_X_OFFSET_ENA : 1; unsigned char VPORT_Y_SCALE_ENA : 1; unsigned char VPORT_Y_OFFSET_ENA : 1; unsigned char VPORT_Z_SCALE_ENA : 1; unsigned char VPORT_Z_OFFSET_ENA : 1; unsigned char  : 2; unsigned char VTX_XY_FMT : 1; unsigned char VTX_Z_FMT : 1; unsigned char VTX_W0_FMT : 1; unsigned char PERFCOUNTER_REF : 1; unsigned int  : 20; } bitfields; struct { unsigned char VPORT_X_SCALE_ENA : 1; unsigned char VPORT_X_OFFSET_ENA : 1; unsigned char VPORT_Y_SCALE_ENA : 1; unsigned char VPORT_Y_OFFSET_ENA : 1; unsigned char VPORT_Z_SCALE_ENA : 1; unsigned char VPORT_Z_OFFSET_ENA : 1; unsigned char  : 2; unsigned char VTX_XY_FMT : 1; unsigned char VTX_Z_FMT : 1; unsigned char VTX_W0_FMT : 1; unsigned char PERFCOUNTER_REF : 1; unsigned int  : 20; } bits; unsigned int u32All; int i32All; float f32All; } PA_CL_VTE_CNTL; union PA_CL_NANINF_CNTL { struct { unsigned char VTE_XY_INF_DISCARD : 1; unsigned char VTE_Z_INF_DISCARD : 1; unsigned char VTE_W_INF_DISCARD : 1; unsigned char VTE_0XNANINF_IS_0 : 1; unsigned char VTE_XY_NAN_RETAIN : 1; unsigned char VTE_Z_NAN_RETAIN : 1; unsigned char VTE_W_NAN_RETAIN : 1; unsigned char VTE_W_RECIP_NAN_IS_0 : 1; unsigned char VS_XY_NAN_TO_INF : 1; unsigned char VS_XY_INF_RETAIN : 1; unsigned char VS_Z_NAN_TO_INF : 1; unsigned char VS_Z_INF_RETAIN : 1; unsigned char VS_W_NAN_TO_INF : 1; unsigned char VS_W_INF_RETAIN : 1; unsigned char VS_CLIP_DIST_INF_DISCARD : 1; unsigned char  : 5; unsigned char VTE_NO_OUTPUT_NEG_0 : 1; unsigned short  : 11; } bitfields; struct { unsigned char VTE_XY_INF_DISCARD : 1; unsigned char VTE_Z_INF_DISCARD : 1; unsigned char VTE_W_INF_DISCARD : 1; unsigned char VTE_0XNANINF_IS_0 : 1; unsigned char VTE_XY_NAN_RETAIN : 1; unsigned char VTE_Z_NAN_RETAIN : 1; unsigned char VTE_W_NAN_RETAIN : 1; unsigned char VTE_W_RECIP_NAN_IS_0 : 1; unsigned char VS_XY_NAN_TO_INF : 1; unsigned char VS_XY_INF_RETAIN : 1; unsigned char VS_Z_NAN_TO_INF : 1; unsigned char VS_Z_INF_RETAIN : 1; unsigned char VS_W_NAN_TO_INF : 1; unsigned char VS_W_INF_RETAIN : 1; unsigned char VS_CLIP_DIST_INF_DISCARD : 1; unsigned char  : 5; unsigned char VTE_NO_OUTPUT_NEG_0 : 1; unsigned short  : 11; } bits; unsigned int u32All; int i32All; float f32All; } PA_CL_NANINF_CNTL; union PA_SU_SMALL_PRIM_FILTER_CNTL__VI { struct { unsigned char SMALL_PRIM_FILTER_ENABLE : 1; unsigned char TRIANGLE_FILTER_DISABLE : 1; unsigned char LINE_FILTER_DISABLE : 1; unsigned char POINT_FILTER_DISABLE : 1; unsigned char RECTANGLE_FILTER_DISABLE : 1; unsigned int  : 27; } bitfields; struct { unsigned char SMALL_PRIM_FILTER_ENABLE : 1; unsigned char TRIANGLE_FILTER_DISABLE : 1; unsigned char LINE_FILTER_DISABLE : 1; unsigned char POINT_FILTER_DISABLE : 1; unsigned char RECTANGLE_FILTER_DISABLE : 1; unsigned int  : 27; } bits; unsigned int u32All; int i32All; float f32All; } PA_SU_SMALL_PRIM_FILTER_CNTL__VI; union PA_SU_POINT_MINMAX { struct { unsigned short MIN_SIZE : 16; unsigned short MAX_SIZE : 16; } bitfields; struct { unsigned short MIN_SIZE : 16; unsigned short MAX_SIZE : 16; } bits; unsigned int u32All; int i32All; float f32All; } PA_SU_POINT_MINMAX; union PA_SC_LINE_STIPPLE { struct { unsigned short LINE_PATTERN : 16; unsigned char REPEAT_COUNT : 8; unsigned char  : 4; unsigned char PATTERN_BIT_ORDER : 1; unsigned char AUTO_RESET_CNTL : 2; unsigned char  : 1; } bitfields; struct { unsigned short LINE_PATTERN : 16; unsigned char REPEAT_COUNT : 8; unsigned char  : 4; unsigned char PATTERN_BIT_ORDER : 1; unsigned char AUTO_RESET_CNTL : 2; unsigned char  : 1; } bits; unsigned int u32All; int i32All; float f32All; } PA_SC_LINE_STIPPLE; union PA_SC_CENTROID_PRIORITY_0 { struct { unsigned char DISTANCE_0 : 4; unsigned char DISTANCE_1 : 4; unsigned char DISTANCE_2 : 4; unsigned char DISTANCE_3 : 4; unsigned char DISTANCE_4 : 4; unsigned char DISTANCE_5 : 4; unsigned char DISTANCE_6 : 4; unsigned char DISTANCE_7 : 4; } bitfields; struct { unsigned char DISTANCE_0 : 4; unsigned char DISTANCE_1 : 4; unsigned char DISTANCE_2 : 4; unsigned char DISTANCE_3 : 4; unsigned char DISTANCE_4 : 4; unsigned char DISTANCE_5 : 4; unsigned char DISTANCE_6 : 4; unsigned char DISTANCE_7 : 4; } bits; unsigned int u32All; int i32All; float f32All; } PA_SC_CENTROID_PRIORITY_0; union PA_SC_CENTROID_PRIORITY_1 { struct { unsigned char DISTANCE_8 : 4; unsigned char DISTANCE_9 : 4; unsigned char DISTANCE_10 : 4; unsigned char DISTANCE_11 : 4; unsigned char DISTANCE_12 : 4; unsigned char DISTANCE_13 : 4; unsigned char DISTANCE_14 : 4; unsigned char DISTANCE_15 : 4; } bitfields; struct { unsigned char DISTANCE_8 : 4; unsigned char DISTANCE_9 : 4; unsigned char DISTANCE_10 : 4; unsigned char DISTANCE_11 : 4; unsigned char DISTANCE_12 : 4; unsigned char DISTANCE_13 : 4; unsigned char DISTANCE_14 : 4; unsigned char DISTANCE_15 : 4; } bits; unsigned int u32All; int i32All; float f32All; } PA_SC_CENTROID_PRIORITY_1; union PA_SC_LINE_CNTL { struct { unsigned short  : 9; unsigned char EXPAND_LINE_WIDTH : 1; unsigned char LAST_PIXEL : 1; unsigned char PERPENDICULAR_ENDCAP_ENA : 1; unsigned char DX10_DIAMOND_TEST_ENA : 1; unsigned int  : 19; } bitfields; struct { unsigned short  : 9; unsigned char EXPAND_LINE_WIDTH : 1; unsigned char LAST_PIXEL : 1; unsigned char PERPENDICULAR_ENDCAP_ENA : 1; unsigned char DX10_DIAMOND_TEST_ENA : 1; unsigned int  : 19; } bits; unsigned int u32All; int i32All; float f32All; } PA_SC_LINE_CNTL; union PA_SU_VTX_CNTL { struct { unsigned char PIX_CENTER : 1; unsigned char ROUND_MODE : 2; unsigned char QUANT_MODE : 3; unsigned int  : 26; } bitfields; struct { unsigned char PIX_CENTER : 1; unsigned char ROUND_MODE : 2; unsigned char QUANT_MODE : 3; unsigned int  : 26; } bits; unsigned int u32All; int i32All; float f32All; } PA_SU_VTX_CNTL; union SPI_WAVE_MGMT_1__SI { struct { unsigned char NUM_PS_WAVES : 6; unsigned char NUM_VS_WAVES : 6; unsigned char NUM_GS_WAVES : 6; unsigned char NUM_ES_WAVES : 6; unsigned char NUM_HS_WAVES : 6; unsigned char  : 2; } bitfields; struct { unsigned char NUM_PS_WAVES : 6; unsigned char NUM_VS_WAVES : 6; unsigned char NUM_GS_WAVES : 6; unsigned char NUM_ES_WAVES : 6; unsigned char NUM_HS_WAVES : 6; unsigned char  : 2; } bits; unsigned int u32All; int i32All; float f32All; } SPI_WAVE_MGMT_1; union SPI_WAVE_MGMT_2__SI { struct { unsigned char NUM_LS_WAVES : 6; unsigned int  : 26; } bitfields; struct { unsigned char NUM_LS_WAVES : 6; unsigned int  : 26; } bits; unsigned int u32All; int i32All; float f32All; } SPI_WAVE_MGMT_2; union VGT_MAX_VTX_INDX { struct { unsigned int MAX_INDX : 32; } bitfields; struct { unsigned int MAX_INDX : 32; } bits; unsigned int u32All; int i32All; float f32All; } VGT_MAX_VTX_INDX; union VGT_MIN_VTX_INDX { struct { unsigned int MIN_INDX : 32; } bitfields; struct { unsigned int MIN_INDX : 32; } bits; unsigned int u32All; int i32All; float f32All; } VGT_MIN_VTX_INDX; union VGT_INDX_OFFSET { struct { unsigned int INDX_OFFSET : 32; } bitfields; struct { unsigned int INDX_OFFSET : 32; } bits; unsigned int u32All; int i32All; float f32All; } VGT_INDX_OFFSET; union VGT_OUTPUT_PATH_CNTL { struct { unsigned char PATH_SELECT : 3; unsigned int  : 29; } bitfields; struct { unsigned char PATH_SELECT : 3; unsigned int  : 29; } bits; unsigned int u32All; int i32All; float f32All; } VGT_OUTPUT_PATH_CNTL; union VGT_GS_MODE { struct { unsigned char MODE : 3; unsigned char RESERVED_0__VI : 1; unsigned char CUT_MODE : 2; unsigned char RESERVED_1__VI : 5; unsigned char GS_C_PACK_EN : 1; unsigned char RESERVED_2__VI : 1; unsigned char ES_PASSTHRU : 1; unsigned char COMPUTE_MODE : 1; unsigned char FAST_COMPUTE_MODE : 1; unsigned char ELEMENT_INFO_EN : 1; unsigned char PARTIAL_THD_AT_EOI : 1; unsigned char SUPPRESS_CUTS : 1; unsigned char ES_WRITE_OPTIMIZE : 1; unsigned char GS_WRITE_OPTIMIZE : 1; unsigned char ONCHIP__CI__VI : 2; unsigned short  : 9; } bitfields; struct { unsigned char MODE : 3; unsigned char RESERVED_0__VI : 1; unsigned char CUT_MODE : 2; unsigned char RESERVED_1__VI : 5; unsigned char GS_C_PACK_EN : 1; unsigned char RESERVED_2__VI : 1; unsigned char ES_PASSTHRU : 1; unsigned char COMPUTE_MODE : 1; unsigned char FAST_COMPUTE_MODE : 1; unsigned char ELEMENT_INFO_EN : 1; unsigned char PARTIAL_THD_AT_EOI : 1; unsigned char SUPPRESS_CUTS : 1; unsigned char ES_WRITE_OPTIMIZE : 1; unsigned char GS_WRITE_OPTIMIZE : 1; unsigned char ONCHIP__CI__VI : 2; unsigned short  : 9; } bits; unsigned int u32All; int i32All; float f32All; } VGT_GS_MODE; union VGT_GS_ONCHIP_CNTL__CI__VI { struct { unsigned short ES_VERTS_PER_SUBGRP : 11; unsigned short GS_PRIMS_PER_SUBGRP : 11; unsigned short  : 10; } bitfields; struct { unsigned short ES_VERTS_PER_SUBGRP : 11; unsigned short GS_PRIMS_PER_SUBGRP : 11; unsigned short  : 10; } bits; unsigned int u32All; int i32All; float f32All; } VGT_GS_ONCHIP_CNTL; union VGT_GS_PER_ES { struct { unsigned short GS_PER_ES : 11; unsigned int  : 21; } bitfields; struct { unsigned short GS_PER_ES : 11; unsigned int  : 21; } bits; unsigned int u32All; int i32All; float f32All; } VGT_GS_PER_ES; union VGT_ES_PER_GS { struct { unsigned short ES_PER_GS : 11; unsigned int  : 21; } bitfields; struct { unsigned short ES_PER_GS : 11; unsigned int  : 21; } bits; unsigned int u32All; int i32All; float f32All; } VGT_ES_PER_GS; union VGT_GS_PER_VS { struct { unsigned char GS_PER_VS : 4; unsigned int  : 28; } bitfields; struct { unsigned char GS_PER_VS : 4; unsigned int  : 28; } bits; unsigned int u32All; int i32All; float f32All; } VGT_GS_PER_VS; union VGT_GS_OUT_PRIM_TYPE { struct { unsigned char OUTPRIM_TYPE : 6; unsigned char  : 2; unsigned char OUTPRIM_TYPE_1 : 6; unsigned char  : 2; unsigned char OUTPRIM_TYPE_2 : 6; unsigned char OUTPRIM_TYPE_3 : 6; unsigned char  : 3; unsigned char UNIQUE_TYPE_PER_STREAM : 1; } bitfields; struct { unsigned char OUTPRIM_TYPE : 6; unsigned char  : 2; unsigned char OUTPRIM_TYPE_1 : 6; unsigned char  : 2; unsigned char OUTPRIM_TYPE_2 : 6; unsigned char OUTPRIM_TYPE_3 : 6; unsigned char  : 3; unsigned char UNIQUE_TYPE_PER_STREAM : 1; } bits; unsigned int u32All; int i32All; float f32All; } VGT_GS_OUT_PRIM_TYPE; union VGT_PRIMITIVEID_RESET { struct { unsigned int VALUE : 32; } bitfields; struct { unsigned int VALUE : 32; } bits; unsigned int u32All; int i32All; float f32All; } VGT_PRIMITIVEID_RESET; union VGT_MULTI_PRIM_IB_RESET_EN { struct { unsigned char RESET_EN : 1; unsigned int  : 31; } bitfields; struct { unsigned char RESET_EN : 1; unsigned int  : 31; } bits; unsigned int u32All; int i32All; float f32All; } VGT_MULTI_PRIM_IB_RESET_EN; union VGT_INSTANCE_STEP_RATE_0 { struct { unsigned int STEP_RATE : 32; } bitfields; struct { unsigned int STEP_RATE : 32; } bits; unsigned int u32All; int i32All; float f32All; } VGT_INSTANCE_STEP_RATE_0; union VGT_INSTANCE_STEP_RATE_1 { struct { unsigned int STEP_RATE : 32; } bitfields; struct { unsigned int STEP_RATE : 32; } bits; unsigned int u32All; int i32All; float f32All; } VGT_INSTANCE_STEP_RATE_1; union VGT_VTX_CNT_EN { struct { unsigned char VTX_CNT_EN : 1; unsigned int  : 31; } bitfields; struct { unsigned char VTX_CNT_EN : 1; unsigned int  : 31; } bits; unsigned int u32All; int i32All; float f32All; } VGT_VTX_CNT_EN; union VGT_STRMOUT_CONFIG { struct { unsigned char STREAMOUT_0_EN : 1; unsigned char STREAMOUT_1_EN : 1; unsigned char STREAMOUT_2_EN : 1; unsigned char STREAMOUT_3_EN : 1; unsigned char RAST_STREAM : 3; unsigned char  : 1; unsigned char RAST_STREAM_MASK : 4; unsigned int  : 19; unsigned char USE_RAST_STREAM_MASK : 1; } bitfields; struct { unsigned char STREAMOUT_0_EN : 1; unsigned char STREAMOUT_1_EN : 1; unsigned char STREAMOUT_2_EN : 1; unsigned char STREAMOUT_3_EN : 1; unsigned char RAST_STREAM : 3; unsigned char  : 1; unsigned char RAST_STREAM_MASK : 4; unsigned int  : 19; unsigned char USE_RAST_STREAM_MASK : 1; } bits; unsigned int u32All; int i32All; float f32All; } VGT_STRMOUT_CONFIG; union VGT_STRMOUT_BUFFER_CONFIG { struct { unsigned char STREAM_0_BUFFER_EN : 4; unsigned char STREAM_1_BUFFER_EN : 4; unsigned char STREAM_2_BUFFER_EN : 4; unsigned char STREAM_3_BUFFER_EN : 4; unsigned short  : 16; } bitfields; struct { unsigned char STREAM_0_BUFFER_EN : 4; unsigned char STREAM_1_BUFFER_EN : 4; unsigned char STREAM_2_BUFFER_EN : 4; unsigned char STREAM_3_BUFFER_EN : 4; unsigned short  : 16; } bits; unsigned int u32All; int i32All; float f32All; } VGT_STRMOUT_BUFFER_CONFIG; union VGT_VERTEX_REUSE_BLOCK_CNTL { struct { unsigned char VTX_REUSE_DEPTH : 8; unsigned int  : 24; } bitfields; struct { unsigned char VTX_REUSE_DEPTH : 8; unsigned int  : 24; } bits; unsigned int u32All; int i32All; float f32All; } VGT_VERTEX_REUSE_BLOCK_CNTL; union VGT_OUT_DEALLOC_CNTL { struct { unsigned char DEALLOC_DIST : 7; unsigned int  : 25; } bitfields; struct { unsigned char DEALLOC_DIST : 7; unsigned int  : 25; } bits; unsigned int u32All; int i32All; float f32All; } VGT_OUT_DEALLOC_CNTL; } staticHwCtxRegs; struct AMDPPMemMgrRec *shaderMemMgr; MTLCompiler *amdCompiler; struct AMDPPMemMgrRec *deferredExpandControlMemMgr; void /* function */ *pipelineRetain; void /* function */ *pipelineRelease; struct BronzeDeviceDispatchTableRec *dispatchTable; struct BronzeDrawDispatchTableRec *drawDispatchTable; NSMutableArray *scratchBufferArray; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; struct BronzeHwPerfCounterInfoRec { BOOL isInitialized; struct BronzeHwPerfCtrBlockInfo { int id; char *name; BOOL indexing; unsigned short numCounters; unsigned short maxEventId; unsigned short numShaderEngines; unsigned short numShaderArrays; unsigned short numInstances; struct BronzeHwPerfCtrRegInfo { unsigned int perfSel0RegAddr; unsigned int perfSel1RegAddr; unsigned int perfCountLoAddr; unsigned int perfCountHiAddr; } regInfo[16]; } blockInfo[28]; struct BronzeHWPerfCtrMcBlockInfo { unsigned int mcConfigRegAddr; unsigned int writeEnableMask; unsigned int readEnableShift; } mcBlockInfo; } hwPerfCounterInfo; BOOL lazyInit; struct _sAMD_GET_HW_INFO_VALUES { struct _sAMD_PCI_CONFIG_INFO { unsigned short deviceID; unsigned short revisionID; unsigned short subSystemVendorID; unsigned short subSystemID; } pciConfig; unsigned long long chipRev; unsigned long long deviceID; union { unsigned long long numRasterPipes; unsigned long long numRasterBackends; } ; union { unsigned long long numShaderPipes; unsigned long long numComputeUnits; } ; union { unsigned long long activeCUs[6][2]; unsigned long long activeCUs__CI[4]; } ; unsigned int numActiveSEs; unsigned int activeSEMask; unsigned int numShaderArrays; unsigned int numTotalComputeUnits; unsigned int enabledRbMask; unsigned int __DEPRECATED__enabledRbPerSa; unsigned long long globalGBReg1; unsigned long long backEndDisableField; unsigned long long numBanksField; unsigned long long numRanksField; unsigned long long refClkFreq; unsigned long long sysClkFreq; unsigned long long memClkFreq; unsigned long long cgRefClkFreq; unsigned long long vramSize; unsigned int vramType; unsigned int vramBitWidth; unsigned long long uCodeVersionPFP; unsigned long long uCodeVersionME; unsigned long long uCodeVersionCE; unsigned long long uCodeVersionSDMA0; unsigned long long uCodeVersionSDMA1; unsigned long long subSystemID; unsigned int paScRasterCfg; unsigned int paScRasterCfg1; unsigned int numberOfGbTileModes; unsigned int gbTileModeTable[32]; unsigned int numberOfGbMacroTileModes; unsigned int gbMacroTileModeTable[16]; unsigned int clearStateBufferSize; unsigned long long clearStateBufferMCAddress; union { struct { unsigned char pcieTunnelled : 1; unsigned char paScTileSteeringOverrideEnable : 1; unsigned int reserved : 30; } ; unsigned int u32All; } deviceBits; unsigned int csim_deviceBits; } kernelHwInfoValues; struct BronzeLsHsMgrRec *lsHsMgr; struct AMD_MtlThreadTrace *pThreadTrace; struct BronzeMtlSpmTracer *pSPMTracer; struct __IOAccelDevice *amdMtldeviceRef; struct AMDUniqueRegistryRec *psoCtxRegRegistry; MTLIOAccelResource *globalRenderStateRsrc; struct BronzeRsrcMgrConstStateRec *gfxInheritArgsConstState; struct BronzeRsrcMgrConstStateRec *computeInheritArgsConstState; struct BronzeMtlSpotTracer *pSpotTracer; union { struct { struct { struct AMDBitVectorRec *vectorStack; struct AMDBitVectorRec *allocatedBits; } knownExpandedTracker; struct { struct AMDBitVectorRec *vectorStack; struct AMDBitVectorRec *allocatedBits; } renderTargetTracker; } ; struct { struct AMDBitVectorRec *vectorStack; struct AMDBitVectorRec *allocatedBits; } bitClassTracker[9]; } ; unsigned int minDeviceGFXscale; unsigned int medDeviceGFXscale; unsigned int maxDeviceGFXscale; unsigned int minDeviceMEMscale; unsigned int medDeviceMEMscale; unsigned int maxDeviceMEMscale; unsigned int engineClockScale; unsigned int memoryClockScale; struct AMDMtlProfiler { BronzeMtlDevice *device; struct __IOAccelShared *sharedRef; BronzeMtlBuffer *defaultRingBuffer; BronzeMtlBuffer *kernelRingBuffer; unsigned int spiConfigCntlRegister; unsigned int spiConfigCntlDefault; unsigned int spiConfigCntlEnabled; unsigned int engineClockScale; unsigned int memoryClockScale; int clockMode; union { struct { unsigned char spiConfigEnabled : 1; unsigned char kmdProfilingEnabled : 1; unsigned char gfxOffEnabled : 1; unsigned char spiRefCount : 4; unsigned char kmdRefCount : 4; unsigned char dumpPM4Enabled : 1; unsigned char reserved : 3; } ; unsigned short u16All; } flags; } profiler; struct AMDMtlFrameCounter { id<MTLTexture> lastFrameBuffer; BronzeMtlCmdBuffer *lastFrameCmdBuffer; unsigned int frameCount; unsigned int cmdBufCount; unsigned char frameCountMode; } frameCounter; struct AMDMtlDevDriver *devDriver; struct Bronze_DeviceSettings { unsigned char allowClipGuardband : 1; unsigned char writeOutOfBoundViewports : 1; unsigned char disable4xPrimRate : 1; unsigned char enableIndexedRsrc : 1; unsigned int reserved : 28; unsigned int mtlCmdBufIsaHashCountLimit; BOOL enableSharedHeaps; } deviceSettings; unsigned short renderTargetSwizzleIdx; unsigned short textureSwizzleIdx; struct vector<MTLIOAccelResource *, std::allocator<MTLIOAccelResource *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<MTLIOAccelResource **, std::allocator<MTLIOAccelResource *>> { id *__value_; } x1; } icbRenderPsoResourceList; struct vector<MTLIOAccelResource *, std::allocator<MTLIOAccelResource *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<MTLIOAccelResource **, std::allocator<MTLIOAccelResource *>> { id *__value_; } x1; } icbRenderScratchResourceList; struct vector<MTLIOAccelResource *, std::allocator<MTLIOAccelResource *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<MTLIOAccelResource **, std::allocator<MTLIOAccelResource *>> { id *__value_; } x1; } icbComputePsoResourceList; struct vector<MTLIOAccelResource *, std::allocator<MTLIOAccelResource *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<MTLIOAccelResource **, std::allocator<MTLIOAccelResource *>> { id *__value_; } x1; } icbComputeRodataResourceList; struct vector<MTLIOAccelResource *, std::allocator<MTLIOAccelResource *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<MTLIOAccelResource **, std::allocator<MTLIOAccelResource *>> { id *__value_; } x1; } icbComputeScratchResourceList; struct BronzeInternalShadersRec *internalShaders; MTLIOAccelFence *internalFences[9]; BronzeMtlBuffer *meshIntermediateBuffer; void *apiLayerData; MTLIOAccelResource *globalSrdTables[7]; unsigned long long globalSrdTableStamp; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } globalSrdTableLock; struct MTLTargetDeviceArch { unsigned long long deviceType; unsigned int driverVersion; char *extension; } deviceArch; void *scDylib; BronzeMtlComputePipelineState *internalComputePSOs[1]; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } internalPsoLock; } m_members;
}

@property (readonly) unsigned long long maxThreadgroupMemoryLength;
@property (readonly) unsigned long long maxBufferLength;
@property (readonly) NSArray *counterSets;
@property (readonly) struct IndirectArgumentBufferCapabilities { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned int x3 : 29; } indirectArgumentBufferCapabilities;
@property (readonly, getter=isQuadDataSharingSupported) char quadDataSharingSupported;
@property (readonly) unsigned long long readWriteTextureSupport;
@property (readonly) unsigned long long indirectArgumentBuffersSupport;
@property (readonly, getter=areRasterOrderGroupsSupported) char rasterOrderGroupsSupported;
@property (readonly, getter=isFloat32FilteringSupported) char float32FilteringSupported;
@property (readonly) char supportsVertexAmplification;
@property (readonly) unsigned long long maxVertexAmplificationCount;
@property (readonly, nonatomic) char supportsBufferlessClientStorageTexture;
@property (readonly, nonatomic) char supportsComputeMemoryBarrier;
@property (readonly, nonatomic) char supportsRenderMemoryBarrier;
@property (readonly, nonatomic) char supportsPartialRenderMemoryBarrier;
@property (readonly, nonatomic) char supportsArgumentBuffersTier2;
@property (readonly, nonatomic) char supportsReadWriteTextureArgumentsTier2;
@property (readonly, nonatomic) char supportsStreamingCodecSignaling;
@property (readonly, nonatomic) char supportsProgrammableSamplePositions;
@property (readonly, nonatomic) char supportsLargeFramebufferConfigs;
@property (readonly, nonatomic) char supportsCustomBorderColor;
@property (readonly, nonatomic) char supportsSamplerAddressModeClampToHalfBorder;
@property (readonly, nonatomic) char supportsBCTextureCompression;
@property (readonly, nonatomic) char supports3DBCTextures;
@property (readonly, nonatomic) char supportsRGBA10A2Gamma;
@property (readonly, nonatomic) char supportsBGR10A2;
@property (readonly, nonatomic) char supportsPrimitiveRestartOverride;
@property (readonly, nonatomic) char supportsGlobalVariableRelocation;
@property (readonly, nonatomic) char supportsGlobalVariableRelocationRender;
@property (readonly, nonatomic) char supportsGlobalVariableRelocationCompute;
@property (readonly, nonatomic) char supportsTLS;
@property (readonly, nonatomic) char supportsGlobalVariableBindings;
@property (readonly, nonatomic) char supportsGlobalVariableBindingInDylibs;
@property (readonly, nonatomic) char supports32bpcMSAATextures;
@property (readonly, nonatomic) char supports32BitMSAA;
@property (readonly, nonatomic) char supports32BitFloatFiltering;
@property (readonly, nonatomic) char supportsQueryTextureLOD;
@property (readonly, nonatomic) char supportsSamplerReductionMode;
@property (readonly, nonatomic) char supportsPlacementHeaps;
@property (readonly, nonatomic) char supportsOpenCLTextureWriteSwizzles;
@property (readonly, nonatomic) char supportsPullModelInterpolation;
@property (readonly, nonatomic) char supportsInt64;
@property (readonly, nonatomic) char supportsFixedLinePointFillDepthGradient;
@property (readonly, nonatomic) char supportsLateEvalEvent;
@property (readonly, nonatomic) char supportsNonZeroTextureWriteLOD;
@property (readonly, nonatomic) char supportsSharedTextureHandles;
@property (readonly, nonatomic) char supportsBufferPrefetchStatistics;
@property (readonly, nonatomic) char supportsLimitedYUVFormats;
@property (readonly, nonatomic) char supportsNonPrivateDepthStencilTextures;
@property (readonly, nonatomic) char supportsNonPrivateMSAATextures;
@property (readonly, nonatomic) char supportsSharedStorageHeapResources;
@property (readonly, nonatomic) char supportsSharedStorageTextures;
@property (readonly, nonatomic) char supportsLinearTextureFromSharedBuffer;
@property (readonly, nonatomic) char supportsPipelineLibraries;
@property (readonly, nonatomic) char supportsFragmentOnlyEncoders;
@property (readonly, nonatomic) char supportsBufferWithIOSurface;
@property (readonly, nonatomic) char supportsProgrammableBlending;
@property (readonly, nonatomic) char supportsRenderToLinearTextures;
@property (readonly, nonatomic) char supportsMemorylessRenderTargets;
@property (readonly, nonatomic) char supportsFastMathInfNaNPropagation;
@property (readonly, nonatomic) char supportsInvariantVertexPosition;
@property (readonly, nonatomic) char supportsShaderLODAverage;
@property (readonly, nonatomic) char supportsRelaxedTextureViewRequirements;
@property (readonly, nonatomic) char supportsSeparateDepthStencil;
@property (readonly, nonatomic) char supportsGPUStatistics;
@property (readonly, nonatomic) char supportsCompressedTextureViewSPI;
@property (readonly, nonatomic) char supportsRenderTargetTextureRotation;
@property (readonly, nonatomic) char supportsDynamicControlPointCount;
@property (readonly, nonatomic) char supportsIABHashForTools;
@property (readonly, nonatomic) char supportsBinaryArchives;
@property (readonly, nonatomic) char supportsBinaryLibraries;
@property (readonly, nonatomic) char supportsDeadlineProfile;
@property (readonly, nonatomic) char supportsFillTexture;
@property (readonly, nonatomic) char supportsSetThreadgroupPackingDisabled;
@property (readonly, nonatomic) char supportsASTCTextureCompression;
@property (readonly, nonatomic) char supportsExtendedYUVFormats;
@property (readonly, nonatomic) char supportsPublicXR10Formats;
@property (readonly, nonatomic) char supportsSRGBwrites;
@property (readonly, nonatomic) char supportsDepthClipMode;
@property (readonly, nonatomic) char supportsResourceHeaps;
@property (readonly, nonatomic) char supportsArgumentBuffers;
@property (readonly, nonatomic) char supportsPacked32TextureBufferWrites;
@property (readonly, nonatomic) char supports3DASTCTextures;
@property (readonly, nonatomic) char supportsExtendedXR10Formats;
@property (readonly, nonatomic) char supportsFragmentBufferWrites;
@property (readonly, nonatomic) char supportsCountingOcclusionQuery;
@property (readonly, nonatomic) char supportsBaseVertexInstanceDrawing;
@property (readonly, nonatomic) char supportsIndirectDrawAndDispatch;
@property (readonly, nonatomic) char supportsTessellation;
@property (readonly, nonatomic) char supportsReadWriteBufferArguments;
@property (readonly, nonatomic) char supportsArrayOfTextures;
@property (readonly, nonatomic) char supportsArrayOfSamplers;
@property (readonly, nonatomic) char supportsCombinedMSAAStoreAndResolveAction;
@property (readonly, nonatomic) char supportsMutableTier1ArgumentBuffers;
@property (readonly, nonatomic) char supportsSamplerCompareFunction;
@property (readonly, nonatomic) char supportsMSAADepthResolve;
@property (readonly, nonatomic) char supportsMSAAStencilResolve;
@property (readonly, nonatomic) char supportsMSAADepthResolveFilter;
@property (readonly, nonatomic) char supportsGFXIndirectCommandBuffers;
@property (readonly, nonatomic) char supportsCMPIndirectCommandBuffers;
@property (readonly, nonatomic) char supportsIndirectStageInRegion;
@property (readonly, nonatomic) char supportsIndirectTextures;
@property (readonly, nonatomic) char supportsNorm16BCubicFiltering;
@property (readonly, nonatomic) char supportsTextureOutOfBoundsReads;
@property (readonly, nonatomic) char supportsTextureSwizzle;
@property (readonly, nonatomic) char supportsAlphaYUVFormats;
@property (readonly, nonatomic) char supportsMemoryOrderAtomics;
@property (readonly, nonatomic) char supportsQuadGroup;
@property (readonly, nonatomic) char supportsRenderTextureWrites;
@property (readonly, nonatomic) char supportsImageBlocks;
@property (readonly, nonatomic) char supportsTileShaders;
@property (readonly, nonatomic) char supportsImageBlockSampleCoverageControl;
@property (readonly, nonatomic) char supportsNativeHardwareFP16;
@property (readonly, nonatomic) char supportsPostDepthCoverage;
@property (readonly, nonatomic) char supportsMipLevelsSmallerThanBlockSize;
@property (readonly, nonatomic) char supportsNonUniformThreadgroupSize;
@property (readonly, nonatomic) char supportsReadWriteTextureArguments;
@property (readonly, nonatomic) char supportsReadWriteTextureCubeArguments;
@property (readonly, nonatomic) char supportsTextureCubeArray;
@property (readonly, nonatomic) char supportsQuadShufflesAndBroadcast;
@property (readonly, nonatomic) char supportsConcurrentComputeDispatch;
@property (readonly, nonatomic) char supportsRenderPassWithoutRenderTarget;
@property (readonly, nonatomic) char supportsRasterOrderGroups;
@property (readonly, nonatomic) char supportsRasterOrderGroupsColorAttachment;
@property (readonly, nonatomic) char supportsDynamicAttributeStride;
@property (readonly, nonatomic) char supportsLinearTexture2DArray;
@property (readonly, nonatomic) char supportsNonSquareTileShaders;
@property (readonly, nonatomic) char supportsSeparateVisibilityAndShadingRate;
@property (readonly, nonatomic) char supports2DLinearTexArraySPI;
@property (readonly, nonatomic) char supportsLayeredRendering;
@property (readonly, nonatomic) char supportsViewportAndScissorArray;
@property (readonly, nonatomic) char supportsIndirectTessellation;
@property (readonly, nonatomic) char supportsMSAAStencilResolveFilter;
@property (readonly, nonatomic) char supportsStencilFeedback;
@property (readonly, nonatomic) char supportsFP32TessFactors;
@property (readonly, nonatomic) char supportsUnalignedVertexFetch;
@property (readonly, nonatomic) char supportsExtendedVertexFormats;
@property (readonly, nonatomic) char supportsResourceDetachBacking;
@property (readonly, nonatomic) char supportsBufferWithAddressRanges;
@property (readonly, nonatomic) char supportsHeapWithAddressRanges;
@property (readonly, nonatomic) char supportsSIMDGroup;
@property (readonly, nonatomic) char supportsShaderMinLODClamp;
@property (readonly, nonatomic) char supportsSIMDShufflesAndBroadcast;
@property (readonly, nonatomic) char supportsWritableArrayOfTextures;
@property (readonly, nonatomic) char supportsVariableRateRasterization;
@property (readonly, nonatomic) char supportsYCBCRFormats;
@property (readonly, nonatomic) char supportsYCBCRFormatsPQ;
@property (readonly, nonatomic) char supportsYCBCRFormats12;
@property (readonly, nonatomic) char supportsYCBCRFormatsXR;
@property (readonly, nonatomic) char supportsASTCHDRTextureCompression;
@property (readonly, nonatomic) char supportsSparseTextures;
@property (readonly, nonatomic) char supportsSparseHeaps;
@property (readonly, nonatomic) char supportsIndirectWritableTextures;
@property (readonly, nonatomic) char supportsFunctionPointers;
@property (readonly, nonatomic) char supportsDynamicLibraries;
@property (readonly, nonatomic) char supportsStatefulDynamicLibraries;
@property (readonly, nonatomic) char supportsRenderDynamicLibraries;
@property (readonly, nonatomic) char supportsFunctionPointersFromRender;
@property (readonly, nonatomic) char supportsSharedFunctionTables;
@property (readonly, nonatomic) char supportsRaytracingFromRender;
@property (readonly, nonatomic) char supportsPrimitiveMotionBlur;
@property (readonly, nonatomic) char supportsRayTracingExtendedVertexFormats;
@property (readonly, nonatomic) char supportsHeapAccelerationStructureAllocation;
@property (readonly, nonatomic) char supportsRayTracingPerPrimitiveData;
@property (readonly, nonatomic) char supportsRayTracingTraversalMetrics;
@property (readonly, nonatomic) char supportsRayTracingBuffersFromTables;
@property (readonly, nonatomic) char supportsRayTracingAccelerationStructureCPUDeserialization;
@property (readonly, nonatomic) char supportsRayTracingMultiLevelInstancing;
@property (readonly, nonatomic) char supportsRayTracingIndirectInstanceAccelerationStructureBuild;
@property (readonly, nonatomic) char supportsRayTracingGPUTableUpdateBuffers;
@property (readonly, nonatomic) char supportsRayTracingCurves;
@property (readonly, nonatomic) char supportsShaderBarycentricCoordinates;
@property (readonly, nonatomic) char supportsBlackOrWhiteSamplerBorderColors;
@property (readonly, nonatomic) char supportsMirrorClampToEdgeSamplerMode;
@property (readonly, nonatomic) char supportsSIMDReduction;
@property (readonly, nonatomic) char supportsDepthClipModeClampExtended;
@property (readonly, nonatomic) char supportsTexture2DMultisampleArray;
@property (readonly, nonatomic) char supportsForceSeamsOnCubemaps;
@property (readonly, nonatomic) char supportsFloat16BCubicFiltering;
@property (readonly, nonatomic) char supportsFloat16InfNanFiltering;
@property (readonly, nonatomic) char supportsRTZRounding;
@property (readonly, nonatomic) char supportsAnisoSampleFix;
@property (readonly, nonatomic) char supportsYCBCRPackedFormatsPQ;
@property (readonly, nonatomic) char supportsYCBCRPackedFormats12;
@property (readonly, nonatomic) char supportsYCBCRPackedFormatsXR;
@property (readonly, nonatomic) char supportsBufferBoundsChecking;
@property (readonly, nonatomic) char supportsForkJoin;
@property (readonly, nonatomic) char supportsDevicePartitioning;
@property (readonly, nonatomic) char supportsComputeCompressedTextureWrite;
@property (readonly, nonatomic) char supportsSIMDGroupMatrix;
@property (readonly, nonatomic) char supportsInterchangeTiled;
@property (readonly, nonatomic) char supportsQuadReduction;
@property (readonly, nonatomic) char supportsVirtualSubstreams;
@property (readonly, nonatomic) char supportsSIMDShuffleAndFill;
@property (readonly, nonatomic) char supportsBfloat16Format;
@property (readonly, nonatomic) char supportsSparseDepthAttachments;
@property (readonly, nonatomic) char supportsAtomicUlongVoidMinMax;
@property (readonly, nonatomic) char supportsLossyCompression;
@property (readonly, nonatomic) char supportsAtomicFloat;
@property (readonly, nonatomic) char supportsMeshShaders;
@property (readonly, nonatomic) char supportsFunctionPointersFromMesh;
@property (readonly, nonatomic) char supportsMeshShadersInICB;
@property (readonly, nonatomic) char supportsMeshRenderDynamicLibraries;
@property (readonly, nonatomic) char supportsBfloat16Buffers;
@property (readonly, nonatomic) char supportsCommandBufferJump;
@property (readonly, nonatomic) char supportsColorSpaceConversionMatrixSelection;
@property (readonly, nonatomic) char supportsPerPlaneCompression;
@property (readonly, nonatomic) char supportsConditionalLoadStore;
@property (readonly, nonatomic) char supportsStackOverflowErrorCode;
@property (readonly, nonatomic) char supportsRayTracingICBs;
@property (readonly, nonatomic) char supportsPerformanceStateAssertion;
@property (readonly, nonatomic) char supportsExplicitVisibilityGroups;
@property (readonly, nonatomic) char supportsRayTracingMatrixLayout;
@property (readonly, nonatomic) char supportsRayTracingDirectIntersectionResultAccess;
@property (readonly, nonatomic) char supportsRayTracingPerComponentMotionInterpolation;
@property (readonly, nonatomic) char supportsExtendedSamplerLODBiasRange;
@property (readonly, nonatomic) char supportsDeviceCoherency;
@property (readonly) unsigned long long bufferRobustnessSupport;
@property (readonly) unsigned long long deviceCreationFlags;
@property (getter=areGPUAssertionsEnabled, setter=setGPUAssertionsEnabled:) char gpuAssertionsEnabled;
@property (getter=areWritableHeapsEnabled, setter=setWritableHeapsEnabled:) char writableHeapsEnabled;
@property (nonatomic) unsigned long long commandBufferErrorOptions;
@property (readonly, getter=isBCTextureCompressionSupported) char BCTextureCompressionSupported;
@property (readonly) const struct MTLTargetDeviceArch { unsigned long long x0; unsigned int x1; char *x2; } *targetDeviceInfo;
@property (readonly) MTLTargetDeviceArchitecture *targetDeviceArchitecture;
@property char shaderDebugInfoCaching;
@property (readonly, getter=isSystemDefaultDevice) char systemDefaultDevice;
@property (readonly, getter=isASTCPixelFormatsSupported) char ASTCPixelFormatsSupported;
@property (readonly, getter=isFramebufferReadSupported) char framebufferReadSupported;
@property (readonly, getter=isMagicMipmapSupported) char magicMipmapSupported;
@property (readonly) unsigned long long halfFPConfig;
@property (readonly) unsigned long long singleFPConfig;
@property (readonly) unsigned long long doubleFPConfig;
@property (nonatomic) char metalAssertionsEnabled;
@property (readonly) unsigned long long featureProfile;
@property (readonly) const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; float x26; float x27; unsigned int x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; unsigned int x59; unsigned int x60; unsigned int x61; unsigned int x62; unsigned int x63; unsigned long long x64; } *limits;
@property (readonly) unsigned long long maxFramebufferStorageBits;
@property (readonly) unsigned long long linearTextureArrayAlignmentBytes;
@property (readonly) unsigned long long linearTextureArrayAlignmentSlice;
@property (readonly) unsigned long long maxTileBuffers;
@property (readonly) unsigned long long maxTileTextures;
@property (readonly) unsigned long long maxTileSamplers;
@property (readonly) unsigned long long maxTileInlineDataSize;
@property (readonly) unsigned long long minTilePixels;
@property (readonly) unsigned long long maxColorAttachments;
@property (readonly) unsigned long long maxVertexAttributes;
@property (readonly) unsigned long long maxVertexBuffers;
@property (readonly) unsigned long long maxVertexTextures;
@property (readonly) unsigned long long maxVertexSamplers;
@property (readonly) unsigned long long maxVertexInlineDataSize;
@property (readonly) unsigned long long maxInterpolants;
@property (readonly) unsigned long long maxFragmentBuffers;
@property (readonly) unsigned long long maxFragmentTextures;
@property (readonly) unsigned long long maxFragmentSamplers;
@property (readonly) unsigned long long maxFragmentInlineDataSize;
@property (readonly) unsigned long long maxComputeBuffers;
@property (readonly) unsigned long long maxComputeTextures;
@property (readonly) unsigned long long maxComputeSamplers;
@property (readonly) unsigned long long maxComputeInlineDataSize;
@property (readonly) unsigned long long maxComputeLocalMemorySizes;
@property (readonly) unsigned long long maxTotalComputeThreadsPerThreadgroup;
@property (readonly) unsigned long long maxComputeThreadgroupMemory;
@property (readonly) float maxLineWidth;
@property (readonly) float maxPointSize;
@property (readonly) unsigned long long maxVisibilityQueryOffset;
@property (readonly) unsigned long long minConstantBufferAlignmentBytes;
@property (readonly) unsigned long long minBufferNoCopyAlignmentBytes;
@property (readonly) unsigned long long maxTextureWidth1D;
@property (readonly) unsigned long long maxTextureWidth2D;
@property (readonly) unsigned long long maxTextureHeight2D;
@property (readonly) unsigned long long maxTextureWidth3D;
@property (readonly) unsigned long long maxTextureHeight3D;
@property (readonly) unsigned long long maxTextureDepth3D;
@property (readonly) unsigned long long maxTextureDimensionCube;
@property (readonly) unsigned long long maxTextureLayers;
@property (readonly) unsigned long long linearTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long maxFunctionConstantIndices;
@property (readonly) unsigned long long maxComputeThreadgroupMemoryAlignmentBytes;
@property (readonly) unsigned long long maxInterpolatedComponents;
@property (readonly) unsigned long long maxTessellationFactor;
@property (readonly) unsigned long long maxIndirectBuffers;
@property (readonly) unsigned long long maxIndirectTextures;
@property (readonly) unsigned long long maxIndirectSamplers;
@property (readonly) unsigned long long maxIndirectSamplersPerDevice;
@property (readonly) unsigned long long maxFenceInstances;
@property (readonly) unsigned long long maxViewportCount;
@property (readonly) unsigned long long maxCustomSamplePositions;
@property (readonly) unsigned long long maxVertexAmplificationFactor;
@property (readonly) unsigned long long maxTextureBufferWidth;
@property (readonly) unsigned long long maxComputeAttributes;
@property (readonly) unsigned long long maxIOCommandsInFlight;
@property (readonly) unsigned long long maxPredicatedNestingDepth;
@property (readonly) unsigned long long maxAccelerationStructureLevels;
@property (readonly) unsigned long long maxConstantBufferArguments;
@property (readonly) unsigned int acceleratorPort;
@property (readonly) char supportPriorityBand;
@property (readonly) unsigned long long sharedMemorySize;
@property (readonly) unsigned long long dedicatedMemorySize;
@property (readonly) unsigned long long currentCommandQueueCount;
@property (readonly) unsigned long long commandQueueLimit;
@property (readonly) unsigned long long sparseTexturesSupport;
@property (readonly, getter=isMsaa32bSupported) char msaa32bSupported;
@property (readonly, getter=isRTZRoundingSupported) char RTZRoundingSupported;
@property (readonly) long long defaultTextureWriteRoundingMode;
@property (readonly, getter=isAnisoSampleFixSupported) char AnisoSampleFixSupported;
@property (readonly, getter=isFixedLinePointFillDepthGradientSupported) char FixedLinePointFillDepthGradientSupported;
@property (readonly) unsigned long long samplerReductionModeSupport;
@property (readonly, getter=isLargeMRTSupported) char largeMRTSupported;
@property (readonly) unsigned long long maxRasterizationRateLayerCount;
@property (readonly, getter=isRGB10A2GammaSupported) char RGB10A2GammaSupported;
@property (readonly, getter=isCustomBorderColorSupported) char CustomBorderColorSupported;
@property (readonly, getter=isClampToHalfBorderSupported) char ClampToHalfBorderSupported;
@property (readonly, getter=isPlacementHeapSupported) char placementHeapSupported;
@property (readonly) MTLGPUBVHBuilder *GPUBVHBuilder;
@property (readonly) char requiresRaytracingEmulation;
@property (readonly) unsigned long long latestSupportedGenericBVHVersion;
@property (copy, nonatomic) NSDictionary *pluginData;
@property (readonly) char requiresMeshShaderEmulation;
@property (readonly, nonatomic) long long currentPerformanceState;
@property (readonly) unsigned long long maxConcurrentExecutingCompilationTasks;
@property (readonly) unsigned long long maxAccelerationStructureTraversalDepth;
@property (readonly) char requiresBFloat16Emulation;
@property (readonly) NSString *name;
@property (readonly) unsigned long long registryID;
@property (readonly) MTLArchitecture *architecture;
@property (readonly) struct { unsigned long long width; unsigned long long height; unsigned long long depth; } maxThreadsPerThreadgroup;
@property (readonly, getter=isLowPower) char lowPower;
@property (readonly, getter=isHeadless) char headless;
@property (readonly, getter=isRemovable) char removable;
@property (readonly) char hasUnifiedMemory;
@property (readonly) unsigned long long recommendedMaxWorkingSetSize;
@property (readonly) unsigned long long location;
@property (readonly) unsigned long long locationNumber;
@property (readonly) unsigned long long maxTransferRate;
@property (readonly, getter=isDepth24Stencil8PixelFormatSupported) char depth24Stencil8PixelFormatSupported;
@property (readonly) unsigned long long argumentBuffersSupport;
@property (readonly, getter=areBarycentricCoordsSupported) char barycentricCoordsSupported;
@property (readonly) unsigned long long currentAllocatedSize;
@property (readonly) unsigned long long maxArgumentBufferSamplerCount;
@property (readonly, getter=areProgrammableSamplePositionsSupported) char programmableSamplePositionsSupported;
@property (readonly) unsigned long long peerGroupID;
@property (readonly) unsigned int peerIndex;
@property (readonly) unsigned int peerCount;
@property (readonly) unsigned long long sparseTileSizeInBytes;
@property (readonly) char supportsRaytracing;
@property char shouldMaximizeConcurrentCompilation;
@property (readonly) unsigned long long maximumConcurrentCompilationTaskCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (void)registerDevices;

- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (id)vendorName;
- (id)newCommandQueue;
- (id)newIndirectCommandBufferWithDescriptor:(id)a0 maxCommandCount:(unsigned long long)a1 options:(unsigned long long)a2;
- (id)copyIOSurfaceSharedTextureProperties:(id)a0;
- (char)deviceSupportsFeatureSet:(unsigned long long)a0;
- (id)familyName;
- (void)getDefaultSamplePositions:(struct { float x0; float x1; } *)a0 count:(unsigned long long)a1;
- (id)getMostCompatibleArchitecture:(id)a0;
- (struct { unsigned long long x0; unsigned long long x1; })heapBufferSizeAndAlignWithLength:(unsigned long long)a0 options:(unsigned long long)a1;
- (struct { unsigned long long x0; unsigned long long x1; })heapTextureSizeAndAlignWithDescriptor:(id)a0;
- (id)indirectArgumentBufferDecodingData;
- (unsigned long long)minLinearTextureAlignmentForPixelFormat:(unsigned long long)a0;
- (unsigned long long)minimumTextureBufferAlignmentForPixelFormat:(unsigned long long)a0;
- (id)motionEstimatorCapabilities;
- (id)newArgumentEncoderWithBufferBinding:(id)a0;
- (id)newArgumentEncoderWithLayout:(id)a0;
- (id)newBufferWithBytes:(const void *)a0 length:(unsigned long long)a1 options:(unsigned long long)a2;
- (id)newBufferWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 options:(unsigned long long)a2 deallocator:(id /* block */)a3;
- (id)newBufferWithDescriptor:(id)a0;
- (id)newBufferWithIOSurface:(struct __IOSurface { } *)a0;
- (id)newBufferWithLength:(unsigned long long)a0 options:(unsigned long long)a1;
- (id)newCommandQueueWithMaxCommandBufferCount:(unsigned long long)a0;
- (id)newCounterSampleBufferWithDescriptor:(id)a0 error:(id *)a1;
- (id)newDepthStencilStateWithDescriptor:(id)a0;
- (id)newHeapWithDescriptor:(id)a0;
- (id)newIndirectArgumentBufferLayoutWithStructType:(id)a0;
- (id)newIndirectCommandBufferWithDescriptor:(id)a0 maxCount:(unsigned long long)a1 options:(unsigned long long)a2;
- (id)newIndirectComputeCommandEncoderWithBuffer:(id)a0;
- (id)newIndirectRenderCommandEncoderWithBuffer:(id)a0;
- (id)newMotionEstimationPipelineWithDescriptor:(id)a0;
- (void)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)newSamplerStateWithDescriptor:(id)a0;
- (id)newTextureWithDescriptor:(id)a0;
- (id)newTextureWithDescriptor:(id)a0 iosurface:(struct __IOSurface { } *)a1 plane:(unsigned long long)a2;
- (id)newTextureWithSurface:(unsigned long long)a0 buffer:(unsigned long long)a1;
- (id)newVisibleFunctionTableWithDescriptor:(id)a0;
- (id)productName;
- (void)reserveResourceIndicesForResourceType:(unsigned long long)a0 indices:(unsigned long long *)a1 indexCount:(unsigned long long)a2;
- (unsigned long long)resourcePatchingTypeForResourceType:(unsigned long long)a0;
- (void)sampleTimestamps:(unsigned long long *)a0 gpuTimestamp:(unsigned long long *)a1;
- (void)setIndirectArgumentBufferDecodingData:(id)a0;
- (unsigned long long)sparseTileSizeInBytesForSparsePageSize:(long long)a0;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })sparseTileSizeWithTextureType:(unsigned long long)a0 pixelFormat:(unsigned long long)a1 sampleCount:(unsigned long long)a2;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })sparseTileSizeWithTextureType:(unsigned long long)a0 pixelFormat:(unsigned long long)a1 sampleCount:(unsigned long long)a2 sparsePageSize:(long long)a3;
- (char)supportsPrimitiveType:(unsigned long long)a0;
- (char)supportsSampleCount:(unsigned long long)a0;
- (char)supportsVertexAmplificationCount:(unsigned long long)a0;
- (void)freeVisibleFunctionKey:(void *)a0 keySize:(unsigned long long)a1;
- (void)freeComputeFunctionKey:(void *)a0 keySize:(unsigned long long)a1;
- (id)compiler;
- (void *)computeFunctionKeyWithComputePipelineDescriptor:(id)a0 options:(unsigned long long)a1 keySize:(unsigned long long *)a2;
- (id)computeVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (void *)fragmentFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 previousStateVariant:(id)a2 fragmentKeySize:(unsigned long long *)a3;
- (id)fragmentVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (void)freeFragmentFunctionKey:(void *)a0 fragmentKeySize:(unsigned long long)a1;
- (void)freeMeshFunctionKey:(void *)a0 meshKeySize:(unsigned long long)a1;
- (void)freeObjectFunctionKey:(void *)a0 objectKeySize:(unsigned long long)a1;
- (void)freeVertexFunctionKey:(void *)a0 vertexKeySize:(unsigned long long)a1;
- (char *)getComputeFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forComputeVariant:(id)a3;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forVertexVariant:(id)a3 fragmentVariant:(id)a4;
- (char *)getFragmentFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (char *)getIntersectionFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (char *)getMeshFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (char *)getObjectFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (void *)getVertexFunctionDriverData:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 nextStageVariant:(id)a3 driverDataSize:(unsigned long long *)a4;
- (char *)getVertexFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2 compiledFragmentVariant:(id)a3;
- (char *)getVisibleFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (id)initWithAcceleratorPort:(unsigned int)a0;
- (void *)libraryKeyWithComputePipelineDescriptor:(id)a0 options:(unsigned long long)a1 keySize:(unsigned long long *)a2;
- (int)llvmVersion;
- (void *)meshFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 nextStageVariant:(id)a2 meshKeySize:(unsigned long long *)a3;
- (id)newComputePipelineWithDescriptor:(id)a0 variant:(id)a1;
- (id)newRenderPipelineWithDescriptor:(id)a0 vertexVariant:(id)a1 fragmentVariant:(id)a2;
- (void *)objectFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 nextStageVariant:(id)a2 objectKeySize:(unsigned long long *)a3;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned long x5 : 59; })pipelineFlagsWithComputeVariant:(id)a0;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; unsigned char x10 : 1; unsigned long x11 : 53; })pipelineFlagsWithVertexVariant:(id)a0 fragmentVariant:(id)a1;
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)a0 compileTimeOutput:(id)a1;
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)a0 fragmentVariant:(id)a1 vertexCompileTimeOutput:(id)a2 fragmentCompileTimeOutput:(id)a3;
- (void *)vertexFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 nextStageVariant:(id)a2 vertexKeySize:(unsigned long long *)a3;
- (id)vertexVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (void *)visibleFunctionKey:(id)a0 withFunctionDescriptor:(id)a1 keySize:(unsigned long long *)a2;
- (void)receive:(id)a0;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })tileSizeWithTextureType:(unsigned long long)a0 pixelFormat:(unsigned long long)a1 sampleCount:(unsigned long long)a2;
- (void)amdMtl_PostInit;
- (char)amdMtlBronzeLazyInit;
- (void)getAMDMtlClkScale:(float *)a0 memClkScale:(float *)a1;
- (unsigned long long)getTimestampFrequency;
- (int)queryAMDMtlClk;
- (id)queryAMDMtlClkCaps;
- (id)queryGpuInfo;
- (BOOL)setAMDMtlClk:(int)a0;
- (BOOL)setDefaultAMDMtlClk;
- (char)systemDefaultDevice;

@end
