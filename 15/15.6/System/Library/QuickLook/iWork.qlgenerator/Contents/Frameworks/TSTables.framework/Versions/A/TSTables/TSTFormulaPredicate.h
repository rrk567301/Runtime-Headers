@class NSString, TSCEFormulaObject, TSTFormulaPredArg, NSDate;

@interface TSTFormulaPredicate : NSObject <NSCopying> {
    TSCEFormulaObject *_formula;
    short _argIndex0;
    short _argIndex1;
    short _argIndex2;
}

@property (nonatomic) struct TSCEUidCellRef { struct TSKUIDStruct { unsigned long long _lower; unsigned long long _upper; } _columnUid; struct TSKUIDStruct { unsigned long long _lower; unsigned long long _upper; } _rowUid; struct TSKUIDStruct { unsigned long long _lower; unsigned long long _upper; } _tableUid; } hostCellRef;
@property (readonly, nonatomic) TSCEFormulaObject *formula;
@property (readonly, nonatomic) unsigned char predicateType;
@property (readonly, nonatomic) unsigned char qualifier1;
@property (readonly, nonatomic) unsigned char qualifier2;
@property (nonatomic) char forConditionalStyle;
@property (readonly, nonatomic) unsigned char predArg1Type;
@property (readonly, nonatomic) unsigned char predArg2Type;
@property (readonly, nonatomic) double numberParam1;
@property (readonly, nonatomic) double numberParam2;
@property (readonly, nonatomic) NSString *stringParam1;
@property (readonly, nonatomic) NSDate *dateTimeParam1;
@property (readonly, nonatomic) NSDate *dateTimeParam2;
@property (retain, nonatomic) TSTFormulaPredArg *predArg0;
@property (retain, nonatomic) TSTFormulaPredArg *predArg1;
@property (retain, nonatomic) TSTFormulaPredArg *predArg2;
@property (readonly, nonatomic) char backwardCompatiblePrePivot;
@property (readonly, nonatomic) char canDowngradeForPrePivotFormat;

+ (id)defaultPredicateForType:(unsigned char)a0 argumentCellRef:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a1 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a2;
+ (id)defaultPredicateForType:(unsigned char)a0 argumentCellReference:(id)a1 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a2;
+ (char)isThresholdNeededForType:(unsigned char)a0;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (unsigned long long)hash;
- (id)init;
- (char)isEqual:(id)a0;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)setFormula:(id)a0;
- (id)initFromArchive:(const void *)a0;
- (void)encodeToArchive:(void *)a0 archiver:(id)a1;
- (void)recreateFormula;
- (char)containsUidReferences;
- (id)copyByClearingUids:(id)a0 containingTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)copyByConvertingBaseToChrome:(id)a0 inOwner:(id)a1 inCellCoordinate:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a2;
- (id)copyByConvertingChromeToBase:(id)a0 inOwner:(id)a1 inCellCoordinate:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a2;
- (id)copyByOffsettingRelativeReferencesWithOffset:(struct TSUColumnRowOffset { int x0; int x1; })a0;
- (id)copyByRemappingHostCellAgnosticOwnerUIDsWithMap:(const void *)a0 rewriteContext:(struct TSCEFormulaRewriteContext { id x0; id x1; struct TSCEFormulaRewriteContextRecord { struct TSCEFormulaContainingCell { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; struct TSUColumnRowOffset { int x0; int x1; } x2; char x3; char x4; char x5; char x6; char x7; char x8; char x9; } x2; } *)a1 error:(char *)a2;
- (id)copyByRemappingOwnerUIDsWithMap:(const void *)a0 rewriteContext:(struct TSCEFormulaRewriteContext { id x0; id x1; struct TSCEFormulaRewriteContextRecord { struct TSCEFormulaContainingCell { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; struct TSUColumnRowOffset { int x0; int x1; } x2; char x3; char x4; char x5; char x6; char x7; char x8; char x9; } x2; } *)a1 error:(char *)a2;
- (id)copyByRewritingWithContext:(struct TSCEFormulaRewriteContext { id x0; id x1; struct TSCEFormulaRewriteContextRecord { struct TSCEFormulaContainingCell { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; struct TSUColumnRowOffset { int x0; int x1; } x2; char x3; char x4; char x5; char x6; char x7; char x8; char x9; } x2; } *)a0 rewriteBlock:(id /* block */)a1;
- (id)copyByRewritingWithSpec:(id)a0 inOwner:(id)a1 inCellCoordinate:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a2;
- (id)copyByUpdatingLinkedTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1;
- (id)copyByUpgradingToLinkedRefForTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1;
- (id)copyToGeometricFormForHiddenRowsWithTableInfo:(id)a0 containsBadRef:(char *)a1;
- (id)copyToGeometricFormWithRewriteContext:(struct TSCEFormulaRewriteContext { id x0; id x1; struct TSCEFormulaRewriteContextRecord { struct TSCEFormulaContainingCell { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; struct TSUColumnRowOffset { int x0; int x1; } x2; char x3; char x4; char x5; char x6; char x7; char x8; char x9; } x2; } *)a0;
- (id)copyToUidFormForConditionalStylesWithTableInfo:(id)a0 containingCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1 preserveHostCell:(char)a2;
- (id)copyToUidFormForHiddenRowsWithTableInfo:(id)a0;
- (id)copyToUidFormWithRewriteContext:(struct TSCEFormulaRewriteContext { id x0; id x1; struct TSCEFormulaRewriteContextRecord { struct TSCEFormulaContainingCell { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; struct TSUColumnRowOffset { int x0; int x1; } x2; char x3; char x4; char x5; char x6; char x7; char x8; char x9; } x2; } *)a0;
- (struct TSCECrossTableReference { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSCERelativeCellCoordinate { int x0; short x1; char x2; char x3; } x1; })crossTableRefParam1;
- (struct TSCECrossTableReference { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSCERelativeCellCoordinate { int x0; short x1; char x2; char x3; } x1; })crossTableRefParam2;
- (id)dataList1;
- (id)downgradeForPrePivotFormatForLocale:(id)a0;
- (id)durationParam1;
- (id)durationParam2;
- (void)encodeToPrePivotArchive:(void *)a0 archiver:(id)a1;
- (void)encodeToPrePivotArchive:(void *)a0 archiver:(id)a1 encodingForSOS:(char)a2;
- (char)evaluateAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0 onOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 calcEngine:(id)a2;
- (unsigned char)expectedArgTypeForPredicateType:(unsigned char)a0 firstArg:(char)a1;
- (void)getPrecedents:(void *)a0 calcEngine:(id)a1 hostOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 hostCellID:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } *)a3;
- (char)hasBadRefWithUidInfo;
- (id)initFromPrePivotArchive:(const void *)a0;
- (id)initWithLiteralDateType:(unsigned char)a0 date1:(id)a1 date2:(id)a2 number1:(double)a3 number2:(double)a4 qualifier1:(unsigned char)a5 qualifier2:(unsigned char)a6 argumentCellRef:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a7 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a8;
- (id)initWithLiteralDateType:(unsigned char)a0 date1:(id)a1 date2:(id)a2 number1:(double)a3 number2:(double)a4 qualifier1:(unsigned char)a5 qualifier2:(unsigned char)a6 argumentCellRef:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a7 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a8 forConditionalStyle:(char)a9;
- (id)initWithLiteralDurationType:(unsigned char)a0 duration1:(double)a1 durationUnits1:(unsigned char)a2 duration2:(double)a3 durationUnits2:(unsigned char)a4 qualifier:(unsigned char)a5 argumentCellRef:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a6 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a7;
- (id)initWithLiteralNumberType:(unsigned char)a0 number1:(double)a1 number2:(double)a2 qualifier:(unsigned char)a3 argumentCellRef:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a4 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a5;
- (id)initWithLiteralTextType:(unsigned char)a0 string:(id)a1 argumentCellRef:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a2 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a3;
- (id)initWithPredicateType:(unsigned char)a0 arg0:(id)a1 arg1:(id)a2 arg2:(id)a3 qualifier1:(unsigned char)a4 qualifier2:(unsigned char)a5 forConditionalStyle:(char)a6;
- (id)initWithPredicateType:(unsigned char)a0 arg1:(id)a1 arg2:(id)a2 qualifier1:(unsigned char)a3 qualifier2:(unsigned char)a4 argumentCellRef:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a5 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a6;
- (id)initWithPredicateType:(unsigned char)a0 arg1:(id)a1 arg2:(id)a2 qualifier1:(unsigned char)a3 qualifier2:(unsigned char)a4 argumentCellRef:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a5 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a6 forConditionalStyle:(char)a7;
- (id)initWithPredicateType:(unsigned char)a0 arg1:(id)a1 arg2:(id)a2 qualifier1:(unsigned char)a3 qualifier2:(unsigned char)a4 argumentCellReference:(id)a5 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a6 forConditionalStyle:(char)a7;
- (char)isEqualForInspector:(id)a0 atHostCoordinate:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1;
- (void)iterateFormulasWithContext:(struct TSCEFormulaRewriteContext { id x0; id x1; struct TSCEFormulaRewriteContextRecord { struct TSCEFormulaContainingCell { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; struct TSUColumnRowOffset { int x0; int x1; } x2; char x3; char x4; char x5; char x6; char x7; char x8; char x9; } x2; } *)a0 shouldStop:(char *)a1 block:(id /* block */)a2;
- (unsigned char)p_argTypeForPredArg:(id)a0 argNum:(unsigned long long)a1 calculationEngine:(id)a2 hostCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a3;
- (struct TSCEFormulaCreator { id /* block */ x0; })p_creatorForPeriodBoundaryWithScale:(unsigned char)a0 direction:(unsigned char)a1 offset:(id)a2 argIndex:(unsigned int)a3 earlierBound:(char)a4 isCalPers:(char)a5;
- (char)p_isEqualForNonFormulaItems:(id)a0;
- (void)p_populateMembersFromFormula;
- (void)p_setPredicateType:(unsigned char)a0;
- (void)p_setQualifier1:(unsigned char)a0;
- (void)p_setQualifier2:(unsigned char)a0;
- (void)p_smokeTestThePredicate;
- (char)p_testDataTypesForArg0:(unsigned char)a0 arg1:(unsigned char)a1 arg2:(unsigned char)a2 predShouldReturn:(char *)a3;
- (unsigned char)predArg0Type;
- (id)predicateArg1atBaseHostCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; })a0 calcEngine:(id)a1;
- (id)predicateArg2atBaseHostCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; })a0 calcEngine:(id)a1;
- (void)remapOwnerUIDsWithMap:(const void *)a0 rewriteContext:(struct TSCEFormulaRewriteContext { id x0; id x1; struct TSCEFormulaRewriteContextRecord { struct TSCEFormulaContainingCell { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; struct TSUColumnRowOffset { int x0; int x1; } x2; char x3; char x4; char x5; char x6; char x7; char x8; char x9; } x2; } *)a1 error:(char *)a2;
- (void)rewriteFormulaWithBlock:(id /* block */)a0;
- (void)rewriteNumberToDurationForSageImport:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 durationUnitLargest:(unsigned char)a1;
- (void)setArgumentAt:(long long)a0 withPredArg:(id)a1;
- (void)setHostCell:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 hostColumnUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 hostRowUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (void)upgradeTopAndBottom;
- (char)useColumnRefForArg0;

@end
