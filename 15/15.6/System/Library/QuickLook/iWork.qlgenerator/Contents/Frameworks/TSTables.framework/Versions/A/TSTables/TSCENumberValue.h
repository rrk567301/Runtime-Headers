@interface TSCENumberValue : TSCEValue {
    struct TSUDecimal { struct { unsigned long long w[2]; } _decimal; } _decimal;
    unsigned short _baseUnit;
}

@property (readonly, nonatomic) char hasUnits;
@property (readonly, nonatomic) char isDuration;
@property (readonly, nonatomic) char isUnitlessZero;
@property (nonatomic) unsigned short unit;
@property (readonly, nonatomic) unsigned char dimension;
@property (readonly, nonatomic) char isFinite;
@property (readonly, nonatomic) char isInf;
@property (readonly, nonatomic) char isNan;

+ (id)zero;
+ (id)numberWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0;
+ (id)numberWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0 baseUnit:(unsigned short)a1;
+ (id)makeDurationWithWeeks:(double)a0 days:(double)a1 hours:(double)a2 minutes:(double)a3 seconds:(double)a4 milliseconds:(double)a5;
+ (id)numberWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0 format:(const struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 6; unsigned char x2 : 6; unsigned char x3 : 3; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; char x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } *)a1;
+ (id)numberWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0 format:(const struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 6; unsigned char x2 : 6; unsigned char x3 : 3; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; char x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } *)a1 baseUnit:(unsigned short)a2;
+ (id)unitlessZero;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (unsigned long long)hash;
- (id)init;
- (id).cxx_construct;
- (id)decrement;
- (id)increment;
- (id)initWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0;
- (id)max:(id)a0;
- (id)min:(id)a0;
- (int)integer;
- (id)log;
- (id)floor;
- (id)numberWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0;
- (id)percent;
- (id)exp;
- (id)asNumber;
- (char)ge:(id)a0;
- (char)gt:(id)a0;
- (char)le:(id)a0;
- (char)lt:(id)a0;
- (id)asNumberValue;
- (id)negate;
- (id)asStringWithLocale:(id)a0;
- (struct TSUDecimal { struct { unsigned long long x0[2]; } x0; })decimalRepresentation;
- (char)nativeType;
- (double)rawDoubleValue;
- (double)rawTimeIntervalValue;
- (id)abs;
- (id)cos;
- (const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)rawDecimalValue;
- (id)subtract:(id)a0 functionSpec:(id)a1 outError:(id *)a2;
- (id)tan;
- (id)atan2:(id)a0 outError:(id *)a1;
- (id)erf;
- (id)errorForDuration:(id)a0 argumentIndex:(int)a1;
- (id)power:(id)a0 outError:(id *)a1;
- (id)sin;
- (id)acos;
- (id)acosh;
- (id)add:(id)a0 functionSpec:(id)a1 outError:(id *)a2;
- (id)add_nothrow:(id)a0;
- (char)areCurrenciesMatched:(id)a0;
- (char)asBoolean;
- (char)asBoolean:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (char)asBooleanWithLocale:(id)a0;
- (id)asNumber:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (id)asNumberWithLocale:(id)a0;
- (id)asString:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (id)asin;
- (id)asinh;
- (id)atan;
- (id)atanh;
- (id)besselj:(id)a0;
- (id)bessely:(id)a0;
- (id)canonicalKeyStringForLocale:(id)a0;
- (id)ceil;
- (long long)compare:(id)a0 outError:(id *)a1;
- (id)cosh;
- (char)deepType:(id)a0 outError:(id *)a1;
- (char)dimensionsMatchModuloCurrency:(id)a0;
- (id)divide:(id)a0 outError:(id *)a1;
- (double)doubleRepresentation;
- (char)eq:(id)a0 outError:(id *)a1;
- (id)erfc;
- (id)initWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0 baseUnit:(unsigned short)a1;
- (id)initWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0 baseUnit:(unsigned short)a1 isUnitlessZero:(char)a2;
- (id)initWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0 format:(const struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 6; unsigned char x2 : 6; unsigned char x3 : 3; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; char x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } *)a1;
- (id)initWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0 format:(const struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 6; unsigned char x2 : 6; unsigned char x3 : 3; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; char x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } *)a1 baseUnit:(unsigned short)a2;
- (id)initWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0 format:(const struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 6; unsigned char x2 : 6; unsigned char x3 : 3; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; char x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } *)a1 baseUnit:(unsigned short)a2 isUnitlessZero:(char)a3;
- (char)isNumberValue;
- (id)lgamma;
- (id)log10;
- (id)mod:(id)a0;
- (id)multiply:(id)a0 context:(id)a1;
- (char)ne:(id)a0 outError:(id *)a1;
- (struct TSUDecimal { struct { unsigned long long x0[2]; } x0; })p_transformDurationNumberWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0;
- (id)round;
- (id)sinh;
- (id)sqrt;
- (long long)stringBasedCompare:(id)a0 locale:(id)a1 outError:(id *)a2;
- (id)tanh;
- (double)timeIntervalRepresentation;
- (id)trunc;
- (id)variantWithDecimal:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0;

@end
