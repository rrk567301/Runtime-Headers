@class NSUUID, NSString, NSOperation, CALayer, TSDTextureSet, TSUBezierPath, NSMapTable, TSUColor, TSDBitmapRenderingQualityInfo;
@protocol MTLTexture, TSDMetalRenderer;

@interface TSDTexturedRectangle : NSObject <NSCopying, TSDMetalRendererDirectTextureSourceUpdating> {
    id /* block */ _renderBlock;
    char _didInitFromLayer;
    char _didInitFromGPUTexture;
    NSMapTable *_eventIndexToViewLayerMap;
    TSUBezierPath *_bakedShapePath;
    struct CGPoint { double x; double y; } _originalLeadingCaretPosition;
    struct CGPoint { double x; double y; } _originalTrailingCaretPosition;
    struct CGSize { double width; double height; } _originalCaretSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _originalLeadingCaretRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _originalTrailingCaretRect;
    unsigned long long _signpostID;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _stateLock;
}

@property struct CGImage { } *sourceImage;
@property struct CGImage { } *bakedImage;
@property (nonatomic) double bakedScale;
@property (nonatomic) double bakedRotation;
@property (nonatomic) double hdrHeadroom;
@property (weak, nonatomic) TSDTexturedRectangle *liveTexturedRectangleSourceProxy;
@property (readonly, nonatomic) char willRenderWithLiveTexturedRectangleSource;
@property (readonly, nonatomic) id<TSDMetalRenderer> liveTexturedRectangleRenderer;
@property (nonatomic) char shouldRenderWithLiveTexturedRectangleRenderer;
@property (nonatomic) char shouldUseDisplayLinkPresentationTime;
@property (retain, nonatomic) NSUUID *uuid;
@property (nonatomic) struct CGPoint { double x; double y; } originalPosition;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } originalFrame;
@property (nonatomic) struct CGPoint { double x; double y; } offset;
@property (nonatomic) struct CGSize { double width; double height; } size;
@property (readonly, nonatomic) unsigned long long sizeInBytes;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frameOnCanvas;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } contentRect;
@property (weak, nonatomic) TSDTextureSet *parent;
@property (readonly, nonatomic) CALayer *layer;
@property (readonly, nonatomic) struct CGImage { } *image;
@property (nonatomic) long long textureType;
@property (nonatomic) double textureOpacity;
@property (readonly, nonatomic) double singleTextureOpacity;
@property (nonatomic) char isFlattenedRepresentation;
@property (nonatomic) struct CGColorSpace { } *colorSpace;
@property (readonly, nonatomic) char isRenderable;
@property (readonly, nonatomic) char isImageSource;
@property (readonly, nonatomic) char isBaked;
@property (readonly, nonatomic) char isRendered;
@property (readonly, nonatomic) char isValid;
@property (readonly, nonatomic) char isBackgroundTexture;
@property (readonly, nonatomic) CALayer *parentLayer;
@property (nonatomic) char isIncomingContent;
@property (copy, nonatomic) TSUColor *backgroundColor;
@property (nonatomic) char isVerticalText;
@property (nonatomic) double textBaseline;
@property (nonatomic) double textXHeight;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } leadingCaretRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } trailingCaretRect;
@property (copy, nonatomic) TSUColor *textColor;
@property (copy, nonatomic) TSUColor *textBorderColor;
@property (copy, nonatomic) NSString *text;
@property (nonatomic) struct _NSRange { unsigned long long location; unsigned long long length; } textRange;
@property (weak, nonatomic) TSDBitmapRenderingQualityInfo *bitmapRenderingQualityInfo;
@property (copy, nonatomic) TSUBezierPath *shapePath;
@property (nonatomic) char shouldOverrideHeadroom;
@property (weak) NSOperation *renderingOperation;
@property (weak) NSOperation *renderingOperationMetal;
@property (readonly, nonatomic) id<MTLTexture> metalTexture;
@property (retain, nonatomic) TSDTexturedRectangle *metalTextureProxy;
@property (nonatomic) char metalTextureWillBeShared;
@property (nonatomic) char shouldGenerateMipmap;
@property (nonatomic) char shouldUseFloatingPointTextures;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)setupMetalShaderForContext:(id)a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectForTextures:(id)a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectOnCanvasForTextures:(id)a0;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void).cxx_destruct;
- (id)shortDescription;
- (void)teardown;
- (id)initWithCGImage:(struct CGImage { } *)a0;
- (id)initWithLayer:(id)a0;
- (id)initWithSize:(struct CGSize { double x0; double x1; })a0 offset:(struct CGPoint { double x0; double x1; })a1 renderBlock:(id /* block */)a2;
- (char)isMetalTextureSetup;
- (id)metalTextureWithContext:(id)a0;
- (struct CGColorSpace { } *)p_colorSpace;
- (void)releaseMetalTexture;
- (void)renderLayerContentsIfNeeded;
- (void)setupMetalTextureForDevice:(id)a0;
- (void)adjustAnchorRelativeToCenterOfRotation:(struct CGPoint { double x0; double x1; })a0 atEventIndex:(unsigned long long)a1;
- (void)resetAnchorPointAtEventIndex:(unsigned long long)a0;
- (id)viewLayerAtEventIndex:(unsigned long long)a0;
- (void)waitUntilAsyncRenderingIsCompleteShouldCancel:(char)a0;
- (void)resetToSourceImageAtEventIndex:(unsigned long long)a0;
- (void)bakeLayerWithAngle:(double)a0 scale:(double)a1 layer:(id)a2;
- (void)renderIntoContext:(struct CGContext { } *)a0 shouldApplyAlpha:(char)a1 shouldIgnoreLayerVisibility:(char)a2;
- (char)canReuseMetalTextureWith:(id)a0;
- (void)clearLiveMetalTextureCache;
- (void)clearLiveTexturedRectangleMemory;
- (void)clearLiveTexturedRectangleSource;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertToCanvasCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawFrameWithMetalContext:(id)a0;
- (void)evictRenderedResources;
- (char)hasLiveTexturedRectangleSourceWithNewRenderingForTimingInfo:(struct { double x0; double x1; double x2; })a0;
- (id)initWithLayer:(id)a0 forMetalTexture:(id)a1;
- (id)initWithMetalTexture:(id)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (char)needsToUpdateDirectTextureSourcesForTimingInfo:(struct { double x0; double x1; double x2; })a0;
- (void)p_bakeLayerWithAngle:(double)a0 scale:(double)a1 layer:(id)a2;
- (id)p_colorForColorspaceWithColor:(id)a0;
- (void)p_initialize;
- (unsigned long long)p_metalPixelFormat;
- (id)p_newImageAndBufferWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (id /* block */)p_rasterizationBlockWithBitmapSize:(struct CGSize { double x0; double x1; })a0;
- (void)p_renderIntoContext:(struct CGContext { } *)a0 viewLayer:(id)a1 shouldApplyAlpha:(char)a2 shouldIgnoreLayerVisibility:(char)a3 shouldClipToBounds:(char)a4;
- (char)p_shouldUseFloatTextures;
- (unsigned long long)p_textureDataSizeWithBitmapSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })p_textureSizeWithMaxSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })p_transformWithAngle:(double)a0 scale:(double)a1 offset:(struct CGPoint { double x0; double x1; })a2;
- (void)p_updateFrame;
- (void)promiseLiveTexturedRectangleSource;
- (void)renderIntoContext:(struct CGContext { } *)a0 eventIndex:(unsigned long long)a1 shouldApplyAlpha:(char)a2 shouldClipToBounds:(char)a3;
- (void)renderIntoContext:(struct CGContext { } *)a0 shouldApplyAlpha:(char)a1;
- (void)setLiveTextureRectangleDirectTextureSource:(id)a0 fallbackRenderer:(id)a1;
- (void)setLiveTexturedRectangleRenderer:(id)a0;
- (void)setupMetalTextureForContext:(id)a0;
- (void)setupMetalTextureForDevice:(id)a0 maxSize:(struct CGSize { double x0; double x1; })a1;
- (void)updateDirectTextureSourcesWithUpdateContext:(id)a0;

@end
