@class NSURL, TSDGroupInfo, NSObject, TSDStandinCaptionInfo, NSString, NSSet, TSDDrawableComment, TSDInfoGeometry, TSPObject, TSDExteriorTextWrap, NSArray, TSSPropertySetChangeDetails, TSPLazyReference, TSDDefaultPartitioner, NSUUID;
@protocol TSDInfo, TSDTitlePlacementProviding, TSDOwningAttachment;

@interface TSDDrawableInfo : TSPObject <TSDChangeableInfo, TSDLockableInfo, TSKDocumentObject, TSKTransformableObject, TSKSearchable, TSDScrollingAwareChangeSource, TSKAnnotationParent> {
    TSDInfoGeometry *mGeometry;
    NSObject<TSDInfo> *mParentInfo;
    TSPLazyReference *mParentInfoReference;
    TSSPropertySetChangeDetails *mChanges;
    TSDExteriorTextWrap *mExteriorTextWrap;
    TSDDefaultPartitioner *mDefaultPartitioner;
    TSDDrawableComment *mComment;
    NSArray *mPencilAnnotations;
    TSDStandinCaptionInfo *mCaptionStandin;
    TSDStandinCaptionInfo *mTitleStandin;
}

@property (class, nonatomic, setter=setShouldPartitionForPrinting:) char canPartitionForPrinting;
@property (class, readonly, nonatomic) char canPartitionInline;
@property (class, readonly, nonatomic) char isCaption;
@property (class, readonly, nonatomic) char wantsTitleAndCaptionUUIDs;

@property (nonatomic, getter=isLocked) char locked;
@property (readonly, nonatomic, getter=isLockable) char lockable;
@property (readonly, nonatomic) char supportsAttachedComments;
@property (readonly, nonatomic) char supportsParentRotation;
@property (readonly, nonatomic) char wantsCounterRotationWhenNotSupportingParentRotationInRotatedParent;
@property (nonatomic) char aspectRatioLocked;
@property (readonly, nonatomic) char canAspectRatioLockBeChangedByUser;
@property (readonly, nonatomic) char canSizeBeChangedIncrementally;
@property (readonly, nonatomic, getter=isAllowedInGroups) char allowedInGroups;
@property (readonly, nonatomic, getter=isAllowedInFreehandDrawings) char allowedInFreehandDrawings;
@property (readonly, nonatomic) char allowsParentGroupToBeResizedWithoutAspectRatioLock;
@property (readonly, nonatomic) NSObject<TSDInfo> *infoForAlignAndDistribute;
@property (retain, nonatomic) TSDDrawableInfo *caption;
@property (retain, nonatomic) TSDDrawableInfo<TSDTitlePlacementProviding> *title;
@property (retain, nonatomic) TSDStandinCaptionInfo *captionStandin;
@property (retain, nonatomic) TSDStandinCaptionInfo *titleStandin;
@property (nonatomic) char captionHidden;
@property (nonatomic) char titleHidden;
@property (copy, nonatomic) NSUUID *captionUUID;
@property (copy, nonatomic) NSUUID *titleUUID;
@property (readonly, nonatomic) char allowsCaption;
@property (readonly, nonatomic) char allowsTitle;
@property (readonly, nonatomic) char canAddCaption;
@property (readonly, nonatomic) char canAddTitle;
@property (readonly, nonatomic) char canRemoveCaption;
@property (readonly, nonatomic) char canRemoveTitle;
@property (readonly, nonatomic) char canCommentInCaptionOrTitle;
@property (readonly, nonatomic) NSString *presetKind;
@property (readonly, nonatomic) NSSet *animationFilters;
@property (copy, nonatomic) TSDExteriorTextWrap *exteriorTextWrap;
@property (copy, nonatomic) NSURL *hyperlinkURL;
@property (readonly, nonatomic) char supportsHyperlinks;
@property (copy, nonatomic) NSString *accessibilityDescription;
@property (readonly, nonatomic) char willRenderContentViaImager;
@property (readonly, nonatomic) char canChangeWrapType;
@property (readonly, nonatomic) char requiresStagesBuildingInReverse;
@property (readonly, nonatomic) char suppliesFinalTextures;
@property (readonly, nonatomic) Class contentLanguageExporterClass;
@property (readonly, nonatomic) char wantsStandardTypesInAdditionToTypesToPromiseWhenCopyingSingleDrawable;
@property (readonly, nonatomic) char wantsStandardTypesInAdditionToTypesToPromiseWhenDraggingSingleDrawable;
@property (readonly, nonatomic) char contentsAreRightToLeft;
@property (readonly, nonatomic) TSDGroupInfo *containingGroup;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } transformableObjectAnchorPoint;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } transformInRoot;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } fullTransformInRoot;
@property (readonly, nonatomic) char canAnchor;
@property (readonly, nonatomic) char needsDownload;
@property (readonly, nonatomic) char canCopyData;
@property (readonly, nonatomic) char shouldBeIgnoredWhenCopying;
@property (readonly, nonatomic) char hasPDFDataForCopy;
@property (readonly, nonatomic) char wantsPositionFixedWhenCopying;
@property (retain, nonatomic) TSDDrawableComment *comment;
@property (retain, nonatomic) NSArray *pencilAnnotations;
@property (readonly, nonatomic) char isLockedForSpecificInfo;
@property (readonly, nonatomic) char shouldShowInPrint;
@property (readonly) NSString *displayableDescriptiveName;
@property (readonly) NSString *userDescription;
@property (readonly) NSString *defaultDescriptiveName;
@property (readonly) NSString *displayableContainedText;
@property (readonly) NSString *typeName;
@property (copy, nonatomic) TSDInfoGeometry *geometry;
@property (nonatomic) NSObject<TSDInfo> *parentInfo;
@property (nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment;
@property (readonly, nonatomic) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse;
@property (readonly, nonatomic, getter=isFloatingAboveText) char floatingAboveText;
@property (readonly, nonatomic, getter=isAnchoredToText) char anchoredToText;
@property (readonly, nonatomic, getter=isInlineWithText) char inlineWithText;
@property (readonly, nonatomic, getter=isInlineWithTextWithWrap) char inlineWithTextWithWrap;
@property (readonly, nonatomic, getter=isAttachedToBodyText) char attachedToBodyText;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) char matchesObjectPlaceholderGeometry;

+ (char)needsObjectUUID;
+ (Class)classForUnarchiver:(id)a0;
+ (void)registerClassForUnarchiving:(Class)a0;
+ (Class)i_drawableInfoSubclassForClass:(Class)a0 unarchiver:(id)a1;

- (void).cxx_destruct;
- (char)isSelectable;
- (void)didCopy;
- (id)annotationWithUUID:(id)a0;
- (Class)layoutClass;
- (id)childEnumerator;
- (void)clearBackPointerToParentInfoIfNeeded:(id)a0;
- (id)initWithContext:(id)a0 geometry:(id)a1;
- (char)isThemeContent;
- (Class)repClass;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)a0 byGlyphStyle:(int)a1 animationFilter:(id)a2;
- (void)adoptStylesheet:(id)a0 withMapper:(id)a1;
- (void)beginCollectingChanges;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)a0 animationFilter:(id)a1;
- (void)coalesceChanges:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })computeFullTransform;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })computeLayoutFullTransform;
- (id)descriptionForPasteboard;
- (id)descriptionForPasteboardWithSource:(id)a0;
- (id)endCollectingChanges;
- (id)mixedObjectWithFraction:(double)a0 ofObject:(id)a1;
- (id)partitioner;
- (void)performBlockWithTemporaryLayout:(id /* block */)a0;
- (void)setInsertionCenterPosition:(struct CGPoint { double x0; double x1; })a0;
- (unsigned long long)textureDeliveryStyleFromDeliveryString:(id)a0;
- (id)textureDeliveryStylesLocalized:(char)a0 animationFilter:(id)a1;
- (id)transformedGeometryWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 inBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)wasAddedToDocumentRoot:(id)a0 dolcContext:(id)a1;
- (void)wasRemovedFromDocumentRoot:(id)a0;
- (void)willBeAddedToDocumentRoot:(id)a0 dolcContext:(id)a1;
- (void)willBeRemovedFromDocumentRoot:(id)a0;
- (void)willChangeProperties:(id)a0;
- (void)willChangeProperty:(int)a0;
- (void)willCopyWithOtherDrawables:(id)a0;
- (id)captionInfoIgnoringVisibility;
- (id)childEnumeratorForUserSearch;
- (id)copyToInstantiateTemplatePlaceholder;
- (char)isChildOfPossibleParentInfo:(id)a0;
- (void)loadFromArchive:(const void *)a0 unarchiver:(id)a1;
- (long long)mixingTypeWithObject:(id)a0 context:(id)a1;
- (id)objectUUIDPath;
- (id)replicateForReinsertion;
- (void)saveToArchive:(void *)a0 archiver:(id)a1;
- (void)setParentInfoDuringUnarchiving:(id)a0 inDocument:(char)a1;
- (void)setPrimitiveGeometry:(id)a0;
- (id)titleInfoIgnoringVisibility;
- (id)promisedDataForType:(id)a0;
- (char)shouldCancelScrollingToSelectionPath:(id)a0 forChanges:(id)a1;
- (char)shouldShowOnCanvas:(id)a0;
- (id)typesToPromiseWhenCopyingSingleDrawable;
- (void)adjustModelInPreparationForBecomingInline;
- (struct CGPoint { double x0; double x1; })autosizePositionOffsetForGeometry:(id)a0 dynamicallyDraggedLayout:(id)a1;
- (id)exteriorTextWrapForMovingToFloating;
- (void)i_removeCaptionStandin;
- (void)i_removeTitleStandin;
- (void)i_setCaption:(id)a0 withUUID:(id)a1;
- (void)i_setTitle:(id)a0 withUUID:(id)a1;
- (char)p_allAncestorsAreUnrotatedAndUnflipped;
- (id)promisedTSPDataForType:(id)a0;
- (char)shouldPreventCopyOperationWithOtherInfos:(id)a0;
- (char)shouldTruncateSelectionPathAtInfoForCaptionCommand;
- (void)takePropertiesFromReplacedDrawableInfo:(id)a0;
- (id)titleAndCaptionInfos;
- (id)titleAndCaptionInfosForUserSearch;
- (double)transformGeometryRatioForTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;

@end
