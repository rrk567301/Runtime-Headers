@class TSUColor, NSString, NSArray, TSCKDocumentRoot, NSSet, NSObject, NSMapTable, TSDCanvas;
@protocol TSDCanvasProxyDelegate, TSDInfo;

@interface TSDImager : NSObject <TSDDynamicOverridingCanvasDelegate, TSDCanvasDelegate> {
    double mViewScale;
    double mContentsScale;
    struct CGSize { double width; double height; } mScaledImageSize;
    struct CGSize { double width; double height; } mMaximumImagePixelSize;
    char mUseScaledImageSize;
    TSCKDocumentRoot *mDocumentRoot;
    char mHasBeenUsed;
    char mDrawingIntoPDF;
    struct CGContext { } *mReusableBitmapContext;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mReusableBounds;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mReusableIntegralBounds;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mReusableActualScaledClipRect;
    struct CGSize { double width; double height; } mReusableScaledImageSize;
    id /* block */ mPostRenderAction;
    NSMapTable *mDynamicOverrides;
    NSObject<TSDInfo> *mInfoToDrawBeneath;
    id /* block */ mInfoToDrawBeneathFilter;
    char mWillBeCalledSafelyOutsideOfReadLock;
}

@property (copy, nonatomic) NSSet *previousRenderDatasNeedingDownload;
@property (nonatomic) double previousRenderContentHeadroom;
@property (readonly, nonatomic) TSDCanvas *canvas;
@property (retain, nonatomic) NSArray *infos;
@property (nonatomic) char mayBeReused;
@property (copy, nonatomic) TSUColor *backgroundColor;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } unscaledClipRect;
@property (nonatomic) double viewScale;
@property (nonatomic) double contentsScale;
@property (nonatomic) struct CGSize { double x0; double x1; } scaledImageSize;
@property (nonatomic) struct CGSize { double x0; double x1; } maximumImagePixelSize;
@property (nonatomic) char distortedToMatch;
@property (nonatomic) char imageMustHaveEvenDimensions;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } actualScaledClipRect;
@property (nonatomic) char shouldReuseBitmapContext;
@property (nonatomic) char isPrinting;
@property (nonatomic) char shouldShowInstructionalText;
@property (readonly, nonatomic) char previousRenderTonemappedHDRContentToSDR;
@property (nonatomic) char shouldSuppressBackgrounds;
@property (nonatomic) char shouldShowComments;
@property (nonatomic) char shouldShowTextCommentHighlights;
@property (nonatomic) char shouldShowCaptionInstructionalText;
@property (nonatomic) char verticalTextAllowed;
@property (nonatomic) char prefersThumbnailImagesToRender;
@property (readonly, nonatomic) id<TSDCanvasProxyDelegate> canvasProxyDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (id)generateImage;
- (id)documentRoot;
- (id)pdfData;
- (char)isPrintingCanvas;
- (struct CGImage { } *)newImage;
- (void)p_drawPageInContext:(struct CGContext { } *)a0 createPage:(char)a1;
- (char)drawPageInContext:(struct CGContext { } *)a0 createPage:(char)a1;
- (id)initWithDocumentRoot:(id)a0;
- (char)isCanvasDrawingIntoPDF:(id)a0;
- (char)p_configureCanvas;
- (struct CGImage { } *)p_newImageInReusableContext;
- (void)setPostRenderAction:(id /* block */)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleScaledBoundsForClippingRepsOnCanvas:(id)a0;
- (id)initWithDocumentRoot:(id)a0 renderForWideGamut:(char)a1 renderHDRContent:(char)a2;
- (char)prefersThumbnailImagesToRenderForCanvas:(id)a0;
- (char)shouldShowCommentsForCanvas:(id)a0;
- (char)shouldShowInstructionalTextForLayout:(id)a0;
- (char)shouldShowTextCommentHighlightsForCanvas:(id)a0;
- (id)pngData;
- (id)dynamicOverrideForLayout:(id)a0;
- (id)dynamicOverrideForRep:(id)a0;
- (void)i_setDrawsOnlyBelowInfo:(id)a0;
- (void)i_setRenderHDRContent:(char)a0;
- (id)initWithDocumentRoot:(id)a0 renderForWideGamut:(char)a1;
- (id)initWithDocumentRoot:(id)a0 renderForWideGamut:(char)a1 renderHDRContent:(char)a2 willBeCalledSafelyOutsideOfReadLock:(char)a3;
- (id)initWithDocumentRoot:(id)a0 renderForWideGamut:(char)a1 willBeCalledSafelyOutsideOfReadLock:(char)a2;
- (void)p_assertHasReadLock;
- (struct CGSize { double x0; double x1; })p_evenDimensionsWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)setDynamicOverride:(id)a0 forInfo:(id)a1;
- (void)setInfos:(id)a0 allowLayoutIfNeeded:(char)a1;

@end
