@class TSCHChartInfo, TSCHChartDrawableLayoutLegendResizer, NSArray, TSCHChartLayout, NSDictionary, TSCHChartModel, NSIndexSet, TSDLayoutGeometry;
@protocol TSWPStyleProviding;

@interface TSCHChartDrawableLayout : TSWPTextHostLayout {
    TSCHChartLayout *_chartLayout;
    struct { char chartLayoutState; char chartLayoutStructure; } _chartInvalidFlags;
}

@property (retain, nonatomic) TSCHChartDrawableLayoutLegendResizer *legendResizer;
@property (copy, nonatomic) TSDLayoutGeometry *lastPureGeometry;
@property (copy, nonatomic) TSDLayoutGeometry *lastChartAreaGeometry;
@property (copy, nonatomic) TSDLayoutGeometry *legendGeometryForResize;
@property (nonatomic) struct CGSize { double width; double height; } minSizeCache;
@property (nonatomic) char inResize;
@property (nonatomic) char suppressChartLayoutInvalidation;
@property (retain, nonatomic) TSDLayoutGeometry *layoutGeometryWhileCallingSuperComputeLayoutGeometry;
@property (readonly, weak, nonatomic) TSCHChartInfo *chart;
@property (readonly, weak, nonatomic) TSCHChartInfo *chartInfo;
@property (readonly, weak, nonatomic) id<TSWPStyleProviding> styleProvidingSource;
@property (readonly, nonatomic) TSCHChartLayout *chartLayout;
@property (readonly, nonatomic) char is3DChart;
@property (nonatomic) char forceLayoutSettingsOmitLabelPlacement;
@property (readonly, nonatomic) NSIndexSet *pieWedgeExplosionSeriesIndices;
@property (copy, nonatomic) NSArray *pieWedgeExplosions;
@property (copy, nonatomic) NSDictionary *seriesIndexedPieWedgeExplosions;
@property (readonly, copy, nonatomic) NSDictionary *seriesIndexedPieNormalizedLabelDistancesFromWedgeTips;
@property (readonly, nonatomic) TSCHChartModel *model;
@property (nonatomic) unsigned long long dataSetIndex;
@property (readonly, nonatomic) double multiDataControlDesiredDistanceFromChartRep;
@property (copy, nonatomic) TSDLayoutGeometry *legendGeometry;
@property (copy, nonatomic) TSDLayoutGeometry *legendModelGeometry;
@property (readonly, nonatomic) long long chartDrawableLayoutMode;

- (void)dealloc;
- (void).cxx_destruct;
- (void)invalidate;
- (id)initWithInfo:(id)a0;
- (struct CGSize { double x0; double x1; })minimumSize;
- (void)validate;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsInfluencingExteriorWrap;
- (id)computeLayoutGeometry;
- (id)i_computeWrapPath;
- (void)invalidateSize;
- (id)layoutGeometryFromInfo;
- (void)processChangedProperty:(int)a0;
- (Class)repClassOverride;
- (int)wrapFitType;
- (void)processChanges:(id)a0;
- (id)computeInfoGeometryDuringResize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentFrameForProvidingGuidesInRoot;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForStandardKnobs;
- (char)canRotateChildLayout:(id)a0;
- (void)offsetGeometryBy:(struct CGPoint { double x0; double x1; })a0;
- (id)visibleGeometries;
- (void)willBeAddedToLayoutController:(id)a0;
- (double)viewScaleForZoomingToSelectionPath:(id)a0 targetPointSize:(double)a1;
- (id)computeInfoGeometryFromPureLayoutGeometry:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForCaptionPositioning;
- (id)chartDrawableLayoutModeProvider;
- (id)p_chartLayout2D;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentFrameForInlineLayout;
- (id)ancestorLayoutConformingToProtocol:(id)a0;
- (char)changesShouldClearLayout:(id)a0;
- (char)changesShouldSetNeedsLayout:(id)a0;
- (id)chartDrawableInfo;
- (id)chartDrawableLayoutGeometryProvider;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForCullingWithBaseFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 additionalTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (id)i_computeUnitedWrapPath;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })insertionFrame;
- (void)invalidateChartLayoutState;
- (void)invalidateChartLayoutStructure;
- (void)p_addEdgeAlignmentGuidesForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 array:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_addMultiDataControlToInlineWrapBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)p_approximateMultiDataControlUnscaledHeight;
- (double)p_approximateMultiDataControlUnscaledMinimumWidth;
- (double)p_approximatedAdditionalHeightForMultiDataControlWithMinimumAccommodatingScale:(double)a0;
- (struct CGSize { double x0; double x1; })p_calcMinSize;
- (id)p_chartLayout;
- (void)p_clearChartLayout;
- (id)p_constrainAndResizePureGeometry:(id)a0 withValidChartLayout:(id)a1 toChartAreaGeometry:(id *)a2 toShadowGeometry:(id *)a3 toInfoGeometry:(id *)a4;
- (void)p_convertValidChartLayout:(id)a0 andInfoGeometry:(id)a1 toPureGeometry:(id *)a2 toChartAreaGeometry:(id *)a3 toShadowGeometry:(id *)a4;
- (void)p_forceValidateChartLayout;
- (id)p_infoGeometryForComputingLayoutGeometryWithChartLayout:(id)a0;
- (char)p_isPrintingInBackground;
- (char)p_isRenderingForKPF;
- (struct { char x0; char x1; char x2; char x3; char x4; char x5; char x6; char x7; long long x8; unsigned long long x9; })p_layoutSettingsForDrawableLayoutModeByUpdatingLayoutSettings:(struct { char x0; char x1; char x2; char x3; char x4; char x5; char x6; char x7; long long x8; unsigned long long x9; })a0;
- (void)p_postLayoutPropertyValueDidChangeNotification;
- (void)p_setLegendGeometry:(id)a0 fromTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 onLayout:(id)a2 shouldUpdateLayoutItemSize:(char)a3;
- (void)p_setLegendSize:(struct CGSize { double x0; double x1; })a0;
- (void)p_validateChartLayout;
- (id)pieWedgeExplosionsForSeriesIndices:(id)a0;
- (id)propertiesThatInvalidateLayout;
- (id)renderersWithRep:(id)a0;
- (void)setChartLayoutPropertyValue:(id)a0 forKey:(id)a1;
- (void)take3DDepth;

@end
