@class NSString, TSTHiddenStatesOwner, TSTHiddenStateExtent, TSTTableFilterSet;

@interface TSTHiddenStates : NSObject <TSTTableHiddenRowColumnProviding, TSTAdditionalHiddenRowColumnProviding>

@property (weak, nonatomic) TSTHiddenStatesOwner *hiddenStatesOwner;
@property (readonly, nonatomic) TSTHiddenStateExtent *rowHiddenStateExtent;
@property (readonly, nonatomic) TSTHiddenStateExtent *columnHiddenStateExtent;
@property (readonly, nonatomic) char hasHiddenColumnsOrRows;
@property (readonly, nonatomic) char hasCollapsedRows;
@property (readonly, nonatomic) char hasCollapsedColumns;
@property (readonly, nonatomic) unsigned int numberOfHiddenRows;
@property (readonly, nonatomic) unsigned int numberOfHiddenColumns;
@property (readonly, nonatomic) unsigned int numberOfUserHiddenRows;
@property (readonly, nonatomic) unsigned int numberOfUserHiddenColumns;
@property (readonly, nonatomic) char loadedIndexesAfterUnarchive;
@property (nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } hiddenStateOwnerForRowsUID;
@property (nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } hiddenStateOwnerForColumnsUID;
@property (retain, nonatomic) TSTTableFilterSet *filterSetForRows;
@property (retain, nonatomic) TSTTableFilterSet *filterSetForColumns;
@property (nonatomic) char needsFilterFormulaRewriteForImport;
@property (nonatomic) char needsToUpdateFilterSetForImport;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (unsigned int)columnOrRowIndexForFilterCoordinate:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } *)a0;
+ (unsigned short)filterCoordTypeForFilterCoordinate:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } *)a0;
+ (struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })filterFormulaContainingCell;
+ (struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })filterFormulaCoordForViewColumnRow:(unsigned int)a0;
+ (struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })filterFormulaCoordinateForColumnOrRow:(unsigned int)a0;
+ (struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })filterFormulaCoordinateForType:(unsigned short)a0 columnOrRowIndex:(unsigned int)a1;
+ (void)invalidateForChangingIndexes:(id)a0 isRow:(char)a1 forTable:(id)a2;
+ (id)mutableIndexSetByIntersecting:(id)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;

- (void).cxx_destruct;
- (id)hiddenRowIndexes;
- (id)translator;
- (void)setTableModel:(id)a0;
- (void)encodeToArchive:(void *)a0 archiver:(id)a1;
- (id)indexesOfVisibleRowsInRowRange:(id)a0;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })referenceToHiddenStateFromColumn:(unsigned short)a0 toColumn:(unsigned short)a1;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })referenceToHiddenStateFromRow:(unsigned int)a0 toRow:(unsigned int)a1;
- (id)collapseSummaryColumnGroupUIDs:(id)a0;
- (id)indexesOfHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)mutablePivotHiddenColumnIndexes;
- (char)anyHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (char)anyHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 forAction:(unsigned char)a1;
- (char)anyHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (char)anyHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 forAction:(unsigned char)a1;
- (id)applyCollapseExpandState:(id)a0 outUndoState:(id *)a1;
- (void)clearAllFiltered;
- (void)clearAllPivotHiddenAndInvalidate:(char)a0;
- (id)collapseSummaryRowGroupUIDs:(id)a0;
- (id)collapsedColumnGroupUids;
- (id)collapsedRowGroupUids;
- (id)copyCollapsedStateToUpdatedRowGroupUids:(id)a0;
- (void)copyFromHiddenStates:(id)a0 forRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1 withContext:(id)a2 isWholeTableCopy:(char)a3;
- (void)deleteColumnsFromBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 columnUids:(const void *)a1;
- (void)deleteRowsFromBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 rowUids:(const void *)a1;
- (void)dirtyFilterState;
- (void)dirtyFilterStateForFooters;
- (void)dirtyFilterStateForHeaders;
- (id)duplicateFilterSet;
- (id)duplicateFilterSetInUidFormWithTable:(id)a0;
- (void)enableFilterSet:(char)a0;
- (id)expandSummaryColumnGroupUIDs:(id)a0;
- (id)expandSummaryRowGroupUIDs:(id)a0;
- (void)filterSetUpdated;
- (char)hasActiveFilters;
- (char)hasFilterRulesWithTable:(id)a0 inBaseColumns:(id)a1;
- (char)hasHiddenColumnAtIndex:(unsigned short)a0;
- (char)hasHiddenColumnAtIndex:(unsigned short)a0 forAction:(unsigned char)a1;
- (char)hasHiddenRowAtIndex:(unsigned int)a0;
- (char)hasHiddenRowAtIndex:(unsigned int)a0 forAction:(unsigned char)a1;
- (id)hiddenColumnIndexes;
- (char)hideBaseColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0 forAction:(unsigned char)a1;
- (char)hideBaseRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 forAction:(unsigned char)a1;
- (char)hideColumnAtIndex:(unsigned short)a0 forAction:(unsigned char)a1;
- (void)hideColumnsAtIndexes:(id)a0 forAction:(unsigned char)a1 invalidate:(char)a2;
- (char)hideRowAtIndex:(unsigned int)a0 forAction:(unsigned char)a1;
- (void)hideRowsAtIndexes:(id)a0 forAction:(unsigned char)a1 invalidate:(char)a2;
- (unsigned char)hidingActionForBaseColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (unsigned char)hidingActionForBaseRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (unsigned char)hidingActionForColumnAtIndex:(unsigned short)a0;
- (unsigned char)hidingActionForRowAtIndex:(unsigned int)a0;
- (unsigned short)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnAfterColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned short)a0;
- (unsigned int)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowAfterRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowBeforeRowAtIndex:(unsigned int)a0;
- (id)indexesOfCollapsedColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfCollapsedRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfFilteredColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfFilteredRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfHiddenColumnsInBaseCellRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)indexesOfHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfHiddenRowsInBaseCellRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)indexesOfUserHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfUserHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfUserVisibleRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfVisibleColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfVisibleColumnsInCellRegion:(id)a0;
- (id)indexesOfVisibleColumnsInColumnRange:(id)a0;
- (id)indexesOfVisibleRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfVisibleRowsInCellRegion:(id)a0;
- (id)initWithArchive:(const void *)a0 unarchiver:(id)a1 forHiddenStatesOwner:(id)a2;
- (id)initWithHiddenStatesOwner:(id)a0;
- (id)initWithHiddenStatesOwner:(id)a0 shouldRegister:(char)a1;
- (void)insertNewColumnsInBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)insertNewRowsInBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)invalidateAllCollapsed;
- (void)invalidateViewGeometry;
- (char)isColumnGroupUIDCollapsed:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (char)isGroupCollapsedAndVisible:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 dimension:(long long)a1;
- (char)isGroupOrParentsCollapsed:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 dimension:(long long)a1;
- (char)isRowGroupUIDCollapsed:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)loadIndexesFromTable:(id)a0;
- (void)moveBaseColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a1;
- (void)moveBaseRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toRowIndex:(struct TSUModelRowIndex { unsigned int x0; })a1;
- (void)moveViewColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (id)mutableFilteredColumnIndexes;
- (id)mutableFilteredRowIndexes;
- (id)mutablePivotHiddenRowIndexes;
- (id)mutableUserHiddenColumnIndexes;
- (id)mutableUserHiddenRowIndexes;
- (void)mutateFormulaFiltersWithTable:(id)a0 usingBlock:(id /* block */)a1;
- (struct TSUModelColumnIndex { unsigned short x0; })numberOfHiddenColumnsInBaseCellRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (unsigned int)numberOfHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct TSUModelRowIndex { unsigned int x0; })numberOfHiddenRowsInBaseCellRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (unsigned int)numberOfHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct TSUModelRowIndex { unsigned int x0; })numberOfUserHiddenRowsInBaseCellRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (unsigned int)numberOfUserHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)pruneCollapsedColumnGroups;
- (id)pruneCollapsedRowGroups;
- (int)registerWithCalcEngine:(id)a0 baseOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)remapTableUIDsInFormulasWithMap:(const void *)a0 calcEngine:(id)a1;
- (void)setColumnGroupUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 asCollapsed:(char)a1;
- (void)setFilterSetType:(int)a0;
- (void)setFormulaOwnerUIDsWithMap:(id)a0;
- (void)setRowGroupUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 asCollapsed:(char)a1;
- (char)showBaseColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0 forAction:(unsigned char)a1;
- (char)showBaseRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 forAction:(unsigned char)a1;
- (char)showColumnAtIndex:(unsigned short)a0 forAction:(unsigned char)a1;
- (void)showColumnsAtIndexes:(id)a0 forAction:(unsigned char)a1 invalidate:(char)a2;
- (char)showRowAtIndex:(unsigned int)a0 forAction:(unsigned char)a1;
- (void)showRowsAtIndexes:(id)a0 forAction:(unsigned char)a1 invalidate:(char)a2;
- (void)swapBaseRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 withRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a1;
- (void)syncUpHiddenStateFormulaOwnerUIDs;
- (void)unregisterFromCalcEngine;
- (char)verifyConnectionsWithTableModel:(id)a0;
- (void)willChangeGroupByTo:(id)a0;

@end
