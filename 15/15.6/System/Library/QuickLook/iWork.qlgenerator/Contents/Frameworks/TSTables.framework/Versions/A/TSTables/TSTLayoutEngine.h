@class NSIndexSet, TSTDupContentCache, TSTFontInfoCache, TSTTextStyleToFontHeightCache, __end_, NSMutableArray, TSDFill, NSMutableSet, TSTMergeRangeSortedSet, NSString, TSKChangeNotifier, NSMutableDictionary, NSPointerArray, NSCountedSet, TSTHiddenRowsColumnsCache, NSObject, TSDInfoGeometry, TSUWidthLimitedQueue, TSTCellSelection, TSWPColumnStyle, TSTWidthHeightCache, TSTLayout, TSTLayoutDynamicResizeInfo, __end_cap_, TSTConcurrentMutableIndexSet, TSTStrokeDefaultVendor, TSTTextEngineDelegate, TSTCellRegion, TSTWPColumnCache, TSTTableInfo, TSUColor, TSTStrokeWidthCache, TSDLayoutGeometry;
@protocol TSWPStyleProviding, OS_dispatch_group, TSTLayoutDynamicContentProtocol, OS_dispatch_queue, TSTLayoutDynamicCellFillProtocol;

@interface TSTLayoutEngine : NSObject <TSTTableHiddenRowColumnProviding, TSTTableInternalGeometryProviding, TSTTableMergeRangeProviding> {
    struct vector<TSTStrokeLayerStack *, std::allocator<TSTStrokeLayerStack *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<TSTStrokeLayerStack *__strong *, std::allocator<TSTStrokeLayerStack *>> { id *__value_; } x1; } _topRowStrokes;
    struct vector<TSTStrokeLayerStack *, std::allocator<TSTStrokeLayerStack *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<TSTStrokeLayerStack *__strong *, std::allocator<TSTStrokeLayerStack *>> { id *__value_; } x1; } _bottomRowStrokes;
    struct vector<TSTStrokeLayerStack *, std::allocator<TSTStrokeLayerStack *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<TSTStrokeLayerStack *__strong *, std::allocator<TSTStrokeLayerStack *>> { id *__value_; } x1; } _leftColumnStrokes;
    struct vector<TSTStrokeLayerStack *, std::allocator<TSTStrokeLayerStack *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<TSTStrokeLayerStack *__strong *, std::allocator<TSTStrokeLayerStack *>> { id *__value_; } x1; } _rightColumnStrokes;
    struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } _tableDefaultFontHeightForArea;
    NSObject<OS_dispatch_group> *_layoutInFlight;
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } _strokesRWLock;
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } _contentRWLock;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _dynamicModeUnfairLock;
}

@property (retain, nonatomic) TSTWPColumnCache *cellIDToWPColumnCache;
@property (retain, nonatomic) TSTDupContentCache *dupContentCache;
@property (retain, nonatomic) TSTWPColumnCache *tempWPColumnCache;
@property (retain, nonatomic) TSTWidthHeightCache *widthHeightCache;
@property (retain, nonatomic) TSTHiddenRowsColumnsCache *hiddenRowsColumnsCache;
@property (retain, nonatomic) TSTFontInfoCache *fontInfoCache;
@property (retain, nonatomic) TSUWidthLimitedQueue *layoutValidateQueue;
@property (retain, nonatomic) TSUWidthLimitedQueue *layoutMeasureQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *layoutConcurrentQueue;
@property (retain, nonatomic) TSTStrokeDefaultVendor *strokesDefaultVendor;
@property (retain, nonatomic) TSTConcurrentMutableIndexSet *spillStrokeColumns;
@property (retain, nonatomic) TSTCellRegion *cellRegionForClearedMergeStrokes;
@property (retain, nonatomic) TSTStrokeWidthCache *columnToStrokeWidthCache;
@property (retain, nonatomic) TSTStrokeWidthCache *rowToStrokeHeightCache;
@property (retain, nonatomic) TSTTextStyleToFontHeightCache *paraStyleToHeightCache;
@property (nonatomic) char headerColumnsFrozen;
@property (nonatomic) char headerRowsFrozen;
@property (nonatomic) char headerColumnsRepeat;
@property (nonatomic) char headerRowsRepeat;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } tableNameBounds;
@property (nonatomic) double cachedTableNameHeight;
@property (nonatomic) char tableNameHeightValid;
@property (readonly, nonatomic) NSMutableDictionary *tableNameHeightCache;
@property (nonatomic) unsigned int cachedNumberOfColumns;
@property (nonatomic) unsigned int cachedNumberOfRows;
@property (nonatomic) unsigned int cachedNumberOfHeaderColumns;
@property (nonatomic) unsigned int cachedNumberOfHeaderRows;
@property (nonatomic) unsigned int cachedNumberOfGrandTotalColumns;
@property (nonatomic) unsigned int cachedNumberOfFooterRows;
@property (nonatomic) unsigned int cachedNumberOfFooterOrGrandTotalRows;
@property (nonatomic) unsigned long long cachedMaxNumberOfColumns;
@property (nonatomic) unsigned long long cachedMaxNumberOfRows;
@property (nonatomic) char bandedFillIsValid;
@property (nonatomic) char useBandedFill;
@property (retain, nonatomic) TSDFill *bandedFillObject;
@property (nonatomic) int tableRowsBehavior;
@property (nonatomic) char tableDefaultFontHeightsAreValid;
@property (retain, nonatomic) NSMutableSet *contentReadingThreads;
@property (nonatomic) char emptyFilteredTable;
@property (retain, nonatomic) NSMutableArray *changeDescriptors;
@property (nonatomic) char isGrouped;
@property (nonatomic, getter=isInDynamicLayoutMode) char inDynamicLayoutMode;
@property (retain, nonatomic) NSCountedSet *dynamicLayoutParticipants;
@property (retain, nonatomic) TSTLayout *dynamicLayout;
@property (nonatomic) double dynamicAddOrRemoveColumnElementSize;
@property (nonatomic) double dynamicAddOrRemoveRowElementSize;
@property (nonatomic) char dynamicBandedFill;
@property (nonatomic) char dynamicBandedFillSetting;
@property (nonatomic) int dynamicColumnAdjustment;
@property (nonatomic) double dynamicColumnTabSize;
@property (retain, nonatomic) id<TSTLayoutDynamicContentProtocol> dynamicContentDelegate;
@property (retain, nonatomic) TSUColor *dynamicFontColor;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } dynamicFontColorCellRange;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } dynamicHidingContent;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } dynamicHidingRowsCols;
@property (nonatomic) long long dynamicHidingRowsColsDirection;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } dynamicHidingText;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } dynamicRemovingText;
@property (retain, nonatomic) TSDInfoGeometry *dynamicInfoGeometry;
@property (nonatomic) char dynamicRepressFrozenHeaderRows;
@property (nonatomic) char dynamicRepressFrozenHeaderColumns;
@property (retain, nonatomic) TSTLayoutDynamicResizeInfo *dynamicResizeInfo;
@property (nonatomic) char dynamicResizingColumns;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } dynamicResizingColumnRange;
@property (nonatomic) double dynamicResizingColumnAdjustment;
@property (nonatomic) char dynamicResizingRows;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } dynamicResizingRowRange;
@property (nonatomic) double dynamicResizingRowAdjustment;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } dynamicRevealingRowsCols;
@property (nonatomic) long long dynamicRevealingRowsColsDirection;
@property (nonatomic) int dynamicRowAdjustment;
@property (nonatomic) double dynamicRowTabSize;
@property (retain, nonatomic) TSTCellSelection *dynamicSelection;
@property (nonatomic) double dynamicTableNameResize;
@property (nonatomic) struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } dynamicSuppressingConditionalStylesCellID;
@property (retain, nonatomic) id<TSTLayoutDynamicCellFillProtocol> dynamicCellFillDelegate;
@property (readonly, nonatomic) TSWPColumnStyle *defaultColumnStyle;
@property (retain, nonatomic) TSTTextEngineDelegate *tableNameTextEngineDelegate;
@property (retain, nonatomic) NSPointerArray *styleProviderStack;
@property (retain, nonatomic) NSPointerArray *fixedColumnWidthStack;
@property (nonatomic) TSTTableInfo *tableInfo;
@property (weak, nonatomic) TSKChangeNotifier *changeNotifier;
@property (nonatomic) unsigned int maxConcurrentTasks;
@property (nonatomic) unsigned int numCellsPerTask;
@property (nonatomic) int tableEnvironment;
@property (nonatomic) char dynamicRepResize;
@property (nonatomic) char dynamicRepResizeSessionInProgress;
@property (nonatomic) double dynamicWidthResize;
@property (nonatomic) double dynamicHeightResize;
@property (copy, nonatomic) TSDLayoutGeometry *dynamicSavedLayoutGeometry;
@property (readonly, nonatomic) double dynamicFooterHeight;
@property (retain, nonatomic) TSTMergeRangeSortedSet *mergeRangesForLayoutPass;
@property (nonatomic) char processHiddenRowsForExport;
@property (readonly, nonatomic) unsigned short numberOfColumns;
@property (readonly, nonatomic) unsigned int numberOfRows;
@property (nonatomic) char tableNameEnabled;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } cellRange;
@property (readonly, nonatomic) unsigned int numberOfNonHiddenFooterRows;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } categoryColumnsCellRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } entireHeaderColumnsCellRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } entireActualHeaderColumnsCellRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } entireHeaderRowsCellRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } entireFooterRowsCellRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } entireBodyRowsCellRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } entireBodyCellRange;
@property (readonly, nonatomic) NSIndexSet *visibleRowIndices;
@property (readonly, nonatomic) NSIndexSet *visibleColumnIndices;
@property (readonly, nonatomic) NSIndexSet *hiddenRowIndices;
@property (readonly, nonatomic) NSIndexSet *hiddenColumnIndices;
@property (readonly, nonatomic) char hasActiveFilters;
@property (readonly, nonatomic) id<TSWPStyleProviding> styleProvidingSource;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) unsigned int numberOfHeaderRows;
@property (readonly, nonatomic) unsigned int numberOfHeaderColumns;
@property (readonly, nonatomic) unsigned int numberOfGrandTotalColumns;
@property (readonly, nonatomic) unsigned int numberOfFooterRows;
@property (readonly, nonatomic) unsigned int numberOfFooterOrGrandTotalRows;

+ (double)effectiveTableNameHeightForTable:(id)a0;
+ (int)tableRowsBehaviorForTable:(id)a0 andEnvironment:(int)a1;

- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)validate;
- (char)isSummaryRow:(unsigned int)a0;
- (char)isCategorized;
- (double)tableNameHeight;
- (char)cell:(id *)a0 forCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1;
- (void)addChangeDescriptor:(id)a0;
- (void)addChangeDescriptorWithType:(int)a0 andCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1;
- (void)addChangeDescriptorWithType:(int)a0 andCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1 andStrokeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a2;
- (char)anyRowsUserHiddenInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)beginDynamicMode:(id)a0;
- (double)calculatedTableNameHeight;
- (double)calculatedTableNameHeightIncludingDynamicResize:(char)a0;
- (void)captureDynamicResizeInfo;
- (void)clearModelHeightWidthCacheForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })defaultPaddingForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })edgeInsetsFromPadding:(id)a0;
- (double)fontHeightOfParagraphStyle:(id)a0;
- (char)hasMergeRanges;
- (char)hintIsValid:(id)a0;
- (void)invalidateBandedFill;
- (void)invalidateDefaultFontHeights;
- (void)invalidateDynamicResizeInfo;
- (void)invalidateTableNameHeight;
- (char)isDynamicallyChangingColumnCount;
- (char)isDynamicallyChangingContent;
- (char)isDynamicallyChangingFontColorOfCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isDynamicallyChangingInfoGeometry;
- (char)isDynamicallyChangingRowCount;
- (char)isDynamicallyChangingRowOrColumnCount;
- (char)isDynamicallyChangingSelection;
- (char)isDynamicallyColumnTabResizing;
- (char)isDynamicallyHidingContentOfCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isDynamicallyHidingRowsCols;
- (char)isDynamicallyHidingRowsCols:(long long)a0 rowColIndex:(unsigned int)a1;
- (char)isDynamicallyHidingRowsColsCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isDynamicallyHidingTextOfCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isDynamicallyResizingTableName;
- (char)isDynamicallyRevealingRowsCols;
- (char)isDynamicallyRevealingRowsCols:(long long)a0 rowColIndex:(unsigned int)a1;
- (char)isDynamicallyRowTabResizing;
- (char)isDynamicallySettingBandedFill;
- (char)isRowUserHidden:(unsigned int)a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })layoutCellIDForModelCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (unsigned int)layoutRowForModelRow:(unsigned int)a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })modelCellIDForLayoutCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (unsigned int)modelRowForLayoutRow:(unsigned int)a0;
- (id)newLayoutHint;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })paddingForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (void)resetModelHeightWidthCache;
- (char)shouldRowUseBandedFill:(unsigned int)a0;
- (unsigned long long)tableAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (id)tableNameTextEngine;
- (struct CGSize { double x0; double x1; })tableNameTextSize;
- (void)updateDynamicFontColor:(id)a0 andRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1;
- (void)updateDynamicResizeInfo:(id)a0;
- (void)updateDynamicTableNameSize:(double)a0;
- (void)validateBandedFill;
- (id)validateCellForDrawing:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0 cell:(id)a1 contents:(id)a2 wrap:(char)a3 verticalAlignment:(int)a4 padding:(id)a5 layoutCacheFlags:(int)a6 pageNumber:(unsigned long long)a7 pageCount:(unsigned long long)a8;
- (void)validateChangeDescriptorQueue;
- (void)validateDefaultFontHeights;
- (void)validateDynamicResizeInfo;
- (char)validateLayoutHint:(id)a0;
- (void)validateRowVisibility:(id)a0;
- (id)indexesForSummaryRows;
- (char)isAPivotTable;
- (void)iterateCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 usingBlock:(id /* block */)a3;
- (unsigned long long)numberOfColumnLevels;
- (unsigned long long)numberOfRowLevels;
- (void)clearRenderingCaches;
- (void)setStyleProvidingSource:(id)a0;
- (void)endDynamicMode:(id)a0;
- (void)p_validationFittingCellRegionForRowsDeleted:(id)a0 cellRegionGatherer:(id)a1;
- (void)setDynamicCellBorder:(id)a0 forCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1;
- (void)updateCellRange;
- (double)contentHeightForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 skipDynamicSwap:(char)a1 maximumPartitionSize:(struct CGSize { double x0; double x1; })a2;
- (char)isCategoryColumnUneditableCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)adjustGridColumnForVisibility:(unsigned int *)a0 isLeft:(char)a1;
- (char)adjustGridRowForVisibility:(unsigned int *)a0 isTop:(char)a1;
- (char)anyHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (char)anyHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)cellIteratorWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2;
- (double)clampRowHeightAccountingForMaximumPartitionSize:(struct CGSize { double x0; double x1; })a0 rowIndex:(unsigned int)a1 rowHeight:(double)a2;
- (void)clearDynamicStrokesForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (char)containsAnyContentInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })contentSizeForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 skipDynamicSwap:(char)a1;
- (double)contentWidthForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 skipDynamicSwap:(char)a1;
- (double)contentWidthForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 validationBundle:(id)a1;
- (id)customStrokeProvider;
- (void)enqueueBootstrapChangeDescriptors;
- (void)enumerateMergedStrokesAndCapsForGridColumn:(unsigned int)a0 from:(unsigned int)a1 to:(unsigned int)a2 usingBlock:(id /* block */)a3;
- (void)enumerateMergedStrokesAndCapsForGridRow:(unsigned int)a0 from:(unsigned int)a1 to:(unsigned int)a2 usingBlock:(id /* block */)a3;
- (void)enumerateMergedStrokesForGridColumn:(unsigned int)a0 from:(unsigned int)a1 to:(unsigned int)a2 usingBlock:(id /* block */)a3;
- (void)enumerateMergedStrokesForGridRow:(unsigned int)a0 from:(unsigned int)a1 to:(unsigned int)a2 usingBlock:(id /* block */)a3;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })expandCellRangeToCoverMergedCells:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })expandCellRangeToVisibleNeighbors:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)expandCellRegionToCoverMergedCells:(id)a0;
- (void)finalizeLayoutPassWithRowsNeedingFittingInfo:(id)a0;
- (unsigned int)firstEmptyBodyRow;
- (double)fittingHeightOfRow:(unsigned int)a0;
- (id)fittingWidthsMapForColumns:(id)a0 includeStrokes:(char)a1;
- (id)fixedWidthProvider;
- (id)formattedDataParagraphStylePropertyMapForCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1;
- (unsigned char)groupLevelAtLabelRow:(unsigned int)a0;
- (unsigned char)groupLevelAtSummaryRow:(unsigned int)a0;
- (long long)groupingArrowStateAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)hasGroupingArrowAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)hasHiddenColumnAtIndex:(unsigned short)a0;
- (char)hasHiddenRowAtIndex:(unsigned int)a0;
- (char)hasRangeSpanningRowsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (char)hasStrokeSpillForLeftGridColumn:(unsigned int)a0 inRow:(unsigned int)a1;
- (double)heightOfRow:(unsigned int)a0 skipDynamicSwap:(char)a1 withStrokeHeights:(char)a2 returnZeroIfHidden:(char)a3 clampToPartitionSize:(char)a4 maximumPartitionSize:(struct CGSize { double x0; double x1; })a5 outIsFitting:(char *)a6;
- (double)heightOfRowIgnoringFitting:(unsigned int)a0 withStrokeHeights:(char)a1;
- (unsigned short)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnAfterColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned short)a0;
- (unsigned int)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowAfterRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowBeforeRowAtIndex:(unsigned int)a0;
- (id)indexesForCategoryColumns;
- (id)indexesForCategoryColumnsInRegion:(id)a0;
- (id)indexesForLabelRows;
- (id)indexesForLabelRowsInRegion:(id)a0;
- (id)indexesForLeadingRows;
- (id)indexesForSummaryAndLabelRows;
- (id)indexesForSummaryRowsInRegion:(id)a0;
- (id)initWithInfo:(id)a0 layoutEngineBundle:(id)a1;
- (void)invalidateStrokeDefaults;
- (void)invalidateStrokeSpills;
- (char)isCategoryColumn:(unsigned short)a0;
- (char)isCategoryGroupValueCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isCategoryGroupValueLabelCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isCategoryLabelCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isCategoryLastSummaryRowCollapsed;
- (char)isDynamicallyChangingCellFill;
- (char)isDynamicallyRemovingText;
- (char)isDynamicallyRemovingTextOfCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isDynamicallyRepressingFrozenHeaderColumns;
- (char)isDynamicallyRepressingFrozenHeaderRows;
- (char)isDynamicallyResizingCellIDForColumnRowAdd:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isDynamicallyResizingForColumnRowAdd:(long long)a0;
- (char)isDynamicallyResizingForColumnRowAdd:(long long)a0 rowColIndex:(unsigned int)a1;
- (char)isEntireCellRangeHidden:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (char)isGroupingRowCollapsed:(unsigned int)a0;
- (char)isLastVisibleBodyRowCategorySummaryOrLabelRow;
- (char)isPivotTrailingAligned:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isSummaryCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (char)isSummaryOrLabelRow:(unsigned int)a0;
- (void)iterateCellsAndTerminateWithIterator:(id)a0 usingBlock:(id /* block */)a1;
- (id)layoutCellRegionForModelCellRegion:(id)a0;
- (unsigned short)layoutColumnForModelColumn:(unsigned short)a0;
- (void)measureWithLayoutState:(id)a0;
- (id)mergeRangesProppingRowHeightsInRegion:(id)a0;
- (id)mergedStrokesForGridColumn:(unsigned int)a0;
- (id)mergedStrokesForGridRow:(unsigned int)a0;
- (id)mergesIntersectingCellRegion:(id)a0;
- (id)mergesIntersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)modelCellRegionForLayoutCellRegion:(id)a0;
- (unsigned short)modelColumnForLayoutColumn:(unsigned short)a0;
- (void)modifySafelyUsingBlock:(id /* block */)a0;
- (id)newTextEngineForCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1 textStyle:(id)a2;
- (id)newTextEngineForCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1 textStyle:(id)a2 naturalAlignment:(int)a3 cellDirection:(int)a4;
- (unsigned int)nonUserHiddenRowAfterAndIncludingRow:(unsigned int)a0;
- (unsigned int)numberOfCategoryLevels;
- (void)p_addFittingInfoForEmptyMergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)p_clearStrokesForMergesInCellRegion:(id)a0;
- (char)p_containsGradientFillThatFillsContainerInCell:(id)a0 cellContents:(id)a1;
- (char)p_containsGradientThatFillsContainerInStyle:(id)a0;
- (double)p_contentWidthForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 skipDynamicSwap:(char)a1 validationBundle:(id)a2;
- (void)p_invalidateClearedStrokesForCellRegion:(id)a0;
- (void)p_invalidateForStyleProviderChangeFromNotification:(id)a0;
- (void)p_invalidateForStyleProviderChangeWithBroadcast:(char)a0;
- (id)p_resolvedTextStyleForCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1 textStyle:(id)a2 outNaturalAlignment:(int *)a3 outCellDirection:(int *)a4;
- (void)p_setDefaultFontHeight:(double)a0 forTableStyleArea:(unsigned long long)a1;
- (void)p_setDynamicStroke:(id)a0 strokeOrder:(int)a1 forGridColumn:(unsigned int)a2 isLeft:(char)a3 beginRow:(unsigned int)a4 endRow:(unsigned int)a5;
- (void)p_setDynamicStroke:(id)a0 strokeOrder:(int)a1 forGridRow:(unsigned int)a2 isTop:(char)a3 beginColumn:(unsigned int)a4 endColumn:(unsigned int)a5;
- (id)p_strokesForGridColumn:(unsigned int)a0 isLeft:(char)a1 takeStrokeWriteLock:(char)a2;
- (id)p_strokesForGridRow:(unsigned int)a0 isTop:(char)a1 takeStrokeWriteLock:(char)a2;
- (id)p_strokesForValidationOfGridRow:(unsigned int)a0 isTop:(char)a1;
- (void)p_validateCellIDToWPColumnCacheForChangeDescriptors:(id)a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })p_validateFittingInfoForEmptyCellsBetween:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0 andCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1 inRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a2 widthHeightCollection:(id)a3;
- (void)p_validateFittingInfoForEmptyCellsOnSingleRowBetween:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0 andEndCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1 widthHeightCollection:(id)a2;
- (void)p_validateFittingInfoWithCellRangeWorker:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 widthHeightCollection:(id)a1 containsMerges:(char)a2 validationBundle:(id)a3;
- (void)p_validateStrokeWidthCachesForGridColumn:(unsigned int)a0;
- (void)p_validateStrokeWidthCachesForGridRow:(unsigned int)a0;
- (void)p_validateStrokeWidthCachesForRegion:(id)a0 invalidateStrokeDefaults:(char)a1;
- (void)p_validateStrokesForRegion:(id)a0;
- (id)p_validationBundleForRegionToValidate:(id)a0;
- (void)p_validationFittingCellRegionForColumnsDeleted:(id)a0 cellRegionGatherer:(id)a1;
- (void)p_validationFittingCellRegionForColumnsInserted:(id)a0 cellRegionGatherer:(id)a1;
- (void)p_validationFittingCellRegionForColumnsMovedFrom:(id)a0 toColumnIndex:(unsigned short)a1 cellRegionGatherer:(id)a2;
- (void)p_validationFittingCellRegionForColumnsVisibility:(id)a0 cellRegionGatherer:(id)a1;
- (void)p_validationFittingCellRegionForRangeMergeUnmerge:(id)a0 cellRegionGatherer:(id)a1;
- (void)p_validationFittingCellRegionForRowsInserted:(id)a0 cellRegionGatherer:(id)a1;
- (void)p_validationFittingCellRegionForRowsMovedFrom:(id)a0 toRowIndex:(unsigned int)a1 cellRegionGatherer:(id)a2;
- (void)p_validationFittingCellRegionForStrokesChanged:(id)a0 cellRegionGatherer:(id)a1;
- (void)p_validationFittingForChangeDescriptorType:(int)a0 regionFromChangeDescriptor:(id)a1 cellRegionGatherer:(id)a2;
- (void)popFromFixedColumnWidthStack;
- (void)popFromStyleProviderStack;
- (void)processLayoutTask:(id)a0 validationBundle:(id)a1;
- (void)pushToFixedColumnWidthStack:(void *)a0;
- (void)pushToStyleProviderStack:(id)a0;
- (void)queueCellForValidation:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 cell:(id)a1 textStyleHandle:(id)a2 modelMergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a3 wrap:(char)a4 verticalAlignment:(int)a5 padding:(id)a6 prop:(char)a7 layoutCacheFlags:(int)a8 validationBundle:(id)a9 layoutTask:(id)a10;
- (void)readSafelyUsingBlock:(id /* block */)a0;
- (void)setClearedStrokeForGridColumn:(unsigned int)a0 beginRow:(unsigned int)a1 endRow:(unsigned int)a2;
- (void)setClearedStrokeForGridRow:(unsigned int)a0 beginColumn:(unsigned int)a1 endColumn:(unsigned int)a2;
- (void)setStrokeSpillForRightGridColumn:(unsigned int)a0 leftGridColumn:(unsigned int)a1 inRow:(unsigned int)a2;
- (double)strokeHeightOfGridRow:(unsigned int)a0 atColumnIndex:(unsigned int)a1;
- (double)strokeHeightOfGridRow:(unsigned int)a0 beginColumn:(unsigned int)a1 endColumn:(unsigned int)a2;
- (double)strokeHeightOfGridRow:(unsigned int)a0 inColumnRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a1;
- (double)strokeWidthOfGridColumn:(unsigned int)a0 atRowIndex:(unsigned int)a1;
- (double)strokeWidthOfGridColumn:(unsigned int)a0 beginRow:(unsigned int)a1 endRow:(unsigned int)a2;
- (double)strokeWidthOfGridColumn:(unsigned int)a0 inRowRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a1;
- (void)strokesForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0 top:(id *)a1 left:(id *)a2 bottom:(id *)a3 right:(id *)a4;
- (double)tableNameHeightForStorage:(id)a0 withMaxWidth:(double)a1;
- (id)tableNameTextEngineWithTableNameStyle:(id)a0;
- (struct CGSize { double x0; double x1; })tableNameTextSizeForTableName:(id)a0 maxWidth:(double)a1 tableNameStyle:(id)a2;
- (id)tableStrokeProvider;
- (unsigned long long)tableStyleAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a0;
- (double)unwrappedFittingWidthsForColumnInCellRegionWorker:(id)a0;
- (id)unwrappedFittingWidthsForColumnsInCellRegion:(id)a0;
- (void)validateFittingInfoForCell:(id)a0 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a1 mergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a2 setFitting:(char)a3 layoutTask:(id)a4 widthHeightCollection:(id)a5 validationBundle:(id)a6 styleDefaultsCache:(id)a7;
- (id)validateFittingInfoForValidationRegion:(id)a0 rowsNeedingFittingInfo:(id)a1;
- (void)validateFittingInfoWithCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 validationBundle:(id)a1;
- (id)validateFittingRegionForChangeDescriptors:(id)a0;
- (void)validateLayoutEngineForChangeDescriptors:(id)a0;
- (void)validateStrokesArrays:(id)a0;
- (void)validateStrokesForChangeDescriptors:(id)a0;
- (void)validateTableNameEnabled;
- (void)validateTableNameHeight;
- (void)verifyStrokes;
- (void)waitForLayoutToComplete:(id)a0;
- (double)widthOfColumn:(unsigned short)a0 skipDynamicSwap:(char)a1 returnZeroIfHidden:(char)a2 outIsFitting:(char *)a3;

@end
