@class TSDCanvas, NSString, NSMutableSet, TSDLayout, TSUBezierPath, NSObject, TSWPLayoutManager, TSWPStorage, TSPObject, NSMutableArray;
@protocol TSWPFootnoteHeightMeasurer, TSWPOffscreenColumn, TSWPLayoutParent, TSWPTopicNumberHints, TSWPFootnoteMarkProvider, TSDHint;

@interface TSWPLayout : TSDLayout <TSKChangeSourceObserver, TSWPLayoutTarget, TSWPLayoutOwner, TSDWrapInvalidationParent, TSWPStyleProviding> {
    TSWPLayoutManager *_layoutManager;
    char _textLayoutValid;
    unsigned long long _lastLayoutMgrChangeCount;
    TSDLayout<TSWPLayoutParent> *_wpLayoutParent;
    NSMutableSet *_markedHiddenInlineDrawableLayouts;
}

@property (nonatomic) char isLayingOutIntoTarget;
@property (readonly, nonatomic) TSWPLayoutManager *layoutManager;
@property (readonly, nonatomic) char textLayoutValid;
@property (readonly, nonatomic) TSUBezierPath *interiorClippingPath;
@property (readonly, nonatomic) char shouldWrapAroundExternalDrawables;
@property (readonly, nonatomic) TSWPStorage *storage;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } containedTextRange;
@property (readonly, nonatomic) char isLinked;
@property (readonly, nonatomic) char isOverflowing;
@property (nonatomic) char useBlackTextColor;
@property (readonly, nonatomic) char textIsHidden;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } restrictedLayoutCharRange;
@property (readonly, nonatomic) Class inlineTableOfContentsLayoutClass;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSMutableArray *columns;
@property (readonly, nonatomic) id<TSWPOffscreenColumn> previousTargetLastColumn;
@property (readonly, nonatomic) id<TSWPOffscreenColumn> nextTargetFirstColumn;
@property (readonly, nonatomic) NSObject<TSWPTopicNumberHints> *nextTargetTopicNumberHints;
@property (readonly, nonatomic) id<TSWPFootnoteHeightMeasurer> footnoteHeightMeasurer;
@property (readonly, nonatomic) id<TSWPFootnoteMarkProvider> footnoteMarkProvider;
@property (readonly, nonatomic) TSPObject<TSDHint> *nextTargetFirstChildHint;
@property (readonly, nonatomic) char isInstructional;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } minSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } maxSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } currentSize;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } position;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } anchorPoint;
@property (readonly, nonatomic) unsigned long long autosizeFlags;
@property (readonly, nonatomic) int verticalAlignment;
@property (readonly, nonatomic) int naturalAlignment;
@property (readonly, nonatomic) int naturalDirection;
@property (readonly, nonatomic) char wantsLineFragments;
@property (readonly, nonatomic) char textIsVertical;
@property (readonly, nonatomic) char layoutIsValid;
@property (readonly, nonatomic) double maxAnchorInBlockDirection;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } maskRect;
@property (retain, nonatomic) NSMutableArray *anchoredDrawablesForRelayout;
@property (readonly, nonatomic) TSDCanvas *canvas;
@property (readonly, nonatomic) char shouldHyphenate;
@property (readonly, nonatomic) struct __CFLocale { } *hyphenationLocale;
@property (readonly, nonatomic) char shouldIgnoreAnchoredAttachments;
@property (readonly, nonatomic) char repShouldPreventCaret;
@property (readonly, nonatomic) char marginsAreMirrored;
@property (readonly, nonatomic) char alwaysIncludesSpaceBefore;
@property (readonly, nonatomic) char alwaysIncludesSpaceAfter;
@property (readonly, nonatomic) char adornParagraphsForPageView;
@property (readonly, nonatomic) unsigned long long pageNumber;
@property (readonly, nonatomic) unsigned long long pageCount;
@property (readonly, nonatomic) char supportsPageNumbers;
@property (readonly, nonatomic) char caresAboutStorageChanges;
@property (readonly, nonatomic) char layoutIsStatic;

- (void).cxx_destruct;
- (void)invalidate;
- (id)initWithInfo:(id)a0;
- (void)validate;
- (id)styleProvider;
- (void)parentDidChange;
- (struct CGPoint { double x0; double x1; })capturedInfoPositionForAttachment;
- (id)columnMetricsForCharIndex:(unsigned long long)a0 outRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)computeLayoutGeometry;
- (id)currentAnchoredDrawableLayouts;
- (id)currentInlineDrawableLayouts;
- (char)invalidateForPageCountChange;
- (void)invalidateSize;
- (void)invalidateTextLayout;
- (char)isLastTarget;
- (char)isLayoutOffscreen;
- (id)layoutForInlineDrawable:(id)a0;
- (id)p_wpLayoutParent;
- (Class)repClassOverride;
- (void)setNeedsDisplayInTargetRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (char)shouldDisplayGuides;
- (char)shouldProvideSizingGuides;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })targetRectForCanvasRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)textWrapper;
- (void)updateChildrenFromInfo;
- (id)validatedLayoutForAnchoredDrawable:(id)a0;
- (void)wrappableChildInvalidated:(id)a0;
- (id)reliedOnLayouts;
- (id)additionalDependenciesForChildLayout:(id)a0;
- (id)dependentLayouts;
- (id)initWithInfo:(id)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void *)initialLayoutState;
- (void)invalidateForFootnoteNumberingChange;
- (void)invalidateParentForAutosizing;
- (void)layoutManager:(id)a0 didClearDirtyRangeWithDelta:(long long)a1 afterCharIndex:(unsigned long long)a2;
- (void)layoutManagerNeedsLayout:(id)a0;
- (struct CGSize { double x0; double x1; })maximumFrameSizeForChild:(id)a0;
- (id)p_firstAncestorRespondingToSelector:(SEL)a0;
- (void)p_invalidateTextLayout;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_protectedRectWithinLayoutForSelectionRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)parentWillChangeTo:(id)a0;
- (char)shouldValidate;
- (id)textColorOverride;
- (void)willBeAddedToLayoutController:(id)a0;
- (void)willBeRemovedFromLayoutController:(id)a0;
- (char)descendersCannotClip;
- (id)styleProviderForCells;
- (id)styleProviderForTextLayout:(id)a0;
- (char)wantsToProvideStylesForTextLayout:(id)a0;
- (void)markHiddenInlineDrawableLayout:(id)a0;
- (char)selectionMustBeEntirelyOnscreenToCountAsVisibleInSelectionPath:(id)a0;
- (char)parentAutosizes;
- (id)addPartitionableAttachmentLayout:(id)a0;
- (void)beginResizeWrapInvalidationCluster;
- (char)childLayoutIsCurrentlyHiddenWhileManipulating:(id)a0;
- (void)clearHiddenInlineDrawableLayoutMarks;
- (id)containedPencilAnnotations;
- (char)containsStartOfPencilAnnotation:(id)a0;
- (char)containsStartOfRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)didLayoutChangingDirtyRanges;
- (void)didLayoutIntoTarget;
- (void)didLayoutWithLayoutManager:(id)a0;
- (void)endResizeWrapInvalidationCluster;
- (void)i_validateTextLayout;
- (id)interiorWrapSegments;
- (void)invalidateForcingFullReLayOut;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForPresentingAnnotationPopoverForSelectionPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForSelectionPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootOfAutoZoomContextOfSelectionPath:(id)a0;
- (char)shouldInvalidateSizeWhenInvalidateSizeOfReliedOnLayout:(id)a0;
- (double)textScaleForChild:(id)a0;
- (id)unscaledContentRectsToAvoidPencilAnnotationOverlap;
- (double)viewScaleForZoomingToSelectionPath:(id)a0 targetPointSize:(double)a1;
- (void)willLayoutIntoTarget;
- (void)invalidateForChangedPrintingSettings;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForSelectionAnchorRectOfSelectionPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForZoomingToSelectionPath:(id)a0;
- (void)i_setTextLayoutValid:(char)a0;
- (id)initWithInfo:(id)a0 storage:(id)a1 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (char)needsAdditionalOffsetBasedOnPartitioningOfParent;
- (struct CGPoint { double x0; double x1; })p_calculateReferencePointFromSelection:(id)a0;
- (void)p_clearOutLayoutManager;
- (struct CGSize { double x0; double x1; })p_maximumFrameSizeForChild:(id)a0;
- (struct CGSize { double x0; double x1; })p_maximumFrameSizeForChild:(id)a0 foundInColumn:(id *)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_rectForSelectionPath:(id)a0 useParagraphModeRects:(char)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_rectInRootForSelectionPath:(id)a0 useParagraphModeRects:(char)a1 forZoom:(char)a2 forAnchorRect:(char)a3;
- (char)p_shouldAssertDependenciesAreCorrect;
- (id)p_styleProvidingAncestor;
- (id)pageAnchorDetailsForPencilAnnotationAtSelectionPath:(id)a0 attachedType:(long long)a1;

@end
