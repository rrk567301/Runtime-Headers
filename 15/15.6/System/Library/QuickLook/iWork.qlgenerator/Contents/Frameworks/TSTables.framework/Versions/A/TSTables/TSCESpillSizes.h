@class TSCEDependencyTracker;

@interface TSCESpillSizes : NSObject {
    struct unordered_map<TSUCellCoord, TSUColumnRowSize, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, TSUColumnRowSize>>> { struct __hash_table<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>>, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>>, std::allocator<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUColumnRowSize>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>>> { float __value_; } __p3_; } __table_; } _spillSizeForCell;
    struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } _rectRepresentation; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>> { unsigned long long __value_; } __pair3_; } __tree_; } _rowsPerColumn; } _verticalSpills;
    struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; char _preserveRow; char _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } _rectRepresentation; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>> { unsigned long long __value_; } __pair3_; } __tree_; } _rowsPerColumn; } _horizontalSpills;
    struct TSCEBitGrid { struct vector<TSCEBitGridTile *, std::allocator<TSCEBitGridTile *>> { struct TSCEBitGridTile **__begin_; struct TSCEBitGridTile **__end_; struct __compressed_pair<TSCEBitGridTile **, std::allocator<TSCEBitGridTile *>> { struct TSCEBitGridTile **__value_; } __end_cap_; } _tiles; unsigned long long _count; unsigned long long _lastTileFoundAtIndex; } _spilledToCoords;
}

@property (readonly, nonatomic) char isEmpty;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } ownerUID;
@property (readonly, nonatomic) unsigned short internalOwnerID;
@property (nonatomic) TSCEDependencyTracker *dependencyTracker;
@property (readonly, nonatomic) unsigned long long count;
@property (readonly, nonatomic) char hasVerticalSpills;
@property (readonly, nonatomic) char hasHorizontalSpills;

- (id)description;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)encodeToArchive:(void *)a0;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>> { unsigned long long x0; } x2; } x0; } x1; })cellCoordsWithSpillSizes;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>> { unsigned long long x0; } x2; } x0; } x1; })cellCoordsWithSpillsInRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0;
- (void)clearSpillSizeForCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } *)a0;
- (void)clearSpillSizesInRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0;
- (char)hasSpillingCellsIntersectingRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0;
- (char)hasSpillsOverlappingRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0 outSpillRects:(void *)a1;
- (id)initWithDependTracker:(id)a0 ownerID:(unsigned short)a1;
- (void)readFromArchive:(const void *)a0;
- (void)replaceSpillSizeForCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } *)a0 spillSize:(struct { unsigned int x0; unsigned int x1; })a1;
- (struct { unsigned int x0; unsigned int x1; })spillSizeForCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } *)a0;
- (void)verifySpillSizesIndexes;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>> { unsigned long long x0; } x2; } x0; } x1; })verticalSpillCells;

@end
