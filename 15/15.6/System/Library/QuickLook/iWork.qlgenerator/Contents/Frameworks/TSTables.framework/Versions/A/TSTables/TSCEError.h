@class NSString, NSNumber, NSMutableDictionary;

@interface TSCEError : NSObject <NSCopying> {
    NSMutableDictionary *_errorDictionary;
}

@property (nonatomic) long long errorType;
@property (readonly, nonatomic) NSString *errorTypeKey;
@property (retain, nonatomic) NSString *functionName;
@property (retain, nonatomic) NSNumber *argIndex;
@property (retain, nonatomic) NSNumber *argIndex1;
@property (retain, nonatomic) NSNumber *argIndex2;
@property (retain, nonatomic) NSNumber *argIndex3;
@property (retain, nonatomic) NSString *extraInfoString;
@property (retain, nonatomic) NSNumber *extraInfoNumber;
@property (retain, nonatomic) NSNumber *dateAsTimeInterval;
@property (retain, nonatomic) NSNumber *lowerBound;
@property (retain, nonatomic) NSNumber *upperBound;
@property (nonatomic) char lowerBoundInclusive;
@property (nonatomic) char upperBoundInclusive;
@property (retain, nonatomic) NSString *valueToMatch;
@property (nonatomic) char afterMatch;
@property (retain, nonatomic) NSNumber *occurrence;
@property (retain, nonatomic) NSNumber *matchesFound;
@property (retain, nonatomic) NSString *previousMatch;
@property (nonatomic) char previousValueIsRegex;
@property (nonatomic) char argsAscending;
@property (nonatomic) char equalityPermitted;
@property (retain, nonatomic) NSString *problemExpressionString;
@property (retain, nonatomic) NSString *problemMode;
@property (nonatomic) char problemNodeIsCellReference;
@property (nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } ownerUID;
@property (nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } cellRangeOwnerUID;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } cellRange;
@property (nonatomic) struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } rangeRef;
@property (nonatomic) char attachmentErrorRaisedInTextCell;
@property (nonatomic) char invalidReferenceToMerge;
@property (nonatomic) char referenceEndCellInvalid;
@property (retain, nonatomic) NSString *unitName;
@property (retain, nonatomic) NSNumber *chooseIndex;
@property (retain, nonatomic) NSString *referenceList;
@property (retain, nonatomic) NSNumber *maxArgsAllowed;
@property (retain, nonatomic) NSNumber *providedArgs;
@property (nonatomic) struct { unsigned int x0; unsigned int x1; } spillRangeSize;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } spillRange;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } spillBlocker;

+ (id)notReadyError;
+ (id)loadFromArchive:(const void *)a0;
+ (id)attachmentError;
+ (id)errorForErrorType:(long long)a0 functionName:(id)a1;
+ (id)invalidFanoutExceedingInputSize;
+ (id)locationServicesNotEnabledError;
+ (id)not1DArrayError;
+ (id)spillFunctionDeleteFormulaError;
+ (id)emptyArrayError;
+ (id)missingRunningTotalInFieldError;
+ (id)percentRankInputOutOfRangeError;
+ (id)wrongSizeForMatrixMultiplyError;
+ (id)abortError;
+ (id)argumentEqualsToZeroErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)argumentErrorForFunctionName:(id)a0;
+ (id)argumentSetUsedOutOfContextError;
+ (id)arrayElementNoDataError;
+ (id)arrayTooLargeError:(id)a0;
+ (id)arrayValueNotNumberErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)attachmentErrorInTextCell:(char)a0;
+ (id)autoNumberAttachmentError;
+ (id)autoNumberAttachmentErrorInTextCell:(char)a0;
+ (id)cannotAcceptLambdaError:(id)a0 argIndex:(int)a1;
+ (id)charInputOutOfBoundsError;
+ (id)checkForTooLargeArrayNumColumns:(unsigned int)a0 numRows:(unsigned int)a1 functionName:(id)a2;
+ (id)checkForTooLargeMatrixNumColumns:(unsigned int)a0 numRows:(unsigned int)a1 functionName:(id)a2;
+ (id)circularReferenceError;
+ (id)comparisonTypeErrorForLeftType:(char)a0 rightType:(char)a1;
+ (id)contentBlockedSpillError:(struct { unsigned int x0; unsigned int x1; })a0 spillRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1 spillBlocker:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a2;
+ (id)convertOriginUnitMismatchError;
+ (id)currencyNotAllowedErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)dataInvalidDimensionsError;
+ (id)dataInvalidLengthError;
+ (id)dataInvalidWidthError;
+ (id)dateEarlierThanStartingDateErrorForFunctionName:(id)a0;
+ (id)delimiterValueNotProvided:(id)a0;
+ (id)differentDimensionsErrorForFunctionName:(id)a0;
+ (id)differentNumberOfDataPointsErrorForFunctionName:(id)a0;
+ (id)differentNumberOfElementsErrorForFunctionName:(id)a0;
+ (id)disallowedStockModeError:(id)a0;
+ (id)divideByZeroError;
+ (id)durationDisallowedForNormdistPDFError;
+ (id)durationNotAllowedError:(id)a0 argumentNumber:(int)a1;
+ (id)emptyArgumentError;
+ (id)emptyArgumentSpecificErrorForArgumentNumber:(int)a0;
+ (int)errorFlavorForErrorType:(long long)a0;
+ (id)errorForErrorType:(long long)a0;
+ (id)errorForErrorType:(long long)a0 functionName:(id)a1 argIndex:(int)a2;
+ (id)errorForInvalidReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 orString:(id)a1 contextEntityUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
+ (id)errorForInvalidReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 orString:(id)a1 contextEntityUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 invalidMergeReference:(char)a3 disqualifiedFromEndCell:(char)a4;
+ (char)errorForRichTextStorage:(id)a0 outValue:(id *)a1;
+ (id)errorKeyForErrorType:(long long)a0;
+ (long long)errorTypeForErrorKey:(id)a0;
+ (id)errorWithDictionary:(id)a0;
+ (id)evaluationRecursingTooDeepError:(id)a0;
+ (id)inconsistantParameterFormatError:(int)a0 argIndex2:(int)a1 functionName:(id)a2;
+ (id)indirectErrorForRangeReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 hostTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
+ (id)invalidAggregateColumnErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)invalidAltitudeError;
+ (id)invalidArgumentEqualityRelationshipErrorForFunctionName:(id)a0 argIndex1:(int)a1 argIndex2:(int)a2;
+ (id)invalidArgumentPairingsErrorForFunctionName:(id)a0 hasInitialUnrelatedArgument:(char)a1;
+ (id)invalidArgumentRelationshipErrorForFunctionName:(id)a0 argIndex1:(int)a1 argIndex2:(int)a2 argsAscending:(char)a3 equalityPermitted:(char)a4;
+ (id)invalidArgumentsErrorForFunctionName:(id)a0 argumentIndex:(int)a1;
+ (id)invalidArrayContentsError;
+ (id)invalidBaseCharacterErrorForCharacter:(unsigned short)a0 base:(short)a1;
+ (id)invalidComparisonError;
+ (id)invalidCurrencyComparisonError;
+ (id)invalidCurrencyPairError;
+ (id)invalidDateError;
+ (id)invalidDateManipulationError;
+ (id)invalidDecimalNumberErrorForArgument:(int)a0 argIndex2:(int)a1 argIndex3:(int)a2 functionName:(id)a3;
+ (id)invalidDecimalNumberErrorForArgument:(int)a0 argIndex2:(int)a1 functionName:(id)a2;
+ (id)invalidDecimalNumberErrorForArgument:(int)a0 functionName:(id)a1;
+ (id)invalidFrequencyErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)invalidGroupingColumnErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)invalidHeadingError;
+ (id)invalidHistoricalCurrencyAttributeError;
+ (id)invalidHistoricalDateError;
+ (id)invalidHistoricalStockAttributeError;
+ (id)invalidHyperlinkError;
+ (id)invalidIndexForChooseError:(int)a0;
+ (id)invalidIntersectionError:(struct vector<TSCEReferenceValue *, std::allocator<TSCEReferenceValue *>> { id *x0; id *x1; struct __compressed_pair<TSCEReferenceValue *__strong *, std::allocator<TSCEReferenceValue *>> { id *x0; } x2; })a0 hostTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 calcEngine:(id)a2;
+ (id)invalidLatitudeLongitudeError;
+ (id)invalidLiveCurrencyAttributeError;
+ (id)invalidLiveStockAttributeError;
+ (id)invalidMatchModeError;
+ (id)invalidMergeReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 contextEntityUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
+ (id)invalidProbabilityErrorForFunctionName:(id)a0;
+ (id)invalidRangeUsageErrorForReference:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
+ (id)invalidReferenceError;
+ (id)invalidReferenceNameAttributeError;
+ (id)invalidRegexError:(id)a0;
+ (id)invalidStockCodeError:(id)a0;
+ (id)invalidSubtotalFunctionNumberError;
+ (id)invalidTailErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)invalidTimeError;
+ (id)invalidTypeErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)invalidUnitStringError:(id)a0;
+ (id)linestHighlyCorrelatedVariableError;
+ (id)linestMatrixUnderdeterminedError;
+ (id)locationHeadingFailureError;
+ (id)locationHeadingUnknownError;
+ (id)locationNetworkError;
+ (id)locationUnknownError;
+ (id)locationUserDeniedError;
+ (id)matchNotFoundErrorForValue:(id)a0 isRegex:(char)a1 afterMatch:(char)a2 previousValueToMatch:(id)a3 previousValueIsRegex:(char)a4 occurrence:(int)a5 matchesFound:(int)a6 functionName:(id)a7;
+ (id)matchNotFoundErrorForValue:(id)a0 isRegex:(char)a1 functionName:(id)a2;
+ (id)matrixMustBeNumbersError;
+ (id)matrixNotSquareError;
+ (id)matrixNotSquareError:(id)a0 argIndex:(int)a1;
+ (id)matrixTooLargeError:(id)a0;
+ (id)mergeBlockedSpillError:(struct { unsigned int x0; unsigned int x1; })a0 spillRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1 spillBlocker:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a2;
+ (id)mismatchedCurrenciesErrorForFunctionName:(id)a0;
+ (id)mismatchedMaxUnitsError;
+ (id)mismatchedUnitsErrorForFunctionName:(id)a0;
+ (id)mismatchedUnitsErrorForFunctionName:(id)a0 argumentNumberString:(id)a1;
+ (id)missingPivotTableErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)mixedTypeManipulationErrorForFunctionName:(id)a0;
+ (id)multipleDurationsErrorForFunctionName:(id)a0;
+ (id)negativeArrayValueErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)negativeReceivedAmountError;
+ (id)nestedArrayResultSpillError;
+ (id)noConditionIsTrueErrorForFunctionName:(id)a0;
+ (id)noMatrixInverseError;
+ (id)noModeError;
+ (id)noSuitableArgumentsFoundErrorForFunctionName:(id)a0 requiredType:(char)a1;
+ (id)noTradingInformationErrorWithNextAvailableDate:(id)a0;
+ (id)nonEmptyStringRequiredErrorForFunctionName:(id)a0;
+ (id)nonMetricUnitPrefixErrorForUnitString:(id)a0;
+ (id)notAReferenceErrorForFunctionName:(id)a0;
+ (id)notAReferenceToAFormulaError;
+ (id)notEnoughInputsErrorForFunctionName:(id)a0 argumentNumber:(int)a1 required:(int)a2;
+ (id)numberDoesNotConvergeErrorForFunctionName:(id)a0;
+ (id)numberDoesNotConvergeWithEstimateErrorForFunctionName:(id)a0;
+ (id)numberError;
+ (id)numberErrorForFunctionName:(id)a0;
+ (id)numberMinusDateError;
+ (id)numberSmallerThanZeroError;
+ (id)onlyPositiveOrNegativeErrorForFunctionName:(id)a0;
+ (id)outOfArrayBoundsError:(id)a0;
+ (id)outOfBoundsArgumentErrorForArgument:(int)a0 functionName:(id)a1 lowerBound:(double)a2 lowerBoundInclusive:(char)a3;
+ (id)outOfBoundsArgumentErrorForArgument:(int)a0 functionName:(id)a1 lowerBound:(double)a2 lowerBoundInclusive:(char)a3 upperBound:(double)a4 upperBoundInclusive:(char)a5;
+ (id)outOfBoundsArgumentErrorForArgument:(int)a0 functionName:(id)a1 upperBound:(double)a2 upperBoundInclusive:(char)a3;
+ (id)padWithValuesNotProvided:(id)a0;
+ (id)percentRankExcInputOutOfRangeError;
+ (id)positionLargerThanArrayErrorForFunctionName:(id)a0;
+ (long long)possibleErrorTypeForErrorFlavor:(int)a0;
+ (id)rangeDoesNotSumToOneForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)rangeSizeMismatchErrorForFunctionName:(id)a0;
+ (id)referenceToEmptyCellErrorForFunctionName:(id)a0 rangeReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a1;
+ (id)referenceToNonexistentTableError:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
+ (id)remoteDataServerError;
+ (id)remoteDataUnavailableErrorWithAttribute:(id)a0;
+ (id)repeatedIdentifierError:(id)a0;
+ (id)requiredArgumentMissingError;
+ (id)requiresIdentifierError:(id)a0 argIndex:(int)a1;
+ (id)requiresLambdaArgumentError:(id)a0 argIndex:(int)a1;
+ (id)requiresOneDimArrayInputError:(id)a0 argumentNumber:(int)a1;
+ (id)signsMustMatchErrorForFunctionName:(id)a0;
+ (id)sizeMismatchInputError:(id)a0;
+ (id)spillFunctionPreserveContentError;
+ (id)startNumberExceedsStringLengthErrorForFunctionName:(id)a0;
+ (id)stringDoesNotRepresentDateErrorForFunctionName:(id)a0 string:(id)a1;
+ (id)stringDoesNotRepresentNumberErrorForFunctionName:(id)a0 string:(id)a1;
+ (id)stringTooLongError;
+ (id)sumMixedDurationsAndUnitlessWithoutADateErrorForFunctionName:(id)a0;
+ (id)syntaxError;
+ (id)syntaxLeadingEqualError;
+ (id)tableSizeBlockedSpillError:(struct { unsigned int x0; unsigned int x1; })a0 spillRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1;
+ (id)tooFewDataPointsErrorForFunctionName:(id)a0;
+ (id)tooManyArguments:(id)a0 maximum:(unsigned long long)a1 provided:(unsigned long long)a2;
+ (id)tooManyVariablesError;
+ (id)topLevelLambdaResultError;
+ (id)typeErrorForValue:(id)a0 context:(id)a1 functionSpec:(id)a2 argumentIndex:(int)a3;
+ (id)unacceptableIdentifierError:(id)a0;
+ (id)unboundVariableError:(id)a0 variableName:(id)a1;
+ (id)unionInsideIntersectionError;
+ (id)unitsNotAllowedErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)unknownFunctionError:(id)a0;
+ (id)unsupportedFeatureError;
+ (id)unsupportedFunctionError;
+ (id)unsupportedR1C1StyleError;
+ (id)valueNotAvailableErrorForFunctionName:(id)a0;
+ (id)verticalSpillInCategoriesError;
+ (id)wrongArityForLambdaError:(id)a0 providedArity:(int)a1 expectedArity:(int)a2;
+ (id)wrongNumberOfArgumentsErrorForFunctionName:(id)a0 provided:(unsigned long long)a1;
+ (id)zeroToPowerOfZeroError;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (unsigned long long)hash;
- (char)isEqual:(id)a0;
- (double)doubleValue;
- (void).cxx_destruct;
- (char)boolForKey:(id)a0;
- (id)stringValue;
- (id)numberForKey:(id)a0;
- (id)stringForKey:(id)a0;
- (void)setBool:(char)a0 forKey:(id)a1;
- (id)dateValue;
- (void)setString:(id)a0 forKey:(id)a1;
- (void)setNumber:(id)a0 forKey:(id)a1;
- (void)saveToArchive:(void *)a0;
- (void)raiseException;
- (id)initWithErrorType:(long long)a0;
- (id)errorDictionary;
- (char)nativeType;
- (char)isNotReadyError;
- (id)bakedString;
- (char)deepType;
- (id)displayStringWithCalculationEngine:(id)a0 forTable:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a1 andCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; char x2; char x3; })a2;
- (id)displayStringWithLocale:(id)a0;
- (char)isAbortedError;
- (char)isCircularReferenceError;
- (char)isErrorReferenceError;
- (char)isInvalidMergeReference;
- (char)isInvalidRangeUsageError;
- (char)isInvalidReferenceError;
- (char)isMismatchedUnitsError;
- (char)isNativelyEqual:(id)a0;
- (char)isSpillFunctionError;
- (char)isSyntaxError;
- (char)isUnsupportedFeatureError;
- (char)isUnsupportedFunctionError;

@end
