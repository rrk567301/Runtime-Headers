@class NSArray, TSUBezierPath, TSDInfoGeometry, NSSet, NSMutableSet, NSObject, TSDStroke, TSDLayoutGeometry;
@protocol TSDInfo;

@interface TSDLayout : TSDAbstractLayout <TSDWrappableParent> {
    struct CGPoint { double x; double y; } mBaseAlignmentFrameOriginForFixingInterimPosition;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mDirtyRect;
    char mInvalidatingSize;
    struct { unsigned char genericInvalidated : 1; unsigned char sizeInvalidated : 1; } mAlreadyInvalidatedFlags;
    struct { unsigned char position : 1; unsigned char size : 1; } mInvalidFlags;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mInitialBoundsForStandardKnobs;
    struct CGPoint { double x; double y; } mCapturedInfoGeometryPositionForAttached;
}

@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } commentPoleUnscaledOffset;
@property (readonly, nonatomic) TSUBezierPath *i_wrapPath;
@property (readonly, nonatomic) TSUBezierPath *i_wrapPathIncludingTitleAndCaption;
@property (readonly, nonatomic) char i_anyAncestorCurrentlyBeingRotatedWantsNormalLayoutDuringDynamicRotation;
@property (readonly, nonatomic) NSObject<TSDInfo> *info;
@property (copy, nonatomic) TSDLayoutGeometry *dynamicGeometry;
@property (readonly, nonatomic) TSDLayoutGeometry *originalGeometry;
@property (readonly, nonatomic) int layoutState;
@property (readonly, nonatomic) NSMutableSet *connectedLayouts;
@property (nonatomic) struct CGSize { double width; double height; } maximumInlineFrameSize;
@property (readonly, nonatomic) char shouldValidate;
@property (readonly, nonatomic) struct CGPoint { double x; double y; } minimumPositionOffset;
@property (readonly, nonatomic) char invalidGeometry;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frameForPartitioning;
@property (readonly, nonatomic) Class repClassOverride;
@property (readonly, nonatomic) char shouldBeDisplayedInShowMode;
@property (readonly, nonatomic) char isInGroup;
@property (readonly, nonatomic) char isInTopLevelContainerForEditing;
@property (readonly, nonatomic) char supportsParentFlipping;
@property (readonly, nonatomic) char shouldShowCaption;
@property (readonly, nonatomic) TSDStroke *stroke;
@property (readonly, nonatomic) char isStrokeBeingManipulated;
@property (readonly, nonatomic) char shouldProvideGuidesDuringExclusiveAlignmentOperation;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } originalTransformInRoot;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } originalTransformForProvidingGuides;
@property (readonly, nonatomic) TSDLayoutGeometry *originalPureGeometry;
@property (readonly, nonatomic) TSDLayoutGeometry *pureGeometry;
@property (readonly, nonatomic) TSDLayoutGeometry *pureGeometryInRoot;
@property (readonly, nonatomic) TSDLayoutGeometry *pureGeometryInParent;
@property (readonly, nonatomic) TSDLayoutGeometry *inspectorGeometry;
@property (readonly, nonatomic) double inspectorGeometryAngleInDegrees;
@property (readonly, nonatomic) char canInspectGeometry;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } pureTransformInRoot;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } originalPureTransformInRoot;
@property (readonly, nonatomic) char isBeingTransformed;
@property (readonly, nonatomic) char wantsNormalLayoutDuringDynamicRotation;
@property (readonly, nonatomic) char canAspectRatioLockBeChangedByUser;
@property (readonly, nonatomic) char resizeMayChangeAspectRatio;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } minimumSize;
@property (readonly, nonatomic) char isDynamicallyChangingAvailableSpaceForContainedChild;
@property (readonly, nonatomic) TSDInfoGeometry *finalInfoGeometryForResize;
@property (readonly, nonatomic) char isBeingManipulated;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } initialBoundsForStandardKnobs;
@property (readonly, nonatomic) TSDInfoGeometry *initialInfoGeometry;
@property (readonly, nonatomic) char parentAutosizes;
@property (readonly, nonatomic) double descentForInlineLayout;
@property (readonly, nonatomic) NSObject *dynamicOverride;
@property (readonly, nonatomic, getter=isSelectable) char selectable;
@property (readonly, nonatomic, getter=isDraggable) char draggable;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } boundsForStandardKnobs;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frameForCaptionPositioning;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } centerForRotation;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } centerForConnecting;
@property (readonly, nonatomic) NSArray *dependentLayouts;
@property (readonly, nonatomic) NSArray *bidirectionalSizeDependentLayouts;
@property (readonly, nonatomic) NSSet *reliedOnLayouts;
@property (readonly, nonatomic) NSArray *additionalLayoutsForRepCreation;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentFrameForCaptionEdgeInsetsCalculation;
@property (readonly, nonatomic) TSUBezierPath *pathForClippingConnectionLines;

- (void).cxx_destruct;
- (void)invalidate;
- (id)initWithInfo:(id)a0;
- (void)insertChild:(id)a0 atIndex:(unsigned long long)a1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)validate;
- (void)setParent:(id)a0;
- (void)setGeometry:(id)a0;
- (void)endRotate;
- (void)dragBy:(struct CGPoint { double x0; double x1; })a0;
- (void)invalidateChildren;
- (id)rootLayout;
- (void)parentDidChange;
- (void)invalidateFrame;
- (char)allowsConnections;
- (struct CGPoint { double x0; double x1; })capturedInfoPositionForAttachment;
- (id)computeLayoutGeometry;
- (struct CGPoint { double x0; double x1; })convertNaturalPointFromUnscaledCanvas:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertNaturalRectFromUnscaledCanvas:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertNaturalRectToUnscaledCanvas:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)descendentWrappables;
- (void)invalidateExteriorWrap;
- (void)invalidatePosition;
- (void)invalidateSize;
- (id)layoutController;
- (id)layoutGeometryFromInfo;
- (void)processChangedProperty:(int)a0;
- (void)updateChildrenFromInfo;
- (void)dragByUnscaled:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })i_takeDirtyRect;
- (void)p_registerWithLayoutController:(id)a0;
- (void)processChanges:(id)a0;
- (void)validateFromLastInterimPosition;
- (id)computeInfoGeometryDuringResize;
- (void)endDrag;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForCulling;
- (void)p_invalidateDescendentWrapPaths;
- (void)addConnectedLayout:(id)a0;
- (id)additionalDependenciesForChildLayout:(id)a0;
- (struct CGPoint { double x0; double x1; })alignmentFrameOriginForFixingInterimPosition;
- (void)beginDrag;
- (void)beginDynamicOperation;
- (void)beginResize;
- (void)beginRotate;
- (struct CGPoint { double x0; double x1; })calculatePointFromSearchReference:(id)a0;
- (struct CGPoint { double x0; double x1; })convertNaturalPointToUnscaledCanvas:(struct CGPoint { double x0; double x1; })a0;
- (void)dynamicStrokeWidthChangeDidBegin;
- (void)dynamicStrokeWidthChangeDidEnd;
- (void)dynamicStrokeWidthUpdateToValue:(double)a0;
- (void)endDynamicOperation;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })layoutTransformInInfoSpace:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (struct CGSize { double x0; double x1; })maximumFrameSizeForChild:(id)a0;
- (char)orderedBefore:(id)a0;
- (void)p_invalidateConnectedLayouts;
- (void)p_recursiveInvalidate;
- (void)p_unregisterWithLayoutController:(id)a0;
- (void)parentWillChangeTo:(id)a0;
- (void)pauseDynamicTransformation;
- (void)removeConnectedLayout:(id)a0;
- (void)takeRotationFromTracker:(id)a0;
- (void)unregisterFromLayoutController;
- (void)willBeAddedToLayoutController:(id)a0;
- (void)willBeRemovedFromLayoutController:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })baseFrameForFrameForCullingWithAdditionalTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (double)scaleForInlineClampingUnrotatedSize:(struct CGSize { double x0; double x1; })a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (id)wrapInvalidationParent;
- (char)selectionMustBeEntirelyOnscreenToCountAsVisibleInSelectionPath:(id)a0;
- (char)allowIntersectionOfChildLayout:(id)a0;
- (struct CGPoint { double x0; double x1; })activityLineUnscaledEndPointForSearchReference:(id)a0;
- (char)childLayoutIsCurrentlyHiddenWhileManipulating:(id)a0;
- (id)containedPencilAnnotations;
- (char)containsStartOfPencilAnnotation:(id)a0;
- (char)descendentWrappablesContainsWrappable:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForPresentingAnnotationPopoverForSelectionPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForSelectionPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootOfAutoZoomContextOfSelectionPath:(id)a0;
- (void)recursivelyAddLayoutAndChildrenToSet:(id)a0;
- (char)shouldInvalidateSizeWhenInvalidateSizeOfReliedOnLayout:(id)a0;
- (id)unscaledCommentFlagAnchorInfoForSearchReference:(id)a0;
- (id)unscaledContentRectsToAvoidPencilAnnotationOverlap;
- (double)viewScaleForZoomingToSelectionPath:(id)a0 targetPointSize:(double)a1;
- (id)childInfosForChildLayouts;
- (id)childrenForPencilAnnotations;
- (id)computeInfoGeometryFromPureLayoutGeometry:(id)a0;
- (void)endResize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForCalculatingActivityLineEndpoint;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForCullingWithBaseFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 additionalTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (void)takeSizeFromTracker:(id)a0;
- (void)calculateAndSetPointsToSearchReference:(id)a0;
- (char)canvasShouldScrollForSelectionPath:(id)a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })captionEdgeInsets;
- (id)containedPencilAnnotationsIncludingChildren:(char)a0;
- (void)dynamicOverrideDidChange;
- (id)i_captionAndTitleLayouts;
- (void)i_clearInvalidationCache;
- (void)i_counterScrollingChildLayoutsDidChange;
- (void)i_didValidateLayout;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })i_frameForCullingWithAdditionalTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (void)i_recursivelyClearInvalidationCache;
- (void)i_willValidateLayout;
- (void)invalidateForChangedPrintingSettings;
- (void)invalidateInlineAndDepedentsForInlineFrameResize;
- (void)invalidateTextScalePercent;
- (id)layoutForSelectionPath:(id)a0;
- (struct CGSize { double x0; double x1; })minimumSizeForResizingKnob:(id)a0;
- (id)originPinnedCounterScrollingChildLayouts;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })p_additionalTransformForInlineRoot;
- (void)p_calculateClampModelValuesWithAdditionalTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 andPerformBlock:(id /* block */)a1;
- (void)p_invalidateDescendentWrapPathsInRoot;
- (struct CGSize { double x0; double x1; })p_newMaxInlineFrameSize;
- (void)p_updateDescendentWrapPathsWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (double)percentOfUnscaledRectContainedInParentRep:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForSelectionAnchorRectOfSelectionPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForZoomingToSelectionPath:(id)a0;
- (void)resizeWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (char)shouldUseCaptionEdgeInsetsInInterimPosition;
- (void)transferLayoutGeometryToInfo:(id)a0 withAdditionalTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 assertIfInDocument:(char)a2;
- (struct CGPoint { double x0; double x1; })unscaledCommentPoleOrigin;
- (void)updateLayoutGeometryInPreparationForPartitioning;
- (void)updateMaximumInlineFrameSize;

@end
