@class TSWPStorage, NSDate, TSTImportWarningSet, NSObject, TSDCommentStorage, TSTCellStyle, TSCEFormulaObject, NSString, TSTCellSpec, TSWPParagraphStyle, TSKFormat, TSDFill, TSTConditionalStyleSet, TSTCellBorder, TSULocale;

@interface TSTCell_PreBNC : NSObject <NSCopying> {
    double _valueDouble;
    unsigned int _valueID;
    NSObject *_valueObject;
}

@property (nonatomic) unsigned int stringID;
@property (nonatomic) unsigned int formulaSyntaxErrorID;
@property (nonatomic) unsigned int richTextID;
@property (nonatomic) unsigned int cellStyleID;
@property (nonatomic) unsigned int textStyleID;
@property (nonatomic) unsigned int conditionalStyleID;
@property (nonatomic) unsigned int formulaID;
@property (nonatomic) unsigned int currentFormatID;
@property (nonatomic) unsigned int numberFormatID;
@property (nonatomic) unsigned int currencyFormatID;
@property (nonatomic) unsigned int dateFormatID;
@property (nonatomic) unsigned int durationFormatID;
@property (nonatomic) unsigned int customFormatID;
@property (nonatomic) unsigned int baseFormatID;
@property (nonatomic) unsigned int commentStorageID;
@property (nonatomic) unsigned int importWarningSetID;
@property (nonatomic) unsigned int controlFormatID;
@property (nonatomic) unsigned int multipleChoiceListFormatID;
@property (readonly, nonatomic) TSKFormat *controlFormat;
@property (readonly, nonatomic) TSKFormat *multipleChoiceListFormat;
@property (readonly, nonatomic) char isEmptyForDataStore;
@property (readonly, nonatomic) char isEmpty;
@property (nonatomic) unsigned char valueType;
@property (nonatomic) double doubleValue;
@property (nonatomic) char boolValue;
@property (nonatomic) double durationTimeIntervalValue;
@property (retain, nonatomic) NSDate *dateValue;
@property (retain, nonatomic) NSString *stringValue;
@property (retain, nonatomic) TSWPStorage *formulaSyntaxError;
@property (retain, nonatomic) TSWPStorage *richTextValue;
@property (readonly, nonatomic) char hasFormulaSyntaxError;
@property (readonly, nonatomic) char hasRichText;
@property (readonly, nonatomic) NSString *formulaSyntaxErrorString;
@property (readonly, nonatomic) NSString *formattedValue;
@property (readonly, nonatomic) NSString *stringForEditing;
@property (readonly, nonatomic) NSString *stringForUnderlyingValue;
@property (readonly, nonatomic) TSWPStorage *richTextStorageForLayout;
@property (readonly, nonatomic) char valueIsText;
@property (readonly, nonatomic) char valueIsStringOrNumber;
@property (readonly, nonatomic) char valueIsNumberOrTime;
@property (readonly, nonatomic) char hasValueOrError;
@property (readonly, nonatomic) char dataIsReplaceable;
@property (retain, nonatomic) TSTCellStyle *cellStyle;
@property (retain, nonatomic) TSWPParagraphStyle *textStyle;
@property (retain, nonatomic) TSTConditionalStyleSet *conditionalStyle;
@property (nonatomic) unsigned char conditionalStyleAppliedRule;
@property (retain, nonatomic) TSTCellBorder *cellBorder;
@property (readonly, nonatomic) char hasCellStyle;
@property (readonly, nonatomic) char hasTextStyle;
@property (readonly, nonatomic) char hasConditionalStyle;
@property (readonly, nonatomic) TSWPParagraphStyle *effectiveTextStyle;
@property (readonly, nonatomic) int writingDirection;
@property (readonly, nonatomic) TSDFill *cellFill;
@property (readonly, nonatomic) unsigned int interactionType;
@property (retain, nonatomic) TSTCellSpec *cellSpec;
@property (retain, nonatomic) TSCEFormulaObject *formula;
@property (readonly, nonatomic) char hasCellSpec;
@property (readonly, nonatomic) char hasFormula;
@property (readonly, nonatomic) TSTCellSpec *cellSpecForDiff;
@property (readonly, nonatomic) char hasFormulaAnyError;
@property (readonly, nonatomic) char hasFormulaEvaluationError;
@property (readonly, nonatomic) char hasControl;
@property (nonatomic) unsigned short explicitFormatFlags;
@property (readonly, nonatomic) unsigned int formatType;
@property (readonly, nonatomic) TSKFormat *currentFormat;
@property (readonly, nonatomic) TSKFormat *numberFormat;
@property (readonly, nonatomic) TSKFormat *currencyFormat;
@property (readonly, nonatomic) TSKFormat *dateFormat;
@property (readonly, nonatomic) TSKFormat *durationFormat;
@property (readonly, nonatomic) TSKFormat *customFormat;
@property (readonly, nonatomic) TSKFormat *baseFormat;
@property (readonly, nonatomic) char hasCurrentFormat;
@property (readonly, nonatomic) char currentFormatIsExplicit;
@property (readonly, nonatomic) NSString *customFormatString;
@property (readonly, nonatomic) char currentFormatUsesAccountingStyle;
@property (readonly, nonatomic) unsigned char currentFormatNegativeStyle;
@property (readonly, nonatomic) char hasAnyFormats;
@property (readonly, nonatomic) char isMostRecentlyExplicitPercent;
@property (readonly, nonatomic) char hasMismatchedFormatAndValue;
@property (nonatomic) unsigned short cellFlags;
@property (readonly, nonatomic) TSULocale *locale;
@property (retain, nonatomic) TSDCommentStorage *commentStorage;
@property (retain, nonatomic) TSTImportWarningSet *importWarningSet;
@property (readonly, nonatomic) char hasCommentStorage;
@property (readonly, nonatomic) char hasImportWarningSet;

+ (char)formatType:(unsigned int)a0 sharesASpareSlotWithFormatType:(unsigned int)a1;
+ (char)hasASlotForFormatType:(unsigned int)a0;
+ (char)mismatchBetweenValueType:(unsigned char)a0 andFormatType:(unsigned int)a1;
+ (char)p_TSTCellFormatIsANumberFormatTypeForMostRecentlySet:(unsigned int)a0;
+ (id)stringForCellValueType:(unsigned char)a0;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (void).cxx_destruct;
- (id)initWithLocale:(id)a0;
- (void)clear;
- (void)clearValue;
- (void)inflateFromStorageRef:(struct { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned short x5 : 16; unsigned short x6 : 16; } x0; unsigned char x1[0]; } *)a0 dataStore:(id)a1;
- (id)initWithStorageRef:(struct { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned short x5 : 16; unsigned short x6 : 16; } x0; unsigned char x1[0]; } *)a0 dataStore:(id)a1;
- (char)hasExplicitFormatOfType:(unsigned int)a0 allowMismatchedSpare:(char)a1;
- (void)setCurrentFormat:(id)a0 isExplicit:(char)a1;
- (int)p_mostRecentlySetTextFormatType;
- (void)setConditionalStyle:(id)a0 clearingID:(char)a1;
- (void)setFormat:(id)a0 shouldSetExplFlags:(char)a1 isExplicit:(char)a2 makeCurrent:(char)a3 clearingID:(char)a4;
- (void)clearAllFormats;
- (int)p_mostRecentlySetDateFormatType;
- (void)setImportWarningSet:(id)a0 clearingID:(char)a1;
- (void)applyPopupChoiceIndex:(unsigned long long)a0;
- (void)bakeFormulaToValue;
- (id)cellFillComparedToDefault:(id)a0 suppressCS:(char)a1 isDefault:(char *)a2;
- (id)cellValueDescription;
- (id)cellValueTypeDescription;
- (void)clearDataListIDs;
- (char)clearNoncurrentImplicitFormats;
- (void)clearSpareFormatOfType:(unsigned int)a0;
- (void)clearStrokes;
- (void)copyAllFormatsToCell:(id)a0;
- (void)copyJustStrokesToCell:(id)a0;
- (void)copyJustStyleAndStrokesToCell:(id)a0;
- (void)copyToCell:(id)a0;
- (char)hasEqualContentToCell:(id)a0;
- (char)hasEqualContentToCell:(id)a0 usingRichTextObjectComparisonBlock:(id /* block */)a1;
- (char)hasEqualValueToCell:(id)a0;
- (char)hasFormatOfType:(unsigned int)a0 allowMismatchedSpare:(char)a1;
- (void)inflateFromStorageRef:(struct { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned short x5 : 16; unsigned short x6 : 16; } x0; unsigned char x1[0]; } *)a0 dataStore:(id)a1 suppressingTransmutation:(char)a2;
- (void)p_TSTCellSetMostRecentlySetDateFormat:(int)a0;
- (void)p_TSTCellSetMostRecentlySetNumberFormat:(int)a0;
- (void)p_TSTCellSetMostRecentlySetTextFormat:(int)a0;
- (char)p_currentFormatIsEqualToOtherCellFormat:(id)a0;
- (int)p_mostRecentlySetNumberFormatType;
- (void)p_setFormatExplicit:(char)a0 fromFormatType:(unsigned int)a1 setMostRecentlySet:(char)a2;
- (void)p_setFormatFlags:(unsigned short)a0 explicit:(char)a1;
- (void)p_setFormatForFormulaResult:(id)a0 propagation:(char)a1;
- (id)p_spareFormatOfType:(unsigned int)a0 allowMismatchedSpare:(char)a1 explicitOnly:(char)a2;
- (void)setCellSpec:(id)a0 clearingID:(char)a1;
- (void)setCellSpecRepairingFormats:(id)a0;
- (void)setCellStyle:(id)a0 clearingID:(char)a1;
- (void)setCommentStorage:(id)a0 clearingID:(char)a1;
- (void)setCurrentFormat:(id)a0 flags:(unsigned short)a1;
- (void)setDefaultFormatForValue;
- (void)setFormula:(id)a0 clearingID:(char)a1;
- (void)setFormulaSyntaxError:(id)a0 clearingID:(char)a1;
- (void)setRichTextValue:(id)a0 clearingID:(char)a1 convertToPlaintextIfPossible:(char)a2;
- (void)setRichTextValueWithoutPlaintextCollapse:(id)a0;
- (void)setSpareFormat:(id)a0 isExplicit:(char)a1;
- (void)setStringValue:(id)a0 clearingID:(char)a1;
- (void)setStringValue:(id)a0 clearingID:(char)a1 shouldWrap:(char)a2;
- (void)setTextStyle:(id)a0 clearingID:(char)a1;
- (id)spareFormatOfType:(unsigned int)a0 allowMismatchedSpare:(char)a1;
- (void)updateCustomFormatFromPaste:(id)a0;
- (id)upgradedBraveNewCell;

@end
