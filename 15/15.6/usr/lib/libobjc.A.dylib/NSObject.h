@class NSArray, NSDictionary, NSString, NSClassDescription;

@interface NSObject <CAAnimatableValue, CARenderValue, NSObject> {
    Class isa;
}

@property (class, readonly) char accessInstanceVariablesDirectly;

@property (readonly, copy) NSClassDescription *classDescription;
@property (readonly, copy) NSArray *attributeKeys;
@property (readonly, copy) NSArray *toOneRelationshipKeys;
@property (readonly, copy) NSArray *toManyRelationshipKeys;
@property void *observationInfo;
@property (readonly) Class classForKeyedArchiver;
@property (readonly, retain) id autoContentAccessingProxy;
@property (copy) NSDictionary *scriptingProperties;
@property (readonly) unsigned int classCode;
@property (readonly, copy) NSString *className;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)dealloc;
+ (id)description;
+ (void)doesNotRecognizeSelector:(SEL)a0;
+ (id)init;
+ (id)instanceMethodSignatureForSelector:(SEL)a0;
+ (void)load;
+ (id)methodSignatureForSelector:(SEL)a0;
+ (id)__allocWithZone_OA:(struct _NSZone { } *)a0;
+ (id)_copyDescription;
+ (id)__old_unswizzled_keyPathsForValuesAffectingValueForKey:(id)a0;
+ (char)__old_unswizzled_automaticallyNotifiesObserversForKey:(id)a0;
+ (char)useStoredAccessor;
+ (const char *)_localClassNameForClass;
+ (struct objc_method_description { SEL x0; char *x1; } *)instanceMethodDescriptionForSelector:(SEL)a0;
+ (struct objc_method_description { SEL x0; char *x1; } *)methodDescriptionForSelector:(SEL)a0;
+ (id)_createMutableArrayValueGetterWithContainerClassID:(id)a0 key:(id)a1;
+ (id)_createMutableOrderedSetValueGetterWithContainerClassID:(id)a0 key:(id)a1;
+ (id)_createMutableSetValueGetterWithContainerClassID:(id)a0 key:(id)a1;
+ (id)_createOtherValueGetterWithContainerClassID:(id)a0 key:(id)a1;
+ (id)_createOtherValueSetterWithContainerClassID:(id)a0 key:(id)a1;
+ (id)_createValueGetterWithContainerClassID:(id)a0 key:(id)a1;
+ (id)_createValuePrimitiveGetterWithContainerClassID:(id)a0 key:(id)a1;
+ (id)_createValuePrimitiveSetterWithContainerClassID:(id)a0 key:(id)a1;
+ (id)_createValueSetterWithContainerClassID:(id)a0 key:(id)a1;
+ (char)automaticallyNotifiesObserversForKey:(id)a0;
+ (id)_keysForValuesAffectingValueForKey:(id)a0;
+ (id)keyPathsForValuesAffectingValueForKey:(id)a0;
+ (void)setKeys:(id)a0 triggerChangeNotificationsForDependentKey:(id)a1;
+ (char)_shouldAddObservationForwardersForKey:(id)a0;
+ (id)classFallbacksForKeyedArchiver;
+ (Class)classForKeyedUnarchiver;
+ (void)load;
+ (long long)version;
+ (char)implementsSelector:(SEL)a0;
+ (char)instancesImplementSelector:(SEL)a0;
+ (void)poseAsClass:(Class)a0;
+ (void)setVersion:(long long)a0;
+ (void)cancelPreviousPerformRequestsWithTarget:(id)a0;
+ (void)cancelPreviousPerformRequestsWithTarget:(id)a0 selector:(SEL)a1 object:(id)a2;
+ (id)_scriptingEnumeratorOfType:(id)a0 withDescriptor:(id)a1;
+ (id)_scriptingValueOfComplexType:(id)a0 withDescriptor:(id)a1;
+ (id)_scriptingValueOfObjectType:(id)a0 withDescriptor:(id)a1;
+ (id)_scriptingValueOfOneOfAlternativeTypes:(id)a0 withDescriptor:(id)a1;
+ (id)_scriptingValueOfValueType:(id)a0 withDescriptor:(id)a1;
+ (SEL)_selectorToGetValueWithNameForKey:(id)a0;
+ (SEL)_selectorToGetValueWithUniqueIDForKey:(id)a0;
+ (void)flushAllKeyBindings;
+ (void)flushClassKeyBindings;
+ (id)replacementObjectForPortCoder:(id)a0;
+ (id)SFSQLiteClassName;
+ (char)bs_isPlistableType;
+ (char)bs_isXPCObject;
+ (id)bs_secureDataFromObject:(id)a0;
+ (id)bs_secureDecodedFromData:(id)a0;
+ (id)bs_secureDecodedFromData:(id)a0 withAdditionalClasses:(id)a1;
+ (id)bs_secureObjectFromData:(id)a0 ofClass:(Class)a1;
+ (id)bs_secureObjectFromData:(id)a0 ofClasses:(id)a1;
+ (char)supportsBSXPCSecureCoding;
+ (char)supportsRBSXPCSecureCoding;
+ (id)CA_CAMLPropertyForKey:(id)a0;
+ (char)CA_automaticallyNotifiesObservers:(Class)a0;
+ (char)CA_encodesPropertyConditionally:(unsigned int)a0 type:(int)a1;
+ (void /* function */ *)CA_getterForProperty:(const struct _CAPropertyInfo { unsigned int x0; unsigned short x1 : 16; unsigned short x2 : 16; SEL x3[2]; struct __CFString *x4; } *)a0;
+ (void /* function */ *)CA_setterForProperty:(const struct _CAPropertyInfo { unsigned int x0; unsigned short x1 : 16; unsigned short x2 : 16; SEL x3[2]; struct __CFString *x4; } *)a0;
+ (char)_isDeallocating;
+ (char)isFault;
+ (oneway void)release;
+ (void)dealloc;
+ (char)isProxy;
+ (id)new;
+ (char)_tryRetain;
+ (id)alloc;
+ (id)allocWithZone:(struct _NSZone { } *)a0;
+ (char)allowsWeakReference;
+ (id)autorelease;
+ (Class)class;
+ (char)conformsToProtocol:(id)a0;
+ (id)copy;
+ (id)copyWithZone:(struct _NSZone { } *)a0;
+ (id)debugDescription;
+ (id)description;
+ (void)doesNotRecognizeSelector:(SEL)a0;
+ (void)forwardInvocation:(id)a0;
+ (id)forwardingTargetForSelector:(SEL)a0;
+ (unsigned long long)hash;
+ (id)init;
+ (void)initialize;
+ (void /* function */ *)instanceMethodForSelector:(SEL)a0;
+ (id)instanceMethodSignatureForSelector:(SEL)a0;
+ (char)instancesRespondToSelector:(SEL)a0;
+ (char)isAncestorOfObject:(id)a0;
+ (char)isEqual:(id)a0;
+ (char)isKindOfClass:(Class)a0;
+ (char)isMemberOfClass:(Class)a0;
+ (char)isSubclassOfClass:(Class)a0;
+ (void /* function */ *)methodForSelector:(SEL)a0;
+ (id)methodSignatureForSelector:(SEL)a0;
+ (id)mutableCopy;
+ (id)mutableCopyWithZone:(struct _NSZone { } *)a0;
+ (id)performSelector:(SEL)a0;
+ (id)performSelector:(SEL)a0 withObject:(id)a1;
+ (id)performSelector:(SEL)a0 withObject:(id)a1 withObject:(id)a2;
+ (char)resolveClassMethod:(SEL)a0;
+ (char)resolveInstanceMethod:(SEL)a0;
+ (char)respondsToSelector:(SEL)a0;
+ (id)retain;
+ (unsigned long long)retainCount;
+ (char)retainWeakReference;
+ (id)self;
+ (Class)superclass;
+ (struct _NSZone { } *)zone;

- (void)doesNotRecognizeSelector:(SEL)a0;
- (id)methodSignatureForSelector:(SEL)a0;
- (char)___tryRetain_OA;
- (id)__autorelease_OA;
- (oneway void)__release_OA;
- (void)__dealloc_zombie;
- (id)__retain_OA;
- (id)_copyDescription;
- (char)isNSCFConstantString__;
- (char)isNSDate__;
- (char)isNSNumber__;
- (char)isNSString__;
- (unsigned long long)_cfTypeID;
- (char)isNSArray__;
- (char)isNSData__;
- (char)isNSDictionary__;
- (char)isNSObject__;
- (char)isNSOrderedSet__;
- (char)isNSSet__;
- (char)isNSTimeZone__;
- (char)isNSURL__;
- (char)isNSValue__;
- (id)_associatedUniversalLink;
- (char)__NS_swiftOverlay_automaticallyNotifiesObserversForKey:(id)a0 foundationImplementation:(id /* block */)a1;
- (id)__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey:(id)a0 foundationImplementation:(id /* block */)a1;
- (id)newTaggedNSStringWithASCIIBytes_:(const char *)a0 length_:(long long)a1;
- (Class)classForArchiver;
- (id)replacementObjectForArchiver:(id)a0;
- (id)inverseForRelationshipKey:(id)a0;
- (unsigned long long)_scriptingCount;
- (unsigned long long)_scriptingCountNonrecursively;
- (unsigned long long)_scriptingCountOfValueForKey:(id)a0;
- (void)_scriptingRemoveValueForSpecifier:(id)a0;
- (id)keyValueBindingForKey:(id)a0 typeMask:(unsigned long long)a1;
- (id)_createKeyValueBindingForKey:(id)a0 name:(const char *)a1 bindingType:(unsigned long long)a2;
- (id)_oldValueForKey:(id)a0;
- (id)_oldValueForKeyPath:(id)a0;
- (id)createKeyValueBindingForKey:(id)a0 typeMask:(unsigned long long)a1;
- (id)handleQueryWithUnboundKey:(id)a0;
- (void)handleTakeValue:(id)a0 forUnboundKey:(id)a1;
- (id)storedValueForKey:(id)a0;
- (void)takeStoredValue:(id)a0 forKey:(id)a1;
- (void)takeValue:(id)a0 forKey:(id)a1;
- (void)takeValue:(id)a0 forKeyPath:(id)a1;
- (void)takeValuesFromDictionary:(id)a0;
- (void)unableToSetNilForKey:(id)a0;
- (id)valuesForKeys:(id)a0;
- (const char *)_localClassNameForClass;
- (char)_conformsToProtocolNamed:(const char *)a0;
- (struct objc_method_description { SEL x0; char *x1; } *)methodDescriptionForSelector:(SEL)a0;
- (id)addObserver:(id)a0 forObservableKeyPath:(id)a1;
- (void)removeObservation:(id)a0 forObservableKeyPath:(id)a1;
- (void)setObservation:(id)a0 forObservingKeyPath:(id)a1;
- (void)setSharedObservers:(id)a0;
- (id)addObserver:(id)a0;
- (void)finishObserving;
- (void)_destroyObserverList;
- (char)_isToManyChangeInformation;
- (id *)_observerStorage;
- (void *)_observerStorageOfSize:(unsigned long long)a0;
- (char)_overrideUseFastBlockObservers;
- (void)_receiveBox:(id)a0;
- (id)addChainedObservers:(id)a0;
- (id)addObservationTransformer:(id /* block */)a0;
- (id)addObserverBlock:(id /* block */)a0;
- (void)receiveObservedError:(id)a0;
- (void)receiveObservedValue:(id)a0;
- (void)removeObservation:(id)a0;
- (void)setValue:(id)a0 forKey:(id)a1;
- (id)dictionaryWithValuesForKeys:(id)a0;
- (id)valueForKey:(id)a0;
- (id)valueForUndefinedKey:(id)a0;
- (void)setValuesForKeysWithDictionary:(id)a0;
- (char)validateValue:(inout id *)a0 forKeyPath:(id)a1 error:(out id *)a2;
- (id)mutableArrayValueForKey:(id)a0;
- (id)mutableArrayValueForKeyPath:(id)a0;
- (id)mutableOrderedSetValueForKey:(id)a0;
- (id)mutableOrderedSetValueForKeyPath:(id)a0;
- (id)mutableSetValueForKey:(id)a0;
- (id)mutableSetValueForKeyPath:(id)a0;
- (void)setNilValueForKey:(id)a0;
- (void)setValue:(id)a0 forKeyPath:(id)a1;
- (void)setValue:(id)a0 forUndefinedKey:(id)a1;
- (char)validateValue:(inout id *)a0 forKey:(id)a1 error:(out id *)a2;
- (id)valueForKeyPath:(id)a0;
- (char)_isKVOA;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)_addObserver:(id)a0 forProperty:(id)a1 options:(unsigned long long)a2 context:(void *)a3;
- (void)_removeObserver:(id)a0 forProperty:(id)a1;
- (void)addObserver:(id)a0 forKeyPath:(id)a1 options:(unsigned long long)a2 context:(void *)a3;
- (void)removeObserver:(id)a0 forKeyPath:(id)a1;
- (void)removeObserver:(id)a0 forKeyPath:(id)a1 context:(void *)a2;
- (void)didChangeValueForKey:(id)a0;
- (void)willChangeValueForKey:(id)a0;
- (void)didChange:(unsigned long long)a0 valuesAtIndexes:(id)a1 forKey:(id)a2;
- (void)didChangeValueForKey:(id)a0 withSetMutation:(unsigned long long)a1 usingObjects:(id)a2;
- (void)willChange:(unsigned long long)a0 valuesAtIndexes:(id)a1 forKey:(id)a2;
- (void)willChangeValueForKey:(id)a0 withSetMutation:(unsigned long long)a1 usingObjects:(id)a2;
- (void)_didChangeValuesForKeys:(id)a0;
- (void)_notifyObserversOfChangeFromValuesForKeys:(id)a0 toValuesForKeys:(id)a1;
- (void)_willChangeValuesForKeys:(id)a0;
- (void)_changeValueForKey:(id)a0 key:(id)a1 key:(id)a2 usingBlock:(id /* block */)a3;
- (void)_changeValueForKey:(id)a0 usingBlock:(id /* block */)a1;
- (void)_changeValueForKeys:(id *)a0 count:(unsigned long long)a1 maybeOldValuesDict:(id)a2 maybeNewValuesDict:(id)a3 usingBlock:(id /* block */)a4;
- (void)_didEndKeyValueObserving;
- (id)_implicitObservationInfo;
- (void)_notifyObserversForKeyPath:(id)a0 change:(id)a1;
- (id)_pendingChangeNotificationsArrayForKey:(id)a0 create:(char)a1;
- (void)_willBeginKeyValueObserving;
- (id)replacementObjectForKeyedArchiver:(id)a0;
- (Class)classForCoder;
- (id)awakeAfterUsingCoder:(id)a0;
- (id)replacementObjectForCoder:(id)a0;
- (char)_allowsDirectEncoding;
- (char)implementsSelector:(SEL)a0;
- (id)_scriptingCopyWithProperties:(id)a0 forValueForKey:(id)a1 ofContainer:(id)a2;
- (id)coerceValueForScriptingProperties:(id)a0;
- (id)copyScriptingValue:(id)a0 forKey:(id)a1 withProperties:(id)a2;
- (id)newScriptingObjectOfClass:(Class)a0 forValueForKey:(id)a1 withContentsValue:(id)a2 properties:(id)a3;
- (id)scriptingValueForSpecifier:(id)a0;
- (id)_scriptingAddObjectsFromArray:(id)a0 toValueForKey:(id)a1;
- (id)_scriptingAddObjectsFromSet:(id)a0 toValueForKey:(id)a1;
- (id)_scriptingArrayOfObjectsForSpecifier:(id)a0;
- (char)_scriptingCanAddObjectsToValueForKey:(id)a0;
- (char)_scriptingCanInsertBeforeOrReplaceObjectsAtIndexes:(id)a0 inValueForKey:(id)a1;
- (char)_scriptingCanSetValue:(id)a0 forSpecifier:(id)a1;
- (id)_scriptingCoerceValue:(id)a0 forKey:(id)a1;
- (unsigned long long)_scriptingIndexOfObjectForSpecifier:(id)a0;
- (unsigned long long)_scriptingIndexOfObjectWithName:(id)a0 inValueForKey:(id)a1;
- (unsigned long long)_scriptingIndexOfObjectWithUniqueID:(id)a0 inValueForKey:(id)a1;
- (id)_scriptingIndexesOfObjectsForSpecifier:(id)a0;
- (id)_scriptingIndicesOfObjectsAfterValidatingSpecifier:(id)a0;
- (long long *)_scriptingIndicesOfObjectsForSpecifier:(id)a0 count:(long long *)a1;
- (id)_scriptingInsertObject:(id)a0 inValueForKey:(id)a1;
- (id)_scriptingInsertObjects:(id)a0 atIndexes:(id)a1 inValueForKey:(id)a2;
- (id)_scriptingObjectAtIndex:(unsigned long long)a0 inValueForKey:(id)a1;
- (unsigned long long)_scriptingObjectCountInValueForKey:(id)a0;
- (id)_scriptingObjectForSpecifier:(id)a0;
- (id)_scriptingObjectWithName:(id)a0 inValueForKey:(id)a1;
- (id)_scriptingObjectWithUniqueID:(id)a0 inValueForKey:(id)a1;
- (id)_scriptingObjectsAtIndexes:(id)a0 inValueForKey:(id)a1;
- (void)_scriptingRemoveAllObjectsFromValueForKey:(id)a0;
- (void)_scriptingRemoveObjectsAtIndexes:(id)a0 fromValueForKey:(id)a1;
- (id)_scriptingReplaceObjectAtIndex:(unsigned long long)a0 withObjects:(id)a1 inValueForKey:(id)a2;
- (id)_scriptingSetOfObjectsForSpecifier:(id)a0;
- (id)_scriptingSetValue:(id)a0 forKey:(id)a1;
- (char)_scriptingShouldCheckObjectIndexes;
- (id)_scriptingValueForKey:(id)a0;
- (id)_scriptingValueForSpecifier:(id)a0;
- (void)performSelector:(SEL)a0 object:(id)a1 afterDelay:(double)a2;
- (void)performSelector:(SEL)a0 withObject:(id)a1 afterDelay:(double)a2;
- (void)performSelector:(SEL)a0 withObject:(id)a1 afterDelay:(double)a2 inModes:(id)a3;
- (int)_scriptingAlternativeValueRankWithDescriptor:(id)a0;
- (id)_scriptingDebugDescription;
- (id)_scriptingDescriptorOfComplexType:(id)a0 orReasonWhyNot:(id *)a1;
- (id)_scriptingDescriptorOfEnumeratorType:(id)a0 orReasonWhyNot:(id *)a1;
- (id)_scriptingDescriptorOfObjectType:(id)a0 orReasonWhyNot:(id *)a1;
- (id)_scriptingDescriptorOfValueType:(id)a0 orReasonWhyNot:(id *)a1;
- (void)_scriptingAddToReceiversArray:(id)a0;
- (char)_scriptingCanHandleCommand:(id)a0;
- (char)_scriptingMightHandleCommand:(id)a0;
- (id)valueAtIndex:(unsigned long long)a0 inPropertyWithKey:(id)a1;
- (id)coerceValue:(id)a0 forKey:(id)a1;
- (void)insertValue:(id)a0 atIndex:(unsigned long long)a1 inPropertyWithKey:(id)a2;
- (void)insertValue:(id)a0 inPropertyWithKey:(id)a1;
- (void)removeValueAtIndex:(unsigned long long)a0 fromPropertyWithKey:(id)a1;
- (void)replaceValueAtIndex:(unsigned long long)a0 inPropertyWithKey:(id)a1 withValue:(id)a2;
- (id)valueWithName:(id)a0 inPropertyWithKey:(id)a1;
- (id)valueWithUniqueID:(id)a0 inPropertyWithKey:(id)a1;
- (long long)_supportsGetValueWithNameForKey:(id)a0 perhapsByOverridingClass:(Class)a1;
- (long long)_supportsGetValueWithUniqueIDForKey:(id)a0 perhapsByOverridingClass:(Class)a1;
- (void)_compatibility_takeValue:(id)a0 forKey:(id)a1;
- (id)_asScriptTerminologyNameArray;
- (id)_asScriptTerminologyNameString;
- (id)objectSpecifier;
- (id)_scriptingSetValue:(id)a0 forSpecifier:(id)a1;
- (char)isLike:(id)a0;
- (char)doesContain:(id)a0;
- (char)isCaseInsensitiveLike:(id)a0;
- (char)isEqualTo:(id)a0;
- (char)isGreaterThan:(id)a0;
- (char)isGreaterThanOrEqualTo:(id)a0;
- (char)isLessThan:(id)a0;
- (char)isLessThanOrEqualTo:(id)a0;
- (char)isNotEqualTo:(id)a0;
- (void)performSelector:(SEL)a0 onThread:(id)a1 withObject:(id)a2 waitUntilDone:(char)a3;
- (void)performSelector:(SEL)a0 onThread:(id)a1 withObject:(id)a2 waitUntilDone:(char)a3 modes:(id)a4;
- (void)performSelectorInBackground:(SEL)a0 withObject:(id)a1;
- (void)performSelectorOnMainThread:(SEL)a0 withObject:(id)a1 waitUntilDone:(char)a2;
- (void)performSelectorOnMainThread:(SEL)a0 withObject:(id)a1 waitUntilDone:(char)a2 modes:(id)a3;
- (void)clearProperties;
- (id)allPropertyKeys;
- (void)takeStoredValuesFromDictionary:(id)a0;
- (void)_setObject:(id)a0 forBothSidesOfRelationshipWithKey:(id)a1;
- (void)addObject:(id)a0 toBothSidesOfRelationshipWithKey:(id)a1;
- (void)addObject:(id)a0 toPropertyWithKey:(id)a1;
- (id)classDescriptionForDestinationKey:(id)a0;
- (id)entityName;
- (void)flushKeyBindings;
- (char)isToManyKey:(id)a0;
- (char)ownsDestinationObjectsForRelationshipKey:(id)a0;
- (void)removeObject:(id)a0 fromBothSidesOfRelationshipWithKey:(id)a1;
- (void)removeObject:(id)a0 fromPropertyWithKey:(id)a1;
- (id)validateTakeValue:(id)a0 forKeyPath:(id)a1;
- (id)validateValue:(id *)a0 forKey:(id)a1;
- (char)_scriptingExists;
- (Class)classForPortCoder;
- (id)replacementObjectForPortCoder:(id)a0;
- (char)bs_isPlistableType;
- (id)bs_secureEncoded;
- (char)supportsBSXPCSecureCoding;
- (id)NSRepresentation;
- (char)RBSIsXPCObject;
- (char)supportsRBSXPCSecureCoding;
- (id)CA_interpolateValue:(id)a0 byFraction:(float)a1;
- (id)CA_addValue:(id)a0 multipliedBy:(int)a1;
- (struct Object { void /* function */ **x0; struct Atomic { struct { int x0; } x0; } x1; unsigned char x2 : 8; unsigned int x3 : 24; } *)CA_copyRenderValue;
- (double)CA_distanceToValue:(id)a0;
- (void)CA_prepareRenderValue;
- (unsigned long long)CA_copyNumericValue:(double *)a0;
- (struct Object { void /* function */ **x0; struct Atomic { struct { int x0; } x0; } x1; unsigned char x2 : 8; unsigned int x3 : 24; } *)CA_copyRenderValueWithColorspace:(struct CGColorSpace { } *)a0;
- (unsigned long long)CA_numericValueCount;
- (id)CA_roundToIntegerFromValue:(id)a0;
- (id)CAMLTypeForKey:(id)a0;
- (char)CAMLTypeSupportedForKey:(id)a0;
- (void)CA_initialize_for_decoding;
- (char)CA_validateValue:(id)a0 forKey:(id)a1;
- (id)CAMLType;
- (id)CA_archivingValueForKey:(id)a0;
- (id)CA_interpolateValues:(id)a0 :(id)a1 :(id)a2 interpolator:(const struct ValueInterpolator { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; BOOL x14; } *)a3;
- (void)encodeWithCAMLWriter:(id)a0;
- (id)NSRepresentation;
- (char)_isDeallocating;
- (char)isFault;
- (oneway void)release;
- (void)dealloc;
- (char)isProxy;
- (char)_tryRetain;
- (char)allowsWeakReference;
- (id)autorelease;
- (Class)class;
- (char)conformsToProtocol:(id)a0;
- (id)copy;
- (void)doesNotRecognizeSelector:(SEL)a0;
- (void)finalize;
- (void)forwardInvocation:(id)a0;
- (id)forwardingTargetForSelector:(SEL)a0;
- (id)init;
- (char)isEqual:(id)a0;
- (char)isKindOfClass:(Class)a0;
- (char)isMemberOfClass:(Class)a0;
- (void /* function */ *)methodForSelector:(SEL)a0;
- (id)methodSignatureForSelector:(SEL)a0;
- (id)mutableCopy;
- (id)performSelector:(SEL)a0;
- (id)performSelector:(SEL)a0 withObject:(id)a1;
- (id)performSelector:(SEL)a0 withObject:(id)a1 withObject:(id)a2;
- (char)respondsToSelector:(SEL)a0;
- (id)retain;
- (unsigned long long)retainCount;
- (char)retainWeakReference;
- (id)self;
- (struct _NSZone { } *)zone;

@end
