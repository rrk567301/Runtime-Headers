@class NSString, NSURL, NSError, NSObject, NSMutableArray;
@protocol OS_dispatch_queue, OS_os_transaction, OS_dispatch_source;

@interface PQLConnection : NSObject {
    unsigned long long _currentStmtStart;
    NSObject<OS_os_transaction> *_batchStarted;
    int _suspendCaching;
    int _savePointLevel;
    int _skipBatchStop;
    int _vacuumTracker;
    NSMutableArray *_flushNotifications;
    id /* block */ _batchingPolicyHandler;
    NSObject<OS_dispatch_source> *_batchingTimer;
    double _batchingPeriod;
    int _batchingChangesLimit;
    int _batchingChangesCount;
    int _cacheSize;
    char _useBatching;
    char _useQueue;
    char _needsFullSync;
    char _needsBarrierFSync;
    struct cache_s { } *_preparedStatements;
    NSObject<OS_dispatch_source> *_stmtCacheSource;
    NSMutableArray *_stmtCacheCleanupQueue;
    long long _changesOverride;
    NSObject<OS_dispatch_queue> *_targetQueue;
}

@property (copy, nonatomic) NSString *label;
@property (nonatomic, getter=isTraced) char traced;
@property (nonatomic) char crashIfUsedAfterClose;
@property (readonly, copy, nonatomic) NSURL *url;
@property (readonly, nonatomic) struct sqlite3 { } *dbHandle;
@property (readonly, nonatomic) char isInBatch;
@property (readonly, nonatomic) char isInTransaction;
@property (retain, nonatomic) NSError *lastError;
@property (readonly, nonatomic) long long lastInsertedRowID;
@property (readonly, nonatomic) long long changes;
@property (nonatomic) unsigned long long statementCacheMaxCount;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *serialQueue;
@property (readonly, nonatomic) double currentOperationDuration;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long synchronousMode;
@property (nonatomic) int batchTransactionType;
@property (nonatomic) char shouldUseWALJournalMode;
@property (copy, nonatomic) id /* block */ lockedHandler;
@property (copy, nonatomic) id /* block */ busyHandler;
@property (copy, nonatomic) id /* block */ autoRollbackHandler;
@property (copy, nonatomic) id /* block */ sqliteErrorHandler;
@property (copy, nonatomic) id /* block */ preFlushHook;
@property (copy, nonatomic) id /* block */ postFlushHook;
@property (copy, nonatomic) id /* block */ profilingHook;
@property (copy, nonatomic) id /* block */ profilingHookV2;
@property (copy, nonatomic) id /* block */ willBeginBatchingHook;
@property (copy, nonatomic) id /* block */ didFinishBatchingHook;
@property (readonly, nonatomic) char isBatchSuspended;

+ (void)initialize;

- (void)dealloc;
- (id)description;
- (id)init;
- (void).cxx_destruct;
- (char)close:(id *)a0;
- (char)setUserVersion:(long long)a0;
- (id)userVersion;
- (id)fetch:(id)a0;
- (void)flush;
- (char)execute:(id)a0;
- (void)_resetState;
- (void)assertOnQueue;
- (id)fetchObjectOfClass:(Class)a0 sql:(id)a1;
- (char)openAtURL:(id)a0 sharedCache:(char)a1 error:(id *)a2;
- (char)performWithFlags:(unsigned int)a0 action:(id /* block */)a1;
- (char)setupPragmas;
- (void)useBatchingWithDelay:(double)a0 changeCount:(int)a1;
- (void)useSerialQueue;
- (char)registerFunction:(id)a0 nArgs:(int)a1 handler:(id /* block */)a2;
- (void)_clearCleanupCacheQueueIfNeeded;
- (void)_vacuumIfNeeded;
- (void)forceBatchStart;
- (void)_batchStartIfNeeded:(int)a0;
- (void)_batchStopIfNeeded;
- (void)_clearStatementCache;
- (void)_createCacheIfNeeded;
- (id)_description:(char)a0;
- (char)_execute:(id)a0 mustSucceed:(char)a1 bindings:(struct __va_list_tag { unsigned int x0; unsigned int x1; void *x2; void *x3; }[1])a2;
- (char)_executeStmt:(id)a0 mustSucceed:(char)a1 preparationTime:(unsigned long long)a2;
- (void)_fireFlushNotifications;
- (char)_fullSync;
- (char)_incrementalVacuum:(unsigned long long)a0;
- (id)_newStatementForBuilder:(id /* block */)a0 preparationTime:(unsigned long long *)a1;
- (id)_newStatementForFormat:(id)a0 preparationTime:(unsigned long long *)a1 arguments:(struct __va_list_tag { unsigned int x0; unsigned int x1; void *x2; void *x3; }[1])a2;
- (char)_performWithFlags:(unsigned int)a0 action:(id /* block */)a1 whenFlushed:(id /* block */)a2;
- (int)_vacuumMode;
- (long long)autovacuumableSpaceInBytes;
- (char)backupToURL:(id)a0 progress:(id /* block */)a1;
- (char)destroyDatabaseWithError:(id *)a0;
- (char)execute:(id)a0 args:(struct __va_list_tag { unsigned int x0; unsigned int x1; void *x2; void *x3; }[1])a1;
- (char)executeRaw:(id)a0;
- (char)executeSwift:(id /* block */)a0 error:(id *)a1;
- (id)fetch:(id)a0 args:(struct __va_list_tag { unsigned int x0; unsigned int x1; void *x2; void *x3; }[1])a1;
- (id)fetchObject:(id /* block */)a0 sql:(id)a1;
- (id)fetchObject:(id /* block */)a0 sql:(id)a1 args:(struct __va_list_tag { unsigned int x0; unsigned int x1; void *x2; void *x3; }[1])a2;
- (id)fetchObjectOfClass:(Class)a0 initializer:(SEL)a1 sql:(id)a2;
- (id)fetchObjectOfClass:(Class)a0 initializer:(SEL)a1 sql:(id)a2 args:(struct __va_list_tag { unsigned int x0; unsigned int x1; void *x2; void *x3; }[1])a3;
- (id)fetchObjectOfClass:(Class)a0 sql:(id)a1 args:(struct __va_list_tag { unsigned int x0; unsigned int x1; void *x2; void *x3; }[1])a2;
- (id)fetchObjectOfClassSwift:(Class)a0 query:(id /* block */)a1 error:(id *)a2;
- (id)fetchObjectSwift:(id /* block */)a0 query:(id /* block */)a1 error:(id *)a2;
- (id)fetchSwift:(id /* block */)a0 error:(id *)a1;
- (void)groupInBatch:(id /* block */)a0;
- (char)groupInTransaction:(id /* block */)a0;
- (char)incrementalVacuum:(long long)a0;
- (void)makeNextFlushBarrierFSync;
- (void)makeNextFlushFullSync;
- (char)openAtURL:(id)a0 withFlags:(int)a1 error:(id *)a2;
- (char)performWithFlags:(unsigned int)a0 action:(id /* block */)a1 whenFlushed:(id /* block */)a2;
- (void)useBatchingOnTargetQueue:(id)a0 delay:(double)a1 changeCount:(int)a2;
- (void)useBatchingOnTargetQueue:(id)a0 withPolicyHandler:(id /* block */)a1;
- (void)useBatchingWithPolicyHandler:(id /* block */)a0;
- (void)useSerialQueueWithTarget:(id)a0;

@end
