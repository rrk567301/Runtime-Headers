@class NSString, MTLSimBuffer;
@protocol MTLDevice, MTLHeap, MTLTexture, MTLBuffer, MTLResource;

@interface MTLSimTexture : MTLSimResource <MTLSerializerTexture, MTLSerializerResource, MTLTextureSPI, MTLTextureImplementation> {
    MTLSimTexture *_parentTexture;
    unsigned long long _parentRelativeSlice;
    MTLSimBuffer *_buffer;
    unsigned long long _textureType;
    unsigned long long _pixelFormat;
    unsigned long long _decompressedPixelFormat;
    MTLSimBuffer *_backingBuffer;
    unsigned long long _backingBufferSize;
    id<MTLTexture> _decompressedTextureView;
    unsigned long long _width;
    unsigned long long _height;
    unsigned long long _depth;
    unsigned long long _mipmapLevelCount;
    unsigned long long _sampleCount;
    unsigned long long _arrayLength;
    unsigned long long _numFaces;
    unsigned long long _iosurfacePlane;
    unsigned long long _bufferOffset;
    unsigned long long _bufferBytesPerRow;
    BOOL _isInternalTextureView;
}

@property (retain, setter=_simSetParentTexture:) id<MTLTexture> parentTexture;
@property (getter=isShareable, setter=_simSetShareable:) BOOL shareable;
@property (readonly) unsigned long long decompressedPixelFormat;
@property (readonly) id<MTLBuffer> backingBuffer;
@property (readonly) id<MTLTexture> decompressedTextureView;
@property (readonly) unsigned int textureRef;
@property (readonly) unsigned long long pixelFormat;
@property (readonly) unsigned int serializerResourceRef;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) struct __IOSurface { } *iosurface;
@property (readonly) unsigned long long iosurfacePlane;
@property (readonly) unsigned long long rotation;
@property (readonly) BOOL isCompressed;
@property (readonly) long long compressionFeedback;
@property (readonly) unsigned long long uniqueIdentifier;
@property (readonly, nonatomic) unsigned long long resourceIndex;
@property (readonly, nonatomic) unsigned long long gpuAddress;
@property (readonly) unsigned int swizzleKey;
@property (readonly) unsigned long long numFaces;
@property (readonly) BOOL isDrawable;
@property (readonly) unsigned long long sparseSurfaceDefaultValue;
@property (readonly, nonatomic) unsigned long long compressionFootprint;
@property (readonly, nonatomic) unsigned long long colorSpaceConversionMatrix;
@property (readonly) unsigned long long gpuHandle;
@property (readonly) long long writeAccessPattern;
@property (readonly) id<MTLResource> rootResource;
@property (readonly) unsigned long long parentRelativeLevel;
@property (readonly) unsigned long long parentRelativeSlice;
@property (readonly) id<MTLBuffer> buffer;
@property (readonly) unsigned long long bufferOffset;
@property (readonly) unsigned long long bufferBytesPerRow;
@property (readonly) unsigned long long textureType;
@property (readonly) unsigned long long width;
@property (readonly) unsigned long long height;
@property (readonly) unsigned long long depth;
@property (readonly) unsigned long long mipmapLevelCount;
@property (readonly) unsigned long long sampleCount;
@property (readonly) unsigned long long arrayLength;
@property (readonly) unsigned long long usage;
@property (readonly, getter=isFramebufferOnly) BOOL framebufferOnly;
@property (readonly) unsigned long long firstMipmapInTail;
@property (readonly) unsigned long long tailSizeInBytes;
@property (readonly) BOOL isSparse;
@property (readonly) BOOL allowGPUOptimizedContents;
@property (readonly) long long compressionType;
@property (readonly) struct MTLResourceID { unsigned long long x0; } gpuResourceID;
@property (readonly) id<MTLTexture> remoteStorageTexture;
@property (readonly, nonatomic) struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; } swizzle;
@property (readonly) long long sparseTextureTier;
@property (copy) NSString *label;
@property (readonly) id<MTLDevice> device;
@property (readonly) unsigned long long cpuCacheMode;
@property (readonly) unsigned long long storageMode;
@property (readonly) unsigned long long hazardTrackingMode;
@property (readonly) unsigned long long resourceOptions;
@property (readonly) id<MTLHeap> heap;
@property (readonly) unsigned long long heapOffset;
@property (readonly) unsigned long long allocatedSize;
@property int responsibleProcess;
@property (readonly) unsigned long long allocationID;
@property (readonly) unsigned long long protectionOptions;
@property (readonly) unsigned long long unfilteredResourceOptions;

+ (void)decompress:(const char *)a0 expandedTex:(char *)a1 srcFormat:(unsigned long long)a2 destFormat:(unsigned long long)a3 width:(unsigned long long)a4 height:(unsigned long long)a5 destRowBytes:(unsigned long long)a6 srcRowBytes:(unsigned long long)a7;
+ (unsigned long long)getDecompressedFormat:(unsigned long long)a0;

- (id)buffer;
- (struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })swizzle;
- (void)dealloc;
- (id)formattedDescription:(unsigned long long)a0;
- (id)parentTexture;
- (long long)compressionFeedback;
- (unsigned long long)bufferOffset;
- (unsigned long long)setPurgeableState:(unsigned long long)a0;
- (id)newSharedTextureHandle;
- (void)getBytes:(void *)a0 bytesPerRow:(unsigned long long)a1 fromRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a2 mipmapLevel:(unsigned long long)a3;
- (id)newRemoteTextureViewForDevice:(id)a0;
- (void)didModifyData;
- (void)replaceRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a0 mipmapLevel:(unsigned long long)a1 withBytes:(const void *)a2 bytesPerRow:(unsigned long long)a3;
- (void)getBytes:(void *)a0 bytesPerRow:(unsigned long long)a1 bytesPerImage:(unsigned long long)a2 fromRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a3 mipmapLevel:(unsigned long long)a4 slice:(unsigned long long)a5;
- (id)newTextureViewWithDescriptor:(id)a0;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (id)newTextureViewWithPixelFormat:(unsigned long long)a0 textureType:(unsigned long long)a1 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a4;
- (void)replaceRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a0 mipmapLevel:(unsigned long long)a1 slice:(unsigned long long)a2 withBytes:(const void *)a3 bytesPerRow:(unsigned long long)a4 bytesPerImage:(unsigned long long)a5;
- (void)_swapDecompressedPropertiesWith:(id)a0;
- (unsigned long long)calculateOffsetToRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a0 level:(unsigned long long)a1 slice:(unsigned long long)a2;
- (void)decompressPlaceholder:(const char *)a0 expandedTex:(char *)a1 srcFormat:(unsigned long long)a2 destFormat:(unsigned long long)a3 width:(unsigned long long)a4 height:(unsigned long long)a5 destRowBytes:(unsigned long long)a6 srcRowBytes:(unsigned long long)a7;
- (id)initWithBuffer:(id)a0 offset:(unsigned long long)a1 bytesPerRow:(unsigned long long)a2 descriptor:(id)a3 textureRef:(unsigned int)a4;
- (id)initWithDescriptor:(id)a0 decompressedPixelFormat:(unsigned long long)a1 iosurface:(struct __IOSurface { } *)a2 plane:(unsigned long long)a3 textureRef:(unsigned int)a4 heap:(id)a5 device:(id)a6;
- (id)initWithDescriptor:(id)a0 decompressedPixelFormat:(unsigned long long)a1 iosurface:(struct __IOSurface { } *)a2 plane:(unsigned long long)a3 textureRef:(unsigned int)a4 heap:(id)a5 device:(id)a6 shareable:(BOOL)a7;
- (id)initWithTexture:(id)a0 device:(id)a1;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1 decompressedPixelFormat:(unsigned long long)a2 textureRef:(unsigned int)a3 isInternalTextureView:(BOOL)a4;
- (id)initWithTexture:(id)a0 pixelFormat:(unsigned long long)a1 decompressedPixelFormat:(unsigned long long)a2 textureType:(unsigned long long)a3 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a5 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a6 textureRef:(unsigned int)a7 isInternalTextureView:(BOOL)a8;
- (id)initWithTextureInternal:(id)a0 pixelFormat:(unsigned long long)a1 decompressedPixelFormat:(unsigned long long)a2 textureType:(unsigned long long)a3 levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a5 swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })a6 compressedView:(BOOL)a7 textureRef:(unsigned int)a8 isInternalTextureView:(BOOL)a9;
- (id)newTextureViewWithPixelFormatInternal:(unsigned long long)a0 isInternalTextureView:(BOOL)a1;

@end
