@interface RSOpeningHeightAlignment : NSObject {
    struct OpeningHeightAlignment { void /* function */ **_vptr$OpeningHeightAlignment; struct unordered_map<std::string, rs_oalign::OpeningFixedNode, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, rs_oalign::OpeningFixedNode>>> { struct __hash_table<std::__hash_value_type<std::string, rs_oalign::OpeningFixedNode>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, rs_oalign::OpeningFixedNode>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, rs_oalign::OpeningFixedNode>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, rs_oalign::OpeningFixedNode>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, rs_oalign::OpeningFixedNode>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, rs_oalign::OpeningFixedNode>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, rs_oalign::OpeningFixedNode>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, rs_oalign::OpeningFixedNode>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _opening_fixed; BOOL _check_in_view; float _floor_v; float Min_Opening_height; float Invaid_height_min; int Max_try_times; int Second_try_times; float Max_opeing_height; double opening_wall_gap; struct vector<rs_oalign::HoleOpening, std::allocator<rs_oalign::HoleOpening>> { struct HoleOpening *__begin_; struct HoleOpening *__end_; struct HoleOpening *__cap_; } _hole_vector; } _openingHeightAlignment;
}

- (id)init;
- (id).cxx_construct;
- (void).cxx_destruct;

@end
