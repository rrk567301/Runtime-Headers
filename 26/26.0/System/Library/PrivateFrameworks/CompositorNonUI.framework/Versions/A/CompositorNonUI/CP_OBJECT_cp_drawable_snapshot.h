@interface CP_OBJECT_cp_drawable_snapshot : NSObject {
    struct cp_drawable_snapshot_internal { struct { struct RTPose { struct { void /* unknown type, empty encoding */ columns[4]; } device_to_world; struct { void /* unknown type, empty encoding */ columns[4]; } world_to_device; struct { void /* unknown type, empty encoding */ columns[4]; } neck_to_device; int initialization_id; unsigned long long session_id; double target_timestamp; double query_timestamp; double last_inertial_timestamp; BOOL vio_could_be_in_a_bad_state; unsigned char type; } pose; BOOL is_headlocked; float foveation_max_ppd; struct WBHMDSwapchainPerFrameDataPerEye { void /* unknown type, empty encoding */ position; struct { void /* unknown type, empty encoding */ vector; } orientation; struct { double originX; double originY; double width; double height; double znear; double zfar; } viewport; void /* unknown type, empty encoding */ depth_range; struct { void /* unknown type, empty encoding */ columns[4]; } adaptive_registration_homography; struct { void /* unknown type, empty encoding */ columns[4]; } projection_matrix; void /* unknown type, empty encoding */ tangents; } per_eye[2]; unsigned long long frame_number; unsigned long long target_vsync_id; } metadata; struct cp_drawable_snapshot_timing_data { struct cp_duration { long long duration_mach_abs_time; } server_to_client_network_latency; struct cp_domain_time { unsigned long long domain_time; } time_sync_presentation_time; BOOL has_been_time_synced; struct cp_drawable_snapshot_client_timing_data { struct cp_time { unsigned long long cp_mach_abs_time; } presentation_time; struct cp_time { unsigned long long cp_mach_abs_time; } frame_compression_gpu_start; struct cp_time { unsigned long long cp_mach_abs_time; } render_start; struct cp_time { unsigned long long cp_mach_abs_time; } frame_compression_end; } client_time; } timing_data; } data;
}

- (id)initPrivate;

@end
