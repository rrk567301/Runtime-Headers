@interface AMSCB1PHTTPHeaderDictionary : NSObject <NSCopying, NSFastEnumeration> {
    struct variant<AMSCore::IHTTPHeaderMap, std::pair<std::reference_wrapper<const AMSCore::IHTTPHeaderMap>, id>> { struct __impl<AMSCore::IHTTPHeaderMap, std::pair<std::reference_wrapper<const AMSCore::IHTTPHeaderMap>, id>> { union __union<std::__variant_detail::_Trait::_Available, 0UL, AMSCore::IHTTPHeaderMap, std::pair<std::reference_wrapper<const AMSCore::IHTTPHeaderMap>, id>> { char __dummy; struct __alt<0UL, AMSCore::IHTTPHeaderMap> { struct IHTTPHeaderMap { struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, AMSCore::StringUtils::CaseInsensitiveHash, AMSCore::StringUtils::CaseInsensitiveEqualTo>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, AMSCore::StringUtils::CaseInsensitiveEqualTo, AMSCore::StringUtils::CaseInsensitiveHash>, std::allocator<std::__hash_value_type<std::string, std::string>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 1UL, std::pair<std::reference_wrapper<const AMSCore::IHTTPHeaderMap>, id>> { char __dummy; struct __alt<1UL, std::pair<std::reference_wrapper<const AMSCore::IHTTPHeaderMap>, id>> { struct pair<std::reference_wrapper<const AMSCore::IHTTPHeaderMap>, id> { struct reference_wrapper<const AMSCore::IHTTPHeaderMap> { struct IHTTPHeaderMap *__f_; } first; id second; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 2UL> { } __tail; } __tail; } __data; unsigned int __index; } __impl_; } _headerMapVariant;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _unfairLock;
}

- (unsigned long long)countByEnumeratingWithState:(struct { unsigned long long x0; id *x1; unsigned long long *x2; unsigned long long x3[5]; } *)a0 objects:(id *)a1 count:(unsigned long long)a2;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (id).cxx_construct;
- (void).cxx_destruct;

@end
