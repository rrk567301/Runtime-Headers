@interface AMSCB1PHTTPResponse : NSObject {
    struct optional<AMSCore::ExecuteHTTPRequestTask::Result> { union { char __null_state_; struct Result { struct shared_ptr<AMSCore::IMediaAccount> { struct IMediaAccount *__ptr_; struct __shared_weak_count *__cntrl_; } mAccount; struct Options { struct map<std::string, AMSCore::Any, std::less<void>, std::allocator<std::pair<const std::string, AMSCore::Any>>> { struct __tree<std::__value_type<std::string, AMSCore::Any>, std::__map_value_compare<std::string, std::__value_type<std::string, AMSCore::Any>, std::less<void>>, std::allocator<std::__value_type<std::string, AMSCore::Any>>> { void *__begin_node_; struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __end_node_; unsigned long long __size_; } __tree_; } mAdditionalLoadUrlMetrics; struct shared_ptr<AMSCore::IBag> { struct IBag *__ptr_; struct __shared_weak_count *__cntrl_; } mBag; struct shared_ptr<const AMSCore::IBundleInfo> { struct IBundleInfo *__ptr_; struct __shared_weak_count *__cntrl_; } mBundleInfo; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __val_; } ; BOOL __engaged_; } mGSTokenIdentifier; struct shared_ptr<AMSCore::ExecuteHTTPRequestTask::IHandler> { struct IHandler *__ptr_; struct __shared_weak_count *__cntrl_; } mHandler; struct optional<std::chrono::duration<long long, std::ratio<1, 1000>>> { union { char __null_state_; struct duration<long long, std::ratio<1, 1000>> { long long __rep_; } __val_; } ; BOOL __engaged_; } mTimeout; unsigned char mMaxRetryCount; BOOL mCanPersistAccountHeaders; BOOL mSendLoadURLMetrics; BOOL mURLKnownToBeTrusted; struct function<std::expected<AMSCore::LoadURLMetricsEventConfig, AMSCore::Error> (const AMSCore::ExecuteHTTPRequestTask::Options &, const std::expected<AMSCore::HTTPResponse, AMSCore::HTTPError> &)> { struct __value_func<std::expected<AMSCore::LoadURLMetricsEventConfig, AMSCore::Error> (const AMSCore::ExecuteHTTPRequestTask::Options &, const std::expected<AMSCore::HTTPResponse, AMSCore::HTTPError> &)> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } mLoadUrlMetricsEventConfigProvider; } mOptions; struct shared_ptr<const AMSCore::HTTPResponse> { struct HTTPResponse *__ptr_; struct __shared_weak_count *__cntrl_; } mResponse; } __val_; } ; BOOL __engaged_; } _executeRequestResult;
}

- (id).cxx_construct;
- (void).cxx_destruct;

@end
