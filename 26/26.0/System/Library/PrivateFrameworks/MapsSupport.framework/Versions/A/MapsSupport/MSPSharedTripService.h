@class NSXPCConnection, NSString, GEOObserverHashTable, NSArray, MSPSharedTripSharingIdentity, NSDate, MSPSharedTripContactController, NSMutableDictionary, NSObject, NSMutableArray, GCDTimer, MSPMapsPaths;
@protocol OS_dispatch_queue, OS_dispatch_group;

@interface MSPSharedTripService : NSObject <MSPSharedTripXPCServer, MSPSharedTripXPCClient, MSPSharedTripContactControllerDelegate> {
    NSXPCConnection *_connection;
    BOOL _connectionError;
    NSObject<OS_dispatch_queue> *_isolationQueue;
    unsigned long long _connectionRetryCounter;
    NSDate *_reconnectionBackoffUntilDate;
    GEOObserverHashTable *_receivingObservers;
    GEOObserverHashTable *_sendingObservers;
    NSMutableArray *_receivedTrips;
    MSPSharedTripContactController *_sharingContactController;
    NSMutableDictionary *_subscriptionTokensByTripID;
    NSString *_sharingGroupIdentifier;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _sharingIdentityLock;
    unsigned long long _permissions;
    MSPSharedTripSharingIdentity *_sharingIdentity;
    NSObject<OS_dispatch_group> *_checkinDispatchGroup;
    id _userDisabledDefaultListener;
    id _serverDisabledDefaultListener;
    MSPMapsPaths *_mapsPaths;
    BOOL _confirmedMapsIsInstalled;
    BOOL _networkReachable;
    id _blockListMonitoringObserver;
    GCDTimer *_blockListCoalescingTimer;
}

@property (readonly, nonatomic) BOOL entitledToShareTrip;
@property (readonly, nonatomic) BOOL entitledToReceiveTrips;
@property (readonly, nonatomic) MSPSharedTripSharingIdentity *sharingIdentity;
@property (readonly, nonatomic) BOOL canAddReceivers;
@property (readonly, nonatomic) NSArray *receivers;
@property (readonly, nonatomic) NSArray *receivedTrips;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sharedInstance;
+ (BOOL)_supportsPassingClosureReasons;

- (void)checkin;
- (void)refreshReceivedTripsWithCompletion:(id /* block */)a0;
- (void)_checkin;
- (void)fetchSharingIdentityWithCompletion:(id /* block */)a0;
- (void)sharingIdentityDidChange:(id)a0;
- (void)addSendingObserver:(id)a0;
- (void)destinationDidUpdateForSharedTrip:(id)a0;
- (BOOL)_serviceCanAttemptConnection:(id *)a0;
- (BOOL)_supportsArchivingSharingState;
- (void)_handleCheckinWithSharingIdentity:(id)a0 activeRecipients:(id)a1 serviceNamesByHandle:(id)a2 receivedTrips:(id)a3 permissions:(unsigned long long)a4;
- (void)sharedTripDidBecomeUnavailable:(id)a0;
- (void)_checkBlockList;
- (void)_networkReachabilityChanged:(id)a0;
- (void)dealloc;
- (void)_addTestTripsTo:(id)a0;
- (void)_stopSharingTripWithMessagesGroup:(id)a0 reason:(unsigned long long)a1 completion:(id /* block */)a2;
- (id)_serviceNameForContact:(id)a0;
- (id)serviceNameForContact:(id)a0;
- (void)fetchActiveHandlesWithCompletion:(id /* block */)a0;
- (id)_insertOrUpdateTrip:(id)a0;
- (id)_remoteObjectProxy;
- (id)archivedSharingState;
- (void)_performBlockWhenCheckinCompleted:(id /* block */)a0;
- (unsigned long long)capabilityTypeForContact:(id)a0 serviceName:(id *)a1 isActiveReceiver:(BOOL *)a2;
- (void)clearBlockedTripIdentifiers;
- (void)startSharingWithContact:(id)a0 completion:(id /* block */)a1;
- (void)sharedTripDidClose:(id)a0;
- (void)_checkinWithCompletion:(id /* block */)a0;
- (void)checkinWithCompletion:(id /* block */)a0;
- (void)_stopAllSharingWithReason:(unsigned long long)a0 completion:(id /* block */)a1;
- (void)_startSharingTripWithMessagesGroup:(id)a0 completion:(id /* block */)a1;
- (void)removeSendingObserver:(id)a0;
- (void)_stopSharingTripWithReason:(unsigned long long)a0 completion:(id /* block */)a1;
- (void)performBlockAfterInitialConnection:(id /* block */)a0;
- (void)etaDidUpdateForSharedTrip:(id)a0;
- (void)_checkEnabledState;
- (void)_startSharingWithContact:(id)a0 completion:(id /* block */)a1;
- (BOOL)isSharingWithContact:(id)a0;
- (id)_receivers;
- (void)fetchSharedTripsWithCompletion:(id /* block */)a0;
- (id)init;
- (void)_fetchRequiresUserConfirmationOfSharingIdentityWithCompletion:(id /* block */)a0;
- (void)blockSharedTripWithIdentifier:(id)a0;
- (void)_stopSharingTripWithContacts:(id)a0 reason:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)_subscribeToSharedTripUpdatesWithIdentifier:(id)a0 completion:(id /* block */)a1;
- (void)_performBlockAfterInitialConnection:(id /* block */)a0;
- (void)_startSharingTripWithContacts:(id)a0 capabilityType:(unsigned long long)a1 serviceName:(id)a2 completion:(id /* block */)a3;
- (void)fetchRequiresUserConfirmationOfSharingIdentityWithCompletion:(id /* block */)a0;
- (id)_subscriptionTokensForTripID:(id)a0 createIfNeeded:(BOOL)a1;
- (id)_remoteObjectProxyWithErrorHandler:(id /* block */)a0;
- (void)_performBlockAfterInitialSync:(id /* block */)a0;
- (void)destinationReachedDidUpdateForSharedTrip:(id)a0;
- (void)_systemBlockListDidUpdate;
- (void)unsubscribeFromSharedTripUpdatesWithIdentifier:(id)a0 completion:(id /* block */)a1;
- (BOOL)_isMapsInstalled;
- (void)stopSharingTripWithMessagesGroup:(id)a0 reason:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)_resetCheckinIdentityAndPermissions;
- (void)_fetchSharingIdentityWithCompletion:(id /* block */)a0;
- (void)reportUserConfirmationOfSharingIdentity:(id)a0 completion:(id /* block */)a1;
- (id)contactsFromArchivedTripSharingState:(id)a0;
- (void)sharedTripContactController:(id)a0 didUpdateActiveContactsValues:(id)a1;
- (void)sharedTripDidBecomeAvailable:(id)a0;
- (void)_purgeExpiredBlockedTripIdentifiers;
- (void)_reportUserConfirmationOfSharingIdentity:(id)a0 completion:(id /* block */)a1;
- (void)sharedTripDidUpdateRecipients:(id)a0 withServices:(id)a1;
- (id)_addSubscriptionTokenForTripID:(id)a0;
- (void)sharedTripInvalidatedWithError:(id)a0;
- (void)purgeExpiredBlockedTripIdentifiers;
- (void)_stopSharingWithContact:(id)a0 reason:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)stopAllSharingWithCompletion:(id /* block */)a0;
- (void)_stopMonitoringSystemBlockList;
- (BOOL)_supportsMonitoringBlockList;
- (void)_openConnectionIfNeeded;
- (void)refreshSharingIdentityWithCompletion:(id /* block */)a0;
- (void)startSharingTripWithContacts:(id)a0 capabilityType:(unsigned long long)a1 serviceName:(id)a2 completion:(id /* block */)a3;
- (void)sharedTripDidStartSharingWithIdentifier:(id)a0;
- (void)_validateCurrentConfigurationWithCompletion:(id /* block */)a0;
- (void)stopSharingTripWithReason:(unsigned long long)a0 completion:(id /* block */)a1;
- (void)startSharingTripWithMessagesGroup:(id)a0 completion:(id /* block */)a1;
- (void)_scheduleCoalescedBlockListCheckIfNeeded;
- (void)removeReceivingObserver:(id)a0;
- (void)routeDidUpdateForSharedTrip:(id)a0;
- (void)_fetchActiveHandlesWithCompletion:(id /* block */)a0;
- (void)blockSharedTrip:(id)a0;
- (void)performBlockAfterInitialSync:(id /* block */)a0;
- (unsigned long long)_capabilityTypeForContact:(id)a0 serviceName:(id *)a1 isActiveReceiver:(BOOL *)a2;
- (void)stopSharingTripWithContacts:(id)a0 reason:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)stopSharingWithContact:(id)a0 reason:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)purgeToken:(id)a0 forTripID:(id)a1;
- (void)_purgeToken:(id)a0 forTripID:(id)a1;
- (void)_startMonitoringSystemBlockListIfNeeded;
- (void)_subscriptionTokenDidInvalidate:(id)a0 forTripID:(id)a1;
- (void)addReceivingObserver:(id)a0;
- (void)_blockSharedTrip:(id)a0;
- (void)stopAllSharingWithReason:(unsigned long long)a0 completion:(id /* block */)a1;
- (void)stopSharingWithContact:(id)a0 completion:(id /* block */)a1;
- (void).cxx_destruct;
- (void)_clearBlockedTripIdentifiers;
- (void)subscribeToSharedTripUpdatesWithIdentifier:(id)a0 completion:(id /* block */)a1;
- (void)_fetchSharedTripsWithCompletion:(id /* block */)a0;

@end
