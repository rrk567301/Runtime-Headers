@class CUIVectorGlyphGraphicVariantOptions;

@interface _CUIGraphicVariantVectorGlyph : CUINamedVectorGlyph

@property (retain, nonatomic) CUIVectorGlyphGraphicVariantOptions *options;

- (double)baselineOffset;
- (unsigned long long)numberOfHierarchyLayers;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)drawInContext:(struct CGContext { } *)a0;
- (struct CGImage { } *)image;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1;
- (struct CGPath { } *)CGPath;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withColorResolver:(id /* block */)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRectUnrounded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentBounds;
- (struct CGImage { } *)imageWithColorResolver:(id /* block */)a0;
- (struct CGImage { } *)imageWithHierarchyColorResolver:(id /* block */)a0;
- (struct CGImage { } *)imageWithPaletteColorResolver:(id /* block */)a0;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withHierarchyColorResolver:(id /* block */)a2;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withPaletteColorResolver:(id /* block */)a2;
- (id)_layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 paletteColorResolver:(id /* block */)a2;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withPaletteColors:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_backgroundShapeBoundsForTargetSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (BOOL)_containsWideGamutColor;
- (struct CGContext { } *)_createBackgroundBitmapContextOfSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (struct CGGradient { } *)_createBackgroundGradientWithColors:(id)a0 useSCurve:(BOOL)a1 height:(double)a2;
- (struct CGImage { } *)_createBackgroundImageOfSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (struct CGPath { } *)_createBackgroundShapeInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 scale:(double)a1;
- (id)_createContentEffectsForTargetSize:(struct CGSize { double x0; double x1; })a0 scale:(double *)a1 contentEffectStyle:(long long)a2;
- (id)_createShapeEffectsForTargetSize:(struct CGSize { double x0; double x1; })a0 scale:(double *)a1;
- (void)_drawBackgroundShapeInContext:(struct CGContext { } *)a0 targetSize:(struct CGSize { double x0; double x1; })a1 scale:(double)a2;
- (void)_drawShapePathInContext:(struct CGContext { } *)a0 targetSize:(struct CGSize { double x0; double x1; })a1 scale:(double)a2 shapePath:(struct CGPath { } *)a3;
- (id)_encapsulatedGlyphForTargetSize:(struct CGSize { double x0; double x1; })a0 displayScale:(double)a1;
- (struct CGImage { } *)_imageWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1;
- (struct CGImage { } *)_imageWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 hierarchyColorResolver:(id /* block */)a2;
- (struct CGImage { } *)_imageWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 multiColorResolver:(id /* block */)a2;
- (struct CGImage { } *)_imageWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 paletteColorResolver:(id /* block */)a2;
- (struct CGImage { } *)_imageWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withTintColor:(struct CGColor { } *)a2;
- (id)_initWithBaseGlyph:(id)a0 options:(id)a1;
- (id)_layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1;
- (id)_layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 hierarchyColorResolver:(id /* block */)a2;
- (id)_layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 multiColorResolver:(id /* block */)a2;
- (id)_layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withTintColor:(struct CGColor { } *)a2;
- (struct CGSize { double x0; double x1; })_sizeOfBackgroundShape;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRectForTargetSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (double)baselineOffsetUnrounded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentBoundsUnrounded;
- (void)drawHierarchyLayerAtIndex:(unsigned long long)a0 inContext:(struct CGContext { } *)a1 withColorResolver:(id /* block */)a2;
- (void)drawInContext:(struct CGContext { } *)a0 withPaletteColors:(id)a1;
- (void)drawMulticolorLayerAtIndex:(unsigned long long)a0 inContext:(struct CGContext { } *)a1 withColorResolver:(id /* block */)a2;
- (void)drawPaletteLayerAtIndex:(unsigned long long)a0 inContext:(struct CGContext { } *)a1 withColorResolver:(id /* block */)a2;
- (void)drawWithTintColor:(struct CGColor { } *)a0 inContext:(struct CGContext { } *)a1;
- (id)graphicVariantWithOptions:(id)a0;
- (struct CGImage { } *)imageWithPaletteColors:(id)a0;
- (struct CGImage { } *)imageWithTintColor:(struct CGColor { } *)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interiorAlignmentRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interiorAlignmentRectForTargetSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interiorAlignmentRectUnrounded;
- (id)layerStackWithDisplayScale:(double)a0;
- (id)layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1;
- (id)layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withColorResolver:(id /* block */)a2;
- (id)layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withHierarchyColorResolver:(id /* block */)a2;
- (id)layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withPaletteColorResolver:(id /* block */)a2;
- (id)layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withPaletteColors:(id)a2;
- (id)layerStackWithDisplayScale:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withTintColor:(struct CGColor { } *)a2;
- (id)layerStackWithDisplayScale:(double)a0 withColorResolver:(id /* block */)a1;
- (id)layerStackWithDisplayScale:(double)a0 withHierarchyColorResolver:(id /* block */)a1;
- (id)layerStackWithDisplayScale:(double)a0 withPaletteColorResolver:(id /* block */)a1;
- (id)layerStackWithDisplayScale:(double)a0 withPaletteColors:(id)a1;
- (id)layerStackWithDisplayScale:(double)a0 withTintColor:(struct CGColor { } *)a1;
- (unsigned long long)numberOfMulticolorLayers;
- (struct CGImage { } *)rasterizeImageWithTintColor:(struct CGColor { } *)a0 usingScaleFactor:(double)a1 forTargetSize:(struct CGSize { double x0; double x1; })a2;

@end
