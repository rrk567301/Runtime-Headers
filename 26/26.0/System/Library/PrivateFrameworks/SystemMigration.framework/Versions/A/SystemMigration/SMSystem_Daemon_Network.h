@class SMNetworkSourceProxy, NSString, NSURL, NSNumber, NSOrderedSet, NSDictionary, NSImage, NSObject, SMNConnection, SMNNetworkSession, SMNNetServiceResolver;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface SMSystem_Daemon_Network : SMSystem_Daemon <SMNNetworkSessionDelegateProtocol>

@property unsigned long long remoteCapabilities;
@property (retain) NSString *remoteOSVersion;
@property (readonly) BOOL remoteIsROSV;
@property unsigned long long effectiveConnectionMethod;
@property unsigned long long localConnectionMethod;
@property unsigned long long remoteConnectionMethod;
@property unsigned long long availableConnectionMethods;
@property BOOL isCheckingForNewConnectionMethods;
@property (retain) NSString *serviceName;
@property (retain) NSString *serviceType;
@property BOOL connectionMethodHasChanged;
@property BOOL usedSWAP;
@property (retain) NSDictionary *descriptionData;
@property BOOL connected;
@property BOOL sourceKnowsPasscode;
@property (retain) NSString *handoffHint;
@property (retain) NSString *networkUUID;
@property (retain) NSString *remoteClientVersion;
@property (getter=isAttemptingWirelessSwitch) BOOL attemptingWirelessSwitch;
@property double activeConnectionBenchmark;
@property (retain) NSDictionary *allEstablishedConnections;
@property (retain) SMNConnection *activeConnection;
@property (retain) NSOrderedSet *auxConnections;
@property (retain) SMNNetServiceResolver *serviceResolver;
@property (nonatomic) struct __SecCertificate { } *trustedRemoteCertificate;
@property (retain) NSURL *url;
@property (retain) NSImage *icon;
@property BOOL connectOK;
@property BOOL connecting;
@property (retain) SMNNetworkSession *session;
@property (retain) NSObject<OS_dispatch_semaphore> *waitForCallbackSemaphore;
@property (retain) NSObject<OS_dispatch_queue> *atomicConnectionQueue;
@property BOOL determiningFastestConnection;
@property (retain) SMNetworkSourceProxy *networkProxy;
@property unsigned long long networkState;
@property (readonly) unsigned long long protocolVersion;
@property (readonly, weak) NSNumber *passcode;
@property (readonly) NSOrderedSet *fasterInterfaceRecommendations;
@property (readonly) NSString *fasterInterfaceRecommendation;
@property (readonly) NSOrderedSet *connectionFamilies;
@property (readonly) unsigned long long commonCapabilities;
@property (readonly) BOOL shouldSwitchToAccessPoint;
@property (readonly) BOOL hasSWAPConnection;
@property (retain) NSString *secretPassword;

+ (id)URLWithType:(id)a0 name:(id)a1;
+ (id)getSadAndGrayIconForModel:(id)a0 ofSize:(long long)a1;
+ (id)iconForFile:(id)a0 ofSize:(double)a1;
+ (id)keyPathsForValuesAffectingCommonCapabilities;
+ (id)keyPathsForValuesAffectingConnectionFamilies;
+ (id)keyPathsForValuesAffectingFasterInterfaceRecommendations;
+ (id)longTermIdentifierWithNameMatch:(id)a0;
+ (unsigned long long)requiredScannerState;

- (id)productVersion;
- (BOOL)isInternal;
- (BOOL)isCaseSensitive;
- (void)dealloc;
- (id)systemName;
- (BOOL)isEncrypted;
- (id)description;
- (id)statusDelegate;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (id)primaryIdentifier;
- (id)accessibilityDescription;
- (id)remoteProxy;
- (void).cxx_destruct;
- (id)displayState;
- (void)unmount;
- (BOOL)isMounted;
- (void)mount;
- (id)volumeName;
- (unsigned long long)systemType;
- (id)extendedDescription;
- (id)copier;
- (id)initWithSession:(id)a0 name:(id)a1 txtRecord:(id)a2;
- (BOOL)isNetworkSystem;
- (unsigned long long)alInterfaceToSMInterface:(int)a0;
- (void)attemptingWirelessSwitch:(BOOL)a0;
- (void)cancelDataTransfers;
- (BOOL)connectSession;
- (id)createFileManager;
- (void)descriptionForUpdatedConnectionsActiveChanged:(BOOL)a0 newActive:(id)a1 auxChanged:(BOOL)a2 newAux:(id)a3;
- (BOOL)disallowsIPV6;
- (BOOL)enumeratesDirectlyFromDatavolume;
- (double)estimatedTransferRate;
- (void)evaluateServerType;
- (id)filesystemEnumeratorAtRelativePath:(id)a0 skippingPaths:(id)a1 sizeRequired:(BOOL)a2;
- (id)getAllPossibleConnections;
- (id)getTransferMediumDescription;
- (id)getTypeDescription;
- (BOOL)independentlyHandlesReconnects;
- (BOOL)initiateMountIfPossible;
- (BOOL)isDefaultEffaceable;
- (BOOL)isMountableByUser;
- (id)localCertificates;
- (BOOL)matchesLongTermIdentifier:(id)a0;
- (void)mountSync;
- (void)mountWithCredentials:(id)a0;
- (Class)networkProxyClass;
- (void)notifySourceConnectionChanged;
- (void)observeChange;
- (id)organizeAllEstablishedConnections;
- (void)resumeDataTransfers;
- (void)session:(id)a0 activeConnection:(id)a1 auxConnections:(id)a2;
- (void)session:(id)a0 benchmarkedSoftAP:(double)a1 infrastructureSample:(double)a2;
- (void)session:(id)a0 didFailConnectionToPeerNamed:(id)a1;
- (void)session:(id)a0 discoveredPeerNamed:(id)a1;
- (void)session:(id)a0 failedToResolvePeerNamed:(id)a1 errorCode:(long long)a2;
- (void)session:(id)a0 finishedSamplingConnection:(id)a1;
- (void)session:(id)a0 newIncomingStream:(id)a1;
- (void)session:(id)a0 peerDisappeared:(id)a1;
- (void)session:(id)a0 peerNamed:(id)a1 updatedTxtRecord:(id)a2;
- (void)session:(id)a0 promotedNewConnectionToActive:(id)a1;
- (void)session:(id)a0 resolvedPeerNamed:(id)a1 txtRecord:(id)a2;
- (BOOL)session:(id)a0 shouldAcceptPeerWithAddress:(id)a1;
- (void)session:(id)a0 shouldSuspendFurtherActions:(BOOL)a1;
- (void)session:(id)a0 streamClosing:(id)a1;
- (void)sessionDetectedNetworkConfigurationChanged:(id)a0;
- (void)sessionDeterminingFastestConnection:(id)a0;
- (void)sessionHasFasterConnectionAvailable:(id)a0;
- (void)sessionInterrupted:(id)a0 connection:(id)a1 active:(BOOL)a2 didReplaceActiveConnection:(BOOL)a3;
- (void)sessionIsActive:(id)a0;
- (BOOL)shouldAcceptPeerCertificates:(id)a0;
- (id)volumeIcon;

@end
