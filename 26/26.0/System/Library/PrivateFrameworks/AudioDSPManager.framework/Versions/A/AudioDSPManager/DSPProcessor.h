@class RPBHost, NSString, NSDictionary, ADMNotificationVendor, ADMListenerRegistrationResults, NSObject, RPBItem;
@protocol OS_dispatch_object;

@interface DSPProcessor : NSObject <HAL_DSP_IOProcessor, HAL_DSP_PropertySet> {
    NSDictionary *_nsDescription;
    struct HostDescription { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } mBundleID; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } mIOContextUID; } _hostDescription;
    struct SystemConfiguration { struct ConfigurationContext { int mOS; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __pn_; } mResourcePath; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __pn_; } mTuningBasePath; struct optional<int> { union { char __null_state_; int __val_; } ; BOOL __engaged_; } mAcousticID; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __val_; } ; BOOL __engaged_; } mMacBoardID; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __val_; } ; BOOL __engaged_; } mHwModelName; BOOL mIsIntel; } mContext; struct optional<unsigned int> { union { char __null_state_; unsigned int __val_; } ; BOOL __engaged_; } mLayoutID; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } mHWIdentifier; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __pn_; } mTuningRootDirectory; struct unordered_map<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>>> { struct __hash_table<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } mIOSemanticToDSPMap; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } mProcessName; struct AudioCaptureOptions { unsigned int mExclaveAudioCapturePoints; } mAudioCaptureOptions; BOOL mDSPBypass; } _systemConfiguration;
    struct optional<adm::graph::GraphBuilder> { union { char __null_state_; struct GraphBuilder { struct SystemConfiguration { struct ConfigurationContext { int mOS; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __pn_; } mResourcePath; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __pn_; } mTuningBasePath; struct optional<int> { union { char __null_state_; int __val_; } ; BOOL __engaged_; } mAcousticID; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __val_; } ; BOOL __engaged_; } mMacBoardID; struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __val_; } ; BOOL __engaged_; } mHwModelName; BOOL mIsIntel; } mContext; struct optional<unsigned int> { union { char __null_state_; unsigned int __val_; } ; BOOL __engaged_; } mLayoutID; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } mHWIdentifier; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __pn_; } mTuningRootDirectory; struct unordered_map<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>>> { struct __hash_table<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } mIOSemanticToDSPMap; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } mProcessName; struct AudioCaptureOptions { unsigned int mExclaveAudioCapturePoints; } mAudioCaptureOptions; BOOL mDSPBypass; } mSystemConfig; struct HostDescription { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } mBundleID; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } mIOContextUID; } mHostDescription; } __val_; } ; BOOL __engaged_; } _graphBuilder;
    struct optional<adm::graph::NodeManager> { union { char __null_state_; struct NodeManager { struct unique_ptr<adm::vp::ProxyFactory, std::default_delete<adm::vp::ProxyFactory>> { struct ProxyFactory *__ptr_; } mVpProxyFactory; struct shared_ptr<adm::graph::DSPNode> { struct DSPNode *__ptr_; struct __shared_weak_count *__cntrl_; } mPreviousNode; } __val_; } ; BOOL __engaged_; } _nodeManager;
    struct optional<adm::CustomPropertyManager> { union { char __null_state_; struct CustomPropertyManager { struct function<void (CA::PropertyAddress)> { struct __value_func<void (CA::PropertyAddress)> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } mCallback; struct queue { struct object { NSObject<OS_dispatch_object> *fObj; } fObj; } mDispatchQueue; struct messenger { struct shared_ptr<caulk::concurrent::details::messenger_servicer> { struct messenger_servicer *__ptr_; struct __shared_weak_count *__cntrl_; } mServicer; } mMessenger; struct map<unsigned int, std::atomic<float>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::atomic<float>>>> { struct __tree<std::__value_type<unsigned int, std::atomic<float>>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, std::atomic<float>>, std::less<unsigned int>>, std::allocator<std::__value_type<unsigned int, std::atomic<float>>>> { void *__begin_node_; struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __end_node_; unsigned long long __size_; } __tree_; } mParameterStorage; struct weak_ptr<adm::graph::DSPNode> { struct DSPNode *__ptr_; struct __shared_weak_count *__cntrl_; } mActiveNode; } __val_; } ; BOOL __engaged_; } _customPropertyManager;
    struct optional<std::vector<adm::DeviceConfiguration>> { union { char __null_state_; struct vector<adm::DeviceConfiguration, std::allocator<adm::DeviceConfiguration>> { struct DeviceConfiguration *__begin_; struct DeviceConfiguration *__end_; struct DeviceConfiguration *__cap_; } __val_; } ; BOOL __engaged_; } _pendingDeviceConfigChanges;
    struct optional<std::vector<adm::DeviceConfiguration>> { union { char __null_state_; struct vector<adm::DeviceConfiguration, std::allocator<adm::DeviceConfiguration>> { struct DeviceConfiguration *__begin_; struct DeviceConfiguration *__end_; struct DeviceConfiguration *__cap_; } __val_; } ; BOOL __engaged_; } _activeDeviceConfigChanges;
    NSDictionary *_pendingConfiguration;
    struct optional<adm::ConfigurationChangeRequest> { union { char __null_state_; struct ConfigurationChangeRequest { BOOL mIsActivation; struct IOContextDescription { struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void *__begin_node_; struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __end_node_; unsigned long long __size_; } __tree_; } mSemantics; struct optional<CA::StreamDescription> { union { char __null_state_; struct StreamDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } __val_; } ; BOOL __engaged_; } mRequestedInputFormat; struct optional<CA::StreamDescription> { union { char __null_state_; struct StreamDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } __val_; } ; BOOL __engaged_; } mRequestedOutputFormat; struct optional<CA::ChannelLayout> { union { char __null_state_; struct ChannelLayout { struct vector<char, std::allocator<char>> { char *__begin_; char *__end_; char *__cap_; } mStorage; } __val_; } ; BOOL __engaged_; } mRequestedOutputChannelLayout; struct optional<unsigned int> { union { char __null_state_; unsigned int __val_; } ; BOOL __engaged_; } mRequestedBufferFrameSize; struct vector<std::string, std::allocator<std::string>> { void *__begin_; void *__end_; void *__cap_; } mStreamIDs; struct optional<adm::DSPSettings> { union { char __null_state_; struct DSPSettings { struct optional<adm::ContentCreationSettings> { union { char __null_state_; struct ContentCreationSettings { unsigned int mInputPortType; unsigned int mInputPortSubType; unsigned int mInputSubPortType; unsigned int mOutputPortType; unsigned int mOutputPortSubType; unsigned int mOutputSubPortType; BOOL mIsSharePlayActive; struct ArrayRef { struct ObjectRef<const __CFArray *> { struct __CFArray *mCFObject; } mObject; } mFIRFilterIDs; } __val_; } ; BOOL __engaged_; } mContentCreationSettings; } __val_; } ; BOOL __engaged_; } mDSPSettings; } mIOContextDescription; struct vector<adm::DeviceDescription, std::allocator<adm::DeviceDescription>> { struct DeviceDescription *__begin_; struct DeviceDescription *__end_; struct DeviceDescription *__cap_; } mDeviceDescriptions; } __val_; } ; BOOL __engaged_; } _pendingChangeRequest;
    NSDictionary *_activeConfiguration;
    struct optional<adm::ConfigurationChangeRequest> { union { char __null_state_; struct ConfigurationChangeRequest { BOOL mIsActivation; struct IOContextDescription { struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void *__begin_node_; struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __end_node_; unsigned long long __size_; } __tree_; } mSemantics; struct optional<CA::StreamDescription> { union { char __null_state_; struct StreamDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } __val_; } ; BOOL __engaged_; } mRequestedInputFormat; struct optional<CA::StreamDescription> { union { char __null_state_; struct StreamDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } __val_; } ; BOOL __engaged_; } mRequestedOutputFormat; struct optional<CA::ChannelLayout> { union { char __null_state_; struct ChannelLayout { struct vector<char, std::allocator<char>> { char *__begin_; char *__end_; char *__cap_; } mStorage; } __val_; } ; BOOL __engaged_; } mRequestedOutputChannelLayout; struct optional<unsigned int> { union { char __null_state_; unsigned int __val_; } ; BOOL __engaged_; } mRequestedBufferFrameSize; struct vector<std::string, std::allocator<std::string>> { void *__begin_; void *__end_; void *__cap_; } mStreamIDs; struct optional<adm::DSPSettings> { union { char __null_state_; struct DSPSettings { struct optional<adm::ContentCreationSettings> { union { char __null_state_; struct ContentCreationSettings { unsigned int mInputPortType; unsigned int mInputPortSubType; unsigned int mInputSubPortType; unsigned int mOutputPortType; unsigned int mOutputPortSubType; unsigned int mOutputSubPortType; BOOL mIsSharePlayActive; struct ArrayRef { struct ObjectRef<const __CFArray *> { struct __CFArray *mCFObject; } mObject; } mFIRFilterIDs; } __val_; } ; BOOL __engaged_; } mContentCreationSettings; } __val_; } ; BOOL __engaged_; } mDSPSettings; } mIOContextDescription; struct vector<adm::DeviceDescription, std::allocator<adm::DeviceDescription>> { struct DeviceDescription *__begin_; struct DeviceDescription *__end_; struct DeviceDescription *__cap_; } mDeviceDescriptions; } __val_; } ; BOOL __engaged_; } _activeChangeRequest;
    BOOL _hasRegisteredUIOrientation;
    ADMNotificationVendor *_notificationVendor;
    ADMListenerRegistrationResults *_coexNotificationRegistrationResults;
    RPBItem *_remoteProcessingBlockItem;
    RPBHost *_remoteProcessingBlockHost;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)adaptToConfigurationChange:(id)a0 withCallbacks:(void *)a1 error:(id *)a2;
- (id)getHostedDSPPropertyAtAddress:(struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; })a0 withQualifierData:(id)a1;
- (id)getHostedDSPPropertyInfoArray;
- (id)getProcessorPropertySet;
- (BOOL)hasHostedDSPPropertyAtAddress:(struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; })a0;
- (id)negotiateConfigurationChange:(id)a0 error:(id *)a1;
- (BOOL)setHostedDSPPropertyAtAddress:(struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; })a0 withData:(id)a1 withQualifier:(id)a2 error:(id *)a3;
- (id)simulateConfigurationChange:(id)a0 error:(id *)a1;
- (void)unregisterExternalNotifications;
- (void)connectRemoteProcessingBlockServer:(id)a0 host:(id)a1;
- (void)disconnectRemoteProcessingBlockServer:(id)a0 host:(id)a1;
- (id)doNegotiateConfigurationChange:(id)a0 simulate:(BOOL)a1 error:(id *)a2;
- (void)dumpDiagnosticsWithNSObject:(id)a0 name:(id)a1;
- (id)initWithHostDescription:(id)a0 hostCallback:(id)a1 systemConfiguration:(struct SystemConfiguration { struct ConfigurationContext { int x0; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x0; } x1; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x0; } x2; struct optional<int> { union { char x0; int x1; } x0; BOOL x1; } x3; struct optional<std::string> { union { char x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x1; } x0; BOOL x1; } x4; struct optional<std::string> { union { char x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x1; } x0; BOOL x1; } x5; BOOL x6; } x0; struct optional<unsigned int> { union { char x0; unsigned int x1; } x0; BOOL x1; } x1; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x2; struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x0; } x3; struct unordered_map<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>>> { struct __hash_table<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, adm::DSPGraphBasicConfiguration>>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x4; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x5; struct AudioCaptureOptions { unsigned int x0; } x6; BOOL x7; })a2;
- (void)registerExternalNotifications:(const struct NotificationSubscriptions { BOOL x0; BOOL x1; } *)a0;
- (BOOL)setHostedDSPPropertyAtAddress:(struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; })a0 withData:(id)a1 error:(id *)a2;
- (BOOL)validateAdaptConfigurationChangeRequest:(const void *)a0;

@end
