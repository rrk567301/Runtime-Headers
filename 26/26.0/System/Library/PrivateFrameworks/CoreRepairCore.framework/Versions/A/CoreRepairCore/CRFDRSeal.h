@class NSData, NSString, NSArray, NSURL, NSSet, NSMutableDictionary, NSDictionary, NSMutableArray, CRFDRBaseDeviceHandler, NSNumber;
@protocol setupModuleChallengeCallBack;

@interface CRFDRSeal : NSObject <CRFDR> {
    NSString *currentSerialNumber;
    NSString *currentMLBSerialNumber;
    NSString *KBBSerialNumber;
    NSString *KBBECID;
    NSString *KBBSIK;
    NSString *KGBSerialNumber;
    NSString *FDRCAURL;
    NSString *trustObjectURL;
    NSString *FDRDSURL;
    NSString *FDRSealingURL;
    BOOL doSeal;
    BOOL enableStagedSeal;
    BOOL ignoreStagedData;
    BOOL isStagedSealed;
    BOOL enableProxy;
    NSURL *dataDirectoryURL;
    NSDictionary *metadataDict;
    NSArray *removedProperties;
    NSDictionary *manifestDataClassesAndInstances;
    NSSet *overridePropertySet;
    NSMutableDictionary *postSealingManifest;
    NSMutableDictionary *preSealingManifest;
    NSString *FDRPersistentDataPath;
    NSMutableDictionary *repairStats;
    int sealCount;
    NSString *SOCKSHost;
    NSNumber *SOCKSPort;
    NSNumber *displayMaxDuration;
    NSData *keyBlob;
}

@property (retain, nonatomic) NSString *sealedDataInstance;
@property (retain, nonatomic) NSDictionary *claimDict;
@property (retain, nonatomic) NSDictionary *updateClassDict;
@property (retain, nonatomic) NSMutableArray *currentClasses;
@property (retain, nonatomic) NSMutableArray *currentInstances;
@property (retain, nonatomic) NSDictionary *currentProperties;
@property (retain, nonatomic) NSMutableArray *makeClasses;
@property (retain, nonatomic) NSMutableArray *makeInstances;
@property (retain, nonatomic) NSDictionary *makeProperties;
@property (retain, nonatomic) NSDictionary *updateProperties;
@property (retain, nonatomic) NSArray *minimalSealingInstances;
@property (retain, nonatomic) NSArray *minimalSealedClasses;
@property (retain, nonatomic) NSArray *minimalSealedInstances;
@property (retain, nonatomic) NSArray *minimalSealedVersions;
@property (retain, nonatomic) NSMutableArray *recoverDataClasses;
@property (retain, nonatomic) NSMutableArray *recoverDataInstances;
@property (retain, nonatomic) NSMutableArray *mergedDataClasses;
@property (retain, nonatomic) NSMutableArray *mergedDataInstances;
@property (retain, nonatomic) NSArray *patchItems;
@property (retain, nonatomic) NSArray *patchDataClasses;
@property (retain, nonatomic) NSArray *patchDataInstances;
@property (retain, nonatomic) NSArray *patchValues;
@property (retain, nonatomic) NSSet *partSPC;
@property (retain, nonatomic) NSString *failedSPC;
@property (nonatomic) BOOL skipStageEAN;
@property (nonatomic) BOOL allowUsedPart;
@property (nonatomic) BOOL allowSelfService;
@property (retain, nonatomic) NSData *apTicketData;
@property (weak, nonatomic) id<setupModuleChallengeCallBack> delegate;
@property (retain, nonatomic) CRFDRBaseDeviceHandler *handler;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)currentProcessHasEntitlement:(id)a0;

- (id)initWithParameters:(id)a0;
- (id)init;
- (void).cxx_destruct;
- (long long)CRFDRDataRepairRecover:(struct __AMFDR { } *)a0 fdrRemote:(struct __AMFDR { } *)a1 syncEAN:(BOOL)a2 fdrError:(id *)a3;
- (long long)CRFDRPostRecoverVerify:(struct __AMFDR { } *)a0 fdrRemote:(struct __AMFDR { } *)a1 syncEAN:(BOOL)a2 fdrError:(id *)a3;
- (long long)CRFDRVerifyLocal:(struct __AMFDR { } *)a0 fdrRemote:(struct __AMFDR { } *)a1 sealedData:(struct __AMFDRSealedData **)a2 mergedDataClasses:(id)a3 mergedDataInstances:(id)a4 currentManifestProperties:(id)a5 fdrError:(id *)a6 syncEAN:(BOOL)a7 postSeal:(BOOL)a8 ignoreBenignError:(BOOL)a9;
- (BOOL)CRFDRCheckVerificationFatalErrors:(struct __CFError { } *)a0 fdrLocal:(struct __AMFDR { } *)a1 sealedData:(struct __AMFDRSealedData { } *)a2 strict:(BOOL)a3;
- (long long)CRFDRLocalPopulate:(struct __AMFDR { } *)a0 fdrRemote:(struct __AMFDR { } *)a1 sealedData:(struct __AMFDRSealedData **)a2 fdrError:(id *)a3;
- (long long)CRFDRRecoverMissingData:(id *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrRemote:(struct __AMFDR { } *)a2;
- (long long)CRFDRVerifyProperties:(struct __AMFDR { } *)a0 currentManifestProperties:(id)a1 fdrError:(id *)a2;
- (id)_baseFDROptionsWithDataStore:(id)a0;
- (BOOL)_commitData:(id)a0 fdrlocal:(struct __AMFDR { } *)a1 fdrError:(id *)a2;
- (long long)_commitSealedData:(struct __AMFDR { } *)a0 fdrRemote:(struct __AMFDR { } *)a1 sealedData:(struct __AMFDRSealedData { } *)a2 syncEAN:(BOOL)a3 returnError:(id *)a4;
- (id)_copyFDROptionsForPatch:(struct __AMFDR { } *)a0;
- (long long)_fetchRemoteTrustObject:(struct __AMFDR { } *)a0 apTrustObjectDigest:(id)a1 remoteTrustObject:(id *)a2 fdrError:(id *)a3;
- (id)_getCRFDRMetaDataDictionary;
- (void)_logSealingRequest:(struct __AMFDRSealedData { } *)a0;
- (id)_personalizeTrustObjectWithDigest:(id)a0 withError:(id *)a1;
- (BOOL)_urlsOverrideIsAllowed;
- (BOOL)deleteLocalData:(id)a0;
- (BOOL)deleteLocalData:(id)a0 dataClass:(id)a1;
- (BOOL)generateFinalData;
- (id)initForRegisterChangeWithParameters:(id)a0;
- (long long)localPatch:(struct __AMFDR { } *)a0 dataClasses:(id)a1 dataInstances:(id)a2 values:(id)a3 error:(id *)a4;
- (long long)patchWithOptions:(id)a0 amfdr:(struct __AMFDR { } *)a1 dataClasses:(id)a2 dataInstances:(id)a3 values:(id)a4 datas:(id)a5 error:(id *)a6 local:(BOOL)a7;
- (long long)performHTTPChallengeClaim:(struct __AMFDR { } *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrError:(id *)a2 claimClassDict:(id)a3 registerOnly:(BOOL)a4;
- (long long)performMake:(struct __AMFDR { } *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrError:(id *)a2;
- (long long)performRealToRealRepair:(id *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrRemote:(struct __AMFDR { } *)a2;
- (long long)performRealToStagedRepair:(id *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrRemote:(struct __AMFDR { } *)a2;
- (long long)performSealing:(struct __AMFDR { } *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrError:(id *)a2;
- (long long)performStagedChallengeClaim:(struct __AMFDR { } *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrError:(id *)a2 claimClassDict:(id)a3;
- (long long)performStagedMake:(struct __AMFDR { } *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrError:(id *)a2;
- (long long)performStagedSealing:(struct __AMFDR { } *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrError:(id *)a2;
- (long long)performStagedToRealRepair:(id *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrRemote:(struct __AMFDR { } *)a2;
- (long long)performStagedToStagedRepair:(id *)a0 fdrLocal:(struct __AMFDR { } *)a1 fdrRemote:(struct __AMFDR { } *)a2;
- (long long)prefetchPermissionsForSealing:(id *)a0 fdrRemote:(struct __AMFDR { } *)a1 fdrLocal:(struct __AMFDR { } *)a2 claimClassDict:(id)a3 makeClasses:(id)a4 makeInstances:(id)a5 patchClasses:(id)a6 patchInstances:(id)a7;
- (long long)prefetchPermissionsForStagedSealing:(id *)a0 fdrRemote:(struct __AMFDR { } *)a1 fdrLocal:(struct __AMFDR { } *)a2 claimClassDict:(id)a3 makeClasses:(id)a4 makeInstances:(id)a5 patchClasses:(id)a6 patchInstances:(id)a7;
- (long long)prefetchPermissionsWith:(struct __AMFDR { } *)a0 returnError:(id *)a1;
- (long long)registerChangeForComponent:(id)a0 fdrError:(id *)a1;
- (long long)remotePatch:(struct __AMFDR { } *)a0 dataClasses:(id)a1 dataInstances:(id)a2 values:(id)a3 datas:(id)a4 error:(id *)a5;
- (long long)seal:(id *)a0 oldSealingManifest:(id *)a1 newSealingManifest:(id *)a2 stats:(id *)a3;
- (long long)sealWithDataClass:(id)a0 fdrError:(id *)a1 registerOnly:(BOOL)a2;
- (id)setLocalAndRemotePermission:(struct __AMFDR { } *)a0 fdrRemote:(struct __AMFDR { } *)a1;
- (long long)setLocalAndRemoteTrustObject:(struct __AMFDR { } *)a0 fdrLocal:(struct __AMFDR { } *)a1 remoteTrustObjectDigest:(id)a2 fdrError:(id *)a3;
- (BOOL)stageDataClasses:(id)a0 dataInstances:(id)a1 fdrRemote:(struct __AMFDR { } *)a2 fdrLocal:(struct __AMFDR { } *)a3 fdrError:(id *)a4;
- (id)summarizePatchInputs;
- (long long)verifyClaimCountAndSalesDistrictWithError:(id *)a0;

@end
