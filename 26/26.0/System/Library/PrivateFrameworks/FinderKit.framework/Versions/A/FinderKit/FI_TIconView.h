@class NSAccessibilityCustomAction, NSObject, FI_TTitleBubbleView, NSFont, NSString, FI_TTrackingImageView, NSSet, FI_TButton, FI_TTextField, NSImage, FI_TIconSelectionView, FI_TDesktopInlineProgressView, FI_TBasicImageView, NSColor;
@protocol TDraggingDestinationDelegate, TSpringLoadingDestinationDelegate;

@interface FI_TIconView : FI_TUpdateLayerView <TCollectionViewItemViewProtocol, TImageAttachmentContainer, NSDraggingDestination, TMarkTornDown> {
    FI_TTrackingImageView *_iconView;
    FI_TIconSelectionView *_iconSelectionView;
    FI_TBasicImageView *_badgeImageView;
    FI_TBasicImageView *_vendorBadgeImageView;
    FI_TDesktopInlineProgressView *_inlineProgressView;
    FI_TButton *_copyResumeButton;
    FI_TTitleBubbleView *_titleBubbleView;
    FI_TTextField *_subtitleField;
    struct TProgressStateAggregator { int fCloudBadgePrevious; int fCloudBadgeCurrent; struct TNodeProgressStatus { unsigned int fOperationState; float fPercentageDone; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fOperationType; BOOL fCancellable; BOOL fCancelled; BOOL fPausable; BOOL fUserDownload; NSImage *fImage; float fDownloadPercentageDone; long long fDownloadTotalSize; long long fDownloadCompletedSize; float fUploadPercentageDone; long long fUploadTotalSize; long long fUploadCompletedSize; } fProgressStatus; double fIncrementalProgress; BOOL fResumable; } _progressStateAggregator;
    struct CGSize { double width; double height; } _iconSize;
    struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } _titleStr;
    NSFont *_titleFont;
    NSColor *_titleFontColor;
    NSSet *_subtitleStringSet;
    NSFont *_subtitleFont;
    NSColor *_subtitleFontColor;
    double _gridSpacing;
    struct vector<int, std::allocator<int>> { int *__begin_; int *__end_; int *__cap_; } _tagColorIndexes;
    NSColor *_superViewsBackgroundColor;
    NSImage *_placeholderTagImage;
    NSImage *_imageAttachment;
    struct TTitleViewBadgeConfigurator { struct unique_ptr<TTitleViewBadgeConfigurator::Details, std::default_delete<TTitleViewBadgeConfigurator::Details>> { struct Details *__ptr_; } fDetails; } _badgeConfigurator;
    BOOL _inlineProgressNeedsBaselineRefresh;
    BOOL _isTitleOnBottom;
    BOOL _isTitleEnabled;
    BOOL _isSubtitleEnabled;
    BOOL _isOverlappingTitle;
    struct TNSWeakPtr<NSObject<TDraggingDestinationDelegate,TSpringLoadingDestinationDelegate>> { NSObject<TDraggingDestinationDelegate, TSpringLoadingDestinationDelegate> *fWeakObject; } _weakDelegate;
    struct TKeyValueBinder { NSObject *fReceiverObj; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fReceiversBinding; } _titleBubbleViewHiddenBinder;
    struct TKeyValueBinder { NSObject *fReceiverObj; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fReceiversBinding; } _titleBubbleViewSelectedBinder;
    struct TKeyValueBinder { NSObject *fReceiverObj; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fReceiversBinding; } _subtitleFieldHiddenBinder;
    struct TKeyValueBinder { NSObject *fReceiverObj; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fReceiversBinding; } _iconSelectionViewIconSizeBinder;
    NSAccessibilityCustomAction *_axOpenAction;
}

@property (readonly) BOOL iconSelectionViewShouldShow;
@property (weak, nonatomic) NSObject<TDraggingDestinationDelegate, TSpringLoadingDestinationDelegate> *delegate;
@property (nonatomic) struct CGSize { double x0; double x1; } iconSize;
@property (copy, nonatomic) NSImage *iconImage;
@property (readonly, nonatomic) FI_TTrackingImageView *iconView;
@property (copy, nonatomic) NSString *titleStr;
@property (copy, nonatomic) NSFont *titleFont;
@property (copy, nonatomic) NSColor *titleFontColor;
@property (copy, nonatomic) NSString *iCloudSubtitleToolTip;
@property (copy, nonatomic) NSString *accessibilityAnnotations;
@property (copy, nonatomic) NSFont *subtitleFont;
@property (copy, nonatomic) NSColor *subtitleFontColor;
@property (copy, nonatomic) NSSet *subtitleStringSet;
@property (copy, nonatomic) NSImage *badgeImage;
@property (copy, nonatomic) NSImage *vendorBadgeImage;
@property (nonatomic) double gridSpacing;
@property (nonatomic) const void *tagColorIndexes;
@property (nonatomic, getter=isIconHidden) BOOL iconHidden;
@property (nonatomic, getter=isIconDimmed) BOOL iconDimmed;
@property (nonatomic, getter=isTitleDimmed) BOOL titleDimmed;
@property (nonatomic, getter=isTitleOnBottom) BOOL titleOnBottom;
@property (nonatomic, getter=isTitleEnabled) BOOL titleEnabled;
@property (nonatomic, getter=isSubtitleEnabled) BOOL subtitleEnabled;
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isSelectionBordered) BOOL selectionBordered;
@property (nonatomic, getter=isDropTarget) BOOL dropTarget;
@property (nonatomic, getter=isDragItem) BOOL dragItem;
@property (nonatomic, getter=isEditing) BOOL editing;
@property (nonatomic) BOOL useActiveAppearance;
@property (nonatomic, getter=isOverlappingTitle) BOOL overlappingTitle;
@property (nonatomic, getter=isSpringBlinkingOff) BOOL springBlinkingOff;
@property (getter=isTornDown) BOOL tornDown;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (Class)iconSelectionViewClass;
+ (id)keyPathsForValuesAffectingSubtitleFieldIsHidden;
+ (id)keyPathsForValuesAffectingTitleBubbleViewIsHidden;
+ (id)keyPathsForValuesAffectingTitleBubbleViewIsSelected;

- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrame;
- (void)mouseDown:(id)a0;
- (id)accessibilityLabel;
- (void)updateSelection;
- (BOOL)isAnimating;
- (void)layout;
- (double)firstBaselineOffsetFromTop;
- (id)accessibilityIdentifier;
- (double)lastBaselineOffsetFromBottom;
- (id)accessibilityTitle;
- (BOOL)isDimmed;
- (id).cxx_construct;
- (id)accessibilityRole;
- (void)initCommon;
- (void)prepareForReuse;
- (BOOL)isAccessibilityElement;
- (void).cxx_destruct;
- (void)draggingExited:(id)a0;
- (id)_titleViews;
- (void)_windowChangedKeyState;
- (BOOL)acceptsFirstMouse:(id)a0;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityActionNames;
- (id)accessibilityFilename;
- (id)accessibilityHelp;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (void)accessibilityPerformAction:(id)a0;
- (id)accessibilityRoleDescription;
- (void)concludeDragOperation:(id)a0;
- (void)draggingEnded:(id)a0;
- (unsigned long long)draggingEntered:(id)a0;
- (unsigned long long)draggingUpdated:(id)a0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)isAccessibilityEnabled;
- (BOOL)isAccessibilitySelected;
- (BOOL)performDragOperation:(id)a0;
- (BOOL)prepareForDragOperation:(id)a0;
- (void)updateDraggingItemsForDrag:(id)a0;
- (BOOL)wantsPeriodicDraggingUpdates;
- (void)aboutToTearDown;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleFrame;
- (BOOL)isLTRLocalization;
- (double)titleFontSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })iconFrame;
- (id)_titleFontColor;
- (BOOL)isIconTracking:(id)a0;
- (void)setIconToolTip:(id)a0;
- (id)titleBubbleView;
- (id)_hitTestInIconOrTextWithLocalPoint:(const struct CGPoint { double x0; double x1; } *)a0;
- (id)_hitTestInIconWithLocalPoint:(const struct CGPoint { double x0; double x1; } *)a0;
- (id)_hitTestInTextWithLocalPoint:(const struct CGPoint { double x0; double x1; } *)a0;
- (id)_hitTestWithLocalPoint:(const struct CGPoint { double x0; double x1; } *)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_iconFrame;
- (id)_subtitleFontColor;
- (double)_subtitleFontSize;
- (void)clearIconTracking;
- (void)configureSubtitleFieldBeforeLayout;
- (void)configureTitleBubbleViewBeforeLayout;
- (void)dirtyLayoutForSubtitleBubbleViewIfNeeded;
- (void)dirtyLayoutForTitleBubbleViewIfNeeded;
- (BOOL)dirtyLayoutIfNeededWithBadge:(id)a0 badgeImageView:(id)a1;
- (id)dragFlockingIconImage:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (id)dragFlockingTitleImage:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (id)hitTestInIcon:(struct CGPoint { double x0; double x1; })a0;
- (id)hitTestInIconOrText:(const struct CGPoint { double x0; double x1; } *)a0;
- (id)hitTestInText:(const struct CGPoint { double x0; double x1; } *)a0;
- (id)iconSelectionView;
- (BOOL)isIconOrTextInRect:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (void)layoutBadgeImageView:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (void)layoutIconSelectionView:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)layoutSubtitleField:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (void)layoutTitleAndSubtitleInBounds:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 iconViewFrame:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1;
- (void)layoutTitleBubbleView:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (void)layoutVendorBadgeImageView:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (BOOL)overlappingTitle:(id)a0 inCollectionView:(id)a1;
- (id)popoverAnchorView;
- (void)selectWithAnimation;
- (void)setBadgeConfigurator:(void *)a0;
- (BOOL)setImageAttachment:(id)a0 toolTip:(const void *)a1;
- (void)setInlineProgressStatus:(const void *)a0 cancelHandler:(const void *)a1;
- (void)setSelected:(BOOL)a0 withAnimation:(BOOL)a1;
- (void)showSelection:(BOOL)a0 withAnimation:(BOOL)a1;
- (void)startIconTracking:(id)a0 options:(unsigned long long)a1 userInfo:(id)a2;
- (void)stopIconTracking:(id)a0;
- (id)subtitleFieldAttributesWithParagraphStyleHint:(id)a0;
- (BOOL)subtitleFieldIsHidden;
- (BOOL)subtitleFieldIsHiddenForLayout;
- (double)subtitleFontSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleBubbleFrame;
- (BOOL)titleBubbleViewIsHidden;
- (BOOL)titleBubbleViewIsHiddenForLayout;
- (BOOL)titleBubbleViewIsSelected;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleDraggingFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleEditingFrame;
- (id)titleFieldAttributesWithParagraphStyleHint:(id)a0;
- (void)updateInlineProgressBaselineLayout:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (void)updateInlineProgressView;
- (void)updateInlineProgressViewCancelHandler:(const void *)a0;
- (void)updateSubtitleFieldAttributes;
- (void)updateSubtitleFontForTitleFontChange;
- (void)updateSuperViewsBackgroundColor:(id)a0;
- (void)updateTitleFieldAttributes;

@end
