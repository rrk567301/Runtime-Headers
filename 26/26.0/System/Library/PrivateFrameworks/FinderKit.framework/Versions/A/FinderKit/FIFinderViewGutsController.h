@class FIBrowserOverlayStackViewController, NSStackView, FI_TBrowserContentViewController, NSURL, NSObject, FI_TRunAfterHelper, FIContainerController, FI_NewFolderController, FIFinderView, FI_TNotificationCenterObserverGlue, NSString, NSArray, FI_TUpdateLayerView;

@interface FIFinderViewGutsController : FI_TViewController <FILocationPopUpDelegate, FIBrowserOverlayStackViewDelegate, NSMenuDelegate, NSMenuItemValidation, BrowserContainerTargeting, BrowserContainerSearching, BrowserContainerDelegate> {
    FIBrowserOverlayStackViewController *_overlayStackViewController;
    struct TKeyValueBinder { NSObject *fReceiverObj; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fReceiversBinding; } _viewStyleBinder;
    FI_TBrowserContentViewController *_contentViewController;
    struct TKeyValueBinder { NSObject *fReceiverObj; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fReceiversBinding; } _activeContainerBinder;
    FI_TUpdateLayerView *_popoverView;
    struct TNSWeakPtr<FI_TRunAfterHelper> { FI_TRunAfterHelper *fWeakObject; } _pendingWindowOrderedOutToken;
    FI_NewFolderController *_newFolderController;
    struct list<NSURL *, std::allocator<NSURL *>> { struct __list_node_base<NSURL *, void *> { void *__prev_; void *__next_; } __end_; unsigned long long __size_; } _pendingTargetURLQueue;
    NSURL *_lastTargetedURL;
    struct TFENode { struct OpaqueNodeRef *fNodeRef; } _pendingTargetNode;
    NSArray *_cachedSelectedURLs;
    struct TFENodeVector { struct TFENode *__begin_; struct TFENode *__end_; struct TFENode *__cap_; } _targetPath;
    struct TFENodeVector { struct TFENode *__begin_; struct TFENode *__end_; struct TFENode *__cap_; } _pendingSelectionToOpen;
    unsigned long long _mediaBrowserShownTypes;
    BOOL _pendingSelectFirstKeyView;
    BOOL _treatsFilePackagesAsDirectories;
    BOOL _resolvesAliases;
    BOOL _canClickDisabledFiles;
    BOOL _allowsExpandingMultipleDirectories;
    BOOL _updatingTargetPath;
    BOOL _alreadySetIsSavePanel;
    BOOL _showsNewDocumentButton;
    BOOL _inDelegateCallback;
    BOOL _offersHideExtension;
    BOOL _hideExtension;
    struct TNSWeakPtr<FI_TRunAfterHelper> { FI_TRunAfterHelper *fWeakObject; } _handleInitialTargetingToken;
    struct TNSWeakPtr<FI_TRunAfterHelper> { FI_TRunAfterHelper *fWeakObject; } _historyBeginsNowToken;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _enableStatesCacheLock;
    long long _enableStatesGenerationCount;
    struct unordered_map<TFENode, std::optional<bool>, std::hash<TFENode>, std::equal_to<TFENode>, std::allocator<std::pair<const TFENode, std::optional<bool>>>> { struct __hash_table<std::__hash_value_type<TFENode, std::optional<bool>>, std::__unordered_map_hasher<TFENode, std::__hash_value_type<TFENode, std::optional<bool>>, std::hash<TFENode>, std::equal_to<TFENode>>, std::__unordered_map_equal<TFENode, std::__hash_value_type<TFENode, std::optional<bool>>, std::equal_to<TFENode>, std::hash<TFENode>>, std::allocator<std::__hash_value_type<TFENode, std::optional<bool>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TFENode, std::optional<bool>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TFENode, std::optional<bool>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TFENode, std::optional<bool>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<TFENode, std::optional<bool>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _enableStatesCache;
    struct TNotificationCenterObserver { NSObject *fObservedObject; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fNotificationName; FI_TNotificationCenterObserverGlue *fFunctorGlue; BOOL fIsDistributedObserving; struct function<NSNotificationCenter *()> { struct __value_func<NSNotificationCenter *()> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } fCenterProvider; } _nodeDidResolveObserver;
    struct TNotificationCenterObserver { NSObject *fObservedObject; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fNotificationName; FI_TNotificationCenterObserverGlue *fFunctorGlue; BOOL fIsDistributedObserving; struct function<NSNotificationCenter *()> { struct __value_func<NSNotificationCenter *()> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } fCenterProvider; } _windowWillStartLiveResizeObserver;
    struct TNotificationCenterObserver { NSObject *fObservedObject; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fNotificationName; FI_TNotificationCenterObserverGlue *fFunctorGlue; BOOL fIsDistributedObserving; struct function<NSNotificationCenter *()> { struct __value_func<NSNotificationCenter *()> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } fCenterProvider; } _windowDidEndLiveResizeObserver;
    struct TNotificationCenterObserver { NSObject *fObservedObject; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fNotificationName; FI_TNotificationCenterObserverGlue *fFunctorGlue; BOOL fIsDistributedObserving; struct function<NSNotificationCenter *()> { struct __value_func<NSNotificationCenter *()> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } fCenterProvider; } _windowDidLiveResizeObserver;
    struct TNotificationCenterObserver { NSObject *fObservedObject; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fNotificationName; FI_TNotificationCenterObserverGlue *fFunctorGlue; BOOL fIsDistributedObserving; struct function<NSNotificationCenter *()> { struct __value_func<NSNotificationCenter *()> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } fCenterProvider; } _ubiquityIdentityChangedObserver;
    struct TNotificationCenterObserver { NSObject *fObservedObject; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fNotificationName; FI_TNotificationCenterObserverGlue *fFunctorGlue; BOOL fIsDistributedObserving; struct function<NSNotificationCenter *()> { struct __value_func<NSNotificationCenter *()> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } fCenterProvider; } _urlResolutionCompletedObserver;
    struct vector<TNotificationCenterObserver, std::allocator<TNotificationCenterObserver>> { struct TNotificationCenterObserver *__begin_; struct TNotificationCenterObserver *__end_; struct TNotificationCenterObserver *__cap_; } _prefObservers;
    struct TKeyValueBinder { NSObject *fReceiverObj; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fReceiversBinding; } _isPopulationInProgressBinder;
    struct TKeyValueBinder { NSObject *fReceiverObj; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> { struct __CFString *fRef; } fString; } fReceiversBinding; } _arrangeByMenuBinder;
}

@property const void *targetPath;
@property (retain, nonatomic) FIContainerController *activeContainer;
@property (readonly, weak, nonatomic) FIFinderView *finderView;
@property (readonly, retain, nonatomic) NSStackView *topBrowserOverlayStackView;
@property (readonly, retain, nonatomic) NSStackView *bottomBrowserOverlayStackView;
@property (copy, nonatomic) NSArray *selectedURLs;
@property (readonly, nonatomic) NSArray *selectedRawURLs;
@property (nonatomic) BOOL binding;
@property (nonatomic) int pendingViewStyle;
@property (readonly, nonatomic) int viewStyle;
@property (nonatomic) int previousViewStyle;
@property (readonly, nonatomic) BOOL forcedReloadIsPending;
@property (readonly, nonatomic) BOOL expanded;
@property (nonatomic) BOOL animatingExpandOrCollapse;
@property (readonly, nonatomic) BOOL showing;
@property (nonatomic) BOOL allowNonemptyTarget;
@property (readonly, nonatomic) BOOL isPopulationInProgress;
@property (nonatomic) BOOL allowsMultipleSelection;
@property (nonatomic) BOOL isSavePanel;
@property (readonly, nonatomic) BOOL canCreateNewFolder;
@property (nonatomic) BOOL showsNewDocumentButton;
@property (readonly, nonatomic) BOOL downloadsUbiquitousContents;
@property (readonly, nonatomic) struct TFENode { struct OpaqueNodeRef *x0; } targetNode;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)instanceMethodSignatureForSelector:(SEL)a0;
+ (void)finalizeCounted;
+ (struct TFENode { struct OpaqueNodeRef *x0; })fallbackTargetNode;
+ (void)initializeCounted;
+ (id)keyPathsForValuesAffectingArrangeByEnabled;
+ (id)keyPathsForValuesAffectingCanCreateNewFolder;
+ (id)keyPathsForValuesAffectingCanSaveNewDocument;
+ (id)keyPathsForValuesAffectingViewStyle;
+ (id)keyPathsForValuesAffectingViewSwitcherEnabled;
+ (BOOL)shouldForwardSelectorToContainer:(SEL)a0;
+ (void)triggerAutoreleasePoolsToDrain;
+ (void)watchForApplicationTermination;

- (id)windowState;
- (BOOL)validateMenuItem:(id)a0;
- (id)window;
- (void)dealloc;
- (id)initWithView:(id)a0;
- (void)viewDidAppear;
- (id)forwardingTargetForSelector:(SEL)a0;
- (struct TFENode { struct OpaqueNodeRef *x0; })target;
- (id)directoryURL;
- (void)viewDidMoveToWindow;
- (id).cxx_construct;
- (BOOL)respondsToSelector:(SEL)a0;
- (void)setDirectoryURL:(id)a0;
- (void)initCommon;
- (id)defaultDirectoryURL;
- (void)setExpanded:(BOOL)a0;
- (void).cxx_destruct;
- (id)nibName;
- (BOOL)resolvesAliases;
- (BOOL)treatsFilePackagesAsDirectories;
- (void)windowOrderedIn;
- (id)locationAreaLeadingLayoutAnchor;
- (void)refreshContents;
- (void)_windowDidEndLiveResize:(id)a0;
- (void)_windowWillStartLiveResize:(id)a0;
- (double)fauxToolbarHeightForAppCentric:(BOOL)a0 runningAsAService:(BOOL)a1;
- (void)finderLocationPopUp:(id)a0 didChangeToDirectoryURL:(id)a1;
- (id)finderLocationPopUpRequestRecentPlaces:(id)a0;
- (BOOL)hideExtension;
- (id)locationAreaTrailingLayoutAnchor;
- (void)makeNewFolderForSavePanel:(id)a0;
- (BOOL)offersHideExtension;
- (BOOL)performKeyEquivalent:(id)a0;
- (BOOL)previewPanel:(id)a0 shouldShowOpenButtonForItem:(id)a1;
- (id)rootDirectoryURL;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })seamlessOpener:(id)a0 sourceFrameOnScreenForPreviewItem:(id)a1;
- (id)seamlessOpener:(id)a0 transitionImageForPreviewItem:(id)a1 contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2;
- (void)selectFirstKeyView;
- (id)selectedSeamlessOpenerPreviewItems;
- (void)setAllowsExpandingMultipleDirectories:(BOOL)a0;
- (void)setCanClickDisabledFiles:(BOOL)a0;
- (void)setHideExtension:(BOOL)a0;
- (void)setMediaBrowserShownTypes:(unsigned long long)a0;
- (void)setOffersHideExtension:(BOOL)a0;
- (void)setResolvesAliases:(BOOL)a0;
- (void)setRootDirectoryURL:(id)a0;
- (void)setShowsHiddenFiles:(BOOL)a0;
- (void)setTreatsFilePackagesAsDirectories:(BOOL)a0;
- (BOOL)shouldEnableShareButton;
- (BOOL)showGotoWithInitialFilename:(id)a0;
- (BOOL)showsHiddenFiles;
- (BOOL)sidebarContainsURL:(id)a0;
- (BOOL)startDownloadingSelectedItemsIfNecessary;
- (void)viewWillAppear;
- (id)whereLabelLeadingLayoutAnchor;
- (id)whereLabelTrailingLayoutAnchor;
- (long long)windowNumber;
- (void)windowOrderedOut;
- (void)configureView;
- (void)setTargetNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)shouldShowRecents;
- (void)_notifyDelegateViewStyleChanged;
- (void)containerConnectBackupDelegate:(id)a0;
- (void)containerTitleSeparatorChanged:(id)a0;
- (void)didChangeTarget;
- (void)finderLocationPopUpWillDisplay:(id)a0;
- (struct TFENode { struct OpaqueNodeRef *x0; })remapIfNeeded:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 programmatically:(BOOL)a1;
- (BOOL)targetingICloud;
- (void)windowOrderedInAndAboutToAppear;
- (void)configureWindowForContentChange;
- (BOOL)_canSelectURL:(id)a0;
- (void)_changeMediaBrowserTypeTo:(unsigned long long)a0;
- (int)_convertViewStyle:(int)a0 forTargetPath:(const void *)a1;
- (void)_delegateConfigureForGotoWithFilename:(id)a0;
- (BOOL)_delegateHandleOpenSelection;
- (void)_didResolveNodeNotification:(id)a0;
- (BOOL)_goIntoSelectedFolder;
- (BOOL)_goUpToParentFolder;
- (struct TFENode { struct OpaqueNodeRef *x0; })_initialTargetNode;
- (void)_internalSetTargetPath:(const void *)a0 withViewStyle:(int)a1;
- (struct TFENode { struct OpaqueNodeRef *x0; })_quickFollowAliasChainForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)_replaceUnresolvedTarget:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 withTarget:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a1;
- (void)_windowDidResize;
- (void)aboutToDestroyBrowserView;
- (id)activeBrowserViewController;
- (void)adjustBackForwardSegments;
- (void)adjustTopBar;
- (BOOL)allSelectedItemsAreDownloadedIfNeeded;
- (BOOL)allowsBrowsingPackages;
- (BOOL)allowsExpandingMultipleDirectories;
- (id)appCustomMenuItemsForNodes:(const void *)a0;
- (BOOL)arrangeByEnabled;
- (Class)browserContainerClass;
- (void)cacheShareButton:(id)a0;
- (void)cacheTagsButton:(id)a0;
- (struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; })cachedEnableStateForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)canBrowseNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)canClickDimmedNodes;
- (BOOL)canClickDisabledFiles;
- (BOOL)canSaveNewDocument;
- (BOOL)canSelectNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)clickedOnDisabledNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)cmdEditTagsInOpenPanel:(id)a0;
- (void)cmdToggleFinderKitSidebar:(id)a0;
- (void)configureOverlayStackViewController;
- (void)container:(id)a0 adjustProposedTargetPath:(void *)a1;
- (void)containerCloseContainer:(id)a0;
- (void)containerContentChanged:(id)a0;
- (void)containerForgetSpringState:(id)a0;
- (void)containerHistoryDidChange:(id)a0;
- (BOOL)containerInBrowseMode:(id)a0;
- (id)containerQuerySearchUTIs:(id)a0;
- (void)containerSelectionChanged:(id)a0;
- (void)containerTargetDidChange:(id)a0;
- (void)containerTargetWillChange:(id)a0;
- (BOOL)containerValidateToolbarItem:(id)a0;
- (void)containerViewStyleChanged:(id)a0;
- (void)containerWindowDidChange:(id)a0;
- (id)containerWindowState:(id)a0;
- (BOOL)contentFlowsUnderToolbar;
- (void)copySearchFieldFromOther:(id)a0;
- (void)deferredRetargetAndReloadForNode:(struct TFENode { struct OpaqueNodeRef *x0; })a0;
- (void)didChangeSelection;
- (void)didFinishConfiguration;
- (void)disableHistoryAndDoWork:(const void *)a0;
- (BOOL)finderLocationPopUpSidebarIsShowing:(id)a0;
- (BOOL)finderLocationPopUpWantsSidebarMenuItem:(id)a0;
- (void)forceContainerToExistWithTargetPath:(struct TFENodeVector { struct TFENode *x0; struct TFENode *x1; struct TFENode *x2; })a0;
- (void)handleInitialTargeting;
- (void)handlePendingWindowOrderedOut;
- (BOOL)hidesSharedItems;
- (void)historyBeginsNow;
- (void)iconAppearancePrefChanged:(BOOL)a0;
- (BOOL)inBrowseMode;
- (void)invalidateEnableStates;
- (BOOL)isNewFolderDialogRunning;
- (void)makeTargetPathValid;
- (BOOL)nodeIsDimmed:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)openLocation:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 origin:(struct shared_ptr<ISpawnOrigin> { struct ISpawnOrigin *x0; struct __shared_weak_count *x1; })a1;
- (void)openPendingSelectionIfPossible;
- (void)openQuickLookNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)openSelection;
- (BOOL)panelDisableNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)prepareToHide;
- (void)prepareToHideOverlayStackViewController;
- (void)prepareToShow;
- (BOOL)quickLookShouldShowOpenButtonForNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (struct TFENode { struct OpaqueNodeRef *x0; })remapIfNeeded:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (void)rememberPreviousNonMediaViewStyle:(int)a0;
- (BOOL)requestEnableStateForNodes:(const void *)a0;
- (void)saveQuery:(BOOL)a0;
- (void)searchDidBeginWithScopes:(const void *)a0 selectedScopeIndex:(unsigned int)a1;
- (void)searchFieldCancel;
- (void)searchWasChanged;
- (BOOL)selectedURLsCanIncludeItemsNeedingDownload;
- (void)setHidesSharedItems:(BOOL)a0;
- (void)setInitialTargetWithOptions:(id)a0;
- (void)setIsPopulationInProgress:(BOOL)a0;
- (void)setTargetNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 withViewStyle:(int)a1;
- (void)setTargetPath:(const void *)a0 withViewStyle:(int)a1;
- (void)shareWithSharingService:(id)a0;
- (BOOL)shouldEnableTagsButton;
- (BOOL)shouldRequestEnableStatesAsync;
- (BOOL)shouldShowPathBarForTarget:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0;
- (BOOL)shouldTypeSelectForEvent:(id)a0 withCurrentSearchString:(id)a1;
- (BOOL)sidebarInitiallyVisible;
- (void)startPopulatingInitialContainerNode:(const struct TFENode { struct OpaqueNodeRef *x0; } *)a0 url:(id)a1;
- (void)tellDelegatePopulationInProgress:(BOOL)a0;
- (id)toolbarHistorySearchTemplate;
- (BOOL)toolbarMakeSearchFieldFirstResponder;
- (id)toolbarSearchField;
- (BOOL)toolbarSearchItemIsVisible;
- (void)ubiquityIdentityChanged;
- (BOOL)urlIsDimmed:(id)a0;
- (void)urlResolutionCompleted:(id)a0;
- (void)userToggledHideExtension;
- (BOOL)viewSwitcherEnabled;
- (void)windowOrderedOutDetails;

@end
