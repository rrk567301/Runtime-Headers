@class SmartStyleRendererPlist, CMIGuidedFilter, NSString, NSMutableSet, NSMutableDictionary, NSDictionary, CMISmartStyleV1, FigMetalAllocator, CMIExternalMemoryResource, FigMetalContext, NSNumber, MTLSharedEventListener;
@protocol MTLComputePipelineState, CMISmartStyle, MTLSharedEvent, MTLTexture, MTLBuffer, MTLCommandQueue;

@interface CMISmartStyleMetalRendererV1 : NSObject <CMISmartStyleMetalRenderer> {
    FigMetalContext *_metalContext;
    CMIGuidedFilter *_cmiGuidedFilter;
    CMISmartStyleV1 *_inputStyle;
    struct { struct { int transferFunction; struct { void /* unknown type, empty encoding */ columns[3]; } colorConversionMatrix; BOOL useVELuma; } inputImage; struct { int transferFunction; struct { void /* unknown type, empty encoding */ columns[3]; } colorConversionMatrix; BOOL useVELuma; } inputLinearImage; struct { int transferFunction; struct { void /* unknown type, empty encoding */ columns[3]; } colorConversionMatrix; BOOL useVELuma; } inputMasks; struct { int transferFunction; struct { void /* unknown type, empty encoding */ columns[3]; } colorConversionMatrix; BOOL useVELuma; } outputImage; } _colorManagement;
    FigMetalAllocator *_sharedAccessAllocator;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _sharedAccessAllocatorLock;
    id<MTLBuffer> _paramsBuf;
    id<MTLBuffer> _statsBuf;
    id<MTLTexture> _guideTexture;
    id<MTLTexture> _linearGuideTexture;
    id<MTLTexture> _smallLightMapTexture;
    id<MTLTexture> _smallLinearLightMapTexture;
    id<MTLTexture> _bgLTMGainMapTexture;
    id<MTLTexture> _fgLTMGainMapTexture;
    id<MTLTexture> _fgbgMatteTexture;
    id<MTLTexture> _skinMatteTexture;
    id<MTLTexture> _skyMatteTexture;
    SmartStyleRendererPlist *_internalTuningParams;
    id<MTLTexture> _cubicSplineToneCurveTexture;
    int _processingType;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _inputBgLTMGainMapTextureMappedRegion;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _inputFgLTMGainMapTextureMappedRegion;
    id<MTLComputePipelineState> _imageReduction;
    id<MTLComputePipelineState> _updateBaseGainWithStats;
    id<MTLComputePipelineState> _localHistogramStatsAll;
    id<MTLComputePipelineState> _globalHistogramPipelineState;
    id<MTLComputePipelineState> _sumPersonAndSkinCounts;
    id<MTLComputePipelineState> _globalStatsPipelineState;
    id<MTLComputePipelineState> _createGuidePipelineStateWithoutImageBlock;
    id<MTLComputePipelineState> _createGuidePipelineStateUsingImageBlock;
    id<MTLComputePipelineState> _createLTMGainMapPipelineStateUsingImageBlock;
    id<MTLComputePipelineState> _createLTMGainMapPipelineStateWithoutImageBlock;
    id<MTLComputePipelineState> _renderSmartStylePipelineStateUsingImageBlock[2];
    id<MTLComputePipelineState> _renderSmartStylePipelineStateWithoutImageBlock[2];
    id<MTLComputePipelineState> _YCbCrToRGBColorConversionPipelineState;
    id<MTLComputePipelineState> _hueSatLumLUTPipelineState;
    id<MTLComputePipelineState> _renderingParamsFromStatsPipelineState;
    id<MTLComputePipelineState> _encodeLinearPipelineState;
    MTLSharedEventListener *_sharedEventListener;
    id<MTLSharedEvent> _sharedEvent;
    unsigned long long _sharedEventSignal;
    BOOL _shouldUpsampleInputPersonMask;
    BOOL _shouldCreateLTMGainMap;
    NSMutableSet *_texturesToPurge;
    NSDictionary *_hueSatLumLUTTexByCastTypeForVariant;
    BOOL _useFaceBasedGlobalExposureBoostRatio;
    BOOL _useSemanticSRL;
    int _srlSemanticKind;
}

@property (retain, nonatomic) NSString *instanceLabel;
@property (readonly, nonatomic) NSDictionary *defaultUserBiasByCastType;
@property (retain, nonatomic) id<CMISmartStyle> inputStyle;
@property (retain, nonatomic) id<MTLTexture> inputImageTexture;
@property (retain, nonatomic) id<MTLTexture> inputImageThumbnailTexture;
@property (retain, nonatomic) id<MTLTexture> inputLightMapTexture;
@property (retain, nonatomic) NSDictionary *inputStatisticsByStatsType;
@property (retain, nonatomic) NSDictionary *inputStatisticsByStatsKey;
@property (retain, nonatomic) id<MTLTexture> inputLinearImageTexture;
@property (retain, nonatomic) id<MTLTexture> inputLinearImageRGBTexture;
@property (retain, nonatomic) id<MTLTexture> inputLinearImageLumaTexture;
@property (retain, nonatomic) id<MTLTexture> inputLinearImageChromaTexture;
@property (retain, nonatomic) id<MTLTexture> inputLinearLightMapTexture;
@property (retain, nonatomic) id<MTLTexture> inputSmallLightMapTexture;
@property (retain, nonatomic) id<MTLTexture> inputSmallLinearLightMapTexture;
@property (retain, nonatomic) id<MTLTexture> inputGlobalToneCurveTexture;
@property (retain, nonatomic) id<MTLBuffer> inputSRLCoefficientsBuf;
@property (nonatomic) float inputSRLCurveParameter;
@property (nonatomic) float inputLinearImageGainDownRatio;
@property (nonatomic) float inputLinearBaseGain;
@property (nonatomic) float baselineExposure;
@property (nonatomic) float inputLinearEncodingGain;
@property (retain, nonatomic) NSNumber *brightnessValue;
@property (nonatomic) float personMasksValidHint;
@property (nonatomic) float faceBasedGlobalExposureBoostRatio;
@property (retain, nonatomic) id<MTLTexture> inputGainMapTexture;
@property (retain, nonatomic) id<MTLTexture> inputPersonMaskTexture;
@property (retain, nonatomic) id<MTLTexture> inputSkinMaskTexture;
@property (retain, nonatomic) id<MTLTexture> inputSkyMaskTexture;
@property (retain, nonatomic) NSString *tuningParameterVariant;
@property (retain, nonatomic) NSString *sceneType;
@property (nonatomic) int semanticStyleSceneType;
@property (retain, nonatomic) id<MTLTexture> outputImageTexture;
@property (retain, nonatomic) id<MTLTexture> outputGainMapTexture;
@property (retain, nonatomic) id<MTLTexture> outputSmallLightMapTexture;
@property (retain, nonatomic) id<MTLTexture> outputSmallLinearLightMapTexture;
@property (retain, nonatomic) NSMutableDictionary *outputImageStatistics;
@property (retain, nonatomic) NSMutableDictionary *outputImageStatisticsExtended;
@property (retain, nonatomic) id<MTLTexture> outputCodedLinearTexture;
@property (retain, nonatomic) NSMutableDictionary *outputCodedLinearMetadata;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageSize;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } renderRegionRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputImageTextureMappedRegion;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputLinearImageTextureMappedRegion;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputLightMapTextureMappedRegion;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputLinearLightMapTextureMappedRegion;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputPersonMaskTextureMappedRegion;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputSkinMaskTextureMappedRegion;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputSkyMaskTextureMappedRegion;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } outputImageTextureMappedRegion;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } statsComputationRect;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageToInputImageScale;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageToInputLinearImageScale;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageToBgLTMGainMapScale;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageToFgLTMGainMapScale;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageToInputLightMapScale;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageToInputLinearLightMapScale;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageToInputPersonMaskScale;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageToInputSkinMaskScale;
@property (nonatomic) struct CGSize { double width; double height; } logicalImageToInputSkyMaskScale;
@property (nonatomic) BOOL useLiveMetalAllocations;
@property (nonatomic) BOOL useSemanticSRLByDefault;
@property (retain, nonatomic) id<MTLCommandQueue> metalCommandQueue;
@property (readonly, nonatomic) BOOL supportsExternalMemoryResource;
@property (retain, nonatomic) CMIExternalMemoryResource *externalMemoryResource;
@property (retain, nonatomic) NSDictionary *tuningParameters;
@property (retain, nonatomic) NSDictionary *cameraInfoByPortType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (int)prewarm;
- (int)resetState;
- (int)setup;
- (void)dealloc;
- (int)finishProcessing;
- (int)purgeResources;
- (int)process;
- (void).cxx_destruct;
- (float)colorBias;
- (int)prepareToProcess:(unsigned int)a0;
- (float)toneBias;
- (id)castType;
- (id)initWithMetalContext:(id)a0;
- (id)initWithOptionalMetalCommandQueue:(id)a0;
- (void)setCastIntensity:(float)a0;
- (void)setCastType:(id)a0;
- (void)setColorBias:(float)a0;
- (void)setToneBias:(float)a0;
- (int)_releaseIntermediateResources;
- (float)castIntensity;
- (int)_encodeImageReduction:(id)a0 inputTexture:(id)a1 inputROI:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 statsComputationROI:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 inputColorConversion:(struct { int x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; BOOL x2; })a4 outputStatsBuffer:(id)a5 outputStatsBufferOffset:(unsigned int)a6;
- (int)_setupStatsAndRenderParamBuffer;
- (void)_updateColorManagementForInputs;
- (int)_allocateResources;
- (int)_applyFinalRendering;
- (int)_calculateCubicSplineToneCurve;
- (int)_calculateDynamicRenderParameters;
- (int)_calculateHistogramStatsWithImageTexture:(id)a0 linearImageTexture:(id)a1 personMaskTexture:(id)a2 skinMaskTexture:(id)a3;
- (id)_calculateHueSatLumLUTTexForAllCastTypesAndVariants;
- (void)_checkAndCreateInputStyle;
- (int)_checkROISpecification;
- (int)_checkROISpecificationForStatsCalculation;
- (int)_compileMetalShadersForProcessingType:(int)a0;
- (void)_configureColorConversion:(struct { int x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; BOOL x2; } *)a0 forTexture:(id)a1 isOutput:(BOOL)a2;
- (int)_convertLinearYCbCrToRGB:(id)a0 inputChromaTexture:(id)a1 outputRGBTexture:(id)a2;
- (int)_createGuideImage;
- (int)_createGuideImageForInputTexture:(id)a0 outputGuideTexture:(id)a1 isInputLinear:(BOOL)a2 isOutputLumaGuide:(BOOL)a3;
- (int)_encodeLinear;
- (void)_encodeRenderRegion:(struct { } *)a0;
- (void)_encodeRenderRegionForStats:(struct { } *)a0;
- (int)_finalRenderRegion:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (float)_getAdjustedSrlCurveParameter;
- (id)_newBufferWithLength:(unsigned long long)a0 label:(id)a1 sharedAccess:(BOOL)a2;
- (id)_newTexture2DWithFormat:(unsigned long long)a0 width:(unsigned long long)a1 height:(unsigned long long)a2 usage:(unsigned long long)a3 disableCompression:(BOOL)a4 label:(id)a5 retainUntilPurge:(BOOL)a6 useFigMetalAllocator:(BOOL)a7;
- (id)_newTexture2DWithFormat:(unsigned long long)a0 width:(unsigned long long)a1 height:(unsigned long long)a2 usage:(unsigned long long)a3 label:(id)a4 retainUntilPurge:(BOOL)a5 useFigMetalAllocator:(BOOL)a6;
- (int)_populatePreComputedStats:(struct { unsigned int x0[10][256]; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; } x1[10]; unsigned int x2; unsigned int x3; float x4; float x5; struct { float x0; float x1; float x2; } x6; struct { float x0; float x1; float x2; } x7; } *)a0 inputStatisticsByStatsType:(id)a1 inputStatisticsByStatsKey:(id)a2;
- (int)_populateStaticRenderParametersFromTuning:(id)a0 inputStatisticsByStatsKey:(id)a1;
- (int)_processLTMGainMap;
- (int)_processSegmentationMasks;
- (void)_resetTextureMappedRegions;
- (int)_runImageReductionAndUpdateBaseGain:(BOOL)a0;
- (float)_sceneBrightnessValue;
- (void)_updateHazeTuningAdjustments:(struct { unsigned int x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; unsigned int x8; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6[3]; float x7[3]; float x8[3]; float x9; float x10; float x11; float x12[3]; float x13[3]; float x14[3]; float x15; float x16; float x17; float x18; float x19; float x20; float x21; } x9; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; float x33; float x34; float x35; float x36; float x37; float x38; float x39; float x40; float x41; float x42; float x43; float x44; float x45; float x46; float x47; float x48; float x49; float x50; float x51; float x52; float x53; float x54; float x55; float x56; float x57; float x58; float x59; float x60; float x61; float x62; float x63; float x64; float x65; } x10; struct { float x0; float x1; float x2; float x3; } x11; struct { BOOL x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; } x12; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; } x13; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } x14; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; } x15; float x16; unsigned int x17; float x18; float x19; float x20; float x21; } *)a0;
- (int)_updateRenderPipelineConfigForInputs;
- (int)_upsampleLightMap;

@end
