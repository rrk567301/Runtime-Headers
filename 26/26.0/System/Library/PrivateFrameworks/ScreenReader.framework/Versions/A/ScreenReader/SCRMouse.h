@class AXFUIElement, NSString, SCRCUserDefaults, SCRCTargetSelectorTimer, SCRDnDInfo, SCRCThreadKey, AXFTextMarkerRange;

@interface SCRMouse : NSObject {
    SCRDnDInfo *_dndInfo;
    double _speakUnderMouseDelayInterval;
    double _lastUserMouseMoveTime;
    NSString *_lastApplicationNameOutput;
    unsigned int _cgsConnectionID;
    long long _currentPositioningHint;
    struct CGPoint { double x; double y; } _mouseDragPoint;
    struct CGPoint { double x; double y; } _mouseDropPoint;
    float _systemMouseCursorSize;
    long long _voCursorSize;
    struct CGPoint { double x; double y; } _triggerDockPoint;
    SCRCTargetSelectorTimer *_dragAnimationTimer;
    SCRCThreadKey *_mouseHandlerThreadKey;
    SCRCThreadKey *_threadKey;
    long long _modifierKey;
    struct { unsigned char announceMouseEnteringContainerArea : 1; unsigned char draggingMultipleSelection : 1; unsigned char droppingAllowed : 1; unsigned char ignoreNotification : 1; unsigned char includeModifierKey : 1; unsigned char isReverseDnD : 1; unsigned char mouseButton1PressedDown : 1; unsigned char mouseButton2PressedDown : 1; unsigned char mouseIsSliding : 1; unsigned char ranDraggabilityPreTest : 1; unsigned char speakTextUnderMouse : 1; unsigned char trackVOCToMouse : 1; unsigned char windowsRemainOverlapping : 1; } _flags;
}

@property (retain, nonatomic, setter=_setUserDefaults:) SCRCUserDefaults *_userDefaults;
@property (retain) AXFUIElement *lastUIElementUnderMouse;
@property (retain) AXFUIElement *lastContainerAreaUIElement;
@property (retain) AXFTextMarkerRange *lastHoverTextMarkerRange;

- (BOOL)isDragging;
- (BOOL)handleEvent:(id)a0;
- (void)dealloc;
- (void)invalidate;
- (id)initWithUserDefaults:(id)a0;
- (BOOL)buttonPressed;
- (void)completeInitialization;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void).cxx_destruct;
- (void)dragEnded;
- (id)threadKey;
- (id)_resultOutputForInsertAfterDrop;
- (id)dndInfo;
- (id)_findContainerAreaForUIElement:(id)a0;
- (void)handleMouseMove;
- (void)_adjustAwayFromEdgesForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (void)_adjustToViewForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 inWindowRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 withBoundary:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_adjustToViewForSourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 destinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1;
- (BOOL)_adjustToViewInMultipleDisplaysForSourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 destinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 containingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2;
- (BOOL)_adjustWindowsForDragAndDrop;
- (struct CGPoint { double x0; double x1; })_adjustedDropLocationForAttemptCounter:(unsigned long long)a0;
- (id)_applicationForUIElement:(id)a0;
- (void)_checkDragStatus:(id)a0;
- (void)_checkDropResult;
- (void)_checkDropStatus:(id)a0;
- (BOOL)_closeEnoughMatchForString:(id)a0 andString:(id)a1;
- (void)_dispatchFocusBackOnDragOrigin;
- (id)_dragAnimationTimer;
- (void)_dragEndedWithOutput:(id)a0;
- (void)_dragFromPosition:(id)a0;
- (void)_dragPreTestEnded;
- (id)_dragScrollContainerUIElement;
- (struct CGPoint { double x0; double x1; })_dragWaitingSpotForStage:(long long)a0;
- (id)_droppingContainer;
- (void)_echoMouseSummary;
- (void)_enterContainerAreaWithUIElement:(id)a0;
- (void)_focusBackOnDragOrigin;
- (void)_handleDragFailure;
- (void)_handleDropFailure;
- (void)_handleDropSucceeded;
- (void)_handleMarkDragFailed;
- (void)_handleMarkDragSucceeded;
- (void)_handleMouseHoverInsideUIElement:(id)a0;
- (void)_handleMouseMoveToPosition:(struct CGPoint { double x0; double x1; })a0;
- (void)_handleMouseOverUIElementAtPoint:(id)a0;
- (void)_handleMouseScrollAtPoint:(id)a0;
- (void)_handleRemovalFromLaunchpadPopover;
- (void)_handleReorderResult;
- (BOOL)_isDraggingFromDock;
- (BOOL)_isDroppingToDock;
- (BOOL)_isMouseDown;
- (struct CGPoint { double x0; double x1; })_mouseDropPointForElement:(id)a0;
- (void)_moveAndReleaseDragAtStartPositionWithDuration:(double)a0;
- (void)_navigateWithType:(id)a0;
- (void)_outputUIElement:(id)a0;
- (struct CGPoint { double x0; double x1; })_preEntryDockPointForPoint:(struct CGPoint { double x0; double x1; })a0 withDockItem:(id)a1;
- (void)_prepareDesktopForDragging;
- (void)_prepareDockForDragging;
- (void)_prepareForDragging;
- (void)_readyToDrag;
- (void)_reallyDragFromPosition:(id)a0;
- (void)_reallyReleaseDragAtPosition:(id)a0;
- (void)_reallyRunDraggabilityPreTest;
- (void)_reallySlideDragElementFromPoint:(id)a0 toPoint:(id)a1 duration:(id)a2;
- (void)_reallyTestDragFromPosition:(id)a0;
- (void)_releaseDragAtPosition:(id)a0;
- (void)_releaseDragAtPositionDelay:(id)a0;
- (void)_restoreFromToggleShowDesktop;
- (id)_resultOutputForCenterDrop;
- (id)_resultOutputForInsertBeforeDrop;
- (void)_retryDragFromPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_runDraggabilityPreTest;
- (void)_setMouseStoppedSliding;
- (void)_slideDragElementFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1 duration:(double)a2;
- (void)_slideDragWithSlideInfo:(id)a0;
- (void)_speakElementUnderMouseHoverTimerFire;
- (void)_speakElementUnderMouseTimerFire;
- (void)_startDragAndDropOntoElement:(id)a0;
- (void)_syncVOCToUIElement:(id)a0;
- (struct CGImage { } *)_takeScreenshotOfVOCursorBoundedContent;
- (void)_testDragFromPosition:(id)a0;
- (struct CGPoint { double x0; double x1; })_triggerDockPointForPoint:(struct CGPoint { double x0; double x1; })a0 withDockItem:(id)a1;
- (BOOL)_verifyDragItem:(id)a0 destinationItem:(id)a1;
- (BOOL)_verifyDragItemIsDroppedAfterDestination;
- (BOOL)_verifyDragItemIsDroppedBeforeDestination;
- (void)_verifyDraggabilityAfterWindowAdjustmentWithDestination:(id)a0;
- (void)_verifyDropDestinationElement;
- (void)_warpMouseToUIElement:(id)a0 positioningHint:(id)a1 position:(id)a2;
- (void)alertDragEnded;
- (BOOL)button1Pressed;
- (BOOL)button2Pressed;
- (BOOL)cancelMouseEvent;
- (void)clickMouseButton:(long long)a0 atPosition:(struct CGPoint { double x0; double x1; })a1 count:(unsigned int)a2;
- (void)clickMouseButton:(long long)a0 atPosition:(struct CGPoint { double x0; double x1; })a1 inWindowID:(unsigned int)a2 count:(unsigned int)a3;
- (void)clickMouseButton:(long long)a0 atPosition:(struct CGPoint { double x0; double x1; })a1 inWindowID:(unsigned int)a2 forPid:(int)a3 count:(unsigned int)a4;
- (struct CGPoint { double x0; double x1; })currentMousePosition;
- (void)dragAcceptedOnUIElement:(id)a0;
- (void)dragNotAcceptedOnUIElement:(id)a0;
- (void)dragStartedOnUIElement:(id)a0;
- (void)dragToElement:(id)a0;
- (void)dropAllowedOnUIElement:(id)a0;
- (void)dropNotAllowedOnUIElement:(id)a0;
- (void)echoMouseSummary;
- (id)elementAtCurrentMousePositionWithApplication:(id)a0;
- (void)endDnDWithStatus:(id)a0;
- (void)handleGuideSelectionIndex:(unsigned long long)a0 target:(id)a1 request:(id)a2;
- (void)handleMouseScroll;
- (BOOL)isMouseMoving;
- (void)markForDragAndDrop:(id)a0;
- (void)playLoopingDragSound;
- (void)pressAndHoldDownMouseButton:(long long)a0 atPosition:(struct CGPoint { double x0; double x1; })a1 inWindowID:(unsigned int)a2 forPid:(int)a3 clickCount:(long long)a4;
- (void)readyToDrop;
- (void)releaseDragAtPosition:(struct CGPoint { double x0; double x1; })a0;
- (void)releaseMouseButton:(long long)a0 atPosition:(struct CGPoint { double x0; double x1; })a1 inWindowID:(unsigned int)a2 forPid:(int)a3 clickCount:(long long)a4;
- (void)setIsReverseDnD:(BOOL)a0;
- (void)startDragAndDropOntoElement:(id)a0 withPositioningHint:(long long)a1;
- (void)startDraggingElement:(id)a0;
- (id)uiElementAtMousePosition:(struct CGPoint { double x0; double x1; })a0;
- (void)warpMouseToPosition:(struct CGPoint { double x0; double x1; })a0;
- (void)warpMouseToUIElement:(id)a0 positioningHint:(long long)a1;
- (void)warpMouseToUIElement:(id)a0 positioningHint:(long long)a1 position:(struct CGPoint { double x0; double x1; })a2;

@end
