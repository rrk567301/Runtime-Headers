@class AXFUIElement, SCRTextDelayedWordEchoHelper, SCRElement, SCRTextAreaChange, NSDate, NSString, AXFTextMarkerRange;

@interface SCRTextArea : SCRMapElement <SCRTextDelayedWordEchoHelperDataSource, SCRTextDelayedWordEchoHelperDelegate, SCRText> {
    struct { double time; long long count; } _selectionThrottling;
}

@property (nonatomic, getter=isObservingSelectedTextChangedNotification) BOOL observingSelectedTextChangedNotification;
@property (nonatomic, getter=isObservingTextValueChangedNotification) BOOL observingTextValueChangedNotification;
@property (retain, nonatomic, setter=_setLastValueChange:) SCRTextAreaChange *_lastValueChange;
@property (retain, nonatomic, setter=_setLastValueChangeUIElement:) AXFUIElement *_lastValueChangeUIElement;
@property (nonatomic, setter=_setLastValueChangeCharCount:) long long _lastValueChangeCharCount;
@property (retain, nonatomic, setter=_setLastValueChangeTime:) NSDate *_lastValueChangeTime;
@property (retain, nonatomic, setter=_setWordEchoHelper:) SCRTextDelayedWordEchoHelper *_wordEchoHelper;
@property (nonatomic) struct { long long type; struct { long long direction; long long granularity; } selection; } command;
@property (retain, nonatomic) AXFTextMarkerRange *lastSelectedTextMarkerRange;
@property (retain, nonatomic) SCRElement *magicPressElement;
@property (readonly, nonatomic) double wordEchoDelay;
@property (readonly, nonatomic) SCRElement *elementToObserveForTextChanges;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setSelectedTextRange:(id)a0;
- (id)selectedTextRange;
- (void)dealloc;
- (void).cxx_destruct;
- (id)stringForRange:(id)a0;
- (id)lastPosition;
- (id)attributedStringForRange:(id)a0;
- (id)textProvider;
- (void)_moveToSelectedTextMarkerRange:(id)a0 command:(struct { long long x0; struct { long long x0; long long x1; } x1; })a1 uiElement:(id)a2 outputRequest:(id)a3;
- (BOOL)supportsLineNavigationFallbacks;
- (void)__handleSelectedTextChangedNotification:(id)a0;
- (BOOL)_advanceInsertionPointWithDirection:(long long)a0 granularity:(long long)a1 uiElement:(id)a2 outputRequest:(id)a3;
- (id)_attachmentCharacterAttributedString;
- (unsigned long long)_clampedLengthForTextMarkerRange:(id)a0 withUIElement:(id)a1;
- (id)_firstLinkForTextMarkerRange:(id)a0 withUIElement:(id)a1;
- (id)_firstNavigableElementForTextMarkerRange:(id)a0 withUIElement:(id)a1;
- (BOOL)_focusChangeIsLikelyDuringMove:(id)a0 targetFocusedElement:(id)a1;
- (BOOL)_handleIndentationInTextChange:(id)a0 uiElement:(id)a1 request:(id)a2;
- (void)_handleSelectedTextChangedNotification:(id)a0;
- (void)_handleSharedFocusUIElement:(id)a0 textChanges:(id)a1 request:(id)a2;
- (void)_handleTextBoundaryWithUIElement:(id)a0 command:(struct { long long x0; struct { long long x0; long long x1; } x1; })a1;
- (void)_handleTextValueChangedNotification:(id)a0;
- (BOOL)_isDeveloperDefinedFocusUpdateForUIElement:(id)a0;
- (id)_lineFeedCharacterAttributedString;
- (id)_lineTextMarkerRangeWithUIElement:(id)a0 command:(struct { long long x0; struct { long long x0; long long x1; } x1; })a1 lastSelectedTextMarkerRange:(id)a2 selectedTextMarkerRange:(id)a3;
- (id)_navigationTextMarkerRangeWithUIElement:(id)a0 command:(struct { long long x0; struct { long long x0; long long x1; } x1; })a1 lastSelectedTextMarkerRange:(id)a2 selectedTextMarkerRange:(id)a3;
- (id)_outputRequestComponentsForAttributedString:(id)a0;
- (void)_prepareForKeyboardSyncWithTextMarkerRange:(id)a0 targetUIElement:(id)a1;
- (void)_registerObserversOnSharedFocusUIElements:(id)a0 ofUIElement:(id)a1;
- (void)_registerTextObserversIfNeeded;
- (void)_resetCommandAndLastSelectedTextMarkerRange:(id)a0;
- (void)_sendOutputRequest:(id)a0 processCursorMovement:(BOOL)a1 updateBraille:(BOOL)a2;
- (void)_syncVOCursorWithElementIfNeeded:(id)a0 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 moveInsertionPoint:(BOOL)a2 request:(id)a3;
- (void)_unregisterTextObserversIfNeeded;
- (void)_updateCommandWithEvent:(id)a0;
- (void)addAttributedStringOutputToOutputRequest:(id)a0 attributedString:(id)a1 variants:(id)a2;
- (void)addFirstWordToOutputRequest:(id)a0;
- (void)addItemNameToRequest:(id)a0;
- (void)addLastGranularTextSegment:(long long)a0 uiElement:(id)a1 forEdge:(long long)a2 withRequest:(id)a3;
- (void)addLastWordToOutputRequest:(id)a0;
- (void)addStringOutputToOutputRequest:(id)a0 string:(id)a1 variants:(id)a2;
- (BOOL)advanceInsertionPointWithDirection:(long long)a0 granularity:(long long)a1 uiElement:(id)a2 outputRequest:(id)a3;
- (BOOL)chainEvent:(id)a0 request:(id)a1;
- (id)currentBrailleLineWithEchoRange:(id)a0;
- (id)elementRangeForLineRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 insideTextMarkerRange:(id)a1;
- (id)firstPosition;
- (BOOL)focusShouldTempDisableSingleKeyQuickNav;
- (BOOL)handleEvent:(id)a0 request:(id)a1;
- (BOOL)handleOptionRightArrowEvent;
- (void)handleTextBoundaryWithUIElement:(id)a0 command:(struct { long long x0; struct { long long x0; long long x1; } x1; })a1 outputRequest:(id)a2;
- (void)handleTextChangesWithUIElement:(id)a0 changes:(id)a1 secure:(BOOL)a2;
- (void)handleTextNavigationWithUIElement:(id)a0 command:(struct { long long x0; struct { long long x0; long long x1; } x1; })a1 lastSelectedTextMarkerRange:(id)a2 selectedTextMarkerRange:(id)a3 outputRequest:(id)a4;
- (void)handleTextSelectionWithUIElement:(id)a0 command:(struct { long long x0; struct { long long x0; long long x1; } x1; })a1 lastSelectedTextMarkerRange:(id)a2 selectedTextMarkerRange:(id)a3;
- (BOOL)interactPageDownCommandWithEvent:(id)a0 request:(id)a1;
- (BOOL)interactPageUpCommandWithEvent:(id)a0 request:(id)a1;
- (BOOL)isSelectedTextRangeSettable;
- (BOOL)isTextElement;
- (id)lineAfterRange:(id)a0 affinity:(long long)a1;
- (long long)lineNumberForPosition:(id)a0;
- (id)lineWithRange:(id)a0 affinity:(long long)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })localRangeOfTextMarkerRange:(id)a0 insideTextMarkerRange:(id)a1;
- (id)markerRangeWithUIElement:(id)a0;
- (void)moveInsertionToElement:(id)a0 affinity:(long long)a1 doFocusIfNeeded:(BOOL)a2;
- (BOOL)moveToFirstElementWithEvent:(id)a0 request:(id)a1;
- (BOOL)moveToLastElementWithEvent:(id)a0 request:(id)a1;
- (BOOL)moveToNextLineWithOutputRequest:(id)a0 event:(id)a1;
- (BOOL)moveToNextParagraphWithOutputRequest:(id)a0 event:(id)a1;
- (BOOL)moveToNextSentenceWithOutputRequest:(id)a0 event:(id)a1;
- (BOOL)moveToNextWordWithOutputRequest:(id)a0 event:(id)a1;
- (BOOL)moveToPreviousLineWithOutputRequest:(id)a0 event:(id)a1;
- (BOOL)moveToPreviousParagraphWithOutputRequest:(id)a0 event:(id)a1;
- (BOOL)moveToPreviousSentenceWithOutputRequest:(id)a0 event:(id)a1;
- (BOOL)moveToPreviousWordWithOutputRequest:(id)a0 event:(id)a1;
- (id)navigationTextMarkerRangeForDiscontiguousNavigationWithUIElement:(id)a0 lastSelectedTextMarkerRange:(id)a1 selectedTextMarkerRange:(id)a2;
- (id)newOutputRequest;
- (id)newOutputRequestForTextMarkerRange:(id)a0 withUIElement:(id)a1 command:(struct { long long x0; struct { long long x0; long long x1; } x1; })a2 lastSelectedTextMarkerRange:(id)a3 selectedTextMarkerRange:(id)a4 variants:(id)a5;
- (id)rotorIdentifiers;
- (id)selectedTextMarkerRangeWithFallbackToHitTesting:(id)a0;
- (id)selectedTextMarkerRangeWithUIElement:(id)a0;
- (id)selectedTextRangeEnd;
- (id)selectedTextRangeStart;
- (void)sendOutputRequest:(id)a0;
- (void)setIsEventHandler:(BOOL)a0 isKeyboardHandler:(BOOL)a1;
- (void)setSelectedTextMarkerRange:(id)a0 withUIElement:(id)a1;
- (void)setVoiceOverCursorTextRange:(id)a0 request:(id)a1;
- (BOOL)shouldHandleTextChanges;
- (BOOL)shouldHandleTextNavigation;
- (BOOL)shouldHandleTextSelection;
- (unsigned long long)shouldMoveFocusFromElement:(id)a0 toElement:(id)a1;
- (BOOL)supportsCaretBrowsing;
- (BOOL)textSelectionUpdateInProgress;
- (id)validatedTextMarkerRangeForUIElement:(id)a0;
- (id)voiceOverCursorTextRange;
- (BOOL)wordEchoHelper:(id)a0 echoTextMarkerRangeForWord:(id)a1 additionalContent:(id)a2;
- (BOOL)wordEchoHelper:(id)a0 textMarkerPrecedesOrEquals:(id)a1 textMarker:(id)a2;
- (id)wordEchoHelper:(id)a0 wordTextMarkerRangeForTextMarker:(id)a1;

@end
