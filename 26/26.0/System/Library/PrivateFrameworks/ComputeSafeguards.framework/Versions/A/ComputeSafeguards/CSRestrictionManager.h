@class CSTriggerManager, CSIssueDetector, CSDaemon, CSProcessManager, NSMutableDictionary, NSSet, NSString, NSObject, NSMutableSet, CSMitigationManager, CSScenarioManager;
@protocol OS_os_log, CSRestrictionDataProviding, CSRestriction;

@interface CSRestrictionManager : NSXPCListener <NSXPCListenerDelegate, CSScenarioChangesObserving, CSProcessesChangesObserving, SafeguardsScheduledWorkReporting>

@property (retain) NSObject<OS_os_log> *logger;
@property (retain) id<CSRestrictionDataProviding> dataProvider;
@property (retain) CSScenarioManager *scenarioManager;
@property (retain) CSProcessManager *processManager;
@property (retain) CSMitigationManager *mitigationManager;
@property (retain) CSTriggerManager *triggerManager;
@property (retain) CSIssueDetector *issueDetector;
@property (retain) CSDaemon *safeguardsDaemon;
@property (retain) NSMutableDictionary *restrictionsByProcessPerScenario;
@property (retain) NSMutableDictionary *processesAffectedByScenarioMap;
@property (retain) NSMutableDictionary *currentRestrictionsByProcess;
@property (retain) NSMutableSet *scheduledIntensiveProcesses;
@property BOOL unknownScheduledIntensiveProcesses;
@property (retain) NSMutableSet *monitors;
@property long long debounceTimeBeforeRestrictions;
@property (retain) NSSet *currentActiveScenarios;
@property (retain) id<CSRestriction> defaultRestriction;
@property (retain) id<CSRestriction> band95Restriction;
@property (retain) id<CSRestriction> band80Restriction;
@property (retain) NSMutableDictionary *currentActiveScenariosWithRestrictions;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sharedInstanceWithDataProvider:(id)a0;

- (BOOL)listener:(id)a0 shouldAcceptNewConnection:(id)a1;
- (void).cxx_destruct;
- (void)reportScheduledIntensiveWorkByProcesses:(id)a0;
- (void)getMitigationPolicyWithHandler:(id /* block */)a0;
- (id)_initWithDataProvider:(id)a0;
- (BOOL)applyDefaultRestrictionsToProcess:(id)a0;
- (BOOL)applyPluggedInRestrictionsToProcess:(id)a0;
- (unsigned long long)applyRestriction:(id)a0 withProcessIdentifier:(id)a1;
- (BOOL)applyRestrictionsToProcess:(id)a0 forScenario:(id)a1;
- (void)checkScheduledIntensiveInNewProcesses:(id)a0;
- (void)clearMitigationRecordsWithHandler:(id /* block */)a0;
- (void)clearRestrictionsForProcess:(id)a0;
- (void)clearTargetProcess;
- (void)currentActiveScenarios:(id)a0 previousActiveScenarios:(id)a1;
- (void)determineAndApplyRestrictionsForProcess:(id)a0;
- (id)determineScenarioForProcess:(id)a0;
- (void)forceCPUViolationForProcess:(id)a0 withHandler:(id /* block */)a1;
- (void)forceDetectionWithStartTime:(id)a0 endTime:(id)a1 withHandler:(id /* block */)a2;
- (void)forceDetectorViolationForProcess:(id)a0 withHandler:(id /* block */)a1;
- (void)forceMidnightRoutineWithHandler:(id /* block */)a0;
- (void)forceMitigation:(id)a0 forProcess:(id)a1 withPercentage:(id)a2 withSeconds:(id)a3 withPenaltyBoxDuration:(id)a4 withHandler:(id /* block */)a5;
- (void)getActiveScenariosWithHandler:(id /* block */)a0;
- (void)getCpuPercentageTriggerForWindowEndDate:(id)a0 windowStartDate:(id)a1 handler:(id /* block */)a2;
- (void)getDefaultsWithHandler:(id /* block */)a0;
- (id)getInfoForProcess:(id)a0;
- (void)getInfoForProcess:(id)a0 withHandler:(id /* block */)a1;
- (void)getMaxRelaunchPollingIntervalWithHandler:(id /* block */)a0;
- (void)getMonitoredListWithHandler:(id /* block */)a0;
- (void)getPenaltyListWithHandler:(id /* block */)a0;
- (void)getPollingIntervalWithHandler:(id /* block */)a0;
- (void)getProcessesAffectedByScenarioMapWithHandler:(id /* block */)a0;
- (void)getRelaunchPollingIntervalWithHandler:(id /* block */)a0;
- (void)getRestrictionsForProcess:(id)a0 forScenario:(id)a1 withHandler:(id /* block */)a2;
- (void)getScenarioRefreshIntervalWithHandler:(id /* block */)a0;
- (void)getScenariosWithHandler:(id /* block */)a0;
- (void)getTargetProcessMitigationRecordsWithHandler:(id /* block */)a0;
- (void)getTargetProcessWithHandler:(id /* block */)a0;
- (void)getTriggerIntervalWithHandler:(id /* block */)a0;
- (void)modifyContextForIdentifier:(id)a0 withState:(id)a1;
- (void)modifyDefaults:(id)a0 withMaxNonFatal:(id)a1 withEnableMitigations:(id)a2 withEnablePenaltyBox:(id)a3 withPercentage:(id)a4 withSeconds:(id)a5 withPenaltyBoxDuration:(id)a6 withMitigationsPluggedIn:(id)a7 withMitigateXPCServices:(id)a8 withHandler:(id /* block */)a9;
- (void)modifyMaxRelaunchPollingInterval:(id)a0;
- (void)modifyPollingInterval:(id)a0;
- (void)modifyProcessInfoFor:(id)a0 withFatalCount:(id)a1 withNonFatalCount:(id)a2 withExitCount:(id)a3 withPenaltyCount:(id)a4 withPolicyMask:(id)a5 withHandler:(id /* block */)a6;
- (void)modifyRelaunchPollingInterval:(id)a0;
- (void)modifyRestrictionsByProcessPerScenario:(id)a0 withHandler:(id /* block */)a1;
- (void)modifyScenarioRefreshInterval:(id)a0;
- (void)modifyTargetProcess:(id)a0 withPercentage:(id)a1 withSeconds:(id)a2 withPenaltyBoxDuration:(id)a3;
- (void)modifyTargetProcessMitigationRecords:(id)a0 withHandler:(id /* block */)a1;
- (void)modifyTriggerInterval:(id)a0;
- (void)observeNewRunningProcesses:(id)a0;
- (void)observeProcessChanges;
- (void)populateScenarios;
- (void)queueChangeForActivatedScenarios:(id)a0 deactivatedScenarios:(id)a1;
- (void)resetRuleParameters:(id)a0 withHandler:(id /* block */)a1;
- (void)setRuleParameters:(id)a0 withWindowSize:(id)a1 withStepSize:(id)a2 withMaxLookback:(id)a3 withDaemonOnly:(id)a4 withHandler:(id /* block */)a5;
- (void)traverseRestrictionsData;
- (void)updateCoalitionEntries:(id)a0 withHandler:(id /* block */)a1;
- (id)updateRestrictionsDataForScenarios:(id)a0;
- (void)updateScheduledIntensiveContext:(id)a0;

@end
