@class WBSCoalescedAsynchronousWriter, BrowserWindowController, NSURLRequest, NSMutableArray, NSString, NSError, NSTimer, NSArray, NSMutableDictionary, WKDownload, NSObject, DownloadFile, NSSet, NSOperationQueue, NSData, NSURLResponse, WKWebView, NSUUID, NSURL, NSDate, NSProgress;
@protocol DownloadProgressEntryDelegate, OS_dispatch_queue, WBSSandboxExtensionToken;

@interface DownloadProgressEntry : NSObject <NSFilePresenter> {
    NSURLRequest *_request;
    NSURLResponse *_response;
    NSMutableArray *_postDownloadFiles;
    NSMutableDictionary *_depthForNestedArchive;
    NSData *_resumeInformation;
    WBSCoalescedAsynchronousWriter *_plistWriter;
    NSDate *_startDate;
    long long _bytesLoadedAtStart;
    long long _lastBytesPerSecond;
    struct unique_ptr<SafariShared::SuddenTerminationDisabler, std::default_delete<SafariShared::SuddenTerminationDisabler>> { struct SuddenTerminationDisabler *__ptr_; } m_suddenTerminationDisabler;
    NSProgress *_progress;
    float _lastSavedFractionCompleted;
    struct CGPoint { double x; double y; } _hopOriginPoint;
    BrowserWindowController *_hopOriginWindowController;
    BOOL _observingFileLocation;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _cachedBundlePathUnfairLock;
    NSTimer *_reportUpdatedProgressTimer;
    id<WBSSandboxExtensionToken> _sandboxTokenForBundle;
    NSObject<OS_dispatch_queue> *_downloadSandboxTokenQueue;
}

@property (retain, nonatomic) NSURL *cachedDownloadBundleURL;
@property (copy, nonatomic) NSArray *tags;
@property (readonly, nonatomic) NSDate *dateAdded;
@property (readonly, nonatomic) NSDate *dateFinished;
@property (readonly, nonatomic) NSUUID *sandboxIdentifier;
@property (readonly, copy, nonatomic) NSString *pathExtension;
@property (nonatomic) BOOL shouldUseRequestURLAsOriginURLIfNecessary;
@property (nonatomic) BOOL didShowStorageManagerUI;
@property (readonly, nonatomic, getter=wasResumed) BOOL resumed;
@property (readonly, nonatomic) BOOL openWhenDone;
@property (readonly, nonatomic) BOOL shouldAvoidPersistingIdentifyingInformation;
@property (readonly, copy, nonatomic) NSString *profileIdentifier;
@property (weak, nonatomic) id<DownloadProgressEntryDelegate> delegate;
@property (readonly, copy, nonatomic) NSMutableDictionary *dictionaryRepresentation;
@property (readonly, nonatomic) NSURL *URL;
@property (nonatomic) long long lastReportedBytesLoaded;
@property (nonatomic) long long bytesLoaded;
@property (nonatomic) long long bytesExpected;
@property (readonly, nonatomic) BOOL done;
@property (retain, nonatomic) NSError *error;
@property (readonly, copy, nonatomic) NSString *busyStatus;
@property (readonly, copy, nonatomic) NSString *statusString;
@property (readonly, nonatomic) WKDownload *wkDownload;
@property (readonly, weak, nonatomic) WKWebView *navigatedWebView;
@property (readonly, copy, nonatomic) NSString *suggestedFilename;
@property (readonly, nonatomic) long long bytesLoadedSinceStart;
@property (readonly, nonatomic) long long bytesPerSecond;
@property (readonly, nonatomic) long long secondsRemaining;
@property (readonly, copy, nonatomic) NSString *currentPath;
@property (readonly, nonatomic) unsigned long long additionalSpaceRequiredAtDownloadBundleLocation;
@property (readonly, nonatomic) BOOL hasEnoughFreeDiskSpaceAtDownloadBundleLocation;
@property (readonly, copy, nonatomic) NSString *filename;
@property (readonly, copy, nonatomic) NSString *identifier;
@property (readonly, nonatomic) DownloadFile *currentFile;
@property (readonly, nonatomic) DownloadFile *downloadFile;
@property (nonatomic) long long downloadStage;
@property (readonly, nonatomic) BOOL canAttemptReveal;
@property (readonly, nonatomic) BOOL fileExists;
@property (readonly, nonatomic) BOOL aliasFileExists;
@property (readonly, nonatomic) BOOL canAttemptResume;
@property (readonly, nonatomic) BOOL canResumeOrReload;
@property (readonly, nonatomic) BOOL isIdle;
@property (readonly, nonatomic) BOOL isBusy;
@property (readonly, nonatomic) BOOL isCanceled;
@property (readonly, nonatomic) BOOL canStop;
@property (readonly, nonatomic) BOOL canAttemptOpen;
@property (readonly, copy) NSURL *presentedItemURL;
@property (readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property (readonly, copy) NSURL *primaryPresentedItemURL;
@property (readonly) NSSet *observedPresentedItemUbiquityAttributes;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)openWithCompletionHandler:(id /* block */)a0;
- (id)initWithDictionary:(id)a0;
- (void)_resume;
- (void)presentedItemDidMoveToURL:(id)a0;
- (void)dealloc;
- (void)stop;
- (void)resume;
- (id).cxx_construct;
- (id)_canceledError;
- (void).cxx_destruct;
- (void)savePendingChangesBeforeTermination;
- (void)_autoOpenWithCompletionHandler:(id /* block */)a0;
- (void)_clearHopOrigin;
- (void)_forgetAllFiles;
- (void)_markDownloadBundleAsInProgress;
- (BOOL)_addCertificateToKeyChain;
- (void)_addPostDownloadFileWithPath:(id)a0;
- (void)_addPostDownloadFiles:(id)a0;
- (void)_addUnarchivedFiles:(id)a0;
- (unsigned long long)_additionalSpaceRequiredAtURL:(id)a0;
- (id)_allFiles;
- (unsigned long long)_availableDiskSpaceAtURL:(id)a0;
- (void)_browserWindowWillClose:(id)a0;
- (BOOL)_canFinishDownloadWithoutReloading;
- (void)_cancelReportUpdatedProgressTimer;
- (void)_createBundleToResumeDownload;
- (id)_downloadPath;
- (void)_endWithPostDownloadError:(id)a0;
- (id)_extensionTokenForSandboxToken:(id)a0 withDownloadBundleAtURL:(id)a1;
- (void)_forgetAllPostDownloadFiles;
- (void)_forgetPostDownloadFile:(id)a0;
- (BOOL)_hasAnyFiles;
- (id)_initWithRequest:(id)a0 bytesLoaded:(long long)a1 bytesExpected:(long long)a2 error:(id)a3 download:(id)a4 downloadFile:(id)a5 postDownloadFile:(id)a6 downloadStage:(long long)a7 identifier:(id)a8 sandboxIdentifier:(id)a9 mayOpenWhenDone:(BOOL)a10 shouldAvoidPersistingIdentifyingInformation:(BOOL)a11 profileIdentifier:(id)a12;
- (void)_initializeResumeInformationForDownloadWithResumeData:(id)a0;
- (void)_moveFilesFromBundleWithCompletionHandler:(id /* block */)a0;
- (long long)_openArchive;
- (void)_openWithCompletionHandler:(id /* block */)a0;
- (id)_postDownloadFile;
- (id)_postDownloadPath;
- (void)_postPathDidChangeNotification;
- (void)_refreshDownloadBundleURLToResumeDownload;
- (void)_reportUpdatedProgress;
- (void)_reportUpdatedProgressNow;
- (void)_reportUpdatedProgressSoon;
- (void)_reportUpdatedProgressTimerFired:(id)a0;
- (void)_saveStateToPListInBundleURL:(id)a0;
- (void)_setDownloadFileWithPath:(id)a0;
- (void)_setDownloadStage:(long long)a0 shouldSendNotifications:(BOOL)a1;
- (void)_setProgressFileURL:(id)a0;
- (void)_setUpHopOriginProgressUserInfoIfNeeded;
- (void)_startObservingFileLocation;
- (void)_startPostProcessingIfDoneWithResumeData:(id)a0;
- (void)_startReportingProgress;
- (void)_stopObservingFileLocation;
- (void)_stopReportingProgress;
- (void)_updateFractionCompletedExtendedAttributeWithMinimumChange:(float)a0;
- (void)_updatePath:(id)a0 ofFile:(id)a1;
- (void)attemptToRevealWithCompletionHandler:(id /* block */)a0;
- (id)initWithWKDownload:(id)a0 navigatedWebView:(id)a1 suggestedFilename:(id)a2 mayOpenWhenDone:(BOOL)a3 shouldAvoidPersistingIdentifyingInformation:(BOOL)a4 profileIdentifier:(id)a5;
- (void)saveInitialStateToPList;
- (void)setDone:(BOOL)a0 withResumeData:(id)a1;
- (void)setDownloadFileWithPath:(id)a0;
- (void)setHopOriginPoint:(struct CGPoint { double x0; double x1; })a0 inWindowController:(id)a1;
- (void)setResponse:(id)a0 bytesLoaded:(long long)a1;
- (void)showPermissionRequestTab;
- (void)willBeginDownloadWithBundleToken:(id)a0;
- (void)willRemove;

@end
