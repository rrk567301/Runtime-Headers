@class NSHashTable, NSURL, CPLEngineScopeCleanupTasks, CPLEngineRevertRecords, CPLEngineQuarantinedRecords, CPLResetTracker, CPLChangeBatch, NSMutableArray, NSString, CPLEngineChangePipe, CPLEngineCloudCache, NSArray, CPLEngineIDMapping, NSMutableDictionary, CPLEngineIgnoredRecords, CPLTransportScopeMapping, CPLEngineRemappedRecords, CPLEngineRecordComputeStatePushQueue, NSObject, NSSet, CPLEngineScopeStorage, CPLEngineTransientRepository, CPLEngineStatusCenter, CPLEngineLibrary, CPLEngineResourceStorage, CPLEnginePendingRecordChecks, CPLEngineOutgoingResources, CPLEnginePushRepository, CPLEngineDerivativesCache, NSDate, CPLRecordStorageView, CPLEngineResourceDownloadQueue, CPLPlatformObject;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface CPLEngineStore : NSObject <CPLAbstractObject, CPLEngineComponent> {
    NSHashTable *_storages;
    NSString *_sharingScopeIdentifier;
    NSObject<OS_dispatch_queue> *_batchedTransactionsQueue;
    NSMutableArray *_batchedTransactions;
    BOOL _batchedTransactionDequeueIsScheduled;
    BOOL _dontDelayChangeSessionUpdate;
    BOOL _applyingChangeSessionUpdate;
    NSURL *_resetEventsURL;
    NSMutableArray *_resetEvents;
    CPLResetTracker *_pendingTracker;
    CPLChangeBatch *_unacknowledgedBatch;
    BOOL _discardUnacknowledgedBatchOnTransactionFail;
    BOOL _transactionClientCacheViewHasPushRepository;
    NSMutableDictionary *_transactionNewPredictions;
    NSSet *_lastInvalidRecordScopedIdentifiers;
    NSDate *_lastInvalidRecordsDate;
    NSObject<OS_dispatch_source> *_pendingUpdateTimer;
    NSObject<OS_dispatch_queue> *_pendingUpdateQueue;
    double _pendingUpdateInterval;
    BOOL _unschedulePendingUpdateApplyOnWriteSuccess;
    BOOL _schedulePendingUpdateApplyOnWriteSuccess;
    BOOL _scheduleSetupOnWriteSuccess;
    BOOL _scheduleDisabledFeatureUpdateOnWriteSuccess;
    BOOL _schedulePullFromClient;
    NSObject<OS_dispatch_queue> *_shouldSyncScopeListQueue;
    BOOL _shouldEnableScopeListSyncOnWriteSuccess;
    NSArray *_disabledFeatures;
    BOOL _hasUpdatedDisabledFeatures;
    BOOL _isUpdatingDisabledFeatures;
    BOOL _shouldTriggerCompleteResetSyncAfterDisabledFeaturesUpdate;
    BOOL _shouldTriggerResetSyncAfterDisabledFeaturesUpdate;
}

@property (class, nonatomic) BOOL dontBatchTransactions;
@property (class, readonly, nonatomic) NSArray *storageNames;

@property (readonly, nonatomic) NSString *mainScopeIdentifier;
@property (readonly, nonatomic) BOOL hasPendingResetSync;
@property (nonatomic) unsigned long long state;
@property (readonly, nonatomic) NSArray *storages;
@property (readonly, weak, nonatomic) CPLEngineLibrary *engineLibrary;
@property (readonly) BOOL shouldSyncScopeList;
@property (readonly, nonatomic) CPLEnginePushRepository *pushRepository;
@property (readonly, nonatomic) BOOL pushRepositoryIsFull;
@property (readonly, nonatomic) CPLEngineScopeStorage *scopes;
@property (readonly, nonatomic) CPLEngineScopeCleanupTasks *cleanupTasks;
@property (readonly, nonatomic) CPLEngineChangePipe *pullQueue;
@property (readonly, nonatomic) CPLEngineRevertRecords *revertRecords;
@property (readonly, nonatomic) CPLEngineIDMapping *idMapping;
@property (readonly, nonatomic) CPLEngineCloudCache *cloudCache;
@property (readonly, nonatomic) CPLRecordStorageView *transactionClientCacheView;
@property (readonly, nonatomic) CPLEngineTransientRepository *transientPullRepository;
@property (readonly, nonatomic) CPLEngineResourceStorage *resourceStorage;
@property (readonly, nonatomic) CPLEngineResourceDownloadQueue *downloadQueue;
@property (readonly, nonatomic) CPLEngineOutgoingResources *outgoingResources;
@property (readonly, nonatomic) CPLEngineRemappedRecords *remappedRecords;
@property (readonly, nonatomic) CPLEngineQuarantinedRecords *quarantinedRecords;
@property (readonly, nonatomic) CPLEngineStatusCenter *statusCenter;
@property (readonly, nonatomic) CPLEnginePendingRecordChecks *pendingRecordChecks;
@property (readonly, nonatomic) CPLEngineIgnoredRecords *ignoredRecords;
@property (readonly, nonatomic) CPLEngineRecordComputeStatePushQueue *recordComputeStatePushQueue;
@property (readonly) NSDate *libraryCreationDate;
@property (readonly, nonatomic) id corruptionInfo;
@property (readonly, nonatomic) CPLEngineDerivativesCache *derivativesCache;
@property (readonly, nonatomic) BOOL shouldGenerateDerivatives;
@property (readonly, nonatomic) NSArray *pushPullGatekeepers;
@property (readonly, nonatomic) NSArray *disabledFeatures;
@property (readonly, nonatomic) BOOL shouldUpdateDisabledFeatures;
@property (readonly, nonatomic) NSString *sharingScopeIdentifier;
@property (readonly, nonatomic) BOOL syncSessionShouldRequestMoreTime;
@property (readonly, nonatomic) CPLTransportScopeMapping *transactionTransportScopeMapping;
@property (readonly, nonatomic) BOOL storeVersionHasChanged;
@property (readonly, nonatomic) CPLPlatformObject *platformObject;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)stateDescriptionForState:(unsigned long long)a0;
+ (id)platformImplementationProtocol;

- (id)componentName;
- (id)userIdentifier;
- (void)testKey:(id)a0 value:(id)a1 completionHandler:(id /* block */)a2;
- (void)performBatchedWriteTransactionBarrier;
- (void)openWithCompletionHandler:(id /* block */)a0;
- (BOOL)_resetLocalSyncStateWithCause:(id)a0 scope:(id)a1 date:(id)a2 error:(id *)a3;
- (BOOL)isFeatureDisabled:(id)a0;
- (id)localResourceForCloudResource:(id)a0 recordClass:(Class *)a1;
- (void)_reallyUnschedulePendingUpdateApply;
- (BOOL)storeClientIsInSyncWithClientCacheWithError:(id *)a0;
- (BOOL)forceApplyPendingChangeSessionUpdateWithError:(id *)a0;
- (id)createNewLibraryVersion;
- (id)initWithEngineLibrary:(id)a0;
- (void)dropSharingScopeIdentifier:(id)a0;
- (BOOL)storeDerivativesFilter:(id)a0 error:(id *)a1;
- (void)_setSharingScopeIdentifier:(id)a0;
- (BOOL)deleteDynamicallyCreatedStorages:(id)a0 error:(id *)a1;
- (BOOL)storeLastQuarantineCountReportDate:(id)a0 error:(id *)a1;
- (unsigned long long)libraryOptions;
- (void)dealloc;
- (BOOL)storeLibraryVersion:(id)a0 withError:(id *)a1;
- (id)_currentTransaction;
- (void)noteInvalidRecordScopedIdentifiersInPushSession:(id)a0;
- (BOOL)_shouldSyncScopeListWithOptions:(unsigned long long)a0;
- (void)_reallySchedulePendingUpdateApply;
- (id)unacknowledgedChangeWithLocalScopedIdentifier:(id)a0;
- (BOOL)resetLocalSyncStateWithCause:(id)a0 error:(id *)a1;
- (BOOL)_handleException:(id)a0;
- (id)derivativesFilter;
- (void)assertNoUnacknowledgedChanges;
- (BOOL)_applyAndDiscardPendingUpdate:(id)a0 error:(id *)a1;
- (BOOL)updateDisabledFeatures:(id)a0 didReset:(BOOL *)a1 error:(id *)a2;
- (id)libraryVersion;
- (BOOL)setShouldUpdateDisabledFeaturesWithError:(id *)a0;
- (BOOL)storeUserIdentifier:(id)a0 error:(id *)a1;
- (id)performReadTransactionWithBlock:(id /* block */)a0;
- (void)getStatusWithCompletionHandler:(id /* block */)a0;
- (BOOL)applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:(id)a0 error:(id *)a1;
- (void)closeAndDeactivate:(BOOL)a0 completionHandler:(id /* block */)a1;
- (BOOL)_storeChangeSessionUpdate:(id)a0 error:(id *)a1;
- (BOOL)clientCanPushScopeChange:(id)a0;
- (BOOL)clearAllPushPullGatekeepersWithError:(id *)a0;
- (void)performBarrier;
- (id)_performWriteTransactionByPassBlocker:(id)a0 WithBlock:(id /* block */)a1 completionHandler:(id /* block */)a2;
- (BOOL)hasPendingChangeSessionUpdate;
- (BOOL)_applyPendingUpdate:(id)a0 error:(id *)a1;
- (BOOL)createStoragesDynamically:(id)a0 error:(id *)a1;
- (void)_setTransactionOnCurrentThread:(id)a0;
- (BOOL)_resetGlobalStateWithError:(id *)a0;
- (BOOL)mainScopeSupportsSharingScopeWithIdentifier:(id)a0;
- (void)_closeAndDeactivate:(BOOL)a0 completionHandler:(id /* block */)a1;
- (void)_performBarrierTransaction:(id)a0 withBlock:(id /* block */)a1;
- (BOOL)hasUnacknowledgedChanges;
- (void)_finishTransaction;
- (BOOL)resetSyncAnchorWithCause:(id)a0 error:(id *)a1;
- (BOOL)storeChangeSessionUpdate:(id)a0 error:(id *)a1;
- (BOOL)_canHaveActivatedScope:(id)a0 libraryOptions:(unsigned long long)a1 error:(id *)a2;
- (BOOL)resetCompleteSyncStateIncludingIDMappingWithCause:(id)a0 error:(id *)a1;
- (void)_storeResetEvent:(id)a0 scopeIdentifier:(id)a1 date:(id)a2 pending:(BOOL)a3 cause:(id)a4;
- (BOOL)supportsSharingScopeWithIdentifier:(id)a0 forScopeWithIdentifier:(id)a1;
- (BOOL)checkExpectedLibraryVersion:(id)a0 error:(id *)a1;
- (BOOL)_canWrite;
- (void)noteResetSyncFinished;
- (void)writeTransactionDidFail;
- (void)_commitWriteTransaction:(id)a0 commitError:(id)a1;
- (BOOL)isClientInSyncWithClientCache;
- (void)_loadResetEvents;
- (void)writeTransactionDidSucceed;
- (void)performBatchedWriteTransactionBarrierWithCompletionBlock:(id /* block */)a0;
- (void)getStatusDictionaryWithCompletionHandler:(id /* block */)a0;
- (id)performWriteTransactionWithBlock:(id /* block */)a0 completionHandler:(id /* block */)a1;
- (void)_dropTransactionClientCacheView;
- (BOOL)addPushPullGatekeeper:(id)a0 error:(id *)a1;
- (void)_reallyPerformBatchedTransactionsLocked;
- (void)markAsCorrupted;
- (void)performBatchedWriteTransactionWithBlock:(id /* block */)a0 completionHandler:(id /* block */)a1;
- (void)stopVacuum;
- (BOOL)_resetSyncAnchorWithCause:(id)a0 scope:(id)a1 error:(id *)a2;
- (void)transactionDidFinish;
- (id)clientCacheIdentifier;
- (id)lastQuarantineCountReportDate;
- (void)_removeTransactionOnCurrentThread:(id)a0;
- (void)keepUnacknowledgedBatch:(id)a0;
- (void)assertCanWrite;
- (BOOL)_resetCompleteSyncStateWithCause:(id)a0 scope:(id)a1 error:(id *)a2;
- (void)_unschedulePendingUpdateApply;
- (id)_storedDisabledFeatures;
- (BOOL)updateLibraryOptions:(unsigned long long)a0 error:(id *)a1;
- (void)dropUnacknowledgedBatch;
- (void)wipeStoreAtNextOpeningWithReason:(id)a0 completionBlock:(id /* block */)a1;
- (void)_schedulePendingUpdateApply;
- (BOOL)beginChangeSession:(id)a0 withLibraryVersion:(id)a1 resetTracker:(id)a2 error:(id *)a3;
- (BOOL)_resetCompleteSyncStateIncludingIDMappingWithCause:(id)a0 scope:(id)a1 error:(id *)a2;
- (id)performWriteTransactionByPassBlocker:(id)a0 withBlock:(id /* block */)a1 completionHandler:(id /* block */)a2;
- (void)startVacuumWithCompletionHandler:(id /* block */)a0;
- (id)_resetEventsDescriptions;
- (BOOL)canActivateScope:(id)a0 error:(id *)a1;
- (void)registerStorage:(id)a0;
- (BOOL)resetCompleteSyncStateWithCause:(id)a0 error:(id *)a1;
- (BOOL)resetLocalSyncStateWithCause:(id)a0 date:(id)a1 error:(id *)a2;
- (void)storeSharingScopeIdentifier:(id)a0;
- (void)predictSyncSessionValue:(id)a0 ofType:(id)a1;
- (BOOL)_canRead;
- (void)_updateShouldSyncScopeList:(BOOL)a0;
- (void)_addCleanupBlock:(id /* block */)a0;
- (void)emergencyClose;
- (void)assertCanRead;
- (id)newClientCacheViewUsesPushRepository:(BOOL *)a0;
- (void)_performTransaction:(id)a0 withBlock:(id /* block */)a1;
- (void)noteOtherResetEvent:(id)a0 cause:(id)a1;
- (id)_resetEventsJSON;
- (void)_storeResetEvent:(id)a0 scopeIdentifier:(id)a1 date:(id)a2 cause:(id)a3;
- (void).cxx_destruct;
- (void)notePushRepositoryStoredSomeChanges;
- (void)_forceCloseWithCompletionHandler:(id /* block */)a0;
- (void)_scheduleBatchedTransactionsLocked;
- (void)blockWriteTransactionsWithCompletionHandler:(id /* block */)a0;

@end
