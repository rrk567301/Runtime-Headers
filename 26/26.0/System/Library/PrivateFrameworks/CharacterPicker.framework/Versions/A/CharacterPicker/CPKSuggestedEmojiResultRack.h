@interface CPKSuggestedEmojiResultRack : NSObject {
    struct MatchingRangesToResultsMapper { struct unordered_map<_NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>, std::hash<NSRange>, std::equal_to<NSRange>, std::allocator<std::pair<const _NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>>>> { struct __hash_table<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>>, std::__unordered_map_hasher<_NSRange, std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>>, std::hash<NSRange>, std::equal_to<NSRange>>, std::__unordered_map_equal<_NSRange, std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>>, std::equal_to<NSRange>, std::hash<NSRange>>, std::allocator<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<EMFEmojiToken>>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } m_rangesToEmojis; struct unordered_map<_NSRange, std::vector<std::shared_ptr<_STKSticker>>, std::hash<NSRange>, std::equal_to<NSRange>, std::allocator<std::pair<const _NSRange, std::vector<std::shared_ptr<_STKSticker>>>>> { struct __hash_table<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<_STKSticker>>>, std::__unordered_map_hasher<_NSRange, std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<_STKSticker>>>, std::hash<NSRange>, std::equal_to<NSRange>>, std::__unordered_map_equal<_NSRange, std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<_STKSticker>>>, std::equal_to<NSRange>, std::hash<NSRange>>, std::allocator<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<_STKSticker>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<_STKSticker>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<_STKSticker>>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<_STKSticker>>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<_NSRange, std::vector<std::shared_ptr<_STKSticker>>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } m_rangesToStickers; } m_matchingRangesToResultMapper;
}

@property (readonly, nonatomic) void *resultsMapper;

- (void)dealloc;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addSticker:(id)a0 forRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)emojiResultsSortedByRange;
- (void)setEmojis:(id)a0 forRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;

@end
