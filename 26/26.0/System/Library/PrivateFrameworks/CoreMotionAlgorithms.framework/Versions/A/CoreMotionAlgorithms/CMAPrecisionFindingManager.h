@class CMAPrecisionFindingAnalytics, NSObject;
@protocol OS_dispatch_queue, CMAPrecisionFindingDelegate;

@interface CMAPrecisionFindingManager : NSObject {
    struct CMPrecisionFindingPositionEstimator { struct CMAPositionType { double timestamp; float distance; float horizontalAngle; float horizontalAngleUncertainty; BOOL isConverged; int revokeReason; BOOL isDistanceValid; } fPosition; struct CMFindingParticleFilterState { double timestamp; float horizontalAngleUncertaintyUnfiltered; struct array<float, 5UL> { float __elems_[5]; } stateEstimate; } fParticleFilterState; struct CMAVerticalState { double timestamp; float horizontalDistance; float verticalDistance; float relativeAltitude; float fractionAboveThreshold; float likelihoodAboveThreshold; BOOL isConverged; BOOL isAboveBelow; BOOL isAboveBelowMessageShowing; } fVerticalState; struct CMPrecisionFindingVelocityEstimator { struct CMDownsampler<double> { void /* function */ **_vptr$CMDownsampler; double fMinimumToleratedDt; double fLastTimestamp; } fDownsampler; struct CMVector<float, 2UL> { float elements[2]; } fPlanarVelocity; struct CMVector<float, 2UL> { float elements[2]; } fNoise; struct CMAOPFFTSensorBuffers { struct Buffers { struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } inertialRotationRateX; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } inertialRotationRateY; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } inertialRotationRateZ; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } userRotationRateX; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } userRotationRateY; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } userRotationRateZ; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } inertialAccelX; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } inertialAccelY; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } inertialAccelZ; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } userAccelX; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } userAccelY; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } userAccelZ; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } magX; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } magY; struct CMFixedSizeRunningBuffer<float, 256UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 256UL> { char buffer[1020]; } fStorage; } magZ; struct CMFixedSizeQueue<CMOQuaternion, 256UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[16]; struct CMQueueStorage<CMOQuaternion, 256UL> { char buffer[4080]; } fStorage; } attitude; unsigned long long fTimestamp; struct CMFixedSizeQueue<unsigned short, 127UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[2]; struct CMQueueStorage<unsigned short, 127UL> { char buffer[252]; } fStorage; } timestampDelta; } fBuffers; unsigned long long fCountDeviceMotionForPDRFeatures; unsigned long long fCountDeviceMotionForPDRFeaturesFast; struct CMTNBFrame { struct CMVector<float, 3UL> { float elements[3]; } fCurveFiltered[4]; struct CMVector<float, 3UL> { float elements[3]; } fCurveFilteredPrev[4]; unsigned long long fIdxFilterSelected; float fCenterFrequency[4]; struct FirstOrderFilter<float> { int fNumSamples; float fAlpha; float fFiltered; BOOL fDoWarmStart; } fHysteresisFilterBank; struct CMExponentiallyWeightedVariance<float> { unsigned long long fN; float fAlpha; struct FirstOrderFilter<float> { int fNumSamples; float fAlpha; float fFiltered; BOOL fDoWarmStart; } fMean; struct FirstOrderFilter<float> { int fNumSamples; float fAlpha; float fFiltered; BOOL fDoWarmStart; } fMeanSquared; BOOL fDoWarmStart; } fUncertainty[4]; struct CMVector<float, 3UL> { float elements[3]; } fTangent[4]; struct CMVector<float, 3UL> { float elements[3]; } fBinormal[4]; BOOL fIsValid[4]; struct CMVector<float, 2UL> { float elements[2]; } fDirVectorFiltered; struct CLButterworthFilter<float, 2UL> { unsigned long long fPrimed; unsigned long long fOffset; float fData[5]; float fCoefficients[9]; } fDirFilter[2]; } fTNB; struct CMIirFilter { struct CMIirFilterParams *fIirFilterParams; float fOutput; struct CMFixedSizeQueue<float, 5UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; struct CMQueueStorage<float, 5UL> { char buffer[16]; } fStorage; } fX; struct CMFixedSizeQueue<float, 4UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; struct CMQueueStorage<float, 4UL> { char buffer[12]; } fStorage; } fY; } fFilter_1_47p5_MagX; struct CMIirFilter { struct CMIirFilterParams *fIirFilterParams; float fOutput; struct CMFixedSizeQueue<float, 5UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; struct CMQueueStorage<float, 5UL> { char buffer[16]; } fStorage; } fX; struct CMFixedSizeQueue<float, 4UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; struct CMQueueStorage<float, 4UL> { char buffer[12]; } fStorage; } fY; } fFilter_1_47p5_MagY; struct CMIirFilter { struct CMIirFilterParams *fIirFilterParams; float fOutput; struct CMFixedSizeQueue<float, 5UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; struct CMQueueStorage<float, 5UL> { char buffer[16]; } fStorage; } fX; struct CMFixedSizeQueue<float, 4UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; struct CMQueueStorage<float, 4UL> { char buffer[12]; } fStorage; } fY; } fFilter_1_47p5_MagZ; } fSensorBuffers; struct CMPDRSpeedEstimatorWalk { float fSpeed; float fSpeedUnc; } fSpeedEstimator; struct CMAPrecisionFindingDOTEstimator { struct CMVector<float, 3UL> { float elements[3]; } fBodyYAxis; BOOL fIsWristCrownInitialized; struct CMAWatchOrientationStruct { double timestamp; int wrist; int crown; } fWristCrownConfig; } fDOTEstimator; BOOL fIsDOTAvailable; } fVelocityEstimator; struct CMFindingRangeHandler { BOOL fFirstSampleAccepted; struct CMFixedSizeRunningBuffer<float, 8UL> { BOOL fIsStaleStatistics; float fMean; float fVariance; float fNorm; struct CMQueue<float> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<float, 8UL> { char buffer[28]; } fStorage; } fRangeBuffer; struct CMFixedSizeRunningBuffer<double, 8UL> { BOOL fIsStaleStatistics; double fMean; double fVariance; double fNorm; struct CMQueue<double> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[8]; } fSamples; struct CMQueueStorage<double, 8UL> { char buffer[56]; } fStorage; } fRangeTimeBuffer; struct CMFixedSizeRunningBuffer<bool, 8UL> { BOOL fIsStaleStatistics; BOOL fMean; BOOL fVariance; BOOL fNorm; struct CMQueue<bool> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[1]; } fSamples; struct CMQueueStorage<bool, 8UL> { char buffer[7]; } fStorage; } fRangeIsValidBuffer; struct FirstOrderFilter<float> { int fNumSamples; float fAlpha; float fFiltered; BOOL fDoWarmStart; } fFirstOrderRangeFilter; BOOL fSustainedLowRangeObserved; unsigned int fLowRangeCount; } fRangeHandler; struct CMFindingParticleFilter { struct RangeMeasurement { float range; float rangeShift; } fRangeMeasurement; struct VelocityEstimation { struct CMVector<float, 2UL> { float elements[2]; } velocity; struct CMVector<float, 2UL> { float elements[2]; } noise; } fVelocityMeasurement; float fSpeedMeasurement; struct CMParticleFilter<5UL> { struct vector<std::array<float, 5>, std::allocator<std::array<float, 5>>> { void *__begin_; void *__end_; void *__cap_; } fParticles; struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; double *__cap_; } fWeights; unsigned long long fNumParticles; } fParticleFilter; void *fParticles; void *fWeights; unsigned long long fNumParticles; BOOL fWasMeasurementApplied; struct array<float, 5UL> { float __elems_[5]; } fCurrentState; float fAngularDeviation; double fTimestamp; struct CMVector<float, 2UL> { float elements[2]; } fCurrentAccel; struct CMVector<float, 2UL> { float elements[2]; } fBatchedDv; float fBatchedDt; float fPreviousAltitude; float fCurrentAltitude; BOOL fFirstAltitude; unsigned long long fMeasurementCount; float fEstimatedAbsoluteVerticalRange; float fEstimatedHorizontalRange; float fEstimatedTotalRange; float fAboveBelowFraction; float fAboveBelowLikelihood; } fParticleFilter; BOOL fFirstArcShown; int fFindeeType; struct CMFixedSizeRunningBuffer<unsigned int, 20UL> { BOOL fIsStaleStatistics; unsigned int fMean; unsigned int fVariance; unsigned int fNorm; struct CMQueue<unsigned int> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[4]; } fSamples; struct CMQueueStorage<unsigned int, 20UL> { char buffer[76]; } fStorage; } fActivityBuffer; struct CMFixedSizeRunningBuffer<double, 20UL> { BOOL fIsStaleStatistics; double fMean; double fVariance; double fNorm; struct CMQueue<double> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char fBuffer[8]; } fSamples; struct CMQueueStorage<double, 20UL> { char buffer[152]; } fStorage; } fActivityTimeBuffer; struct CMAWatchOrientationStruct { double timestamp; int wrist; int crown; } fWristCrownConfig; BOOL fWasFindeeMoving; BOOL fIsWristCrownInitialized; BOOL fIsFilterInitialized; unsigned long long fNumParticles; BOOL fEnableRevokeDelayTimer; double fHighUncertaintyTimeStamp; float fRangeAtArcRevoke; double fPreviousVelocityTimeStamp; struct optional<CMARangeType> { union { char __null_state_; struct CMARangeType { double timestamp; double range; double rangeError; double rssi; unsigned short cycleIndex; } __val_; } ; BOOL __engaged_; } fAcceptedRange; struct CMAPrecisionFindingRangeKF { double fState; double fP; double fTimestampLastUpdate; BOOL fIsInitialized; } fRangeKalmanFilter; double fPreviousRawRange; double fPreviousRawRangeTimestamp; float fBaseAltitude; float fCurrentAltitude; BOOL fWasFirstAltitudeReceived; BOOL fWasInMediumRange; BOOL fWasLevelChanged; double fAboveBelowFractionTimeStamp; double fAboveBelowFirstMessageTimeStamp; BOOL fIsAboveBelowMeassageShowing; BOOL fWasAboveBelowMessageShown; float fMaxDistanceWhenAboveBelowFractionHigh; float fMinDistanceWhenAboveBelowFractionHigh; float fElevationWhenAboveBelowFractionHigh; BOOL fIsAboveBelowFractionHigh; struct CMDownsampler<double> { void /* function */ **_vptr$CMDownsampler; double fMinimumToleratedDt; double fLastTimestamp; } fLoggingDownsampler; } _positionEstimator;
    struct CMPrecisionFinderDownsampler { void /* function */ **_vptr$CMDownsampler; unsigned long long fMinimumToleratedDt; unsigned long long fLastTimestamp; } _deviceMotionDownsampler;
    struct CMPrecisionFinderDownsampler { void /* function */ **_vptr$CMDownsampler; unsigned long long fMinimumToleratedDt; unsigned long long fLastTimestamp; } _positionDownsampler;
    struct CMPrecisionFinderDownsampler { void /* function */ **_vptr$CMDownsampler; unsigned long long fMinimumToleratedDt; unsigned long long fLastTimestamp; } _analyticsDownsampler;
}

@property (weak, nonatomic) id<CMAPrecisionFindingDelegate> delegate;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property (nonatomic) BOOL deviceFindingClient;
@property (retain, nonatomic) CMAPrecisionFindingAnalytics *analyticsManager;
@property (nonatomic) int findeeType;

- (void)dealloc;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initWithDelegate:(id)a0 dispatchQueue:(id)a1;
- (void)updateAnalytics;
- (id)initWithDelegate:(id)a0 dispatchQueue:(id)a1 findeeType:(int)a2;
- (void)startDeviceFindingUpdates;
- (void)stopDeviceFindingUpdates;
- (void)updateAltimeterData:(id)a0;
- (void)updateDeviceMotion:(id)a0;
- (void)updatePeerState:(id)a0;
- (void)updateRanging:(id)a0;
- (void)updateWatchOrientation:(id)a0;

@end
