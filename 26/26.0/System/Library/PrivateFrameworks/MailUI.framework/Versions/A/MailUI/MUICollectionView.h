@class NSMutableSet, NSString, NSMutableIndexSet, MUICollectionHeightStorage, NSStackView, NSObject, NSLayoutConstraint, NSMutableArray, NSMapTable, NSIndexSet;
@protocol OS_os_log, MUICollectionViewDelegate;

@interface MUICollectionView : NSView <NSScrollViewDelegate, EFLoggable> {
    NSMutableArray *_activeCellViews;
    NSMutableSet *_spareCellViews;
    NSMutableIndexSet *_faultedIndexes;
    NSMutableIndexSet *_lockedIndexes;
    NSMutableIndexSet *_selectionIndexes;
    unsigned long long _focusedIndex;
    BOOL _emphasized;
}

@property (class, readonly) NSObject<OS_os_log> *log;

@property (readonly, nonatomic) MUICollectionHeightStorage *heightStorage;
@property (nonatomic) unsigned long long pinnedIndex;
@property (nonatomic) unsigned long long pinnedCellEdge;
@property (nonatomic) unsigned long long pinnedEdge;
@property (nonatomic) double pinnedOffset;
@property (nonatomic) double pinnedHeightAdjustment;
@property (nonatomic) BOOL inScroll;
@property (nonatomic) BOOL adjustHeightForPinning;
@property (nonatomic) BOOL adjustScrollForPinning;
@property (retain, nonatomic) NSStackView *topSupplementaryStackView;
@property (retain, nonatomic) NSStackView *bottomSupplementaryStackView;
@property (retain, nonatomic) NSLayoutConstraint *bottomSupplementaryViewTopConstraint;
@property (retain, nonatomic) NSMapTable *supplementaryViewHeightConstraints;
@property (nonatomic) BOOL changingSupplementaryViewHeight;
@property (nonatomic) BOOL emphasized;
@property (weak, nonatomic) id<MUICollectionViewDelegate> delegate;
@property (nonatomic) struct CGSize { double x0; double x1; } cellSpacing;
@property (nonatomic) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } contentInset;
@property (nonatomic) unsigned long long focusedIndex;
@property (copy, nonatomic) NSIndexSet *selectionIndexes;
@property (copy, nonatomic) id /* block */ supplementaryViewProvider;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } visibleRange;
@property (readonly, nonatomic) unsigned long long firstResponderIndex;
@property (readonly, nonatomic) unsigned long long numberOfCells;
@property (setter=_setWantsPageAlignedHorizontalAxis:) BOOL _wantsPageAlignedHorizontalAxis;
@property (setter=_setWantsPageAlignedVerticalAxis:) BOOL _wantsPageAlignedVerticalAxis;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)requiresConstraintBasedLayout;
+ (id)keyPathsForValuesAffectingNumberOfCells;

- (id)enclosingScrollView;
- (void)mouseUp:(id)a0;
- (void)viewWillMoveToWindow:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)keyDown:(id)a0;
- (void)layout;
- (BOOL)isFlipped;
- (void)didScrollInScrollView:(id)a0;
- (void)viewDidMoveToWindow;
- (id)initWithCoder:(id)a0;
- (void)viewDidMoveToSuperview;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)updateConstraints;
- (void).cxx_destruct;
- (void)moveUp:(id)a0;
- (void)scrollPageDown:(id)a0;
- (void)setFrameOrigin:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)acceptsFirstResponder;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustScroll:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)didBeginScrollInScrollView:(id)a0;
- (void)didEndScrollInScrollView:(id)a0;
- (void)moveDown:(id)a0;
- (void)moveLeft:(id)a0;
- (void)moveRight:(id)a0;
- (BOOL)performKeyEquivalent:(id)a0;
- (void)prepareContentInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)scrollPageUp:(id)a0;
- (void)scrollPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)scrollToBeginningOfDocument:(id)a0;
- (void)scrollToEndOfDocument:(id)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (id)supplementalTargetForAction:(SEL)a0 sender:(id)a1;
- (void)viewWillMoveToSuperview:(id)a0;
- (void)_updateGeometryIfNeeded;
- (void)removeAllCells;
- (void)_updateSelectionIfNeeded;
- (void)_scrollEdge:(unsigned long long)a0 to:(id /* block */)a1;
- (void)pinToCellAtIndex:(unsigned long long)a0 cellEdge:(unsigned long long)a1 edge:(unsigned long long)a2;
- (id)reusableCellViewWithIdentifier:(id)a0;
- (BOOL)_scrollToNextCell:(id)a0 contiguously:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustRectForPinning:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)_bottomSupplementaryViewHeight;
- (id)_claimUnusedCell;
- (void)_faultCellsAtIndexesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)_hasFirstResponder;
- (unsigned long long)_indexOfCellView:(id)a0;
- (void)_muiCollectionViewCommonInit;
- (void)_pinTo:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 edge:(unsigned long long)a1;
- (void)_pinToCellAtIndex:(unsigned long long)a0 cellEdge:(unsigned long long)a1 edge:(unsigned long long)a2 offset:(double)a3;
- (BOOL)_scrollToPreviousCell:(id)a0 contiguously:(BOOL)a1;
- (void)_scrollViewDidScroll:(id)a0;
- (id)_setupSupplementaryStackView;
- (double)_topSupplementaryStackViewHeight;
- (double)_totalHeightForSupplementaryStackView:(id)a0;
- (void)_updateCellIndexes;
- (void)_updateConstraintsForCellAtIndex:(unsigned long long)a0;
- (void)_updateEmphasisIfNeeded;
- (void)_updateSupplementaryStackView:(id)a0 withViews:(id)a1;
- (void)_updateSupplementaryViewConstraints;
- (BOOL)_useInsetLayoutAtIndex:(unsigned long long)a0;
- (id)cellViewAtIndex:(unsigned long long)a0;
- (void)cleanupLockedIndexes;
- (void)deselectCellsAtIndexes:(id)a0;
- (void)enumerateCellViewsUsingBlock:(id /* block */)a0;
- (void)enumerateCellViewsWithOptions:(unsigned long long)a0 usingBlock:(id /* block */)a1;
- (unsigned long long)indexForResponder:(id)a0;
- (unsigned long long)indexForView:(id)a0;
- (void)insertCellAtIndex:(unsigned long long)a0;
- (void)insertCellsAtIndexes:(id)a0;
- (void)insertCellsAtIndexesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)lockCellAtIndex:(unsigned long long)a0;
- (void)lockCellsAtIndexes:(id)a0;
- (void)lockCellsAtIndexesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)moveCellAtIndex:(unsigned long long)a0 toIndex:(unsigned long long)a1;
- (void)noteHeightOfCellAtIndex:(unsigned long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfCellsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForCellAtIndex:(unsigned long long)a0;
- (void)removeCellAtIndex:(unsigned long long)a0;
- (void)removeCellsAtIndexes:(id)a0;
- (void)removeCellsAtIndexesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)scrollToCellAtIndex:(unsigned long long)a0 constrainScroll:(BOOL)a1;
- (void)scrollToTopConstrainingScroll:(BOOL)a0;
- (void)selectCellsAtIndexes:(id)a0 byExtendingSelection:(BOOL)a1;
- (void)unlockCellAtIndex:(unsigned long long)a0;
- (void)unlockCellsAtIndexes:(id)a0;
- (void)unlockCellsAtIndexesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)updateSupplementaryView:(id)a0 toHeight:(double)a1;
- (void)updateVisibleCells;

@end
