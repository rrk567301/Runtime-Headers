@class NSString, NSSet, NSData, ULLoiMO, ULServiceMO;

@interface ULModelMO : NSManagedObject

@property (retain, nonatomic) NSString *modelUUID;
@property (nonatomic) double generationTimestamp;
@property (retain, nonatomic) NSData *model;
@property (nonatomic) int modelType;
@property (retain, nonatomic) ULLoiMO *loi;
@property (retain, nonatomic) ULServiceMO *service;
@property (retain, nonatomic) NSSet *mapLabels;
@property (retain, nonatomic) NSString *loiId_deprecated;
@property (retain, nonatomic) NSString *serviceUUID_deprecated;

+ (id)fetchRequest;
+ (id)createFromDO:(const void *)a0 withServiceMO:(id)a1 loiMO:(id)a2 inManagedObjectContext:(id)a3;

- (struct optional<ULModelDO> { union { char x0; struct ULModelDO { struct uuid { unsigned char x0[16]; } x0; struct time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> { struct duration<long double, std::ratio<1>> { long double x0; } x0; } x1; int x2; struct variant<ULProtoMessageWrapper<CLMicroLocationProto::Model>, ULProtoMessageWrapper<CLMicroLocationProto::HomeSlamModel>, ULProtoMessageWrapper<CLMicroLocationProto::VMKModel>> { struct __impl<ULProtoMessageWrapper<CLMicroLocationProto::Model>, ULProtoMessageWrapper<CLMicroLocationProto::HomeSlamModel>, ULProtoMessageWrapper<CLMicroLocationProto::VMKModel>> { union __union<std::__variant_detail::_Trait::_Available, 0UL, ULProtoMessageWrapper<CLMicroLocationProto::Model>, ULProtoMessageWrapper<CLMicroLocationProto::HomeSlamModel>, ULProtoMessageWrapper<CLMicroLocationProto::VMKModel>> { char x0; struct __alt<0UL, ULProtoMessageWrapper<CLMicroLocationProto::Model>> { struct ULProtoMessageWrapper<CLMicroLocationProto::Model> { struct Model { void /* function */ **x0; struct RepeatedPtrField<CLMicroLocationProto::Fingerprint> { void **x0; int x1; int x2; int x3; } x1; unsigned long long x2; double x3; int x4; int x5; struct RepeatedPtrField<CLMicroLocationProto::ClusterRecordings> { void **x0; int x1; int x2; int x3; } x6; struct RepeatedPtrField<CLMicroLocationProto::AnchorMetadata> { void **x0; int x1; int x2; int x3; } x7; BOOL x8; unsigned int x9; struct anchorAppearancesVector *x10; struct LocationSimilarityListData *x11; int x12; int x13; struct RepeatedField<int> { int *x0; int x1; int x2; } x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; void *x21; struct BlueAtlasData *x22; unsigned int x23; int x24; unsigned int x25[1]; } x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 1UL, ULProtoMessageWrapper<CLMicroLocationProto::HomeSlamModel>, ULProtoMessageWrapper<CLMicroLocationProto::VMKModel>> { char x0; struct __alt<1UL, ULProtoMessageWrapper<CLMicroLocationProto::HomeSlamModel>> { struct ULProtoMessageWrapper<CLMicroLocationProto::HomeSlamModel> { struct HomeSlamModel { void /* function */ **x0; struct RepeatedPtrField<CLMicroLocationProto::ULTrajectoryPoint> { void **x0; int x1; int x2; int x3; } x1; struct RepeatedPtrField<CLMicroLocationProto::ULROI> { void **x0; int x1; int x2; int x3; } x2; struct anchorAppearancesVector *x3; struct ModelMetadata *x4; struct ULPointLocation *x5; float x6; float x7; struct RepeatedPtrField<CLMicroLocationProto::ULPositionedImage> { void **x0; int x1; int x2; int x3; } x8; float x9; int x10; unsigned int x11[1]; } x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 2UL, ULProtoMessageWrapper<CLMicroLocationProto::VMKModel>> { char x0; struct __alt<2UL, ULProtoMessageWrapper<CLMicroLocationProto::VMKModel>> { struct ULProtoMessageWrapper<CLMicroLocationProto::VMKModel> { struct VMKModel { void /* function */ **x0; void *x1; int x2; unsigned int x3[1]; } x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 3UL> { } x2; } x2; } x2; } x0; unsigned int x1; } x0; } x3; struct optional<std::string> { union { char x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x1; } x0; BOOL x1; } x4; struct optional<boost::uuids::uuid> { union { char x0; struct uuid { unsigned char x0[16]; } x1; } x0; BOOL x1; } x5; struct uuid { unsigned char x0[16]; } x6; } x1; } x0; BOOL x1; })convertToDO;

@end
