@interface EAREntityCleanup : NSObject {
    struct BasicTextSanitizer { void /* function */ **_vptr$TextSanitizer; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mUnicodeOutliers; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mSpecialChars; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mDupSpacePattern; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mCtrlCharsPattern; int state; struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> { struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::string>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } UTF8_MAP; struct unordered_map<char32_t, char32_t, std::hash<char32_t>, std::equal_to<char32_t>, std::allocator<std::pair<const char32_t, char32_t>>> { struct __hash_table<std::__hash_value_type<char32_t, char32_t>, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>>, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>>, std::allocator<std::__hash_value_type<char32_t, char32_t>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } unicode_map; } _sanitizer;
}

+ (void)initialize;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)applyRegex:(id)a0 toString:(id)a1;
- (id)extractEntities:(id)a0;
- (id)limitCharactersTo:(unsigned long long)a0 wordLimit:(unsigned long long)a1 ofString:(id)a2;
- (id)removeDuplicateWhitespace:(id)a0;
- (id)removeEmojis:(id)a0;
- (id)removeSpecialCharacters:(id)a0 fromString:(id)a1;
- (id)runBasicTextSanitization:(id)a0;

@end
