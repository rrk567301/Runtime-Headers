@class NSMutableDictionary, VFXClock, VFXNode, VFXStateManager, VFXPhysicsWorld, VFXMaterialProperty, VFXRenderGraph, VFXAssetRegistry, NSString, VFXViewConfiguration, VFXBehaviorGraph, VFXBidirectionalRemapTable, VFXTriggerManager, NSArray, VFXOrderedDictionary, VFXAuthoringEnvironment2;
@protocol VFXState, VFXParameterList, VFXAssetPathResolver;

@interface VFXWorld : NSObject <VFXBehaviorSupport, VFXParameterizable, VFXWorldReference, VFXReferenceEnumerable, VFXEntityProvider, VFXTransactionCommandObject, VFXBehaviorSupport, VFXAnimatable, VFXStateSupport, VFXParameterizable, NSSecureCoding, NSCopying> {
    struct __CFXWorld { } *_world;
    unsigned char _isPresentationObject : 1;
    VFXWorld *_presentationObject;
    id<VFXAssetPathResolver> _assetPathResolver;
    VFXRenderGraph *_defaultRenderGraph;
    VFXNode *_defaultPointOfView;
    VFXViewConfiguration *_preferredConfiguration;
    VFXPhysicsWorld *_physicsWorld;
    VFXNode *_rootNode;
    VFXNode *_layerRootNode[4];
    VFXMaterialProperty *_background;
    VFXMaterialProperty *_environment;
    NSMutableDictionary *_userAttributes;
    float _fogStartDistance;
    float _fogEndDistance;
    float _fogDensityExponent;
    id _fogColor;
    BOOL _wantsScreenSpaceAmbientOcclusion;
    float _screenSpaceAmbientOcclusionIntensity;
    float _screenSpaceAmbientOcclusionRadius;
    BOOL _screenSpaceAmbientOcclusionEnableBentNormal;
    long long _screenSpaceAmbientOcclusionQuality;
    BOOL _wantsScreenSpaceReflection;
    long long _screenSpaceReflectionQuality;
    long long _screenSpaceReflectionThicknessMode;
    float _screenSpaceReflectionObjectThickness;
    VFXClock *_clock;
    double _lastUpdateTime;
    VFXAssetRegistry *_assetRegistry;
    VFXBehaviorGraph *_behaviorGraph;
    VFXStateManager *_stateManager;
    NSArray *_shaderCacheConfigurations;
    struct __CFXCoreEntityManager { } *_coreEntityManager;
    VFXBidirectionalRemapTable *_modelToPresentationRemapTable;
    BOOL _allowsDefaultLightingEnvironmentFallback;
    VFXAuthoringEnvironment2 *_authoringEnvironment2;
    VFXTriggerManager *_triggerManager;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _animationsLock;
    VFXOrderedDictionary *_animations;
    NSMutableDictionary *_bindings;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (nonatomic) int peerPid;
@property (nonatomic) unsigned int peerTaskIdentity;
@property (nonatomic, readonly) NSArray *bridgedComponentNames;
@property (readonly, nonatomic) VFXNode *rootNode;
@property (readonly, nonatomic) VFXAssetRegistry *assets;
@property (readonly, nonatomic) VFXPhysicsWorld *physicsWorld;
@property (readonly, nonatomic) VFXMaterialProperty *background;
@property (readonly, nonatomic) VFXMaterialProperty *lightingEnvironment;
@property (nonatomic) float fogStartDistance;
@property (nonatomic) float fogEndDistance;
@property (nonatomic) float fogDensityExponent;
@property (retain, nonatomic) id fogColor;
@property (nonatomic) BOOL wantsScreenSpaceAmbientOcclusion;
@property (nonatomic) float screenSpaceAmbientOcclusionIntensity;
@property (nonatomic) float screenSpaceAmbientOcclusionRadius;
@property (nonatomic) BOOL screenSpaceAmbientOcclusionEnableBentNormal;
@property (nonatomic) long long screenSpaceAmbientOcclusionQuality;
@property (nonatomic) BOOL wantsScreenSpaceReflection;
@property (nonatomic) long long screenSpaceReflectionQuality;
@property (nonatomic) long long screenSpaceReflectionThicknessMode;
@property (nonatomic) float screenSpaceReflectionObjectThickness;
@property (readonly, nonatomic) VFXClock *clock;
@property (readonly, nonatomic) struct __CFXWorld { } *worldRef;
@property (readonly, nonatomic) VFXWorld *world;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) long long coreEntity;
@property (retain, nonatomic) VFXBehaviorGraph *behaviorGraph;
@property (readonly) NSArray *animationKeys;
@property (readonly) id presentationObject;
@property (readonly, nonatomic) NSArray *states;
@property (retain, nonatomic) id<VFXState> state;
@property (readonly, nonatomic) id<VFXParameterList> parameters;

+ (id)world;
+ (SEL)jsConstructor;
+ (id)_indexPathForNode:(id)a0;
+ (BOOL)canImportFileExtension:(id)a0;
+ (BOOL)canImportFileUTI:(id)a0;
+ (id)supportedFileUTIsForExport;
+ (id)supportedFileUTIsForImport;
+ (id)worldWithSceneKitScene:(id)a0 options:(id)a1;
+ (id)worldWithURL:(id)a0 options:(id)a1 error:(id *)a2;
+ (id)worldNamed:(id)a0 inDirectory:(id)a1 options:(id)a2;
+ (id)worldNamed:(id)a0;
+ (id)worldNamed:(id)a0 options:(id)a1;
+ (id)worldWithData:(id)a0 options:(id)a1 error:(id *)a2;
+ (id)worldWithMDLAsset:(id)a0;
+ (id)worldWithMDLAsset:(id)a0 options:(id)a1;
+ (id)worldWithSCNURL:(id)a0 options:(id)a1 error:(id *)a2;
+ (id)worldWithWorldRef:(struct __CFXWorld { } *)a0;

- (id)debugQuickLookObject;
- (id)scene;
- (void)setEndTime:(double)a0;
- (void)unlock;
- (double)endTime;
- (id)identifier;
- (void)dealloc;
- (void)restart;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)initWithOptions:(id)a0;
- (double)startTime;
- (void)lock;
- (void)encodeWithCoder:(id)a0;
- (double)lastUpdateTime;
- (double)frameRate;
- (void)setLastUpdateTime:(double)a0;
- (id)init;
- (id)root;
- (id)valueForUndefinedKey:(id)a0;
- (id)stateManager;
- (void)setValue:(id)a0 forUndefinedKey:(id)a1;
- (void)setStartTime:(double)a0;
- (void)addAnimation:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setIdentifier:(id)a0;
- (void)addAnimation:(id)a0 forKey:(id)a1;
- (void)removeAllAnimations;
- (id)dataRepresentationWithOptions:(id)a0;
- (void)removeAnimationForKey:(id)a0;
- (void)setFrameRate:(double)a0;
- (id)preferredConfiguration;
- (float)playbackSpeed;
- (void)setPlaybackSpeed:(float)a0;
- (void)setRootNode:(id)a0;
- (struct __CFXAnimationManager { } *)animationManager;
- (void)commonInit:(BOOL)a0;
- (void *)__CFObject;
- (void)_syncObjCAnimations;
- (id)initForJavascript:(id)a0;
- (BOOL)_allowsDefaultLightingEnvironmentFallback;
- (BOOL)__removeAnimation:(id)a0 forKey:(id)a1;
- (void)_copyAnimationsFrom:(id)a0;
- (void)_dumpToDisk;
- (id)_exportAsMovieOperationWithDestinationURL:(id)a0 size:(struct CGSize { double x0; double x1; })a1 attributes:(id)a2 delegate:(id)a3 didEndSelector:(SEL)a4 userInfo:(void *)a5;
- (id)_nodeWithIndexPath:(id)a0;
- (void)_pauseAnimation:(BOOL)a0 forKey:(id)a1 pausedByNode:(BOOL)a2;
- (id)_physicsWorldCreateIfNeeded:(BOOL)a0;
- (id)_subnodeFromIndexPath:(id)a0;
- (void)addAnimationPlayer:(id)a0 forKey:(id)a1;
- (id)animationPlayerForKey:(id)a0;
- (id)authoringEnvironment2;
- (void)bindAnimatablePath:(id)a0 toObject:(id)a1 withKeyPath:(id)a2 options:(id)a3;
- (id)copyAnimationChannelForKeyPath:(id)a0 animation:(id)a1;
- (id)copyAnimationChannelForKeyPath:(id)a0 property:(id)a1;
- (id)debugQuickLookObjectWithPointOfView:(id)a0;
- (id)exportAsMovieOperationWithDestinationURL:(id)a0 size:(struct CGSize { double x0; double x1; })a1 attributes:(id)a2 delegate:(id)a3 didEndSelector:(SEL)a4 userInfo:(void *)a5;
- (void)removeAllAnimationsWithBlendOutDuration:(float)a0;
- (void)removeAllBindings;
- (void)removeAnimationForKey:(id)a0 blendOutDuration:(float)a1;
- (id)rootNodeForLayer:(int)a0;
- (void)setRootNode:(id)a0 forLayer:(int)a1;
- (void)setUpAxis:(SEL)a0;
- (void)set_allowsDefaultLightingEnvironmentFallback:(BOOL)a0;
- (void)unbindAnimatablePath:(id)a0;
- (void /* unknown type, empty encoding */)upAxis;
- (BOOL)writeToURLWithUSDKit:(id)a0;
- (id)defaultPointOfView;
- (BOOL)writeToURL:(id)a0 options:(id)a1 progressHandler:(id /* block */)a2;
- (struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } *)mutex;
- (void)_vfxDeprecatedAddAnimation:(id)a0 forKey:(id)a1;
- (void)prepareForRenderer:(id)a0 progressHandler:(id /* block */)a1;
- (id)assetRegistry;
- (id)triggerManager;
- (void)mergeWorld:(id)a0 parentNode:(id)a1 parentAssetNode:(id)a2;
- (void)prepareWithRenderer:(id)a0;
- (id)presentationScene;
- (void)updateMemoryOwnership;
- (id)_worlds;
- (void)sendSignalWithIdentifier:(id)a0 delay:(float)a1;
- (void)stopReplication;
- (void)setFogColor_linearExtendedSRGB:(SEL)a0;
- (void)_clearWorldRef;
- (id)_copyAndCompile:(BOOL)a0;
- (void)_copyBindingsFrom:(id)a0;
- (void)_copyInto:(id)a0 compile:(BOOL)a1;
- (void)_mergeWorld:(id)a0 parentNode:(id)a1 parentAssetNode:(id)a2 remapEntities:(BOOL)a3;
- (void)_remapEntities:(id)a0 srcWorldIdentifier:(id)a1;
- (void)_remapObjects:(id)a0 remapTable:(struct __CFDictionary { } *)a1;
- (void)_scaleWorldBy:(float)a0;
- (void)_sendSignalWithIdentifier:(id)a0 delay:(float)a1;
- (void)_setRootNode:(id)a0 immediate:(BOOL)a1;
- (void)_setSourceObject:(id)a0 forBinding:(id)a1;
- (void)_updateModelFromPresentation;
- (void)_updatePresentationFromModel;
- (id)_vfxAnimationForKey:(id)a0;
- (id)_vfxBindings;
- (id)assetPathResolver;
- (id)buildIdentifierRemapTable;
- (void)cleanupPrefabsReferences;
- (void)cloneModelToPresentationAndStartReplicationStream;
- (id)collectCoreEntityHandles;
- (id)copyAndCompileScripts;
- (id)defaultRenderGraph;
- (void)enumerateAnimationReferencesUsingBlock:(id /* block */)a0;
- (void)enumerateReferencesForOperation:(long long)a0 usingBlock:(id /* block */)a1;
- (void /* unknown type, empty encoding */)fogColor_linearExtendedSRGB;
- (id)initPresentationWorldWithWorldRef:(struct __CFXWorld { } *)a0;
- (id)initWithWorldRef:(struct __CFXWorld { } *)a0;
- (BOOL)initializeCoreEntityManagerWithInfo:(id)a0 error:(id *)a1;
- (BOOL)isPresentationObject;
- (BOOL)loadCoreEntityManagerFromURL:(id)a0 options:(id)a1 infoOut:(id)a2 error:(id *)a3;
- (void)loadMDLAsset:(id)a0 options:(id)a1 context:(id)a2;
- (void)loadSCN:(id)a0 options:(id)a1 error:(id *)a2;
- (BOOL)migrateCoreEntityManagerWithInfo:(id)a0 error:(id *)a1;
- (long long)presentationEntityFromModel:(long long)a0;
- (id)presentationWorld;
- (id)remapTable;
- (void)replicateToRuntimeAndStartReplicationWithOptions:(id)a0;
- (void)resolveVFXCoreAndTagReferences;
- (void)setAssetPathResolver:(id)a0;
- (void)setAuthoringEnvironment2:(id)a0;
- (void)setDefaultPointOfView:(id)a0;
- (void)setDefaultRenderGraph:(id)a0;
- (void)setReplicationDelegate:(id)a0;
- (void)setShaderCacheConfigurations:(id)a0;
- (void)setStateNamed:(id)a0;
- (id)shaderCacheConfigurations;
- (id)snapshotWithSize:(struct CGSize { double x0; double x1; })a0 pointOfView:(id)a1;
- (void)startRuntimeThread;

@end
