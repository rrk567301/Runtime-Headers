@class VNSession, _TtC26SensitiveContentAnalysisML33SCMLCombinedImageSanitizerBackend, SCMLHandler;

@interface SCMLImageSanitizer : NSObject {
    SCMLHandler *_handler;
    unsigned int _granularity;
    unsigned int _mode;
    unsigned long long _backends;
    unsigned int _region;
    _TtC26SensitiveContentAnalysisML33SCMLCombinedImageSanitizerBackend *_combinedBackend;
    VNSession *_vnSession;
    struct vector<std::pair<unsigned long, std::unique_ptr<scml::ClipEmbeddingClassifier>>, std::allocator<std::pair<unsigned long, std::unique_ptr<scml::ClipEmbeddingClassifier>>>> { void *__begin_; void *__end_; void *__cap_; } _clipEmbeddingClassifiers;
    struct unordered_map<MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>, std::hash<MADUnifiedEmbeddingVersion>, std::equal_to<MADUnifiedEmbeddingVersion>, std::allocator<std::pair<const MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>>>> { struct __hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>>, std::__unordered_map_hasher<MADUnifiedEmbeddingVersion, std::__hash_value_type<MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>>, std::hash<MADUnifiedEmbeddingVersion>, std::equal_to<MADUnifiedEmbeddingVersion>>, std::__unordered_map_equal<MADUnifiedEmbeddingVersion, std::__hash_value_type<MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>>, std::equal_to<MADUnifiedEmbeddingVersion>, std::hash<MADUnifiedEmbeddingVersion>>, std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion, std::unique_ptr<scml::ClipImageEncoder>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _clipImageEncoders;
    struct unordered_map<std::string, float, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, float>>> { struct __hash_table<std::__hash_value_type<std::string, float>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, float>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, float>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, float>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _tabooThresholds;
    struct unordered_map<std::string, (anonymous namespace)::IVSThresholdInfo, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, (anonymous namespace)::IVSThresholdInfo>>> { struct __hash_table<std::__hash_value_type<std::string, (anonymous namespace)::IVSThresholdInfo>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, (anonymous namespace)::IVSThresholdInfo>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, (anonymous namespace)::IVSThresholdInfo>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, (anonymous namespace)::IVSThresholdInfo>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, (anonymous namespace)::IVSThresholdInfo>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, (anonymous namespace)::IVSThresholdInfo>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, (anonymous namespace)::IVSThresholdInfo>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, (anonymous namespace)::IVSThresholdInfo>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _ivsThresholds;
}

- (id)init;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initWithConfiguration:(id)a0 error:(id *)a1;
- (void)sanitizeRequestAsynchronously:(id)a0 completionHandler:(id /* block */)a1;
- (id)_sanitizeRequest:(id)a0 error:(id *)a1;
- (void)_sanitizeRequestAsynchronously:(id)a0 completionHandler:(id /* block */)a1;
- (void)dumpPixelBuffer:(struct __CVBuffer { } *)a0 label:(id)a1;
- (id)tempDumpURL:(id)a0 withSuffix:(id)a1;
- (void)updateSanitization:(id)a0 withAnalysisResult:(id)a1 forStyle:(unsigned int)a2 isChildPresent:(BOOL)a3;
- (void)updateSanitization:(id)a0 withObservations:(id)a1;

@end
