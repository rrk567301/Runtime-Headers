@class NSString, StockholmALSCoexHandler, CBColorFilter, CBCEModule, NSMutableDictionary, ConfidenceEstimatorStats, NSMutableArray, NSObject;
@protocol CBPrimitiveConfigurationProvider, OS_dispatch_source, CBBrightnessProxy, CBBacklightConfigurationProvider;

@interface CBColorModuleShared : CBModule <CBContainerModuleProtocol, CBHIDServiceProtocol, NightShiftSupportProtocol, CBStatusInfoProtocol, ColorMitigationSupportProtocol> {
    id<CBBrightnessProxy> _brightnessControlProxy;
    id<CBPrimitiveConfigurationProvider, CBBacklightConfigurationProvider> _backlightConfig;
    NSMutableArray *_relevantServices;
    NSMutableDictionary *_alsNodes;
    NSMutableDictionary *_currentChromaticitySensitivity;
    struct { unsigned char firstTimerFire; NSObject<OS_dispatch_source> *logTimer; int periodS; } _reportContext;
    BOOL _displayOn;
    BOOL _forceInitialFactorUpdate;
    struct __IOHIDServiceClient { } *_dfr;
    BOOL _clamshell;
    NSObject<OS_dispatch_source> *_rampTimer;
    NSString *_userName;
    NSMutableDictionary *_properties;
    struct ColorType { struct ColorEffects *cfx; BOOL blueReductionEnabled; float blueReductionFactor; BOOL nightModeSupported; BOOL fadeInProgress; BOOL enforceSlowRamps; BOOL whitePointEnabled; double enablementTs; BOOL forceSnapping; BOOL harmonyHWSupported; BOOL harmonyNativeSupported; BOOL harmonySystemSupported; BOOL harmonyEnabled; BOOL harmonyActive; BOOL harmonyAvailable; float harmonyStrength; float harmonyFixedStrength; BOOL presetDisableHarmony; unsigned long long moduleType; } _colorStruct;
    BOOL _aggregatedConfigApplied;
    NSMutableDictionary *_aggregatedConfig;
    long long _analyticsPeriodicSender;
    unsigned long long _colorFilterModeOverride;
    CBColorFilter *_colorFilter;
    NSMutableArray *_filters;
    NSMutableDictionary *_pendingALSSamples;
    StockholmALSCoexHandler *_nfcCoex;
    int _NSamples;
    NSObject<OS_dispatch_source> *_timeoutTimer;
    BOOL _firstALSEventArrived;
    float _firstSampleTimeoutValue;
    BOOL _allALSEventsArrived;
    BOOL _forceColorUpdate;
    BOOL _potentiallyBustedALS;
    BOOL _continueWithFewerALSs;
    BOOL _useCopyEventOnDisplayWake;
    float _preStrobeDimPeriod;
    BOOL _enableMitigations;
    NSMutableArray *_modules;
    CBCEModule *_ceModule;
    unsigned int _ceModelID;
    float _ceConfidenceThreshold;
    ConfidenceEstimatorStats *_confidenceEstimatorStats;
    BOOL _colorEffectsEnabled;
    BOOL _ammoliteEnabledStatus;
    BOOL _supportsAmmoliteWithoutColor;
    BOOL _ammoliteSystemSupported;
    float _trustedLux;
    BOOL _mirror;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)copyPropertyForKey:(id)a0;
- (BOOL)displayBrightnessFactorPropertyHandler:(id)a0;
- (void)start;
- (void)dealloc;
- (void)updateAvailability;
- (void)stop;
- (id)copyPropertyInternalForKey:(id)a0;
- (BOOL)removeHIDServiceClient:(struct __IOHIDServiceClient { } *)a0;
- (void)setPreference:(id)a0 forKey:(id)a1 user:(id)a2;
- (BOOL)setProperty:(id)a0 forKey:(id)a1;
- (void)handleNotificationForKey:(id)a0 withProperty:(id)a1;
- (void)handleALSEvent:(id)a0;
- (void)setNightShiftFactorDictionary:(id)a0;
- (BOOL)addHIDServiceClient:(struct __IOHIDServiceClient { } *)a0;
- (void)updateClamshellState:(BOOL)a0;
- (id)copyPropertyForKey:(id)a0 withParameter:(id)a1;
- (id)copyPreferenceForKey:(id)a0 user:(id)a1;
- (id)copyIdentifiers;
- (BOOL)handleHIDEvent:(struct __IOHIDEvent { } *)a0 from:(struct __IOHIDServiceClient { } *)a1;
- (void)switchToUser:(id)a0;
- (BOOL)BLRCCTRangePropertyHandler:(id)a0;
- (BOOL)BLRFactorPropertyHandler:(id)a0;
- (BOOL)CAAABSensorOverridePropertyHandler:(id)a0;
- (BOOL)CAFadesEnabledHandler:(id)a0;
- (BOOL)CAStrengthPropertyHandler:(id)a0;
- (void)CAStrengthUpdate:(float)a0 withPeriod:(float)a1;
- (BOOL)CAWeakestColorAdaptationModePropertyHandler:(id)a0;
- (BOOL)CEOverridePropertyHandler:(id)a0 key:(id)a1;
- (BOOL)colorRampPeriodOverrideHandler:(id)a0;
- (BOOL)CAFixedStrengthPropertyHandler:(id)a0;
- (BOOL)BLRCCTTargetPropertyHandler:(id)a0;
- (void)BLRFactorUpdate:(float)a0;
- (void)BLRFactorUpdate:(float)a0 withPeriod:(float)a1 shouldForceUpdate:(BOOL)a2;
- (BOOL)CAEnabledPropertyHandler:(id)a0;
- (BOOL)CALabShiftPropertyHandler:(id)a0;
- (BOOL)CAModeMappingHandler:(id)a0;
- (BOOL)CAStrengthRampPeriodTweakPropertyHandler:(id)a0;
- (BOOL)CAWeakestColorAdaptationModeAnimatedPropertyHandler:(id)a0;
- (BOOL)CEEnablePropertyHandler:(id)a0 key:(id)a1;
- (BOOL)CoreBrightnessFeaturesDisabledPropertyHandler:(id)a0;
- (void)initColorStruct;
- (float)absoluteDifferenceForCurrentColor:(struct { float x0; float x1; })a0 andDeltaError:(struct { float x0; float x1; })a1;
- (void)activateBLR;
- (void)activateColorAdaptation;
- (BOOL)ammolitePropertyHandler:(id)a0;
- (BOOL)ammoliteSupported;
- (void)applyAggregatedConfig:(BOOL)a0;
- (BOOL)applyAggregatedConfigPropertyHandler:(id)a0;
- (BOOL)applyPendingSamples;
- (BOOL)applySamples:(id)a0 withinTimeout:(float)a1;
- (void)armFirstALSSampleTimer;
- (BOOL)autoBrightnessPropertyHandler:(id)a0;
- (void)cancelFirstSampleTimeout;
- (BOOL)clamshellStatePropertyHandler:(id)a0;
- (BOOL)colorFilterModeHandler:(id)a0;
- (void)colorRampRoutine:(const struct { float x0; float x1[9]; unsigned int x2; float x3; struct { float x0; float x1; } x4; int x5; double x6; } *)a0;
- (void)commitPowerLogReport:(struct ColorReport { struct { double x0[17]; int x1[17]; int x2; unsigned long long x3; } x0; struct { double x0[17]; int x1[17]; int x2; unsigned long long x3; } x1; struct { double x0[46]; int x1; unsigned long long x2; } x2; struct BlueReductionReport { double x0; double x1; double x2; BOOL x3; float x4; } x3; struct { double x0[10]; int x1; double x2; } x4; struct { double x0; double x1; double x2; double x3; float x4; float x5; } x5; int x6; } *)a0;
- (id)copyALSSamples;
- (id)copyLocalAggregatedConfig;
- (id)copyPreferenceInternalForKey:(id)a0;
- (void)displayBrightnessFactorUpdate:(float)a0;
- (BOOL)displayPresetHarmonyHandler:(id)a0;
- (void)enableCarryLog;
- (void)enableMitigations:(BOOL)a0;
- (BOOL)externalDisplayModeHandler:(id)a0;
- (void)filterInitialize;
- (void)firstALSSampleTimeout;
- (id)getRegistryIDForHIDServiceClient:(struct __IOHIDServiceClient { } *)a0;
- (void)handleDisplayBrightnessFactorZero:(id)a0;
- (void)handleFilterNotificationForKey:(id)a0 withProperty:(id)a1;
- (void)handleHIDEventInternal:(struct __IOHIDEvent { } *)a0 from:(struct __IOHIDServiceClient { } *)a1;
- (BOOL)hasExternalALS;
- (BOOL)hasRearALS;
- (void)initAmmolite;
- (id)initDFRHarmonyWithSKL:(id)a0 queue:(id)a1;
- (id)initWithBrightnessControl:(id)a0 moduleType:(unsigned long long)a1 backlightConfig:(id)a2 queue:(id)a3;
- (id)initWithBrightnessControl:(id)a0 queue:(id)a1 backlightConfig:(id)a2 moduleType:(unsigned long long)a3;
- (void)inputAmbientColorSample:(struct CFXColorSample { float x0[3]; struct { float x0; float x1; } x1; float x2; } *)a0 force:(BOOL)a1 trust:(BOOL)a2;
- (BOOL)isDFR;
- (void)loadBacklightProperties;
- (id)newAdaptationModeMappingArray:(float *)a0 strengthNum:(int)a1;
- (id)newAdaptationModeMappingDictionary:(float *)a0 strengthNum:(int)a1;
- (id)newAggregatedConfigFromSerializedConfig:(id)a0;
- (id)newSerializedConfigFromAggregatedConfig:(id)a0;
- (void)notifyAndStoreAggregatedConfig;
- (BOOL)parseAdaptationModeMappingArray:(id)a0 strengths:(float *)a1 strengthNum:(int)a2;
- (BOOL)parseAdaptationModeMappingDictionary:(id)a0 strengths:(float *)a1 strengthNum:(int)a2;
- (BOOL)preStrobeDimPeriodPropertyHandler:(id)a0;
- (BOOL)preStrobePropertyHandler:(id)a0;
- (void)reportCommitWithStop:(BOOL)a0;
- (void)reportInitialize;
- (void)reportResetTimerWithStop:(BOOL)a0;
- (void)reportToCoreAnalytics:(struct ColorReport { struct { double x0[17]; int x1[17]; int x2; unsigned long long x3; } x0; struct { double x0[17]; int x1[17]; int x2; unsigned long long x3; } x1; struct { double x0[46]; int x1; unsigned long long x2; } x2; struct BlueReductionReport { double x0; double x1; double x2; BOOL x3; float x4; } x3; struct { double x0[10]; int x1; double x2; } x4; struct { double x0; double x1; double x2; double x3; float x4; float x5; } x5; int x6; } *)a0;
- (void)sendNotificationForKey:(id)a0 andValue:(id)a1;
- (BOOL)serializedAggregatedConfigPropertyHandler:(id)a0;
- (BOOL)setColorSensitivity:(float)a0 forALS:(struct __IOHIDServiceClient { } *)a1;
- (void)setLabShift;
- (void)setNativeWhitePoint;
- (void)setPreferenceInternal:(id)a0 forKey:(id)a1;
- (BOOL)setPropertyInternal:(id)a0 forKey:(id)a1;
- (void)setWhitePointType;
- (void)setupAggregatedConfig;
- (BOOL)startNewTimerWithFreq:(float)a0;
- (BOOL)supportsColorRepairability;
- (void)switchToUserInternal:(id)a0;
- (void)timerRoutine:(id)a0;
- (BOOL)ttRestrictionHandler:(id)a0;
- (BOOL)ttRestrictionReload;
- (void)updateActivity;
- (void)updateAggregatedConfigWithObject:(id)a0 forKey:(id)a1;
- (void)updateColorFilterMode;
- (void)updateHarmonySupport;
- (void)updateSensorPolicy;
- (void)updateSensorSensitivity:(struct __IOHIDServiceClient { } *)a0 forValue:(struct __IOHIDEvent { } *)a1;
- (BOOL)userSwitchPropertyHandler:(id)a0;

@end
