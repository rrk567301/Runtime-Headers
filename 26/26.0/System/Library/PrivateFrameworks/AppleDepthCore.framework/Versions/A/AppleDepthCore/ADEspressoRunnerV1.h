@interface ADEspressoRunnerV1 : NSObject <ADEspressoRunnerProtocol> {
    void *_ctx;
    void *_plan;
    struct { void *plan; int network_index; } _net;
    int _engineType;
    int _storageType;
    struct unordered_map<std::string, PixelBufferSharedPtr, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, PixelBufferSharedPtr>>> { struct __hash_table<std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, PixelBufferSharedPtr>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _pixelBuffersToBindAsVImage;
    struct unordered_map<std::string, PixelBufferSharedPtr, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, PixelBufferSharedPtr>>> { struct __hash_table<std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, PixelBufferSharedPtr>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _pixelBuffersToBindDirect;
    struct unordered_map<std::string, PixelBufferSharedPtr, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, PixelBufferSharedPtr>>> { struct __hash_table<std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, PixelBufferSharedPtr>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _pixelBuffersToBindIndirect;
    struct unordered_map<std::string, PixelBufferSharedPtr, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, PixelBufferSharedPtr>>> { struct __hash_table<std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, PixelBufferSharedPtr>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _pixelBuffersToBindAsEspressoBufferInput;
    struct unordered_map<std::string, PixelBufferSharedPtr, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, PixelBufferSharedPtr>>> { struct __hash_table<std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, PixelBufferSharedPtr>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, PixelBufferSharedPtr>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PixelBufferSharedPtr>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _pixelBuffersToBindAsEspressoBufferOutput;
    BOOL _CPUBindWA;
}

- (long long)execute;
- (void)dealloc;
- (id).cxx_construct;
- (void).cxx_destruct;
- (struct __CVBuffer { } *)createAndRegisterPixelBufferForDescriptor:(id)a0;
- (id)initWithPath:(id)a0 forEngine:(unsigned long long)a1 configurationName:(id)a2;
- (id)networkVersionString;
- (id)registerDescriptor:(id)a0;
- (long long)registerPixelBuffer:(struct __CVBuffer { } *)a0 forDescriptor:(id)a1;
- (long long)updateFeedbackLoopInputBuffer:(struct __CVBuffer **)a0 inputDescriptor:(id)a1 outputBuffer:(struct __CVBuffer **)a2 outputDescriptor:(id)a3;
- (int)bindPixelBufferAsVImage:(struct __CVBuffer { } *)a0 toBlob:(const char *)a1;
- (BOOL)isCVPixelBufferBindingSupportedForFormat:(unsigned int)a0;
- (BOOL)isDirectBindingSupportedForFormat:(unsigned int)a0;
- (BOOL)isVImageBindingSupportedForFormat:(unsigned int)a0;
- (long long)registerIOSurface:(struct __IOSurface { } *)a0 forDescriptor:(id)a1;
- (long long)registerPixelBufferPtr:(struct __CVBuffer **)a0 forDescriptor:(id)a1;
- (void)unlockAllVImageBindBuffers;

@end
