@class HKSampleType, HDProfile, HKQuantityType, _HKFilter, NSObject, HKQueryServerConfiguration, HDClientAuthorizationOracle, NSDictionary, HDQueryServerClientState, HKObjectType, HDHealthStoreClient, NSString, NSSet, HDDataCollectionAssertion, HDDaemonTransaction, HDDatabaseTransactionContextStatistics, NSArray, NSUUID;
@protocol HDQueryServerDelegate, NSXPCProxyCreating, OS_dispatch_queue, HKQueryClientInterface;

@interface HDQueryServer : NSObject <HKQueryServerInterface, HDDataObserver, HDDatabaseProtectedDataObserver, HDAssociationObserver, HDTaskServer> {
    NSDictionary *_baseDataEntityEncodingOptions;
    id /* block */ _queryDidFinishHandler;
    NSArray *_dataObservationAssertions;
    HDDataCollectionAssertion *_dataCollectionAssertion;
    HDDaemonTransaction *_activationTransaction;
    HDDaemonTransaction *_runningTransaction;
    _Atomic int _queryState;
    BOOL _shouldTakeObservationAssertions;
    BOOL _observingData;
    BOOL _isCollectingData;
    _Atomic BOOL _shouldFinish;
    _Atomic BOOL _shouldPause;
    NSObject<OS_dispatch_queue> *_unitTestQueryQueue;
    HDDatabaseTransactionContextStatistics *_transactionStatistics;
}

@property (readonly) BOOL clientHasActiveWorkout;
@property (copy, nonatomic) HDQueryServerClientState *clientState;
@property (readonly, nonatomic) double activationTime;
@property (readonly, nonatomic) BOOL hasActiveDaemonTransaction;
@property (readonly, weak, nonatomic) HDClientAuthorizationOracle *authorizationOracle;
@property (copy, nonatomic) id /* block */ unitTest_queryServerSetShouldPauseHandler;
@property (copy, nonatomic) id /* block */ unitTest_queryServerWillChangeStateHandler;
@property (copy, nonatomic) id /* block */ unitTest_queryServerDidFinishStateTransitionHandler;
@property (weak, nonatomic) id<HDQueryServerDelegate> delegate;
@property (readonly, copy, nonatomic) NSUUID *queryUUID;
@property (readonly, copy, nonatomic) HKQueryServerConfiguration *configuration;
@property (readonly, nonatomic) HDHealthStoreClient *client;
@property (readonly, weak, nonatomic) HDProfile *profile;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queryQueue;
@property (readonly) long long queryState;
@property (nonatomic) double collectionInterval;
@property (readonly, nonatomic) _HKFilter *filter;
@property (nonatomic) long long dataCount;
@property (readonly, nonatomic) id<HKQueryClientInterface, NSXPCProxyCreating> clientProxy;
@property (readonly, copy, nonatomic) HKObjectType *objectType;
@property (readonly, copy, nonatomic) NSSet *objectTypes;
@property (readonly, nonatomic) HKSampleType *sampleType;
@property (readonly, nonatomic) HKQuantityType *quantityType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)requiredEntitlements;
+ (id)taskIdentifier;
+ (Class)queryClass;
+ (Class)configurationClass;
+ (BOOL)supportsAnchorBasedAuthorization;
+ (BOOL)validateConfiguration:(id)a0 client:(id)a1 error:(id *)a2;
+ (id)builtInQueryServerClasses;

- (void)samplesAdded:(id)a0 anchor:(id)a1;
- (id)exportedInterface;
- (id)diagnosticDescription;
- (void)database:(id)a0 protectedDataDidBecomeAvailable:(BOOL)a1;
- (void)dealloc;
- (id)taskUUID;
- (void)_queue_start;
- (void)_queue_didDeactivate;
- (void)connectionInvalidated;
- (BOOL)validateConfiguration:(id *)a0;
- (void)_queue_didChangeStateFromPreviousState:(long long)a0 state:(long long)a1;
- (void)samplesOfTypesWereRemoved:(id)a0 anchor:(id)a1;
- (BOOL)_shouldObserveOnPause;
- (id)authorizationStatusRecordForType:(id)a0 error:(id *)a1;
- (BOOL)prepareToActivateServerWithError:(id *)a0;
- (id)remoteInterface;
- (BOOL)_shouldListenForUpdates;
- (id)initWithUUID:(id)a0 configuration:(id)a1 client:(id)a2 delegate:(id)a3;
- (void).cxx_destruct;
- (void)_queue_stop;
- (void)remote_deactivateServer;
- (void)remote_startQueryWithCompletion:(id /* block */)a0;
- (void)deactivateServerWithCompletion:(id /* block */)a0;
- (void)_queue_startDataCollection;
- (void)_queue_stopDataCollection;
- (BOOL)_shouldExecuteWhenProtectedDataIsUnavailable;
- (BOOL)_shouldObserveAllSampleTypes;
- (BOOL)_shouldObserveDatabaseProtectedDataAvailability;
- (BOOL)_shouldStopProcessingQuery;
- (BOOL)_shouldSuspendQuery;
- (void)activateServerWithClientState:(id)a0 error:(id)a1;
- (void)associationsUpdatedForObject:(id)a0 subObject:(id)a1 type:(unsigned long long)a2 behavior:(unsigned long long)a3 objects:(id)a4 anchor:(id)a5;
- (void)clientStateDidChange:(id)a0;
- (void)clientStateWillChange:(id)a0;
- (id)createDatabaseTransactionContext;
- (id)filteredSamplesForClientWithSamples:(id)a0;
- (id)newDataEntityEnumerator;
- (void)onQueue:(id /* block */)a0;
- (id)predicateForQueryClient;
- (id /* block */)sampleAuthorizationFilter;
- (id)sanitizedSampleForQueryClient:(id)a0;
- (void)scheduleDatabaseAccessOnQueueWithBlock:(id /* block */)a0;
- (void)schedulePause;
- (void)setQueryDidFinishHandler:(id /* block */)a0;

@end
