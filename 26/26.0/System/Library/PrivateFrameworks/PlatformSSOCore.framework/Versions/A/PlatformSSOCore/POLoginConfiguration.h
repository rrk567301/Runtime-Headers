@class NSString, NSDictionary, NSData, NSURL, NSArray, NSNumber;

@interface POLoginConfiguration : NSObject <NSCopying, NSSecureCoding>

@property (class, readonly) BOOL supportsSecureCoding;

@property (retain) NSDictionary *customAssertionRequestHeaderClaims;
@property (retain) NSDictionary *customAssertionRequestBodyClaims;
@property (retain) NSDictionary *customLoginRequestHeaderClaims;
@property (retain) NSDictionary *customLoginRequestBodyClaims;
@property (retain) NSDictionary *customRefreshRequestHeaderClaims;
@property (retain) NSDictionary *customRefreshRequestBodyClaims;
@property (retain) NSDictionary *customKeyRequestHeaderClaims;
@property (retain) NSDictionary *customKeyRequestBodyClaims;
@property (retain) NSDictionary *customKeyExchangeRequestHeaderClaims;
@property (retain) NSDictionary *customKeyExchangeRequestBodyClaims;
@property (retain, nonatomic) NSData *_loginRequestEncryptionPublicKeyData;
@property (retain, nonatomic) NSData *_hpkeAuthPublicKeyData;
@property (copy, nonatomic) NSString *invalidCredentialPredicate;
@property (copy, nonatomic) NSString *accountDisplayName;
@property (readonly, nonatomic) NSString *clientID;
@property (readonly, nonatomic) NSString *issuer;
@property (copy, nonatomic) NSString *audience;
@property (copy, nonatomic) NSURL *tokenEndpointURL;
@property (copy, nonatomic) NSURL *jwksEndpointURL;
@property (copy, nonatomic) NSArray *jwksTrustedRootCertificates;
@property (copy, nonatomic) NSData *deviceContext;
@property (nonatomic) unsigned long long userSEPKeyBiometricPolicy;
@property (copy, nonatomic) NSURL *nonceEndpointURL;
@property (copy, nonatomic) NSString *nonceResponseKeypath;
@property (copy, nonatomic) NSString *serverNonceClaimName;
@property (copy, nonatomic) NSArray *customNonceRequestValues;
@property (copy, nonatomic) NSNumber *serverNonceExpirationTime;
@property (copy, nonatomic) NSString *additionalScopes;
@property (copy, nonatomic) NSString *additionalAuthorizationScopes;
@property (nonatomic) BOOL includePreviousRefreshTokenInLoginRequest;
@property (copy, nonatomic) NSString *previousRefreshTokenClaimName;
@property (copy, nonatomic) NSString *customRequestJWTParameterName;
@property (copy, nonatomic) NSArray *customLoginRequestValues;
@property (copy, nonatomic) NSString *uniqueIdentifierClaimName;
@property (copy, nonatomic) NSString *groupRequestClaimName;
@property (copy, nonatomic) NSString *groupResponseClaimName;
@property (copy, nonatomic) NSURL *refreshEndpointURL;
@property (copy, nonatomic) NSArray *customRefreshRequestValues;
@property (copy, nonatomic) NSArray *kerberosTicketMappings;
@property (nonatomic) unsigned long long federationType;
@property (copy, nonatomic) NSString *federationRequestURN;
@property (copy, nonatomic) NSURL *federationMexURL;
@property (copy, nonatomic) NSURL *federationUserPreauthenticationURL;
@property (copy, nonatomic) NSString *federationMexURLKeypath;
@property (copy, nonatomic) NSString *federationPredicate;
@property (copy, nonatomic) NSArray *customFederationUserPreauthenticationRequestValues;
@property (nonatomic) struct __SecKey { } *loginRequestEncryptionPublicKey;
@property (copy, nonatomic) NSNumber *loginRequestEncryptionAlgorithm;
@property (copy, nonatomic) NSData *loginRequestHpkePsk;
@property (copy, nonatomic) NSData *loginRequestHpkePsk_id;
@property (retain, nonatomic) NSData *loginRequestEncryptionAPVPrefix;
@property (copy, nonatomic) NSURL *keyEndpointURL;
@property (copy, nonatomic) NSArray *customKeyExchangeRequestValues;
@property (copy, nonatomic) NSArray *customKeyRequestValues;
@property (copy, nonatomic) NSArray *customDecryptionRequestValues;
@property (copy, nonatomic) NSURL *decryptionEndpointURL;
@property (copy, nonatomic) NSData *hpkePsk;
@property (copy, nonatomic) NSData *hpkePsk_id;
@property (nonatomic) struct __SecKey { } *hpkeAuthPublicKey;

+ (void)configurationWithOpenIdConfigurationURL:(id)a0 clientID:(id)a1 issuer:(id)a2 completion:(id /* block */)a3;
+ (void)configurationWithOpenIdConfigurationURL:(id)a0 identityProviderURL:(id)a1 clientId:(id)a2 issuer:(id)a3 completion:(id /* block */)a4;

- (id)dataRepresentation;
- (id)initWithData:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)encodeWithCoder:(id)a0;
- (id)description;
- (id)initWithCoder:(id)a0;
- (void).cxx_destruct;
- (struct __SecKey { } *)loginRequestEncryptionPublicKey;
- (struct __SecKey { } *)hpkeAuthPublicKey;
- (id)initWithClientID:(id)a0 issuer:(id)a1 tokenEndpointURL:(id)a2 jwksEndpointURL:(id)a3 audience:(id)a4;
- (BOOL)setCustomAssertionRequestBodyClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomAssertionRequestHeaderClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomKeyExchangeRequestBodyClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomKeyExchangeRequestHeaderClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomKeyRequestBodyClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomKeyRequestHeaderClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomLoginRequestBodyClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomLoginRequestHeaderClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomRefreshRequestBodyClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomRefreshRequestHeaderClaims:(id)a0 returningError:(id *)a1;
- (void)setHpkeAuthPublicKey:(struct __SecKey { } *)a0;
- (void)setLoginRequestEncryptionPublicKey:(struct __SecKey { } *)a0;
- (id)mergedConfigurationWithUserLoginConfiguration:(id)a0;
- (id)_initWithClientId:(id)a0 issuer:(id)a1 tokenEndpointURL:(id)a2 jwksEndpointURL:(id)a3 audience:(id)a4;
- (id)dataRepresentationForDisplay:(BOOL)a0;
- (BOOL)setCustomDecryptionRequestBodyClaims:(id)a0 returningError:(id *)a1;
- (BOOL)setCustomDecryptionRequestHeaderClaims:(id)a0 returningError:(id *)a1;

@end
