@class NSString, NSUUID;
@protocol MTLDevice, MTLBinaryArchive, MTLLibrary, MTLBuffer, MTLCommandQueue;

@interface GSAsset : NSObject <NSCopying> {
    struct MetalContext { id<MTLDevice> device; id<MTLLibrary> library; id<MTLBinaryArchive> archive; id<MTLCommandQueue> commandQueue; struct unordered_map<std::string, id<MTLComputePipelineState>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, id<MTLComputePipelineState>>>> { struct __hash_table<std::__hash_value_type<std::string, id<MTLComputePipelineState>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, id<MTLComputePipelineState>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, id<MTLComputePipelineState>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, id<MTLComputePipelineState>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, id<MTLComputePipelineState>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, id<MTLComputePipelineState>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, id<MTLComputePipelineState>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, id<MTLComputePipelineState>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } compute_pipelines; struct unordered_map<std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>>>> { struct __hash_table<std::__hash_value_type<std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::tuple<id<MTLRenderPipelineState>, id<MTLDepthStencilState>>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } render_pipelines; BOOL force_binary_archive_; } context;
}

@property (nonatomic) struct shared_ptr<apple3dgs::Asset> { struct Asset *__ptr_; struct __shared_weak_count *__cntrl_; } impl;
@property (retain, nonatomic) NSString *path;
@property (retain, nonatomic) id<MTLBuffer> coords;
@property (retain, nonatomic) id<MTLBuffer> features;
@property (retain, nonatomic) id<MTLBuffer> alphas;
@property (retain, nonatomic) id<MTLBuffer> scales;
@property (retain, nonatomic) id<MTLBuffer> rots;
@property (retain, nonatomic) id<MTLBuffer> cov3Ds;
@property (retain, nonatomic) id<MTLBuffer> radius;
@property (nonatomic) struct { void /* unknown type, empty encoding */ x0[4]; } modelMatrix;
@property (nonatomic) struct { void /* unknown type, empty encoding */ x0[4]; } defaultViewMatrix;
@property (nonatomic) struct { void /* unknown type, empty encoding */ x0[3]; } defaultIntrinsics;
@property (nonatomic) void /* unknown type, empty encoding */ defaultImageSize;
@property (nonatomic) float covarianceRegularization;
@property (nonatomic) unsigned int numGaussians;
@property (nonatomic) unsigned int numFeatures;
@property (nonatomic) unsigned int maxCoeff;
@property (nonatomic) unsigned int sortingMode;
@property (nonatomic) unsigned int splattingMode;
@property (nonatomic) unsigned int colorSpace;
@property (nonatomic) struct CGColorSpace { } *cgColorSpace;
@property (nonatomic) unsigned int activationOpacity;
@property (nonatomic) unsigned int activationScale;
@property (nonatomic) void /* unknown type, empty encoding */ centroid;
@property (retain, nonatomic) NSUUID *uuid;
@property (nonatomic) unsigned int maxFrames;
@property (nonatomic) unsigned int currentFrame;

- (void /* unknown type, empty encoding */)centroid;
- (id)features;
- (void)setColorSpace:(unsigned int)a0;
- (unsigned int)colorSpace;
- (id)scales;
- (void)setRadius:(id)a0;
- (BOOL)writeToURL:(id)a0 error:(id *)a1;
- (void)setScales:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void /* unknown type, empty encoding */)defaultImageSize;
- (id)init;
- (void)setUuid:(id)a0;
- (id)description;
- (id)uuid;
- (struct CGColorSpace { } *)cgColorSpace;
- (id).cxx_construct;
- (id)radius;
- (void)setCentroid:(SEL)a0;
- (void)setFeatures:(id)a0;
- (void).cxx_destruct;
- (id)coords;
- (unsigned int)currentFrame;
- (void)setCoords:(id)a0;
- (void)setSortingMode:(unsigned int)a0;
- (unsigned int)sortingMode;
- (void)setDefaultImageSize:(SEL)a0;
- (void)setCurrentFrame:(unsigned int)a0;
- (unsigned int)activationScale;
- (void)setModelMatrix:(struct { void /* unknown type, empty encoding */ x0[4]; })a0;
- (id)descriptionJSON;
- (void)setNumFeatures:(unsigned int)a0;
- (unsigned int)activationOpacity;
- (id)alphas;
- (BOOL)computeCentroids;
- (BOOL)computeCovariances:(id *)a0;
- (BOOL)computeCovariancesWith:(id)a0 error:(id *)a1;
- (id)cov3Ds;
- (float)covarianceRegularization;
- (struct { void /* unknown type, empty encoding */ x0[3]; })defaultIntrinsics;
- (struct { void /* unknown type, empty encoding */ x0[4]; })defaultViewMatrix;
- (id)initWithFile:(id)a0 forDevice:(id)a1 error:(id *)a2;
- (unsigned int)maxCoeff;
- (unsigned int)maxFrames;
- (struct { void /* unknown type, empty encoding */ x0[4]; })modelMatrix;
- (unsigned int)numFeatures;
- (unsigned int)numGaussians;
- (id)rots;
- (void)setActivationOpacity:(unsigned int)a0;
- (void)setActivationScale:(unsigned int)a0;
- (void)setAlphas:(id)a0;
- (void)setAlphas:(id)a0 withFormat:(unsigned long long)a1 stride:(unsigned long long)a2 offset:(unsigned long long)a3;
- (void)setCgColorSpace:(struct CGColorSpace { } *)a0;
- (void)setCoords:(id)a0 withFormat:(unsigned long long)a1 stride:(unsigned long long)a2 offset:(unsigned long long)a3;
- (void)setCov3Ds:(id)a0;
- (void)setCovarianceRegularization:(float)a0;
- (void)setDefaultIntrinsics:(struct { void /* unknown type, empty encoding */ x0[3]; })a0;
- (void)setDefaultViewMatrix:(struct { void /* unknown type, empty encoding */ x0[4]; })a0;
- (void)setFeatures:(id)a0 withFormat:(unsigned long long)a1 stride:(unsigned long long)a2 offset:(unsigned long long)a3;
- (void)setMaxCoeff:(unsigned int)a0;
- (void)setMaxFrames:(unsigned int)a0;
- (void)setNumGaussians:(unsigned int)a0;
- (void)setRots:(id)a0;
- (void)setRots:(id)a0 withFormat:(unsigned long long)a1 stride:(unsigned long long)a2 offset:(unsigned long long)a3;
- (void)setScales:(id)a0 withFormat:(unsigned long long)a1 stride:(unsigned long long)a2 offset:(unsigned long long)a3;
- (void)setSplattingMode:(unsigned int)a0;
- (unsigned int)splattingMode;
- (BOOL)transform:(struct { void /* unknown type, empty encoding */ x0[4]; })a0 error:(id *)a1;
- (BOOL)updateAtTimestepWithTVFile:(id)a0 atTimestep:(unsigned int)a1 error:(id *)a2;

@end
