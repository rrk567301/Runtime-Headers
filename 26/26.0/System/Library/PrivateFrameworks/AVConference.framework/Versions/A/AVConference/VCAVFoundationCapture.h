@class AVCaptureDevice, NSString, VCImageRotationConverter, VCImageResizingConverter, AVCaptureDepthDataOutput, AVCaptureMetadataOutput, AVCaptureSession, NSObject, NSMutableArray, AVCaptureDeviceInput, AVCaptureVideoDataOutput, AVCaptureDataOutputSynchronizer;
@protocol OS_dispatch_queue;

@interface VCAVFoundationCapture : VCVideoCapture <VCVideoSource, AVCaptureVideoDataOutputSampleBufferDelegate, VCEffectsManagerDelegate, AVCaptureMetadataOutputObjectsDelegate, AVCaptureDataOutputSynchronizerDelegate> {
    AVCaptureDeviceInput *_videoDeviceInput;
    AVCaptureVideoDataOutput *_videoCaptureOutput;
    NSObject<OS_dispatch_queue> *_captureSessionQueue;
    NSObject<OS_dispatch_queue> *_viewPointCorrectionQueue;
    AVCaptureSession *_captureSession;
    AVCaptureDataOutputSynchronizer *_outputSynchronizer;
    NSMutableArray *_outputSynchronizerOutputs;
    AVCaptureMetadataOutput *_metadataOutput;
    AVCaptureDevice *_captureDevice;
    BOOL _viewPointCorrectionEnabled;
    BOOL _needCenterStageMetadataForViewpointCorrection;
    BOOL _cframingEnabled;
    BOOL _isCaptureSIFRPreferred;
    int _captureSIFRPreferredOverride;
    BOOL _captureFormatNonBinOnlyOverride;
    BOOL _captureFormatPrefer16By9ForSquare;
    BOOL _supportNoDepthMemoji;
    BOOL _deviceSupportCinematicFraming;
    BOOL _deviceSupportVideoEffects;
    BOOL _deviceSupportsTrueDepthSwitchForEffects;
    BOOL _isBackgroundBlurActive;
    BOOL _isReactionActive;
    int _orientation;
    int _previousOrientation;
    BOOL _pendingOrientationChange;
    BOOL _supportsPortraitResolution;
    BOOL _simulateTallCaptureFormat;
    BOOL _isCaptureDeviceInternal;
    BOOL _beginCommitConfigForFormatSwitch;
    double _cameraZoomFactor;
    int _activeWidth;
    int _activeHeight;
    int _activeFrameRate;
    int _deviceMinFrameRate;
    int _lastClientRequestedFrameRate;
    int _VPCProcessedFrameCount;
    int _VPCModifiedFrameCount;
    int _captureFrameCount;
    double _captureStartTime;
    double _captureDuration;
    struct CGSize { double width; double height; } _requestSize;
    struct CGSize { double width; double height; } _captureSize;
    BOOL _resize;
    BOOL _isPreviewing;
    BOOL _isCapturing;
    BOOL _forceMirrorCapture;
    BOOL _forceDynamicEffectsFramerate;
    BOOL _forcePearlCamera;
    BOOL _isServerProcess;
    BOOL _avCaptureDeviceInputLocked;
    BOOL _deviceOrientationMatchesReceiver;
    int _frameCount;
    float _processTimeSum;
    float _depthFrameRateMultplier;
    float _viewpointProcessTime;
    NSMutableArray *_renderFrameTimes;
    NSMutableArray *_cachedDataArray;
    VCImageResizingConverter *_imageCopyingConverter;
    VCImageResizingConverter *_imageResizingConverter;
    VCImageResizingConverter *_imageCroppingConverter;
    VCImageRotationConverter *_imageRotationConverter;
    int _cameraCaptureVideoRotation;
    BOOL _frontCameraSupportsFullBleedCapture;
    BOOL _backCameraSupportsFullBleedCapture;
    BOOL _remotePreferFullBleed;
    BOOL _currentRemotePreferFullBleed;
    _Atomic int _pixelBufferCVO;
    int _remoteDeviceOrientation;
    BOOL _isViewpointSupported;
    BOOL _useAVConferenced;
    BOOL _enableBufferStatsDump;
    BOOL _cameraEffectsFrontCameraMirrored;
    struct tagVCVideoBufferStatistics { int x0; int x1; BOOL x2; double x3; double x4; double x5; double x6; double x7; } *_statsBuffer;
    struct __CFAllocator { } *_numberPropertyAllocator;
    struct __CFAllocator { } *_attachmentAllocator;
    BOOL _shouldRemoveExtraRotation;
    unsigned int _capturePixelFormat;
    BOOL _shouldUseCompressedPixelFormat;
    struct OpaqueVTPixelTransferSession { } *_uncompressTransferSession;
    struct __CVPixelBufferPool { } *_uncompressedPixelFormatBufferPool;
    struct OpaqueVTPixelTransferSession { } *_compressTransferSession;
    struct __CVPixelBufferPool { } *_compressedPixelFormatBufferPool;
}

@property (readonly, nonatomic) AVCaptureDepthDataOutput *depthDataOutput;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property BOOL faceMeshTrackingEnabled;
@property BOOL effectsApplied;

+ (BOOL)isServerProcess;
+ (BOOL)deviceInputSupportsCenterStage:(id)a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })calculateRegionOfInterest:(struct CGSize { double x0; double x1; })a0 requestSize:(struct CGSize { double x0; double x1; })a1;
+ (BOOL)captureDeviceformatSupportsVideoEffects:(id)a0;
+ (BOOL)deviceInputSupportsVideoEffects:(id)a0;
+ (struct { long long x0; int x1; unsigned int x2; long long x3; })frameDurationForFrameRateRangeWithMinFrameRate:(double)a0 maxFrameRate:(double)a1 minFrameDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a2 maxFrameDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a3 desiredFrameRate:(int)a4;
+ (BOOL)isVideoCaptureOutputAspectRatioOverrideOptimizedSupported;
+ (id)newCaptureSession;
+ (id)newVideoCaptureOutput;
+ (id)newVideoDeviceInput:(id)a0 error:(id *)a1;

- (void)dealloc;
- (int)invalidate;
- (BOOL)setOrientation:(int)a0;
- (BOOL)isBackgroundReplacementSupported;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (int)stop:(BOOL)a0;
- (int)setFrameRate:(int)a0;
- (int)startPreview;
- (id)availableVideoCVPixelFormatTypes;
- (void)captureOutput:(id)a0 didOutputMetadataObjects:(id)a1 fromConnection:(id)a2;
- (void)captureOutput:(id)a0 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { } *)a1 fromConnection:(id)a2;
- (void)dataOutputSynchronizer:(id)a0 didOutputSynchronizedDataCollection:(id)a1;
- (BOOL)isCenterStageSupported;
- (BOOL)isStudioLightSupported;
- (BOOL)isPreviewRunning;
- (void)setCameraZoomFactor:(double)a0;
- (void)setCameraZoomFactor:(double)a0 withRate:(double)a1;
- (int)setVideoDeviceToSelectedDevice:(id)a0;
- (void)updateDeviceOrientationMatchesReceiver:(int)a0 remoteDeviceOrientation:(int)a1;
- (id)videoCaptureOutputVideoSettings;
- (void)applyBlockToAllAvailableCaptureFormats:(id /* block */)a0;
- (void)applyVideoRetainedBufferCountHint;
- (id)cameraCaptureFormatWithWidth:(int)a0 height:(int)a1;
- (id)cameraFormatForWidth:(int)a0 height:(int)a1;
- (id)cameraFormatForWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (id)cameraFormatForWidthWithList:(int)a0 height:(int)a1 frameRate:(int)a2 formatList:(id)a3;
- (BOOL)cameraSupportsFormatWidth:(int)a0 height:(int)a1;
- (BOOL)cameraSupportsNoQueueFormatWidth:(int)a0 height:(int)a1;
- (int)captureDeviceActiveFrameRate;
- (void)captureSessionNotification:(id)a0;
- (long long)captureTierForEncodingSize:(struct CGSize { double x0; double x1; })a0;
- (void)collectCaptureFrameRateStats:(struct __CFDictionary { } *)a0;
- (void)configureCaptureDeviceDepthFormat;
- (int)configureCaptureWithToken:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a0;
- (void)configureMetadataTypesForOutput:(id)a0;
- (BOOL)configureVideoStabilization;
- (int)copyColorInfo:(const struct __CFDictionary **)a0;
- (struct tagVCVideoCaptureFeatureStatus { char x0; char x1; char x2; char x3; char x4; char x5; })currentVideoFeatureStatus;
- (BOOL)deviceOrientationMatchesReceiver;
- (void)dispatchedCurrentVideoFeatureStatus:(struct tagVCVideoCaptureFeatureStatus { char x0; char x1; char x2; char x3; char x4; char x5; } *)a0;
- (void)encodeProcessedPixelBuffer:(struct __CVBuffer { } *)a0 time:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 imageData:(id)a2 processTime:(id)a3;
- (char)featureStatusForFeatureSupported:(BOOL)a0 enabled:(BOOL)a1;
- (int)frameBecameAvailableCount:(int *)a0 figBufferQueueEmptyCount:(int *)a1 figBufferQueueErrorCount:(int *)a2;
- (int)frameCount:(BOOL)a0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })frameDurationForVideoDeviceFormat:(id)a0 frameRate:(int)a1;
- (id)getCaptureFormatList;
- (int)getFrameRate;
- (int)getMaxAllowedFrameRate:(int)a0;
- (struct CGSize { double x0; double x1; })getOptimizedCameraCaptureWidth:(int)a0 height:(int)a1;
- (void)getReportingStats:(struct __CFDictionary { } *)a0;
- (int)getSupportedMaxDeviceFrameRateWithFrameRateCap:(int)a0;
- (BOOL)hasRequiredAttributes:(id)a0;
- (id)initWithCaptureServer:(id)a0 protocolFunctions:(const struct tagVCVideoCaptureServerProtocolRealtimeInstanceVTable { void /* function */ *x0; } *)a1 width:(int)a2 height:(int)a3 frameRate:(int)a4 videoSourceToken:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a5 cinematicFramingEnabled:(BOOL)a6 videoOrientation:(int)a7 capturePixelFormat:(unsigned int)a8 zoomFactor:(double)a9 remoteSupportsFullScreenReceive:(BOOL)a10 remoteDeviceOrientation:(int)a11;
- (void)initializeMetadataOutput;
- (void)initializeSynchronizedOutputs;
- (void)initializeVideoCaptureOutput;
- (void)initializeViewpointCorrection;
- (BOOL)isBackCamera;
- (BOOL)isCaptureFullBleedPreferred;
- (BOOL)isCaptureFullBleedPreferredForDevicePosition:(long long)a0;
- (BOOL)isCurrentCaptureDeviceAppleProduct;
- (BOOL)isFormatMaxFrameRateSupported:(id)a0 frameRate:(int)a1;
- (BOOL)isFrameRateActive:(int)a0 captureFormat:(id)a1;
- (BOOL)isFrontCamera;
- (BOOL)isInternalCamera;
- (BOOL)isPortraitModeSupported;
- (BOOL)isPortraitResolutionCaptureActive;
- (BOOL)isReactionSupported;
- (BOOL)isSquareCapturePreferred;
- (void)lockAVCaptureDeviceInputForConfiguration;
- (id)newCaptureDevice:(id)a0;
- (struct opaqueCMSampleBuffer { } *)newSimulatedTallFormat:(struct opaqueCMSampleBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)prepareSynchronizedOutputs:(id)a0;
- (void)printVideoStabilizationState:(BOOL)a0;
- (void)processMetadataObjects:(id)a0;
- (void)processReactionStatus:(id)a0 oldReactions:(id)a1;
- (void)reportStatus:(struct __CFDictionary { } *)a0 forKey:(struct __CFString { } *)a1 supported:(BOOL)a2 enabled:(BOOL)a3;
- (void)resetDepthDataOutput;
- (void)resetViewPointLogging;
- (void)retrieveInitialReportingStats:(struct __CFDictionary { } *)a0;
- (void)setBufferStatsBuffer:(struct tagVCVideoBufferStatistics { int x0; int x1; BOOL x2; double x3; double x4; double x5; double x6; double x7; } *)a0;
- (int)setCamera:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a0 width:(int)a1 height:(int)a2 frameRate:(int)a3;
- (BOOL)setCameraWithUID:(id)a0;
- (BOOL)setCaptureDeviceMinFrameRateIfNeeded:(int)a0;
- (void)setCaptureSIFRFormatEnabled:(BOOL)a0;
- (int)setFrameRateInternal:(int)a0 forceSourceFrameRateDidChange:(BOOL)a1;
- (void)setMetaDataObjectsDelegate;
- (void)setReactionActive:(BOOL)a0;
- (void)setRemoteDeviceOrientation:(int)a0;
- (void)setRemotePreferFullBleed:(BOOL)a0;
- (void)setUpBackgroundBlurDelegate:(BOOL)a0;
- (void)setUpCaptureDeviceObserver:(BOOL)a0 keyPath:(id)a1;
- (void)setUpCaptureDevicePropertyObservers:(BOOL)a0;
- (double)setUpVideoZoomFactor;
- (void)setVideoCaptureOutputDelegate;
- (int)setVideoDeviceToWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (void)setViewPointCorrectionEnabled:(BOOL)a0;
- (int)setWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (BOOL)shouldAddDepthData;
- (BOOL)shouldAddTrackedFacesData;
- (BOOL)shouldAdjustCaptureWithOrientation:(int)a0;
- (BOOL)shouldResizeWithCaptureSize:(struct CGSize { double x0; double x1; })a0 requestSize:(struct CGSize { double x0; double x1; })a1;
- (int)startCaptureWithWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (BOOL)supportsDepthDataFormats;
- (BOOL)supportsPortraitResolution;
- (void)tearDownSynchronizer;
- (void)unlockAVCaptureDeviceInputForConfiguration;
- (void)updateCameraZoomCapability;
- (void)updateCaptureDeviceProperties;
- (void)updateCaptureServerWithCaptureDeviceActiveFrameRate;
- (BOOL)updateCaptureSizeWithAspectRatio:(struct CGSize { double x0; double x1; } *)a0;
- (BOOL)updateCaptureSizeWithAspectRatio:(struct CGSize { double x0; double x1; } *)a0 width:(int)a1 height:(int)a2;
- (void)updateCenterStageEnabled:(BOOL)a0 requestCaptureChange:(BOOL)a1;
- (void)updateCenterStageMetadataDeliveryEnabled;
- (void)updateCenterStageRegionOfInterestWithLock:(BOOL)a0;
- (void)updateDepthFrameRate;
- (void)updateIsCaptureDeviceInternal;
- (void)updateRenderProcessFrameRate:(id)a0;
- (BOOL)updateVideoDataOutputVideoSettingResolution:(int)a0 requestHeight:(int)a1 captureFormat:(id)a2;
- (void)verifyUnbinnedCameraFormatSelection:(id)a0;

@end
