@class NSError, NSString, NSURL, NSPredicate, NSArray, IFCertificateIdentity, NSBundle, NSNumber;

@interface IFDistXMLDocument : IFDocument <NSXMLParserDelegate> {
    NSString *_containerPath;
    NSURL *_baseURL;
    NSBundle *_bundle;
    NSArray *_installableCheckResults;
    BOOL _documentReadAndValidationHaveBeenPerformed;
    BOOL _validationResult;
    NSError *_validationError;
    struct DistXMLResources { id x0; id x1; id x2; id x3; id x4; id x5; unsigned long long x6; unsigned long long x7; BOOL x8; id x9; id x10; } *_resourceData;
    struct DistXMLParserData { id x0; id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; BOOL x14; id x15; int x16; int x17; int x18; int x19; int x20; id x21; id x22; BOOL x23; } *_parserData;
    struct DistXMLJSRuntime { id x0; id x1; } *_javaRuntimeData;
    BOOL _abortParsing;
    BOOL _forSoftwareUpdate;
    NSString *_activeLangISO;
    NSArray *_supportedOSVersions;
    NSArray *_requiredBundles;
    BOOL _requireAllBundles;
    NSString *_descriptionOfRequiredBundles;
    NSNumber *_requiredGigaBytesOfRAM;
    NSPredicate *_requiredGLRenderer;
    NSPredicate *_requiredCLDevice;
    NSPredicate *_requiredMetalDevice;
    NSString *_descriptionOfGraphicsHardware;
    BOOL _singleGraphicsDevice;
    NSString *_requiredHardwareProperties;
    NSString *_descriptionOfHardwareProperties;
    IFCertificateIdentity *_certificateIdentity;
    int _minTrustLevel;
    int _evaluatedTrustLevel;
    NSArray *_certificateChain;
    struct __SecTrust { } *_trustRef;
    NSString *_pluginPath;
    NSString *_scriptsPaths;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_arrayOfSafeSubPathsToIgnoreAtPath:(id)a0;
+ (int)_errorCodeForTypeString:(id)a0;

- (id)initWithPath:(id)a0;
- (void)parser:(id)a0 didEndElement:(id)a1 namespaceURI:(id)a2 qualifiedName:(id)a3;
- (void)dealloc;
- (id)path;
- (void)parser:(id)a0 didStartElement:(id)a1 namespaceURI:(id)a2 qualifiedName:(id)a3 attributes:(id)a4;
- (void)parser:(id)a0 parseErrorOccurred:(id)a1;
- (id)title;
- (id)localizedStringForKey:(id)a0;
- (void)parser:(id)a0 foundCharacters:(id)a1;
- (id)versionString;
- (void)setMinimumRequiredTrustLevel:(int)a0;
- (int)trustLevelReturningCertificateChain:(id *)a0;
- (id)scripts;
- (int)trustLevelReturningTrustRef:(struct __SecTrust **)a0;
- (BOOL)isForSoftwareUpdate;
- (BOOL)getData:(id *)a0 andMIMEType:(id *)a1 forResourceNamed:(id)a2 forLanguage:(id)a3 error:(id *)a4;
- (id)_allPkgRefIdentifiersForChoice:(id)a0;
- (BOOL)_parseAllowedOSVersionsElement:(id)a0;
- (id)_embeddedArchivePluginsPath;
- (void)_addPackagesForLocation:(id)a0 fromSet:(id)a1 toUniqueSet:(id)a2 toArray:(id)a3 withChoice:(id)a4;
- (id)_allPkgRefsForChoice:(id)a0;
- (id)getPathWithFallbackLoc:(id)a0 forFile:(id)a1;
- (id)initWithPath:(id)a0 forSoftwareUpdate:(BOOL)a1;
- (BOOL)isDomainInstall;
- (id)_currentArchitectureString;
- (id)_distributionScriptsPath;
- (id)_errorForAction:(id)a0 results:(id)a1;
- (id)_findBestResourceInArchiveNamed:(id)a0 withPreferredLocalization:(id)a1;
- (BOOL)_installWithRosetta;
- (BOOL)_isBetterLanguage:(id)a0 forResource:(id)a1;
- (id)_localizationsForResourceInArchiveNamed:(id)a0;
- (void)_localizeChoiceAttributes;
- (id)_localizedResourceInArchiveNamed:(id)a0 withLocalization:(id)a1;
- (id)_packageForIdentifier:(id)a0 andVersion:(id)a1 stopParsing:(BOOL *)a2;
- (BOOL)_parseLocatorElement:(id)a0;
- (BOOL)_parseRequiredBundlesElement:(id)a0;
- (BOOL)_performGraphicsCheckStoringResultsIn:(id)a0;
- (BOOL)_performHardwarePropertiesCheckStoringResultsIn:(id)a0;
- (BOOL)_performOSVersionCheckWithPath:(id)a0 storingResultsIn:(id)a1;
- (BOOL)_performRAMCheckStoringResultsIn:(id)a0;
- (BOOL)_performRequiredBundleCheckWithPath:(id)a0 storingResultsIn:(id)a1;
- (BOOL)_readEmbeddedLocalizableStringsFile;
- (id)_searchForLocalizedStringForKey:(id)a0;
- (void)_setLocatorDefinitionsInPackages;
- (BOOL)_setupAndParseScripts:(id)a0;
- (BOOL)_validateHardwareArchitecture;
- (BOOL)_validatePackageRefsInDistribution;
- (int)availableInstallDomains;
- (BOOL)canChooseSubFolder;
- (BOOL)canLoadResourceNamed:(id)a0;
- (id)certificateIdentity;
- (void)clearInstallationCheckResults;
- (BOOL)containsChoicesWhichCanChooseSubFolder;
- (BOOL)containsResourceNamed:(id)a0;
- (id)copyChoiceTreeWithScripts:(id *)a0 andChoiceList:(id *)a1 forTarget:(id)a2;
- (id)defaultSubFolder;
- (int)enabledInstallDomains;
- (id)errorForPackage:(id)a0 onTarget:(id)a1 withCustomizationController:(id)a2;
- (BOOL)evaluateTrust;
- (BOOL)hasInsecureChecks;
- (id)initWithContainer:(id)a0 andScripts:(id)a1;
- (id)initWithContainer:(id)a0 andScripts:(id)a1 andCertificateIdentity:(id)a2 forSoftwareUpdate:(BOOL)a3 returningError:(id *)a4;
- (id)initWithContainer:(id)a0 andScripts:(id)a1 forSoftwareUpdate:(BOOL)a2;
- (id)initWithContainer:(id)a0 andScripts:(id)a1 forSoftwareUpdate:(BOOL)a2 returningError:(id *)a3;
- (id)initWithPath:(id)a0 forSoftwareUpdate:(BOOL)a1 returningError:(id *)a2;
- (id)initWithPath:(id)a0 returningError:(id *)a1;
- (id)installableCheckResults;
- (id)installerSectionOrder;
- (id)installerSectionPaths;
- (BOOL)installsOperatingSystem;
- (BOOL)isBackgroundImageResourceName:(id)a0;
- (BOOL)isFNI;
- (id)languagesAvailableForResource:(id)a0;
- (BOOL)legacyDocument;
- (int)minimumRequiredTrustLevel;
- (id)objectForOptionNamed:(id)a0;
- (id)packagesForLocation:(id)a0 fromSet:(id)a1;
- (id)postinstallActions;
- (id)preinstallActions;
- (BOOL)readAndValidateDocumentReturningError:(id *)a0;
- (BOOL)requiresRosettaTranslation;
- (id)searchDefinitions;
- (id)softwareUpdateChoiceID;

@end
