@class NSUndoManager, NSString, NSArray, NSLock, KHFrameRenderer, NSRecursiveLock, NSMutableDictionary, KHTreatmentLayer, NSMutableSet, KHTreatment, KHLayout;

@interface KHFrame : KHModel <KHSelectable, KHJSONGeneratorProtocol, KHSortingProtocol, KHBehaviorBindingProtocol> {
    long long _parentLayoutId;
    long long _childLayoutId;
    long long _treatmentId;
    NSString *_designTag;
    double _x;
    double _y;
    double _width;
    double _height;
    long long _relative;
    double _rotation;
    long long _drawingOrder;
    long long _fillOrder;
    int _blendMode;
    long long _locked;
    NSString *_contentEntityClass;
    long long _hidden;
    long long _isLink;
    NSString *_name;
    NSString *_source;
    long long _mirrorRotation;
    long long _mirrorAlignment;
    long long _groupId;
    NSLock *_rendererLock;
    NSLock *_behaviorBindingLock;
    KHFrameRenderer *_photoRenderer;
    KHFrameRenderer *_textRenderer;
    KHFrameRenderer *_mapRenderer;
    KHFrameRenderer *_calendarRenderer;
    unsigned long long _contentType;
    KHLayout *_parentLayout;
    KHLayout *_childLayout;
    KHTreatment *_treatment;
    KHTreatment *_replacementTreatment;
    KHFrame *_dropzoneContainer;
    BOOL _selected;
    BOOL _isDragDestination;
    BOOL _isDragSource;
    KHFrame *_swapFrame;
    NSMutableSet *_behaviors;
    NSArray *_cells;
    NSRecursiveLock *_cellsLock;
    BOOL _cellsInvalidated;
    NSMutableDictionary *_treatmentFrameCache;
    NSMutableDictionary *_rendererResourceCache;
    NSRecursiveLock *_rendererResourceCacheLock;
    NSMutableDictionary *_attributeCache;
    NSMutableDictionary *_annotationCache;
    NSLock *_annotationCacheLock;
    BOOL _isTransient;
    NSMutableDictionary *_backgroundBehaviorTraitMap;
    NSMutableDictionary *_orientationBehaviorTraitMap;
    NSMutableDictionary *_replacementLayers;
    double _mapUnitZoomTransient;
    BOOL _bleeds;
    BOOL _isFullBleed;
    BOOL _bleedTestWasCached;
    unsigned long long _bleedEdgeMask;
    struct { double top; BOOL isTopRelative; double left; BOOL isLeftRelative; double bottom; BOOL isBottomRelative; double right; BOOL isRightRelative; } _bleedEdgeInsets;
    BOOL _usesReplacementTreatment;
    NSArray *_behaviorBindings;
    BOOL _isChangingOrientation;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL isResizing;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property double minimumAspectRatio;
@property double maximumAspectRatio;
@property (nonatomic) BOOL swapping;
@property (retain) KHTreatmentLayer *fillLayer;
@property (retain) KHTreatmentLayer *strokeLayer;
@property (readonly, nonatomic) KHFrame *parentFrame;
@property (readonly, nonatomic) KHLayout *baseLayout;
@property (readonly, nonatomic) KHLayout *parentLayout;
@property (readonly, nonatomic) KHLayout *childLayout;
@property (readonly, nonatomic) NSArray *cells;
@property (readonly, nonatomic) NSArray *childFrames;
@property (readonly, nonatomic) NSArray *subframes;
@property (readonly, nonatomic) NSUndoManager *undoManager;
@property (readonly, nonatomic) KHFrame *masterFrame;
@property (nonatomic) struct CGPoint { double x0; double x1; } center;
@property (nonatomic) struct CGSize { double x0; double x1; } size;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } rect;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)contentEntityClassForContentType:(unsigned long long)a0;
+ (id)convertedContentClassForConversionClass:(id)a0;
+ (struct CGPath { } *)createClippingPathForFrame:(id)a0 atScale:(double)a1 treatmentFactor:(double)a2;
+ (id)frameForKey:(long long)a0 inDatabase:(id)a1;
+ (id)framesOfType:(unsigned long long)a0 inFrames:(id)a1;
+ (id)generateModelFromJSON:(id)a0;
+ (id)generateModelFromJSON:(id)a0 inDatabase:(id)a1 bundlePath:(id)a2;
+ (id)keyPathsForValuesAffectingDisplayAfterValueChange;
+ (id)keyPathsForValuesAffectingLayoutAfterValueChange;
+ (unsigned long long)mirroredAlignmentForHorizontalAlignment:(unsigned long long)a0;
+ (long long)mirroredAlignmentForVerticalAlignment:(long long)a0;
+ (unsigned long long)mirroredTextFrameResizeAnchorForAlignment:(unsigned long long)a0 mirrorX:(BOOL)a1 mirrorY:(BOOL)a2;
+ (id)needsDisplayForKeys;
+ (id)needsLayoutForKeys;
+ (id)photoDisplayKeys;
+ (void)preloadFramesForLayouts:(id)a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rendererTrimmedRectForFrame:(id)a0 atScale:(double)a1;
+ (id)textFrameAttributeKeys;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRectForFrame:(id)a0 atScale:(double)a1;

- (long long)groupId;
- (id)treatment;
- (id)debugQuickLookObject;
- (unsigned long long)contentType;
- (id)attributedString;
- (id)textContainers;
- (long long)columns;
- (void)setGroupId:(long long)a0;
- (id)textStyle;
- (void)textDidChange;
- (long long)treatmentId;
- (int)mapType;
- (void)setWidth:(double)a0;
- (id)JSONRepresentation;
- (BOOL)isTransient;
- (id)sourceFrame;
- (void)commonInit;
- (void)unload;
- (void)setSelected:(BOOL)a0;
- (double)y;
- (void)setMapType:(int)a0;
- (void)dealloc;
- (void)setBlendMode:(int)a0;
- (id)debugInfo;
- (id)photoId;
- (void)setName:(id)a0;
- (double)rotation;
- (int)blendMode;
- (void)setSource:(id)a0;
- (id)renderer;
- (double)aspectRatio;
- (void)setY:(double)a0;
- (double)width;
- (long long)locked;
- (id)textColor;
- (double)lineSpacing;
- (id)init;
- (void)persist;
- (void)setKerning:(double)a0;
- (Class)configurationClass;
- (struct CGSize { double x0; double x1; })imageSize;
- (void)remove;
- (long long)hidden;
- (void)setTextColor:(id)a0;
- (double)leading;
- (void)setTextStyle:(id)a0;
- (void)setHeight:(double)a0;
- (void)setX:(double)a0;
- (double)x;
- (id)name;
- (void)setTreatment:(id)a0;
- (id)richText;
- (double)kerning;
- (id)traits;
- (double)height;
- (id)attributes;
- (BOOL)primaryText;
- (void)setRotation:(double)a0;
- (BOOL)secondaryText;
- (void)setLocked:(long long)a0;
- (BOOL)selected;
- (void)setSecondaryText:(BOOL)a0;
- (id)source;
- (void)setHidden:(long long)a0;
- (void)setValuesForKeysWithDictionary:(id)a0;
- (BOOL)isTitle;
- (unsigned long long)horizontalAlignment;
- (id)thumbnailImage;
- (long long)verticalAlignment;
- (double)cellPadding;
- (id)attributeForKey:(id)a0;
- (void)rotate:(double)a0;
- (void)setColumns:(long long)a0;
- (void)encodeWithDictionary:(id)a0;
- (id)behaviors;
- (id)photo;
- (void)setPhoto:(id)a0;
- (void)setPrimaryText:(BOOL)a0;
- (void)setTreatmentId:(long long)a0;
- (id)formattedDescription;
- (BOOL)hasPhoto;
- (BOOL)isBackground;
- (id)stringAttributes;
- (id)mapCamera;
- (id)placeholderText;
- (void)setIsTransient:(BOOL)a0;
- (id)captionTextColor;
- (BOOL)imageExists;
- (BOOL)isFullBleed;
- (BOOL)isTextFrame;
- (long long)relative;
- (void)setRelative:(long long)a0;
- (unsigned long long)textType;
- (BOOL)isUppercase;
- (void)removeAttributeForKey:(id)a0;
- (void)doneEditing;
- (void)flushRenderer;
- (float)imageRotation;
- (id)textRenderer;
- (void)deleteModel;
- (id)sourceNames;
- (BOOL)supportsZooming;
- (id)mapTitle;
- (id)imageFilename;
- (long long)_projectPhotoId;
- (id)activeTreatment;
- (void)applyTreatment:(id)a0;
- (struct { double x0; BOOL x1; double x2; BOOL x3; double x4; BOOL x5; double x6; BOOL x7; })bleedEdgeInsets;
- (void)cacheBlendMode:(int)a0;
- (void)cacheTextStyle:(id)a0;
- (void)cacheTreatment:(id)a0;
- (void)cacheX:(double)a0;
- (struct CGPoint { double x0; double x1; })mapSpan;
- (void)moveMapRegionLabelWithRegionId:(id)a0;
- (void)nudgeY:(double)a0;
- (id)previewDayStyle;
- (unsigned long long)previewTitleHorizontalAlignment;
- (id)rawText;
- (void)setCalendarTreatment:(id)a0 momentary:(BOOL)a1;
- (id)setValue:(id)a0 forKey:(id)a1 type:(id)a2 momentary:(BOOL)a3;
- (void)setYFromString:(id)a0;
- (id)tinyDescription;
- (void)autoZoomAndCrop;
- (void)cacheDesignTag:(id)a0;
- (void)cacheFillOrder:(long long)a0;
- (void)cacheY:(double)a0;
- (id)cachedTextStyle;
- (unsigned long long)cellDataTextHorizontalAlignment;
- (id)convertedString;
- (id)footerFrameText;
- (BOOL)hasInvalidPhoto;
- (BOOL)hasMissingPhoto;
- (BOOL)isCalendarFrame;
- (BOOL)isDropZoneFrame;
- (BOOL)isMapLabelFrame;
- (long long)mirrorAlignment;
- (void)nudgeX:(double)a0;
- (double)photoResolution;
- (void)setMapTitleAlignment:(int)a0 momentary:(BOOL)a1;
- (void)setVerticalAlignment:(long long)a0 momentary:(BOOL)a1;
- (void)setWidth:(double)a0 force:(BOOL)a1;
- (void)setXFromString:(id)a0;
- (BOOL)supportsPanning;
- (BOOL)_allowDefaultMapMarkerRefresh;
- (id)_buildDefaultMapMarkers;
- (id)_buildDefaultMapMarkersFromPhotos:(id)a0;
- (void)_cacheMapMarkers:(id)a0;
- (void)_cacheUserHilitedRegionIds:(id)a0;
- (id)_cachedMapMarkers;
- (id)_cachedUserHilitedRegionIds;
- (id)_chronologicalUniquePlacesFromPhotos:(id)a0;
- (id)_filterFrameAttributesBeforeSwap:(id)a0;
- (id)_imageKey;
- (id)_layerTreatments;
- (void)_loadAttributesAndRestorePanAndZoomForSwapWithFrame:(id)a0 newPhotoID:(id)a1 alwaysSendNotification:(BOOL)a2;
- (id)_loadMapMarkersFromAttribute:(id)a0;
- (id)_mapAnnotationCache;
- (void)_persistMapMarkers:(id)a0;
- (id)_photoInfosForMapMarkerDefaultDomainId:(int)a0;
- (void)_removeImage;
- (void)_resequenceMapMarkers:(id)a0;
- (void)_setImageKey:(id)a0 momentary:(BOOL)a1;
- (void)_setProjectPhotoId:(long long)a0 momentary:(BOOL)a1;
- (void)_updateBleedTests;
- (void)_updateChildLayoutBackpointerForLayoutId:(id)a0;
- (void)accumulateBackgroundBehaviorForTraitName:(id)a0 key:(id)a1 keyType:(unsigned long long)a2 value:(id)a3 valueType:(id)a4;
- (id)addAttributeValue:(id)a0 forKey:(id)a1 type:(id)a2;
- (id)addAttributeValue:(id)a0 forKey:(id)a1 type:(id)a2 momentary:(BOOL)a3;
- (id)addMapMarkerAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (id)addMapMarkerAtPoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (id)addMapMarkerWithLabel:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1;
- (id)addMapMarkerWithLabel:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 scale:(double)a2;
- (void)addType1FontsToSet:(id)a0;
- (void)adjustForPhotoAspectRatio;
- (id)allLayerFrames;
- (BOOL)allowsDynamicShadows;
- (Class)appliedBehaviorClass;
- (void)applyBehavior:(id)a0;
- (void)applyStyleAttributes;
- (void)applyStyleAttributesWithForce:(BOOL)a0;
- (id)aspectRatioString;
- (id)attributeKeysToPreserve;
- (id)availableMapStyleConfigurationIds;
- (id)backgroundBehaviorTraitMap;
- (struct CGPoint { double x0; double x1; })basePoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })baseRectForScale:(double)a0;
- (double)baseRotation;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })baseToRelativeTransform;
- (id)behaviorBindings;
- (Class)behaviorClass;
- (id)bindableTreatment;
- (struct { double x0; BOOL x1; double x2; BOOL x3; double x4; BOOL x5; double x6; BOOL x7; })bleedEdgeInsetsForScale:(double)a0;
- (unsigned long long)bleedEdgeMask;
- (BOOL)bleeds;
- (struct { double x0; double x1; BOOL x2; BOOL x3; })boundedPhotoPan:(struct { double x0; double x1; BOOL x2; BOOL x3; })a0;
- (void)cacheAttribute:(id)a0 forKey:(id)a1;
- (void)cacheChildLayoutId:(long long)a0;
- (void)cacheContentEntityClass:(id)a0;
- (void)cacheDrawingOrder:(long long)a0;
- (void)cacheGroupId:(long long)a0;
- (void)cacheHeight:(double)a0;
- (void)cacheHidden:(long long)a0;
- (void)cacheIsLink:(long long)a0;
- (void)cacheLocked:(long long)a0;
- (void)cacheMirrorAlignment:(long long)a0;
- (void)cacheMirrorRotation:(long long)a0;
- (void)cacheName:(id)a0;
- (void)cacheParentLayoutId:(long long)a0;
- (void)cachePropertiesFromDictionary:(id)a0;
- (void)cacheRelative:(long long)a0;
- (void)cacheRotation:(double)a0;
- (void)cacheSource:(id)a0;
- (void)cacheTreatmentId:(long long)a0;
- (void)cacheWidth:(double)a0;
- (void)calculateAutoZoom:(double *)a0 andPan:(struct { double x0; double x1; BOOL x2; BOOL x3; } *)a1 forPhoto:(id)a2;
- (BOOL)calendarPreviewIsFloating;
- (id)calendarRenderer;
- (id)calendarSubframes;
- (id)calendarTreatment;
- (BOOL)canBePanned;
- (BOOL)canBeZoomed;
- (id)captionKeysToPreserve;
- (id)captionTextStyle;
- (id)cellAtPoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1 relative:(BOOL)a2;
- (id)cellDataTextColor;
- (id)cellDataTextStyle;
- (long long)cellDataTextVerticalAlignment;
- (id)cellDayTextColor;
- (unsigned long long)cellDayTextHorizontalAlignment;
- (id)cellDayTextStyle;
- (long long)cellDayTextVerticalAlignment;
- (id)cellEventDayTextColor;
- (unsigned long long)cellEventDayTextHorizontalAlignment;
- (id)cellEventDayTextStyle;
- (long long)cellEventDayTextVerticalAlignment;
- (id)cellEventTextColor;
- (unsigned long long)cellEventTextHorizontalAlignment;
- (id)cellEventTextStyle;
- (long long)cellEventTextVerticalAlignment;
- (id)cellForDate:(id)a0;
- (id)cellFrameForJournalEntry:(id)a0;
- (long long)cellIndexForNextMonthPreview;
- (long long)cellIndexForPreviousMonthPreview;
- (double)cellPaddingBottom;
- (double)cellPaddingTop;
- (id)cellPhotoRotations;
- (id)cellPhotoTreatment;
- (id)cellPrevNextMonthTextColor;
- (id)cellTreatment;
- (void)centerAndZoomMapAroundAllMarkers;
- (void)centerAndZoomMapAroundMarkers;
- (void)centerAndZoomMapAroundVisibleMarkers;
- (void)centerAndZoomMapDefault;
- (id)childLayoutFrameAtPoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (long long)childLayoutId;
- (void)clearLayerFrames;
- (void)clearRenderCache;
- (void)clearReplacementLayers;
- (BOOL)clipsContext;
- (double)columnHeaderAmount;
- (double)columnHeaderFrameHeight;
- (BOOL)columnHeaderFrameIsUppercase;
- (double)columnHeaderFrameRelativeY;
- (id)columnHeaderFrameTextColor;
- (unsigned long long)columnHeaderFrameTextHorizontalAlignment;
- (id)columnHeaderFrameTextStyle;
- (long long)columnHeaderFrameTextVerticalAlignment;
- (id)columnHeaderFrameTreatment;
- (double)columnHeaderFrameWidth;
- (Class)configurationAttributeClass;
- (id)configurationDatabase;
- (Class)configurationTextStyleClass;
- (Class)configurationTreatmentClass;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1 leniency:(float)a2;
- (id)contentEntityClass;
- (id)contentErrors;
- (void)convertContentClass:(id)a0;
- (void)createAccumulatedBackgroundBehaviors;
- (struct CGPath { } *)createClippingPathForScale:(double)a0;
- (struct CGPath { } *)createClippingPathForScale:(double)a0 treatmentFactor:(double)a1;
- (id)createLayerFrameWithKey:(id)a0 basedOnTreatmentLayer:(id)a1;
- (unsigned long long)defaultTextFrameResizeAnchorForAlignment;
- (id)designTag;
- (id)draggingImageWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)drawSelectionInContext:(struct CGContext { } *)a0 forTreatment:(id)a1 scale:(double)a2;
- (long long)drawingOrder;
- (id)dropzoneContainer;
- (BOOL)enableDefaultLeading;
- (id)ensureAvailableEffects;
- (void)ensureCellsCreated;
- (void)evaluateBindings;
- (BOOL)fieldNavigationEnabled;
- (void)fillContext:(struct CGContext { } *)a0 environment:(id)a1 scale:(double)a2;
- (long long)fillOrder;
- (struct CGPoint { double x0; double x1; })findLogicalCoordinate;
- (void)fitTextStorageToFrameWithMode:(unsigned long long)a0;
- (double)footerAmount;
- (double)footerFrameHeight;
- (BOOL)footerFrameIsUppercase;
- (double)footerFrameRelativeX;
- (double)footerFrameRelativeY;
- (id)footerFrameTextColor;
- (unsigned long long)footerFrameTextHorizontalAlignment;
- (id)footerFrameTextStyle;
- (long long)footerFrameTextVerticalAlignment;
- (id)footerFrameTreatment;
- (double)footerFrameWidth;
- (BOOL)forceDefaultTextColor;
- (BOOL)forceDefaultTextStyle;
- (BOOL)forceTextAlignment;
- (id)foregroundLayerFramesOfType:(unsigned long long)a0;
- (unsigned long long)frameOrientation;
- (void)growHeight:(double)a0;
- (void)growWidth:(double)a0;
- (BOOL)hasBoilerplateText;
- (BOOL)hasBrandingArt;
- (BOOL)hasClippedText;
- (BOOL)hasContentIssues;
- (BOOL)hasEmptyText;
- (BOOL)hasFillLayer;
- (BOOL)hasOrientationBehavior;
- (BOOL)hasPhotoContentIssues;
- (BOOL)hasTextContentIssues;
- (BOOL)hasTextMaxFrameSize;
- (BOOL)hasTextMinFrameSize;
- (BOOL)hasUserEditedColor;
- (BOOL)hasUserEditedText;
- (double)headerAmount;
- (double)headerFrameHeight;
- (double)headerFrameRelativeY;
- (id)headerFrameTextColor;
- (unsigned long long)headerFrameTextHorizontalAlignment;
- (id)headerFrameTextStyle;
- (long long)headerFrameTextVerticalAlignment;
- (id)headerFrameTreatment;
- (double)headerFrameWidth;
- (double)horizontalCellSpacing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })imageRectForScale:(double)a0;
- (id)imageSuitableForSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)imageValid;
- (BOOL)includeInFrameMat;
- (id)initWithUuid:(id)a0 inDatabase:(id)a1;
- (void)invalidateCells:(BOOL)a0;
- (BOOL)isCellFrame;
- (BOOL)isChangingOrientation;
- (BOOL)isDragDestination;
- (BOOL)isDragSource;
- (BOOL)isEmptyFrame;
- (long long)isLink;
- (BOOL)isMapFrame;
- (BOOL)isPhotoBackground;
- (BOOL)isPhotoFrame;
- (BOOL)isSubtitle;
- (BOOL)isValidDestinationForType:(id)a0;
- (BOOL)isValidSourceForType:(id)a0;
- (id)journalEntriesForDate:(id)a0;
- (id)layerFrameAtPoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (id)layerFrameAttributes;
- (id)layerFrameForKey:(id)a0;
- (void)loadAttributes;
- (void)loadBehaviorBindings;
- (struct CGPoint { double x0; double x1; })mapCenterLatLong;
- (int)mapCompassAlignment;
- (BOOL)mapCompassHidden;
- (int)mapDefaultMapMarkerDomainId;
- (BOOL)mapInvalidateDefaultMapMarkers;
- (struct CGPoint { double x0; double x1; })mapLocationAtPoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (id)mapMarkerAtIndex:(unsigned long long)a0;
- (id)mapMarkerAtPoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (int)mapMarkerConnectorStyle;
- (BOOL)mapMarkerConnectorsClosePath;
- (BOOL)mapMarkerConnectorsHidden;
- (BOOL)mapMarkerLabelsHidden;
- (id)mapMarkers;
- (unsigned long long)mapMotionState;
- (struct { double x0; double x1; BOOL x2; BOOL x3; })mapPan;
- (id)mapRegionIdAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (id)mapRegionIdAtPoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (id)mapRegionIdsForMapMarkers;
- (BOOL)mapRegionLabelsHidden;
- (id)mapRenderer;
- (id)mapStyleConfiguration;
- (id)mapStyleVariantKey;
- (BOOL)mapTexturesAndShadowsEnabled;
- (int)mapTitleAlignment;
- (BOOL)mapTitleCanBeVisible;
- (BOOL)mapTitleHidden;
- (id)mapTreatment;
- (double)mapUnitZoom;
- (double)mapUnitZoomTransient;
- (BOOL)mapUserHasAlteredMapMarkerList;
- (BOOL)mapUserHasAlteredMapStyle;
- (BOOL)mapUserHasPannedZoomedMap;
- (id)mapUserHilitedRegionIds;
- (id)mapUserHilitedRegionLocations;
- (BOOL)mirrorHorizontal;
- (unsigned long long)mirrorModeMask;
- (long long)mirrorRotation;
- (BOOL)mirrorVertical;
- (void)moveMapMarkerAtIndex:(unsigned long long)a0 toIndex:(unsigned long long)a1;
- (long long)parentLayoutId;
- (void)pasteAppliedBehavior:(id)a0;
- (void)persistMapMarkers;
- (double)photoAlpha;
- (double)photoAspectRatio;
- (id)photoAspectRatioString;
- (id)photoContentErrors;
- (id)photoEffects;
- (long long)photoFitAlign;
- (long long)photoFitMode;
- (id)photoInfo;
- (unsigned long long)photoOrientation;
- (id)photoOrientationString;
- (struct { double x0; double x1; BOOL x2; BOOL x3; })photoPan;
- (unsigned long long)photoPanDirections;
- (id)photoRenderer;
- (id)photoTreatment;
- (double)photoUnitZoom;
- (double)photoZoom;
- (BOOL)placeholderTextOnHoverOnly;
- (struct CGSize { double x0; double x1; })preferredTextFrameSize;
- (id)previewCellPosition;
- (unsigned long long)previewDayHorizontalAlignment;
- (unsigned long long)previewDayOfWeekHorizontalAlignment;
- (id)previewDayOfWeekStyle;
- (id)previewDayOfWeekTextColor;
- (long long)previewDayOfWeekVerticalAlignment;
- (id)previewDayTextColor;
- (long long)previewDayVerticalAlignment;
- (id)previewTitleStyle;
- (id)previewTitleTextColor;
- (long long)previewTitleVerticalAlignment;
- (id)projectTextStyle;
- (id)prototypeAttributeForKey:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForScale:(double)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForScale:(double)a0 ifUsingPhoto:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForScale:(double)a0 inset:(struct { double x0; double x1; BOOL x2; BOOL x3; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForScale:(double)a0 withTreatmentLayers:(id)a1;
- (void)refreshMapHUD;
- (struct CGPoint { double x0; double x1; })relativePoint:(struct CGPoint { double x0; double x1; })a0 scale:(double)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })relativeRectForScale:(double)a0;
- (void)reloadRendererAttributes;
- (void)removeAllMapMarkers;
- (void)removeLayerFrameWithKey:(id)a0;
- (void)removeMapMarker:(id)a0;
- (void)removeMapMarkerAtIndex:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rendererTrimmedRectForScale:(double)a0;
- (id)replacementLayers;
- (id)replacementTreatment;
- (void)resetDefaultMapMarkers;
- (void)resetMap;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })safeRectForScale:(double)a0;
- (struct CGPath { } *)selectionPathAtScale:(double)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })selectionRectForScale:(double)a0;
- (void)setBehaviorBindings:(id)a0;
- (void)setBindableTreatment:(id)a0;
- (void)setCellPhotoTreatment:(id)a0 momentary:(BOOL)a1;
- (void)setCellTreatment:(id)a0 momentary:(BOOL)a1;
- (void)setChildLayoutId:(long long)a0;
- (void)setColumnHeaderFrameTreatment:(id)a0 momentary:(BOOL)a1;
- (void)setContentEntityClass:(id)a0;
- (void)setDesignTag:(id)a0;
- (void)setDrawingOrder:(long long)a0;
- (void)setDropzoneContainer:(id)a0;
- (void)setFieldNavigationEnabled:(BOOL)a0;
- (void)setFillLayerColor:(id)a0;
- (void)setFillOrder:(long long)a0;
- (void)setFooterFrameTreatment:(id)a0 momentary:(BOOL)a1;
- (void)setForceDefaultTextColor:(BOOL)a0 momentary:(BOOL)a1;
- (void)setForceDefaultTextStyle:(BOOL)a0;
- (void)setForceTextAlignment:(BOOL)a0;
- (void)setHasBoilerplateText:(BOOL)a0 momentary:(BOOL)a1;
- (void)setHasClippedText:(BOOL)a0 momentary:(BOOL)a1;
- (void)setHasUserEditedColor:(BOOL)a0;
- (void)setHeaderFrameTreatment:(id)a0 momentary:(BOOL)a1;
- (void)setHeight:(double)a0 force:(BOOL)a1;
- (void)setHeightFromString:(id)a0;
- (void)setHorizontalAlignment:(unsigned long long)a0 momentary:(BOOL)a1;
- (void)setHorizontalCellSpacing:(double)a0 momentary:(BOOL)a1;
- (void)setImageRotation:(float)a0 momentary:(BOOL)a1;
- (void)setIsChangingOrientation:(BOOL)a0;
- (void)setIsDragDestination:(BOOL)a0;
- (void)setIsDragSource:(BOOL)a0;
- (void)setIsLink:(long long)a0;
- (void)setIsUppercase:(BOOL)a0 momentary:(BOOL)a1;
- (void)setMapCamera:(id)a0 momentary:(BOOL)a1;
- (void)setMapCenterLatLong:(struct CGPoint { double x0; double x1; })a0 momentary:(BOOL)a1;
- (void)setMapCompassAlignment:(int)a0 momentary:(BOOL)a1;
- (void)setMapCompassHidden:(BOOL)a0;
- (void)setMapMarkerConnectorStyle:(int)a0;
- (void)setMapMarkerConnectorsClosePath:(BOOL)a0;
- (void)setMapMarkerConnectorsHidden:(BOOL)a0;
- (void)setMapMarkerLabelsHidden:(BOOL)a0;
- (void)setMapPan:(struct { double x0; double x1; BOOL x2; BOOL x3; })a0 momentary:(BOOL)a1;
- (void)setMapRegionLabelsHidden:(BOOL)a0;
- (void)setMapRegionUserHilited:(BOOL)a0 atLocation:(struct CGPoint { double x0; double x1; })a1;
- (void)setMapRegionUserHilited:(BOOL)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 scale:(double)a2;
- (void)setMapRegionUserHilited:(BOOL)a0 withRegionId:(id)a1;
- (void)setMapSpan:(struct CGPoint { double x0; double x1; })a0 momentary:(BOOL)a1;
- (void)setMapStyleConfiguration:(id)a0;
- (void)setMapTexturesAndShadowsEnabled:(BOOL)a0;
- (void)setMapTitle:(id)a0;
- (void)setMapTitleHidden:(BOOL)a0;
- (void)setMapTreatment:(id)a0 momentary:(BOOL)a1;
- (void)setMapUnitZoom:(double)a0 momentary:(BOOL)a1;
- (void)setMapUserHasAlteredMapMarkerList:(BOOL)a0;
- (void)setMapUserHasAlteredMapStyle:(BOOL)a0;
- (void)setMapUserHasPannedZoomedMap:(BOOL)a0;
- (void)setMapUserHilitedRegionLocations:(id)a0;
- (void)setMirrorAlignment:(long long)a0;
- (void)setMirrorModeMask:(unsigned long long)a0;
- (void)setMirrorRotation:(long long)a0;
- (void)setParentLayoutId:(long long)a0;
- (void)setPhoto:(id)a0 sendPlacementNotification:(BOOL)a1;
- (void)setPhoto:(id)a0 shouldAutoZoomAndCrop:(BOOL)a1 momentary:(BOOL)a2 sendPlacementNotification:(BOOL)a3;
- (void)setPhoto:(id)a0 shouldAutoZoomAndCrop:(BOOL)a1 momentary:(BOOL)a2 sendPlacementNotification:(BOOL)a3 storePreviousPhotoInfo:(BOOL)a4;
- (void)setPhotoAlpha:(double)a0;
- (void)setPhotoAlpha:(double)a0 momentary:(BOOL)a1;
- (void)setPhotoContentChanged;
- (void)setPhotoEffects:(id)a0 momentary:(BOOL)a1;
- (void)setPhotoFitAlign:(long long)a0;
- (void)setPhotoFitMode:(long long)a0;
- (void)setPhotoPan:(struct { double x0; double x1; BOOL x2; BOOL x3; })a0 momentary:(BOOL)a1;
- (void)setPhotoTreatment:(id)a0 momentary:(BOOL)a1;
- (void)setPhotoUnitZoom:(double)a0 momentary:(BOOL)a1;
- (void)setPhotoZoom:(double)a0;
- (void)setPhotoZoom:(double)a0 momentary:(BOOL)a1;
- (void)setPlaceholderText:(id)a0 momentary:(BOOL)a1;
- (void)setPlaceholderTextOnHoverOnly:(BOOL)a0;
- (void)setPrototypeHorizontalAlignment:(unsigned long long)a0;
- (void)setPrototypeTextColor:(id)a0;
- (void)setPrototypeTextStyle:(id)a0;
- (void)setPrototypeValue:(id)a0 forKey:(id)a1 type:(id)a2;
- (void)setPrototypeValue:(id)a0 forKey:(id)a1 type:(id)a2 momentary:(BOOL)a3;
- (void)setPrototypeVerticalAlignment:(long long)a0;
- (void)setRawText:(id)a0 momentary:(BOOL)a1;
- (void)setReplacementTreatment:(id)a0;
- (void)setRichText:(id)a0 momentary:(BOOL)a1;
- (void)setRotationFromString:(id)a0;
- (void)setStrokeLayerColor:(id)a0;
- (void)setSwapFrame:(id)a0;
- (void)setTextColor:(id)a0 momentary:(BOOL)a1;
- (void)setTextFrameAutoColor:(BOOL)a0;
- (void)setTextFrameResizable:(BOOL)a0;
- (void)setTextFrameResizeAnchor:(unsigned long long)a0;
- (void)setTextMaxFrameSize:(struct { double x0; BOOL x1; double x2; BOOL x3; })a0;
- (void)setTextMinFrameSize:(struct { double x0; BOOL x1; double x2; BOOL x3; })a0;
- (void)setTextStyle:(id)a0 momentary:(BOOL)a1;
- (void)setTextTreatment:(id)a0 momentary:(BOOL)a1;
- (void)setTextType:(unsigned long long)a0 momentary:(BOOL)a1;
- (void)setTextUsageMask:(unsigned long long)a0 momentary:(BOOL)a1;
- (void)setUserHasPannedZoomedPhoto:(BOOL)a0;
- (void)setUsesReplacementTreatment:(BOOL)a0;
- (void)setUsesTextOnlyBehavior:(BOOL)a0;
- (id)setValue:(id)a0 forKey:(id)a1 type:(id)a2;
- (void)setVerticalCellSpacing:(double)a0 momentary:(BOOL)a1;
- (void)setWidthFromString:(id)a0;
- (void)setX:(double)a0 force:(BOOL)a1;
- (void)setY:(double)a0 force:(BOOL)a1;
- (void)setupTextContainers;
- (BOOL)shouldDrawCalendarPreviews;
- (BOOL)shouldEvaluateForAspectRatio;
- (BOOL)shrinksTextToFit;
- (id)smartTextForRawText:(id)a0;
- (id)snapshotPhotoFrameWithSize:(struct CGSize { double x0; double x1; })a0;
- (long long)sortByDefault:(id)a0;
- (long long)sortByDrawingOrder:(id)a0;
- (long long)sortByFillOrder:(id)a0;
- (long long)sortById:(id)a0;
- (long long)sortByName:(id)a0;
- (long long)sortByPlacement:(id)a0;
- (long long)sortByProminence:(id)a0;
- (long long)sortBySize:(id)a0;
- (id)sourceValueForKey:(id)a0;
- (id)supportedTreatments:(BOOL)a0;
- (id)swapFrame;
- (void)swapWithFrame:(id)a0;
- (void)textAttributesDidChangeExternally;
- (id)textContentErrors;
- (void)textDidChangeExternally:(id)a0 momentary:(BOOL)a1;
- (BOOL)textFrameAutoColor;
- (BOOL)textFrameResizable;
- (unsigned long long)textFrameResizeAnchor;
- (BOOL)textMatchesMaster;
- (struct { double x0; BOOL x1; double x2; BOOL x3; })textMaxFrameSize;
- (struct { double x0; BOOL x1; double x2; BOOL x3; })textMinFrameSize;
- (id)textTreatment;
- (unsigned long long)textUsageMask;
- (id)thumbnailImageIfCached;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })translatedRectForScale:(double)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })treatmentBackgroundRectForScale:(double)a0;
- (Class)treatmentClass;
- (id)treatmentForType:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })treatmentForegroundRectForScale:(double)a0;
- (BOOL)treatmentHasStroke;
- (id)treatmentOrConfigurationDatabase;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trimmedRectForScale:(double)a0;
- (void)undoRedoSetPhoto:(id)a0 shouldAutoZoomAndCrop:(BOOL)a1;
- (void)undoRedoSetPhoto:(id)a0 shouldAutoZoomAndCrop:(BOOL)a1 momentary:(BOOL)a2 sendPlacementNotification:(BOOL)a3;
- (void)undoRedoSetPhoto:(id)a0 shouldAutoZoomAndCrop:(BOOL)a1 momentary:(BOOL)a2 sendPlacementNotification:(BOOL)a3 storePreviousPhotoInfo:(BOOL)a4;
- (void)undoRedoSetPhoto:(id)a0 zoom:(double)a1 pan:(struct { double x0; double x1; BOOL x2; BOOL x3; })a2;
- (void)undoRedoSetPhotoPan:(struct { double x0; double x1; BOOL x2; BOOL x3; })a0;
- (void)undoRedoSetTreatment:(id)a0;
- (void)undoRedoSwapWithFrame:(id)a0;
- (id)uniqueDefaultLabel;
- (id)usageTag;
- (BOOL)useIntegralBounds;
- (struct CGPoint { double x0; double x1; })userDefaultCoordinate;
- (id)userDefaultLocation;
- (BOOL)userHasPannedZoomedPhoto;
- (BOOL)usesReplacementTreatment;
- (BOOL)usesTextOnlyBehavior;
- (void)validatePhotoPan;
- (double)verticalCellSpacing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRectForScale:(double)a0;
- (BOOL)wantsFrameHUD;
- (BOOL)wantsTransparencyLayer;
- (void)wasPersisted;
- (void)willBeDeleted;
- (void)writeValue:(id)a0 toField:(id)a1;

@end
