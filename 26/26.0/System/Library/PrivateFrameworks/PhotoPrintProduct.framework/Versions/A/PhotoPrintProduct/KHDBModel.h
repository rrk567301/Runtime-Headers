@class KHDBEntity, NSNumber;

@interface KHDBModel : NSObject {
    int _spinlock;
    unsigned int _flags;
    NSNumber *_modelId;
}

@property (retain, nonatomic) KHDBEntity *entity;
@property (nonatomic) BOOL isInCache;
@property (nonatomic) BOOL isOpen;
@property (nonatomic) BOOL skipChangeEntries;
@property (nonatomic) BOOL wasRecentlyUsed;

+ (void)deleteModelsFromDatabase:(id)a0 where:(id)a1;
+ (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 fromModels:(id)a3 fromQuery:(id)a4;
+ (BOOL)modelExistsInModels:(id)a0 where:(id)a1 args:(id)a2;
+ (void)prefetchAllObjectRelationships:(id)a0;
+ (id)addressesForModelIds:(id)a0 fromDatabase:(id)a1;
+ (id)addressesForModels:(id)a0;
+ (id)addressesFromDatabase:(id)a0 where:(id)a1;
+ (id)addressesFromQuery:(id)a0;
+ (id)anyModel:(id)a0;
+ (id)anyModelFromDatabase:(id)a0 where:(id)a1;
+ (id)anyModelFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (id)anyModelFromQuery:(id)a0;
+ (id)anyModelWhere:(id)a0;
+ (id)anyOfModels:(id)a0 fromQuery:(id)a1;
+ (id)anyOfModels:(id)a0 where:(id)a1;
+ (id)anyOfModels:(id)a0 where:(id)a1 args:(id)a2;
+ (void)appendAddressesToArray:(id)a0 orderedBy:(id)a1 fromDatabase:(id)a2 where:(id)a3;
+ (void)appendAddressesToArray:(id)a0 orderedBy:(id)a1 fromDatabase:(id)a2 where:(id)a3 args:(id)a4;
+ (void)appendAddressesToArray:(id)a0 orderedBy:(id)a1 fromQuery:(id)a2;
+ (void)appendAddressesToArray:(id)a0 orderedBy:(id)a1 where:(id)a2;
+ (id)arrayOfModels:(id)a0 fromQuery:(id)a1;
+ (id)arrayOfModels:(id)a0 where:(id)a1;
+ (id)arrayOfModels:(id)a0 where:(id)a1 args:(id)a2;
+ (id)arrayOfModelsFromDatabase:(id)a0 where:(id)a1;
+ (id)arrayOfModelsFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (id)arrayOfModelsFromQuery:(id)a0;
+ (id)arrayOfModelsWhere:(id)a0;
+ (unsigned long long)countOfModelsFromDatabase:(id)a0 where:(id)a1;
+ (unsigned long long)countOfModelsFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (unsigned long long)countOfModelsFromQuery:(id)a0;
+ (unsigned long long)countOfModelsWhere:(id)a0;
+ (id)dataForColumns:(id)a0 fromDatabase:(id)a1 where:(id)a2;
+ (id)dataForColumns:(id)a0 fromDatabase:(id)a1 where:(id)a2 args:(id)a3;
+ (id)dataForColumns:(id)a0 where:(id)a1;
+ (id)databaseForModels:(id)a0;
+ (void)deleteModels:(id)a0;
+ (void)deleteModelsFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (void)deleteModelsFromQuery:(id)a0;
+ (void)deleteModelsWhere:(id)a0;
+ (id)dictionaryForKey:(id)a0 value:(id)a1 fromDatabase:(id)a2 where:(id)a3;
+ (id)dictionaryForKey:(id)a0 value:(id)a1 fromDatabase:(id)a2 where:(id)a3 args:(id)a4;
+ (id)dictionaryForKey:(id)a0 value:(id)a1 fromModels:(id)a2 fromQuery:(id)a3;
+ (id)dictionaryForKey:(id)a0 value:(id)a1 fromModels:(id)a2 where:(id)a3;
+ (id)dictionaryForKey:(id)a0 value:(id)a1 fromModels:(id)a2 where:(id)a3 args:(id)a4;
+ (id)dictionaryForKey:(id)a0 value:(id)a1 fromQuery:(id)a2;
+ (id)dictionaryForKey:(id)a0 value:(id)a1 where:(id)a2;
+ (id)dictionaryOfModelsForKey:(id)a0 fromModels:(id)a1 fromQuery:(id)a2;
+ (id)dictionaryOfModelsForKey:(id)a0 fromModels:(id)a1 where:(id)a2;
+ (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 fromDatabase:(id)a3 where:(id)a4;
+ (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 fromDatabase:(id)a3 where:(id)a4 args:(id)a5;
+ (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 fromModels:(id)a3 where:(id)a4;
+ (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 fromModels:(id)a3 where:(id)a4 args:(id)a5;
+ (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 fromQuery:(id)a3;
+ (id)dictionaryOfSetsForKey:(id)a0 value:(id)a1 defaultValue:(id)a2 where:(id)a3;
+ (void)insertIntoRidList:(id)a0 fromDatabase:(id)a1 idsForColumn:(id)a2 where:(id)a3;
+ (void)insertIntoRidList:(id)a0 fromDatabase:(id)a1 idsForColumn:(id)a2 where:(id)a3 args:(id)a4;
+ (void)insertIntoRidList:(id)a0 idsForColumn:(id)a1 fromQuery:(id)a2;
+ (void)insertIntoRidList:(id)a0 idsForColumn:(id)a1 where:(id)a2;
+ (id)iteratorFromDatabase:(id)a0 where:(id)a1;
+ (id)iteratorFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (id)iteratorFromQuery:(id)a0;
+ (id)iteratorWhere:(id)a0;
+ (BOOL)modelExistsFromDatabase:(id)a0 where:(id)a1;
+ (BOOL)modelExistsFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (BOOL)modelExistsFromQuery:(id)a0;
+ (BOOL)modelExistsInModels:(id)a0 fromQuery:(id)a1;
+ (BOOL)modelExistsInModels:(id)a0 where:(id)a1;
+ (BOOL)modelExistsWhere:(id)a0;
+ (id)modelForAddress:(id)a0;
+ (id)modelForId:(id)a0;
+ (id)modelForId:(id)a0 fromDatabase:(id)a1;
+ (id)modelForUuid:(id)a0 fromDatabase:(id)a1;
+ (id)modelIdListForModels:(id)a0;
+ (id)modelIdListFromDatabase:(id)a0 where:(id)a1;
+ (id)modelIdListFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (id)modelIdListFromQuery:(id)a0;
+ (id)modelIdListWhere:(id)a0;
+ (id)modelIdsForModels:(id)a0;
+ (id)modelIdsFromDatabase:(id)a0 where:(id)a1;
+ (id)modelIdsFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (id)modelIdsFromQuery:(id)a0;
+ (id)modelIdsWhere:(id)a0;
+ (id)modelUuidsFromDatabase:(id)a0 where:(id)a1;
+ (id)modelUuidsFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (id)modelUuidsFromQuery:(id)a0;
+ (id)modelUuidsWhere:(id)a0;
+ (id)modelsForAddresses:(id)a0;
+ (id)modelsForIdList:(id)a0;
+ (id)modelsForIdList:(id)a0 fromDatabase:(id)a1;
+ (id)modelsForIds:(id)a0;
+ (id)modelsForIds:(id)a0 fromDatabase:(id)a1;
+ (id)modelsForUuids:(id)a0 fromDatabase:(id)a1;
+ (id)modelsFromDatabase:(id)a0 where:(id)a1;
+ (id)modelsFromDatabase:(id)a0 where:(id)a1 args:(id)a2;
+ (id)modelsFromQuery:(id)a0;
+ (id)modelsWhere:(id)a0;
+ (id)nestedDictionariesForOuterKey:(id)a0 innerKey:(id)a1 value:(id)a2 fromDatabase:(id)a3 where:(id)a4;
+ (id)nestedDictionariesForOuterKey:(id)a0 innerKey:(id)a1 value:(id)a2 fromDatabase:(id)a3 where:(id)a4 args:(id)a5;
+ (id)nestedDictionariesForOuterKey:(id)a0 innerKey:(id)a1 value:(id)a2 fromQuery:(id)a3;
+ (id)nestedDictionariesForOuterKey:(id)a0 innerKey:(id)a1 value:(id)a2 where:(id)a3;
+ (void)prefetchRelationships:(id)a0 forObjects:(id)a1;
+ (BOOL)reportBackTraceToFileName:(id)a0 directory:(id)a1 reason:(id)a2;
+ (BOOL)sample:(long long)a0 samplingIntervalinMilliseconds:(long long)a1 fileName:(id)a2 directory:(id)a3 reason:(id)a4;
+ (BOOL)sample:(long long)a0 samplingIntervalinMilliseconds:(long long)a1 fileName:(id)a2 reason:(id)a3;
+ (id)select:(id)a0 orderedBy:(id)a1 fromDatabase:(id)a2 where:(id)a3;
+ (id)select:(id)a0 orderedBy:(id)a1 fromDatabase:(id)a2 where:(id)a3 args:(id)a4;
+ (id)select:(id)a0 orderedBy:(id)a1 fromQuery:(id)a2;
+ (id)select:(id)a0 orderedBy:(id)a1 where:(id)a2;
+ (id)selectDistinct:(id)a0 fromDatabase:(id)a1 where:(id)a2;
+ (id)selectDistinct:(id)a0 fromDatabase:(id)a1 where:(id)a2 args:(id)a3;
+ (id)selectDistinct:(id)a0 fromModels:(id)a1 fromQuery:(id)a2;
+ (id)selectDistinct:(id)a0 fromModels:(id)a1 where:(id)a2;
+ (id)selectDistinct:(id)a0 fromModels:(id)a1 where:(id)a2 args:(id)a3;
+ (id)selectDistinct:(id)a0 fromQuery:(id)a1;
+ (id)selectDistinct:(id)a0 where:(id)a1;
+ (id)selectDistinctList:(id)a0 fromDatabase:(id)a1 where:(id)a2;
+ (id)selectDistinctList:(id)a0 fromDatabase:(id)a1 where:(id)a2 args:(id)a3;
+ (id)selectDistinctList:(id)a0 fromQuery:(id)a1;
+ (id)selectDistinctList:(id)a0 where:(id)a1;
+ (id)selectObjects:(id)a0 fromDatabase:(id)a1 where:(id)a2;
+ (id)selectObjects:(id)a0 fromDatabase:(id)a1 where:(id)a2 args:(id)a3;
+ (id)selectObjects:(id)a0 fromQuery:(id)a1;
+ (id)selectObjects:(id)a0 where:(id)a1;
+ (id)selectOneObject:(id)a0 fromDatabase:(id)a1 where:(id)a2;
+ (id)selectOneObject:(id)a0 fromDatabase:(id)a1 where:(id)a2 args:(id)a3;
+ (id)selectOneObject:(id)a0 fromQuery:(id)a1;
+ (id)selectOneObject:(id)a0 where:(id)a1;
+ (void)sendModelContentsChanged:(id)a0;
+ (void)sendModelsCreated:(id)a0;
+ (void)sendModelsDeleted:(id)a0;
+ (void)sendModelsPropertyChange:(id)a0 forProperty:(id)a1;
+ (id)setOfModels:(id)a0 fromQuery:(id)a1;
+ (id)setOfModels:(id)a0 where:(id)a1;
+ (id)setOfModels:(id)a0 where:(id)a1 args:(id)a2;
+ (void)updateColumn:(id)a0 toValue:(id)a1 fromDatabase:(id)a2 where:(id)a3;
+ (void)updateColumn:(id)a0 toValue:(id)a1 fromDatabase:(id)a2 where:(id)a3 args:(id)a4;
+ (void)updateColumn:(id)a0 toValue:(id)a1 where:(id)a2;

- (id)database;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (BOOL)isPersisted;
- (BOOL)isDeleted;
- (id)init;
- (void)persist;
- (id)lastModifiedDate;
- (void)open;
- (id)address;
- (id)description;
- (id)creationDate;
- (id)uuid;
- (unsigned long long)modelId;
- (void)setModelId:(unsigned long long)a0;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)a0;
- (void)close;
- (id)dataValueForField:(id)a0;
- (id)createDate;
- (void)deleteModel;
- (id)modDate;
- (BOOL)notifyOfChanges;
- (oneway void)releaseWithTag:(long long)a0;
- (void)uncache;
- (id)modelIdAsNumber;
- (id)allocationHistory;
- (id)autoreleaseWithTag:(long long)a0;
- (void)cacheModDate:(id)a0;
- (id)copyWithTag:(long long)a0;
- (id)databaseEntity;
- (id)dateValueForField:(id)a0;
- (BOOL)flushModel;
- (BOOL)flushModelAggressively;
- (void)includeInOpenChanges:(unsigned long long)a0;
- (id)initWithModelId:(id)a0;
- (id)initWithModelId:(id)a0 forEntity:(id)a1;
- (id)initWithModelId:(id)a0 inDatabase:(id)a1;
- (id)initWithUuid:(id)a0 forEntity:(id)a1;
- (id)initWithUuid:(id)a0 inDatabase:(id)a1;
- (BOOL)modelFlagForFlag:(unsigned int)a0;
- (id)numberValueForField:(id)a0;
- (id)recentChange;
- (id)retainWithTag:(long long)a0;
- (void)setDatabaseEntity:(id)a0;
- (void)setIsDeleted;
- (void)setIsPersisted;
- (void)setModelFlagTo:(BOOL)a0 forFlag:(unsigned int)a1;
- (BOOL)setNotifyOfChanges:(BOOL)a0;
- (void)setRecentChange:(id)a0;
- (unsigned long long)setToClosed;
- (void)simpleWriteValue:(id)a0 toField:(id)a1;
- (void)simpleWriteValue:(id)a0 toField:(id)a1 withModDate:(id)a2;
- (id)stringValueForField:(id)a0;
- (id)verifierDescription;
- (void)wasPersisted;
- (void)willBeDeleted;
- (void)writeValue:(id)a0 toField:(id)a1;

@end
