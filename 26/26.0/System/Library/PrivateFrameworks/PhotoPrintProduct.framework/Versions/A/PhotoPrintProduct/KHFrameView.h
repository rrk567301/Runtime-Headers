@class NSMapTable, KHLayoutView, NSPanGestureRecognizer, NSClickGestureRecognizer, NSButton, KHBaseLayer, KHFrame, KHSelectionGestureRecognizer, NSImage, NSString, KHLongClickGestureRecognizer, KHMapViewController, NSMutableSet, KHSelectionManager, NSArray, UXCollectionView, KHLayout, KHTextView, NSView;
@protocol KHSelectable, KHFrameViewContainerDelegate;

@interface KHFrameView : UXView <KHPhotoContentLayerDelegate, KHFrameContentLayerProvider, NSGestureRecognizerDelegate, NSDraggingDestination, NSDraggingSource> {
    KHBaseLayer *_hoverLayer;
    struct { double x; double y; BOOL isRelativeX; BOOL isRelativeY; } _initialPan;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _initialPhotoDraggingFrame;
    struct CGPoint { double x; double y; } _tearOffset;
}

@property (nonatomic) struct CGSize { double width; double height; } previousSize;
@property (nonatomic) BOOL boundsVisible;
@property (nonatomic) BOOL contentWarningVisible;
@property BOOL contentWarningNeedsUpdate;
@property (nonatomic) BOOL updatingFrameViews;
@property (retain, nonatomic) NSPanGestureRecognizer *panRecognizer;
@property (retain, nonatomic) KHSelectionGestureRecognizer *selectionRecognizer;
@property (retain, nonatomic) KHLongClickGestureRecognizer *longClickRecognizer;
@property (retain, nonatomic) NSClickGestureRecognizer *doubleClickRecognizer;
@property (retain, nonatomic) NSButton *contentWarningButton;
@property (readonly, nonatomic) NSImage *contentWarningImage;
@property (readonly, nonatomic) BOOL hasZoomableFrameObject;
@property (retain, nonatomic) NSMutableSet *recycledFrameViews;
@property (retain, nonatomic) KHMapViewController *mapViewController;
@property (retain, nonatomic) KHFrame *draggingFrameObject;
@property (weak, nonatomic) UXCollectionView *enclosingCollectionView;
@property (readonly, nonatomic) NSArray *subframes;
@property (readonly, nonatomic) NSMapTable *frameViewMap;
@property (readonly, nonatomic) double backingScaleFactor;
@property (readonly, nonatomic) KHLayout *layoutObject;
@property (readonly, nonatomic) KHLayoutView *enclosingLayoutView;
@property (readonly, nonatomic) KHBaseLayer *hoverLayer;
@property (readonly, nonatomic) id<KHSelectable> selectableObject;
@property (retain, nonatomic) KHFrame *frameObject;
@property (readonly, nonatomic) unsigned long long contentType;
@property (readonly, nonatomic) KHSelectionManager *selectionManager;
@property (nonatomic) double drawingScale;
@property (nonatomic) struct CGPoint { double x0; double x1; } drawingOffset;
@property (nonatomic) double maskOutsetLimit;
@property (nonatomic, getter=isFixed) BOOL fixed;
@property (readonly, nonatomic, getter=isSelectable) BOOL selectable;
@property (nonatomic, getter=isEditing) BOOL editing;
@property (nonatomic, getter=isHoverVisible) BOOL hoverVisible;
@property (readonly, nonatomic, getter=isRendering) BOOL rendering;
@property (nonatomic, getter=isContentChangeDisabled) BOOL contentChangeDisabled;
@property (nonatomic, getter=isContextualMenuDisabled) BOOL contextualMenuDisabled;
@property (nonatomic) unsigned long long contentClipMode;
@property BOOL clipsToBounds;
@property (weak, nonatomic) id<KHFrameViewContainerDelegate> containerDelegate;
@property (retain, nonatomic) KHTextView *textView;
@property (retain, nonatomic) NSView *textViewContainer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (Class)layerClass;

- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (void)viewWillMoveToWindow:(id)a0;
- (void)_handlePanGesture:(id)a0;
- (struct CGPoint { double x0; double x1; })center;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)keyDown:(id)a0;
- (void)paste:(id)a0;
- (void)copy:(id)a0;
- (void)viewDidMoveToWindow;
- (void)viewDidChangeBackingProperties;
- (id)menuForEvent:(id)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void).cxx_destruct;
- (void)deleteBackward:(id)a0;
- (void)draggingExited:(id)a0;
- (BOOL)accessibilityPerformPress;
- (id)accessibilityValueDescription;
- (void)beginGestureWithEvent:(id)a0;
- (unsigned long long)draggingEntered:(id)a0;
- (void)draggingSession:(id)a0 endedAtPoint:(struct CGPoint { double x0; double x1; })a1 operation:(unsigned long long)a2;
- (unsigned long long)draggingSession:(id)a0 sourceOperationMaskForDraggingContext:(long long)a1;
- (void)draggingSession:(id)a0 willBeginAtPoint:(struct CGPoint { double x0; double x1; })a1;
- (unsigned long long)draggingUpdated:(id)a0;
- (void)endGestureWithEvent:(id)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldAttemptToRecognizeWithEvent:(id)a1;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (void)magnifyWithEvent:(id)a0;
- (BOOL)performDragOperation:(id)a0;
- (BOOL)prepareForDragOperation:(id)a0;
- (void)setFrameRotation:(double)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setNeedsDisplay:(BOOL)a0;
- (BOOL)wantsPeriodicDraggingUpdates;
- (void)_handleSelectionGesture:(id)a0;
- (void)_sendMouseDown:(id)a0;
- (id)dequeueFrameViewForFrameObject:(id)a0;
- (void)placeFrameView:(id)a0;
- (id)recycleFrameViewForFrameObject:(id)a0;
- (void)setupFrameViews;
- (BOOL)_canHandleLongClickGesture;
- (BOOL)_canHandlePanGesture;
- (struct CGPoint { double x0; double x1; })_distanceFromNearestEdgeForLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_handleDoubleClickGesture:(id)a0;
- (void)_handleLongClickGesture:(id)a0;
- (void)_handleLongClickWithLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_handleSelection:(BOOL)a0;
- (void)_performDoubleClick;
- (void)_resetPanGestureRecognizer;
- (void)_selectWithEvent:(id)a0;
- (BOOL)_shouldTearForGestureLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_updateEventTrackers;
- (id)addFrameViewForFrameObject:(id)a0;
- (void)backfillIfNecessaryInOperationQueue:(id)a0;
- (void)cleanupFrameViews;
- (void)editPhoto:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForFrameObject:(id)a0 drawingOffset:(struct CGPoint { double x0; double x1; } *)a1;
- (struct CGPoint { double x0; double x1; })frameObjectCenterForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)frameObjectForFrameView:(id)a0;
- (struct CGSize { double x0; double x1; })frameObjectSizeForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)frameRenderLayer:(id)a0 setDrawingScale:(double)a1;
- (BOOL)frameRenderLayer:(id)a0 setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)frameRenderLayerDidLayoutSublayers:(id)a0;
- (id)frameViewForFrameObject:(id)a0;
- (id)frameViews;
- (BOOL)geometryFlippedForPhotoContentLayer:(id)a0;
- (void)getFrameInfo:(id)a0;
- (id)imageRequestOperationQueueForPhotoContentLayer:(id)a0;
- (void)imageUpdatedForPhotoContentLayer:(id)a0;
- (BOOL)isFrameSelectionKeyEvent:(id)a0;
- (void)layoutAuxiliaryViews;
- (void)layoutFrameViews;
- (id)makeContentLayerForFrameRenderLayer:(id)a0;
- (void)mirrorImage:(id)a0;
- (void)moveFrameToFront:(id)a0;
- (void)photoContentLayer:(id)a0 addUserInteractiveOperationWithBlock:(id /* block */)a1;
- (id)photoContentLayer:(id)a0 imageForPanDirection:(unsigned long long)a1;
- (BOOL)photoContentLayer:(id)a0 shouldRequestImageWithQuality:(unsigned long long)a1;
- (id)photoEffectsForPhotoContentLayer:(id)a0;
- (void)recycleFrameViews;
- (BOOL)removeContentLayerForFrameRenderLayer:(id)a0;
- (void)removeFrameView:(id)a0;
- (id)removeFrameViewForFrameObject:(id)a0;
- (id)renderLayer;
- (void)sendFrameToBack:(id)a0;
- (void)showContentIssueAlert:(id)a0;
- (void)showFrameInspector:(id)a0;
- (void)showLayoutInspector:(id)a0;
- (void)toggleAppleLogoOption:(id)a0;
- (void)toggleFrameFitOrFill:(id)a0;
- (void)updateContentWarning;
- (void)updateFrameViews;

@end
