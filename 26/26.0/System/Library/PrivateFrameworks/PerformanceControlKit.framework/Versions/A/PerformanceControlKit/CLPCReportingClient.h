@class CLPCReportingSchema, NSArray, NSMutableDictionary, NSDictionary;

@interface CLPCReportingClient : CLPCUserClient <CLPCReportingAccess> {
    unsigned int num_cpu_clusters;
    unsigned int num_ane_clusters;
    unsigned int num_package_zones;
    unsigned int num_cpu_cores;
    unsigned int num_thread_groups;
    unsigned long long previous_timestamp;
    struct unordered_map<unsigned long long, CLPCReportingStatID, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, CLPCReportingStatID>>> { struct __hash_table<std::__hash_value_type<unsigned long long, CLPCReportingStatID>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CLPCReportingStatID>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CLPCReportingStatID>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, CLPCReportingStatID>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CLPCReportingStatID>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CLPCReportingStatID>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CLPCReportingStatID>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CLPCReportingStatID>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } channel_to_stat_map;
    struct unordered_map<unsigned long long, unsigned int, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, unsigned int>>> { struct __hash_table<std::__hash_value_type<unsigned long long, unsigned int>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, unsigned int>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, unsigned int>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, unsigned int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned int>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned int>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned int>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } channel_to_cluster_map;
    struct unordered_map<unsigned long long, unsigned long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, unsigned long>>> { struct __hash_table<std::__hash_value_type<unsigned long long, unsigned long>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, unsigned long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } lostperf_to_index_map;
    struct vector<unsigned long long, std::allocator<unsigned long long>> { unsigned long long *__begin_; unsigned long long *__end_; unsigned long long *__cap_; } powerlog_lostperf_reasons;
    struct unordered_set<CLPCReportingStatID, std::hash<CLPCReportingStatID>, std::equal_to<CLPCReportingStatID>, std::allocator<CLPCReportingStatID>> { struct __hash_table<CLPCReportingStatID, std::hash<CLPCReportingStatID>, std::equal_to<CLPCReportingStatID>, std::allocator<CLPCReportingStatID>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<CLPCReportingStatID, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CLPCReportingStatID, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CLPCReportingStatID, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<CLPCReportingStatID, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } available_stat_ids;
    struct vector<CLPCReportingStatID, std::allocator<CLPCReportingStatID>> { unsigned long long *__begin_; unsigned long long *__end_; unsigned long long *__cap_; } configured_stat_ids;
    struct array<CLPCReportingSchema *, 11UL> { CLPCReportingSchema *__elems_[11]; } schemas;
    NSArray *compactedSchemas;
    struct array<std::unordered_map<unsigned long long, unsigned long>, 11UL> { struct unordered_map<unsigned long long, unsigned long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, unsigned long>>> { struct __hash_table<std::__hash_value_type<unsigned long long, unsigned long>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, unsigned long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } __elems_[11]; } schema_column_maps;
    struct optional<clpc::user::iokit::Service> { union { char __null_state_; struct Service { void /* function */ **_vptr$Object; unsigned int object; unsigned int connect; } __val_; } ; BOOL __engaged_; } agx_service;
    struct ChannelList { NSMutableDictionary *channels; } reporting_channels;
    struct Subscription { void /* function */ **_vptr$Subscription; struct __IOReportSubscriptionCF *subscription; NSMutableDictionary *subscribed_channels; } reporting_subscription;
    struct SampleList { NSMutableDictionary *samples; } prev_sample_list;
    struct unordered_map<CLPCReportingStatID, NSString *, std::hash<CLPCReportingStatID>, std::equal_to<CLPCReportingStatID>, std::allocator<std::pair<const CLPCReportingStatID, NSString *>>> { struct __hash_table<std::__hash_value_type<CLPCReportingStatID, NSString *>, std::__unordered_map_hasher<CLPCReportingStatID, std::__hash_value_type<CLPCReportingStatID, NSString *>, std::hash<CLPCReportingStatID>, std::equal_to<CLPCReportingStatID>>, std::__unordered_map_equal<CLPCReportingStatID, std::__hash_value_type<CLPCReportingStatID, NSString *>, std::equal_to<CLPCReportingStatID>, std::hash<CLPCReportingStatID>>, std::allocator<std::__hash_value_type<CLPCReportingStatID, NSString *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, NSString *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, NSString *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, NSString *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, NSString *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } stat_to_name_map;
    struct unordered_map<CLPCReportingStatID, CLPCReportingColumnFormat, std::hash<CLPCReportingStatID>, std::equal_to<CLPCReportingStatID>, std::allocator<std::pair<const CLPCReportingStatID, CLPCReportingColumnFormat>>> { struct __hash_table<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnFormat>, std::__unordered_map_hasher<CLPCReportingStatID, std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnFormat>, std::hash<CLPCReportingStatID>, std::equal_to<CLPCReportingStatID>>, std::__unordered_map_equal<CLPCReportingStatID, std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnFormat>, std::equal_to<CLPCReportingStatID>, std::hash<CLPCReportingStatID>>, std::allocator<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnFormat>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnFormat>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnFormat>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnFormat>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnFormat>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } stat_to_format_map;
    struct unordered_map<CLPCReportingStatID, CLPCReportingColumnType, std::hash<CLPCReportingStatID>, std::equal_to<CLPCReportingStatID>, std::allocator<std::pair<const CLPCReportingStatID, CLPCReportingColumnType>>> { struct __hash_table<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnType>, std::__unordered_map_hasher<CLPCReportingStatID, std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnType>, std::hash<CLPCReportingStatID>, std::equal_to<CLPCReportingStatID>>, std::__unordered_map_equal<CLPCReportingStatID, std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnType>, std::equal_to<CLPCReportingStatID>, std::hash<CLPCReportingStatID>>, std::allocator<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnType>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnType>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<CLPCReportingStatID, CLPCReportingColumnType>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } stat_to_type_map;
    struct map<unsigned long long, clpc::shared::rpc::ThreadGroupReporting, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, clpc::shared::rpc::ThreadGroupReporting>>> { struct __tree<std::__value_type<unsigned long long, clpc::shared::rpc::ThreadGroupReporting>, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, clpc::shared::rpc::ThreadGroupReporting>, std::less<unsigned long long>>, std::allocator<std::__value_type<unsigned long long, clpc::shared::rpc::ThreadGroupReporting>>> { void *__begin_node_; struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __end_node_; unsigned long long __size_; } __tree_; } report_info;
    NSDictionary *thread_group_stats;
    struct unordered_map<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>>> { struct __hash_table<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } prev_report_acc;
    struct unordered_map<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>>> { struct __hash_table<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } prev_report_cluster_acc;
    struct unordered_map<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>>> { struct __hash_table<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, unsigned long long>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } curr_report_acc;
    struct unordered_map<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>>> { struct __hash_table<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<CLPCReportingStatID, std::vector<unsigned long long>>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } curr_report_cluster_acc;
    BOOL thread_group_stats_requested;
    unsigned long long tg_sorting_metric;
}

- (id).cxx_construct;
- (id)init:(id *)a0;
- (void).cxx_destruct;
- (id)readDeltaStats:(id *)a0;
- (BOOL)enableStats:(id)a0 error:(id *)a1;
- (void)setNumberOfThreadGroups:(id)a0 error:(id *)a1;
- (void)setPreviousTimestamp:(id)a0 error:(id *)a1;
- (id)enabledStats;
- (id)readStats:(id *)a0;
- (unsigned long long)schemaIDForStatID:(unsigned long long)a0 error:(id *)a1;
- (BOOL)setTGSortingMetric:(unsigned long long)a0 error:(id *)a1;
- (id)supportedStats;

@end
