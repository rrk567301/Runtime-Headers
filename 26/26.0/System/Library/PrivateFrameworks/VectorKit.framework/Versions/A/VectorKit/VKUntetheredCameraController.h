@class NSString, VKCameraRegionRestriction;

@interface VKUntetheredCameraController : VKMapCameraController <VKGesturingCameraController, VKMovableCamera> {
    struct vector<std::pair<md::cc::CameraCommandType, std::variant<md::cc::Zoom, md::cc::ZoomToLevel, md::cc::StartPinchingWithFocusPoint, md::cc::UpdatePinchWithFocusPoint, md::cc::StopPinchingWithFocusPoint, md::cc::StartPanningAtPoint, md::cc::UpdatePanWithTranslation, md::cc::StopPanningAtPoint, md::cc::StartRotatingWithFocusPoint, md::cc::UpdateRotationWithFocusPoint, md::cc::StopRotatingWithFocusPoint, md::cc::StartPitchingWithFocusPoint, md::cc::UpdatePitchWithFocusPoint, md::cc::updatePitchWithFocusPointDegrees, md::cc::StopPitchingWithFocusPoint>>, std::allocator<std::pair<md::cc::CameraCommandType, std::variant<md::cc::Zoom, md::cc::ZoomToLevel, md::cc::StartPinchingWithFocusPoint, md::cc::UpdatePinchWithFocusPoint, md::cc::StopPinchingWithFocusPoint, md::cc::StartPanningAtPoint, md::cc::UpdatePanWithTranslation, md::cc::StopPanningAtPoint, md::cc::StartRotatingWithFocusPoint, md::cc::UpdateRotationWithFocusPoint, md::cc::StopRotatingWithFocusPoint, md::cc::StartPitchingWithFocusPoint, md::cc::UpdatePitchWithFocusPoint, md::cc::updatePitchWithFocusPointDegrees, md::cc::StopPitchingWithFocusPoint>>>> { void *__begin_; void *__end_; void *__cap_; } _commands;
    struct vector<md::CameraCollision, std::allocator<md::CameraCollision>> { struct CameraCollision *__begin_; struct CameraCollision *__end_; struct CameraCollision *__cap_; } _collisions;
    struct vector<std::shared_ptr<gdc::BoundingVolumeNode<double, gdc::CollisionMeshNode<double, float>, float, const gdc::Tiled *>>, std::allocator<std::shared_ptr<gdc::BoundingVolumeNode<double, gdc::CollisionMeshNode<double, float>, float, const gdc::Tiled *>>>> { void *__begin_; void *__end_; void *__cap_; } _bvhRoots;
    struct optional<gm::Matrix<double, 3, 1>> { union { char __null_state_; struct Matrix<double, 3, 1> { double _e[3]; } __val_; } ; BOOL __engaged_; } _currentClosestHit;
    double _lastCollisionAvoisionTime;
    int _currentGesturingState;
    struct optional<gm::Matrix<double, 3, 1>> { union { char __null_state_; struct Matrix<double, 3, 1> { double _e[3]; } __val_; } ; BOOL __engaged_; } _preferredAvoidanceDirection;
    struct optional<CGPoint> { union { char __null_state_; struct CGPoint { double x; double y; } __val_; } ; BOOL __engaged_; } _startingScreenPointOpt;
    struct optional<std::pair<std::optional<gm::Matrix<double, 3, 1>>, std::optional<gm::Matrix<double, 3, 1>>>> { union { char __null_state_; struct pair<std::optional<gm::Matrix<double, 3, 1>>, std::optional<gm::Matrix<double, 3, 1>>> { struct optional<gm::Matrix<double, 3, 1>> { union { char __null_state_; struct Matrix<double, 3, 1> { double _e[3]; } __val_; } ; BOOL __engaged_; } first; struct optional<gm::Matrix<double, 3, 1>> { union { char __null_state_; struct Matrix<double, 3, 1> { double _e[3]; } __val_; } ; BOOL __engaged_; } second; } __val_; } ; BOOL __engaged_; } _startingCollisionAndGroundPointOpt;
    struct optional<gm::Matrix<double, 3, 1>> { union { char __null_state_; struct Matrix<double, 3, 1> { double _e[3]; } __val_; } ; BOOL __engaged_; } _gestureVelocity;
    struct optional<gm::Matrix<double, 3, 1>> { union { char __null_state_; struct Matrix<double, 3, 1> { double _e[3]; } __val_; } ; BOOL __engaged_; } _lastExternallySetPosition;
    struct optional<geo::Unit<geo::RadianUnitDescription, double>> { union { char __null_state_; struct Unit<geo::RadianUnitDescription, double> { double _value; } __val_; } ; BOOL __engaged_; } _collisionAvoidantMaxPitch;
    struct optional<geo::Unit<geo::RadianUnitDescription, double>> { union { char __null_state_; struct Unit<geo::RadianUnitDescription, double> { double _value; } __val_; } ; BOOL __engaged_; } _startingPitch;
    struct optional<geo::Unit<geo::RadianUnitDescription, double>> { union { char __null_state_; struct Unit<geo::RadianUnitDescription, double> { double _value; } __val_; } ; BOOL __engaged_; } _startingYaw;
    struct vector<md::RaycastDebug::RayHit, std::allocator<md::RaycastDebug::RayHit>> { struct RayHit *__begin_; struct RayHit *__end_; struct RayHit *__cap_; } _debugRayResults;
    struct vector<geo::Triangle<double, 3>, std::allocator<geo::Triangle<double, 3>>> { void *__begin_; void *__end_; void *__cap_; } _debugRayTriangles;
    struct Matrix<double, 3, 1> { double _e[3]; } _lastEye;
    struct optional<gdc::CameraFrame<geo::Radians, double>> { union { char __null_state_; struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } __val_; } ; BOOL __engaged_; } _lastCameraFrame;
    unsigned char _elevationUpdateType;
}

@property (nonatomic) const void *geometryContext;
@property (nonatomic) const struct ElevationContext { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; float x7; float x8; float x9; float x10; } *elevationContext;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) const void *position;
@property (readonly, nonatomic) double minHeight;
@property (readonly, nonatomic) double maxHeight;
@property (readonly, nonatomic) double pitchRadian;
@property (readonly, nonatomic) double yawRadian;
@property (readonly, nonatomic) struct Matrix<double, 3, 1> { double x0[3]; } rightVector;
@property (nonatomic) const void *orientation;
@property (readonly, nonatomic) struct VKCameraState { struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } x0; double x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; double x3; } cameraState;
@property (readonly, nonatomic) double maxPitchRadian;
@property (readonly, retain, nonatomic) VKCameraRegionRestriction *regionRestriction;
@property (readonly, nonatomic) struct Matrix<double, 3, 1> { double x0[3]; } groundPoint;

- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(BOOL)a1;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; })a0;
- (void)zoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)tapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updateWithTimestamp:(double)a0 withContext:(void *)a1;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (BOOL)usesVKCamera;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setCenterCoordinate3D:(struct { double x0; double x1; double x2; })a0 altitude:(double)a1 yaw:(double)a2 pitch:(double)a3 duration:(double)a4 animationStyle:(long long)a5 timingCurve:(id /* block */)a6 completion:(id /* block */)a7;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setCenterCoordinate:(struct { double x0; double x1; })a0 altitude:(double)a1 yaw:(double)a2 pitch:(double)a3 duration:(double)a4 animationStyle:(long long)a5 timingCurve:(id /* block */)a6 completion:(id /* block */)a7;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setMapRegion:(id)a0 pitch:(double)a1 yaw:(double)a2 duration:(double)a3 timingCurve:(id /* block */)a4 completion:(id /* block */)a5;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)dealloc;
- (struct Matrix<double, 3, 1> { double x0[3]; })forwardVector;
- (struct optional<gm::Matrix<double, 3, 1>> { union { char x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; BOOL x1; })groundPointFromScreenPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)willBecomeActive;
- (id).cxx_construct;
- (void)zoomToLevel:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)initWithMapDataAccess:(void *)a0 animationRunner:(struct AnimationRunner { struct MapEngine *x0; } *)a1 runLoopController:(struct RunLoopController { struct MapEngine *x0; long long x1; } *)a2 cameraDelegate:(id)a3 mapEngine:(void *)a4;
- (void).cxx_destruct;
- (struct Matrix<double, 3, 1> { double x0[3]; })upVector;
- (void)_executeStartPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(BOOL)a1;
- (void)_executeStartPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_executeStartPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_executeStartRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_executeStopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_executeStopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_executeStopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_executeStopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_executeUpdatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)_executeUpdatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)_executeUpdatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)_executeUpdatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (void)_executeUpdateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (void)_executeZoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)_executeZoomToLevel:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)adoptCollisions:(void *)a0 bvhRoots:(void *)a1;
- (void)avoidCurrentCollision:(double)a0;
- (double)cameraCollisionResponseRadius;
- (struct Matrix<double, 3, 1> { double x0[3]; })cameraCollisionResponseSphereCentre;
- (struct pair<std::optional<gm::Matrix<double, 3, 1>>, std::optional<gm::Matrix<double, 3, 1>>> { struct optional<gm::Matrix<double, 3, 1>> { union { char x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; BOOL x1; } x0; struct optional<gm::Matrix<double, 3, 1>> { union { char x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; BOOL x1; } x1; })collisionPointFromScreenPoint:(struct CGPoint { double x0; double x1; })a0;
- (double)currentHitDistance;
- (struct CGPoint { double x0; double x1; })currentScreenPointFromTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStartPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(BOOL)a1;
- (void)executeStartPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStartPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStartRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeUpdatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)executeUpdatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)executeUpdatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)executeUpdatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (void)executeUpdateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (void)executeZoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)executeZoomToLevel:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)gestureEnd;
- (BOOL)gestureInitiatedMovement;
- (struct optional<gm::Matrix<double, 3, 1>> { union { char x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; BOOL x1; })getStartingGroundPointOpt;
- (struct optional<gm::Matrix<double, 3, 1>> { union { char x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; BOOL x1; })getTranslationToAvoidCollisions:(const void *)a0 softness:(const double *)a1;
- (struct optional<gm::Matrix<double, 3, 1>> { union { char x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; BOOL x1; })intersectsRay:(struct Matrix<double, 3, 1> { double x0[3]; })a0 target:(struct Matrix<double, 3, 1> { double x0[3]; })a1 lastHit:(BOOL)a2;
- (struct optional<gm::Matrix<double, 3, 1>> { union { char x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; BOOL x1; })intersectsRay:(struct Matrix<double, 3, 1> { double x0[3]; })a0 target:(struct Matrix<double, 3, 1> { double x0[3]; })a1 lastHit:(BOOL)a2 zScale:(double)a3;
- (struct pair<gm::Matrix<double, 3, 1>, gm::Matrix<double, 3, 1>> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; })lookAtFromCameraFrame:(const void *)a0;
- (struct pair<gm::Matrix<double, 3, 1>, gm::Matrix<double, 3, 1>> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; })lookAtFromVkCameraPosition;
- (struct Matrix<double, 3, 1> { double x0[3]; })normalizedMercatorFromWorldPosition:(const void *)a0;
- (void)rotateAboutPoint:(const void *)a0 newYaw:(struct Unit<geo::RadianUnitDescription, double> { double x0; })a1 newPitch:(struct Unit<geo::RadianUnitDescription, double> { double x0; })a2;
- (void)setGestureInitiatedMovement:(BOOL)a0;
- (void)setPreferredAvoidanceDirection:(const void *)a0 newPrefernce:(BOOL)a1 allowReverse:(BOOL)a2;
- (void)setPreferredAvoidanceDirectionAsCollisionPointToEye;
- (BOOL)shouldUpdateCameraWithVKCamera;
- (double)unitsPerMeterAtPoint:(const void *)a0;
- (void)updateCameraFrame;
- (void)updateCollisionAvoidanceStyle:(int)a0;
- (void)updateCurrentGesturingCollisionPoint;
- (void)updateGestureWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct Matrix<double, 3, 1> { double x0[3]; })worldFromNormalizedMercatorPosition:(const void *)a0;
- (struct Matrix<double, 3, 1> { double x0[3]; })worldPositionFromVkCamera;

@end
