@class NSMutableArray, NSMutableDictionary;

@interface VKLabelNavRoadGraph : NSObject {
    struct unordered_set<std::shared_ptr<md::LabelTile>, std::hash<std::shared_ptr<md::LabelTile>>, std::equal_to<std::shared_ptr<md::LabelTile>>, geo::allocator_adapter<std::shared_ptr<md::LabelTile>, mdm::zone_mallocator>> { struct __hash_table<std::shared_ptr<md::LabelTile>, std::hash<std::shared_ptr<md::LabelTile>>, std::equal_to<std::shared_ptr<md::LabelTile>>, geo::allocator_adapter<std::shared_ptr<md::LabelTile>, mdm::zone_mallocator>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *[], std::__bucket_list_deallocator<geo::allocator_adapter<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *, mdm::zone_mallocator>>> { void **__ptr_; struct __bucket_list_deallocator<geo::allocator_adapter<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *, mdm::zone_mallocator>> { unsigned long long __size_; struct allocator_adapter<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *, mdm::zone_mallocator> { struct zone_mallocator { } _allocator; } __alloc_; } __deleter_; struct __compressed_pair_padding<std::__bucket_list_deallocator<geo::allocator_adapter<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *, mdm::zone_mallocator>>, false> { char __padding_[7]; } __padding2_431_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> { void *__next_; } __first_node_; struct allocator_adapter<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>, mdm::zone_mallocator> { struct zone_mallocator { } _allocator; } __node_alloc_; unsigned long long __size_; float __max_load_factor_; } __table_; } _tiles;
    struct unordered_set<std::shared_ptr<md::LabelTile>, std::hash<std::shared_ptr<md::LabelTile>>, std::equal_to<std::shared_ptr<md::LabelTile>>, geo::allocator_adapter<std::shared_ptr<md::LabelTile>, mdm::zone_mallocator>> { struct __hash_table<std::shared_ptr<md::LabelTile>, std::hash<std::shared_ptr<md::LabelTile>>, std::equal_to<std::shared_ptr<md::LabelTile>>, geo::allocator_adapter<std::shared_ptr<md::LabelTile>, mdm::zone_mallocator>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *[], std::__bucket_list_deallocator<geo::allocator_adapter<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *, mdm::zone_mallocator>>> { void **__ptr_; struct __bucket_list_deallocator<geo::allocator_adapter<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *, mdm::zone_mallocator>> { unsigned long long __size_; struct allocator_adapter<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *, mdm::zone_mallocator> { struct zone_mallocator { } _allocator; } __alloc_; } __deleter_; struct __compressed_pair_padding<std::__bucket_list_deallocator<geo::allocator_adapter<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> *, mdm::zone_mallocator>>, false> { char __padding_[7]; } __padding2_431_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *> *> { void *__next_; } __first_node_; struct allocator_adapter<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>, mdm::zone_mallocator> { struct zone_mallocator { } _allocator; } __node_alloc_; unsigned long long __size_; float __max_load_factor_; } __table_; } _duplicateTiles;
    NSMutableDictionary *_tileDatasByIndex;
    NSMutableArray *_intersections;
    BOOL _oppositeCarriagewayJunctionsValid;
    NSMutableArray *_oppositeCarriagewayJunctions;
    struct Matrix<float, 2, 1> { float _e[2]; } _unitHeading;
    BOOL _offRouteJunctionsValid;
    struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _offRouteJunctionSelectRect;
    NSMutableArray *_offRouteJunctions;
    struct PolylineCoordinate { unsigned int index; float offset; } _routeUserOffset;
    BOOL _routeFeatureMapValid;
    struct unordered_map<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>, std::hash<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>>, std::equal_to<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>>, geo::allocator_adapter<std::pair<const std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, mdm::zone_mallocator>> { struct __hash_table<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, std::__unordered_map_hasher<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, std::hash<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>>, std::equal_to<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>>>, std::__unordered_map_equal<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, std::equal_to<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>>, std::hash<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>>>, geo::allocator_adapter<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, mdm::zone_mallocator>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, void *> *> *[], std::__bucket_list_deallocator<geo::allocator_adapter<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, void *> *> *, mdm::zone_mallocator>>> { void **__ptr_; struct __bucket_list_deallocator<geo::allocator_adapter<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, void *> *> *, mdm::zone_mallocator>> { unsigned long long __size_; struct allocator_adapter<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, void *> *> *, mdm::zone_mallocator> { struct zone_mallocator { } _allocator; } __alloc_; } __deleter_; struct __compressed_pair_padding<std::__bucket_list_deallocator<geo::allocator_adapter<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, void *> *> *, mdm::zone_mallocator>>, false> { char __padding_[7]; } __padding2_431_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, void *> *> { void *__next_; } __first_node_; struct allocator_adapter<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::allocator_adapter<char, mdm::zone_mallocator>>, std::shared_ptr<NavRoadFeature>>, void *>, mdm::zone_mallocator> { struct zone_mallocator { } _allocator; } __node_alloc_; unsigned long long __size_; float __max_load_factor_; } __table_; } _routeFeatureMap;
    BOOL _simplifiedRouteValid;
    struct vector<md::LabelPoint, geo::allocator_adapter<md::LabelPoint, mdm::zone_mallocator>> { struct LabelPoint *__begin_; struct LabelPoint *__end_; struct LabelPoint *__cap_; struct allocator_adapter<md::LabelPoint, mdm::zone_mallocator> { struct zone_mallocator { } _allocator; } __alloc_; } _simplifiedRoutePoints;
    unsigned long long _currentRoadStartSimplifiedPointIndex;
    BOOL _screenRouteValid;
    struct vector<RouteSegment, geo::allocator_adapter<RouteSegment, mdm::zone_mallocator>> { struct RouteSegment *__begin_; struct RouteSegment *__end_; struct RouteSegment *__cap_; struct allocator_adapter<RouteSegment, mdm::zone_mallocator> { struct zone_mallocator { } _allocator; } __alloc_; } _screenRouteSegments;
    unsigned long long _firstPOIAligningRouteSegment;
}

@property (retain, nonatomic) NSMutableArray *junctions;

- (void)reset;
- (void)routeJunctionsHaveChanged;
- (void)startingLabelLayoutWithContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 routeUserOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })a1;
- (void)setTiles:(const void *)a0;
- (void)_updateIntersectionsForDepth:(unsigned long long)a0;
- (id)junctionListForDepth:(unsigned long long)a0;
- (id)junctionForRoad:(id)a0 nearJunction:(BOOL)a1 crossTileEdge:(BOOL)a2;
- (struct Matrix<float, 2, 1> { float x0[2]; })unitHeading;
- (id)offRouteGraphJunctionsWithNavContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 maxJunctions:(unsigned long long)a1 isOnRoute:(BOOL)a2;
- (unsigned long long)countReadyJunctionLists;
- (BOOL)_checkIfDualCarriageWayConnectorRoad:(id)a0 fromJunction:(id)a1 toJunction:(id)a2 checkShields:(BOOL)a3;
- (id)_findInterTileJunctionForJunction:(id)a0;
- (id)nextRoadSegmentForRoad:(id)a0;
- (void)_transformRouteToScreenWithContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0;
- (void)debugDraw:(id)a0 overlayConsole:(void *)a1 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2;
- (BOOL)prepareOppositeCarriagewayJunctions;
- (BOOL)isPriorRouteCollinearWithRoad:(id)a0 distance:(float)a1;
- (id)_nextIntersectionForRoad:(id)a0;
- (void)addRouteRoadEdge:(const struct VKLabelNavRouteRoadEdge { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; struct GeoCodecsRoadEdge { struct GeoCodecsRoadFeature *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct GeoCodecsConnectivityJunction *x5; struct GeoCodecsConnectivityJunction *x6; } x2; unsigned int x3; unsigned int x4; } *)a0 atA:(BOOL)a1 isRouteRefineJunction:(BOOL)a2 tile:(const void *)a3 junctionList:(id)a4;
- (void)_findOffRouteJunctions;
- (id)overpassJunctionForJunction:(id)a0;
- (id).cxx_construct;
- (id)initWithJunctions:(id)a0;
- (void)_updateSimplifiedRoute;
- (id)_junctionForRoadEdge:(const struct GeoCodecsRoadEdge { struct GeoCodecsRoadFeature *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct GeoCodecsConnectivityJunction *x5; struct GeoCodecsConnectivityJunction *x6; } *)a0 atA:(BOOL)a1 routeOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })a2 tile:(const void *)a3;
- (void)evaluateDualCarriagewayForJunction:(id)a0 outputJunctionList:(id)a1;
- (id)offRouteJunctionList;
- (BOOL)collideRouteWithLabel:(id)a0 routeCrossProduct:(float *)a1 context:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2;
- (unsigned char)computeRoutePositionForPOIAtPixel:(const void *)a0 currentPosition:(unsigned char)a1 context:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2;
- (id)oppositeCarriagewayJunctions;
- (void).cxx_destruct;

@end
