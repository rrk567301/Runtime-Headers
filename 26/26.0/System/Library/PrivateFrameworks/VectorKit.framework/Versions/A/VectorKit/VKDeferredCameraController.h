@class NSString, VKCameraRegionRestriction, VKForwardMovableCamera;

@interface VKDeferredCameraController : VKMapCameraController <VKGesturingCameraController, VKMovableCamera> {
    double _currentTimestamp;
    double _lastTimestamp;
    struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double _e[3]; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double _e[3]; } _imaginary; double _scalar; } _rotation; } _lastTransform;
    struct optional<gdc::CameraFrame<geo::Radians, double>> { union { char __null_state_; struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } __val_; } ; BOOL __engaged_; } _lastCameraFrame;
    struct optional<gdc::CameraFrame<geo::Radians, double>> { union { char __null_state_; struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } __val_; } ; BOOL __engaged_; } _nextCameraFrame;
    unsigned char _elevationUpdateType;
    struct optional<gm::Matrix<double, 3, 1>> { union { char __null_state_; struct Matrix<double, 3, 1> { double _e[3]; } __val_; } ; BOOL __engaged_; } _lastVelocity;
    struct optional<gm::Matrix<double, 3, 1>> { union { char __null_state_; struct Matrix<double, 3, 1> { double _e[3]; } __val_; } ; BOOL __engaged_; } _collisionResponse;
    struct optional<gdc::CameraFrame<geo::Radians, double>> { union { char __null_state_; struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } __val_; } ; BOOL __engaged_; } _debugCameraFrame;
    BOOL _pendingGesture;
    BOOL _stickyRotatingisPinchingState;
    BOOL _stickyPitchingState;
    struct optional<geo::Unit<geo::RadianUnitDescription, double>> { union { char __null_state_; struct Unit<geo::RadianUnitDescription, double> { double _value; } __val_; } ; BOOL __engaged_; } _stablePitch;
    unsigned char _rasterAvailableMinZoom;
    VKForwardMovableCamera *_forwardMoveableCamera;
}

@property (nonatomic) struct vector<std::pair<md::cc::CameraCommandType, std::variant<md::cc::Zoom, md::cc::ZoomToLevel, md::cc::StartPinchingWithFocusPoint, md::cc::UpdatePinchWithFocusPoint, md::cc::StopPinchingWithFocusPoint, md::cc::StartPanningAtPoint, md::cc::UpdatePanWithTranslation, md::cc::StopPanningAtPoint, md::cc::StartRotatingWithFocusPoint, md::cc::UpdateRotationWithFocusPoint, md::cc::StopRotatingWithFocusPoint, md::cc::StartPitchingWithFocusPoint, md::cc::UpdatePitchWithFocusPoint, md::cc::updatePitchWithFocusPointDegrees, md::cc::StopPitchingWithFocusPoint>>, std::allocator<std::pair<md::cc::CameraCommandType, std::variant<md::cc::Zoom, md::cc::ZoomToLevel, md::cc::StartPinchingWithFocusPoint, md::cc::UpdatePinchWithFocusPoint, md::cc::StopPinchingWithFocusPoint, md::cc::StartPanningAtPoint, md::cc::UpdatePanWithTranslation, md::cc::StopPanningAtPoint, md::cc::StartRotatingWithFocusPoint, md::cc::UpdateRotationWithFocusPoint, md::cc::StopRotatingWithFocusPoint, md::cc::StartPitchingWithFocusPoint, md::cc::UpdatePitchWithFocusPoint, md::cc::updatePitchWithFocusPointDegrees, md::cc::StopPitchingWithFocusPoint>>>> { void *__begin_; void *__end_; void *__cap_; } commands;
@property (nonatomic) long long cameraCollisionMode;
@property (nonatomic) const void *geometryContext;
@property (nonatomic) const struct ElevationContext { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; float x7; float x8; float x9; float x10; } *elevationContext;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) const void *position;
@property (readonly, nonatomic) double minHeight;
@property (readonly, nonatomic) double maxHeight;
@property (readonly, nonatomic) double pitchRadian;
@property (readonly, nonatomic) double yawRadian;
@property (readonly, nonatomic) struct Matrix<double, 3, 1> { double x0[3]; } rightVector;
@property (nonatomic) const void *orientation;
@property (readonly, nonatomic) struct VKCameraState { struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } x0; double x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; double x3; } cameraState;
@property (readonly, nonatomic) double maxPitchRadian;
@property (readonly, retain, nonatomic) VKCameraRegionRestriction *regionRestriction;
@property (readonly, nonatomic) struct Matrix<double, 3, 1> { double x0[3]; } groundPoint;

- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(BOOL)a1;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (void)zoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)tapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updateWithTimestamp:(double)a0 withContext:(void *)a1;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (BOOL)usesVKCamera;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)dealloc;
- (struct Matrix<double, 3, 1> { double x0[3]; })forwardVector;
- (struct optional<gm::Matrix<double, 3, 1>> { union { char x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; BOOL x1; })groundPointFromScreenPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)willBecomeActive;
- (id).cxx_construct;
- (void)willBecomeInactive;
- (void)zoomToLevel:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1;
- (void).cxx_destruct;
- (struct Matrix<double, 3, 1> { double x0[3]; })upVector;
- (BOOL)enableCollision;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })cameraFrameFromVkCameraWithFiltering:(BOOL)a0;
- (struct CameraCollisionResolutionRequest { struct Sphere<double, 3, std::enable_if<true>> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; struct Matrix<double, 3, 1> { double x0[3]; } x2; struct _retain_ptr<VKDeferredCameraController *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc_arc { } x2; struct _release_objc_arc { } x3; } x3; })collisionResolutionRequest:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })a0;
- (void)commitCameraResponse:(const void *)a0;
- (void)executeStartPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(BOOL)a1;
- (void)executeStartPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStartPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStartRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeStopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)executeUpdatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)executeUpdatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)executeUpdatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)executeUpdatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (void)executeUpdateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (void)executeZoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)executeZoomToLevel:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1;
- (BOOL)gestureInitiatedMovement;
- (id)initWithMapDataAccess:(void *)a0 animationRunner:(struct AnimationRunner { struct MapEngine *x0; } *)a1 runLoopController:(struct RunLoopController { struct MapEngine *x0; long long x1; } *)a2 cameraDelegate:(id)a3 mapEngine:(void *)a4 collisionMode:(long long)a5;
- (id)initWithMapDataAccess:(void *)a0 animationRunner:(struct AnimationRunner { struct MapEngine *x0; } *)a1 runLoopController:(struct RunLoopController { struct MapEngine *x0; long long x1; } *)a2 cameraDelegate:(id)a3 mapEngine:(void *)a4 collisionMode:(long long)a5 cameraBehavior:(id)a6;
- (struct pair<gm::Matrix<double, 3, 1>, gm::Matrix<double, 3, 1>> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; })lookAtFromCameraFrame:(const void *)a0;
- (struct pair<gm::Matrix<double, 3, 1>, gm::Matrix<double, 3, 1>> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; })lookAtFromVkCameraPosition;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })nextCameraFrameWithTick:(BOOL)a0;
- (struct Matrix<double, 3, 1> { double x0[3]; })normalizedMercatorFromWorldPosition:(const void *)a0;
- (struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; })recalculateRotation:(const void *)a0 cameraPosition:(const void *)a1;
- (void)resetGestureState;
- (void)setElevationRasterAvailableMinZoom:(unsigned char)a0;
- (BOOL)shouldFixOrientation;
- (BOOL)shouldUpdateCameraWithVKCamera;
- (double)unitsPerMeterAtPoint:(const void *)a0;
- (void)updateCameraFrameWithContext:(void *)a0;
- (BOOL)wasPitching;
- (BOOL)wasRotatingOrPinching;
- (BOOL)wasStickyGesturing:(BOOL *)a0;
- (struct Matrix<double, 3, 1> { double x0[3]; })worldFromNormalizedMercatorPosition:(const void *)a0;
- (struct Matrix<double, 3, 1> { double x0[3]; })worldPositionFromVkCamera;
- (double)zScale;

@end
