@class _valid, NSString, VKDetachedNavGestureCameraBehavior, VKGestureCameraBehavior, VKSceneConfiguration, VKTimedAnimation, VKScreenCanvas, VKDaVinciGestureCameraController, VKAttachedNavGestureCameraBehavior, GEOMapRegion, VKNavContext;
@protocol VKInteractiveMap;

@interface VKNavCameraController : VKCameraController <VKNavigationCameraController, VKGesturingCameraController, VKNavContextObserver> {
    unsigned char _cameraType;
    unsigned char _headingType;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _puckCourse;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _headingDelta;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _headingMinDelta;
    double _lastHeightDelta;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _lastCalculatedCameraFrame;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _cameraFrame;
    BOOL _needsUpdate;
    struct Spring<double, 1, gdc::SpringType::Linear> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _pitchSpring;
    struct Spring<double, 1, gdc::SpringType::Angular> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _headingSpring;
    struct Spring<double, 1, gdc::SpringType::Linear> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _distanceFromTargetSpring;
    struct Spring<double, 2, gdc::SpringType::Linear> { struct Matrix<double, 2, 1> { double _e[2]; } _position; struct Matrix<double, 2, 1> { double _e[2]; } _velocity; struct Matrix<double, 2, 1> { double _e[2]; } _restingPosition; double _kSpring; double _kDamper; } _screenPositionSpring;
    struct Spring<double, 3, gdc::SpringType::Linear> { struct Matrix<double, 3, 1> { double _e[3]; } _position; struct Matrix<double, 3, 1> { double _e[3]; } _velocity; struct Matrix<double, 3, 1> { double _e[3]; } _restingPosition; double _kSpring; double _kDamper; } _cameraOriginSpring;
    struct Unit<geo::MeterUnitDescription, double> { double _value; } _cameraDistanceFromTarget;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _cameraPitch;
    unsigned long long _previousUpdateFrameStamp;
    double _previousUpdateTime;
    double _ignoreStyleChangeStartTime;
    double _lastSARUpdateTime;
    double _maxZoomScale;
    double _minZoomScale;
    VKGestureCameraBehavior *_gestureBehavior;
    VKAttachedNavGestureCameraBehavior *_attachedGestureBehavior;
    VKDetachedNavGestureCameraBehavior *_detachedGestureBehavior;
    VKDaVinciGestureCameraController *_davinciGestureCameraController;
    BOOL _isDetached;
    BOOL _isIgnoringStyleChange;
    BOOL _panning;
    BOOL _rotating;
    BOOL _pitching;
    BOOL _zooming;
    BOOL _tapZooming;
    BOOL _reframingInOverviewMode;
    VKTimedAnimation *_transitionAnimation;
    VKTimedAnimation *_snapPitchAnimation;
    VKTimedAnimation *_snapHeadingAnimation;
    VKTimedAnimation *_selectiveFramingAnimation;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _transitionFrame;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } _currentStyleName;
    struct vector<geo::Coordinate3D<geo::Radians, double>, std::allocator<geo::Coordinate3D<geo::Radians, double>>> { void *__begin_; void *__end_; void *__cap_; } _coordinatesToFrame;
    unsigned char _styleManeuversToFrame;
    unsigned char _maneuversToFrame;
    unsigned char _styleLegsToFrame;
    unsigned char _segmentsToFrame;
    double _minCameraHeight;
    double _maxCameraHeight;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _minCameraPitch;
    struct Unit<geo::RadianUnitDescription, double> { double _value; } _maxCameraPitch;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _previousMapEdgeInsets;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _framingEdgeInset;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _framingEdgeInsetProportional;
    struct Matrix<float, 2, 1> { float _e[2]; } _puckMovementBoundsMin;
    struct Matrix<float, 2, 1> { float _e[2]; } _puckMovementBoundsMax;
    struct Matrix<float, 2, 1> { float _e[2]; } _idealPuckScreenPosition;
    double _minHeightDeltaChangeHorizontal;
    double _maxHeightDeltaChangeHorizontal;
    double _minHeightDeltaChangeVertical;
    double _maxHeightDeltaChangeVertical;
    double _halfPuckSize;
    struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _framingScreenRect;
    BOOL _enablePan;
    BOOL _enableZoom;
    BOOL _enablePitch;
    BOOL _enableRotate;
    float _panReturnDelayTime;
    unsigned char _alternateFramingSource;
    unsigned char _secondaryAlternateFramingSource;
    double _maxFramingDistance;
    double _framingDistanceAfterManeuver;
    VKNavContext *_navContext;
    struct { double latitude; double longitude; } _locationCoordinate;
    struct PolylineCoordinate { unsigned int index; float offset; } _routeCoordinate;
    BOOL _frameAllGroupedManeuvers;
    unsigned char _maxManeuversToFrame;
    BOOL _ignorePointsBehind;
    struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _routeFocusCoordinate;
    unsigned long long _lastTargetStyleIdentifier;
    unsigned long long _previousSearchItemCount;
    double _desiredZoomScale;
    float _animationTime;
    BOOL _isTracking;
    struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
    double _depthNear;
    BOOL _leftHanded;
    BOOL _sentZoomNotification;
    struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _cornerCoordinates[4];
    struct MetricMeasurement { double speed; struct WindowedSampler<3UL> { double _min; double _max; double _avg; double _sum; struct optional<unsigned long> { union { char __null_state_; unsigned long long __val_; } ; BOOL __engaged_; } _idx; struct array<double, 3UL> { double __elems_[3]; } _samples; } speedSamples; } _measurement;
    long long _requestedDisplayRate;
    struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _previousPuckCoordinate;
    struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _previousCameraTarget;
    unsigned char _movementMetric;
    BOOL _useRollingAverageOfMetric;
    unsigned long long _headingMetricArcLength;
    BOOL _isElevatedRoute;
    void *_cameraManager;
    struct unique_ptr<md::LabelMetrics, std::default_delete<md::LabelMetrics>> { struct LabelMetrics *__ptr_; } _labelMetrics;
    struct vector<NavCameraSpeedFrameRate, std::allocator<NavCameraSpeedFrameRate>> { struct NavCameraSpeedFrameRate *__begin_; struct NavCameraSpeedFrameRate *__end_; struct NavCameraSpeedFrameRate *__cap_; } _speedFrameRate;
    struct Matrix<double, 3, 1> { double _e[3]; } _lastProjectedPosition;
    double _farClipPlaneFactor;
    struct shared_ptr<gss::StylesheetQuery<gss::ScenePropertyID>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _sceneQuery;
    unsigned long long _cameraMode;
    BOOL _didNavCameraTransition;
    struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _valid *_listener; struct shared_ptr<std::atomic<bool>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } x0; struct function<void (bool)> { struct __value_func<void (bool)> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } _delegate; } _showOverlay;
    struct Monitorable<md::ConfigValue<GEOConfigKeyUInteger, unsigned int>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; unsigned int _value; _valid *_listener; struct shared_ptr<std::atomic<bool>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } x0; struct function<void (unsigned int)> { struct __value_func<void (unsigned int)> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } _delegate; } _debugPage;
    struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _valid *_listener; struct shared_ptr<std::atomic<bool>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } x0; struct function<void (bool)> { struct __value_func<void (bool)> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } _delegate; } _showLegend;
    struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _valid *_listener; struct shared_ptr<std::atomic<bool>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } x0; struct function<void (bool)> { struct __value_func<void (bool)> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } _delegate; } _showMotionVectors;
    BOOL _enableNavCameraOverviewFraming;
    struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _valid *_listener; struct shared_ptr<std::atomic<bool>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } x0; struct function<void (bool)> { struct __value_func<void (bool)> { union type { unsigned char __data[24]; } __buf_; void *__f_; } __f_; } _delegate; } _enableValidations;
    BOOL _disableFrameBlending;
    BOOL _navCameraTextConsoleCreated;
    BOOL _navCameraOverlayConsoleCreated;
    BOOL _insetCurrentRoadLabel;
    BOOL _analyticFramingEnabled;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _previousCameraFrame;
    struct vector<gm::Matrix<float, 2, 1>, std::allocator<gm::Matrix<float, 2, 1>>> { void *__begin_; void *__end_; void *__cap_; } _movementSamplePoints;
    struct vector<gm::Matrix<double, 2, 1>, std::allocator<gm::Matrix<double, 2, 1>>> { void *__begin_; void *__end_; void *__cap_; } _movementSamples;
    int _samplingStrategy;
    struct MovementSettings { double targetWeight; double headingWeight; double pitchWeight; double distanceFromTargetWeight; } _movementSettings;
    struct CameraFramingDebug { struct vector<TargetConstraintDebug, std::allocator<TargetConstraintDebug>> { struct TargetConstraintDebug *__begin_; struct TargetConstraintDebug *__end_; struct TargetConstraintDebug *__cap_; } _targetConstraints; BOOL isFullyFramed; struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } peripheralPoints[4]; } _framingDebug;
}

@property (weak, nonatomic) VKScreenCanvas<VKInteractiveMap> *screenCanvas;
@property (weak, nonatomic) VKSceneConfiguration *sceneConfiguration;
@property (nonatomic) double zoomScale;
@property (nonatomic) struct VKEdgeInsets { float top; float left; float bottom; float right; } clientFramingInsets;
@property (readonly, nonatomic) struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } puckCoordinate;
@property (nonatomic) struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } viewableScreenRect;
@property (nonatomic) BOOL enableDynamicFrameRate;
@property (readonly, nonatomic) struct { double x0; double x1; } centerCoordinate;
@property (readonly, nonatomic) double distanceFromCenterCoordinate;
@property (readonly, nonatomic) double heading;
@property (readonly, nonatomic) double pitch;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property (readonly, nonatomic) double altitude;
@property (readonly, nonatomic) double minPitch;
@property (readonly, nonatomic) double maxPitch;
@property (readonly, nonatomic) BOOL isPitched;
@property (readonly, nonatomic) BOOL isRotated;
@property (readonly, nonatomic) BOOL isFullyPitched;
@property (readonly, nonatomic) void *mapDataAccess;
@property (readonly, nonatomic) struct AnimationRunner { struct MapEngine *x0; } *animationRunner;
@property (readonly, nonatomic) struct RunLoopController { struct MapEngine *x0; long long x1; } *runLoopController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (double)topDownMinimumZoomLevel;
- (void)_setNeedsUpdate;
- (void)transferGestureState:(id)a0;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(BOOL)a1;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (double)currentZoomLevel;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; })a0;
- (void)zoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (double)minimumZoomLevel;
- (void)stopSnappingAnimations;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)tapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updateWithTimestamp:(double)a0 withContext:(void *)a1;
- (BOOL)snapMapIfNecessary:(BOOL)a0;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (BOOL)usesVKCamera;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)isAnimating;
- (void)stopAnimations;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updateState;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (double)maximumZoomLevel;
- (BOOL)canZoomOutForTileSize:(long long)a0;
- (void)setVkCamera:(id)a0;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)canEnter3DMode;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (long long)tileSize;
- (void)dealloc;
- (float)idealPitchForNormalizedZoomLevel:(float)a0;
- (void)stop;
- (float)maxPitchForNormalizedZoomLevel:(float)a0;
- (id)init;
- (void)_updateClipPlanes;
- (float)minPitchForNormalizedZoomLevel:(float)a0;
- (float)maximumNormalizedZoomLevel;
- (BOOL)canZoomInForTileSize:(long long)a0;
- (void)canvasDidLayout;
- (void)setCameraFrame:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })a0;
- (id).cxx_construct;
- (void)rotateTo:(double)a0 animated:(BOOL)a1;
- (float)minimumNormalizedZoomLevel;
- (void).cxx_destruct;
- (void)populateDebugNode:(void *)a0 withOptions:(const void *)a1;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })cameraFrame;
- (BOOL)isRotateEnabled;
- (BOOL)isGesturing;
- (BOOL)isPitchEnabled;
- (BOOL)_canZoomIn;
- (BOOL)_canZoomOut;
- (void)HandleFrequencyReset:(id)a0;
- (struct array<unsigned int, 4UL> { unsigned int x0[4]; })_findPeripheralPoints:(const void *)a0 rotation:(struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; })a1;
- (void)_updateSprings:(double)a0;
- (struct Matrix<double, 2, 1> { double x0[2]; })puckScreenPoint;
- (void)_addAdditionalRoutePointsToFrameToList:(void *)a0;
- (BOOL)_addStepToFraming:(unsigned long long)a0 forRoute:(id)a1;
- (BOOL)_addStepToFraming:(unsigned long long)a0 forRoute:(id)a1 untilDistance:(float)a2 fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })a3;
- (void)_addWaypointToFramingAtStep:(unsigned long long)a0 forRoute:(id)a1;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; })_calculateCoordinatesToFrameBounds;
- (double)_calculateHeadingArcSpeed;
- (double)_calculateMaxPixelChangeAndUpdateCorners;
- (struct Matrix<double, 2, 1> { double x0[2]; })_calculateMovementVector:(const void *)a0 fromFrame:(const void *)a1;
- (double)_calculatePuckPointChange;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })_calculateReferenceFrameForMotion;
- (double)_calculateTargetPointChange;
- (void)_clearDebugConsole:(int)a0;
- (void)_convertCameraOrigin:(struct Matrix<double, 3, 1> { double x0[3]; })a0 andForward:(struct Matrix<double, 3, 1> { double x0[3]; })a1 toDistance:(void *)a2 andTarget:(void *)a3;
- (struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })_coordinateForGeoLocation:(struct { double x0; double x1; double x2; })a0;
- (struct DebugTreeNode { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x1; struct vector<gdc::DebugTreeNode, std::allocator<gdc::DebugTreeNode>> { struct DebugTreeNode *x0; struct DebugTreeNode *x1; struct DebugTreeNode *x2; } x2; struct vector<gdc::DebugTreeProperty, std::allocator<gdc::DebugTreeProperty>> { struct DebugTreeProperty *x0; struct DebugTreeProperty *x1; struct DebugTreeProperty *x2; } x3; })_createDynamicFrameRateDebugNode;
- (struct DebugTreeNode { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x1; struct vector<gdc::DebugTreeNode, std::allocator<gdc::DebugTreeNode>> { struct DebugTreeNode *x0; struct DebugTreeNode *x1; struct DebugTreeNode *x2; } x2; struct vector<gdc::DebugTreeProperty, std::allocator<gdc::DebugTreeProperty>> { struct DebugTreeProperty *x0; struct DebugTreeProperty *x1; struct DebugTreeProperty *x2; } x3; })_createMainDebugNode;
- (struct DebugTreeNode { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x1; struct vector<gdc::DebugTreeNode, std::allocator<gdc::DebugTreeNode>> { struct DebugTreeNode *x0; struct DebugTreeNode *x1; struct DebugTreeNode *x2; } x2; struct vector<gdc::DebugTreeProperty, std::allocator<gdc::DebugTreeProperty>> { struct DebugTreeProperty *x0; struct DebugTreeProperty *x1; struct DebugTreeProperty *x2; } x3; })_createStyleDebugNode;
- (float)_currentRoadSignOffset;
- (id)_debugTextForPage:(unsigned long long)a0;
- (id)_detachedGestureController;
- (void)_endUpdateWithTimestamp:(double)a0 frameStamp:(unsigned long long)a1;
- (void)_frameCameraWithHeading:(double)a0 pitch:(double)a1 targetPuckOnBothAxes:(BOOL)a2;
- (struct Matrix<double, 3, 1> { double x0[3]; })_frameCameraWithViewRotation:(struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; })a0 firstWorldPoint:(struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })a1 firstTargetScreenX:(double)a2 secondWorldPoint:(struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })a3 secondTargetScreenY:(double)a4 thirdWorldPoint:(struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })a5 thirdTargetScreenXorY:(double)a6 frameThirdXAxis:(BOOL)a7;
- (struct Matrix<double, 3, 1> { double x0[3]; })_frameCoordinates:(const void *)a0 targetingPuckOnBothAxes:(const void *)a1 viewRot:(struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; })a2;
- (struct Matrix<double, 3, 1> { double x0[3]; })_frameCoordinates:(const void *)a0 viewRot:(struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; })a1;
- (struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> { void *x0; struct __shared_weak_count *x1; })_getActiveSceneManager;
- (BOOL)_hasRunningAnimation;
- (BOOL)_isAnalyticalFramingEnabled;
- (BOOL)_isDynamicFrameRateActive;
- (BOOL)_isNavCameraInOverviewMode;
- (BOOL)_isOverviewFramingEnabled;
- (double)_movementKernelDelta;
- (double)_normalizedZoomLevelForDisplayZoomLevel:(double)a0;
- (void)_populateDebugNode:(void *)a0 forFrame:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })a1;
- (struct Matrix<double, 2, 1> { double x0[2]; })_puckScreenPoint;
- (void)_recordTrackingSpeedAtTimestamp:(double)a0;
- (void)_setDetached:(BOOL)a0;
- (void)_setNavCameraIsDetached:(BOOL)a0;
- (void)_setNavCameraTransitionComplete:(BOOL)a0;
- (void)_setupMovementSamplePoints;
- (BOOL)_shouldLockPuckScreenCoords;
- (void)_showMotionVectorsWithDebugConsole:(void *)a0;
- (void)_snapHeading;
- (void)_snapPitch;
- (struct pair<double, double> { double x0; double x1; })_solveEyeTargetingPoints:(const void *)a0 targetScreenCoords:(const void *)a1 projection:(const struct ProjectionConfig { double x0[2]; double x1[2]; } *)a2 axis:(unsigned int)a3;
- (BOOL)_springsNeedUpdate;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })_testingCameraFrame;
- (void)_updateCameraLimits;
- (void)_updateDebugOverlay;
- (void)_updateDebugText;
- (void)_updateDidNavCameraTransition;
- (void)_updateForAnimatedEdgeInsets;
- (void)_updateLabelMetrics;
- (void)_updateNavCameraState;
- (void)_updateObserverCouldZoomIn:(BOOL)a0 couldZoomOut:(BOOL)a1;
- (void)_updateRouteSinuosity;
- (void)_updateSceneQuery;
- (void)_updateSceneStyles:(BOOL)a0 updatePitchLimitOnly:(BOOL)a1;
- (void)_updateStyles;
- (void)_updateZoomScaleLimts;
- (struct Matrix<double, 3, 1> { double x0[3]; })_viewCoordinatesForCoordinates:(const void *)a0 rotation:(struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; })a1;
- (void)animateCameraWithDuration:(float)a0 fromFrame:(const void *)a1 completionHandler:(id /* block */)a2;
- (void)animateSelectiveReframingCameraWithDuration:(float)a0 fromFrame:(const void *)a1 completionHandler:(id /* block */)a2;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })calculateHeading;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; })calculateViewableScreenRect;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; })calculateViewableScreenRectForEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0;
- (unsigned char)cameraHeadingType;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })currentCameraFrame;
- (long long)defaultDisplayRate;
- (long long)displayRate;
- (double)distanceToManeuver:(unsigned long long)a0 fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })a1;
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; })a0 device:(void *)a1 mapDataAccess:(void *)a2 animationRunner:(struct AnimationRunner { struct MapEngine *x0; } *)a3 runLoopController:(struct RunLoopController { struct MapEngine *x0; long long x1; } *)a4 cameraDelegate:(id)a5;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })maxCameraPitch;
- (double)maxZoomHeight;
- (double)maxZoomScale;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })minCameraPitch;
- (double)minZoomHeight;
- (double)minZoomScale;
- (void)navContextCameraHeadingOverrideDidChange:(id)a0;
- (void)navContextDebugFlagsDidChange:(id)a0;
- (void)navContextStateDidChange:(id)a0;
- (void)pitchTo:(double)a0 animated:(BOOL)a1;
- (void)projectCoordinate:(struct { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; } *)a1;
- (struct optional<double> { union { char x0; double x1; } x0; BOOL x1; })puckAnimator:(id)a0 getElevationWithCoordinate:(const void *)a1;
- (void)puckAnimator:(id)a0 runAnimation:(id)a1;
- (void)puckAnimator:(id)a0 updatedPosition:(const void *)a1 course:(const void *)a2 polylineCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })a3;
- (void)puckAnimatorDidStop:(id)a0;
- (void)resetSpringsToResting;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })restingCameraFrameWithZoomScale:(float)a0;
- (void)returnToPuck;
- (void)returnToTrackingWithDelay:(double)a0 resetZoom:(BOOL)a1;
- (struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })routeCoordinateAtDistance:(double)a0;
- (struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })routeLocationAtDistance:(double)a0 fromManeuver:(unsigned long long)a1;
- (struct VKNavCameraFrameTestResult { BOOL x0; BOOL x1; })runValidations;
- (void)setEdgeInsetsAnimating:(BOOL)a0;
- (void)setNavContext:(id)a0;
- (void)startIgnoreStyleChangeTimer;
- (void)startWithPounce:(BOOL)a0 startLocation:(struct { double x0; double x1; })a1 startCourse:(double)a2 pounceCompletionHandler:(id /* block */)a3;
- (void)stopIgnoreStyleChange;
- (void)stylesheetDidChange;
- (void)stylesheetDidReload;
- (BOOL)testManeuverIsInsideViewableRegion;
- (BOOL)testPuckIsInsideViewableRegion;
- (void)updateCameraState;
- (void)updateDistanceFromTargetAndScreenPositionSpring;
- (void)updateLocation:(const void *)a0 andCourse:(const void *)a1;
- (void)updateManeuversToFrame;
- (void)updatePointsToFrame;
- (void)updatePuckOffset:(BOOL)a0;
- (void)updateSpringsForFramingCamera;
- (void)updateSpringsForTrackingCamera;
- (BOOL)wantsTimerTick;

@end
