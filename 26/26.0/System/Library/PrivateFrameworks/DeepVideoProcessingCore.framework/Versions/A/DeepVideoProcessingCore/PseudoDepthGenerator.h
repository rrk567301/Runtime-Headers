@class NSString, ImageProcessUtility, Backwarp_Ext;
@protocol MTLComputePipelineState, MTLTexture, MTLBuffer;

@interface PseudoDepthGenerator : VEMetalBase {
    Backwarp_Ext *_backwarp;
    ImageProcessUtility *_imageProcessUtility;
    id<MTLComputePipelineState> _forwarpLossTrackKernel;
    id<MTLComputePipelineState> _convert2depthKernel;
    id<MTLComputePipelineState> _combineTwoSideDepthKernel;
    id<MTLComputePipelineState> _tileFlowAveKernel;
    id<MTLComputePipelineState> _propagateDepthKernel;
    id<MTLComputePipelineState> _combineStillMapKernel;
    id<MTLComputePipelineState> _extendDepthInStillRegionKernel;
    id<MTLComputePipelineState> _fillHrConflictMapKernel;
    id<MTLComputePipelineState> _holeMapKernel;
    id<MTLComputePipelineState> _flowFailureDetectionKernel;
    id<MTLComputePipelineState> _correctFlowWithSameBaseFlowKernel;
    id<MTLComputePipelineState> _collectWrongFlowStatsKernel;
    id<MTLComputePipelineState> _initializeTextureKernel;
    id<MTLComputePipelineState> _initializeTexture_oneChannelKernel;
    BOOL _interleaved;
    struct { struct __CVBuffer *upscaledFlow; struct __CVBuffer *backwarpLoss; struct __CVBuffer *failureMask; struct __CVBuffer *holeMap; id<MTLTexture> upscaledFlowTexture; id<MTLTexture> backwarpLossTexture; id<MTLTexture> failureMaskTexture; id<MTLTexture> holeMapTexture; id<MTLBuffer> forwarpBuffer; } _forwardStorage;
    struct { struct __CVBuffer *upscaledFlow; struct __CVBuffer *backwarpLoss; struct __CVBuffer *failureMask; struct __CVBuffer *holeMap; id<MTLTexture> upscaledFlowTexture; id<MTLTexture> backwarpLossTexture; id<MTLTexture> failureMaskTexture; id<MTLTexture> holeMapTexture; id<MTLBuffer> forwarpBuffer; } _backwardStorage;
    struct __CVBuffer { } *_correctedForwardFlow;
    struct __CVBuffer { } *_upscaledCorrectedForwardFlow;
    struct __CVBuffer { } *_correctedForwardFlowHoleMap;
    id<MTLBuffer> _correctedForwardFlowForwarpBuffer;
    id<MTLTexture> _correctedForwardFlowHoleMapTexture;
    id<MTLTexture> _upscaledCorrectedForwardFlowTexture;
    id<MTLTexture> _correctedForwardFlowTexture;
    struct __CVBuffer { } *_dsFlowEdge;
    struct __CVBuffer { } *_fgFlow;
    struct __CVBuffer { } *_bgFlow;
    struct __CVBuffer { } *_partialForwardDepth;
    struct __CVBuffer { } *_partialBackwardDepth;
    struct __CVBuffer { } *_partialTwoSideDepth;
    struct __CVBuffer { } *_hrStillMap;
    struct __CVBuffer { } *_dsConflictMap;
    struct __CVBuffer { } *_extendedConflictMap;
    id<MTLTexture> _dsFlowEdgeTexture;
    id<MTLTexture> _fgFlowTexture;
    id<MTLTexture> _bgFlowTexture;
    id<MTLTexture> _partialForwardDepthTexture;
    id<MTLTexture> _partialBackwardDepthTexture;
    id<MTLTexture> _partialTwoSideDepthTexture;
    id<MTLTexture> _hrStillMapTexture;
    id<MTLTexture> _dsConflictMapTexture;
    id<MTLTexture> _extendedConflictMapTexture;
    struct __CVBuffer { } *_prevBackwardDepth;
    struct __CVBuffer { } *_prevBack4XFlow;
    struct __CVBuffer { } *_prevFlowFailureMask;
    id<MTLTexture> _prevBackwardDepthTexture;
    id<MTLTexture> _prevBack4xFlowTexture;
    id<MTLTexture> _prevFlowFailureMaskTexture;
    int _same_scene_frame_count;
}

@property (nonatomic) BOOL previousFrameAvailable;
@property (nonatomic) BOOL sceneChange;
@property (nonatomic) BOOL pseudoDepth;
@property (nonatomic) BOOL flowFailureDetection;
@property (retain, nonatomic) NSString *debugImage;

- (void)releaseResources;
- (void)dealloc;
- (id)initWithDevice:(id)a0 commandQueue:(id)a1;
- (void).cxx_destruct;
- (BOOL)setupMetal;
- (long long)PseudoDepthFromBackwardFlow:(id)a0 forwardFlow:(id)a1 fullresFlow:(id)a2 depth:(id)a3 prevBackFlow:(id)a4 flowErrorMask:(id)a5 interleave_factor:(unsigned long long)a6 timeScale:(float)a7 downscale_factor:(unsigned long long)a8;
- (void)releaseStorage:(struct { struct __CVBuffer *x0; struct __CVBuffer *x1; struct __CVBuffer *x2; struct __CVBuffer *x3; id x4; id x5; id x6; id x7; id x8; } *)a0;
- (long long)allocateBufferAndTextureWithFlowWidth:(unsigned long long)a0 flowHeight:(unsigned long long)a1 depthWidth:(unsigned long long)a2 depthHeight:(unsigned long long)a3 interleaveFactor:(unsigned long long)a4;
- (long long)allocateDepthInternalBuffersWithFlowWidth:(unsigned long long)a0 flowHeight:(unsigned long long)a1 depthWidth:(unsigned long long)a2 depthHeight:(unsigned long long)a3 interleaveFactor:(unsigned long long)a4;
- (long long)allocateFlowOnlyBufferWithFlowWidth:(unsigned long long)a0 flowHeight:(unsigned long long)a1 depthWidth:(unsigned long long)a2 depthHeight:(unsigned long long)a3 interleaveFactor:(unsigned long long)a4;
- (long long)allocateInternalStorage:(struct { struct __CVBuffer *x0; struct __CVBuffer *x1; struct __CVBuffer *x2; struct __CVBuffer *x3; id x4; id x5; id x6; id x7; id x8; } *)a0 flowWidth:(unsigned long long)a1 flowHeight:(unsigned long long)a2 depthWidth:(unsigned long long)a3 depthHeight:(unsigned long long)a4 interleaveFactor:(unsigned long long)a5;
- (long long)approximateDepthWithBackwarpLossFromFirstImage:(struct __CVBuffer { } *)a0 secondImage:(struct __CVBuffer { } *)a1 fullresFlow:(struct __CVBuffer { } *)a2 depth:(struct __CVBuffer { } *)a3 interleavFactor:(unsigned long long)a4 timeScale:(float)a5;
- (long long)calculateBackwarpErrorFromDownscaleFirst:(id)a0 downscaleSecond:(id)a1 backwardFlow:(id)a2 forwardFlow:(id)a3 backwardStorage:(struct { struct __CVBuffer *x0; struct __CVBuffer *x1; struct __CVBuffer *x2; struct __CVBuffer *x3; id x4; id x5; id x6; id x7; id x8; } *)a4 forwardStorage:(struct { struct __CVBuffer *x0; struct __CVBuffer *x1; struct __CVBuffer *x2; struct __CVBuffer *x3; id x4; id x5; id x6; id x7; id x8; } *)a5 interleave_factor:(unsigned long long)a6 timeScale:(float)a7;
- (BOOL)createModules;
- (id)createOutputBufferWidth:(unsigned long long)a0 height:(unsigned long long)a1 channels:(unsigned long long)a2;
- (long long)deriveDepthFromFlowDownscaleFirstImage:(id)a0 downscaleSecondImage:(id)a1 backwardFlow:(id)a2 forwardFlow:(id)a3 destination:(id)a4 interleave_factor:(unsigned long long)a5 timeScale:(float)a6;
- (long long)deriveDepthFromForwardFlow:(id)a0 backwardFlow:(id)a1 Destination:(id)a2;
- (long long)encodeCombineTwoSideDepthToCommandBuffer:(id)a0 forwardDepth:(id)a1 backwarpDepth:(id)a2 destination:(id)a3;
- (long long)encodeCorrectFlowToCommandBuffer:(id)a0 input:(id)a1 forwardFlow:(id)a2 inputFlowFailureMask:(id)a3 forwardFlowFailureMask:(id)a4 remainedWrongFlow:(id)a5 outputFlow:(id)a6 isBackwardFlow:(BOOL)a7;
- (long long)encodeExtendDepthInStillRegionToCommandBuffer:(id)a0 inputDepthMap:(id)a1 stillMap:(id)a2 output:(id)a3;
- (long long)encodeFillHrConflictMapToCommandBuffer:(id)a0 inputDepthMap:(id)a1 extendedMap:(id)a2 stillMap:(id)a3 output:(id)a4;
- (long long)encodeFlowFailureMaskGenerationToCommandBuffer:(id)a0 backwardFlow:(id)a1 forwardFlow:(id)a2 backwardFlowError:(id)a3 forwardFlowError:(id)a4 backwardErrorMap:(id)a5 forwardHoleMap:(id)a6 isBackwardFlow:(BOOL)a7;
- (long long)encodeForwarpLossWithTrackToCommandBuffer:(id)a0 input:(id)a1 flow:(id)a2 output:(id)a3;
- (long long)encodeHoleMapToCommandBuffer:(id)a0 fromBuffer:(id)a1 toTexture:(id)a2 inputSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a3;
- (long long)encodeInitialieTextureToCommandBuffer:(id)a0 bestError:(id)a1;
- (long long)encodePropagateDepthToCommandBuffer:(id)a0 flow:(id)a1 fgTile:(id)a2 bgTile:(id)a3 scale:(float)a4 destination:(id)a5;
- (BOOL)encodeSceneChangeDetectionFromFlowFailureMask:(id)a0 effectiveResolution:(struct CGSize { double x0; double x1; })a1;
- (long long)encodeStillForegroundMapToCommandBuffer:(id)a0 backwardFlowConfMap:(id)a1 forwardFlowConfMap:(id)a2 frFlow:(id)a3 output:(id)a4;
- (long long)encodeTilebaseFlowAverageToCommandBuffer:(id)a0 depth:(id)a1 flow:(id)a2 flowEdge:(id)a3 fgTile:(id)a4 bgTile:(id)a5;
- (long long)encodeToCommandBufferConvertDepth:(id)a0 fromBuffer:(id)a1 holeMap:(id)a2 failureMask:(id)a3 toTexture:(id)a4 inputSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a5;
- (long long)flowFailureAndCorrectionFromDownscaleFirstImage:(id)a0 downscaleSecondImage:(id)a1 backwardFlow:(id)a2 forwardFlow:(id)a3 prevBackFlow:(id)a4 remainedErrorMask:(id)a5 effectiveResolution:(struct CGSize { double x0; double x1; })a6 interleave_factor:(unsigned long long)a7 timeScale:(float)a8 warmup:(BOOL)a9;
- (long long)flowFailureDetectionAndCorrectionFromForwardFlow:(id)a0 backwardFlow:(id)a1 inputFlow:(id)a2 backwardStorage:(struct { struct __CVBuffer *x0; struct __CVBuffer *x1; struct __CVBuffer *x2; struct __CVBuffer *x3; id x4; id x5; id x6; id x7; id x8; } *)a3 forwardStorage:(struct { struct __CVBuffer *x0; struct __CVBuffer *x1; struct __CVBuffer *x2; struct __CVBuffer *x3; id x4; id x5; id x6; id x7; id x8; } *)a4 interleaveFactor:(unsigned long long)a5 timeScale:(float)a6 remainedErrorMask:(id)a7 warmup:(BOOL)a8;
- (id)initWithMode;
- (long long)propagatePartialDepth:(id)a0 downscaleFlow:(id)a1 fullResFlow:(id)a2 downscaleWidth:(unsigned long long)a3 downscaleHeight:(unsigned long long)a4 downscale_factor:(float)a5 interleaveFactor:(unsigned long long)a6 commandBuffer:(id)a7 fullresDepth:(id)a8;
- (void)releaseDepthInternalBuffers;
- (long long)saveBackwardFlow:(id)a0 prevBackwardFlow:(id)a1;
- (long long)saveInternalStateWithCommandBuffer:(id)a0;
- (long long)threeFramePseudoDepthFromForwardFlow:(id)a0 backwardFlow:(id)a1 fullresFlow:(id)a2 destination:(id)a3 flowErrorMask:(id)a4 interleaveFactor:(unsigned long long)a5 timeScale:(float)a6 downscaleFactor:(float)a7 commandBuffer:(id)a8;
- (BOOL)updateUsePreviousInfoFromIsFirstFrame:(BOOL)a0 isLastFrame:(BOOL)a1 isRandomAccessMode:(BOOL)a2 effectiveResolution:(struct CGSize { double x0; double x1; })a3 isInitialization:(BOOL)a4;

@end
