@class TUCall, TUCallProviderManager, TUCallFilterController, NSObject, TUCallServicesInterface, TUAudioDeviceController, NSString, TUDelegateController, TUGameOverlayController, CNContactStore, TUVideoDeviceController, NSArray, TURouteController, TUNeighborhoodActivityConduit, TUConversationManager;
@protocol TUFeatureFlags, TUUIDataSource, TUCallContainerPrivate, TUCallCenterDelegate, OS_dispatch_queue;

@interface TUCallCenter : NSObject <TUBargeCallContainer, TUCallContainer>

@property (class, readonly, nonatomic) TUCallCenter *sharedInstance;

@property (readonly, copy) NSArray *bargeCalls;
@property (readonly, nonatomic) TUCall *frontmostBargeCall;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) TUDelegateController<TUCallCenterDelegate> *delegateController;
@property (readonly, nonatomic) id<TUFeatureFlags> featureFlags;
@property (retain, nonatomic) TUCallServicesInterface *callServicesInterface;
@property (retain, nonatomic) TUAudioDeviceController *audioDeviceController;
@property (retain, nonatomic) TUVideoDeviceController *videoDeviceController;
@property (retain, nonatomic) TURouteController *routeController;
@property (retain, nonatomic) TURouteController *pairedHostDeviceRouteController;
@property (retain, nonatomic) TUCallFilterController *callFilterController;
@property (retain, nonatomic) TUNeighborhoodActivityConduit *neighborhoodActivityConduit;
@property (retain, nonatomic) CNContactStore *contactStore;
@property (retain, nonatomic) TUCallProviderManager *providerManager;
@property (retain, nonatomic) TUGameOverlayController *gameOverlayController;
@property (nonatomic) struct CGSize { double width; double height; } localLandscapeAspectRatio;
@property (nonatomic) struct CGSize { double width; double height; } localPortraitAspectRatio;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } accessorLock;
@property (readonly, nonatomic) BOOL shouldPullRelayingCalls;
@property (copy, nonatomic) id /* block */ disconnectCallPreflight;
@property (readonly, nonatomic) id<TUCallContainerPrivate> callContainer;
@property (copy, nonatomic) id /* block */ launchAppForJoinRequestBlock;
@property (copy, nonatomic) id /* block */ isOnenessActiveBlock;
@property (retain, nonatomic) TUConversationManager *conversationManager;
@property (retain, nonatomic) id<TUUIDataSource> uiDataSource;
@property (readonly, nonatomic) BOOL canMergeCalls;
@property (readonly, nonatomic, getter=isAddCallAllowed) BOOL addCallAllowed;
@property (readonly, nonatomic, getter=isAmbiguous) BOOL ambiguous;
@property (readonly, nonatomic, getter=isEndAndAnswerAllowed) BOOL endAndAnswerAllowed;
@property (readonly, nonatomic, getter=isHoldAndAnswerAllowed) BOOL holdAndAnswerAllowed;
@property (readonly, copy, nonatomic) NSArray *currentCalls;
@property (readonly, copy, nonatomic) NSArray *currentVideoCalls;
@property (readonly, copy, nonatomic) NSArray *currentAudioAndVideoCalls;
@property (readonly, copy, nonatomic) NSArray *incomingCalls;
@property (readonly, copy, nonatomic) NSArray *displayedCalls;
@property (readonly, copy, nonatomic) NSArray *displayedAudioAndVideoCalls;
@property (readonly, copy, nonatomic) NSArray *conferenceParticipantCalls;
@property (readonly, copy, nonatomic) NSArray *callsHostedElsewhere;
@property (readonly, copy, nonatomic) NSArray *callsWithAnEndpointElsewhere;
@property (readonly, copy, nonatomic) NSArray *callsHostedOrAnEndpointElsewhere;
@property (readonly, copy, nonatomic) NSArray *callsOnDefaultPairedDevice;
@property (readonly, nonatomic) TUCall *incomingCall;
@property (readonly, nonatomic) TUCall *incomingVideoCall;
@property (readonly, nonatomic) TUCall *activeVideoCall;
@property (readonly, nonatomic) TUCall *currentVideoCall;
@property (readonly, nonatomic) TUCall *screeningCall;
@property (readonly, nonatomic) TUCall *pendingUpgradeCall;
@property (readonly, nonatomic) unsigned long long currentCallCount;
@property (readonly, nonatomic) unsigned long long currentVideoCallCount;
@property (readonly, nonatomic) unsigned long long currentAudioAndVideoCallCount;
@property (readonly, nonatomic) unsigned long long callCountOnDefaultPairedDevice;
@property (readonly, nonatomic) BOOL hasCurrentCalls;
@property (readonly, nonatomic) BOOL hasCurrentAudioCalls;
@property (readonly, nonatomic) BOOL hasCurrentVideoCalls;
@property (readonly, nonatomic) BOOL anyCallIsHostedOnCurrentDevice;
@property (readonly, nonatomic) BOOL anyCallIsEndpointOnCurrentDevice;
@property (readonly, copy, nonatomic) NSArray *currentCallGroups;
@property (readonly, copy, nonatomic) NSArray *currentAudioAndVideoCallGroups;
@property (readonly, copy, nonatomic) NSArray *callGroupsOnDefaultPairedDevice;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)isSimultaneousVoiceAndDataSupportedForDialRequest:(id)a0;
+ (id)callCenterWithQueue:(id)a0 server:(id)a1 shouldRegister:(BOOL)a2;
+ (id)sharedContactStore;
+ (id)callCenterWithQueue:(id)a0;
+ (BOOL)_supportsJoiningConversationWithRequest:(id)a0 featureFlags:(id)a1 supportsConversations:(BOOL)a2;
+ (id)sharedInstanceWithQueue:(id)a0 server:(id)a1 shouldRegister:(BOOL)a2;
+ (id)callCenterWithQueue:(id)a0 server:(id)a1 shouldRegister:(BOOL)a2 featureFlags:(id)a3;
+ (BOOL)supportsJoiningConversationWithRequest:(id)a0;

- (BOOL)anyCallPassesTest:(id /* block */)a0;
- (id)bargeCallsPassingTest:(id /* block */)a0;
- (BOOL)allCallsAreOfService:(int)a0;
- (id)callWithCallUUID:(id)a0;
- (id)displayedCall;
- (id)_allCalls;
- (id)callWithStatus:(int)a0;
- (void)joinConversationWithRequest:(id)a0;
- (id)callPassingTest:(id /* block */)a0;
- (id)bargeCallWithUniqueProxyIdentifier:(id)a0;
- (void)dialWithRequest:(id)a0 completion:(id /* block */)a1;
- (void)deleteCustomGreetingForAccountUUID:(id)a0;
- (void)applicationWillLaunchForStartCallInteraction:(id)a0;
- (id)callPassingTest:(id /* block */)a0 sortedUsingComparator:(id /* block */)a1;
- (void)saveCustomGreeting:(id)a0 forAccountUUID:(id)a1;
- (void)addDelegate:(id)a0 queue:(id)a1;
- (void)activateInCallUIWithActivityContinuationIdentifier:(id)a0;
- (unsigned long long)_callGroupCountForCall:(id)a0 withCall:(id)a1;
- (void)shouldAllowRingingCallStatusIndicator:(BOOL)a0;
- (void)disconnectCurrentCallAndActivateHeld;
- (id)initWithQueue:(id)a0;
- (void)sendReceptionistReply:(id)a0;
- (void)startTransmissionForBargeCall:(id)a0 sourceIsHandsfreeAccessory:(BOOL)a1;
- (oneway void)performTranslationRequest:(id)a0 completion:(id /* block */)a1;
- (unsigned long long)countOfCallsPassingTest:(id /* block */)a0;
- (void)ungroupCall:(id)a0;
- (id)_allCallsWithStatus:(int)a0;
- (void)pullHostedCallsFromPairedHostDevice;
- (void)registerWithCompletionHandler:(id /* block */)a0;
- (BOOL)isSharePlayActiveForTelephonyCall:(id)a0;
- (void)endHeldAndAnswerCall:(id)a0;
- (void)answerCall:(id)a0;
- (void)dealloc;
- (void)pullCallFromClientUsingHandoffActivityUserInfo:(id)a0 completion:(id /* block */)a1;
- (id)frontmostAudioOrVideoCall;
- (id)initWithQueue:(id)a0 wantsCallNotifications:(BOOL)a1;
- (void)createSplitSessionWithDeviceMediaRouteIdentifier:(id)a0 completion:(id /* block */)a1;
- (void)resumeCall:(id)a0;
- (id)callMatchingConversationRequest:(id)a0;
- (void)setLiveVoicemailUnavailableReason:(long long)a0 forCall:(id)a1;
- (void)disconnectCall:(id)a0;
- (oneway void)performSmartHoldingRequest:(id)a0 completion:(id /* block */)a1;
- (id)customGreetingForAccountUUID:(id)a0;
- (void)answerOrJoinCall:(id)a0;
- (void)enteredBackgroundForAllCalls;
- (void)requestVideoUpgradeForCall:(id)a0;
- (id)videoCallWithStatus:(int)a0;
- (void)answerWithRequest:(id)a0;
- (void)holdActiveAndAnswerCall:(id)a0;
- (void)pushRelayingCallsToHost;
- (id)conferenceCall;
- (void)disconnectCurrentCall;
- (BOOL)_existingCallsAllowDialRequest:(id)a0 allowVoiceWithData:(BOOL)a1;
- (void)handleActionForWiredHeadsetMiddleButtonPressWithSourceIdentifier:(id)a0 allowBluetoothAnswerWithoutDowngrade:(BOOL)a1 shouldForceDowngradeToAudio:(BOOL)a2;
- (void)shouldSuppressInCallStatusBar:(BOOL)a0;
- (void)fetchTUUIXPCDataSource;
- (void)unholdCall:(id)a0;
- (void)screenWithRequest:(id)a0;
- (void)stopTransmissionForBargeCall:(id)a0 sourceIsHandsfreeAccessory:(BOOL)a1;
- (id)callsPassingTest:(id /* block */)a0;
- (id)initWithQueue:(id)a0 wantsCallNotifications:(BOOL)a1 featureFlags:(id)a2;
- (void)removeDelegate:(id)a0;
- (id)_splitSessionErrorWithCode:(long long)a0 underlyingError:(id)a1;
- (void)handleActionForWiredHeadsetMiddleButtonPress;
- (BOOL)isTakingCallsPrivateAllowed;
- (void)_preflightDisconnectForCalls:(id)a0 withCompletion:(id /* block */)a1;
- (id)initWithQueue:(id)a0 featureFlags:(id)a1;
- (BOOL)isSendToVoicemailAllowed;
- (void)endHeldAndAnswerWithRequest:(id)a0;
- (id)getCurrentCallsToDisconnect;
- (void)disconnectAllCalls;
- (void)launchAppForDialRequest:(id)a0 completion:(id /* block */)a1;
- (id)init;
- (void)startReceptionistReply;
- (id)frontmostCall;
- (id)displayedCallFromCalls:(id)a0;
- (void)pullRelayingGFTCallsFromClientIfNecessary;
- (void)sendFieldModeDigits:(id)a0 forProvider:(id)a1;
- (id)callsWithGroupUUID:(id)a0;
- (id)callForConversationWithGroupUUID:(id)a0;
- (void)endActiveOrHeldAndAnswerWithRequest:(id)a0;
- (BOOL)_isEmergencyDialRequest:(id)a0;
- (void)registerAnonymousXPCEndpoint:(id)a0;
- (BOOL)handleWiredHeadsetFlashButtonForBargeCalls;
- (BOOL)handleMediaRemoteCommandForBargeCalls:(unsigned int)a0;
- (void)continueHandoffEligibleConversation;
- (void)updateCall:(id)a0 withAnswerRequest:(id)a1;
- (void)groupCall:(id)a0 withOtherCall:(id)a1;
- (void)pullPersistedChannel:(id /* block */)a0;
- (void)fetchAnonymousXPCEndpoint:(id /* block */)a0;
- (void)disconnectCall:(id)a0 withReason:(int)a1;
- (id)joinConversationWithConversationRequest:(id)a0;
- (id)defaultGreeting;
- (void)handleRedialCommandWhileScreening:(id)a0;
- (BOOL)canDialWithRequest:(id)a0;
- (void)willEnterBackgroundForAllCalls;
- (void)endActiveAndAnswerWithRequest:(id)a0;
- (oneway void)performSmartHoldingRequestWithType:(long long)a0 forCallWithUUID:(id)a1 completion:(id /* block */)a2;
- (BOOL)isDirectCallingCurrentlyAvailableForProvider:(id)a0 isVideo:(BOOL)a1;
- (id)callWithUniqueProxyIdentifier:(id)a0;
- (void)answerCallWithHoldMusic:(id)a0;
- (void)handleHeadsetButtonPressForActiveCalls;
- (BOOL)isRelayCallingSupportedForProvider:(id)a0 isVideo:(BOOL)a1;
- (void)handleMediaRemoteCommand:(unsigned int)a0 completion:(id /* block */)a1;
- (BOOL)isHardPauseAvailable;
- (id)_dialWithRequest:(id)a0 completion:(id /* block */)a1;
- (void)requestVideoUpgradeForCall:(id)a0 originatingUIType:(int)a1;
- (void)answerCall:(id)a0 withSourceIdentifier:(id)a1;
- (void)fetchCurrentCalls;
- (BOOL)_shouldRelayJoinConversationRequest:(id)a0;
- (BOOL)_canDialWithRequest:(id)a0 shouldUseRelay:(BOOL *)a1;
- (void)swapCalls;
- (BOOL)continueHandoffForConversationWithEligibility:(id)a0;
- (void)pushHostedCallsToDestination:(id)a0;
- (void)disconnectAllCallsWithNoPreflight;
- (void)handleActionForWiredHeadsetMiddleButtonLongPress;
- (void)pickRouteForRapportDeviceWithMediaSystemIdentifier:(id)a0 effectiveIdentifier:(id)a1;
- (BOOL)_isCallingAvailableOnSecondaryDeviceWithRelayCallingAvailability:(int)a0 isProviderAvailable:(BOOL)a1 isRelayAllowed:(BOOL)a2 isEmergency:(BOOL)a3 supportsBasebandCalling:(BOOL)a4 shouldUseRelay:(BOOL *)a5 isTelephonyProvider:(BOOL)a6;
- (BOOL)isSwappable;
- (oneway void)_performSmartHoldingRequest:(id)a0 completion:(id /* block */)a1;
- (void)holdAndAnswerIfNeeded:(id)a0;
- (BOOL)allCallsPassTest:(id /* block */)a0;
- (void)performRecordingRequest:(id)a0 completion:(id /* block */)a1;
- (BOOL)launchAppForJoinRequest:(id)a0;
- (void)_handleReceivedCallDTMFUpdate:(id)a0 forCall:(id)a1;
- (id)lastDaemonConnectTime;
- (BOOL)shouldPreferRelayOverDirectSecondaryCallingForProvider:(id)a0 isVideo:(BOOL)a1;
- (BOOL)autoPunchOutBehaviorRequiredForFrontmostCall;
- (BOOL)existingCallsHaveMultipleProviders;
- (id)audioOrVideoCallWithStatus:(int)a0;
- (void)sendUserScoreToRTCReporting:(id)a0 withScore:(int)a1;
- (void)_handleReceivedCaptionUpdate:(id)a0;
- (void)reportLocalPreviewStoppedForCall:(id)a0;
- (void)endActiveAndAnswerCall:(id)a0;
- (void)setTTYType:(int)a0 forCall:(id)a1;
- (BOOL)isMergeable;
- (id)callServicesClientCapabilities;
- (void)pullRelayingCallsFromClient;
- (id)activeConversationForCall:(id)a0 backedByGroupSession:(BOOL)a1;
- (void)handleMediaRemoteCommand:(unsigned int)a0 sourceIdentifier:(id)a1 completion:(id /* block */)a2;
- (void)holdActiveAndAnswerWithRequest:(id)a0;
- (id)audioAndVideoCallsWithStatus:(int)a0;
- (void)pushRelayingCallsToHostWithSourceIdentifier:(id)a0;
- (BOOL)isHoldAllowed;
- (void)enteredForegroundForCall:(id)a0;
- (void)holdCall:(id)a0;
- (id)dialWithRequest:(id)a0;
- (void)disconnectDeviceFromSplitSessionUsingMediaRouteIdentifier:(id)a0 completion:(id /* block */)a1;
- (void)answerCall:(id)a0 withSourceIdentifier:(id)a1 wantsHoldMusic:(BOOL)a2;
- (BOOL)_shouldPreferRelayOverDirectSecondaryCallingForRelayingCallingAvailability:(int)a0 isRelayCallingSupported:(BOOL)a1 isEmergencyCallbackPossible:(BOOL)a2 provider:(id)a3;
- (BOOL)canGroupCall:(id)a0 withCall:(id)a1;
- (id)fetchCurrentCallUpdates;
- (void).cxx_destruct;
- (void)endActiveOrHeldAndAnswerCall:(id)a0;
- (id)callsWithStatus:(int)a0;
- (id)activeConversationForCall:(id)a0;
- (id)resolvedIncomingCall;

@end
