@class BRCClientDatabaseFacade, NSFileProviderDomain, BRCVolume, BRCNamedThrottleManager, NSMutableSet, BRCDesktopAndDocumentsManager, BRCSyncContextProvider, BRCFSUploader, BRCDeadlineScheduler, BRCLocalItemSyncErrorReporter, BRCItemFetcher, BRCReadWriteClientDatabaseFacade, BRCApplyScheduler, BRCDownloadTrackers, BRCServerChangesApplier, BRCClientState, BRCUserNotification, BRCServerPersistedState, BRCFileUnlinker, NSURL, NSNumber, BRCBouncingAnalyzer, BRCFSDownloader, BRCPQLConnection, BRCTapToRadarManager, BRCAccountFacade, BRCThrottleProvider, BRCContainerScheduler, BRCBarrier, BRCAccountHandler, BRCFSImporter, BRCPeriodicSyncInvestigation, NSMutableDictionary, NSString, NSObject, BRCAccountWaitOperation, BRCNotificationManager, BRCReadWriteServerDatabaseFacade, NSHashTable, BRCAnalyticsReporter, BRCRecentsEnumerator, BRCSyncUpScheduler, BRCDiskSpaceReclaimer, BRCFairScheduler, BRCStageRegistry, BRCGlobalProgress, NSDate;
@protocol BRCSyncUpStagingProtocol, BRCXattrStagingProtocol, OS_dispatch_workloop, OS_dispatch_source, BRCZoneAppRetriever, OS_dispatch_queue, BRCDownloadStagingProtocol;

@interface BRCAccountSession : NSObject <BRCCloudDocsAppsObserver, BRCSessionContext, BRCZoneAppRetriever> {
    NSURL *_dbURL;
    NSObject<OS_dispatch_source> *_dbWatcher;
    NSObject<OS_dispatch_queue> *_dbWatcherQueue;
    NSObject<OS_dispatch_queue> *_dbCorruptionQueue;
    NSObject<OS_dispatch_workloop> *_clientTruthWorkloop;
    NSObject<OS_dispatch_workloop> *_serverTruthWorkloop;
    NSObject<OS_dispatch_workloop> *_readOnlyWorkloop;
    int _cloudDocsFD;
    id /* block */ _dbProfilingHook;
    NSHashTable *_miscOperations;
    BOOL _forDBDump;
    BRCNamedThrottleManager *_namedThrottleManager;
    BRCBouncingAnalyzer *_bouncingAnalyzer;
    BRCTapToRadarManager *_tapToRadarManager;
    BRCDesktopAndDocumentsManager *_desktopAndDocumentsManager;
    BRCClientDatabaseFacade *_clientReadDatabaseFacade;
    BRCClientDatabaseFacade *_clientExpensiveReadDatabaseFacade;
    BRCPQLConnection *_clientDB;
    BRCPQLConnection *_serverDB;
    BRCPQLConnection *_readOnlyDB;
    BRCPQLConnection *_expensiveReadOnlyDB;
    BRCClientState *_clientState;
    BRCServerPersistedState *_serverState;
    struct brc_mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } pthread; } _zonesLock;
    struct brc_mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } pthread; } _zonesCreationLock;
    BOOL _resumed;
    NSMutableDictionary *_libraryRowIDsByMangledID;
    NSMutableDictionary *_appLibrariesByRowID;
    NSMutableDictionary *_serverZonesByZoneRowID;
    NSMutableDictionary *_sharedServerZonesByMangledID;
    NSMutableDictionary *_sharedClientZonesByMangledID;
    NSMutableDictionary *_privateServerZonesByID;
    NSMutableDictionary *_privateClientZonesByID;
    BRCFSImporter *_fsImporter;
    BRCServerChangesApplier *_serverChangesApplier;
    NSMutableSet *_extensionXPCClients;
    NSString *_acAccountID;
    NSMutableSet *_xpcClients;
    BOOL _accountIsReady;
    BRCAccountWaitOperation *_accountWaitOperation;
    BOOL _isDBOpened;
    NSNumber *_isInCarry;
}

@property (readonly, nonatomic) BRCClientState *clientState;
@property (readonly, nonatomic) BRCServerPersistedState *serverState;
@property (readonly, nonatomic) unsigned long long databaseIDHash;
@property (readonly, nonatomic) BRCPQLConnection *clientDB;
@property (readonly, nonatomic) BRCPQLConnection *readOnlyDB;
@property (readonly, nonatomic) BRCPQLConnection *expensiveReadOnlyDB;
@property (readonly, nonatomic) BRCPQLConnection *serverDB;
@property (readonly, nonatomic) NSObject<OS_dispatch_workloop> *clientTruthWorkloop;
@property (readonly, nonatomic) NSObject<OS_dispatch_workloop> *serverTruthWorkloop;
@property (readonly, nonatomic) NSObject<OS_dispatch_workloop> *readOnlyWorkloop;
@property (readonly, nonatomic) BRCFSImporter *fsImporter;
@property (readonly, nonatomic) BRCServerChangesApplier *serverChangesApplier;
@property (readonly, nonatomic) NSString *domainID;
@property (readonly, nonatomic) BOOL isOpen;
@property (readonly, nonatomic) NSString *databaseID;
@property (readonly, nonatomic) NSDate *dbCreationDate;
@property (readonly, nonatomic) BRCBarrier *dbLoadingBarrier;
@property (retain, nonatomic) NSString *sessionDirPath;
@property (retain, nonatomic) NSString *cacheDirPath;
@property (readonly, nonatomic) NSString *ubiquityTokenSalt;
@property (readonly, nonatomic) BRCGlobalProgress *globalProgress;
@property (readonly, nonatomic) BRCDeadlineScheduler *defaultScheduler;
@property (readonly, nonatomic) BRCApplyScheduler *applyScheduler;
@property (readonly, nonatomic) BRCContainerScheduler *containerScheduler;
@property (readonly, nonatomic) BRCFairScheduler *fairClientDBScheduler;
@property (readonly, nonatomic) BRCFSUploader *fsUploader;
@property (readonly, nonatomic) BRCFSDownloader *fsDownloader;
@property (readonly, nonatomic) BRCSyncUpScheduler *syncUpScheduler;
@property (readonly, nonatomic) BRCDownloadTrackers *downloadTrackers;
@property (readonly, nonatomic) BRCNotificationManager *notificationManager;
@property (readonly, nonatomic) BRCStageRegistry *stageRegistry;
@property (readonly, nonatomic) BRCDiskSpaceReclaimer *diskReclaimer;
@property (readonly, nonatomic) BRCFileUnlinker *fileUnlinker;
@property (readonly, nonatomic) BRCUserNotification *userNotification;
@property (readonly, nonatomic) BRCRecentsEnumerator *recentsEnumerator;
@property (readonly, nonatomic) BOOL isCancelled;
@property (readonly, nonatomic) BOOL isGreedy;
@property (readonly, nonatomic) BRCAccountWaitOperation *accountWaitOperation;
@property (readonly, nonatomic) BRCAccountHandler *accountHandler;
@property (readonly, nonatomic) NSString *personaIdentifier;
@property (readonly, nonatomic) BOOL isDataSeparated;
@property (readonly, nonatomic) BOOL offline;
@property (retain, nonatomic) NSFileProviderDomain *fpDomain;
@property (readonly, nonatomic) BOOL hasOptimizeStorageEnabled;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *resetQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *dbFixupQueue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BRCNamedThrottleManager *namedThrottleManager;
@property (readonly, nonatomic) BRCBouncingAnalyzer *bouncingAnalyzer;
@property (readonly, nonatomic) BRCPeriodicSyncInvestigation *periodicSyncInvestigation;
@property (readonly, nonatomic) BRCTapToRadarManager *tapToRadarManager;
@property (readonly, nonatomic) id<BRCZoneAppRetriever> zoneAppRetriever;
@property (readonly, nonatomic) BRCAnalyticsReporter *analyticsReporter;
@property (readonly, nonatomic) BRCLocalItemSyncErrorReporter *localItemSyncErrorReporter;
@property (readonly, nonatomic) BRCVolume *volume;
@property (readonly, nonatomic) BRCItemFetcher *itemFetcher;
@property (readonly, nonatomic) BRCSyncContextProvider *syncContextProvider;
@property (readonly, nonatomic) BRCAccountFacade *accountFacade;
@property (readonly, nonatomic) id<BRCDownloadStagingProtocol> downloadStager;
@property (readonly, nonatomic) id<BRCSyncUpStagingProtocol> syncUpStager;
@property (readonly, nonatomic) id<BRCXattrStagingProtocol> xattrStager;
@property (readonly, nonatomic) BRCReadWriteServerDatabaseFacade *serverReadWriteDatabaseFacade;
@property (readonly, nonatomic) BRCReadWriteClientDatabaseFacade *clientReadWriteDatabaseFacade;
@property (readonly, nonatomic) BRCClientDatabaseFacade *clientReadDatabaseFacade;
@property (readonly, nonatomic) BRCClientDatabaseFacade *clientExpensiveReadDatabaseFacade;
@property (readonly, nonatomic) BRCThrottleProvider *throttleProvider;

+ (BOOL)_validateDatabase:(id)a0 baseURL:(id)a1 session:(id)a2 serverTruth:(BOOL)a3 initialVersion:(unsigned int)a4 lastCurrentVersion:(unsigned int)a5 error:(id *)a6;
+ (BOOL)openAndValidateDatabase:(id)a0 serverTruth:(BOOL)a1 session:(id)a2 baseURL:(id)a3 skipControlFiles:(BOOL)a4 initialVersion:(unsigned int *)a5 lastCurrentVersion:(unsigned int *)a6 dbCreationDate:(id *)a7 deviceIDChanged:(BOOL *)a8 error:(id *)a9;
+ (id)sessionForSendingTelemetryAtURL:(id)a0;
+ (void)_registerLastBootIfNeeded:(id)a0 table:(id)a1 skipControlFiles:(BOOL)a2 dbCreationDate:(id *)a3 deviceIDChanged:(BOOL *)a4;
+ (BOOL)upgradeOfflineDB:(id)a0 serverTruth:(BOOL)a1 session:(id)a2 error:(id *)a3;
+ (id)sessionForCheckingInconsistencies;
+ (id)sessionForBackingUpDatabasesAtURL:(id)a0;
+ (id)sessionForDumpingDatabasesAtURL:(id)a0 with:(id)a1;
+ (BOOL)_registerStaticDBFunctions:(id)a0 error:(id *)a1;
+ (BOOL)_openConnection:(id)a0 serverTruth:(BOOL)a1 databaseName:(id)a2 baseURL:(id)a3 initialVersion:(unsigned int *)a4 lastCurrentVersion:(unsigned int *)a5 error:(id *)a6;
+ (BOOL)_checkIntegrity:(id)a0 serverTruth:(BOOL)a1 session:(id)a2 skipControlFiles:(BOOL)a3 dbCreationDate:(id *)a4 deviceIDChanged:(BOOL *)a5 error:(id *)a6;
+ (id)sessionForDumpingDatabasesAtURL:(id)a0;
+ (BOOL)_openConnection:(id)a0 databaseName:(id)a1 baseURL:(id)a2 readonly:(BOOL)a3 error:(id *)a4;

- (void)resumeIfNecessary;
- (void)dealloc;
- (BOOL)isMigratingToFPFS;
- (id)init;
- (void)_validatePersona;
- (id)appLibraries;
- (void)unregisterClient:(id)a0;
- (void)setupDatabase;
- (BOOL)registerClient:(id)a0;
- (void)fetchUserRecordIDWithCompletionHandler:(id /* block */)a0;
- (void)close;
- (void).cxx_destruct;
- (void)userDefaultsChanged;
- (id)newConnection:(id)a0;
- (id)_getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)a0 creationFlags:(unsigned int *)a1;
- (void)_mutexZonesLock;
- (void)_prepareGroupContainerLocations;
- (id)appLibraryByID:(id)a0;
- (BOOL)_addOrImportDomainIfNeededWithError:(id *)a0 domainAdded:(BOOL *)a1 domainImported:(BOOL *)a2;
- (void)_setupThrottles;
- (BOOL)fpfsMigrationStatusTTRTriggered;
- (void)updateFPFSMigrationNewItemsInDB;
- (id)__getOrCreateAppLibrary:(id)a0 rowID:(id)a1 alreadyExists:(BOOL *)a2 withClientZone:(id)a3 createCZMMoved:(BOOL)a4;
- (id)__getOrCreateClientZone:(id)a0 withServerZone:(id)a1 alreadyExists:(BOOL *)a2;
- (id)__getOrCreateServerZone:(id)a0;
- (void)__registerServerZone:(id)a0 clientZone:(id)a1 appLibrary:(id)a2 isShared:(BOOL)a3;
- (id)_appLibrariesEnumerator:(id)a0;
- (id)_appLibrariesEnumerator:(id)a0 version:(int)a1;
- (id)_appLibrariesMatchingSearchString:(id)a0;
- (id)_appLibraryByName:(id)a0 db:(id)a1;
- (void)_assertQOS:(unsigned int)a0;
- (void)_cleanupMigrationClientState;
- (void)_cleanupOldCiconiaLocations;
- (void)_clearLegacyConflictVersionsAsync;
- (void)_clearNeedsUpgradeErrorsWithBrVersion:(id)a0;
- (id)_clientZonesMatchingSearchString:(id)a0;
- (void)_closeSharedPackageExtensionsPlist;
- (void)_cloudDocsAppsListDidChange:(id)a0;
- (id)_computePathOfItemWithName:(id)a0 appLibrary:(id)a1 parentClientZoneRowID:(id)a2 parentID:(id)a3 type:(char)a4 needsLocalName:(BOOL)a5 db:(id)a6;
- (void)_createAccountSupportPathIfNeeded:(id)a0 protectParent:(BOOL)a1;
- (BOOL)_createAppLibrary:(id)a0;
- (id)_createAppTelemetryFPFSMigrationInvestigation:(unsigned int)a0;
- (BOOL)_createClientZone:(id)a0;
- (void)_createGroupContainerStageOfType:(short)a0;
- (BOOL)_createPrivateAppLibrary:(id)a0;
- (id)_createRecoveryExecutedErrorForImportError:(id)a0;
- (BOOL)_decorateFPFSDomainUserInfoWithError:(id *)a0;
- (BOOL)_decorateUserInfoForFPFSDomain:(id)a0 panicOnDomainIDMismatch:(BOOL)a1 withError:(id *)a2;
- (BOOL)_deleteClientZone:(id)a0;
- (BOOL)_dumpClientZone:(id)a0 toContext:(id)a1 includeAllItems:(BOOL)a2 error:(id *)a3;
- (void)_dumpClientZoneBlockedState:(id)a0 toContext:(id)a1;
- (BOOL)_dumpClientZoneStatus:(id)a0 toContext:(id)a1 error:(id *)a2;
- (void)_dumpSpecialSyncContextsToContext:(id)a0;
- (BOOL)_enableiCloudDesktopWithError:(id *)a0;
- (void)_enumerateAppLibraryRowIDs:(id)a0 usingBlock:(id /* block */)a1;
- (BOOL)_finishClientTruthConnectionSetupWithError:(id *)a0;
- (BOOL)_finishServerTruthConnectionSetupWithError:(id *)a0;
- (void)_fixImportStatusErrorIfPossible:(id)a0;
- (void)_fixupItemsAtStartup;
- (long long)_getAndUpdateDaysSinceLastMigrationProgress:(long long)a0 itemsNotMigrated:(long long)a1 reconciledItems:(long long)a2;
- (id)_getFPFSMigrationStatus:(id)a0 withError:(id *)a1;
- (id)_getPartiallySaltedItemWithAppLibrary:(id)a0;
- (void)_handleTrashedItemsMigration;
- (void)_handleUnloadedZones:(id)a0;
- (void)_initalizeItemFetcher;
- (void)_invalidateAccountStatus;
- (BOOL)_isCZMAccountBasedOnCloudDocsPlistState;
- (void)_loadClientStateFromClientDB;
- (void)_loadClientZonesFromDisk;
- (void)_markDBOpened;
- (id)_old_privateAppLibraryByZoneName:(id)a0 db:(id)a1;
- (BOOL)_openConnection:(id)a0 databaseName:(id)a1 readonly:(BOOL)a2 error:(id *)a3;
- (void)_pcsChainAllItemsWithSystemTask:(id)a0;
- (void)_populateFPFSImportStatusTelemetryEventForEvent:(id)a0 withFPImportReport:(id)a1 itemsNotMigrated:(long long)a2;
- (void)_populateNonMigratedItemEventForLocalDataWithEvent:(id)a0 fileIDData:(id)a1 diagnosticDescriptor:(id)a2 migrationStart:(id)a3;
- (id)_postImportAnalysisForProviderDomainID:(id)a0 withLostItemCount:(unsigned long long)a1 withMigrationID:(id)a2;
- (id)_privateClientZoneByID:(id)a0 db:(id)a1;
- (id)_privateClientZoneByName:(id)a0 db:(id)a1;
- (id)_privateClientZonesEnumerator;
- (id)_privateServerZoneByName:(id)a0 db:(id)a1;
- (id)_privateServerZonesEnumerator:(id)a0;
- (unsigned long long)_recoverAndReportBoosting;
- (unsigned long long)_recoverAndReportBouncedDocumentsDirectories;
- (unsigned long long)_recoverAndReportBrokenShareOptions;
- (unsigned long long)_recoverAndReportDanglingLostZombieDirectories;
- (void)_recoverAndReportStateIntegrityWithCompletion:(id /* block */)a0 recoveryTask:(id)a1;
- (void)_recoverContentPolicyIfNecessaryForItemID:(id)a0 appLibrary:(id)a1 isAppLibraryRoot:(BOOL)a2 isDocumentsFolder:(BOOL)a3 completion:(id /* block */)a4;
- (BOOL)_recursivelyPrepareFolderForLogOutAtURL:(id)a0 pruneEmptyFolders:(BOOL)a1 pruneEmptyTopLevelFolder:(BOOL)a2 maxDepth:(unsigned long long)a3;
- (void)_refreshRootsCache;
- (void)_registerBackgroundXPCActivities;
- (BOOL)_registerDynamicDBFunctions:(id)a0 error:(id *)a1;
- (void)_registerObfuscationFunction:(id)a0;
- (unsigned long long)_reportBasehashSalting;
- (void)_reportForFPFSImportStatusTelemetryEventIfNeeded:(unsigned int)a0 completionHandler:(id /* block */)a1;
- (id)_reserveRowIDForLibrary:(id)a0;
- (int)_resolveDeviceID;
- (void)_saltPartiallySaltedItemsWithSystemTask:(id)a0;
- (void)_sendFPFSImportFinishedTelemetryEvent:(id)a0;
- (void)_sendFPFSImportStartTelemetryEvent;
- (void)_sendFPFSImportStatusTelemetryEvent;
- (void)_sendItemsPendingReconciliation:(id)a0 event:(id)a1;
- (void)_sendItemsPendingScanningDisk:(id)a0 event:(id)a1;
- (void)_sendItemsPendingScanningProvider:(id)a0 event:(id)a1;
- (void)_sendTelemetryEventForPendingItemsWithFPReport:(id)a0 migrationUUID:(id)a1 daysSinceImportStarted:(long long)a2;
- (void)_sendTelemetryEventWithDiagnosticAttributes:(id)a0 event:(id)a1;
- (void)_setDatabaseProfilingForDB:(id)a0 enabled:(BOOL)a1 verbose:(BOOL)a2;
- (void)_setICloudDesktopEnabled:(BOOL)a0 forAccount:(id)a1;
- (BOOL)_setupBackupDetector:(struct backup_detector { unsigned long long x0; unsigned long long x1; unsigned long long x2; } *)a0 error:(id *)a1;
- (BOOL)_setupConnection:(id)a0 readonly:(BOOL)a1 forChecker:(BOOL)a2 error:(id *)a3;
- (void)_setupSharedPackageExtensionsPlist;
- (id)_sharedClientZonesEnumerator;
- (id)_sharedServerZoneByName:(id)a0 ownerName:(id)a1 db:(id)a2;
- (id)_sharedServerZonesEnumerator:(id)a0;
- (BOOL)_shouldPrivateAppLibraryBeCZMMoved:(id)a0;
- (BOOL)_shouldTriggerTapToRadar:(long long)a0 daysSinceLastMigrationProgress:(long long)a1;
- (void)_startWatcher;
- (BOOL)_stepBackupDetector:(struct backup_detector { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 newState:(struct backup_detector { unsigned long long x0; unsigned long long x1; unsigned long long x2; } *)a1 error:(id *)a2;
- (void)_submitDBCorruptionTelemetryEventIfNeeded;
- (void)_submitDelayedTelemetryEventIfNeeded:(id)a0 wait:(double)a1 withBlock:(id /* block */)a2;
- (void)_submitReimportDomainFailedTelemetryEventIfNeeded;
- (void)_submitSessionOpenFailedTelemetryEventIfNeeded;
- (void)_triggerFPFSImportFinishedTelemetryEvent;
- (id)_triggerMigrationStuckRecoveryIfNeededDaysSinceImportStarted:(long long)a0 daysSinceLastMigrationProgress:(long long)a1 importError:(id)a2;
- (void)_unlinkContainersWithPristineContainerIDs:(id)a0 containersActualRoot:(id)a1 containers:(id)a2;
- (void)_unlinkContainersWithRootURL:(id)a0 containers:(id)a1;
- (id)_unloadClientZones;
- (BOOL)_updateDomain:(id)a0 withUserInfo:(id)a1 error:(id *)a2;
- (void)_updateFPFSMigrationBouncedItemType:(char)a0 withExistingItemType:(char)a1;
- (void)_updateFPFSMigrationItemTypes:(char)a0 withStateKey:(id)a1 isPackage:(BOOL)a2;
- (void)accountStartedSchedulingCZM;
- (id)accountStatisticsWithDB:(id)a0;
- (void)addMiscOperation:(id)a0;
- (void)addOfflineAppLibrary:(id)a0;
- (void)addOfflineClientZone:(id)a0;
- (void)addOfflineServerZone:(id)a0;
- (id)appLibrariesMatchingSearchString:(id)a0 error:(id *)a1;
- (id)appLibraryByMangledID:(id)a0;
- (id)appLibraryByRowID:(id)a0;
- (void)assertNotOnZoneMutex;
- (BOOL)backupDatabaseToURL:(id)a0 error:(id *)a1;
- (BOOL)backupDatabaseToURL:(id)a0 includeServer:(BOOL)a1 doNotObfuscate:(BOOL)a2 error:(id *)a3;
- (void)bumpNotificationRankOnItemGlobalID:(id)a0;
- (id)cachedCurrentUserRecordName;
- (id)cachedCurrentUserRecordNameIfExists;
- (void)captureDBCorruptionInfoWithDescription:(id)a0 error:(id)a1;
- (void)captureSessionOpenFailedInfoWithError:(id)a0;
- (id)clientTruthWorkloop;
- (id)clientZoneByMangledID:(id)a0;
- (id)clientZones;
- (id)clientZonesMatchingSearchString:(id)a0 error:(id *)a1;
- (void)closeAndResetLocalStateWithDescription:(id)a0 error:(id)a1;
- (void)closeDBs;
- (void)closeXPCClientsSync;
- (void)cloudDocsAppsListDidChange:(id)a0;
- (id)cloudDocsClientZone;
- (BOOL)createServerZone:(id)a0;
- (void)dbBecameCorruptedWithDescription:(id)a0 error:(id)a1;
- (BOOL)decorateUserInfoForFPFSDomain:(id)a0 withError:(id *)a1;
- (BOOL)deleteServerZone:(id)a0;
- (void)destroyLocalData;
- (void)destroySharedClientZone:(id)a0;
- (void)disableDatabaseProfilingForDB:(id)a0;
- (id)downloadStagePathForCurrentPersona;
- (BOOL)dumpDatabaseToFileHandle:(id)a0 zoneName:(id)a1 includeAllItems:(BOOL)a2 verbose:(BOOL)a3 tracker:(id)a4 error:(id *)a5;
- (BOOL)dumpFPFSMigrationStatusToFileHandle:(id)a0 tracker:(id)a1 includeNonMigratedItems:(BOOL)a2 error:(id *)a3;
- (BOOL)dumpFileCoordinationInfoToFileHandle:(id)a0 error:(id *)a1;
- (BOOL)dumpItemsToHandle:(id)a0 itemType:(id)a1 tracker:(id)a2 error:(id *)a3;
- (BOOL)dumpItemsURLsToHandle:(id)a0 itemRowIDs:(id)a1 error:(id *)a2;
- (void)dumpMiscOperationsToContext:(id)a0;
- (BOOL)dumpStatusToFileHandle:(id)a0 zoneName:(id)a1 tracker:(id)a2 error:(id *)a3;
- (void)dumpXPCClientsToContext:(id)a0;
- (void)enableDatabaseProfilingForDB:(id)a0;
- (void)enumerateAppLibraries:(id /* block */)a0;
- (void)enumerateClientZones:(id /* block */)a0;
- (void)enumerateContainersWithDBFacade:(id)a0 handler:(id /* block */)a1;
- (BOOL)enumerateItemsWithType:(id)a0 itemRowIDs:(id)a1 db:(id)a2 withBlock:(id /* block */)a3;
- (void)enumeratePrivateClientZones:(id /* block */)a0;
- (void)enumeratePrivateServerZones:(id /* block */)a0;
- (void)enumerateServerZones:(id /* block */)a0;
- (void)enumerateSharedClientZones:(id /* block */)a0;
- (BOOL)enumerateSharedToMeItemsWithBlock:(id /* block */)a0 error:(id *)a1;
- (id)fallbackAppLibraryForClientZone:(id)a0 extension:(id)a1;
- (id)fetchAccountWaitOperationWithAccountReady:(BOOL *)a0;
- (void)fixFileProviderDomainDecorations;
- (id)fixObfuscatedMangledID:(id)a0;
- (long long)fpfsMigrationBouncedItemCount;
- (long long)fpfsMigrationBouncedMatrix;
- (unsigned long long)fpfsMigrationCleanupLastRowID;
- (id)fpfsMigrationEndTime;
- (unsigned long long)fpfsMigrationInvestigatedItemsCount;
- (id)fpfsMigrationItemsNotMigratedDictionary;
- (int)fpfsMigrationMigratedTypes;
- (long long)fpfsMigrationNewItemsInDB;
- (long long)fpfsMigrationNonMigratedItems;
- (int)fpfsMigrationNonMigratedTypes;
- (id)fpfsMigrationStartTime;
- (unsigned int)fpfsMigrationState;
- (void)fpfsMigrationStatusTTRWasTriggered;
- (id)fpfsMigrationUUID;
- (id)fsImporter;
- (id)getClientDBFacadeFromDB:(id)a0;
- (id)getFPFSNonMigratedItemsWithDB:(id)a0;
- (id)getMiscOperations;
- (id)getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)a0;
- (id)getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)a0 appLibraryExists:(BOOL *)a1;
- (id)getOrCreateSharedZones:(id)a0;
- (id)getOrCreateSharedZones:(id)a0 shareAcceptOp:(id)a1;
- (id)getOrReserveLibraryRowIDForLibrary:(id)a0;
- (BOOL)globalID:(id)a0 isStrictChildOfGlobalID:(id)a1;
- (id)groupContainerStagePathForCurrentPersonaFromStageType:(short)a0;
- (id)initWithACAccountID:(id)a0 dbAccountDSID:(id)a1 salt:(id)a2 accountHandler:(id)a3;
- (void)initializeDatabaseFacades;
- (BOOL)initializeOfflineDatabaseWhileUpgrading:(BOOL)a0 error:(id *)a1;
- (BOOL)initializeOfflineDatabaseWhileUpgrading:(BOOL)a0 loadClientState:(BOOL)a1 error:(id *)a2;
- (BOOL)initializeOfflineDatabaseWhileUpgrading:(BOOL)a0 loadClientState:(BOOL)a1 forDBDump:(BOOL)a2 error:(id *)a3;
- (void)invalidateExtensionXPCClient;
- (BOOL)isConsolidatedAccount;
- (BOOL)isOptimizeStorage;
- (id)itemsNeedingIndexingEnumeratorFromNotifRank:(unsigned long long)a0 batchSize:(unsigned long long)a1 db:(id)a2;
- (long long)lastBootHistoryTime;
- (void)markAccountMigrationComplete;
- (void)markMigrationToFPFSCleanupComplete;
- (void)markMigrationToFPFSComplete;
- (id)newAppLibraryFromPQLResultSet:(id)a0 version:(int)a1;
- (id)newConnectionWithLabel:(id)a0 readonly:(BOOL)a1 error:(id *)a2;
- (id)newLocalItemFromPQLResultSet:(id)a0 db:(id)a1 error:(id *)a2;
- (id)newPrivateClientZoneFromPQLResultSet:(id)a0 error:(id *)a1;
- (id)newPrivateServerZoneFromPQLResultSet:(id)a0 error:(id *)a1;
- (id)newServerItemFromPQLResultSet:(id)a0 error:(id *)a1;
- (id)newSharedClientZoneFromPQLResultSet:(id)a0 error:(id *)a1;
- (id)newSharedServerZoneFromPQLResultSet:(id)a0 error:(id *)a1;
- (BOOL)openAndValidateDatabase:(id)a0 serverTruth:(BOOL)a1 initialVersion:(unsigned int *)a2 lastCurrentVersion:(unsigned int *)a3 deviceIDChanged:(BOOL *)a4 error:(id *)a5;
- (BOOL)openDBForNewDomain:(BOOL)a0 deviceIDChanged:(BOOL *)a1 withError:(id *)a2;
- (void)openForDumpingWithAccountDSID:(id)a0;
- (void)openForSendingTelemetry;
- (BOOL)openWithError:(id *)a0 pushWorkloop:(id)a1;
- (void)performAsyncOnClientReadWriteDatabaseWorkloop:(id /* block */)a0;
- (void)performAsyncOnServerReadWriteDatabaseWorkloop:(id /* block */)a0;
- (void)performBlock:(id /* block */)a0 whileRemovingPrivateClientZone:(id)a1;
- (void)performSyncOnClientReadDatabaseWorkloop:(id /* block */)a0;
- (void)performSyncOnClientReadWriteDatabaseSerialQueue:(id /* block */)a0;
- (void)performSyncOnClientReadWriteDatabaseWorkloop:(id /* block */)a0;
- (void)performSyncOnServerReadWriteDatabaseSerialQueue:(id /* block */)a0;
- (void)preventDatabaseFromBeingReused;
- (BOOL)printShareRequests:(id)a0 isPending:(BOOL)a1 asJSON:(BOOL)a2 error:(id *)a3;
- (id)privateClientZoneByID:(id)a0;
- (id)privateServerZoneByID:(id)a0;
- (id)readOnlyWorkloop;
- (void)recomputeAppSyncBlockStateForPrivateClientZone:(id)a0;
- (void)recoverAndReportContentPolicyWithCompletion:(id /* block */)a0;
- (BOOL)reimportFPFSDomainWithError:(id *)a0;
- (BOOL)runDatabaseFixup:(unsigned long long)a0 error:(id *)a1;
- (BOOL)runDatabaseFixups;
- (BOOL)runDatabaseFixupsForDB:(id)a0 serverTruth:(BOOL)a1;
- (BOOL)saveClientZoneToDB:(id)a0;
- (void)scheduleZoneMovesToCloudDocs:(id)a0;
- (void)sendFileStatsTelemetryWithDescriptors:(id)a0 perItemSendTelemetryBlock:(id /* block */)a1;
- (void)sendNonMigratedItemTelemetryWithfileIDs:(id)a0;
- (id)serverTruthWorkloop;
- (id)serverZoneByCKZoneID:(id)a0;
- (id)serverZoneByMangledID:(id)a0;
- (id)serverZoneByName:(id)a0 ownerName:(id)a1;
- (id)serverZoneByRowID:(id)a0;
- (void)setEnabled:(BOOL)a0 forDesktopAndDocumentsWithCompletion:(id /* block */)a1;
- (void)setFPFSMigrationState:(unsigned int)a0;
- (void)setOptimizeStorageEnabled:(BOOL)a0 forKey:(id)a1 synchronous:(BOOL)a2;
- (void)setOptimizeStorageEnabled:(BOOL)a0 synchronous:(BOOL)a1;
- (id)sharedClientZoneByMangledID:(id)a0;
- (id)sharedServerZoneByMangledID:(id)a0;
- (id)sharedServerZoneRowIDsByOwnerNamePrefix:(id)a0;
- (id)singleAppLibraryMatchingSearchString:(id)a0 error:(id *)a1;
- (id)singleClientZoneMatchingSearchString:(id)a0 error:(id *)a1;
- (void)stopDBWatcher;
- (id)trashedItemsEnumeratorFromNotifRank:(unsigned long long)a0 batchSize:(unsigned long long)a1 db:(id)a2;
- (void)triggerFPFSImportFinishedTelemetryEventIfNeeded;
- (void)updateFPFSMigrationCleanupLastRowID:(unsigned long long)a0 lostItemCount:(unsigned long long)a1 childLostItemCount:(unsigned long long)a2 busyDateLostItemCount:(unsigned long long)a3 ignoredFromSyncLostItemCount:(unsigned long long)a4 investigatedItemsCount:(unsigned long long)a5 notMigratedItems:(id)a6;
- (void)updateFPFSMigrationMigratedTypes:(char)a0;
- (void)updateFPFSMigrationMigratedTypesWithPackage;
- (void)updateFPFSMigrationNonMigratedTypes:(char)a0;
- (void)updateFPFSMigrationNonMigratedTypesWithPackage;
- (void)updateServerState:(id)a0;
- (void)waitForUploadsToCompleteInSyncBubbleWithReply:(id /* block */)a0;

@end
