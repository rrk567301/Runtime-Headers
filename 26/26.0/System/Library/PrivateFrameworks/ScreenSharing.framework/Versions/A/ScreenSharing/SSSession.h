@class MessageTracerInfo, NSThread, NSMutableArray, IntervalMetric, AVCMediaStreamNegotiator, AVCVideoStream, NSString, SSFrameBuffer, NSTimer, NSArray, NSMutableDictionary, SSAddress, NWConnectionManager, NSRecursiveLock, AVCRemoteVideoClient, AVCAudioStream, NSObject, NSSet, NSData, ViewerEOSReporter, SSScreenInfo, SSConnectionOptions, NSUUID, NSImage, NSURL, NSDate, SenderThread, SSScreenConfiguration;
@protocol SSSessionDelegate, IDSSessionDelegate, OS_dispatch_source, SSDragDelegate, OS_dispatch_semaphore;

@interface SSSession : NSObject <SSSessionProtocol, SSInputEventConsumer, NWConnectionReader, AVCRemoteVideoClientDelegate, AVCVideoStreamDelegate, AVCAudioStreamDelegate>

@property (retain) NSRecursiveLock *pasteboardLock;
@property (retain) SenderThread *senderThread;
@property (retain) NSMutableDictionary *fileCopies;
@property (retain) NSMutableArray *queuedCopies;
@property double perceivedScalingFactor;
@property (retain) NSObject<OS_dispatch_semaphore> *scaleFactorSemaphore;
@property (nonatomic) void *rfbConnectionRef;
@property (nonatomic) struct { unsigned short x0; unsigned short x1; unsigned short x2; char x3[0]; } *unverifiedServerHostKey;
@property NSMutableDictionary *connectionHints;
@property (retain) NSDate *generalPasteboardSessionExpirationTime;
@property BOOL isReady;
@property struct SSSize { unsigned long long width; unsigned long long height; } rfbServerInfoHeaderSize;
@property BOOL receivedServerInfo;
@property unsigned int requestCount;
@property unsigned int askToControlRequest;
@property unsigned int askToResumeRequest;
@property unsigned int askToAddTextToPasteboard;
@property unsigned int showMessageToUser;
@property unsigned int askToOpenURL;
@property double percentCompleteOfFullScreen;
@property unsigned char lastButtonMask;
@property long long lastClickCount;
@property unsigned char buttonMask;
@property int eventIndex;
@property unsigned int generalPasteboardSessionID;
@property (retain) NSObject<OS_dispatch_source> *legacyServerUpdateTimer;
@property (retain) NSString *mUnverifiedServerHostLabel;
@property BOOL mUnverifiedServerMessageDisplayed;
@property (retain) MessageTracerInfo *messageTracerInfo;
@property (copy) NSSet *pseudoEncodings;
@property BOOL hasUnfulfilledPasteboardPromises;
@property double connectTimeout;
@property BOOL canToggleCurtainMode;
@property BOOL serverInLoginWindowLockScreen;
@property BOOL serverAtLoginWindow;
@property (getter=isOnConsole) BOOL onConsole;
@property long long displayInfo2Version;
@property (copy) NSArray *remoteFilePaths;
@property (copy) NSArray *localFilePaths;
@property (retain) NSObject<SSDragDelegate> *dragDelegate;
@property struct SSPoint { long long x; long long y; } lastCursorCoordinates;
@property struct CGPoint { double x; double y; } lastCursorPercent;
@property (retain) NSDate *lastContactDate;
@property (retain) NSTimer *udpLivenessTimer;
@property unsigned short lastX;
@property unsigned short lastY;
@property BOOL scaleFactorEnqueued;
@property BOOL serverSupportsLaunchpad;
@property BOOL serverSupportsShowDesktop;
@property BOOL serverSupportsMissionControl;
@property BOOL serverSupportsFrontApplicationWindows;
@property BOOL rejectedEncoding;
@property BOOL mediaStreamMessage1Received;
@property (retain) AVCAudioStream *audioStream;
@property (retain) AVCVideoStream *videoStream1;
@property (retain) AVCVideoStream *videoStream2;
@property long long audioStreamRTCPTimeoutCount;
@property long long videoStream1RTCPTimeoutCount;
@property long long videoStream2RTCPTimeoutCount;
@property (retain) NSTimer *avcNetworkTestTimer;
@property (retain) AVCRemoteVideoClient *remoteVideoClient1;
@property (retain) AVCRemoteVideoClient *remoteVideoClient2;
@property unsigned short audioStreamUDPPort;
@property unsigned short videoStream1UDPPort;
@property unsigned short videoStream2UDPPort;
@property BOOL videoStream1Supports60FPS;
@property BOOL videoStream2Supports60FPS;
@property (retain, nonatomic) NSURL *videoStream1FrameCaptureOutputURL;
@property (retain, nonatomic) NSURL *videoStream2FrameCaptureOutputURL;
@property (retain) AVCMediaStreamNegotiator *audioStreamNegotiator;
@property (retain) AVCMediaStreamNegotiator *videoStream1Negotiator;
@property (retain) AVCMediaStreamNegotiator *videoStream2Negotiator;
@property (retain) NSData *audioStreamOffer;
@property (retain) NSData *videoStream1Offer;
@property (retain) NSData *videoStream2Offer;
@property (retain) NSData *audioStreamEncryptionKeyViewerToServer;
@property (retain) NSData *audioStreamEncryptionKeyServerToViewer;
@property (retain) NSData *videoStream1EncryptionKeyViewerToServer;
@property (retain) NSData *videoStream1EncryptionKeyServerToViewer;
@property (retain) NSData *videoStream2EncryptionKeyViewerToServer;
@property (retain) NSData *videoStream2EncryptionKeyServerToViewer;
@property (retain) NSUUID *mediaStreamSessionID;
@property unsigned short videoStreamDisplayCount;
@property (retain) ViewerEOSReporter *reporter;
@property (retain) IntervalMetric *videoStream1Metric;
@property (retain) IntervalMetric *videoStream2Metric;
@property (nonatomic) BOOL serverSupportsDynamicDrag;
@property (nonatomic) BOOL appWantsProModeInterface;
@property (nonatomic) BOOL continueNoVirtualDisplays;
@property (nonatomic) unsigned int dragDataInflatedSize;
@property (nonatomic) unsigned int *cursorPixelMap;
@property (nonatomic) BOOL remoteCursorIsVisible;
@property (nonatomic) BOOL receivedAudioRTCPMessage;
@property (nonatomic) BOOL voiceOverEnabled;
@property (nonatomic) BOOL zoomEnabled;
@property (retain) NSRecursiveLock *propertyLock;
@property NSObject<SSSessionDelegate, IDSSessionDelegate> *primaryDelegate;
@property (retain) NSMutableArray *secondaryDelegates;
@property (retain) NSThread *delegateThread;
@property (retain) SSAddress *address;
@property long long controlType;
@property (readonly) SSFrameBuffer *frameBuffer;
@property (retain) SSScreenConfiguration *screenConfiguration;
@property (retain) SSScreenConfiguration *staticScreenConfiguration;
@property double scalingFactor;
@property long long preDynamicScalingMode;
@property BOOL exitingDynamicResolutionMode;
@property (retain) SSScreenInfo *selectedScreen;
@property double frameUpdateInterval;
@property (copy) NSString *serverName;
@property (copy) NSString *curtainMessage;
@property BOOL curtained;
@property BOOL dynamicResolutionMode;
@property (nonatomic, getter=isVirtualDisplay1HDREnabled) BOOL virtualDisplay1HDREnabled;
@property (nonatomic, getter=isVirtualDisplay2HDREnabled) BOOL virtualDisplay2HDREnabled;
@property BOOL isUsingSSHTunnel;
@property (copy) NSArray *videoEncodings;
@property unsigned int serverType;
@property (retain) SSConnectionOptions *connectionOptions;
@property (getter=isUsingVirtualDisplay) BOOL usingVirtualDisplay;
@property long long pasteboardChangeCount;
@property unsigned int viewerApp;
@property unsigned int viewerAppMajorVersion;
@property unsigned int viewerAppMinorVersion;
@property unsigned int viewerAppBugFixVersion;
@property (copy) NSImage *userPicture;
@property (copy) NSString *userName;
@property int cursorMode;
@property BOOL isAutoPasteboardEnabled;
@property (readonly) BOOL hasReliableVirtualDisplayInfo;
@property double contentsScale;
@property (readonly) struct CGSize { double x0; double x1; } selectedScreenMaxSize;
@property (readonly) struct CGSize { double x0; double x1; } selectedScreenScaledSize;
@property BOOL assistModeEnabled;
@property BOOL assistModeWasEnabled;
@property BOOL assistModeActive;
@property unsigned int assistModeFlags;
@property BOOL receivedFullScreen;
@property (retain) NWConnectionManager *datagramConnectionManager;
@property unsigned int AVConferenceVideoWidth;
@property unsigned int AVConferenceVideoHeight;
@property (nonatomic) BOOL useAVCMediaStreamsWithAppleID;
@property BOOL encodingsWereSet;
@property BOOL clientShouldSetCurtainMode;
@property BOOL keyboardSourceShared;
@property BOOL serverSecureInput;
@property BOOL clientChangedCurtainMode;
@property (retain) IntervalMetric *legacyStreamMetric;
@property (readonly, nonatomic) double remoteUIResolutionForSelectedScreen;
@property (nonatomic) BOOL cursorAlwaysVisible;
@property (retain) NSData *dragData;
@property (nonatomic) BOOL processUserDragInfo;
@property (copy) NSImage *remoteDragImage;
@property (readonly) long long displayType;
@property (nonatomic) int receivedFirstMediaStreamFrameCount;
@property (readonly) BOOL isDeviceAudioStreamSupported;
@property (nonatomic, getter=isDeviceAudioStreamPaused) BOOL deviceAudioStreamPaused;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)automaticallyNotifiesObserversForKey:(id)a0;
+ (id)newRTPSocketDictionaryWithConfig:(id)a0 port:(unsigned short)a1;
+ (id)qualityEncodingsForMode:(long long)a0 withDisplayConfiguration:(id)a1;
+ (void)registerForDisplayChanges;
+ (int)udpSocketWithAVCMediaStreamConfig:(id)a0 port:(unsigned short)a1;

- (void)disconnect;
- (void)sendEvent:(id)a0;
- (void)dealloc;
- (void)reconnect;
- (id)init;
- (void)streamDidStop:(id)a0;
- (void)handleTouchEvent:(struct { unsigned short x0; unsigned short x1; unsigned short x2; struct { double x0; double x1; double x2; } x3[0]; } *)a0;
- (BOOL)requestUpdates;
- (void)stream:(id)a0 didPause:(BOOL)a1 error:(id)a2;
- (void)stream:(id)a0 didReceiveDTMFEventWithDigit:(char)a1;
- (void)stream:(id)a0 didReceiveRTCPPackets:(id)a1;
- (void)stream:(id)a0 didResume:(BOOL)a1 error:(id)a2;
- (void)stream:(id)a0 didStart:(BOOL)a1 error:(id)a2;
- (void)stream:(id)a0 didStartSynchronizer:(BOOL)a1 error:(id)a2;
- (void)stream:(id)a0 updateInputFrequencyLevel:(id)a1;
- (void)stream:(id)a0 updateOutputFrequencyLevel:(id)a1;
- (void)streamDidInterruptionBegin:(id)a0;
- (void)streamDidInterruptionEnd:(id)a0;
- (void)streamDidRTCPTimeOut:(id)a0;
- (void)streamDidRTPTimeOut:(id)a0;
- (void)streamDidRecoverFromRTCPTimeOut:(id)a0;
- (void)streamDidServerDie:(id)a0;
- (void)remoteVideoClient:(id)a0 networkQualityDidDegrade:(BOOL)a1 info:(id)a2;
- (void)remoteVideoClient:(id)a0 remoteMediaDidStall:(BOOL)a1;
- (void)remoteVideoClient:(id)a0 remoteScreenAttributesDidChange:(id)a1;
- (void)remoteVideoClient:(id)a0 remoteVideoAttributesDidChange:(id)a1;
- (void)remoteVideoClient:(id)a0 remoteVideoDidPause:(BOOL)a1;
- (void)remoteVideoClient:(id)a0 videoDidDegrade:(BOOL)a1;
- (void)remoteVideoClient:(id)a0 videoDidSuspend:(BOOL)a1;
- (void)remoteVideoClientDidReceiveFirstFrame:(id)a0;
- (void)remoteVideoClientDidReceiveLastFrame:(id)a0;
- (void)remoteVideoServerDidDie:(id)a0;
- (void)stream:(id)a0 didGetLastDecodedFrame:(id)a1;
- (void)stream:(id)a0 didUpdateVideoConfiguration:(BOOL)a1 error:(id)a2;
- (void)stream:(id)a0 downlinkQualityDidChange:(id)a1;
- (void)stream:(id)a0 uplinkQualityDidChange:(id)a1;
- (void)setFrameBuffer:(id)a0;
- (void)AVCMediaNetworkCheckTimerFired:(id)a0;
- (void)HandleIncomingData:(char *)a0 dataSize:(unsigned int)a1;
- (void)delegateSessionSelectionResult:(int)a0;
- (void)dtDelegateSessionAllowsControl:(id)a0;
- (void)setControlMode:(long long)a0;
- (void)stStopFileCopy:(id)a0;
- (void)cancelFileCopy:(id)a0;
- (void)delegateRemotePasteboardChanged;
- (void)dtDelegateAuthenticationResult:(id)a0;
- (void)dtDelegateWantsProModeInterface;
- (id)fileCopyLocalPath:(id)a0 toRemotePath:(id)a1;
- (void)handleFileTransferProgressInfo:(struct { unsigned int x0; double x1; } *)a0;
- (void)resumeFileCopy:(id)a0;
- (void)stSendGestureSmartMagnifyEvent:(id)a0;
- (void)acceptNewHostKey;
- (id)activeFileCopies;
- (BOOL)addressIsAppleIDOnlyDomain:(id)a0;
- (BOOL)addressNotReachable;
- (id)allDelegates;
- (unsigned int)assistPointerColor;
- (unsigned int)assistPointerKind;
- (void)authenticateWithCredentials:(id)a0;
- (void)cancelActiveFileTransfers;
- (void)cancelAllPerformSelectors;
- (void)cancelSelectSession;
- (void)captureStreamNumber:(unsigned long long)a0 toFileURL:(id)a1;
- (void)cleanupPasteboardSession;
- (void)cleanupRequestFrameTimer;
- (void)clearPasteboardPromises;
- (void)configureSession;
- (void)configureVirtualDisplaysWithDimensions:(id)a0;
- (void)connectToAddress:(id)a0 withOptions:(id)a1;
- (void)connectToAddress:(id)a0 withOptions:(id)a1 timeout:(double)a2;
- (void)delegateAVCMediaError:(int)a0 errorSubCode:(long long)a1;
- (void)delegateAuthenticationResult:(int)a0;
- (void)delegateBeeped;
- (void)delegateCanToggleCurtainModeChanged;
- (void)delegateConnectDidFail:(int)a0;
- (void)delegateContinueWithoutVirtualDisplays;
- (void)delegateControlModeSet:(long long)a0;
- (void)delegateCursorImageUpdated:(id)a0 hotSpot:(struct SSPoint { long long x0; long long x1; })a1 pixelMap:(unsigned int *)a2;
- (void)delegateCursorPositionChanged:(struct SSPoint { long long x0; long long x1; })a0;
- (void)delegateCursorVisibilityUpdated:(BOOL)a0;
- (void)delegateDeviceInfo:(id)a0;
- (void)delegateDisplaysDidSleep;
- (void)delegateDisplaysDidWake;
- (void)delegateDroppedLocalPaths:(id)a0 onRemotePath:(id)a1;
- (void)delegateFileCopyDidComplete:(id)a0;
- (void)delegateFileCopyProgressDidUpdate:(id)a0;
- (void)delegateFullScreenUpdateProgress:(double)a0;
- (void)delegateIDSTerminated;
- (void)delegateOnConsoleChanged;
- (void)delegateRemoteVideoClientDidReceiveFirstFrame:(id)a0;
- (void)delegateServerSecureInputChanged;
- (void)delegateServerUserSessionChanged;
- (void)delegateSessionAllowsControl:(BOOL)a0;
- (void)delegateSessionDidSetLocalWindowUIResolution:(id)a0;
- (void)delegateSessionPaused;
- (void)delegateSessionReady;
- (void)delegateSessionRequestToAddTextToPasteboard:(int)a0;
- (void)delegateSessionRequestToOpenURLResult:(int)a0;
- (void)delegateSessionRequestToResumeResult:(int)a0;
- (void)delegateSessionResumed;
- (void)delegateSizesChanged:(id)a0;
- (void)delegateSystemInfoRequestCompleted:(id)a0;
- (void)delegateTerminated;
- (void)delegateTouchEvent:(id)a0;
- (void)delegateUserClosedConnection;
- (void)delegateUserPictureChanged;
- (void)delegateVirtualDisplayStateChanged;
- (void)delegateWantsCredentialsForAuthenticationTypes:(id)a0;
- (void)delegateWantsDisplayConfiguration;
- (void)delegateWantsProModeInterface;
- (void)delegateWantsSessionSelection:(id)a0 consoleUser:(id)a1;
- (BOOL)doesServerSupportFeature:(int)a0;
- (BOOL)doesServerSupportProMode;
- (void)dragDelegateRemotePasteboardTransferred:(id)a0 withDragImage:(id)a1 withRemoteFilePaths:(id)a2;
- (void)dtDelegateAVCMediaError:(id)a0;
- (void)dtDelegateBeeped;
- (void)dtDelegateCanToggleCurtainModeChanged;
- (void)dtDelegateConnectDidFail:(id)a0;
- (void)dtDelegateContinueWithoutVirtualDisplays;
- (void)dtDelegateControlModeSet:(id)a0;
- (void)dtDelegateCursorImageUpdated:(id)a0;
- (void)dtDelegateCursorPositionChanged:(id)a0;
- (void)dtDelegateDeviceInfo:(id)a0;
- (void)dtDelegateDisplaysDidSleep;
- (void)dtDelegateDisplaysDidWake;
- (void)dtDelegateDroppedLocalPathsOnRemotePath:(id)a0;
- (void)dtDelegateFileCopyDidComplete:(id)a0;
- (void)dtDelegateFileCopyProgressDidUpdate:(id)a0;
- (void)dtDelegateFullScreenUpdateProgress:(id)a0;
- (void)dtDelegateIDSTerminated;
- (void)dtDelegateOnConsoleChanged;
- (void)dtDelegateRemotePasteboardChanged;
- (void)dtDelegateServerSecureInputChanged;
- (void)dtDelegateServerUserSessionChanged;
- (void)dtDelegateSessionDidSetLocalWindowUIResolution:(id)a0;
- (void)dtDelegateSessionPaused;
- (void)dtDelegateSessionReady;
- (void)dtDelegateSessionRequestToAddTextToPasteboard:(id)a0;
- (void)dtDelegateSessionRequestToOpenURLResult:(id)a0;
- (void)dtDelegateSessionRequestToResumeResult:(id)a0;
- (void)dtDelegateSessionResumed;
- (void)dtDelegateSessionSelectionResult:(id)a0;
- (void)dtDelegateSizesChanged:(id)a0;
- (void)dtDelegateSystemInfoRequestCompleted:(id)a0;
- (void)dtDelegateTerminated;
- (void)dtDelegateTouchEvent:(id)a0;
- (void)dtDelegateUserClosedConnection;
- (void)dtDelegateUserPictureChanged;
- (void)dtDelegateVirtualDisplayStateChanged;
- (void)dtDelegateWantsCredentialsForAuthenticationTypes:(id)a0;
- (void)dtDelegateWantsDisplayConfiguration;
- (void)dtDelegateWantsSessionSelection:(id)a0;
- (void)dtdelegateCursorVisibilityUpdated:(id)a0;
- (void)enableAccessibilityFeatureWithFeature:(unsigned int)a0 enabled:(BOOL)a1 settings:(id)a2;
- (BOOL)encodingRejected;
- (void)enqueueSenderThreadCommand:(SEL)a0 withArgument:(id)a1;
- (int)extractSockAddr:(struct sockaddr_in6 { unsigned char x0; unsigned char x1; unsigned short x2; unsigned int x3; struct in6_addr { union { unsigned char x0[16]; unsigned short x1[8]; unsigned int x2[4]; } x0; } x4; unsigned int x5; } *)a0 fromSSAddress:(id)a1;
- (void)extractVirtualDisplayModeFromDict:(id)a0 info:(struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; unsigned int x5; } *)a1;
- (id)fileCopyRemotePath:(id)a0 toLocalPath:(id)a1 withFileName:(id)a2;
- (id)generateIDSAVCNegotiatorInfo;
- (void)generatePasteboardSessionID;
- (long long)getVirtualDisplaysCount;
- (void)handleAVCMediaEncoding:(struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3[0]; } *)a0;
- (void)handleAlertSound;
- (void)handleClipboardData:(struct { unsigned int x0; int x1; unsigned int x2; char x3[0]; } *)a0;
- (void)handleClipboardNotification;
- (void)handleCursorImageUpdate:(struct ServerCursorImageCallbackInfo { unsigned int *x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } *)a0;
- (void)handleCursorPositionChanged:(struct Point { short x0; short x1; } *)a0;
- (void)handleCursorVisibility:(BOOL)a0;
- (void)handleDeviceInfoEncoding:(struct { unsigned short x0; unsigned short x1; unsigned int x2; unsigned int x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned char x7[0]; } *)a0;
- (void)handleDisplayInfo2:(struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned int x5; unsigned int x6; unsigned short x7; struct { double x0; double x1; unsigned int x2; struct Rect { short x0; short x1; short x2; short x3; } x3; struct Rect { short x0; short x1; short x2; short x3; } x4; unsigned int x5; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; } x6; } x8[0]; } *)a0;
- (void)handleDisplayInfo2b:(unsigned short)a0 screenFlags:(unsigned int)a1 screenConfiguration:(id)a2 newSelectedScreen:(id)a3 displayCountChanged:(BOOL)a4;
- (void)handleDisplayInfo:(struct ServerDisplayInfo { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned int x4; unsigned short x5; struct { unsigned int x0; unsigned short x1; unsigned short x2; unsigned int x3; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; } x4; } x6[0]; } *)a0;
- (void)handleDisplayInfoB:(unsigned int)a0 screenConfiguration:(id)a1 newSelectedScreen:(id)a2;
- (void)handleFileRequest:(struct { int x0; char x1[0]; } *)a0;
- (void)handleFileTransferItemInfo:(struct { unsigned int x0; short x1; unsigned char x2; unsigned char x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned int x9; } *)a0;
- (void)handleFileTransferResultInfo:(struct { unsigned int x0; short x1; unsigned short x2; char x3[0]; } *)a0;
- (void)handleFrameBufferUpdate:(struct Rect { short x0; short x1; short x2; short x3; } *)a0;
- (void)handleKeyboardInputSourceEncoding:(struct { unsigned short x0; unsigned int x1; unsigned short x2; char x3[0]; } *)a0;
- (void)handleResolutionChange:(struct RFBScreenSizeInfo { unsigned short x0; unsigned short x1; } *)a0;
- (void)handleSystemInfoData:(struct { unsigned int x0; unsigned int x1; unsigned int x2; char x3[0]; } *)a0;
- (void)handleUpdatedPasteboard;
- (void)handleUserClosedConnection;
- (void)handleUserImage:(struct RFBUserBitmap { unsigned short x0; unsigned short x1; char x2[0]; } *)a0;
- (void)handleUserRequestResponse:(struct { unsigned char x0; unsigned char x1; unsigned short x2; unsigned short x3; unsigned int x4; unsigned int x5; unsigned int x6; } *)a0;
- (void)handleVendorKeysymEncoding:(struct { unsigned short x0; unsigned short x1; unsigned int x2[0]; } *)a0;
- (void)handleViewerDropEvent:(struct { int x0; unsigned char x1; unsigned char x2; unsigned int x3; unsigned int x4; char x5[0]; } *)a0;
- (void)logConnectionFailureToMessageTracer:(BOOL)a0 withFailureReason:(id)a1;
- (void)logUnexpectedVideoConfigInfo:(id)a0;
- (unsigned int)maxVirtualDisplays;
- (void)pauseFileCopy:(id)a0;
- (void)pauseScreenSharing;
- (void)pinCursorIfNeeded;
- (void)reconnectWithTimeout:(double)a0;
- (void)recordRemoteFilePath:(id)a0;
- (BOOL)recordRemotePasteboardData:(id)a0 toLocalPasteboard:(id)a1 uncompressedSize:(unsigned int)a2;
- (double)remoteScaleFactorForLocalScaleFactor:(double)a0;
- (void)repostMouseEvent;
- (void)requestControlMode;
- (void)requestGeneralPasteboard;
- (void)requestPartialUpdatesForLegacy;
- (void)requestPartialUpdatesForLegacyWithDelay;
- (void)requestPasteboardPromises;
- (void)requestSystemInfo:(int)a0 args:(id)a1;
- (void)requestSystemInfo:(int)a0 args:(id)a1 senderToken:(unsigned int)a2;
- (void)requestToCopyTextToPasteboard:(id)a0;
- (void)requestToOpenURL:(id)a0;
- (void)requestToResumeScreenSharing;
- (id)screenSizes;
- (void)selectSession:(id)a0;
- (void)sendAccessibilityViewerMessageWithFeature:(unsigned int)a0 message:(unsigned int)a1 messageID:(int)a2 timeout:(double)a3 userInfo:(id)a4;
- (void)sendGeneralPasteboard;
- (void)sendPasteboardPromises;
- (void)sendStartDragFromRemote:(id)a0;
- (void)sendStartDragToRemote:(id)a0;
- (double)serverScaleFactor;
- (void)setAssistPointerColor:(unsigned int)a0;
- (void)setAssistPointerKind:(unsigned int)a0;
- (void)setLocalBitmap;
- (void)setLocalBitmapIfNeeded;
- (void)setRequestFrameUpdateTimer:(double)a0;
- (BOOL)setScalingFactor:(double)a0 forced:(BOOL)a1;
- (void)showMessageToUser:(id)a0;
- (void)simulateDisplayInfo2MessageForAVConferenceVideo;
- (BOOL)ssDoesWantKeyboardEvents;
- (void)ssInputEvent:(id)a0;
- (BOOL)ssVoiceOverEnabled;
- (BOOL)ssZoomEnabled;
- (void)stAuthenticateWithCredentials:(id)a0;
- (void)stClearPasteboardPromises;
- (void)stCommonPostMouseEvent:(id)a0 withX:(unsigned short)a1 withY:(unsigned short)a2 withButtonMask:(unsigned char)a3 withClickCount:(long long)a4 withTimestamp:(unsigned long long)a5;
- (void)stCommonPostMouseEventWithX:(unsigned short)a0 withY:(unsigned short)a1 withButtonMask:(unsigned char)a2 withFrameBufferCoords:(struct SSPoint { long long x0; long long x1; })a3 withClickCount:(long long)a4 framePercent:(struct CGPoint { double x0; double x1; })a5 withTimestamp:(unsigned long long)a6;
- (void)stCommonRepostMouseEvent;
- (void)stConfigureServerMediaStream;
- (void)stConfigureSession;
- (void)stConfigureVirtualDisplaysWithDimensions:(id)a0;
- (void)stConnectToAddress:(id)a0;
- (void)stControlModeRequest;
- (void)stCopyLocalToRemote:(id)a0;
- (void)stCopyRemoteToLocal:(id)a0;
- (void)stCorePostMouseEventWithX:(unsigned short)a0 withY:(unsigned short)a1 withButtonMask:(unsigned char)a2 withFrameBufferCoords:(struct SSPoint { long long x0; long long x1; })a3 withClickCount:(long long)a4 active:(BOOL)a5 framePercent:(struct CGPoint { double x0; double x1; })a6 withTimestamp:(unsigned long long)a7;
- (void)stDisposeConnectionRef;
- (void)stEnableAccessibilityFeature:(id)a0;
- (void)stPauseFileCopy:(id)a0;
- (void)stPauseScreenSharing;
- (void)stPinCursorIfNeeded;
- (void)stRequestGeneralPasteboard;
- (void)stRequestPartialUpdatesForLegacy;
- (void)stRequestPasteboardPromises;
- (void)stRequestSystemInfo:(id)a0;
- (void)stRequestToCopyTextToPasteboard:(id)a0;
- (void)stRequestToOpenURL:(id)a0;
- (void)stRequestToResumeScreenSharing;
- (void)stRequestUpdates;
- (void)stResetConnectionRef;
- (void)stResetSessionVariablesForNewConnection:(BOOL)a0;
- (void)stResumeFileCopy:(id)a0;
- (void)stSelectSession:(id)a0;
- (void)stSendAccessibilityViewerMessage:(id)a0;
- (void)stSendCancelDragToRemote:(id)a0;
- (void)stSendConcludeDragToRemote:(id)a0;
- (void)stSendDragEvent:(id)a0;
- (void)stSendEvent:(id)a0;
- (void)stSendGeneralPasteboard;
- (void)stSendGestureBeginEvent:(id)a0;
- (void)stSendGestureEndEvent:(id)a0;
- (void)stSendGestureMagnifyEvent:(id)a0;
- (void)stSendGestureQuickLookEvent:(id)a0;
- (void)stSendGestureRotateEvent:(id)a0;
- (void)stSendGestureScrollEvent:(id)a0;
- (void)stSendGestureSwipeEvent:(id)a0;
- (void)stSendKeyboardEvent:(id)a0;
- (void)stSendMouseButtonEvent:(id)a0;
- (void)stSendMouseMoveEvent:(id)a0;
- (void)stSendMouseScrollEvent:(id)a0;
- (void)stSendNextQueuedData;
- (void)stSendPasteboardPromises;
- (void)stSendX11Keysym:(id)a0;
- (void)stSetControlMode:(id)a0;
- (void)stSetCurtained;
- (void)stSetEncodings;
- (void)stSetFrameUpdateInterval;
- (void)stSetIsAutoPasteboardEnabled;
- (void)stSetKeyboardSourceShared;
- (void)stSetLocalBitmap;
- (void)stSetLocalBitmapIfNeeded;
- (void)stSetScalingFactor;
- (void)stSetSelectedScreen;
- (void)stSetlocalWindowUIResolution:(id)a0;
- (void)stShowMessageToUser:(id)a0;
- (void)stToggleVirtualDisplay;
- (void)stUpdateForServerControlType:(id)a0;
- (void)startAVCMediaStreams;
- (void)startIDSAVCMediaStreams:(id)a0 idsSession:(id)a1;
- (void)toggleServerAppWindows;
- (void)toggleServerDesktop;
- (void)toggleServerLaunchpad;
- (void)toggleServerMissionControl;
- (void)turnAssistModeOff:(BOOL)a0;
- (void)turnAssistModeOnWithX:(unsigned short)a0 Y:(unsigned short)a1 flags:(unsigned int)a2 info:(struct RFBAssistCursorV2Info { unsigned char x0; unsigned char x1; double x2; double x3; } *)a3;
- (void)udpLivenessTimerFired:(id)a0;
- (BOOL)updateRemoteScalingFactor;
- (BOOL)validateAndAdjustMouseCoordinatesForServer:(struct SSPoint { long long x0; long long x1; })a0 withXOut:(unsigned short *)a1 withYOut:(unsigned short *)a2;

@end
