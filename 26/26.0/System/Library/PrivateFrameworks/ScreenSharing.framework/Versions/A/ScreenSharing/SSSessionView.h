@class SSCallWindowController, NSDate, NSMutableOrderedSet, NSDictionary, NSMutableArray, SSConnectionAuthenticationViewController, CALayer, SSConnectionAccessibilityViewController, SSCurtainMessageViewController, SSPanningScrollView, SSSession, NSTrackingArea, NSXPCConnection, SSNotificationOverlayViewController, SSScreenInfo, NSNumber, IDSService, AXSSRemoteDesktopViewer, NSCursor, IDSSession, SSCredentials, SSConnectionProgressViewController, NSArray, NSImage, NSMutableDictionary, NSView, NSString, SSBorderView, NSError, NWDatagramConnection, NSObject, SSConnectionAddressViewController, SSFadeView, SSSessionSelectViewController, NSTimer, SSConnectionWindowController, NSOrderedSet, SSFrameBufferView, AVConference, NSShadow, AVCRemoteVideoClient;
@protocol SSLocalDisplayMonitoring, SSSocketConnectionBackChannel, OS_dispatch_semaphore, SSSessionFileTransferDelegate, SSSocketConnection, SSSessionViewDelegate;

@interface SSSessionView : NSView <IDSSessionDelegate, SSConnectionProgressViewControllerDelegate, SSSessionSelectViewControllerDelegate, SSCurtainMessageViewControllerDelegate, SSConnectionPromptObserver, AVConferenceDelegate, AVCRemoteVideoClientDelegate, CALayerDelegate, AXSSRemoteDesktopViewerDelegate, SSConnectionAccessibilityViewControllerDelegate, SSSessionDelegate, SSFrameBufferViewDelegate, SSAddressResolutionObserver, SSCredentialsRequester, SSFadeViewDelegate, NSWindowDelegate, NSWindowRestoration, NSMutableCopying, SSSocketConnectionBackChannel> {
    NSOrderedSet *_preferredURLs;
    long long _callID;
    double _borderSpacing;
    double _borderWidth;
    struct CGColor { } *_borderColor;
    NSShadow *_borderShadow;
    NSObject<OS_dispatch_semaphore> *_AVConferenceSemaphore;
    NSObject<OS_dispatch_semaphore> *_AVConferenceJ99Semaphore;
    NSObject<OS_dispatch_semaphore> *_stopCallIDSemaphore;
    BOOL _assistModeWithMouseUp;
}

@property long long _controlMode;
@property BOOL _curtained;
@property BOOL _shouldShowCursorForUnknownCursorState;
@property (retain) NSCursor *_observeCursor;
@property (retain) NSCursor *_hilightCursor;
@property (retain) NSCursor *_controlCursor;
@property BOOL _fillsWindow;
@property BOOL _shouldSharePasteboard;
@property BOOL _shouldAllowSendPasteboard;
@property BOOL _allowsFileTransferToRemote;
@property BOOL _allowsFileTransferFromRemote;
@property id<SSSessionFileTransferDelegate> _fileTransferDelegate;
@property (retain) SSScreenInfo *_selectedScreen;
@property (copy) NSArray *screens;
@property (retain) NSImage *userPicture;
@property BOOL hasUnknownCursorState;
@property (retain) SSSession *session;
@property (retain) SSFrameBufferView *frameBufferView;
@property (retain) SSPanningScrollView *scrollView;
@property (retain) SSBorderView *_borderView;
@property (retain) SSFadeView *reconnectOverlay;
@property (retain) SSSessionSelectViewController *sessionSelectViewController;
@property (retain) SSConnectionProgressViewController *connectionProgressViewController;
@property (retain) SSConnectionAddressViewController *connectionAddressViewController;
@property (retain) SSConnectionAuthenticationViewController *connectionAuthenticationViewController;
@property (retain) SSCurtainMessageViewController *curtainMessageViewController;
@property (retain) SSNotificationOverlayViewController *overlayNotificationViewController;
@property (retain, nonatomic) NSObject<SSLocalDisplayMonitoring> *localDisplayMonitor;
@property (retain) SSConnectionAccessibilityViewController *connectionAccessibilityViewController;
@property BOOL didCheckAccessibilityOnce;
@property BOOL didEnableAccessibilityFeatureOnce;
@property struct OpaqueEventHandlerRef { } *menuAutoShowEventHandler;
@property int sessionState;
@property (readonly) BOOL isDisconnected;
@property (readonly) BOOL isNotConnected;
@property BOOL hasEntireScreen;
@property BOOL shouldReauthenticate;
@property BOOL sessionAllowsControl;
@property BOOL requestedControl;
@property BOOL isOffConsole;
@property (readonly) BOOL isBonjourSession;
@property (readonly) BOOL isForcedViewer;
@property BOOL showingFullScreenMenuBar;
@property BOOL simulatingLiveResize;
@property (nonatomic) BOOL isUsingVirtualDisplay;
@property BOOL clientChangedCurtainMode;
@property BOOL shouldNotifyOfVirtualDisplayStateChange;
@property BOOL shouldNotifyOfFailureToEnterCurtainMode;
@property BOOL shouldNotifyOfFailureToExitCurtainMode;
@property BOOL shouldNotifyOfAllowsControlStateChange;
@property BOOL shouldSuppressFirstControlStateOverlay;
@property BOOL userHasAlreadyAgreedToProceedWithUnencryptedLegacyVNC;
@property (getter=isAnimatingResize) BOOL animatingResize;
@property BOOL settingSizeForZoom;
@property BOOL deferredRequestUpdates;
@property struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } deferredRequestFrameRect;
@property BOOL switchedDisplay;
@property BOOL shouldSkipAddressWindow;
@property (retain) NSTimer *connectionProgressTimer;
@property (retain) NSTimer *connectionProgressTimeoutTimer;
@property (copy) NSString *curtainMessage;
@property (copy) NSString *cachedURL;
@property (copy) NSOrderedSet *preferredURLs;
@property (retain) NSMutableOrderedSet *attemptedURLs;
@property (retain) NSMutableOrderedSet *availableKerberosIdentities;
@property (copy) NSOrderedSet *preferredCredentials;
@property (retain) NSMutableOrderedSet *attemptedCredentials;
@property (copy) NSString *currentConsoleUser;
@property long long chosenSessionSelectionAction;
@property (copy) NSString *requestConsoleCommand;
@property (copy) NSDate *resolveStartTime;
@property (copy) NSString *bonjourDisplayName;
@property (copy) NSArray *resolvedAddresses;
@property (copy) NSArray *unresolvedAddresses;
@property (copy) NSString *userEnteredAddressString;
@property (retain) NSMutableArray *attemptedAuthTypes;
@property (retain) NSString *kerberosClientPrincipal;
@property (retain) NSString *lastRetainedKerberosClientPrincipal;
@property (readonly) BOOL isFullScreen;
@property (readonly) BOOL isFullScreen2Up;
@property BOOL isSplitScreen;
@property BOOL changingFullScreenMode;
@property BOOL mouseButtonIsDown;
@property BOOL menuBarIsLocked;
@property (retain) NSTimer *menuBarUnlockTimer;
@property (retain) NSTrackingArea *menuBarTrackingArea;
@property (retain) NSMutableArray *cursorTrackingAreas;
@property unsigned long long menuBarLockCounter;
@property BOOL loggedAppleIDEndSessionMessage;
@property BOOL userClosedSessionWindow;
@property struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } screenFrame;
@property (retain) NWDatagramConnection *datagramConnection;
@property (retain) NSDictionary *AVConferenceAcceptDictionary;
@property (retain) NSDictionary *AVConferenceNegotiatorAnswer;
@property BOOL useAVConference;
@property BOOL stoppingSession;
@property BOOL AppleIDInviteWasAcceptedOrDeclined;
@property BOOL audioCanBeEnabled;
@property struct SSOrientationDetails { unsigned long long time_received; BOOL disable_J99_hack; struct CGSize { double width; double height; } dimensions; int orientation; } savedScreenOrientation;
@property (retain) NSNumber *osVersion;
@property (retain) NSString *osType;
@property unsigned int desiredLayerRotation;
@property (nonatomic) int avcMediaDeviceOrientation;
@property struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } occlusionFrame;
@property double occlusionScaleFactor;
@property BOOL isSessionPausedbyServer;
@property (retain) IDSService *serviceMessageIDSService;
@property (retain) NSString *serviceMessageDestination;
@property (retain) SSCallWindowController *callWindowController;
@property BOOL shareSettingsSessionEnded;
@property BOOL isAMutableCopy;
@property (retain, nonatomic) NSDictionary *currentDynamicSize;
@property BOOL enteringDynamicResolutionMode;
@property BOOL switchToDynamicResolutionWhenReady;
@property struct CGSize { double width; double height; } dynamicResolutionMaxPixels;
@property BOOL isGuestAccessAllowed;
@property (retain, nonatomic) NSCursor *remoteCursor;
@property (nonatomic) BOOL setLocalCursorMagnification;
@property (nonatomic) BOOL avcLayersSwapped;
@property (nonatomic) AVCRemoteVideoClient *remoteVideo1Client;
@property (nonatomic) AVCRemoteVideoClient *remoteVideo2Client;
@property BOOL isMediaStreamErrorAlertShown;
@property (nonatomic) BOOL connectionDoesNotSupportProMode;
@property (nonatomic) BOOL viewerCursorVisible;
@property (nonatomic) BOOL isSessionPausedByViewer;
@property (nonatomic) BOOL isSessionTerminated;
@property (nonatomic) int deviceClamshellStatus;
@property (nonatomic) struct IONotificationPort { } *ioNotificationPort;
@property (nonatomic) unsigned int serviceNotification;
@property (nonatomic) BOOL isDeviceClamshellCallbackRegistered;
@property (nonatomic) BOOL isServerDisplaySleeping;
@property (nonatomic) BOOL alertWindowVisible;
@property BOOL keyboardFocusEnabled;
@property (retain) IDSSession *idsSession;
@property (retain) IDSSession *idsSessionOSX_QR;
@property (retain) IDSSession *idsSessionThatWasAccepted;
@property (readonly) BOOL idsInviteAcceptedWithScreenSharingQRService;
@property (retain) IDSSession *idsSessionThatWasDeclined;
@property (readonly, retain) NSView *borderView;
@property id<SSSessionFileTransferDelegate> fileTransferDelegate;
@property (weak) id<SSSessionViewDelegate> delegate;
@property (readonly) BOOL audioChatSupported;
@property (readonly) BOOL audioChatEnabled;
@property (getter=isAudioChatMuted) BOOL audioChatMuted;
@property BOOL fillsWindow;
@property double borderSpacing;
@property double borderWidth;
@property struct CGColor { } *borderColor;
@property BOOL userEndedConnection;
@property BOOL shouldScaleScreen;
@property BOOL shouldSharePasteboard;
@property BOOL shouldAllowSendPasteboard;
@property (getter=isCurtained) BOOL curtained;
@property long long controlMode;
@property (retain) SSScreenInfo *selectedScreen;
@property long long screenQualityMode;
@property BOOL inZoom;
@property (readonly) BOOL dynamicResolutionModeAvailable;
@property BOOL dynamicResolutionMode;
@property (readonly, nonatomic) BOOL isReferenceHDRModeAvailableOnServer;
@property (nonatomic, getter=isReferenceHDRModeEnabled) BOOL referenceHDRModeEnabled;
@property (readonly, nonatomic, getter=isWindowIsOnDisplayWithHDRAvailability) BOOL windowIsOnDisplayWithHDRAvailability;
@property (readonly, nonatomic) NSError *HDRReferenceModeEnablementError;
@property (retain) NSCursor *observeCursor;
@property (retain) NSCursor *hilightCursor;
@property (retain) NSCursor *controlCursor;
@property BOOL shouldShowCursorForUnknownCursorState;
@property BOOL quarantined;
@property BOOL allowsFileTransferToRemote;
@property BOOL allowsFileTransferFromRemote;
@property BOOL allowsSSHTunnelForLegacyVNC;
@property BOOL shouldWarnUserForUnencryptedLegacyVNC;
@property BOOL assistModeEnabled;
@property (nonatomic) BOOL assistModeActive;
@property BOOL assistModeWithMouseUp;
@property (nonatomic) unsigned int assistPointerKind;
@property (retain) SSCredentials *cachedCredentials;
@property (readonly) BOOL isConnecting;
@property (readonly) BOOL isReconnecting;
@property (readonly) BOOL isConnected;
@property (readonly) BOOL isControlling;
@property (readonly) BOOL isSharingControl;
@property (readonly) BOOL isLegacyVNC;
@property (readonly) BOOL isSessionVisible;
@property (readonly) BOOL isGatheringAddressForConnection;
@property (readonly) BOOL isSelectingSession;
@property (readonly) BOOL isInLiveResize;
@property (readonly) BOOL supportsCopyPaste;
@property (readonly) BOOL supportsSharedPasteboard;
@property (readonly) BOOL supportsCurtainMode;
@property (readonly) BOOL supportsScalingScreen;
@property (readonly) BOOL supportsChangingScreenQualityMode;
@property (readonly) BOOL supportsControlMode;
@property (readonly) BOOL supportsControlModeRequest;
@property (readonly) BOOL supportsAssistMode;
@property (readonly) BOOL supportsFileTransfer;
@property (readonly) BOOL supportsViewerPause;
@property (readonly) BOOL supportsViewerAskToResume;
@property (readonly) BOOL supportsAskToPutTextIntoClipboard;
@property (readonly) BOOL supportsAskToOpenURL;
@property (readonly) BOOL supportsTextMessage;
@property (readonly) BOOL supportsAssistModeColorChange;
@property (readonly) BOOL supportsAssistModeDirectionChange;
@property (readonly) BOOL supportsAssistModeAnnotation;
@property (readonly) BOOL isAppleIDInvitationSession;
@property double lastResignTime;
@property (retain) NSMutableDictionary *netAuthContext;
@property (retain) NSXPCConnection *xpcConnection;
@property (retain) NSObject<SSSocketConnection> *connectionToInvitationAgent;
@property (retain) NSObject<SSSocketConnectionBackChannel> *connectionToInvitationAgentBackChannel;
@property (retain) NSString *connectionIDFromInvitationAgent;
@property BOOL audioChatStatusFromAgent;
@property BOOL audioMuteStatusFromAgent;
@property (retain) SSConnectionWindowController *connectionWindowController;
@property (retain) AVConference *avConference;
@property (retain) AVCRemoteVideoClient *remoteVideoClient;
@property (retain) CALayer *AVConferenceVideoLayer;
@property BOOL AVConferenceVideoAtttributesSet;
@property (nonatomic) BOOL keyboardSourceShared;
@property BOOL canToggleCurtainMode;
@property (readonly) struct CGSize { double x0; double x1; } contentSize;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } sessionFrame;
@property (readonly, getter=isUsingAVCMediaStream) BOOL usingAVCMediaStream;
@property (nonatomic) BOOL suppressWindowDrawing;
@property (retain) AXSSRemoteDesktopViewer *axRemoteDesktopViewer;
@property (readonly) BOOL isDeviceAudioStreamSupported;
@property (nonatomic, getter=isDeviceAudioStreamPaused) BOOL deviceAudioStreamPaused;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)automaticallyNotifiesObserversForKey:(id)a0;
+ (void)restoreWindowWithIdentifier:(id)a0 state:(id)a1 completionHandler:(id /* block */)a2;
+ (id)colorizeImage:(id)a0 withColor:(id)a1;
+ (id)defaultScreenCaptureFileName;
+ (BOOL)isRedwoodApp;
+ (id)keyPathsForValuesAffectingAllowsFileTransferFromRemote;
+ (id)keyPathsForValuesAffectingAllowsFileTransferToRemote;
+ (id)keyPathsForValuesAffectingControlMode;
+ (id)keyPathsForValuesAffectingCurtained;
+ (id)keyPathsForValuesAffectingFileTransferDelegate;
+ (id)keyPathsForValuesAffectingFillsWindow;
+ (id)keyPathsForValuesAffectingHDRReferenceModeEnablementError;
+ (id)keyPathsForValuesAffectingIsConnected;
+ (id)keyPathsForValuesAffectingIsConnecting;
+ (id)keyPathsForValuesAffectingIsControlling;
+ (id)keyPathsForValuesAffectingIsDisconnected;
+ (id)keyPathsForValuesAffectingIsLegacyVNC;
+ (id)keyPathsForValuesAffectingIsNotConnected;
+ (id)keyPathsForValuesAffectingIsReconnecting;
+ (id)keyPathsForValuesAffectingIsReferenceHDRModeAvailableOnServer;
+ (id)keyPathsForValuesAffectingReferenceHDRModeEnabled;
+ (id)keyPathsForValuesAffectingRequestControl;
+ (id)keyPathsForValuesAffectingSelectedScreen;
+ (id)keyPathsForValuesAffectingShouldScaleScreen;
+ (id)keyPathsForValuesAffectingShouldSharePasteboard;
+ (id)keyPathsForValuesAffectingSupportsChangingScreenQualityMode;
+ (id)keyPathsForValuesAffectingSupportsControlMode;
+ (id)keyPathsForValuesAffectingSupportsControlModeRequest;
+ (id)keyPathsForValuesAffectingSupportsCopyPaste;
+ (id)keyPathsForValuesAffectingSupportsCurtainMode;
+ (id)keyPathsForValuesAffectingSupportsFileTransfer;
+ (id)keyPathsForValuesAffectingSupportsScalingScreen;
+ (id)keyPathsForValuesAffectingSupportsSharedPasteboard;
+ (id)keyPathsForValuesAffectingWindowIsOnDisplayWithHDRAvailability;
+ (BOOL)screenSharingEnabledLocally;

- (void)windowDidResignKey:(id)a0;
- (void)windowDidChangeOcclusionState:(id)a0;
- (struct CGSize { double x0; double x1; })window:(id)a0 willUseFullScreenContentSize:(struct CGSize { double x0; double x1; })a1;
- (void)windowDidResize:(id)a0;
- (void)windowWillEnterFullScreen:(id)a0;
- (void)windowDidMiniaturize:(id)a0;
- (void)windowDidBecomeKey:(id)a0;
- (unsigned long long)window:(id)a0 willUseFullScreenPresentationOptions:(unsigned long long)a1;
- (void)windowDidMove:(id)a0;
- (BOOL)windowShouldClose:(id)a0;
- (void)windowDidChangeScreen:(id)a0;
- (void)windowDidExitFullScreen:(id)a0;
- (void)windowDidDeminiaturize:(id)a0;
- (void)windowWillClose:(id)a0;
- (void)windowWillExitFullScreen:(id)a0;
- (id)mutableCopyWithZone:(struct _NSZone { } *)a0;
- (void)viewWillMoveToWindow:(id)a0;
- (void)commonInit;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)service:(id)a0 account:(id)a1 identifier:(id)a2 hasBeenDeliveredWithContext:(id)a3;
- (void)focus;
- (id)shadow;
- (id)displayName;
- (double)aspectRatio;
- (id)accessibilityIdentifier;
- (id)accessibilityValue;
- (void)updateTrackingAreas;
- (id)accessibilityTitle;
- (void)viewDidMoveToWindow;
- (id)initWithCoder:(id)a0;
- (id)accessibilityRole;
- (void)connect;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)windowDidEnterFullScreen:(id)a0;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (BOOL)isAccessibilityElement;
- (id)imageNamed:(id)a0;
- (void).cxx_destruct;
- (void)cursorUpdate:(id)a0;
- (BOOL)isAccessibilitySelected;
- (short)menuBarHeight;
- (void)mouseMoved:(id)a0;
- (struct CGPoint { double x0; double x1; })scrollPosition;
- (void)setAccessibilitySelected:(BOOL)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setShadow:(id)a0;
- (void)viewDidEndLiveResize;
- (void)viewDidHide;
- (void)viewDidUnhide;
- (void)viewWillStartLiveResize;
- (BOOL)window:(id)a0 shouldPopUpDocumentPathMenu:(id)a1;
- (void)window:(id)a0 willEncodeRestorableState:(id)a1;
- (void)windowDidChangeBackingProperties:(id)a0;
- (void)sessionStarted:(id)a0;
- (void)session:(id)a0 didReceiveData:(id)a1;
- (void)session:(id)a0 receivedInvitationAcceptFromID:(id)a1 withData:(id)a2;
- (void)session:(id)a0 receivedInvitationCancelFromID:(id)a1 withData:(id)a2;
- (void)session:(id)a0 receivedInvitationDeclineFromID:(id)a1 withData:(id)a2;
- (void)session:(id)a0 receivedSessionEndFromID:(id)a1 withData:(id)a2;
- (void)session:(id)a0 receivedSessionMessageFromID:(id)a1 withData:(id)a2;
- (void)sessionEnded:(id)a0 withReason:(unsigned int)a1 error:(id)a2;
- (void)requestUpdates;
- (void)pauseSession;
- (void)connectWithOptions:(id)a0;
- (int)enableAccessibilityFeature:(unsigned long long)a0 enabled:(BOOL)a1 settings:(id)a2;
- (void)escapeRemoteWindow;
- (void)localFeature:(unsigned long long)a0 enabled:(BOOL)a1;
- (id)remoteServerName;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })screenRectFromRemoteRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (int)sendViewerAccessibilityMessageWithFeature:(unsigned long long)a0 message:(unsigned long long)a1 messageID:(unsigned int)a2 timeout:(double)a3 userInfo:(id)a4;
- (void)closeSession;
- (void)conference:(id)a0 cancelRelayRequest:(long long)a1 requestDict:(id)a2;
- (void)conference:(id)a0 didStartSession:(BOOL)a1 withUserInfo:(id)a2;
- (void)conference:(id)a0 didStopWithCallID:(long long)a1 error:(id)a2;
- (void)conference:(id)a0 inititiateRelayRequest:(long long)a1 requestDict:(id)a2;
- (void)conference:(id)a0 receivedFirstRemoteFrameForCallID:(long long)a1;
- (void)conference:(id)a0 remoteAudioPaused:(BOOL)a1 callID:(long long)a2;
- (void)conference:(id)a0 remoteScreenAttributesChanged:(id)a1 callID:(long long)a2;
- (void)conference:(id)a0 remoteVideoAttributesChanged:(id)a1 callID:(long long)a2;
- (void)conference:(id)a0 remoteVideoPaused:(BOOL)a1 callID:(long long)a2;
- (void)conference:(id)a0 sendRelayUpdate:(long long)a1 updateDict:(id)a2;
- (void)conference:(id)a0 updateInputFrequencyLevel:(id)a1;
- (void)conference:(id)a0 updateOutputFrequencyLevel:(id)a1;
- (void)conference:(id)a0 videoQualityNotificationForCallID:(long long)a1 isDegraded:(BOOL)a2 isRemote:(BOOL)a3;
- (void)conference:(id)a0 withCallID:(long long)a1 networkHint:(BOOL)a2;
- (void)conference:(id)a0 withCallID:(long long)a1 remoteMediaStalled:(BOOL)a2;
- (void)serverDiedForConference:(id)a0;
- (void)AccessibilityMouseSettingsChangedNotification:(id)a0;
- (int)J99HackForScreenOrientation:(int)a0 videoOrientation:(int)a1;
- (void)cancelProgress:(id)a0;
- (void)captureScreen2:(id)a0;
- (void)gatheredCredentials:(id)a0 withStatus:(int)a1;
- (id)invisibleCursor;
- (id)lockedByMessageWithUserMessage:(id)a0;
- (id)remoteDragImage;
- (BOOL)scrollbarActive;
- (void)showAuthenticationFailedWarning;
- (void)ssSession:(id)a0 authenticationResult:(int)a1;
- (BOOL)ssSessionWantsProModeInterface:(id)a0;
- (struct CGSize { double x0; double x1; })subtractWindowOverheadFromSize:(struct CGSize { double x0; double x1; })a0;
- (void)IDSServiceMessageReceived:(id)a0 context:(id)a1;
- (void)addressEntered:(id)a0;
- (void)captureScreen1:(id)a0;
- (long long)frameBufferViewWantsScalingMode;
- (void)installMenuBarTransitionHandler;
- (BOOL)isConnectionProgressViewVisible;
- (BOOL)proModeBreakout;
- (void)setDynamicSize:(struct CGSize { double x0; double x1; })a0;
- (void)showAuthenticationNoMechWarning;
- (void)ssSessionReady:(id)a0;
- (void)unregisterForSessionObservation;
- (void)_populateViewerEnabledAccessibilityFeatures:(id)a0 serverEnabledFeatures:(id)a1 shouldSuggestFeature:(BOOL *)a2;
- (void)_setKeyboardFocus:(BOOL)a0;
- (void)accessibilityServerMessageOnMainThread:(id)a0;
- (void)activeSessionEndedWithReason:(unsigned int)a0 error:(id)a1;
- (void)addCursorTrackingArea;
- (struct CGSize { double x0; double x1; })addInsets:(struct Rect { short x0; short x1; short x2; short x3; })a0 toSize:(struct CGSize { double x0; double x1; })a1;
- (void)addMenuBarTrackingArea;
- (struct CGSize { double x0; double x1; })addWindowOverheadToSize:(struct CGSize { double x0; double x1; })a0;
- (void)addressResolutionFailedMainThread:(id)a0;
- (void)addressesResolvedMainThread:(id)a0;
- (void)adjustShrinkModeForEvent:(id)a0;
- (struct CGSize { double x0; double x1; })adjustedContentSize:(struct CGSize { double x0; double x1; })a0 forContainingRectWithSize:(struct CGSize { double x0; double x1; })a1 unscaledSize:(struct CGSize { double x0; double x1; })a2 resultingScalingFactor:(double *)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forContainingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 positionAdjustment:(int)a2 sessionInsets:(struct Rect { short x0; short x1; short x2; short x3; })a3 containingRectInsets:(struct Rect { short x0; short x1; short x2; short x3; })a4 unscaledSize:(struct CGSize { double x0; double x1; })a5 resultingScalingFactor:(double *)a6;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forUnscaledSize:(struct CGSize { double x0; double x1; })a1 withResultingScalingFactor:(double *)a2;
- (double)adjustedScalingFactorForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)armMenuBarUnlockTimer;
- (void)armUnlockMenuBarTimer;
- (BOOL)aspectRatio:(struct CGSize { double x0; double x1; })a0 matches:(struct CGSize { double x0; double x1; })a1;
- (void)assignReadOnlyPropertiesWithSSSessionView:(id)a0;
- (id)assistPointerColor;
- (BOOL)breakout;
- (BOOL)cachedCredentialsAreValidForAuthType:(id)a0;
- (BOOL)canShowAccessibilitySheetManuallyTriggered:(BOOL)a0;
- (BOOL)canShowAccessibilitySheetManuallyTriggered:(BOOL)a0 outLocalizedDisabledReason:(id *)a1;
- (void)cancelConnection;
- (void)cancelConnectionWithID:(id)a0;
- (void)cancelResolve:(id)a0;
- (void)captureScreen:(id)a0;
- (void)captureScreenBufferToFileURL:(id)a0;
- (int)checkDeviceClamshellStatus;
- (void)cleanupForCancel;
- (void)cleanupUserCancelledCredentialsRequest;
- (void)clearAllViewControllers;
- (void)clearCredentialsAndConnect;
- (void)clearSessionStateAndDisconnect:(BOOL)a0 shouldDismissNotificationOverlay:(BOOL)a1;
- (void)closeConnectingWindow;
- (void)closeConnectionWindow;
- (void)closeOpenProModeSession;
- (BOOL)closeOrReshowConnectionAddressWindow;
- (void)configureDragAndDropFileCopy;
- (void)configureForNewFillsWindowValue:(BOOL)a0 withOldValue:(BOOL)a1 oldWindow:(id)a2 newWindow:(id)a3;
- (void)configureInputEventConsumer;
- (void)configurePanningMode:(long long)a0;
- (void)configureViewerForLocalContentsScale;
- (void)configureViewerForScaling:(long long)a0;
- (void)connectToAddress:(id)a0 withOptions:(id)a1;
- (void)connectToURL:(id)a0 withOptions:(id)a1;
- (void)connectToURL:(id)a0 withPreferredCredentials:(id)a1 options:(id)a2;
- (void)connectToURLs:(id)a0 withOptions:(id)a1;
- (void)connectToURLs:(id)a0 withPreferredCredentials:(id)a1 options:(id)a2;
- (void)connectionCanceled;
- (void)continueConnection:(id)a0;
- (id)convertKeychainArrayToDictionaries:(id)a0;
- (struct CGImage { } *)copyCGImageFromRemoteScreen;
- (id)copyInviteDictionaryForRemoteInviteDictionary:(id)a0;
- (void)credentialsEntered;
- (id)cursorForViewMode;
- (void)cursorUpdateCore;
- (void)curtainPromptCanceled;
- (void)curtainPromptConfirmedWithMessage:(id)a0;
- (struct CGSize { double x0; double x1; })defaultInitialSessionSize;
- (void)didFinishDroppingRemotePaths;
- (void)disableScrollbars;
- (void)dismissNotificationOverlayIfNeeded;
- (void)dismissPausedNotification;
- (id)displayNameForDialogs;
- (struct Rect { short x0; short x1; short x2; short x3; })dockAndMenuBarInsets;
- (void)dragEnded;
- (void)dragStarted;
- (BOOL)dynamicDragIsActive;
- (void)endReconnectOverlay:(BOOL)a0;
- (void)endReconnectOverlayQuickReplacement;
- (void)endRequestWithLocalizedErrorString:(id)a0 status:(int)a1;
- (id)escapedURL;
- (id)faceTimeCallWindow;
- (void)fadeDidEnd;
- (void)fetchCredentialsPassword:(id)a0;
- (void)fetchShouldSaveCredentials:(id)a0;
- (void)fillConnectionWindowWithViewFromController:(id)a0;
- (struct __SecKeychainItem { } *)findCredentialInKeychainForAuthType:(id)a0 inRequestedAccountName:(id)a1 outAccountName:(id *)a2;
- (id)findCredentialInKeychainForPersistentRef:(id)a0;
- (void)finishSizeChangedWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (short)fullScreenToolbarHeight;
- (void)fullScreenUsableRectChanged;
- (void)getRemotePasteboard:(id)a0;
- (void)guestAccessRequestCancelled;
- (void)handleDropDownForSessionFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)handleSSInputEvent:(id)a0;
- (void)handleScreenParameterChange:(id)a0;
- (void)handleSessionEnded:(id)a0 fromID:(id)a1 withInfo:(id)a2;
- (void)handleVoiceOverDisabled:(id)a0;
- (void)handleVoiceOverEnabled:(id)a0;
- (BOOL)hasOpenProModeSession;
- (void)initAVConference;
- (void)initAudioAVConference;
- (id)initWithSession:(id)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)isAddressGatheringConnectionViewVisible;
- (BOOL)isConnectionAddressViewVisible;
- (BOOL)isConnectionWindowVisible;
- (BOOL)isFullScreenToolbarAutohidingEnabled;
- (BOOL)isKeyboardSourceShared;
- (BOOL)isSessionSelectViewVisible;
- (BOOL)isWindowVisible:(id)a0;
- (id)kerberosLabel;
- (struct CGSize { double x0; double x1; })largestPossibleSessionSize;
- (struct CGSize { double x0; double x1; })largestPossibleWindowedSessionSize;
- (id)loadCredentialsFromKeychain:(id)a0 forAuthType:(id)a1;
- (void)loadProgressIcon;
- (id)localCursor;
- (void)lockMenuBar;
- (void)lockMenuBar:(BOOL)a0;
- (void)logAddressResolutionToMessageTracerWithStatus:(int)a0;
- (unsigned long long)maxVirtualDisplays;
- (void)menuAutoShowHandlerWithEventKind:(unsigned int)a0 andWillShowMenuBar:(BOOL)a1;
- (void)menuBarUnlockTimer:(id)a0;
- (void)mirrorStateChangeCheck;
- (void)observeDisplayMonitorForDisplayType:(long long)a0;
- (void)onConnectionAccessibilityViewClosed;
- (void)onUserEnableAccessibilityFeature:(unsigned long long)a0 enabled:(BOOL)a1;
- (id)openProModeSessionDisplayName;
- (id)orderedArrayOfAuthTypesForMethod:(long long)a0 preferKerberos:(BOOL)a1 serverAllowedTypes:(id)a2;
- (int)orientationForCurrentAngle;
- (void)pauseScreenSharing;
- (BOOL)perceivedScalingFactorHasChanged;
- (id)principalSetIfKerberosIsInAuthTypes:(id)a0;
- (BOOL)proModeWantsLocalScaleAdjustment;
- (void)propagateMouseDown:(id)a0;
- (void)reconnectSessionAndDontResolve;
- (void)reconnectSessionAndResolve;
- (void)reconnectSessionAndResolve:(BOOL)a0;
- (void)registerForIOKitClamshellNotification;
- (void)registerForSessionObservation;
- (void)releaseKerberosCredential;
- (int)removeCredentialsFromKeychainWithAuthType:(id)a0 accountName:(id)a1;
- (void)removeCursorTrackingArea;
- (void)removeMenuBarTransitionHandler;
- (void)requestSystemInfo:(int)a0 args:(id)a1;
- (void)requestSystemInfo:(int)a0 args:(id)a1 senderToken:(unsigned int)a2;
- (void)requestToCopyTextToPasteboard:(id)a0;
- (void)requestToOpenURL:(id)a0;
- (void)requestToResumeScreenSharing;
- (void)resetMagnification;
- (BOOL)resetScalingFactorIfNeeded:(double)a0 forced:(BOOL)a1;
- (void)resetToUnscrunchedFullScreenMode;
- (void)reshowConnectionAuthenticationWindow;
- (void)reshowConnectionAuthenticationWindow:(BOOL)a0;
- (void)resizeSessionForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)resizeSessionToLargestPossibleSize;
- (void)resolveURL:(id)a0;
- (void)resolvedAddresses:(id)a0 withStatus:(int)a1;
- (void)resolvedBonjourName:(id)a0;
- (void)retainKerberosCredential;
- (void)runClosedConnectionSheetWithLocalizedMessage:(id)a0;
- (void)runUserClosedConnectionSheet;
- (void)saveCredentialsToKeychain;
- (void)saveUserFrame;
- (double)scalingFactorForContentSize:(struct CGSize { double x0; double x1; })a0 unscaledSize:(struct CGSize { double x0; double x1; })a1;
- (double)scalingFactorForContentSizeUnbounded:(struct CGSize { double x0; double x1; })a0 unscaledSize:(struct CGSize { double x0; double x1; })a1;
- (void)scrollToCenter;
- (void)scrollToPosition:(struct CGPoint { double x0; double x1; })a0;
- (void)selectCancelled:(id)a0;
- (void)selectMainDisplay:(id)a0;
- (void)selectVirtualDisplay:(id)a0;
- (struct CGSize { double x0; double x1; })selectedScreenMaxSize;
- (void)sendLocalPasteboard:(id)a0;
- (void)sendServiceMessage:(id)a0 destination:(id)a1 service:(id)a2;
- (BOOL)serverSupportsDynamicDrag;
- (id)servicePrincipalForClientPrincipal:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sessionContainingRect;
- (struct Rect { short x0; short x1; short x2; short x3; })sessionContainingRectInsets;
- (struct Rect { short x0; short x1; short x2; short x3; })sessionInsets;
- (void)setAVCLayers;
- (void)setDynamicResolutionModeCalculateSizeAndSet;
- (void)setDynamicResolutionModeCore:(BOOL)a0;
- (void)setHideCursor:(id)a0;
- (void)setMenuBarDelay:(double)a0;
- (void)setOrientationForConference:(id)a0 videoAttributes:(id)a1 callID:(long long)a2;
- (void)setShowCursor:(id)a0;
- (void)setSwitchedDisplayWithNumber:(id)a0;
- (void)setSystemCursorScalingIfNeeded;
- (void)setViewControllersConnectingState:(BOOL)a0;
- (void)setupFrameBufferViewWithAVConference:(int)a0;
- (void)setupProgressViewController;
- (BOOL)shouldDisablePanningEventsForScalingMode:(long long)a0;
- (BOOL)shouldPreferKerberosWithAuthTypes:(id)a0 wasBTMM:(BOOL *)a1;
- (BOOL)shouldProceedWithGuestConnection;
- (BOOL)shouldProceedWithHostKeyMismatch;
- (BOOL)shouldProceedWithNoVirtualDisplays;
- (BOOL)shouldProceedWithVNC;
- (void)showAccessibilitySheet;
- (void)showAllowsControlStateChangeNotification:(BOOL)a0;
- (void)showAppleIDInvitationWasDeclinedWarning;
- (void)showAppleIDInvitationWasUnansweredWarning;
- (void)showAppleIDIsBlockedWarning;
- (void)showAppleIDIsUnresolvableWarning;
- (void)showAskToObserveWasDeniedWarning;
- (void)showAuthenticationViewForHostName:(id)a0 canConnectAsGuest:(BOOL)a1 vnc:(BOOL)a2;
- (void)showConnectDidFailUI:(int)a0;
- (void)showConnectToSelfWarning;
- (void)showConnectionAddressWindow;
- (void)showConnectionAddressWindowWithURLString:(id)a0;
- (void)showConnectionFailedWarning:(int)a0;
- (void)showConnectionProgressView;
- (void)showConnectionProgressViewWithLabel:(id)a0 identity:(id)a1;
- (void)showConnectionWindowWithViewFromController:(id)a0;
- (void)showControlRequestNotificationOnView:(id)a0;
- (void)showCouldNotControlWarning;
- (void)showCurtainMessageWindow;
- (void)showFailedToChangeSharingModeWarning;
- (void)showFailedToControlWarning;
- (void)showFailedToEnterCurtainModeWarning;
- (void)showFailedToExitCurtainModeWarning;
- (void)showFailedToObserveWarning;
- (void)showIDSIsNotWorkingWarning;
- (void)showInvalidAddressWarning;
- (void)showInvalidURLWarning;
- (void)showManagementAppWarning;
- (void)showMessageToUser:(id)a0;
- (void)showNoFaceTimeCallWarning;
- (void)showNotRedwoodAppWarning;
- (void)showNotificationOverlayOnView:(id)a0 withImage:(id)a1 andLabel:(id)a2 andPersistence:(BOOL)a3;
- (void)showNotificationOverlayWithImage:(id)a0 andLabel:(id)a1 andPersistence:(BOOL)a2;
- (void)showPausedNotification;
- (void)showPermanentFailure;
- (void)showReconnectOverlayView;
- (void)showReconnectOverlayView:(BOOL)a0;
- (void)showReconnectOverlayView:(BOOL)a0 andMaxAlpha:(float)a1;
- (void)showReconnectOverlayView:(BOOL)a0 andMaxAlpha:(float)a1 blurScreen:(BOOL)a2;
- (void)showSSHConfigurationWarning;
- (void)showSSHNotAvailableWarning;
- (void)showSavePanelWithDefaultName:(id)a0 allowedType:(id)a1 sender:(id)a2 completion:(id /* block */)a3;
- (void)showShareConsoleRequestDeniedWarning;
- (void)showWarningWithTitle:(id)a0 andMessage:(id)a1;
- (void)showWarningWithTitle:(id)a0 andMessage:(id)a1 withStatus:(int)a2;
- (void)ssFrameBufferView:(id)a0 didDropRemotePath:(id)a1 atLocalDropDestination:(id)a2 completionHandler:(id /* block */)a3;
- (id)ssFrameBufferView:(id)a0 frameBufferViewForWindow:(id)a1;
- (void)ssSession:(id)a0 accessibilityServerMessageWithFeature:(unsigned int)a1 message:(unsigned int)a2 isReplyToMessageID:(unsigned int)a3 userInfo:(id)a4;
- (void)ssSession:(id)a0 allowsControl:(BOOL)a1;
- (void)ssSession:(id)a0 avcMediaSessionReady:(id)a1 videoClient:(id)a2 audioStream:(id)a3 secondaryVideoStream:(id)a4 secondaryVideoClient:(id)a5;
- (void)ssSession:(id)a0 avcVideoClientDidReceiveFirstFrame:(id)a1;
- (void)ssSession:(id)a0 canToggleCurtainModeChanged:(BOOL)a1 loginWindowLockScreenActive:(BOOL)a2 loginWindowActive:(BOOL)a3;
- (void)ssSession:(id)a0 connectDidFail:(int)a1;
- (void)ssSession:(id)a0 cursorImage:(id)a1 hotSpot:(struct SSPoint { long long x0; long long x1; })a2;
- (void)ssSession:(id)a0 cursorPositionChanged:(struct SSPoint { long long x0; long long x1; })a1;
- (void)ssSession:(id)a0 cursorVisibility:(BOOL)a1;
- (void)ssSession:(id)a0 delegateControlModeSet:(long long)a1;
- (void)ssSession:(id)a0 deviceInfo:(id)a1;
- (void)ssSession:(id)a0 deviceRotation:(unsigned int)a1 deviceOrientation:(int)a2;
- (void)ssSession:(id)a0 didSetLocalWindowUIResolution:(id)a1;
- (void)ssSession:(id)a0 dragDroppedLocalPaths:(id)a1 onRemotePath:(id)a2;
- (void)ssSession:(id)a0 dynamicResolutionChanged:(BOOL)a1;
- (void)ssSession:(id)a0 fileCopyDidComplete:(id)a1;
- (void)ssSession:(id)a0 fileCopyProgressDidUpdate:(id)a1;
- (void)ssSession:(id)a0 fullScreenUpdateProgress:(double)a1;
- (void)ssSession:(id)a0 mediaStreamError:(long long)a1 errorSubCode:(long long)a2;
- (void)ssSession:(id)a0 onConsoleChanged:(BOOL)a1;
- (void)ssSession:(id)a0 serverSecureInput:(BOOL)a1;
- (void)ssSession:(id)a0 sessionSelectionResult:(int)a1;
- (void)ssSession:(id)a0 sizesChanged:(id)a1;
- (void)ssSession:(id)a0 someViewRequestedControlChange:(long long)a1;
- (void)ssSession:(id)a0 systemInfoRequestCompleted:(id)a1;
- (void)ssSession:(id)a0 touchEvent:(id)a1;
- (void)ssSession:(id)a0 virtualDisplayStateChanged:(BOOL)a1;
- (void)ssSession:(id)a0 wantsCredentialsForAuthenticationTypes:(id)a1;
- (void)ssSession:(id)a0 wantsSessionSelection:(id)a1 consoleUser:(id)a2;
- (void)ssSessionBeeped:(id)a0;
- (BOOL)ssSessionContinueWithoutVirtualDisplays:(id)a0;
- (void)ssSessionDisplaysDidSleep:(id)a0;
- (void)ssSessionDisplaysDidWake:(id)a0;
- (BOOL)ssSessionIsRedwood;
- (void)ssSessionPaused:(id)a0;
- (void)ssSessionRemotePasteboardChanged:(id)a0;
- (void)ssSessionRequestToAddTextToPasteboard:(id)a0 result:(int)a1;
- (void)ssSessionRequestToOpenURL:(id)a0 result:(int)a1;
- (void)ssSessionRequestToResume:(id)a0 result:(int)a1;
- (void)ssSessionResumed:(id)a0;
- (void)ssSessionServerUserSessionChanged:(id)a0;
- (void)ssSessionTerminated:(id)a0;
- (void)ssSessionUserClosedConnection:(id)a0;
- (void)ssSessionWantsDisplayConfiguration:(id)a0;
- (void)ssSessionWindowShown;
- (id)standardizedKeychainIdentityWithPort:(id *)a0;
- (id)standardizedUserInputString:(id)a0 port:(id *)a1;
- (void)startAVConferenceCallWithRemoteDictionary:(id)a0;
- (void)startAudioAVConferenceCallWithRemoteDictionary:(id)a0;
- (void)startReconnectOverlay;
- (void)startReconnectOverlayWithDelay:(double)a0 showSpinner:(BOOL)a1;
- (void)startResolveProgress:(id)a0;
- (void)startedBonjourResolveAtTimestamp:(id)a0;
- (void)stopWaitingForUserOnMainDisplay:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })subtractInsets:(struct Rect { short x0; short x1; short x2; short x3; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (struct CGSize { double x0; double x1; })subtractInsets:(struct Rect { short x0; short x1; short x2; short x3; })a0 fromSize:(struct CGSize { double x0; double x1; })a1;
- (void)swapAVCLayers;
- (void)teardownForNewConnectionPrompt;
- (void)toggleKeyboardFocus;
- (void)toggleServerAppWindows;
- (void)toggleServerDesktop;
- (void)toggleServerLaunchpad;
- (void)toggleServerMissionControl;
- (struct Rect { short x0; short x1; short x2; short x3; })toolbarAndTitleBarInsets;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })toolbarRect;
- (struct CGPoint { double x0; double x1; })translatePoint:(struct CGPoint { double x0; double x1; })a0 enclosingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)unlockMenuBar;
- (void)unlockMenuBarTimer:(id)a0;
- (void)unpauseSession;
- (void)unregisterForIOKitClamshellNotification;
- (void)updateAutoLayoutContraintsForView:(id)a0;
- (void)updateConnection;
- (void)userClosedConnectionAlertDidEnd:(id)a0 returnCode:(long long)a1 contextInfo:(void *)a2;
- (BOOL)windowIsFullScreen:(id)a0;
- (struct CGSize { double x0; double x1; })windowOverhead;
- (id)windowRestorationStateForWindow:(id)a0;
- (id)windowToTarget;
- (void)workspaceActiveSpaceChanged:(id)a0;

@end
