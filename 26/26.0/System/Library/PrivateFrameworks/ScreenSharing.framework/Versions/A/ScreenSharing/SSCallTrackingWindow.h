@class NSDraggingSession, NSPasteboard, SSEventSession, NSImage, NSString, NSLayoutConstraint, NSVisualEffectView, SSCallTrackingView, NSViewController, NSArray, NSTrackingArea, NSWindow, SSCallScrollView;

@interface SSCallTrackingWindow : NSWindow <SSCallTrackingViewDelegate, SSSessionDelegate>

@property (retain) NSWindow *window;
@property (retain) NSViewController *callViewController;
@property (retain) NSLayoutConstraint *remoteContentLeading;
@property (retain) NSLayoutConstraint *remoteContentTrailing;
@property (retain) NSLayoutConstraint *remoteContentTop;
@property (retain) NSLayoutConstraint *remoteContentBottom;
@property double wfLeadingAdjust;
@property double wfTrailingAdjust;
@property double wfTopAdjust;
@property double wfBottomAdjust;
@property double rcLeadingAdjust;
@property double rcTrailingAdjust;
@property double rcTopAdjust;
@property double rcBottomAdjust;
@property (retain) NSLayoutConstraint *trackingAreaLeading;
@property (retain) NSLayoutConstraint *trackingAreaTrailing;
@property (retain) NSLayoutConstraint *trackingAreaTop;
@property (retain) NSLayoutConstraint *trackingAreaBottom;
@property BOOL setInitialSize;
@property BOOL exitFullScreenTransition;
@property (retain) NSTrackingArea *scrollViewTrackingArea;
@property (readonly) BOOL supportsFileTransfer;
@property BOOL allowsFileTransferToRemote;
@property BOOL allowsFileTransferFromRemote;
@property (retain) NSPasteboard *remotePasteboard;
@property (retain) NSImage *remoteDragImage;
@property (copy) NSArray *remoteFilePaths;
@property (copy) NSArray *uniqueRemoteFilePaths;
@property (retain) NSDraggingSession *dragSession;
@property (retain) NSArray *savedRegisteredDraggedTypes;
@property (nonatomic) BOOL supportsControlModeRequest;
@property (nonatomic) BOOL keyboardFocusEnabled;
@property NSVisualEffectView *backgroundView;
@property NSLayoutConstraint *backgroundViewTop;
@property (retain) SSCallScrollView *scrollView;
@property (retain) SSCallTrackingView *trackingView;
@property BOOL persistentChrome;
@property BOOL slowAnimation;
@property (readonly, nonatomic) BOOL voiceOverEnabled;
@property double contentCornerRadius;
@property (retain) SSEventSession *eventSession;
@property (readonly) BOOL useAVConference;
@property (readonly) unsigned int desiredLayerRotation;
@property (readonly) struct CGSize { double x0; double x1; } contentSize;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } sessionFrame;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void)close;
- (double)animationResizeTime:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })scrollPosition;
- (void)setActualSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)scrollbarActive;
- (void)configureDragAndDropFileCopy;
- (void)configureInputEventConsumer:(BOOL)a0;
- (void)didFinishDroppingRemotePaths;
- (void)disableScrollbars;
- (void)disallowSharePlaySelection;
- (void)dragEnded;
- (void)dragStarted;
- (void)finishExitFullScreen;
- (double)frameScaleForSession:(id)a0;
- (struct CGSize { double x0; double x1; })frameSizeForSession:(id)a0;
- (BOOL)handleSSInputEvent:(id)a0;
- (BOOL)hasExtraChrome;
- (void)hideTitlebar;
- (BOOL)isTitlebarShowing;
- (BOOL)isWindowFullScreen;
- (BOOL)isWindowTiledFullScreen;
- (void)postResizeSetScrollbars:(struct CGSize { double x0; double x1; })a0 zoomToFit:(BOOL)a1 zoomFactorChanged:(BOOL)a2;
- (void)prepareToExitFullScreen;
- (void)scrollToCenter;
- (void)scrollToPosition:(struct CGPoint { double x0; double x1; })a0;
- (long long)scrollbarWidth;
- (void)setConstraintAdjustmentForChromeless;
- (void)setConstraintAdjustmentValuesForChromeless;
- (void)setConstraintAdjustmentValuesForShowTitlebar;
- (void)setConstraintValues;
- (void)setCornerRadiusForContentSize:(struct CGSize { double x0; double x1; })a0 zoomFactor:(double)a1 zoomToFit:(BOOL)a2;
- (void)setEffectFullScreen:(BOOL)a0;
- (void)setEffectHovering:(BOOL)a0;
- (void)setRemoteContentSize:(struct CGSize { double x0; double x1; })a0 inOutProposedWindowFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 zoomToFit:(BOOL)a2 zoomFactor:(double)a3;
- (void)setupWithCallViewController:(id)a0;
- (void)showTitlebar;
- (void)ssDragRemotePasteboardTransferred:(id)a0 withDragImage:(id)a1 withRemoteFilePaths:(id)a2;
- (void)ssSession:(id)a0 allowsControl:(BOOL)a1;
- (void)ssSession:(id)a0 cursorImage:(id)a1 hotSpot:(struct SSPoint { long long x0; long long x1; })a2;
- (void)ssSession:(id)a0 cursorPositionChanged:(struct SSPoint { long long x0; long long x1; })a1;
- (void)ssSession:(id)a0 cursorVisibility:(BOOL)a1;
- (void)ssView:(id)a0 didDropRemotePath:(id)a1 atLocalDropDestination:(id)a2 completionHandler:(id /* block */)a3;
- (struct CGSize { double x0; double x1; })whatWouldZoomToFitDoWithSize:(struct CGSize { double x0; double x1; })a0;

@end
