@class NSString, NSServiceViewControllerAuxiliary, NSViewServiceMarshal, NSObject, NSWindow;
@protocol NSSecureCoding;

@interface NSServiceViewController : NSViewController {
    NSServiceViewControllerAuxiliary *_aux;
    unsigned char _superLoadViewInProgress : 1;
    unsigned char _setViewIgnoredGeometry : 1;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _retainReleaseLock;
}

@property NSViewServiceMarshal *marshal;
@property (readonly) BOOL makesExplicitResizeRequests;
@property (readonly) BOOL allowsImplicitResizeRequests;
@property (readonly) BOOL allowsWindowFrameOriginChanges;
@property (readonly) BOOL windowSizeConstraintsShouldTrackRemoteView;
@property (readonly) NSWindow *serviceWindow;
@property (readonly) BOOL mostRecentCallToSetViewWasNonNil;
@property (readonly) unsigned int callsToSetViewCount;
@property (readonly) BOOL controllerIsMarzipan;
@property (readonly) unsigned int hostSDKVersion;
@property (readonly) NSString *remoteViewIdentifier;
@property (readonly) BOOL isValid;
@property (readonly) struct CGSize { double x0; double x1; } remoteViewSize;
@property (readonly) struct { unsigned int x0[8]; } hostAppAuditToken;
@property (readonly) NSString *serviceViewControllerIdentifier;
@property (readonly) NSObject<NSSecureCoding> *hostAppClientParameters;

+ (id)exportedInterface;
+ (id)listenerEndpoint;
+ (id)allocWithZone:(struct _NSZone { } *)a0;
+ (BOOL)addCompatibilityDylib:(struct mach_header { unsigned int x0; int x1; int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; } *)a0;
+ (struct __CFString { } *)privateRunLoopMode;
+ (id)serviceViewControllerForWindow:(id)a0;
+ (BOOL)currentAppIsViewService;
+ (id)serviceBundle;
+ (BOOL)windowIsOrWillBeViewServiceWindow:(id)a0;
+ (struct { unsigned int x0[8]; })overrideHostApp;
+ (unsigned int)_windowForContextID:(unsigned int)a0 fromViewService:(int)a1 error:(id *)a2;
+ (unsigned long long)acceptableStyleMask;
+ (BOOL)canBecomeKey;
+ (BOOL)canBecomeMain;
+ (id)controllerForIdentifier:(id)a0;
+ (unsigned int)declinedEventMask;
+ (void)deferBlockOntoMainThread:(id /* block */)a0;
+ (BOOL)dylibsBuiltAgainstAtLeast:(struct { unsigned int x0; unsigned int x1; })a0;
+ (unsigned long long)filterStyleMask:(unsigned long long)a0;
+ (id)flattenEvent:(id)a0;
+ (id)hostAppDescription:(struct { unsigned int x0[8]; })a0;
+ (void)hostAppProcessIdentifierNotFound:(int)a0;
+ (BOOL)overrideHostAppMinimal;
+ (id)remoteViewControllerInterface;
+ (BOOL)setAccessibilityParent:(long long)a0 forWindow:(id)a1;
+ (void)withHostAppAuditToken:(struct { unsigned int x0[8]; })a0 invoke:(id /* block */)a1;
+ (void)withHostProcessIdentifier:(int)a0 invoke:(id /* block */)a1;

- (id)exportedInterface;
- (id)exportedObject;
- (void)loadView;
- (void)dealloc;
- (id)bridge;
- (BOOL)valid;
- (void)invalidate;
- (void)setView:(id)a0;
- (id)initWithNibName:(id)a0 bundle:(id)a1;
- (id)retain;
- (id)initWithWindow:(id)a0;
- (BOOL)invalid;
- (id)description;
- (oneway void)release;
- (id)nibName;
- (void)beginAppearanceTransition:(BOOL)a0;
- (void)endAppearanceTransition;
- (id)nibBundle;
- (id)requestResize:(struct CGSize { double x0; double x1; })a0 animation:(id /* block */)a1 completion:(id /* block */)a2;
- (void)scrollWheel:(id)a0;
- (BOOL)wantsForwardedScrollEventsForAxis:(long long)a0;
- (void)__vbWithLockPerform:(id /* block */)a0;
- (void)declineKeyboardEventsOtherThan:(id)a0;
- (void)__vbSuperRelease;
- (void)_animateLayout:(id /* block */)a0 forWindow:(id)a1 withNewFittingSize:(struct CGSize { double x0; double x1; })a2 completion:(id /* block */)a3;
- (BOOL)_assumeGeometryMeaningfulDuringSetView;
- (void)_didAssociateWithHostWindow;
- (void)_didDisassociateFromHostWindow;
- (BOOL)_explicitSizeRequestInhibitsImplicitSizeRequests;
- (BOOL)_installViewIntoWindow:(id)a0;
- (void)_invalidateRendezvousWindowControllers;
- (id)_redirectTarget:(id)a0 forSelector:(SEL)a1;
- (id)_requestFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 async:(BOOL)a1 hostShouldAnimate:(BOOL)a2 animation:(id /* block */)a3 completion:(id /* block */)a4;
- (id)_requestResize:(struct CGSize { double x0; double x1; })a0 async:(BOOL)a1 hostShouldAnimate:(BOOL)a2 animation:(id /* block */)a3 completion:(id /* block */)a4;
- (BOOL)_respondsToAction:(SEL)a0 forTarget:(id)a1;
- (void)_retainMarshal;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_serviceWindowFrameForRemoteViewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setHostSDKVersion:(unsigned int)a0;
- (BOOL)_shouldBridgeAppearanceTransitions;
- (BOOL)_shouldNormalizeAppearance;
- (BOOL)_shouldRestoreTranslatesAutoresizingMaskIntoConstraints;
- (BOOL)_validateTarget:(id)a0 forAction:(SEL)a1;
- (void)_viewDidChangeEffectiveAppearance:(id)a0;
- (id)accessibilityRoot;
- (void)adjustLayout:(id /* block */)a0 animation:(id /* block */)a1 completion:(id /* block */)a2;
- (void)advanceToRunPhase;
- (BOOL)allowsSnapshot;
- (void)associateMouseAndMouseCursorPosition:(BOOL)a0 completion:(id /* block */)a1;
- (unsigned long long)awakeFromRemoteView;
- (BOOL)canBecomeKey;
- (BOOL)canBecomeMain;
- (void)childWindowDidInvalidate:(id)a0 dueToError:(id)a1;
- (unsigned int)declinedEventMask;
- (void)defaultResizeBehavior;
- (void)deferBlockOntoMainThread:(id /* block */)a0;
- (void)errorOccurred:(id)a0;
- (BOOL)freeWindowShouldRendezvous:(id)a0;
- (void)hostBuiltForPlatform:(unsigned int)a0 againstMinimumSDK:(unsigned int)a1 reply:(id /* block */)a2;
- (void)hostWindowReceivedEventType:(unsigned long long)a0;
- (BOOL)isLayerCentric;
- (id)leastRecentError;
- (id)remoteViewControllerInterface;
- (id)remoteViewControllerProxy;
- (void)remoteViewControllerProxy:(id /* block */)a0;
- (void)remoteViewControllerProxy:(id /* block */)a0 withProxyErrorHandler:(id /* block */)a1;
- (id)remoteViewControllerProxyWithErrorHandler:(id /* block */)a0;
- (BOOL)remoteViewSizeChanged:(struct CGSize { double x0; double x1; })a0 transaction:(id)a1;
- (id)requestFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 animation:(id /* block */)a1 completion:(id /* block */)a2;
- (struct os_unfair_lock_s { unsigned int x0; } *)retainReleaseLock;
- (void)retreatToConfigPhase;
- (id)serviceViewControllerIdentifierCreating:(BOOL)a0;
- (void)setRemoteViewSafeAreaInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (struct CGSize { double x0; double x1; })sizeHint;
- (void)whileMouseIsDisassociatedFromMouseCursorPosition:(id /* block */)a0;
- (void)withHostContextInvoke:(id /* block */)a0;

@end
