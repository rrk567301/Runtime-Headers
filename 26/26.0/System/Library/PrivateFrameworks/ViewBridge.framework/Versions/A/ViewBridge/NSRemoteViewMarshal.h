@class NSDictionary, NSProxy, CALayerHost, NSMutableArray, NSString, NSMutableSet, NSViewRemoteBridge, NSRemoteViewControllerParametersForService, NSArray, NSColor, NSXPCListenerEndpoint, NSCFRunLoopSemaphore, NSObject, NSXPCInterface, NSRemoteView, NSSet, NSWindow, NSData, NSAccessoryViewWindow, NSTrackingArea, NSFakeServiceResponder, NSXPCConnection;
@protocol NSRemoteViewDelegate, NSXPCProxyCreating;

@interface NSRemoteViewMarshal : NSObject <NSRemoteViewMarshal, NSVBRedactedProtocol, NSScrollViewSeparatorTrackingAdapter> {
    CALayerHost *_layerHost;
    NSCFRunLoopSemaphore *_invalidationSemaphore;
    NSRemoteView *_spawnedBy;
    NSObject<NSRemoteViewDelegate> *_delegate;
    NSString *_frameRequestTransactionInProgress;
    double _mostRecentlyReportedScaleFactor;
    struct CGSRegionObject { } *_serviceWindowDragRegion;
    unsigned int _serviceConnectionID;
    unsigned int _lastKnownKeyTestWindowID;
    NSWindow *_sheetParent;
    id _hostWindowLocalEventMonitor;
    id _processNotificationEventMonitor;
    NSData *_mostRecentlySentAppearance;
    NSColor *_serviceWindowBackgroundColor;
    NSData *_mostRecentlyReportedAccessibilityParentToken;
    NSFakeServiceResponder *_fakeServiceResponder;
    struct _NSModalSession { } *_appModalSession;
    NSMutableArray *_deferredSheets;
    NSMutableArray *_legacyAdvanceToConfigPhaseSemaphores;
    NSMutableArray *_childWindowQueue;
    NSMutableSet *_friendlyKeyFocusThieves;
    NSObject *_clientExportedObject;
    struct CGPoint { double x; double y; } _requestedOrigin;
    NSProxy<NSXPCProxyCreating> *_serviceViewControllerProxyWithAnimationSyncInterface;
    NSProxy<NSXPCProxyCreating> *_serviceViewControllerProxyWithClientInterface;
    struct { unsigned long long identifier; BOOL isSuspended; BOOL isAccessoryView; BOOL isInServiceWindow; } _serviceFirstResponder;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _mostRecentFrameInScreenCoords;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _serviceWindowFrameAtBootstrap;
    int _appNapState;
    int _containingWindowOrdering;
    unsigned char _rendezvousWindowKind;
    NSSet *_rendezvousWindowBridgeKeys;
    struct CGSize { double width; double height; } _intrinsicContentSize;
    unsigned int _serviceWindowID;
    struct CGSize { double width; double height; } _serviceViewSizeAtBootstrap;
    struct CGSize { double width; double height; } _windowContentMaxSize;
    struct CGSize { double width; double height; } _windowContentMinSize;
    struct CGSize { double width; double height; } _windowFrameMaxSize;
    struct CGSize { double width; double height; } _windowFrameMinSize;
    NSString *_identifier;
    NSString *_serviceName;
    NSTrackingArea *_trackingArea;
    unsigned long long _wrappedModifySubviewsInProgress;
    unsigned char _bridgePhase;
    unsigned char _windowBase;
    long long _serviceWindowLevelAtBootstrap;
    struct { BOOL immediate; BOOL ultimate; } _lastKnownHostWindowKeyness;
    unsigned long long _serviceWindowStyleMask;
    NSXPCConnection *_serviceMarshalConnection;
    NSXPCInterface *_clientExportedInterface;
    NSXPCListenerEndpoint *_serviceListenerEndpoint;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _retainReleaseLockMarshal;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _retainReleaseLockView;
    unsigned char _shouldMaskToBounds;
    unsigned int _mouseDisassociatedFromMouseCursor;
    unsigned long long _touchBarCount;
    unsigned char _singleTouchBar : 1;
    unsigned char _associated : 1;
    unsigned char _avoidReleasingClientExportedObject : 1;
    unsigned char _connectionConfiguredWithServiceViewControllerClientInterface : 1;
    unsigned char _containingWindowNotifications : 1;
    unsigned char _deferResizeRequestsUntilAfterRunPhase : 1;
    unsigned char _disabledSuddenTermination : 1;
    unsigned char _frameOfServiceWindowChanging : 1;
    unsigned char _hasSheetsBeginning : 1;
    unsigned char _invalid : 1;
    unsigned char _isSettingViewFrame : 1;
    unsigned char _isSettingWindowStyleMask : 1;
    unsigned char _isSheetBeginning : 1;
    unsigned char _knownToBeContentView : 1;
    unsigned char _notifyingDelegateAccessoryWindowDidUpdateConstraintsIfNeeded : 1;
    unsigned char _refuseFirstResponder : 1;
    unsigned char _registeredForAppWideNotifications : 1;
    unsigned char _registeredScrollViewSeparatorTrackingAdapter : 1;
    unsigned char _remoteViewDidEncounterError : 1;
    unsigned char _serviceViewControllerAllowsSnapshot : 1;
    unsigned char _serviceViewControllerIsMarzipan : 1;
    unsigned char _serviceWindowIsKey : 1;
    unsigned char _serviceWindowKeynessChangeInProgress : 1;
    unsigned char _synchronizesImplicitAnimations : 1;
    unsigned char _trustsServiceKeyEvents : 1;
    unsigned char _wantsAggressiveKeyboardFocusTheftCancellation : 1;
    unsigned char _warnedAboutAbsentBridge : 1;
}

@property (retain) NSArray *touchBarsDescription;
@property BOOL shouldColorize;
@property (weak) NSAccessoryViewWindow *accessoryViewWindow;
@property (copy) NSDictionary *remoteAccessibilityChildren;
@property (readonly) NSViewRemoteBridge *bridge;
@property (readonly) NSRemoteView *view;
@property (retain) NSRemoteViewControllerParametersForService *remoteViewControllerParametersForService;
@property BOOL hasScrolledContentsUnderTitlebar;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } scrollViewFrame;
@property (readonly) double separatorOffset;
@property (readonly) BOOL relaxRegistrationRequirements;
@property (readonly) BOOL hasHeader;
@property long long titlebarBackgroundStyle;

+ (void)initialize;
+ (void)handleEventAsHost:(struct __CGEvent { } *)a0 fullDispatch:(BOOL)a1 reply:(id /* block */)a2;
+ (id)nsxpcInterface:(id)a0;
+ (void)_addFreeWindow:(id)a0 parameters:(const struct { struct { unsigned int x0[8]; } x0; struct { unsigned long long x0; unsigned char x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; unsigned int x3; unsigned long long x4; } x1; } *)a1 listenerEndpoint:(id)a2 reply:(id /* block */)a3;
+ (id)eventForEvent:(struct __CGEvent { } *)a0 andWindow:(id)a1;
+ (void)handleEvent:(struct __CGEvent { } *)a0 withRemoteViewToken:(id)a1 fullDispatch:(BOOL)a2 reply:(id /* block */)a3;
+ (void)handleEvent:(struct __CGEvent { } *)a0 withWindowToken:(id)a1 fullDispatch:(BOOL)a2 reply:(id /* block */)a3;

- (void)setCursor:(id)a0;
- (void)dealloc;
- (id)initWithView:(id)a0;
- (id)retain;
- (oneway void)release;
- (void).cxx_destruct;
- (void)endSheet:(id /* block */)a0;
- (void)__vbWithLockPerform:(id /* block */)a0;
- (BOOL)window:(id)a0 isUltimatelySpawnedFrom:(id)a1;
- (void)__vbSuperRelease;
- (BOOL)_topmostAppModalSessionHasRendezvousWindowIdentifier:(id)a0;
- (void)associateMouseAndMouseCursorPosition:(BOOL)a0 completion:(id /* block */)a1;
- (void)beginAppModalSession:(id)a0 parameters:(struct { struct { unsigned long long x0; unsigned char x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; unsigned int x3; unsigned long long x4; } x0; })a1 listenerEndpoint:(id)a2 withReply:(id /* block */)a3;
- (void)beginSheet:(struct { BOOL x0; struct { unsigned long long x0; unsigned char x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; unsigned int x3; unsigned long long x4; } x1; })a0 childIdentifier:(id)a1 modalForWindow:(id)a2 listenerEndpoint:(id)a3 withReply:(id /* block */)a4;
- (void)beginTrackingLoop:(id)a0 reply:(id /* block */)a1;
- (void)builtForPlatform:(unsigned int)a0 againstMinimumSDK:(unsigned int)a1 reply:(id /* block */)a2;
- (void)declineKeyboardEventsOtherThan:(id)a0 completion:(id /* block */)a1;
- (void)dragWindowRelativeToMouseDown:(struct CGPoint { double x0; double x1; })a0;
- (void)endAppModalSession:(id)a0;
- (void)endTrackingLoop:(id)a0 reply:(id /* block */)a1;
- (void)forwardActionUpResponderChain:(id)a0;
- (void)hasAccessoryViewWhichCanBecomeKeyView:(id /* block */)a0;
- (void)hasValidKeyViewInDirection:(unsigned long long)a0 withReply:(id /* block */)a1;
- (void)hideTouchBarPopover:(id)a0;
- (void)hostWindowModalSessionStatus:(id /* block */)a0;
- (void)lastCallImpliedByAdvancingToPhase:(unsigned char)a0;
- (void)matchBootstrapFrameOfWindow:(id)a0;
- (void)registerBridgeKey:(id)a0 defaultObject:(id)a1 owner:(unsigned char)a2;
- (void)registerBridgeKeys:(id)a0;
- (void)remoteViewControllerProxy:(id /* block */)a0;
- (struct os_unfair_lock_s { unsigned int x0; } *)retainReleaseLock;
- (void)retreatToConfigPhase;
- (void)serviceAccessoryViewFrameChanged:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)serviceHasFirstResponder:(struct { unsigned long long x0; BOOL x1; BOOL x2; BOOL x3; })a0 inDirection:(unsigned long long)a1 withReply:(id /* block */)a2;
- (void)serviceHasService:(int)a0;
- (void)serviceHasTouchBars:(id)a0;
- (void)serviceViewReceivedLeftMouseDown:(long long)a0;
- (void)serviceWindowDidBecomeKey;
- (void)serviceWindowDidResignKey;
- (void)serviceWindowHasDragRegion:(id)a0;
- (void)serviceWindowHasScrolledContentsUnderTitlebar:(BOOL)a0;
- (void)serviceWindowReceivedScrollWheel:(id)a0 eventOwner:(unsigned int)a1;
- (void)serviceWindowWouldActivate;
- (void)setHostObject:(id)a0 forKey:(id)a1;
- (void)setServiceContextID:(unsigned int)a0;
- (void)setServiceWindowEventMask:(unsigned long long)a0;
- (void)setServiceWindowStyleMask:(unsigned long long)a0;
- (void)setTouchBar:(id)a0 description:(id)a1;
- (void)setTouchBar:(id)a0 escapeKeyReplacementItem:(id)a1;
- (void)setTouchBar:(id)a0 principalItemIdentifier:(id)a1;
- (void)setTouchBarItem:(id)a0 itemPosition:(id)a1;
- (void)shakeWindow;
- (void)showTouchBarPopover:(id)a0 fromItem:(id)a1 withOverlayIdentifier:(id)a2 withCloseButton:(BOOL)a3 withControlStrip:(BOOL)a4 withOptions:(id)a5;
- (void)updateAccessibilityChildren:(id)a0;
- (void)updateContentMinSize:(struct CGSize { double x0; double x1; })a0 contentMaxSize:(struct CGSize { double x0; double x1; })a1 frameMinSize:(struct CGSize { double x0; double x1; })a2 frameMaxSize:(struct CGSize { double x0; double x1; })a3;
- (void)waitForHostKeysToRegister:(id /* block */)a0;

@end
