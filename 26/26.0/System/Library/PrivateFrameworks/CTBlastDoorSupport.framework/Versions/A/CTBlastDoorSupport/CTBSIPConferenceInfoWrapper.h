@interface CTBSIPConferenceInfoWrapper : NSObject

@property (readonly, nonatomic) struct optional<ctb::SIPConferenceInfo> { union { char __null_state_; struct SIPConferenceInfo { struct optional<ctb::SIPConferenceInfo::Description> { union { char __null_state_; struct Description { struct optional<std::string> { union { char __null_state_; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } __val_; } ; BOOL __engaged_; } fSubject; struct optional<ctb::SIPConferenceInfo::SubjectExt> { union { char __null_state_; struct SubjectExt { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char __data_[23]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; } __rep_; } fParticipantURI; } __val_; } ; BOOL __engaged_; } fSubjectExt; } __val_; } ; BOOL __engaged_; } fDescription; struct vector<ctb::SIPConferenceInfo::User, std::allocator<ctb::SIPConferenceInfo::User>> { struct User *__begin_; struct User *__end_; struct User *__cap_; } fUsers; } __val_; } ; BOOL __engaged_; } wrapped;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initWithWrapped:(struct optional<ctb::SIPConferenceInfo> { union { char x0; struct SIPConferenceInfo { struct optional<ctb::SIPConferenceInfo::Description> { union { char x0; struct Description { struct optional<std::string> { union { char x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x1; } x0; BOOL x1; } x0; struct optional<ctb::SIPConferenceInfo::SubjectExt> { union { char x0; struct SubjectExt { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x0; } x1; } x0; BOOL x1; } x1; } x1; } x0; BOOL x1; } x0; struct vector<ctb::SIPConferenceInfo::User, std::allocator<ctb::SIPConferenceInfo::User>> { struct User *x0; struct User *x1; struct User *x2; } x1; } x1; } x0; BOOL x1; })a0;

@end
