@interface CHPrincipalLineDetector : NSObject

+ (struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; })fixPrincipalLinesPosition:(id)a0 useAltString:(BOOL)a1 skipAmbiguousCharacters:(BOOL)a2;
+ (id)stringForRendering:(id)a0 useAltChars:(BOOL)a1;
+ (double)blindAscenderDeformValue:(id)a0;
+ (double)blindDescenderDeformValue:(id)a0;
+ (id)charactersForRendering;
+ (id)checkAvailableInterceptsForString:(id)a0 skipAmbiguousCharacters:(BOOL)a1;
+ (double)estimatedLeadingForPrincipalLines:(struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; })a0 transcription:(id)a1;
+ (struct CGSize { double x0; double x1; })estimatedRenderedTextSize:(id)a0 fullDeformValue:(double)a1 ascenderDeformValue:(double)a2 descenderDeformValue:(double)a3;
+ (struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; })fixPrincipalLinesOrientation:(id)a0 useAltString:(BOOL)a1 skipAmbiguousCharacters:(BOOL)a2;
+ (struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; })flipPrincipalLine:(struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; })a0 points:(const void *)a1 string:(id)a2 outWasFlipped:(BOOL *)a3;
+ (void)getDeformValuesForTextLine:(id)a0 useAltString:(BOOL)a1 outfullDeform:(double *)a2 outAscenderDeform:(double *)a3 outDescenderDeform:(double *)a4;
+ (id)principalLineInterceptsForPrincipalPoints:(id)a0 orientation:(double)a1;
+ (id)principalLineInterceptsForString:(id)a0 skipAmbiguousCharacters:(BOOL)a1 strokes:(id)a2 strokePoints:(const void *)a3 orientation:(double)a4 medianFallbackThreshold:(double)a5;
+ (id)principalLinePointsForString:(id)a0 skipAmbiguousCharacters:(BOOL)a1 strokes:(id)a2 strokePoints:(const void *)a3 orientation:(double)a4 medianFallbackThreshold:(double)a5;
+ (double)principalLinesFitScore:(const struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; } *)a0 points:(const void *)a1 transcription:(id)a2;
+ (struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; })principalLinesForPoints:(const void *)a0 writtenAlphaShape:(const void *)a1 imgPointsAndPrincipalLines:(const void *)a2 shouldCancel:(id /* block */)a3;
+ (struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; })principalLinesFromPrincipalLinePoints:(id)a0 points:(struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint *x0; struct CGPoint *x1; struct CGPoint *x2; })a1;
+ (struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; })principalLinesFromTokens:(id)a0 strokes:(id)a1 strokePoints:(const void *)a2 orientation:(double)a3 useAltString:(BOOL)a4;
+ (struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; })refinedPrincipalLinesForTextLine:(id)a0 points:(const void *)a1 alphaShape:(const void *)a2 renderedTextPointsAndLines:(struct PointsAndPrincipalLines { struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint *x0; struct CGPoint *x1; struct CGPoint *x2; } x0; struct { struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x1; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x2; struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x3; } x1; })a3 useAltString:(BOOL)a4 shouldCancel:(id /* block */)a5;
+ (double)textLineFitScore:(id)a0 useAltString:(BOOL)a1;

@end
