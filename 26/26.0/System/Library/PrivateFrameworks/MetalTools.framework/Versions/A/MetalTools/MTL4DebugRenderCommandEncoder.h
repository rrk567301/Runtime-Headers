@class MTL4DebugCommandEncoder, baseLevel, MTL4RenderPassDescriptor, MTLLogicalToPhysicalColorAttachmentMap;
@protocol MTLRenderPipelineState, MTLDepthStencilState, MTL4ArgumentTable;

@interface MTL4DebugRenderCommandEncoder : MTL4ToolsRenderCommandEncoder {
    MTL4DebugCommandEncoder *_debugCommandEncoder;
    MTL4RenderPassDescriptor *_descriptor;
    struct MTL4DebugRenderCommandEncoderState { unsigned char canSetRenderPipelineState : 1; unsigned char canSetViewport : 1; unsigned char canSetVertexAmplificationFactor : 1; unsigned char canSetCullMode : 1; unsigned char canSetDepthClipMode : 1; unsigned char canSetDepthBias : 1; unsigned char canSetScissorRect : 1; unsigned char canSetTriangleFillMode : 1; unsigned char canSetBlendColor : 1; unsigned char canSetDepthStencilState : 1; unsigned char canSetStencilReferenceValue : 1; unsigned char canSetVisibilityResultMode : 1; unsigned char canSetFrontFacingWinding : 1; unsigned char hasSetRenderPipelineState : 1; unsigned char hasSetViewport : 1; unsigned char hasSetVertexAmplificationFactor : 1; unsigned char hasSetCullMode : 1; unsigned char hasSetDepthClipMode : 1; unsigned char hasSetDepthBias : 1; unsigned char hasSetScissorRect : 1; unsigned char hasSetTriangleFillMode : 1; unsigned char hasSetBlendColor : 1; unsigned char hasSetDepthStencilState : 1; unsigned char hasSetStencilReferenceValue : 1; unsigned char hasSetVisibilityResultMode : 1; unsigned char hasSetFrontFacingWinding : 1; } _encoderState;
    unsigned int _unknownStoreActions;
    id<MTL4ArgumentTable> _currentVertexArgumentTable;
    id<MTL4ArgumentTable> _currentFragmentArgumentTable;
    id<MTL4ArgumentTable> _currentTileArgumentTable;
    id<MTL4ArgumentTable> _currentObjectArgumentTable;
    id<MTL4ArgumentTable> _currentMeshArgumentTable;
    struct MTLDebugFunctionArgument { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long bufferAttributeStride; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _currentThreadgroupMemoryArguments[31];
    struct MTLDebugFunctionArgument { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long bufferAttributeStride; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _currentObjectThreadgroupMemoryLengths[31];
    id<MTLRenderPipelineState> _currentRenderPipelineState;
    struct vector<MTLViewport, std::allocator<MTLViewport>> { struct *__begin_; struct *__end_; struct *__cap_; } _currentViewports;
    unsigned long long _currentVertexAmplificationCount;
    unsigned long long _currentCullMode;
    unsigned long long _currentDepthClipMode;
    float _currentDepthBias;
    float _currentDepthTestMinBound;
    float _currentDepthTestMaxBound;
    float _currentDepthSlopeScale;
    float _currentDepthClamp;
    struct vector<MTLScissorRect, std::allocator<MTLScissorRect>> { struct *__begin_; struct *__end_; struct *__cap_; } _currentScissorRects;
    unsigned long long _currentTriangleFillMode;
    float _currentBlendColorRed;
    float _currentBlendColorGreen;
    float _currentBlendColorBlue;
    float _currentBlendColorAlpha;
    id<MTLDepthStencilState> _currentDepthStencilState;
    unsigned int _currentStencilFrontReferenceValue;
    unsigned int _currentStencilBackReferenceValue;
    unsigned long long _currentVisibilityResultMode;
    unsigned long long _currentVisibilityResultModeOffset;
    struct set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long>> { struct __tree<unsigned long, std::less<unsigned long>, std::allocator<unsigned long>> { void *__begin_node_; struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __end_node_; unsigned long long __size_; } __tree_; } _allVisibilityOffsets;
    unsigned long long _currentFrontFacingWinding;
    unsigned long long _width;
    unsigned long long _height;
    unsigned long long _resolvedColorSampleCount;
    unsigned long long _resolvedRasterSampleCount;
    MTLLogicalToPhysicalColorAttachmentMap *_colorAttachmentMap;
}

- (void)setLineWidth:(float)a0;
- (void)dealloc;
- (void)setViewport:(struct { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (void)setStencilStoreAction:(unsigned long long)a0;
- (void)setVertexAmplificationCount:(unsigned long long)a0 viewMappings:(const struct { unsigned int x0; unsigned int x1; } *)a1;
- (void)setColorStoreAction:(unsigned long long)a0 atIndex:(unsigned long long)a1;
- (id).cxx_construct;
- (void)executeCommandsInBuffer:(id)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)commandBuffer;
- (void)setDepthStoreAction:(unsigned long long)a0;
- (void)setDepthClipModeSPI:(unsigned long long)a0;
- (void).cxx_destruct;
- (void)setVisibilityResultMode:(unsigned long long)a0 offset:(unsigned long long)a1;
- (void)updateFence:(id)a0 afterEncoderStages:(unsigned long long)a1;
- (void)setScissorRect:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })a0;
- (void)_resetEncoderWithDescriptor:(id)a0;
- (void)_updateEncoderStateAfterDispatch;
- (void)_updateEncoderStateAfterDraw;
- (void)_validateDispatchThreadsPerTileCommon:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a0 threadsPerTile:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a1;
- (void)_validateDrawCommon:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a0 primitiveType:(unsigned long long)a1 instanceCount:(unsigned long long)a2;
- (void)_validateFramebufferCompatibility:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a0 pipelineState:(id)a1;
- (void)_validateFunctionArguments:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a0 stages:(unsigned long long)a1;
- (void)_validateIndexedDrawCommon:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a0 indexBuffer:(unsigned long long)a1 indexType:(unsigned long long)a2 indexBufferLength:(unsigned long long)a3;
- (void)_validateLBRT:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a0;
- (void)_validateMeshDrawCommon:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a0;
- (void)_validateThreadgroupSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 stage:(unsigned long long)a1 context:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a2;
- (void)_validateThreadsPerObjectThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 threadsPerMeshThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a1 context:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a2;
- (void)barrierAfterEncoderStages:(unsigned long long)a0 beforeEncoderStages:(unsigned long long)a1 visibilityOptions:(unsigned long long)a2;
- (void)barrierAfterQueueStages:(unsigned long long)a0 beforeStages:(unsigned long long)a1 visibilityOptions:(unsigned long long)a2;
- (void)barrierAfterStages:(unsigned long long)a0 beforeQueueStages:(unsigned long long)a1 visibilityOptions:(unsigned long long)a2;
- (void)dispatchThreadsPerTile:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0;
- (void)dispatchThreadsPerTile:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 inRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a1;
- (void)dispatchThreadsPerTile:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 inRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a1 withRenderTargetArrayIndex:(unsigned int)a2;
- (void)drawIndexedPrimitives:(unsigned long long)a0 indexCount:(unsigned long long)a1 indexType:(unsigned long long)a2 indexBuffer:(unsigned long long)a3 indexBufferLength:(unsigned long long)a4;
- (void)drawIndexedPrimitives:(unsigned long long)a0 indexCount:(unsigned long long)a1 indexType:(unsigned long long)a2 indexBuffer:(unsigned long long)a3 indexBufferLength:(unsigned long long)a4 instanceCount:(unsigned long long)a5;
- (void)drawIndexedPrimitives:(unsigned long long)a0 indexCount:(unsigned long long)a1 indexType:(unsigned long long)a2 indexBuffer:(unsigned long long)a3 indexBufferLength:(unsigned long long)a4 instanceCount:(unsigned long long)a5 baseVertex:(long long)a6 baseInstance:(unsigned long long)a7;
- (void)drawIndexedPrimitives:(unsigned long long)a0 indexType:(unsigned long long)a1 indexBuffer:(unsigned long long)a2 indexBufferLength:(unsigned long long)a3 indirectBuffer:(unsigned long long)a4;
- (void)drawMeshThreadgroups:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 threadsPerObjectThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a1 threadsPerMeshThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a2;
- (void)drawMeshThreadgroupsWithIndirectBuffer:(unsigned long long)a0 threadsPerObjectThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a1 threadsPerMeshThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a2;
- (void)drawMeshThreads:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 threadsPerObjectThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a1 threadsPerMeshThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a2;
- (void)drawPrimitives:(unsigned long long)a0 indirectBuffer:(unsigned long long)a1;
- (void)drawPrimitives:(unsigned long long)a0 vertexStart:(unsigned long long)a1 vertexCount:(unsigned long long)a2;
- (void)drawPrimitives:(unsigned long long)a0 vertexStart:(unsigned long long)a1 vertexCount:(unsigned long long)a2 instanceCount:(unsigned long long)a3;
- (void)drawPrimitives:(unsigned long long)a0 vertexStart:(unsigned long long)a1 vertexCount:(unsigned long long)a2 instanceCount:(unsigned long long)a3 baseInstance:(unsigned long long)a4;
- (void)endEncoding;
- (void)executeCommandsInBuffer:(id)a0 indirectBuffer:(unsigned long long)a1;
- (id)initWithRenderCommandEncoder:(id)a0 commandBuffer:(id)a1 descriptor:(id)a2;
- (void)setArgumentTable:(id)a0 atStages:(unsigned long long)a1;
- (void)setBlendColorRed:(float)a0 green:(float)a1 blue:(float)a2 alpha:(float)a3;
- (void)setColorAttachmentMap:(id)a0;
- (void)setCommandDataCorruptModeSPI:(unsigned long long)a0;
- (void)setCullMode:(unsigned long long)a0;
- (void)setDepthBias:(float)a0 slopeScale:(float)a1 clamp:(float)a2;
- (void)setDepthClipMode:(unsigned long long)a0;
- (void)setDepthStencilState:(id)a0;
- (void)setDepthTestMinBound:(float)a0 maxBound:(float)a1;
- (void)setFrontFacingWinding:(unsigned long long)a0;
- (void)setObjectThreadgroupMemoryLength:(unsigned long long)a0 atIndex:(unsigned long long)a1;
- (void)setRenderPipelineState:(id)a0;
- (void)setScissorRects:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)a0 count:(unsigned long long)a1;
- (void)setStencilFrontReferenceValue:(unsigned int)a0 backReferenceValue:(unsigned int)a1;
- (void)setStencilReferenceValue:(unsigned int)a0;
- (void)setThreadgroupMemoryLength:(unsigned long long)a0 offset:(unsigned long long)a1 atIndex:(unsigned long long)a2;
- (void)setTriangleFillMode:(unsigned long long)a0;
- (void)setVertexAmplificationMode:(unsigned long long)a0 value:(unsigned long long)a1;
- (void)setViewports:(const struct { double x0; double x1; double x2; double x3; double x4; double x5; } *)a0 count:(unsigned long long)a1;
- (void)waitForFence:(id)a0 beforeEncoderStages:(unsigned long long)a1;
- (void)writeTimestampWithGranularity:(long long)a0 afterStage:(unsigned long long)a1 intoHeap:(id)a2 atIndex:(unsigned long long)a3;

@end
