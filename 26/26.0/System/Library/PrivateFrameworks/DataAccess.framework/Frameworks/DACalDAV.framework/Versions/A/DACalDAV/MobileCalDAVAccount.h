@class NSMutableDictionary, NSURL, MobileCalDAVAccountRefreshActor, NSDictionary, MobileCalDAVPrincipal, ACAccount, DACoreDAVTaskManager, CalDAVPrincipalSearchPropertySet, NSMutableArray, NSSet, NSString, DALocalDBHelper, CalDAVServerVersion, NSMutableSet, CalDAVRefreshContext, NSArray;
@protocol MobileCalDAVDABackingAccount, CalDAVPrincipal;

@interface MobileCalDAVAccount : NSObject <CDBAccountInfo, CalDAVAccount> {
    int _wasMigrated;
    NSMutableSet *_mMovedItemURLStrings;
    NSMutableArray *_duplicateCalendars;
    BOOL _syncInProgress;
}

@property (readonly, nonatomic) ACAccount *backingAccountInfo;
@property (readonly, nonatomic) ACAccount *backingAccountInfo;
@property (readonly, nonatomic) ACAccount *backingAccountInfo;
@property (readonly, nonatomic) ACAccount *backingAccountInfo;
@property (readonly, nonatomic) ACAccount *backingAccountInfo;
@property (retain, nonatomic) MobileCalDAVAccountRefreshActor *actor;
@property (retain, nonatomic) NSMutableSet *searchTaskSet;
@property (retain, nonatomic) NSMutableDictionary *mItemIDsToMoveActions;
@property (retain, nonatomic) NSMutableSet *mMovedItemURLStrings;
@property (retain, nonatomic) NSMutableSet *mCalendars;
@property (readonly, weak, nonatomic) id<MobileCalDAVDABackingAccount> backingAccount;
@property (retain, nonatomic) NSMutableDictionary *mPrincipals;
@property (readonly, nonatomic) NSArray *emailAddresses;
@property (readonly, nonatomic) NSString *preferredAddress;
@property (readonly, nonatomic) NSDictionary *contextDictionary;
@property (readonly, nonatomic) NSArray *spinnerIdentifiers;
@property (nonatomic) BOOL subscribedCalendarsChanged;
@property (nonatomic) int lastSyncedSequenceNumber;
@property (retain, nonatomic) NSString *principalPath;
@property (retain, nonatomic) MobileCalDAVPrincipal<CalDAVPrincipal> *mainPrincipal;
@property (readonly, nonatomic) NSDictionary *principalsDict;
@property (retain, nonatomic) NSURL *principalURL;
@property (readonly, nonatomic) BOOL shouldFailAllTasks;
@property (nonatomic) BOOL isPrimaryAppleAccount;
@property (readonly, nonatomic) BOOL isDelegateAccount;
@property (readonly, nonatomic) NSString *accountID;
@property (readonly, nonatomic) NSString *changeTrackingID;
@property (retain, nonatomic) NSString *accountDescription;
@property (readonly, nonatomic) NSString *publicDescription;
@property (retain, nonatomic) NSString *host;
@property (nonatomic) long long port;
@property (retain, nonatomic) NSString *password;
@property (retain, nonatomic) NSString *username;
@property (nonatomic) BOOL useSSL;
@property (nonatomic) BOOL shouldDoInitialAutodiscovery;
@property (readonly, nonatomic) DALocalDBHelper *dbHelper;
@property (readonly, nonatomic) DACoreDAVTaskManager *taskManager;
@property (retain, nonatomic) NSURL *collectionSetURL;
@property (retain, nonatomic) CalDAVPrincipalSearchPropertySet *searchPropertySet;
@property (nonatomic) double refreshInterval;
@property (nonatomic) BOOL pushDisabled;
@property (nonatomic) BOOL isWritable;
@property (nonatomic) BOOL wasMigrated;
@property (nonatomic) BOOL needsAccountPropertyRefresh;
@property (nonatomic) BOOL isRefreshing;
@property (readonly, nonatomic) NSDictionary *itemIDsToMoveActions;
@property (readonly, nonatomic) NSSet *movedItemURLStrings;
@property (copy, nonatomic) NSString *calendarHomeSyncToken;
@property (retain, nonatomic) CalDAVServerVersion *serverVersion;
@property (nonatomic) int preferredEventDaysToSync;
@property (nonatomic) int preferredToDoDaysToSync;
@property (readonly, nonatomic) BOOL shouldFilterEventSyncTimeRange;
@property (readonly, nonatomic) BOOL shouldFilterSyncTimeRangeForInbox;
@property (readonly, nonatomic) BOOL shouldUseCalendarHomeSyncReport;
@property (nonatomic) BOOL haveForcedDefaultCalendarRefetch;
@property (readonly, nonatomic) BOOL supportsReminders;
@property (readonly, nonatomic) BOOL supportsEvents;
@property (retain, nonatomic) CalDAVRefreshContext *refreshContext;
@property (readonly, nonatomic) NSArray *wellKnownPaths;
@property (readonly, nonatomic) NSSet *calendars;
@property (retain, nonatomic) NSDictionary *subscribedCalendars;
@property (readonly, nonatomic) NSArray *duplicateCalendars;
@property (nonatomic) BOOL searchQueriesShouldCancel;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSString *uid;
@property (readonly, nonatomic) NSArray *principals;

+ (id)_defaultAlarmOffsetFromICSString:(id)a0;

- (id)objectForKeyedSubscript:(id)a0;
- (void)dealloc;
- (void)setObject:(id)a0 forKeyedSubscript:(id)a1;
- (void)_releasePowerAssertion;
- (void)setAccountProperty:(id)a0 forKey:(id)a1;
- (id)init;
- (void)task:(id)a0 didFinishWithError:(id)a1;
- (BOOL)addressURLIsAccountOwner:(id)a0;
- (BOOL)addressIsAccountOwner:(id)a0;
- (void).cxx_destruct;
- (void)removeCalendar:(id)a0;
- (void)reloadCalendars;
- (void)_collectMoveActions;
- (id)_powerAssertionContext;
- (id)_powerAssertionGroupIdentifier;
- (void)_reallyCancelAllSearchQueries;
- (void)_reallyCancelSearchQuery:(id)a0;
- (void)_reallyPerformSearchQuery:(id)a0;
- (BOOL)_reallySearchQueriesRunning;
- (BOOL)_saveModifiedPrincipalsOnBackingAccount;
- (BOOL)_saveModifiedSubscribedCalendarsOnBackingAccount;
- (void)_updateCalendarStore:(BOOL)a0;
- (void)addCalendar:(id)a0;
- (void)addPrincipal:(id)a0;
- (id)addUsernameToURL:(id)a0;
- (void)cancelRefreshWithCompletion:(id /* block */)a0;
- (void)discoverInitialPropertiesWithConsumer:(id)a0;
- (void)discoveryTask:(id)a0 gotAccountInfo:(id)a1 error:(id)a2;
- (BOOL)handleTrustChallenge:(id)a0 completionHandler:(id /* block */)a1;
- (void)ingestBackingAccountInfoProperties;
- (void)noteHomeSetOnDifferentHost:(id)a0;
- (void)refreshActor:(id)a0 didCompleteWithError:(id)a1;
- (void)removeCalendarWithURL:(id)a0;
- (void)removePrincipal:(id)a0;
- (BOOL)saveModifiedPropertiesOnBackingAccount;
- (void)_reallyCancelPendingSearchQuery:(id)a0;
- (void)setEnabled:(BOOL)a0 forDADataclass:(long long)a1;
- (id)initWithBackingAccount:(id)a0;
- (BOOL)_updateCalendarStoreProperties:(void *)a0;
- (id)_calendarConstraintsName;
- (void)_checkExistingStoreAndSetChangeReason;
- (void)_clearOrphanedCalendarItemChangesOfType:(int)a0 withContext:(id)a1 goodCalendarIds:(id)a2;
- (void)_clearOrphanedChangesWithChangesCall:(void /* function */ *)a0 entityType:(int)a1 withContext:(id)a2;
- (void)_clearOrphanedChangesWithContext:(id)a0;
- (id)_collectActionsFromMoveDictionary:(struct __CFDictionary { } *)a0 forDataclass:(id)a1 outShouldSave:(BOOL *)a2;
- (id)_externalInfoDictionary;
- (void)_foundDuplicateCalendar:(id)a0 ofCalendar:(id)a1;
- (void)_foundDuplicateCalendars:(int)a0;
- (void)_logDuplicateCalendarDetails:(void *)a0;
- (void)_retainPowerAssertion;
- (void)calendarsDataclassModified;
- (void *)copyCalStore;
- (id)delegatePrincipalPath;
- (void)didSetAccountDescription;
- (void)refreshWithContext:(id)a0 completion:(id /* block */)a1;
- (void)setDelegatePrincipalPath:(id)a0;
- (void)setIsDelegateAccount:(BOOL)a0;
- (void)syncEndedWithError:(id)a0;
- (void)syncStarted;
- (BOOL)updateCalendarStoreWithAlreadyOpenDBShouldCreate:(BOOL)a0 syncingThisAccount:(BOOL)a1;
- (void)updateDelegatesWithUserInfo:(id)a0;

@end
