@class NSUUID, NSEnumerator, NSDictionary, HMDResidentTakeOverInfo, NSObject, HMDPreferredResidentsList, NSString, NSSet, HMDResidentSelectionStatusKit, NSArray, HMDResidentSelectionInfo, HMDIDSServerBag, HMFTimer, HMDBackgroundTaskManager;
@protocol OS_dispatch_queue, HMDResidentDeviceManagerContext, HMDResidentSelectionModeDelegate;

@interface HMDResidentSelectionMode : NSObject <HMFLogging, HMFMessageReceiver, HMFTimerDelegate, HMDResidentSelectionMode>

@property (retain) HMDResidentSelectionInfo *residentSelectionInfoFromWorkingStore;
@property (retain) HMDPreferredResidentsList *localPreferredResidentsList;
@property (retain) HMDPreferredResidentsList *preferredResidentsListFromElector;
@property (copy) id /* block */ selectionCompletion;
@property (retain) NSEnumerator *residentsEnumerator;
@property (readonly, copy, nonatomic) NSString *backgroundTaskIdentifier;
@property (readonly, nonatomic) HMDBackgroundTaskManager *backgroundTaskManager;
@property (retain) HMFTimer *takeOverIfPrimaryIsNotViableTimer;
@property (retain) HMFTimer *takeOverTimer;
@property (retain) NSDictionary *residentIDSIdentifierToLocationMap;
@property unsigned long long primaryChangedReason;
@property (retain) HMDResidentSelectionStatusKit *presentResidentsStatuses;
@property (readonly, weak) HMDIDSServerBag *idsServerBag;
@property (retain) HMDResidentTakeOverInfo *takeOverInfo;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (readonly, weak, nonatomic) id<HMDResidentDeviceManagerContext> context;
@property (readonly, nonatomic) NSArray *sortedResidents;
@property (readonly) unsigned long long preferredListGenerationStartHour;
@property (readonly) unsigned long long preferredListGenerationEndHour;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSUUID *messageTargetUUID;
@property (readonly, retain, nonatomic) NSObject<OS_dispatch_queue> *messageReceiveQueue;
@property (weak) id<HMDResidentSelectionModeDelegate> delegate;
@property (readonly) unsigned long long currentModeType;
@property (readonly, nonatomic) NSSet *locallyReachableResidents;

+ (id)logCategory;

- (id)dumpState;
- (id)initWithContext:(id)a0;
- (void)start;
- (void)timerDidFire:(id)a0;
- (void)stop;
- (id)logIdentifier;
- (void).cxx_destruct;
- (id)_generatePreferredResidentsList;
- (BOOL)_isViableUserPreferredResident:(id)a0;
- (void)_publishPreferredResidentsList:(id)a0;
- (id)_sortResidentsUsingAllCriteria:(id)a0;
- (void)takeOverWithSelectionTimestamp:(id)a0;
- (void)_registerForMessagesAsAResident;
- (BOOL)_allResidentsHaveSameLocationStatus:(unsigned long long)a0;
- (BOOL)_currentDevicePreferredResidentsListIsPublished;
- (void)_evaluatePrimaryChangedReason;
- (void)_evaluatePrimaryChangedReasonForCurrentSelectionInfo:(id)a0 previousSelectionInfo:(id)a1;
- (id)_highestVersionLowestUUIDResident;
- (id)_nextResidentsListGenerationDate;
- (BOOL)_preferredResidentsListFromElectorUpdated;
- (unsigned long long)_preferredResidentsListMaxSize;
- (void)_publishElectorsList;
- (void)_rescheduleTakeOverIfPrimaryIsNotViableTimerWithTimeInterval:(double)a0;
- (void)_rescheduleTakeOverTimer;
- (BOOL)_shouldTakeOverBasedOnReachability;
- (id)_sortResidentsByLatestVersionLowestUUID:(id)a0;
- (double)_statusDebounceInterval;
- (double)_takeOverIfPrimaryIsNotViableInterval;
- (unsigned long long)_takeOverOnlyIfCurrentPrimaryIsNotViableJitter;
- (double)_takeOverTimerInterval;
- (BOOL)_updateLocalPreferredResidentsList;
- (BOOL)allResidentsAboveMeAreUnreachableIn:(id)a0;
- (BOOL)allowExternalUpdateOfPrimaryResidentTo:(id)a0 selectionTimestamp:(id)a1;
- (id)backupsForResident:(id)a0;
- (void)cancelAllTakeOverTimers;
- (long long)compareLocationResident1:(id)a0 resident2:(id)a1;
- (long long)compareNetworkConnectionResident1:(id)a0 resident2:(id)a1;
- (long long)compareProductTypeResident1:(id)a0 resident2:(id)a1;
- (long long)compareReachableAccessoriesResident1:(id)a0 resident2:(id)a1;
- (long long)compareVersionResident1:(id)a0 resident2:(id)a1;
- (void)configureAsAResidentWithRunPrimaryEvaluation:(BOOL)a0;
- (id /* block */)createSelectionMessageCompletion;
- (void)currentDeviceReadyAsAResident;
- (void)deregisterForMessages;
- (void)didFailResidentSelectionWithResident:(id)a0 error:(id)a1;
- (void)didReceiveSelectionMessage:(id)a0;
- (void)didSucceedResidentSelectionWithPreferred:(id)a0;
- (void)didUpdateResidentSelectionModelTo:(id)a0;
- (void)didUpdateResidentStatus:(id)a0 residentsFound:(id)a1 residentsLost:(id)a2;
- (void)handleDailyPreferredResidentsListRegenerationNotification:(id)a0;
- (void)handleMeshInformationRequest:(id)a0;
- (void)handleTakeOverIfPrimaryIsNotViableTimerFired;
- (void)handleTakeOverTimerFired;
- (void)handleWeAreSelectedAsThePreferredPrimaryWithInfo:(id)a0 selectionMessage:(id)a1;
- (void)handleWeAreSelectedAsThePreferredPrimaryWithSelectionTimestamp:(id)a0 selectionMessage:(id)a1;
- (BOOL)hasViablePrimaryResidentWithSelectionInfo:(id)a0;
- (id)initWithContext:(id)a0 backgroundTaskManager:(id)a1;
- (unsigned long long)locationOfResident:(id)a0;
- (unsigned long long)messageTransportRestriction;
- (BOOL)newPrimaryIsInREv2BasedOnTheirTimestamp:(id)a0 ourSelectionInfo:(id)a1;
- (void)performSelectionWithPreferredPrimaryResident:(id)a0 requireAutoUpdate:(BOOL)a1 reason:(unsigned long long)a2 completion:(id /* block */)a3;
- (id)preferredResidentsRemovedFromHome;
- (void)primaryResidentChanged:(id)a0 previousResidentDevice:(id)a1;
- (id)productTypePreferenceList;
- (BOOL)residentIsLocallyReachable:(id)a0;
- (id)residentSelectionInfoWithOurselvesAsThePreferredWithTimestamp:(id)a0;
- (id)residentsNotPresentInPreferredResidentsList:(id)a0;
- (id)residentsWithReachableAccessories;
- (void)scheduleDailyPreferredResidentsListRegenerationTask;
- (void)scheduleTakeOverTimerIfRequiredAfterBlockDuration:(double)a0;
- (void)selectPrimaryResidentFromResidents:(id)a0 requireAutoUpdate:(BOOL)a1 completion:(id /* block */)a2;
- (void)sendSelectionMessageToResident:(id)a0 requireAutoUpdate:(BOOL)a1 completion:(id /* block */)a2;
- (BOOL)shouldRegeneratePreferredResidentsListBasedOnFoundResidents:(id)a0 residentLocationMap:(id)a1;
- (BOOL)shouldTakeOverAsTheCurrentPrimaryWithSelectionInfo:(id)a0 isTimerTriggered:(BOOL)a1;
- (BOOL)takeOverIfConditionsAreMetWithIsTimerTriggered:(BOOL)a0;
- (BOOL)takeOverIfPrimaryIsNotViableWithIsTimerTriggered:(BOOL)a0;
- (id)userPreferredResidentPerSelectionInfo:(id)a0;
- (id)wiredResidents;

@end
