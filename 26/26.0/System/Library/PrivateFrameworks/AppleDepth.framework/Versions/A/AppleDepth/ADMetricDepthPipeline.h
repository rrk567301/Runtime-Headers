@class ADEmbeddings, ADNetworkProvider, ADMetricDepthPipelineParameters, ADReprojection, ADEspressoMetricDepthInferenceDescriptor, ADImageDescriptor;

@interface ADMetricDepthPipeline : NSObject {
    ADNetworkProvider *_networkProvider;
    ADImageDescriptor *_postProcessedMetricConfLevelsDesc;
    ADImageDescriptor *_postProcessedMetricActiveDepthMaskDesc;
    ADReprojection *_pearlReprojector;
    ADEmbeddings *_cameraCenterEmbeddings;
    ADEmbeddings *_cameraRaysEmbeddings;
    ADEmbeddings *_jasperEmbeddings;
    struct unordered_map<unsigned long, PixelBufferSharedPtr, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, PixelBufferSharedPtr>>> { struct __hash_table<std::__hash_value_type<unsigned long, PixelBufferSharedPtr>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, PixelBufferSharedPtr>, std::hash<unsigned long>, std::equal_to<unsigned long>>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, PixelBufferSharedPtr>, std::equal_to<unsigned long>, std::hash<unsigned long>>, std::allocator<std::__hash_value_type<unsigned long, PixelBufferSharedPtr>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, PixelBufferSharedPtr>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, PixelBufferSharedPtr>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, PixelBufferSharedPtr>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, PixelBufferSharedPtr>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _downscaledJasperBuffer;
    struct unordered_map<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>>> { struct __hash_table<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, std::hash<unsigned long>, std::equal_to<unsigned long>>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, std::equal_to<unsigned long>, std::hash<unsigned long>>, std::allocator<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _backProjectedMap;
    struct unordered_map<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>>> { struct __hash_table<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, std::hash<unsigned long>, std::equal_to<unsigned long>>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, std::equal_to<unsigned long>, std::hash<unsigned long>>, std::allocator<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<float __attribute__((ext_vector_type(3)))>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _raysMap;
    struct PixelBufferSharedPtr { void /* function */ **_vptr$PixelBufferSharedPtr; struct __CVBuffer *m_pixelBuffer; } _targetPearlBuffer;
    struct unordered_map<unsigned long, ADCameraCalibration *, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, ADCameraCalibration *>>> { struct __hash_table<std::__hash_value_type<unsigned long, ADCameraCalibration *>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, ADCameraCalibration *>, std::hash<unsigned long>, std::equal_to<unsigned long>>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, ADCameraCalibration *>, std::equal_to<unsigned long>, std::hash<unsigned long>>, std::allocator<std::__hash_value_type<unsigned long, ADCameraCalibration *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, ADCameraCalibration *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, ADCameraCalibration *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, ADCameraCalibration *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, ADCameraCalibration *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _lastCameraCalibration;
    struct unordered_map<unsigned long, simd_float4x4, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, simd_float4x4>>> { struct __hash_table<std::__hash_value_type<unsigned long, simd_float4x4>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, simd_float4x4>, std::hash<unsigned long>, std::equal_to<unsigned long>>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, simd_float4x4>, std::equal_to<unsigned long>, std::hash<unsigned long>>, std::allocator<std::__hash_value_type<unsigned long, simd_float4x4>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, simd_float4x4>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, simd_float4x4>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, simd_float4x4>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, simd_float4x4>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _lastPose;
    struct unordered_map<unsigned long, CGSize, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, CGSize>>> { struct __hash_table<std::__hash_value_type<unsigned long, CGSize>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, CGSize>, std::hash<unsigned long>, std::equal_to<unsigned long>>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, CGSize>, std::equal_to<unsigned long>, std::hash<unsigned long>>, std::allocator<std::__hash_value_type<unsigned long, CGSize>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CGSize>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CGSize>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CGSize>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CGSize>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _lastSize;
    struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint *__begin_; struct CGPoint *__end_; struct CGPoint *__cap_; } _pixelsMap;
    struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; float *__cap_; } _zMap;
}

@property (copy, nonatomic) ADMetricDepthPipelineParameters *pipelineParameters;
@property (readonly, nonatomic) ADEspressoMetricDepthInferenceDescriptor *inferenceDescriptor;

+ (id)defaults;

- (id)init;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)outputDepthDescriptor;
- (id)outputActiveDepthMaskDescriptor;
- (long long)postProcessEspressoConfidence:(struct __CVBuffer { } *)a0 outputConfidence:(struct __CVBuffer { } *)a1 confidenceUnits:(unsigned long long)a2;
- (long long)createCameraEmbeddingsForRightCameraCalibration:(id)a0 leftCameraCalibration:(id)a1 rightCameraPose:(struct { void /* unknown type, empty encoding */ x0[4]; })a2 leftCameraPose:(struct { void /* unknown type, empty encoding */ x0[4]; })a3 outputBuffer:(id)a4;
- (long long)createJasperEmbeddings:(id)a0 cropTo:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 rotateBy:(long long)a2 outputBuffer:(id)a3 outputBatchOffset:(unsigned long long)a4;
- (long long)createJasperEmbeddingsForRightCameraPointCloud:(id)a0 leftCameraPointCloud:(id)a1 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 rotation:(long long)a3 outputBuffer:(id)a4;
- (long long)emulatePeridotFromJasper:(id)a0 jasperPoses:(struct { void /* unknown type, empty encoding */ x0[4]; } *)a1 jasperTimestamps:(double *)a2 jasperToPlatformTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a3 pearlDepth:(struct __CVBuffer { } *)a4 pearlPose:(struct { void /* unknown type, empty encoding */ x0[4]; })a5 pearlCalibration:(id)a6 outPointCloud:(id *)a7 outPose:(struct { void /* unknown type, empty encoding */ x0[4]; } *)a8 outTimestamp:(double *)a9;
- (long long)fillSensorsMask:(struct __CVBuffer { } *)a0;
- (long long)filterJasperPointCloud:(id)a0 usingPearlInput:(struct __CVBuffer { } *)a1;
- (long long)filterUncertainty:(struct __CVBuffer { } *)a0 output:(struct __CVBuffer { } *)a1;
- (id)initForEspressoEngine:(unsigned long long)a0;
- (id)initForEspressoEngine:(unsigned long long)a0 pipelineParameters:(id)a1;
- (id)outputConfidenceDescriptor;
- (id)outputConfidenceLevelsDescriptor;
- (id)outputNormalsDescriptor;
- (id)pearlReprojector;
- (long long)postProcessEspressoDepth:(struct __CVBuffer { } *)a0 espressoConfidence:(struct __CVBuffer { } *)a1 espressoNormals:(struct __CVBuffer { } *)a2 toOutputDepth:(struct __CVBuffer { } *)a3 outputConfidence:(struct __CVBuffer { } *)a4 outputNormals:(struct __CVBuffer { } *)a5;
- (long long)postProcessEspressoDepth:(struct __CVBuffer { } *)a0 espressoConfidence:(struct __CVBuffer { } *)a1 toOutputDepth:(struct __CVBuffer { } *)a2 outputConfidence:(struct __CVBuffer { } *)a3;
- (long long)postProcessEspressoNormals:(struct __CVBuffer { } *)a0 toOutputNormals:(struct __CVBuffer { } *)a1;
- (long long)preprocessPearlDepth:(struct __CVBuffer { } *)a0 pearlPose:(struct { void /* unknown type, empty encoding */ x0[4]; })a1 pearlCalibration:(id)a2 colorPose:(struct { void /* unknown type, empty encoding */ x0[4]; })a3 colorCalibration:(id)a4 outputBuffer:(id)a5;

@end
