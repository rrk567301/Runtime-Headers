@class ADJasperPearlInFieldCalibrationPipelineParameters, NSData;

@interface ADJasperPearlInFieldCalibrationPipeline : NSObject

@property (retain, nonatomic) ADJasperPearlInFieldCalibrationPipelineParameters *pipelineParameters;
@property (retain, nonatomic) NSData *pceCalib;

- (id)init;
- (void).cxx_destruct;
- (struct unique_ptr<jpc::JPC, std::default_delete<jpc::JPC>> { struct JPC *x0; })getJpcObjectForRunMode:(int)a0 isValid:(BOOL *)a1;
- (BOOL)buildJpcInputDataObjectWithPearlInputs:(id)a0 jasperAggregatedPointCloud:(id)a1 farthestJasperBankPose:(struct { void /* unknown type, empty encoding */ x0[4]; })a2 irSensorCalibration:(id)a3 jasperToPearlTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a4 outJpcInputs:(struct JpcInputData { struct PearlInputs { struct __CVBuffer *x0; struct __CVBuffer *x1; struct __CVBuffer *x2; struct __CVBuffer *x3; struct { void /* unknown type, empty encoding */ x0[4]; } x4; struct { void /* unknown type, empty encoding */ x0[4]; } x5; unsigned long long x6; } x0; struct JasperInputs { id x0; struct { void /* unknown type, empty encoding */ x0[4]; } x1; } x1; struct CalibrationInputs { struct PearlCalibrations { struct PearlPCEConfig { float x0; float x1; float x2; float x3; float x4; struct PearlInvalidValues { unsigned char x0; unsigned short x1; } x5; } x0; struct IRSensorCalibrations { id x0; double x1[2]; } x1; struct IRSensorCalibrations { id x0; double x1[2]; } x2; struct IRProjectorCalibrations { struct { void /* unknown type, empty encoding */ x0[4]; } x0; } x3; struct IRProjectorCalibrations { struct { void /* unknown type, empty encoding */ x0[4]; } x0; } x4; struct PearlReferenceWallCalibrations { double x0; } x5; } x0; struct JasperCalibrations { struct { void /* unknown type, empty encoding */ x0[4]; } x0; } x1; } x2; struct DeviceStateInputs { float x0; } x3; } *)a5;
- (BOOL)checkPrerequisitesForProcessWithPearlWithPearlInputs:(id)a0;
- (void)fillTelemetryData:(id)a0 jpcError:(unsigned int)a1;
- (void)fillTelemetryDataWithPreviousCalibration:(id)a0 pceCalib:(struct PCECalib { int x0; short x1; unsigned char x2[2]; unsigned char x3[16]; struct PCECalibCameraIntrinsics { double x0; double x1; double x2[2]; double x3[256]; double x4[256]; double x5[8]; double x6[8]; unsigned short x7; unsigned short x8; unsigned char x9[4]; } x4; struct PCECalibCameraIntrinsics { double x0; double x1; double x2[2]; double x3[256]; double x4[256]; double x5[8]; double x6[8]; unsigned short x7; unsigned short x8; unsigned char x9[4]; } x5; struct PCECalibExtrinsics { double x0[3][3]; struct PCECalibVector { double x0; double x1; double x2; } x1; } x6; struct PCECalibProjector { struct PCECalibVector { double x0; double x1; double x2; } x0; } x7; struct PCECalibReferencePlane { double x0; struct PCECalibVector { double x0; double x1; double x2; } x1; } x8; short x9; short x10; unsigned char x11[4]; double x12; double x13; double x14[2]; double x15; double x16[2]; double x17[2]; double x18; double x19[2]; struct PCECalibCameraIntrinsics { double x0; double x1; double x2[2]; double x3[256]; double x4[256]; double x5[8]; double x6[8]; unsigned short x7; unsigned short x8; unsigned char x9[4]; } x20; struct PCECalibExtrinsics { double x0[3][3]; struct PCECalibVector { double x0; double x1; double x2; } x1; } x21; struct PCECalibRotationAngles { double x0; double x1; double x2; } x22; } *)a1;
- (void)fixEFLTempCoeffInISFResult:(id)a0 eflTempCoeff:(double[2])a1 temperature:(float)a2;
- (id)getIRSensorCameraCalibFromPCECalib;
- (const struct PCECalib { int x0; short x1; unsigned char x2[2]; unsigned char x3[16]; struct PCECalibCameraIntrinsics { double x0; double x1; double x2[2]; double x3[256]; double x4[256]; double x5[8]; double x6[8]; unsigned short x7; unsigned short x8; unsigned char x9[4]; } x4; struct PCECalibCameraIntrinsics { double x0; double x1; double x2[2]; double x3[256]; double x4[256]; double x5[8]; double x6[8]; unsigned short x7; unsigned short x8; unsigned char x9[4]; } x5; struct PCECalibExtrinsics { double x0[3][3]; struct PCECalibVector { double x0; double x1; double x2; } x1; } x6; struct PCECalibProjector { struct PCECalibVector { double x0; double x1; double x2; } x0; } x7; struct PCECalibReferencePlane { double x0; struct PCECalibVector { double x0; double x1; double x2; } x1; } x8; short x9; short x10; unsigned char x11[4]; double x12; double x13; double x14[2]; double x15; double x16[2]; double x17[2]; double x18; double x19[2]; struct PCECalibCameraIntrinsics { double x0; double x1; double x2[2]; double x3[256]; double x4[256]; double x5[8]; double x6[8]; unsigned short x7; unsigned short x8; unsigned char x9[4]; } x20; struct PCECalibExtrinsics { double x0[3][3]; struct PCECalibVector { double x0; double x1; double x2; } x1; } x21; struct PCECalibRotationAngles { double x0; double x1; double x2; } x22; } *)getPCECalibStruct;
- (id)initWithParameters:(id)a0 pceCalib:(id)a1;
- (void)logJpcInputData:(struct JpcInputData { struct PearlInputs { struct __CVBuffer *x0; struct __CVBuffer *x1; struct __CVBuffer *x2; struct __CVBuffer *x3; struct { void /* unknown type, empty encoding */ x0[4]; } x4; struct { void /* unknown type, empty encoding */ x0[4]; } x5; unsigned long long x6; } x0; struct JasperInputs { id x0; struct { void /* unknown type, empty encoding */ x0[4]; } x1; } x1; struct CalibrationInputs { struct PearlCalibrations { struct PearlPCEConfig { float x0; float x1; float x2; float x3; float x4; struct PearlInvalidValues { unsigned char x0; unsigned short x1; } x5; } x0; struct IRSensorCalibrations { id x0; double x1[2]; } x1; struct IRSensorCalibrations { id x0; double x1[2]; } x2; struct IRProjectorCalibrations { struct { void /* unknown type, empty encoding */ x0[4]; } x0; } x3; struct IRProjectorCalibrations { struct { void /* unknown type, empty encoding */ x0[4]; } x0; } x4; struct PearlReferenceWallCalibrations { double x0; } x5; } x0; struct JasperCalibrations { struct { void /* unknown type, empty encoding */ x0[4]; } x0; } x1; } x2; struct DeviceStateInputs { float x0; } x3; } *)a0;
- (long long)processJpcResultWithStatus:(unsigned int)a0 gmcjResult:(void *)a1 glaResult:(void *)a2 result:(id)a3 interSessionData:(id)a4 temperature:(float)a5 eflTempCoeff:(double[2])a6;
- (long long)processWithPearl:(id)a0 jasperAggregatedPointCloud:(id)a1 farthestJasperBankPose:(struct { void /* unknown type, empty encoding */ x0[4]; })a2 irSensorCalibration:(id)a3 jasperToPearlTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a4 interSessionData:(id)a5 result:(id)a6;
- (long long)runWithJpc:(void *)a0 runMode:(int)a1 pearlInputs:(id)a2 jasperAggregatedPointCloud:(id)a3 farthestJasperBankPose:(struct { void /* unknown type, empty encoding */ x0[4]; })a4 irSensorCalibration:(id)a5 jasperToPearlTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a6 interSessionData:(id)a7 result:(id)a8;
- (void)setGMCJResult:(const void *)a0 result:(id)a1 temperature:(float)a2;

@end
