@class SCNNode;

@interface SCNCameraControlEventHandler : SCNEventHandler {
    SCNNode *_freeViewCameraNode;
    struct CGPoint { double x; double y; } _initialPoint;
    union C3DMatrix4x4 { float components[16]; void /* unknown type, empty encoding */ m[4]; struct { void /* unknown type, empty encoding */ columns[4]; } simd; } _initialMatrix;
    float _initialZoom;
    float _originalFovX;
    float _originalFovY;
    float _originalOrthoScale;
    float _zoomFactor;
    void /* unknown type, empty encoding */ _clickOrigin;
    BOOL _stickyMove;
    struct CGPoint { double x; double y; } _stickyDirection;
    unsigned long long _currentStickyAxis;
    struct CGPoint { double x; double y; } _lastDragLocation;
    double _lastDragTime;
    unsigned long long _stickyAxis;
    struct C3DSphere { void /* unknown type, empty encoding */ vector; } _viewedObjectSphere;
    unsigned char _isViewedObjectSphereComputed : 1;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _stateLock;
    unsigned char _enabled : 1;
    unsigned char _hasAutomaticCameraTarget : 1;
    unsigned char _automaticCameraTargetUpToDate : 1;
    unsigned char _inertia : 1;
    unsigned char _didEverFocusNode : 1;
    unsigned char _allowsTranslation : 1;
    unsigned char _pinchShouldMoveCamera : 1;
    unsigned char _alternateMode : 1;
    unsigned char _upDirIsSet : 1;
    unsigned char _gimbalLockMode : 1;
    unsigned char _inertiaRunning : 1;
    long long _browseMode;
    void /* unknown type, empty encoding */ _upDir;
    struct SCNVector3 { double x; double y; double z; } _cameraTarget;
    struct SCNVector3 { double x; double y; double z; } _autoCameraTarget;
    float _browseScaleFactor;
    double _friction;
    struct CGPoint { double x; double y; } _totalDragWithInertia;
    struct CGPoint { double x; double y; } _inertiaVelocity;
    double _lastSimulationTime;
}

@property BOOL gimbalLockMode;
@property struct SCNVector3 { double x0; double x1; double x2; } gimbalLockVector;
@property unsigned long long stickyAxis;
@property BOOL enableInertia;
@property double friction;
@property BOOL allowsTranslation;
@property BOOL automaticCameraTarget;
@property struct SCNVector3 { double x0; double x1; double x2; } cameraTarget;

+ (void /* unknown type, empty encoding */)frontVectorWithPointOfView:(id)a0;
+ (struct CATransform3D { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; })matrixWithNoRoll:(struct CATransform3D { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; })a0;

- (BOOL)mouseDown:(id)a0;
- (BOOL)mouseUp:(id)a0;
- (BOOL)mouseDragged:(id)a0;
- (void)dealloc;
- (BOOL)keyDown:(id)a0;
- (void)setEnabled:(BOOL)a0;
- (BOOL)enabled;
- (id)init;
- (double)zoomFactor;
- (void)setZoomFactor:(double)a0;
- (BOOL)flagsChanged:(id)a0;
- (BOOL)keyUp:(id)a0;
- (BOOL)magnifyWithEvent:(id)a0;
- (BOOL)rotateWithEvent:(id)a0;
- (BOOL)scrollWheel:(id)a0;
- (void)cameraDidChange;
- (void)_beginTranslateAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_computeStickyAxisIfNeeded:(struct CGPoint { double x0; double x1; })a0;
- (void)zoomBy:(float)a0 animate:(BOOL)a1;
- (void)_onInertiaTimer;
- (void)sceneWillChange;
- (void)zoomBy:(float)a0;
- (void)_didDragTo:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_freeCameraActivated;
- (void)_resetFreeViewCamera;
- (void)_rotateWithDrag:(struct CGPoint { double x0; double x1; })a0 mode:(long long)a1 stickyAxis:(unsigned long long)a2;
- (float)_scrollWheelMultiplier;
- (void)_startBrowsingIfNeeded:(struct CGPoint { double x0; double x1; })a0;
- (void)_switchToFreeViewCamera;
- (void)_translateTo:(struct CGPoint { double x0; double x1; })a0;
- (float)_translationCoef;
- (void)cameraWillChange;
- (void)endDragging;
- (void)endDraggingWithVelocity:(struct CGPoint { double x0; double x1; })a0;
- (void /* unknown type, empty encoding */)frontVector;
- (void)rotateOf:(double)a0;
- (void)sceneDidChange;
- (void)translateByX:(float)a0 Y:(float)a1 Z:(float)a2;
- (struct C3DSphere { })viewedObjectSphere;
- (BOOL)wantsRedraw;
- (BOOL)_3DConnexionIsPressed;
- (double)_browseScale;
- (void)_installFreeViewCameraIfNeeded;
- (BOOL)_isInertiaRunning;
- (void)_prepareFreeViewCamera;
- (void)_resetBrowseScaleFactor;
- (void)_setInertiaRunning:(BOOL)a0;
- (void)activateFreeCamera;
- (struct SCNVector3 { double x0; double x1; double x2; })cameraAutomaticTargetPoint;
- (void)clearRoll;
- (void)computeAutomaticTargetPoint;
- (BOOL)computeBoundingSphereOmittingFloorsForNode:(struct __C3DNode { } *)a0 sphere:(struct C3DSphere { } *)a1;
- (void)focusNode:(id)a0;
- (id)freeCamera;
- (void)invalidateCameraTarget;
- (void)rotateWithVector:(SEL)a0 mode:(long long)a1;
- (void)setEnableFreeCamera:(BOOL)a0;
- (void)updateBrowseScaleFactor;
- (void)viewWillDrawAtTime:(double)a0;

@end
