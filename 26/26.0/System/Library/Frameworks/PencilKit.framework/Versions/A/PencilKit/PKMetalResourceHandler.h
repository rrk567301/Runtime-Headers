@class MTLPipelineBufferDescriptor, NSMutableDictionary, PKMetalResourceHandlerBuffer, PKLRUCache, NSObject;
@protocol OS_dispatch_queue, MTLDevice, MTLPipelineLibrarySPI, MTLLibrary, MTLTexture, MTLComputePipelineState, MTLBuffer;

@interface PKMetalResourceHandler : NSObject {
    id<MTLComputePipelineState> _particleShaderKernelPipelineState;
    id<MTLComputePipelineState> _particleShaderKernelPipelineStateWithVariableSpacing;
    id<MTLComputePipelineState> _paintShaderKernelPipelineState;
    id<MTLComputePipelineState> _sdfPenShaderKernelPipelineState;
    id<MTLTexture> _sdfPenMaxHeightLookupTexture;
    id<MTLTexture> _sdfPenEllipseLookupTexture;
    id<MTLComputePipelineState> _paintShaderKernelPipelineStateWithLiveStrokeMode;
    id<MTLComputePipelineState> _paintShaderKernelPipelineStateWithLiveStrokeParticles;
    id<MTLBuffer> _cachedQuadVertexBuffer;
    id<MTLBuffer> _cachedQuadTexCoordBuffer;
    NSMutableDictionary *_inkTextures;
    struct unordered_map<(anonymous namespace)::PKMetalShaderKey, PKMetalShader *, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<(anonymous namespace)::PKMetalShaderKey>, std::allocator<std::pair<const (anonymous namespace)::PKMetalShaderKey, PKMetalShader *>>> { struct __hash_table<std::__hash_value_type<(anonymous namespace)::PKMetalShaderKey, PKMetalShader *>, std::__unordered_map_hasher<(anonymous namespace)::PKMetalShaderKey, std::__hash_value_type<(anonymous namespace)::PKMetalShaderKey, PKMetalShader *>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<(anonymous namespace)::PKMetalShaderKey>>, std::__unordered_map_equal<(anonymous namespace)::PKMetalShaderKey, std::__hash_value_type<(anonymous namespace)::PKMetalShaderKey, PKMetalShader *>, std::equal_to<(anonymous namespace)::PKMetalShaderKey>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions>, std::allocator<std::__hash_value_type<(anonymous namespace)::PKMetalShaderKey, PKMetalShader *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKMetalShaderKey, PKMetalShader *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKMetalShaderKey, PKMetalShader *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKMetalShaderKey, PKMetalShader *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKMetalShaderKey, PKMetalShader *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _uberShaders;
    struct unordered_map<(anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<(anonymous namespace)::PKSixChannelShaderKey>, std::allocator<std::pair<const (anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *>>> { struct __hash_table<std::__hash_value_type<(anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *>, std::__unordered_map_hasher<(anonymous namespace)::PKSixChannelShaderKey, std::__hash_value_type<(anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<(anonymous namespace)::PKSixChannelShaderKey>>, std::__unordered_map_equal<(anonymous namespace)::PKSixChannelShaderKey, std::__hash_value_type<(anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *>, std::equal_to<(anonymous namespace)::PKSixChannelShaderKey>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions>, std::allocator<std::__hash_value_type<(anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKSixChannelShaderKey, PKMetalShader *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _sixChannelShaders;
    struct unordered_map<PKNamedShaderKey, PKMetalShader *, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<PKNamedShaderKey>, std::allocator<std::pair<const PKNamedShaderKey, PKMetalShader *>>> { struct __hash_table<std::__hash_value_type<PKNamedShaderKey, PKMetalShader *>, std::__unordered_map_hasher<PKNamedShaderKey, std::__hash_value_type<PKNamedShaderKey, PKMetalShader *>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<PKNamedShaderKey>>, std::__unordered_map_equal<PKNamedShaderKey, std::__hash_value_type<PKNamedShaderKey, PKMetalShader *>, std::equal_to<PKNamedShaderKey>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions>, std::allocator<std::__hash_value_type<PKNamedShaderKey, PKMetalShader *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<PKNamedShaderKey, PKMetalShader *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<PKNamedShaderKey, PKMetalShader *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<PKNamedShaderKey, PKMetalShader *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<PKNamedShaderKey, PKMetalShader *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _namedShaders;
    struct unordered_map<PKShaderPipelineConfig, MTLRenderPipelineDescriptor *, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<PKShaderPipelineConfig>, std::allocator<std::pair<const PKShaderPipelineConfig, MTLRenderPipelineDescriptor *>>> { struct __hash_table<std::__hash_value_type<PKShaderPipelineConfig, MTLRenderPipelineDescriptor *>, std::__unordered_map_hasher<PKShaderPipelineConfig, std::__hash_value_type<PKShaderPipelineConfig, MTLRenderPipelineDescriptor *>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<PKShaderPipelineConfig>>, std::__unordered_map_equal<PKShaderPipelineConfig, std::__hash_value_type<PKShaderPipelineConfig, MTLRenderPipelineDescriptor *>, std::equal_to<PKShaderPipelineConfig>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions>, std::allocator<std::__hash_value_type<PKShaderPipelineConfig, MTLRenderPipelineDescriptor *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<PKShaderPipelineConfig, MTLRenderPipelineDescriptor *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<PKShaderPipelineConfig, MTLRenderPipelineDescriptor *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<PKShaderPipelineConfig, MTLRenderPipelineDescriptor *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<PKShaderPipelineConfig, MTLRenderPipelineDescriptor *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _pipelineDescriptors;
    struct unordered_map<(anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<(anonymous namespace)::PKMetalKernelKey>, std::allocator<std::pair<const (anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>>>> { struct __hash_table<std::__hash_value_type<(anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>>, std::__unordered_map_hasher<(anonymous namespace)::PKMetalKernelKey, std::__hash_value_type<(anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions, std::equal_to<(anonymous namespace)::PKMetalKernelKey>>, std::__unordered_map_equal<(anonymous namespace)::PKMetalKernelKey, std::__hash_value_type<(anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>>, std::equal_to<(anonymous namespace)::PKMetalKernelKey>, (anonymous namespace)::PKMetalResourceHandlerHashFunctions>, std::allocator<std::__hash_value_type<(anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<(anonymous namespace)::PKMetalKernelKey, id<MTLComputePipelineState>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _kernelPipelines;
    id<MTLLibrary> _defaultLibrary;
    id<MTLTexture> _paperTexture;
    struct CGSize { double width; double height; } _paperTextureSize;
    PKLRUCache *_strokeRenderCache;
    id<MTLBuffer> _uint16IndexBuffer;
    id<MTLBuffer> _uint32IndexBuffer;
    unsigned long long _uint32IndexBufferNumVertices;
    id<MTLBuffer> _randomNumberBuffer;
    NSObject<OS_dispatch_queue> *_accessQueue;
    unsigned long long _signpost_id;
    PKMetalResourceHandlerBuffer *_purgeableResourceBuffer;
    PKMetalResourceHandlerBuffer *_resourceBuffer;
    PKMetalResourceHandlerBuffer *_gpuResourceBuffer;
    id<MTLPipelineLibrarySPI> _pipelineLibrary;
    BOOL _generatePipelineDescriptors;
    BOOL _generateForScribble;
}

@property (readonly, nonatomic) id<MTLDevice> device;
@property (readonly, nonatomic) id<MTLLibrary> shaderLibrary;
@property (readonly, nonatomic) unsigned long long sixChannelOriginalBackPixelFormatNonEDR;
@property (readonly, nonatomic) unsigned long long sixChannelMetalLayerPixelFormatNonEDR;
@property (readonly, nonatomic) unsigned long long extendedDynamicRangePixelFormat;
@property (readonly, nonatomic) id<MTLTexture> paperTexture;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } paperTextureSize;
@property (readonly, nonatomic) MTLPipelineBufferDescriptor *sharedPipelineDescriptor;
@property (readonly, nonatomic) BOOL deviceSupportsAppleFamily;
@property (readonly, nonatomic) BOOL deviceSupportsMacFamily;
@property (readonly, nonatomic) BOOL deviceSupportsFramebufferFetch;
@property (readonly, nonatomic) BOOL sixChannelUsesWideGamutForNonEDR;
@property (readonly, nonatomic) struct PKShaderPipelineConfig { unsigned char x0[8]; } defaultPipelineConfig;
@property (readonly, nonatomic) struct PKShaderPipelineConfig { unsigned char x0[8]; } defaultSingleFramebufferPipelineConfig;

+ (struct CGColorSpace { } *)colorSpaceForExtendedDynamicRange;
+ (id)generatePipelineDescriptorsForDevice:(id)a0;
+ (id)inkBundle;
+ (id)sharedResourceHandlerWithDevice:(id)a0;

- (id)initWithDevice:(id)a0;
- (id)init;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)newRenderPipelineDescriptor;
- (BOOL)isAppInBackground;
- (id)_createSixChannelShaderWithKey:(struct PKSixChannelShaderKey { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; long long x6; unsigned int x7; unsigned int x8; struct PKShaderPipelineConfig { unsigned char x0[8]; } x9; })a0;
- (void)_preloadShaders;
- (id)sdfPenShaderKernelPipelineState;
- (id)_createSDFPenEllipseLookupTexture;
- (id)_createSDFPenMaxHeightLookupTexture;
- (id)_inkTextureNamed:(id)a0 image:(struct CGImage { } *)a1;
- (id)_kernelPipelineStateForKey:(struct PKMetalKernelKey { BOOL x0; BOOL x1; })a0;
- (unsigned long long)_metalPixelFormatFromShaderPixelFormat:(unsigned char)a0;
- (id)_namedShaderForKey:(struct PKNamedShaderKey { long long x0; unsigned int x1; unsigned int x2; BOOL x3; BOOL x4; BOOL x5; unsigned long long x6; struct PKShaderPipelineConfig { unsigned char x0[8]; } x7; })a0;
- (id)_paintShaderKernelPipelineStateWithLiveStrokeMode:(BOOL)a0 particles:(BOOL)a1;
- (id)_pipelineDescriptorForConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a0;
- (void)_preloadInkTextures;
- (void)_preloadScribbleUberShadersForBaseKey:(struct PKMetalShaderKey { long long x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; unsigned long long x6; unsigned int x7; struct PKShaderPipelineConfig { unsigned char x0[8]; } x8; })a0;
- (void)_preloadSixChannelShaders;
- (void)_preloadUberShaders;
- (void)_preloadUberShadersForBaseKey:(struct PKMetalShaderKey { long long x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; unsigned long long x6; unsigned int x7; struct PKShaderPipelineConfig { unsigned char x0[8]; } x8; })a0;
- (void)_setupCachedQuad;
- (void)_setupPaperTextureIfNecessary;
- (void)_setupRandomNumberBufferIfNecessary;
- (void)_setupUInt16IndexBufferIfNecessary;
- (void)_setupUInt32IndexBufferForNumVertices:(unsigned long long)a0;
- (id)_signpostLog;
- (id)_sixChannelShaderWithKey:(struct PKSixChannelShaderKey { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; long long x6; unsigned int x7; unsigned int x8; struct PKShaderPipelineConfig { unsigned char x0[8]; } x9; })a0;
- (id)_uberShaderForKey:(struct PKMetalShaderKey { long long x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; unsigned long long x6; unsigned int x7; struct PKShaderPipelineConfig { unsigned char x0[8]; } x8; })a0;
- (id)assetCatalogTextureNameForImageName:(id)a0;
- (unsigned long long)averagePixelAlphaValue:(id)a0 commandQueue:(id)a1;
- (id)blitShaderWithColorAttachmentIndex:(unsigned int)a0 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a1 renderMask:(BOOL)a2 alphaBlending:(BOOL)a3;
- (id)cachedQuadTexCoordBuffer;
- (id)cachedQuadVertexBuffer;
- (void)clearParticleTexturesForTestingCommandQueue:(id)a0;
- (void)clearTexture:(id)a0 commandQueue:(id)a1;
- (id)compositeEraseShaderWithMode:(long long)a0 clipping:(BOOL)a1 colorAttachmentIndex:(unsigned long long)a2 secondaryPaintEnabled:(BOOL)a3 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a4;
- (id)compositeMultiplyShaderWithMode:(long long)a0 clipping:(BOOL)a1 targetMultiple:(BOOL)a2 colorAttachmentIndex:(unsigned long long)a3 renderMask:(BOOL)a4 edgeMask:(BOOL)a5 secondaryPaintEnabled:(BOOL)a6 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a7;
- (id)compositeOverShaderWithMode:(long long)a0 clipping:(BOOL)a1 colorAttachmentIndex:(unsigned long long)a2 renderMask:(BOOL)a3 edgeMask:(BOOL)a4 secondaryPaintEnabled:(BOOL)a5 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a6;
- (id)compositePaperShaderWithMode:(long long)a0 colorAttachmentIndex:(unsigned long long)a1 secondaryPaintEnabled:(BOOL)a2 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a3;
- (id)compositeSoftWhiteShaderWithMode:(long long)a0 clipping:(BOOL)a1 colorAttachmentIndex:(unsigned long long)a2 renderMask:(BOOL)a3 edgeMask:(BOOL)a4 secondaryPaintEnabled:(BOOL)a5 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a6;
- (id)constantValuesForKey:(long long)a0 clipping:(BOOL)a1 colorAttachmentIndex:(unsigned int)a2 renderMask:(BOOL)a3 edgeMask:(BOOL)a4;
- (id)copyFramebufferShaderWithSourceColorAttachmentIndex:(unsigned int)a0 destinationColorAttachmentIndex:(unsigned int)a1 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a2 renderMask:(BOOL)a3 alphaBlending:(BOOL)a4;
- (void)deallocateReusableBuffers;
- (struct PKShaderPipelineConfig { unsigned char x0[8]; })defaultPaintSingleFramebufferPipelineConfig;
- (struct PKShaderPipelineConfig { unsigned char x0[8]; })defaultSingleFramebufferSixChannelPipelineConfigWantsExtendedDynamicRange:(BOOL)a0;
- (struct PKShaderPipelineConfig { unsigned char x0[8]; })defaultSixChannelPipelineConfigWantsExtendedDynamicRange:(BOOL)a0;
- (id)eraseShaderWithColorAttachmentIndex:(unsigned int)a0 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a1;
- (id)indexBufferForNumVertices:(unsigned long long)a0 outIndexType:(unsigned long long *)a1;
- (id)initWithDevice:(id)a0 generatePipelineDescriptors:(BOOL)a1;
- (id)inkTextureNamed:(id)a0 image:(struct CGImage { } *)a1;
- (id)kernelPipelineStateForKey:(struct PKMetalKernelKey { BOOL x0; BOOL x1; })a0;
- (id)namedShaderForKey:(struct PKNamedShaderKey { long long x0; unsigned int x1; unsigned int x2; BOOL x3; BOOL x4; BOOL x5; unsigned long long x6; struct PKShaderPipelineConfig { unsigned char x0[8]; } x7; })a0;
- (id)newBufferWithLength:(unsigned long long)a0 bytes:(const void *)a1 outOffset:(unsigned long long *)a2;
- (id)newComputePipelineDescriptor;
- (id)newFillColorShaderWithColorAttachmentIndex:(unsigned int)a0 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a1;
- (id)newGPUBufferWithLength:(unsigned long long)a0 outOffset:(unsigned long long *)a1 commandBuffer:(id)a2;
- (id)newInvertShaderWithPipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a0;
- (id)newLinesShaderWithPipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a0;
- (id)newPaintCircleShaderWithPipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a0;
- (id)newPaintShaderKernelPipelineState;
- (id)newPaperShaderWithPipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a0;
- (id)newParticleShaderKernelPipelineStateWithVariableSpacing:(BOOL)a0 particleMasks:(BOOL)a1;
- (id)newPurgeableBufferWithLength:(unsigned long long)a0 bytes:(const void *)a1 outOffset:(unsigned long long *)a2;
- (id)newSDFPenShaderKernelPipelineState;
- (id)paintShaderKernelPipelineState;
- (id)paintShaderKernelPipelineStateWithLiveStrokeMode;
- (id)paintShaderKernelPipelineStateWithLiveStrokeParticles;
- (id)paintShaderWithColorAttachmentIndex:(unsigned int)a0 paintMode:(long long)a1 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a2;
- (id)particleShaderKernelPipelineStateWithVariableSpacing:(BOOL)a0 particleMasks:(BOOL)a1;
- (id)particleShaderWithColorAttachmentIndex:(unsigned int)a0 aspectRatioSupport:(BOOL)a1 particleMasks:(BOOL)a2 particleBlendMode:(unsigned long long)a3 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a4;
- (void)preloadPaperTexture;
- (void)preloadParticleResources;
- (const float *)randomNumberArray;
- (id)randomNumberBuffer;
- (void)reloadParticleTexturesIfNecessaryCommandQueue:(id)a0;
- (void)replaceInkTexture:(id)a0 image:(struct CGImage { } *)a1;
- (struct PKShaderPipelineConfig { unsigned char x0[8]; })scribblePipelineConfig;
- (id)sdfPenEllipseLookupTexture;
- (id)sdfPenMaxHeightLookupTexture;
- (id)sdfPenShaderWithColorAttachmentIndex:(unsigned int)a0 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a1;
- (id)sixChannelShaderWithMode:(long long)a0 clipping:(BOOL)a1 erase:(BOOL)a2 bitmapEraserMask:(BOOL)a3 snapshotImage:(BOOL)a4 renderMask:(BOOL)a5 secondaryPaintEnabled:(BOOL)a6 colorAttachmentIndex:(unsigned long long)a7 multiplyLayerColorAttachmentIndex:(unsigned long long)a8 pipelineConfig:(struct PKShaderPipelineConfig { unsigned char x0[8]; })a9;
- (id)strokeRenderCache;
- (id)textureByUnpremultiplyingAlphaInTexture:(id)a0;
- (id)textureForTextureName:(id)a0;
- (id)uberShaderForKey:(struct PKMetalShaderKey { long long x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; unsigned long long x6; unsigned int x7; struct PKShaderPipelineConfig { unsigned char x0[8]; } x8; })a0;
- (id)uint16IndexBuffer;

@end
