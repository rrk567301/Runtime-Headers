@class MTKTextureLoader, PKMetalFramebuffer, NSArray, PKMetalRenderState, PKLinedPaper, PKStroke, PKMetalResourceHandler;
@protocol MTLDevice, MTLTexture, MTLBuffer, MTLCommandQueueSPI;

@interface PKMetalRenderer : NSObject {
    PKMetalRenderState *_currentRenderState;
    unsigned long long _currentCacheSize;
    struct RendererFramebuffer { PKMetalFramebuffer *framebuffer; BOOL isNonPurgeable; BOOL mustBeCleared; } _originalBackFramebuffer;
    struct RendererFramebuffer { PKMetalFramebuffer *framebuffer; BOOL isNonPurgeable; BOOL mustBeCleared; } _sixChannelMultiplyFramebuffer;
    BOOL _shouldClearOriginalBackFramebuffer;
    struct { double red; double green; double blue; double alpha; } _originalBackClearColor;
    struct RendererFramebuffer { PKMetalFramebuffer *framebuffer; BOOL isNonPurgeable; BOOL mustBeCleared; } _paintFramebuffer[2];
    struct RendererFramebuffer { PKMetalFramebuffer *framebuffer; BOOL isNonPurgeable; BOOL mustBeCleared; } _paintAccumulationFramebuffer[2];
    PKMetalFramebuffer *_paintFramebufferMask;
    PKMetalFramebuffer *_maskMSAAFramebuffer;
    PKMetalFramebuffer *_dummyPaintFramebuffer[2];
    PKMetalFramebuffer *_dummyColorFramebuffer;
    struct CGSize { double width; double height; } _drawingPixelSize;
    double _fromStrokeSpaceScale;
    BOOL _lastPointForEraserIsValid;
    struct _PKStrokePoint { double timestamp; struct CGPoint { double x; double y; } location; double radius; double aspectRatio; double edgeWidth; double force; double azimuth; double altitude; double opacity; double radius2; double threshold; } _lastPointForEraser;
    id<MTLTexture> _paperTexture;
    struct CGSize { double width; double height; } _paperTextureSize;
    unsigned long long _originalBackPixelFormat;
    unsigned long long _paintAndParticlePixelFormat;
    BOOL _sixChannelCanvasHasContentTexture;
    BOOL _wantsExtendedDynamicRangeContent;
    struct vector<PKMetalParticleStrokePoint, std::allocator<PKMetalParticleStrokePoint>> { struct PKMetalParticleStrokePoint *__begin_; struct PKMetalParticleStrokePoint *__end_; struct PKMetalParticleStrokePoint *__cap_; } _particleStrokePointBuffer;
    struct vector<PKMetalPaintStrokePoint, std::allocator<PKMetalPaintStrokePoint>> { struct PKMetalPaintStrokePoint *__begin_; struct PKMetalPaintStrokePoint *__end_; struct PKMetalPaintStrokePoint *__cap_; } _paintStrokePointBuffer;
    struct vector<PKMetalSDFPenStrokePoint, std::allocator<PKMetalSDFPenStrokePoint>> { struct PKMetalSDFPenStrokePoint *__begin_; struct PKMetalSDFPenStrokePoint *__end_; struct PKMetalSDFPenStrokePoint *__cap_; } _sdfPenStrokePointBuffer;
    struct vector<PKMetalLiveStrokePaintStrokePoint, std::allocator<PKMetalLiveStrokePaintStrokePoint>> { struct PKMetalLiveStrokePaintStrokePoint *__begin_; struct PKMetalLiveStrokePaintStrokePoint *__end_; struct PKMetalLiveStrokePaintStrokePoint *__cap_; } _liveStrokeStrokePointBuffer;
    struct shared_ptr<std::vector<(anonymous namespace)::StrokeVertex>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _sharedStrokeVertexBuffer;
    struct shared_ptr<std::vector<PKMetalSDFStrokeVertex>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _sharedSDFStrokeVertexBuffer;
    struct vector<(anonymous namespace)::AnimatingStroke, std::allocator<(anonymous namespace)::AnimatingStroke>> { struct AnimatingStroke *__begin_; struct AnimatingStroke *__end_; struct AnimatingStroke *__cap_; } _animatingStrokes;
    PKStroke *_activeCombinedStroke;
    NSArray *_activeCombinedAlternativeStrokes;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _paintFramebufferDirtyRect;
    id<MTLBuffer> _randomNumberBuffer;
    unsigned long long _renderMaskMSAASampleCount;
    BOOL _needRestartWorkaroundForOldIntelDrivers;
    BOOL _useComputeRenderCaches;
    long long _sixChannelBlendingMode;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _drawableDirtyRect;
    MTKTextureLoader *_textureLoader;
    struct vector<_PKStrokePoint, std::allocator<_PKStrokePoint>> { struct _PKStrokePoint *__begin_; struct _PKStrokePoint *__end_; struct _PKStrokePoint *__cap_; } previewStrokePoints;
    struct PKShaderPipelineConfig { unsigned char framebufferPixelFormats[8]; } _defaultNonSixChannelPipelineConfig;
    struct PKShaderPipelineConfig { unsigned char framebufferPixelFormats[8]; } _defaultSixChannelPipelineConfig;
    struct PKShaderPipelineConfig { unsigned char framebufferPixelFormats[8]; } _singleFramebufferPipelineConfig;
    struct { union { struct CGPoint { double x; double y; } point; struct CGPoint { double x; double y; } location; } ; double force; double azimuth; double altitude; double velocity; double directionAngle; double zPosition; double timestamp; BOOL predicted; long long estimationUpdateIndex; double length; double distance; BOOL hasEstimatedAltitudeAndAzimuth; double rollAngle; long long estimatedActiveInputProperties; long long estimatedActiveInputPropertiesExpectingUpdates; } _latestInputPoint;
    BOOL _renderDebugColorForSynthesizedStrokes;
    struct RendererFramebuffer { PKMetalFramebuffer *framebuffer; BOOL isNonPurgeable; BOOL mustBeCleared; } _addLayerFramebuffer;
    struct RendererFramebuffer { PKMetalFramebuffer *framebuffer; BOOL isNonPurgeable; BOOL mustBeCleared; } _multiplyLayerFramebuffer;
}

@property (readonly, nonatomic) id<MTLCommandQueueSPI> commandQueue;
@property (readonly, nonatomic) id<MTLDevice> device;
@property (readonly, nonatomic) unsigned long long pixelFormat;
@property (retain, nonatomic) PKLinedPaper *linedPaper;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } paperTransform;
@property (nonatomic) struct CGColor { } *backgroundColor;
@property (nonatomic) struct CGColor { } *liveRenderingOverrideColor;
@property (nonatomic) BOOL solidColorBackboard;
@property (nonatomic) BOOL oneRenderPassForLiveRendering;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } viewScissor;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } strokeTransform;
@property (nonatomic) double contentZoomScale;
@property (nonatomic) struct CGSize { double width; double height; } actualSize;
@property (nonatomic) double backboardPaperMultiply;
@property (readonly, nonatomic) PKMetalResourceHandler *resourceHandler;
@property (nonatomic) double inputScale;
@property (nonatomic) double eraserIndicatorAlpha;
@property (nonatomic) double previewStrokeAlpha;
@property (nonatomic) double previewStrokeMaxPoints;
@property (nonatomic) BOOL fadeOutStrokesMode;
@property (nonatomic) BOOL liveStrokeMode;
@property (nonatomic) struct CGSize { double width; double height; } liveStrokeMaxSize;
@property (nonatomic) BOOL edgeMask;
@property (nonatomic) double liveStrokeElapsedTime;
@property (readonly, nonatomic) BOOL isFinishedRendering;
@property (readonly, nonatomic) double latestTimestamp;
@property (nonatomic) BOOL invertColors;
@property (nonatomic) BOOL drawBitmapEraserMask;
@property (nonatomic) BOOL combineStrokesAllowed;

- (void)clear;
- (void)setup;
- (void)dealloc;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)colorForStroke:(id)a0;
- (id)fillColorShader;
- (void)finishRendering;
- (id)initWithDrawingPixelSize:(struct CGSize { double x0; double x1; })a0 actualSize:(struct CGSize { double x0; double x1; })a1 device:(id)a2 resourceHandler:(id)a3 sixChannelBlendingMode:(long long)a4 pixelFormat:(unsigned long long)a5 wantsExtendedDynamicRangeContent:(BOOL)a6;
- (id)sdfPenShaderForAttachmentIndex:(unsigned int)a0;
- (void)teardownOriginalBackFramebuffer;
- (double)alphaForStroke:(id)a0;
- (double)antialiasingThresholdForStroke:(void *)a0;
- (void)drawingEnded:(id)a0 finishStrokeBlock:(id /* block */)a1;
- (void)setupCachedResourcesIfNecessary;
- (id)singleAttachmentFillColorShader;
- (unsigned long long)_renderStrokes:(id)a0 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 stopBlock:(id /* block */)a3;
- (void)addBufferForRenderCache:(id)a0 strokeVertices:(const void *)a1 numVertices:(unsigned long long)a2 vertexSize:(long long)a3 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 secondaryParticles:(BOOL)a5 renderEncoder:(id)a6;
- (void)addInputPoint:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; double x11; BOOL x12; double x13; long long x14; long long x15; })a0;
- (void)addStrokeSpaceDrawableDirtyRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)allocateAndClearAddMultiplyFramebuffersIfNecessary;
- (BOOL)applyStrokeSpaceClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (id)blitIntoPaintShaderPaintIndex:(long long)a0 alphaBlending:(BOOL)a1;
- (id)blitShader;
- (id)blitShaderIntoDestinationTexture;
- (void)buildRenderCacheForStrokes:(id)a0;
- (id)cacheForMask:(id)a0 strokeRenderCache:(id)a1 purgeableResources:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })calculateSourceRectForTile:(id)a0 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 destinationQuadOut:(struct Quad { void /* unknown type, empty encoding */ x0[4]; } *)a2;
- (BOOL)canRenderStroke:(id)a0 combinedWith:(id)a1 allowMasks:(BOOL)a2;
- (void)cancelLiveStroke;
- (unsigned long long)clearAndRenderStrokes:(id)a0 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 stopBlock:(id /* block */)a3;
- (void)clearFramebuffer:(id)a0 waitUntilCompleted:(BOOL)a1;
- (void)clearNowWithStrokeSpaceClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (void)clearPaintFramebuffers;
- (void)clearTile:(id)a0 waitUntilCompleted:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })clipRectForSDFVertices:(const struct PKMetalSDFStrokeVertex { void /* unknown type, blank encoding */ x0; void /* unknown type, blank encoding */ x1; void /* unknown type, blank encoding */ x2; void /* unknown type, blank encoding */ x3; void /* unknown type, blank encoding */ x4; void /* unknown type, blank encoding */ x5; } *)a0 numVertices:(unsigned long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })clipRectForStrokeVertices:(const struct StrokeVertex { float x0; float x1; void /* unknown type, blank encoding */ x2; void /* unknown type, blank encoding */ x3; void /* unknown type, blank encoding */ x4; void /* unknown type, blank encoding */ x5; void /* unknown type, blank encoding */ x6; void /* unknown type, blank encoding */ x7; void /* unknown type, blank encoding */ x8; } *)a0 numVertices:(unsigned long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })clipRectForVertices:(const void *)a0 numVertices:(unsigned long long)a1 vertexSize:(unsigned long long)a2;
- (id)copyAccumulatorIntoPaintShaderPaintIndex:(long long)a0 alphaBlending:(BOOL)a1;
- (void)copyFromAddMultiplyLayersUsingRenderEncoder:(id)a0 clearIfMissing:(BOOL)a1;
- (void)copyFromFramebuffer:(id)a0 toFramebuffer:(id)a1 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 renderEncoder:(id)a3 paintIndex:(long long)a4;
- (void)copyFromFramebuffer:(id)a0 toFramebuffer:(id)a1 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 renderEncoder:(id)a3 paintIndex:(long long)a4 alphaBlendFactor:(double)a5;
- (void)copyIntoPaintFromTexture:(id)a0 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 renderEncoder:(id)a2 paintIndex:(long long)a3;
- (void)copyIntoPaintFromTexture:(id)a0 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 renderEncoder:(id)a2 paintIndex:(long long)a3 alphaBlendFactor:(double)a4;
- (void)copyIntoTile:(id)a0 tileFramebuffer:(id)a1 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 waitUntilCompleted:(BOOL)a3;
- (void)copyIntoTile:(id)a0 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 waitUntilCompleted:(BOOL)a2;
- (struct PKShaderPipelineConfig { unsigned char x0[8]; })currentPipelineConfig;
- (struct PKShaderPipelineConfig { unsigned char x0[8]; })defaultPipelineConfigForLiveRendering:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })dirtyClipRectForAnimatingStrokeVertices:(void *)a0 newSize:(unsigned long long)a1;
- (BOOL)disableClearOriginalBackbufferWorkaround;
- (void)disableClippingForRenderEncoder:(id)a0;
- (id)distanceFieldShaderForAttachmentIndex:(unsigned int)a0;
- (id)distanceFieldStrokeInShaderForAttachmentIndex:(unsigned int)a0;
- (void)drawNewPointsAt:(double)a0;
- (void)drawNewPointsAt:(double)a0 drawCount:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })drawableDirtyRect;
- (void)drawingBeganWithStroke:(id)a0 forPreview:(BOOL)a1;
- (void)drawingCancelledForPreview:(BOOL)a0;
- (id)dummyColorFramebuffer;
- (id)dummyPaintFramebufferForPaintIndex:(long long)a0;
- (BOOL)ensureMultiplyFramebufferHasContents;
- (BOOL)ensureOriginalBackFramebufferHasContents;
- (id)eraseOriginalBackShader;
- (id)eraseShaderForAttachmentIndex:(unsigned int)a0;
- (struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; })fadeOutLimitFromPoints:(const void *)a0 animatingStroke:(void *)a1;
- (void)finishFrontStroke;
- (void)finishLiveStrokeAndPresentDrawable:(id)a0 multiplyDrawable:(id)a1 waitUntilScheduled:(BOOL)a2;
- (void)finishRenderingClippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forStroke:(void *)a1 renderEncoder:(id)a2;
- (void)finishRenderingNoTeardownForStroke:(void *)a0 clippedToPixelSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 renderEncoder:(id)a2;
- (void)flushMemoryIfPossible;
- (id)framebufferForTile:(id)a0 createIfNeeded:(BOOL)a1;
- (BOOL)generateBSplineInComputeForStroke:(id)a0;
- (id)generateCacheForMask:(id)a0;
- (id)generateCacheForParticleStroke:(void *)a0 points:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a1 startPt:(BOOL)a2 endPt:(BOOL)a3;
- (id)generateCacheForPenStroke:(void *)a0 points:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a1;
- (id)generateCacheForStroke:(void *)a0 points:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a1 segmentSteps:(const void *)a2;
- (void)generateLiveStrokeCachesForStrokes:(id)a0 destinationLocations:(const void *)a1 startTime:(double)a2 duration:(double)a3;
- (id)generatePaintCacheForStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(void *)a1 segmentSteps:(const void *)a2 liveStrokePoints:(const void *)a3 liveStrokeStartTime:(double)a4 duration:(double)a5;
- (id)generateParticleCacheForStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(void *)a1 starts:(BOOL)a2 ends:(BOOL)a3;
- (id)generateParticleCacheForStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(void *)a1 starts:(BOOL)a2 ends:(BOOL)a3 secondaryParticles:(BOOL)a4;
- (void)generateRenderMaskForPaths:(const void *)a0 renderCache:(id)a1;
- (id)generateSDFPenCacheForStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(void *)a1 segmentSteps:(const void *)a2;
- (id)generateSmartFillMaskForStroke:(id)a0 maskPaths:(const void *)a1;
- (void)getAndRenderNewPoints:(id)a0;
- (id)initWithDrawingPixelSize:(struct CGSize { double x0; double x1; })a0 actualSize:(struct CGSize { double x0; double x1; })a1 device:(id)a2 resourceHandler:(id)a3 sixChannelBlendingMode:(long long)a4;
- (id)invertShader;
- (BOOL)isSixChannelBlendingModeAddMultiplyLayers;
- (id)linesShader;
- (id)multiplyFramebufferForTile:(id)a0 createIfNeeded:(BOOL)a1;
- (struct CGImage { } *)newCGImage;
- (struct CGImage { } *)newCGImageWithClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGImage { } *)newCGImageWithClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 framebuffer:(id)a1;
- (struct CGImage { } *)newSixChannelMultiplyCGImageWithClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)paintCircleShader;
- (id)paintShaderForAttachmentIndex:(unsigned int)a0;
- (id)paperShader;
- (id)particleAndMasksShaderForAttachmentIndex:(unsigned int)a0 maxBlendMode:(BOOL)a1;
- (double)particleOffsetAtEndOfStroke:(id)a0 forSecondaryParticles:(BOOL)a1;
- (id)particleShaderForAttachmentIndex:(unsigned int)a0 maxBlendMode:(BOOL)a1;
- (id)particleShaderWithAspectRatioSupportForAttachmentIndex:(unsigned int)a0;
- (void)purgeOriginalBackFramebuffer;
- (void)purgePaintFramebuffers;
- (void)purgeRenderCachesForStrokes:(id)a0;
- (void)renderAheadWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 onPaper:(BOOL)a1 renderBufferSize:(struct CGSize { double x0; double x1; })a2 destinationTexture:(id)a3 destinationMultiplyTexture:(id)a4;
- (void)renderAlternativeStroke:(id)a0 alpha:(double)a1 purgeableResources:(id)a2;
- (void)renderAnimatingStrokesWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 renderBufferSize:(struct CGSize { double x0; double x1; })a1 usingAccumulationBuffer:(BOOL)a2;
- (void)renderBackgroundColorWithRenderEncoder:(id)a0;
- (void)renderBrushIndicatorForStroke:(id)a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 mode:(long long)a2;
- (id)renderCacheItemForStroke:(void *)a0 bsplineFilter:(void *)a1 purgeableResources:(id)a2 strokeRenderCache:(id)a3;
- (id)renderCommandEncoderForCommandBuffer:(id)a0 renderStateConfig:(struct RenderStateConfig { id x0; id x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; BOOL x9; BOOL x10; long long x11; })a1 renderState:(id)a2;
- (void)renderEraserIndicator:(struct _PKStrokePoint { double x0; struct CGPoint { double x0; double x1; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; })a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (void)renderFullscreenQuadWithShader:(id)a0 renderEncoder:(id)a1;
- (id)renderGroupRenderCommandEncoderForCommandBuffer:(id)a0 renderStateConfig:(struct RenderStateConfig { id x0; id x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; BOOL x9; BOOL x10; long long x11; })a1 renderState:(id)a2;
- (void)renderImageTexture:(id)a0 imageTextureTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 withTiles:(id)a2 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a3 waitUntilCompleted:(BOOL)a4;
- (void)renderLinesRenderBufferSize:(struct CGSize { double x0; double x1; })a0 renderEncoder:(id)a1;
- (void)renderLiveStrokeEffects;
- (unsigned long long)renderLiveStrokePaintRenderCache:(id)a0 renderEncoder:(id)a1 computeEncoder:(id)a2 animatingStroke:(void *)a3;
- (void)renderLiveStrokeWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 renderBufferSize:(struct CGSize { double x0; double x1; })a1;
- (void)renderMaskForStroke:(id)a0 renderCache:(id)a1;
- (unsigned long long)renderPaintRenderCache:(id)a0 renderEncoder:(id)a1 computeEncoder:(id)a2 animatingStroke:(void *)a3;
- (void)renderPaperTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 paperTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 flipped:(BOOL)a2 multiply:(double)a3 renderEncoder:(id)a4;
- (unsigned long long)renderParticleRenderCache:(id)a0 renderEncoder:(id)a1 computeEncoder:(id)a2 animatingStroke:(void *)a3 secondaryParticles:(BOOL)a4;
- (unsigned long long)renderParticleStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(void *)a1 starts:(BOOL)a2 ends:(BOOL)a3 secondaryParticles:(BOOL)a4 renderEncoder:(id)a5;
- (unsigned long long)renderPenStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(void *)a1 renderEncoder:(id)a2;
- (void)renderPreviewStroke;
- (unsigned long long)renderSDFPenStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(void *)a1 renderEncoder:(id)a2;
- (unsigned long long)renderSDFPenStrokeRenderCache:(id)a0 renderEncoder:(id)a1 computeEncoder:(id)a2 animatingStroke:(void *)a3;
- (void)renderSmartFillMask:(id)a0 stroke:(id)a1;
- (unsigned long long)renderStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(void *)a1 renderEncoder:(id)a2 computeEncoder:(id)a3 renderCache:(id)a4;
- (void)renderStroke:(id)a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 mode:(long long)a2 flipped:(BOOL)a3 renderBufferSize:(struct CGSize { double x0; double x1; })a4 renderEncoder:(id)a5 currentClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a6 needRenderMask:(BOOL)a7;
- (unsigned long long)renderStrokeRenderCache:(id)a0 renderEncoder:(id)a1 animatingStroke:(void *)a2 indexed:(BOOL)a3;
- (unsigned long long)renderStrokeRenderCacheBuffers:(id)a0 renderEncoder:(id)a1 animatingStroke:(void *)a2 indexed:(BOOL)a3;
- (void)renderStrokeVertices:(const void *)a0 numVertices:(unsigned long long)a1 vertexSize:(unsigned long long)a2 numIndices:(unsigned long long)a3 renderEncoder:(id)a4;
- (unsigned long long)renderStrokes:(id)a0 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 stopBlock:(id /* block */)a3;
- (unsigned long long)renderStrokes:(id)a0 stopBlock:(id /* block */)a1;
- (void)renderTexture:(id)a0;
- (void)renderTexture:(id)a0 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)renderTexture:(id)a0 intoFramebuffer:(id)a1 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)renderTexture:(id)a0 intoFramebuffer:(id)a1 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 renderState:(id)a3;
- (void)renderTexture:(id)a0 intoFramebuffer:(id)a1 sourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 destinationPosition:(struct CGPoint { double x0; double x1; })a3 renderState:(id)a4;
- (void)renderTexture:(id)a0 intoFramebuffer:(id)a1 sourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 destinationQuad:(struct Quad { void /* unknown type, empty encoding */ x0[4]; })a3 renderState:(id)a4 blendMode:(long long)a5;
- (void)renderTexture:(id)a0 intoFramebuffer:(id)a1 sourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 destinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 renderState:(id)a4 blendMode:(long long)a5;
- (void)renderTile:(id)a0 tileFramebuffer:(id)a1 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 renderState:(id)a3 shouldComposite:(BOOL)a4;
- (void)renderTiles:(id)a0 clearBackBuffer:(BOOL)a1 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 waitUntilCompleted:(BOOL)a3;
- (void)renderTiles:(id)a0 intoTile:(id)a1 waitUntilCompleted:(BOOL)a2;
- (void)renderUberVertexShaderWithSourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 destinationQuad:(struct Quad { void /* unknown type, empty encoding */ x0[4]; })a1 renderEncoder:(id)a2 sourcePixelSize:(struct CGSize { double x0; double x1; })a3 destPixelSize:(struct CGSize { double x0; double x1; })a4 texCoordTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a5;
- (unsigned long long)renderVerticies:(const void *)a0 size:(unsigned long long)a1 numRenderedVertices:(unsigned long long)a2 vertexSize:(unsigned long long)a3 numIndices:(unsigned long long)a4 localClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a5 animatingStroke:(void *)a6 secondaryParticles:(BOOL)a7 renderEncoder:(id)a8;
- (void)renderWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 animatingStroke:(void *)a1 mode:(long long)a2 clipped:(BOOL)a3 renderBufferSize:(struct CGSize { double x0; double x1; })a4 renderEncoder:(id)a5;
- (long long)renderZoomFactorForStroke:(id)a0;
- (void)resetDrawableDirtyRect;
- (void)resetPaintFramebufferAccumulate:(BOOL)a0;
- (void)setAlternativeStrokes:(id)a0 alpha:(double)a1 originalStrokeAlpha:(double)a2;
- (void)setPaperTextureImage:(struct CGImage { } *)a0;
- (void)setPaperTextureOnRenderEncoder:(id)a0 fragmentUniforms:(struct PKMetalUberFragmentUniforms { float x0; float x1; float x2; float x3; float x4; } *)a1;
- (void)setShouldClearOriginalFramebuffer;
- (void)setVertexBuffersForVertices:(const void *)a0 numVertices:(unsigned long long)a1 vertexSize:(unsigned long long)a2 renderEncoder:(id)a3;
- (BOOL)setupAlphaBlendingForAlphaBlendFactor:(double)a0 renderEncoder:(id)a1;
- (BOOL)setupClippingForStrokeClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 clippedToPixelSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 renderEncoder:(id)a2 outNewClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a3;
- (void)setupDrawingFramebuffersIfNecessaryWantMemorylessPaint:(BOOL)a0;
- (void)setupForDefaultUberVertexShaderInRenderEncoder:(id)a0;
- (void)setupOriginalBackFramebufferIfNecessary;
- (void)setupRenderEncoder:(id)a0 forParticleStroke:(void *)a1 secondaryParticles:(BOOL)a2;
- (void)setupRenderEncoder:(id)a0 forPenStroke:(void *)a1 alphaFactor:(double)a2;
- (void)setupRenderEncoder:(id)a0 forSDFPenStroke:(void *)a1 alphaFactor:(double)a2;
- (void)setupRenderState:(id)a0 needCompute:(BOOL)a1;
- (void)setupRenderState:(id)a0 needCompute:(BOOL)a1 clearPaint:(BOOL)a2;
- (void)setupRenderStateForRenderingStrokes:(id)a0;
- (void)setupRenderStateForStrokeRenderingNumPaintBuffers:(long long)a0 needRenderMask:(BOOL)a1;
- (void)setupRenderStateWithLiveRenderConfig:(struct RenderStateConfig { id x0; id x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; BOOL x9; BOOL x10; long long x11; })a0;
- (void)setupSixChannelMultiplyFramebufferIfNecessary;
- (void)setupUberVertexShaderWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 paperTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 texCoordTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 renderEncoder:(id)a3;
- (void)setupViewScissorClippingIfNecessaryForRenderEncoder:(id)a0;
- (void *)sharedStrokeVertexBuffer;
- (BOOL)shouldAccumulateLiveStrokeToBuffer;
- (BOOL)shouldRenderDebugColorForStroke:(id)a0;
- (id)singleAttachmentBlitShader;
- (id)singleAttachmentBlitShaderWithPixelFormat:(unsigned char)a0;
- (BOOL)sixChannelBlendingIsEnabled;
- (void)sixChannelRenderStroke:(id)a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 mode:(long long)a2 flipped:(BOOL)a3 renderBufferSize:(struct CGSize { double x0; double x1; })a4 renderEncoder:(id)a5 currentClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a6 needRenderMask:(BOOL)a7;
- (BOOL)sixChannelRendersTransparent;
- (id)sixChannelSingleAttachmentBlitShader;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })strokeRenderTransform;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })strokeRenderTransformForFramebufferSize:(struct CGSize { double x0; double x1; })a0 flipped:(BOOL)a1;
- (void)teardownDrawingFramebuffers;
- (void)teardownRenderStateIfNecessary;
- (void)updateActualSize:(struct CGSize { double x0; double x1; })a0 pixelSize:(struct CGSize { double x0; double x1; })a1;
- (void)updateTile:(id)a0 strokes:(id)a1 clear:(BOOL)a2 waitUntilCompleted:(BOOL)a3 offscreen:(BOOL)a4 stopBlock:(id /* block */)a5;
- (BOOL)useBlitEncoder;

@end
