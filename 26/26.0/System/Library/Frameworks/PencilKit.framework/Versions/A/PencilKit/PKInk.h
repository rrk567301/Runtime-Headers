@class NSString, NSData, PKInkBehavior, NSColor;

@interface PKInk : NSObject <NSSecureCoding, NSCopying> {
    struct shared_ptr<PKProtobufUnknownFields> { struct PKProtobufUnknownFields *__ptr_; struct __shared_weak_count *__cntrl_; } _unknownFields;
    PKInk *_cachedInkWithOriginalRequiredContentVersion;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly, nonatomic) NSData *rawValue;
@property (readonly, nonatomic) unsigned long long particleRotation;
@property (readonly, nonatomic) NSColor *hdrColor;
@property (readonly, nonatomic) double hdrHeadroom;
@property (readonly, nonatomic) NSColor *sdrColor;
@property (nonatomic) void /* unknown type, empty encoding */ _sixChannelAddColor;
@property (nonatomic) void /* unknown type, empty encoding */ _sixChannelMultiplyColor;
@property (nonatomic) void /* unknown type, empty encoding */ _hdrAddColor;
@property (nonatomic) void /* unknown type, empty encoding */ _hdrMultiplyColor;
@property (nonatomic) long long _requiredContentVersionOverride;
@property (nonatomic) BOOL _weightIsUndefined;
@property (retain, nonatomic) PKInkBehavior *behavior;
@property (readonly, nonatomic) unsigned long long version;
@property (readonly, nonatomic) long long inkFormatVersion;
@property (readonly, nonatomic) NSString *variant;
@property (readonly, nonatomic) double _weight;
@property (readonly, nonatomic) double _azimuth;
@property (readonly, nonatomic) BOOL _isStrokeGeneratingInk;
@property (readonly, nonatomic) NSString *identifier;
@property (readonly, nonatomic) double weight;
@property (readonly, nonatomic) NSString *inkType;
@property (readonly, nonatomic) NSColor *color;
@property (readonly, nonatomic) long long requiredContentVersion;

+ (id)inkWithIdentifier:(id)a0 color:(id)a1 weight:(double)a2;
+ (void)_clearCachedInks;
+ (id)colorForLassoStroke;
+ (long long)currentInkVersionForInkIdentifier:(id)a0;
+ (id)decodeColorFrom:(id)a0 propertyKey:(id)a1 inkOpacity:(double)a2;
+ (double)defaultAzimuthForIdentifier:(id)a0;
+ (double)defaultOpacityForIdentifier:(id)a0;
+ (double)defaultWeightForIdentifier:(id)a0;
+ (double)headroomForCGColor:(struct CGColor { } *)a0;
+ (id)identifierForCommandType:(unsigned int)a0 wantsObjectErase:(BOOL)a1;
+ (id)identifierForInkType:(id)a0;
+ (id)inkFromDictionary:(id)a0 color:(id)a1 identifier:(id)a2;
+ (id)inkFromInk:(id)a0 azimuth:(double)a1;
+ (id)inkFromInk:(id)a0 color:(id)a1;
+ (id)inkFromInk:(id)a0 color:(id)a1 hdrColor:(id)a2 hdrHeadroom:(double)a3;
+ (id)inkFromInk:(id)a0 weight:(double)a1;
+ (id)inkFromInk:(id)a0 withBehavior:(id)a1;
+ (id)inkWithIdentifier:(id)a0 color:(id)a1;
+ (id)inkWithIdentifier:(id)a0 color:(id)a1 variant:(id)a2;
+ (id)inkWithIdentifier:(id)a0 color:(id)a1 version:(unsigned long long)a2 variant:(id)a3;
+ (id)inkWithIdentifier:(id)a0 color:(id)a1 weight:(double)a2 azimuth:(double)a3;
+ (id)inkWithIdentifier:(id)a0 properties:(id)a1;
+ (id)inkWithIdentifier:(id)a0 properties:(id)a1 inkVersion:(long long)a2;
+ (id)inkWithType:(id)a0 color:(id)a1 weight:(double)a2;
+ (id)inkWithType:(id)a0 color:(id)a1 weight:(double)a2 azimuth:(double)a3;
+ (struct CGColor { } *)sdrColorFromCGColor:(struct CGColor { } *)a0;
+ (id)sdrInkFromInk:(id)a0;

- (void)setWeight:(double)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)dictionaryRepresentation;
- (void)encodeWithCoder:(id)a0;
- (id)init;
- (id)properties;
- (id)description;
- (id)initWithCoder:(id)a0;
- (id).cxx_construct;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)a0;
- (void).cxx_destruct;
- (id)initWithRawValue:(id)a0;
- (id)initWithArchive:(const void *)a0;
- (void)saveToArchive:(void *)a0;
- (void /* unknown type, empty encoding */)_defaultSixChannelMultiplyColor;
- (BOOL)_shouldRenderAsFountainPenInkV2;
- (void)_addTestDataToUnknownFields;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_adjustedInkTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 point:(struct _PKStrokePoint { double x0; struct CGPoint { double x0; double x1; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; })a1;
- (id)_copyWithOriginalRequiredContentVersion;
- (id)_copyWithVariant:(id)a0;
- (id)_dataInUnknownFields;
- (void /* unknown type, empty encoding */)_defaultHDRAddColor;
- (void /* unknown type, empty encoding */)_defaultHDRMultiplyColor;
- (void /* unknown type, empty encoding */)_defaultSixChannelAddColor;
- (void)_initColor:(id)a0 hdrColor:(id)a1 hdrHeadroom:(double)a2;
- (BOOL)_isCrayonInk;
- (BOOL)_isCustomInk;
- (BOOL)_isEraserInk;
- (BOOL)_isFountainPenInk;
- (BOOL)_isFountainPenInkV2;
- (BOOL)_isGenerationTool;
- (BOOL)_isHandwritingInk;
- (BOOL)_isLassoInk;
- (BOOL)_isMarkerInk;
- (BOOL)_isMonolineInk;
- (BOOL)_isPenInk;
- (BOOL)_isPencilInk;
- (BOOL)_isReedCalligraphyInk;
- (BOOL)_isWatercolorInk;
- (long long)_numPaintFramebuffers;
- (long long)_requiredContentVersion;
- (void)_resetRequiredContentVersionOverride;
- (void)_setupCustomizedSixChannelColors;
- (void)_setupDefaultSixChannelAddAndMultiplyColors;
- (void)_setupRequiredContentVersion;
- (BOOL)_shouldSaveHDRAddColor;
- (BOOL)_shouldSaveHDRMultiplyColor;
- (BOOL)_shouldSaveRequiredContentVersionOverride;
- (BOOL)_shouldSaveSixChannelAddColor;
- (BOOL)_shouldSaveSixChannelMultiplyColor;
- (id)_sixChannelVersion;
- (BOOL)_supportsCombiningStrokes;
- (id)colorForUIAllowHDR:(BOOL)a0;
- (unsigned long long)hashValueForFloat:(double)a0;
- (id)identifierForArchiving;
- (id)initWithBehavior:(id)a0 color:(id)a1 version:(unsigned long long)a2 variant:(id)a3 weight:(double)a4 azimuth:(double)a5;
- (id)initWithIdentifier:(id)a0 color:(id)a1 hdrColor:(id)a2 hdrHeadroom:(double)a3 version:(unsigned long long)a4 variant:(id)a5 weight:(double)a6 azimuth:(double)a7 behavior:(id)a8;
- (id)initWithIdentifier:(id)a0 color:(id)a1 version:(unsigned long long)a2 variant:(id)a3;
- (id)initWithIdentifier:(id)a0 color:(id)a1 version:(unsigned long long)a2 variant:(id)a3 weight:(double)a4;
- (id)initWithIdentifier:(id)a0 color:(id)a1 version:(unsigned long long)a2 variant:(id)a3 weight:(double)a4 azimuth:(double)a5;
- (id)initWithInkType:(id)a0 color:(id)a1;
- (id)initWithUncheckedIdentifier:(id)a0 color:(id)a1 hdrColor:(id)a2 hdrHeadroom:(double)a3 version:(unsigned long long)a4 variant:(id)a5 weight:(double)a6 azimuth:(double)a7;
- (id)initWithUncheckedIdentifier:(id)a0 color:(id)a1 version:(unsigned long long)a2 variant:(id)a3 weight:(double)a4;
- (id)initWithV1Archive:(const void *)a0 serializationVersion:(unsigned long long)a1;
- (BOOL)isEqualInk:(id)a0;
- (BOOL)isEqualUnweightedInk:(id)a0;
- (void)saveToV1Archive:(void *)a0;
- (id)variantForArchiving;

@end
