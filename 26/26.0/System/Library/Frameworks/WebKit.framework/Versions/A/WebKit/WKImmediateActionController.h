@class QLPreviewMenuItem, NSString, NSView, DDSecureActionContext, NSURLResponse, NSURLRequest, NSImmediateActionGestureRecognizer;

@interface WKImmediateActionController : NSObject <QLPreviewMenuItemDelegate, NSImmediateActionGestureRecognizerDelegate> {
    struct WeakPtr<WebKit::WebPageProxy, WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> { struct RefPtr<WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>, WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> { struct DefaultWeakPtrImpl *m_ptr; } m_impl; } _page;
    NSView *_view;
    struct WeakPtr<WebKit::WebViewImpl, WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> { struct RefPtr<WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>, WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> { struct DefaultWeakPtrImpl *m_ptr; } m_impl; } _viewImpl;
    int _state;
    struct WebHitTestResultData { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } absoluteImageURL; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } absolutePDFURL; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } absoluteLinkURL; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } absoluteMediaURL; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } linkLabel; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } linkTitle; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } linkSuggestedFilename; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } imageSuggestedFilename; BOOL isContentEditable; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } elementBoundingBox; unsigned char isScrollbar; BOOL isSelected; BOOL isTextNode; BOOL isOverTextInsideFormControlElement; BOOL isDownloadableMedia; BOOL mediaIsInFullscreen; BOOL isActivePDFAnnotation; unsigned char elementType; struct optional<WebKit::FrameInfoData> { union { char __null_state_; struct FrameInfoData { BOOL isMainFrame; BOOL frameType; struct ResourceRequest { struct RequestData { struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_hasOpaquePath : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } m_url; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_hasOpaquePath : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } m_firstPartyForCookies; double m_timeoutInterval; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_httpMethod; struct HTTPHeaderMap { struct Vector<WebCore::HTTPHeaderMap::CommonHeader, 0UL, WTF::CrashOnOverflow, 6UL, WTF::FastMalloc> { struct CommonHeader *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_commonHeaders; struct Vector<WebCore::HTTPHeaderMap::UncommonHeader, 0UL, WTF::CrashOnOverflow, 0UL, WTF::FastMalloc> { struct UncommonHeader *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_uncommonHeaders; } m_httpHeaderFields; struct Vector<WTF::String, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct String *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_responseContentDispositionEncodingFallbackArray; unsigned char m_cachePolicy; unsigned char m_sameSiteDisposition; unsigned char m_priority; unsigned char m_requester; unsigned char m_isTopSite : 1; unsigned char m_allowCookies : 1; unsigned char m_isAppInitiated : 1; unsigned char m_privacyProxyFailClosedForUnreachableNonMainHosts : 1; unsigned char m_useAdvancedPrivacyProtections : 1; unsigned char m_didFilterLinkDecoration : 1; unsigned char m_isPrivateTokenUsageByThirdPartyAllowed : 1; unsigned char m_wasSchemeOptimisticallyUpgraded : 1; } m_requestData; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_initiatorIdentifier; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_cachePartition; struct RefPtr<WebCore::FormData, WTF::RawPtrTraits<WebCore::FormData>, WTF::DefaultRefDerefTraits<WebCore::FormData>> { struct FormData *m_ptr; } m_httpBody; struct optional<int> { union { char __null_state_; int __val_; } ; BOOL __engaged_; } m_inspectorInitiatorNodeIdentifier; unsigned char m_resourceRequestUpdated : 1; unsigned char m_platformRequestUpdated : 1; unsigned char m_resourceRequestBodyUpdated : 1; unsigned char m_platformRequestBodyUpdated : 1; unsigned char m_hiddenFromInspector : 1; struct RetainPtr<NSURLRequest> { NSURLRequest *m_ptr; } m_nsRequest; } request; struct SecurityOriginData { struct variant<WebCore::SecurityOriginData::Tuple, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits<uint64_t>, unsigned long long>>> { struct impl<WebCore::SecurityOriginData::Tuple, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits<uint64_t>, unsigned long long>>> { union recursive_union<mpark::detail::Trait::Available, 0UL, WebCore::SecurityOriginData::Tuple, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits<uint64_t>, unsigned long long>>> { char dummy_; struct alt<0UL, WebCore::SecurityOriginData::Tuple> { struct Tuple { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } protocol; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } host; struct optional<unsigned short> { union { char __null_state_; unsigned short __val_; } ; BOOL __engaged_; } port; } value; } head_; union recursive_union<mpark::detail::Trait::Available, 1UL, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits<uint64_t>, unsigned long long>>> { char dummy_; struct alt<1UL, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits<uint64_t>, unsigned long long>>> { struct ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits<uint64_t>, unsigned long long>> { struct ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits<uint64_t>, unsigned long long> { unsigned long long m_identifier; } m_object; struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long> { unsigned long long m_identifier; } m_processIdentifier; } value; } head_; union recursive_union<mpark::detail::Trait::Available, 2UL> { } tail_; } tail_; } data_; unsigned char index_; } impl_; } m_data; } securityOrigin; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } frameName; struct ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long> { unsigned long long m_identifier; } frameID; struct Markable<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>, WTF::MarkableTraits<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>> { struct ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long> { unsigned long long m_identifier; } m_value; } parentFrameID; struct Markable<WebCore::ProcessQualified<WTF::UUID>, WTF::MarkableTraits<WebCore::ProcessQualified<UUID>>> { struct ProcessQualified<WTF::UUID> { struct UUID { unsigned __int128 m_data; } m_object; struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long> { unsigned long long m_identifier; } m_processIdentifier; } m_value; } documentID; struct CertificateInfo { struct RetainPtr<__SecTrust *> { struct __SecTrust *m_ptr; } m_trust; } certificateInfo; int processID; BOOL isFocused; BOOL errorOccurred; struct WebFrameMetrics { unsigned char isScrollable; struct IntSize { int m_width; int m_height; } contentSize; struct IntSize { int m_width; int m_height; } visibleContentSize; struct IntSize { int m_width; int m_height; } visibleContentSizeExcludingScrollbars; } frameMetrics; } __val_; } ; BOOL __engaged_; } frameInfo; struct optional<WebCore::RemoteUserInputEventData> { union { char __null_state_; struct RemoteUserInputEventData { struct ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long> { unsigned long long m_identifier; } targetFrameID; struct IntPoint { int m_x; int m_y; } transformedPoint; } __val_; } ; BOOL __engaged_; } remoteUserInputEventData; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } lookupText; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } toolTipText; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } imageText; struct RefPtr<WebCore::SharedMemory, WTF::RawPtrTraits<WebCore::SharedMemory>, WTF::DefaultRefDerefTraits<WebCore::SharedMemory>> { struct SharedMemory *m_ptr; } imageSharedMemory; struct RefPtr<WebCore::ShareableBitmap, WTF::RawPtrTraits<WebCore::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>> { struct ShareableBitmap *m_ptr; } imageBitmap; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } sourceImageMIMEType; BOOL hasEntireImage; BOOL allowsFollowingLink; BOOL allowsFollowingImageURL; struct optional<WebCore::ResourceResponse> { union { char __null_state_; struct ResourceResponse { struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_hasOpaquePath : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } m_url; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_mimeType; long long m_expectedContentLength; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_textEncodingName; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_httpStatusText; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_httpVersion; struct HTTPHeaderMap { struct Vector<WebCore::HTTPHeaderMap::CommonHeader, 0UL, WTF::CrashOnOverflow, 6UL, WTF::FastMalloc> { struct CommonHeader *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_commonHeaders; struct Vector<WebCore::HTTPHeaderMap::UncommonHeader, 0UL, WTF::CrashOnOverflow, 0UL, WTF::FastMalloc> { struct UncommonHeader *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_uncommonHeaders; } m_httpHeaderFields; struct Box<WebCore::NetworkLoadMetrics> { struct RefPtr<WTF::Box<WebCore::NetworkLoadMetrics>::Data, WTF::RawPtrTraits<WTF::Box<WebCore::NetworkLoadMetrics>::Data>, WTF::DefaultRefDerefTraits<WTF::Box<WebCore::NetworkLoadMetrics>::Data>> { struct Data *m_ptr; } m_data; } m_networkLoadMetrics; struct optional<WebCore::CertificateInfo> { union { char __null_state_; struct CertificateInfo { struct RetainPtr<__SecTrust *> { struct __SecTrust *m_ptr; } m_trust; } __val_; } ; BOOL __engaged_; } m_certificateInfo; short m_httpStatusCode; unsigned char m_isNull : 1; unsigned char m_initLevel : 3; unsigned char m_usedLegacyTLS : 1; unsigned char m_wasPrivateRelayed : 1; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_proxyName; struct Markable<WTF::Seconds, WTF::MarkableTraits<Seconds>> { struct Seconds { double m_value; } m_value; } m_age; struct Markable<WTF::WallTime, WTF::MarkableTraits<WallTime>> { struct WallTime { double m_value; } m_value; } m_date; struct Markable<WTF::WallTime, WTF::MarkableTraits<WallTime>> { struct WallTime { double m_value; } m_value; } m_expires; struct Markable<WTF::WallTime, WTF::MarkableTraits<WallTime>> { struct WallTime { double m_value; } m_value; } m_lastModified; struct ParsedContentRange { long long m_firstBytePosition; long long m_lastBytePosition; long long m_instanceLength; } m_contentRange; struct CacheControlDirectives { struct Markable<WTF::Seconds, WTF::MarkableTraits<Seconds>> { struct Seconds { double m_value; } m_value; } maxAge; struct Markable<WTF::Seconds, WTF::MarkableTraits<Seconds>> { struct Seconds { double m_value; } m_value; } maxStale; struct Markable<WTF::Seconds, WTF::MarkableTraits<Seconds>> { struct Seconds { double m_value; } m_value; } staleWhileRevalidate; unsigned char noCache : 1; unsigned char noStore : 1; unsigned char mustRevalidate : 1; unsigned char immutable : 1; } m_cacheControlDirectives; unsigned char m_haveParsedCacheControlHeader : 1; unsigned char m_haveParsedAgeHeader : 1; unsigned char m_haveParsedDateHeader : 1; unsigned char m_haveParsedExpiresHeader : 1; unsigned char m_haveParsedLastModifiedHeader : 1; unsigned char m_haveParsedContentRangeHeader : 1; unsigned char m_isRedirected : 1; unsigned char m_isRangeRequested : 1; unsigned char m_tainting : 2; unsigned char m_source : 4; unsigned char m_type : 3; struct RetainPtr<NSURLResponse> { NSURLResponse *m_ptr; } m_nsResponse; } __val_; } ; BOOL __engaged_; } linkLocalResourceResponse; struct WebHitTestResultPlatformData { struct Markable<WebKit::WebHitTestResultPlatformData::DetectedDataActionContext, WTF::MarkableTraits<WebKit::WebHitTestResultPlatformData::DetectedDataActionContext>> { struct DetectedDataActionContext { struct RetainPtr<DDSecureActionContext> { DDSecureActionContext *m_ptr; } context; } m_value; } detectedDataActionContext; struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } detectedDataBoundingBox; struct RefPtr<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>, WTF::DefaultRefDerefTraits<WebCore::TextIndicator>> { struct TextIndicator *m_ptr; } detectedDataTextIndicator; unsigned long long detectedDataOriginatingPageOverlay; } platformData; struct DictionaryPopupInfo { struct FloatPoint { float m_x; float m_y; } origin; struct RefPtr<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>, WTF::DefaultRefDerefTraits<WebCore::TextIndicator>> { struct TextIndicator *m_ptr; } textIndicator; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } text; } dictionaryPopupInfo; struct RefPtr<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>, WTF::DefaultRefDerefTraits<WebCore::TextIndicator>> { struct TextIndicator *m_ptr; } linkTextIndicator; } _hitTestResultData;
    BOOL _contentPreventsDefault;
    struct RefPtr<API::Object, WTF::RawPtrTraits<API::Object>, WTF::DefaultRefDerefTraits<API::Object>> { struct Object *m_ptr; } _userData;
    unsigned int _type;
    struct RetainPtr<NSImmediateActionGestureRecognizer> { NSImmediateActionGestureRecognizer *m_ptr; } _immediateActionRecognizer;
    BOOL _hasActivatedActionContext;
    struct RetainPtr<DDSecureActionContext> { DDSecureActionContext *m_ptr; } _currentActionContext;
    struct RetainPtr<QLPreviewMenuItem> { QLPreviewMenuItem *m_ptr; } _currentQLPreviewMenuItem;
    BOOL _hasActiveImmediateAction;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id).cxx_construct;
- (void).cxx_destruct;
- (unsigned long long)menuItem:(id)a0 preferredEdgeForPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)immediateActionRecognizerDidCancelAnimation:(id)a0;
- (void)immediateActionRecognizerDidCompleteAnimation:(id)a0;
- (void)immediateActionRecognizerDidUpdateAnimation:(id)a0;
- (void)immediateActionRecognizerWillBeginAnimation:(id)a0;
- (void)immediateActionRecognizerWillPrepare:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })menuItem:(id)a0 itemFrameForPoint:(struct CGPoint { double x0; double x1; })a1;
- (struct CGSize { double x0; double x1; })menuItem:(id)a0 maxSizeForPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)menuItem:(id)a0 previewItemAtPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)menuItem:(id)a0 viewAtScreenPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)menuItemDidClose:(id)a0;
- (id)_animationControllerForDataDetectedLink;
- (void)_cancelImmediateAction;
- (void)_clearImmediateActionState;
- (id)_defaultAnimationController;
- (id)_animationControllerForDataDetectedText;
- (id)_animationControllerForText;
- (void)_updateImmediateActionItem;
- (void)_cancelImmediateActionIfNeeded;
- (struct RefPtr<API::HitTestResult, WTF::RawPtrTraits<API::HitTestResult>, WTF::DefaultRefDerefTraits<API::HitTestResult>> { struct HitTestResult *x0; })_webHitTestResult;
- (void)didPerformImmediateActionHitTest:(const void *)a0 contentPreventsDefault:(BOOL)a1 userData:(struct Object { void /* function */ **x0; void *x1; } *)a2;
- (void)dismissContentRelativeChildWindows;
- (BOOL)hasActiveImmediateAction;
- (id)initWithPage:(struct reference_wrapper<WebKit::WebPageProxy> { struct WebPageProxy *x0; })a0 view:(id)a1 viewImpl:(struct reference_wrapper<WebKit::WebViewImpl> { struct WebViewImpl *x0; })a2 recognizer:(id)a3;
- (void)willDestroyView:(id)a0;

@end
