@class NSURL, WKProcessPool, WKUserContentController, NSString, NSSet, _WKWebExtensionController, _WKApplicationManifest, WKWebExtensionController, WKWebsiteDataStore, NSArray, WKWebView, WKWebpagePreferences, WKPreferences, _WKVisitedLinkStore;

@interface WKWebViewConfiguration : NSObject <WKObject, NSSecureCoding, NSCopying> {
    struct AlignedStorage<API::PageConfiguration, 8UL> { struct Storage { unsigned char data[576]; } m_storage; } _pageConfiguration;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (weak, nonatomic, setter=_setRelatedWebView:) WKWebView *_relatedWebView;
@property (weak, nonatomic, setter=_setWebViewToCloneSessionStorageFrom:) WKWebView *_webViewToCloneSessionStorageFrom;
@property (copy, nonatomic, setter=_setGroupIdentifier:) NSString *_groupIdentifier;
@property (retain, nonatomic, setter=_setVisitedLinkStore:) _WKVisitedLinkStore *_visitedLinkStore;
@property (retain, nonatomic, setter=_setRequiredWebExtensionBaseURL:) NSURL *_requiredWebExtensionBaseURL;
@property (readonly, nonatomic) WKWebExtensionController *_strongWebExtensionController;
@property (weak, nonatomic, setter=_setWeakWebExtensionController:) WKWebExtensionController *_weakWebExtensionController;
@property (retain, nonatomic, setter=_setWebExtensionController:) _WKWebExtensionController *_webExtensionController;
@property (weak, nonatomic, setter=_setAlternateWebViewForNavigationGestures:) WKWebView *_alternateWebViewForNavigationGestures;
@property (nonatomic, setter=_setRespectsImageOrientation:) BOOL _respectsImageOrientation;
@property (nonatomic, setter=_setPrintsBackgrounds:) BOOL _printsBackgrounds;
@property (nonatomic, setter=_setIncrementalRenderingSuppressionTimeout:) double _incrementalRenderingSuppressionTimeout;
@property (nonatomic, setter=_setAllowsJavaScriptMarkup:) BOOL _allowsJavaScriptMarkup;
@property (nonatomic, setter=_setConvertsPositionStyleOnCopy:) BOOL _convertsPositionStyleOnCopy;
@property (nonatomic, setter=_setAllowsMetaRefresh:) BOOL _allowsMetaRefresh;
@property (nonatomic, setter=_setAllowUniversalAccessFromFileURLs:) BOOL _allowUniversalAccessFromFileURLs;
@property (nonatomic, setter=_setAllowTopNavigationToDataURLs:) BOOL _allowTopNavigationToDataURLs;
@property (nonatomic, setter=_setNeedsStorageAccessFromFileURLsQuirk:) BOOL _needsStorageAccessFromFileURLsQuirk;
@property (nonatomic, setter=_setMainContentUserGestureOverrideEnabled:) BOOL _mainContentUserGestureOverrideEnabled;
@property (nonatomic, setter=_setInvisibleAutoplayNotPermitted:) BOOL _invisibleAutoplayNotPermitted;
@property (nonatomic, setter=_setMediaDataLoadsAutomatically:) BOOL _mediaDataLoadsAutomatically;
@property (nonatomic, setter=_setAttachmentElementEnabled:) BOOL _attachmentElementEnabled;
@property (nonatomic, setter=_setAttachmentWideLayoutEnabled:) BOOL _attachmentWideLayoutEnabled;
@property (nonatomic, setter=_setAttachmentFileWrapperClass:) Class _attachmentFileWrapperClass;
@property (nonatomic, setter=_setInitialCapitalizationEnabled:) BOOL _initialCapitalizationEnabled;
@property (nonatomic, setter=_setApplePayEnabled:) BOOL _applePayEnabled;
@property (nonatomic, setter=_setWaitsForPaintAfterViewDidMoveToWindow:) BOOL _waitsForPaintAfterViewDidMoveToWindow;
@property (nonatomic, getter=_isControlledByAutomation, setter=_setControlledByAutomation:) BOOL _controlledByAutomation;
@property (nonatomic, setter=_setApplicationManifest:) _WKApplicationManifest *_applicationManifest;
@property (nonatomic, setter=_setColorFilterEnabled:) BOOL _colorFilterEnabled;
@property (nonatomic, setter=_setIncompleteImageBorderEnabled:) BOOL _incompleteImageBorderEnabled;
@property (nonatomic, setter=_setDrawsBackground:) BOOL _drawsBackground;
@property (nonatomic, setter=_setShouldDeferAsynchronousScriptsUntilAfterDocumentLoad:) BOOL _shouldDeferAsynchronousScriptsUntilAfterDocumentLoad;
@property (nonatomic, setter=_setShowsSystemScreenTimeBlockingView:) BOOL _showsSystemScreenTimeBlockingView;
@property (readonly, nonatomic) WKWebsiteDataStore *_websiteDataStoreIfExists;
@property (copy, nonatomic, setter=_setCORSDisablingPatterns:) NSArray *_corsDisablingPatterns;
@property (copy, nonatomic, setter=_setMaskedURLSchemes:) NSSet *_maskedURLSchemes;
@property (nonatomic, setter=_setCrossOriginAccessControlCheckEnabled:) BOOL _crossOriginAccessControlCheckEnabled;
@property (nonatomic, setter=_setLoadsFromNetwork:) BOOL _loadsFromNetwork;
@property (copy, nonatomic, setter=_setAllowedNetworkHosts:) NSSet *_allowedNetworkHosts;
@property (nonatomic, setter=_setLoadsSubresources:) BOOL _loadsSubresources;
@property (nonatomic, setter=_setIgnoresAppBoundDomains:) BOOL _ignoresAppBoundDomains;
@property (nonatomic, setter=_setClientNavigationsRunAtForegroundPriority:) BOOL _clientNavigationsRunAtForegroundPriority;
@property (nonatomic, setter=_setPortsForUpgradingInsecureSchemeForTesting:) NSArray *_portsForUpgradingInsecureSchemeForTesting;
@property (nonatomic, setter=_setShowsURLsInToolTips:) BOOL _showsURLsInToolTips;
@property (nonatomic, setter=_setServiceControlsEnabled:) BOOL _serviceControlsEnabled;
@property (nonatomic, setter=_setImageControlsEnabled:) BOOL _imageControlsEnabled;
@property (nonatomic, setter=_setContextMenuQRCodeDetectionEnabled:) BOOL _contextMenuQRCodeDetectionEnabled;
@property (nonatomic, setter=_setRequiresUserActionForEditingControlsManager:) BOOL _requiresUserActionForEditingControlsManager;
@property (nonatomic, setter=_setCPULimit:) double _cpuLimit;
@property (nonatomic, setter=_setPageGroup:) struct OpaqueWKPageGroup { } *_pageGroup;
@property (nonatomic, setter=_setRequiresUserActionForAudioPlayback:) BOOL _requiresUserActionForAudioPlayback;
@property (nonatomic, setter=_setRequiresUserActionForVideoPlayback:) BOOL _requiresUserActionForVideoPlayback;
@property (nonatomic, setter=_setOverrideContentSecurityPolicy:) NSString *_overrideContentSecurityPolicy;
@property (nonatomic, setter=_setMediaContentTypesRequiringHardwareSupport:) NSString *_mediaContentTypesRequiringHardwareSupport;
@property (nonatomic, setter=_setLegacyEncryptedMediaAPIEnabled:) BOOL _legacyEncryptedMediaAPIEnabled;
@property (nonatomic, setter=_setAllowMediaContentTypesRequiringHardwareSupportAsFallback:) BOOL _allowMediaContentTypesRequiringHardwareSupportAsFallback;
@property (nonatomic, setter=_setMediaCaptureEnabled:) BOOL _mediaCaptureEnabled;
@property (copy, nonatomic, setter=_setAdditionalSupportedImageTypes:) NSArray *_additionalSupportedImageTypes;
@property (nonatomic, setter=_setUndoManagerAPIEnabled:) BOOL _undoManagerAPIEnabled;
@property (nonatomic, setter=_setShouldRelaxThirdPartyCookieBlocking:) BOOL _shouldRelaxThirdPartyCookieBlocking;
@property (nonatomic, setter=_setProcessDisplayName:) NSString *_processDisplayName;
@property (nonatomic, setter=_setAppHighlightsEnabled:) BOOL _appHighlightsEnabled;
@property (nonatomic, setter=_setAllowTestOnlyIPC:) BOOL _allowTestOnlyIPC;
@property (nonatomic, setter=_setDelaysWebProcessLaunchUntilFirstLoad:) BOOL _delaysWebProcessLaunchUntilFirstLoad;
@property (nonatomic, setter=_setSampledPageTopColorMaxDifference:) double _sampledPageTopColorMaxDifference;
@property (nonatomic, setter=_setSampledPageTopColorMinHeight:) double _sampledPageTopColorMinHeight;
@property (nonatomic, setter=_setAttributedBundleIdentifier:) NSString *_attributedBundleIdentifier;
@property (nonatomic, setter=_setContentSecurityPolicyModeForExtension:) unsigned long long _contentSecurityPolicyModeForExtension;
@property (nonatomic, setter=_setMarkedTextInputEnabled:) BOOL _markedTextInputEnabled;
@property (nonatomic, setter=_setMultiRepresentationHEICInsertionEnabled:) BOOL _multiRepresentationHEICInsertionEnabled;
@property (nonatomic, setter=_setScrollToTextFragmentIndicatorEnabled:) BOOL _scrollToTextFragmentIndicatorEnabled;
@property (nonatomic, setter=_setScrollToTextFragmentMarkingEnabled:) BOOL _scrollToTextFragmentMarkingEnabled;
@property (readonly, nonatomic) NSString *_applicationNameForDesktopUserAgent;
@property (retain, nonatomic) WKProcessPool *processPool;
@property (retain, nonatomic) WKPreferences *preferences;
@property (retain, nonatomic) WKUserContentController *userContentController;
@property (retain, nonatomic) WKWebExtensionController *webExtensionController;
@property (retain, nonatomic) WKWebsiteDataStore *websiteDataStore;
@property (nonatomic) BOOL suppressesIncrementalRendering;
@property (copy, nonatomic) NSString *applicationNameForUserAgent;
@property (nonatomic) BOOL allowsAirPlayForMediaPlayback;
@property (nonatomic) BOOL showsSystemScreenTimeBlockingView;
@property (nonatomic) BOOL upgradeKnownHostsToHTTPS;
@property (nonatomic) unsigned long long mediaTypesRequiringUserActionForPlayback;
@property (copy, nonatomic) WKWebpagePreferences *defaultWebpagePreferences;
@property (nonatomic) BOOL limitsNavigationsToAppBoundDomains;
@property (nonatomic) BOOL allowsInlinePredictions;
@property (nonatomic) long long userInterfaceDirectionPolicy;
@property (nonatomic) BOOL supportsAdaptiveImageGlyph;
@property (nonatomic) long long writingToolsBehavior;
@property (readonly) struct Object { void /* function */ **x0; void *x1; } *_apiObject;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)accessInstanceVariablesDirectly;
+ (BOOL)_isValidCustomScheme:(id)a0;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)encodeWithCoder:(id)a0;
- (id)valueForKey:(id)a0;
- (id)init;
- (id)initWithCoder:(id)a0;
- (void)setValue:(id)a0 forKey:(id)a1;
- (struct Ref<API::PageConfiguration, WTF::RawPtrTraits<API::PageConfiguration>, WTF::DefaultRefDerefTraits<API::PageConfiguration>> { struct PageConfiguration *x0; })_protectedPageConfiguration;
- (void)_setVisitedLinkProvider:(id)a0;
- (id)_visitedLinkProvider;
- (void)setURLSchemeHandler:(id)a0 forURLScheme:(id)a1;
- (id)urlSchemeHandlerForURLScheme:(id)a0;

@end
