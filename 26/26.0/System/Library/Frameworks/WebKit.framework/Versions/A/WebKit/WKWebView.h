@class WKBrowsingContextHandle, NSMenu, WKWebViewConfiguration, _WKSessionState, WKScrollGeometry, NSString, NSVisualEffectView, _WKFrameHandle, STWebpageController, NSArray, NSScrollPocket, NSColor, _WKSpatialBackdropSource, _WKInspector, NSData, WKColorExtensionView, _WKThumbnailView, WTSession, NSView, _WKWarningView, WKBackForwardList, CALayer, NSURL, NSMapTable, NSTouchBar, WKTextFinderClient;
@protocol WKUIDelegate, WKHistoryDelegatePrivate, WKIntelligenceTextEffectCoordinating, _WKResourceLoadDelegate, _WKDiagnosticLoggingDelegate, _WKAppHighlightDelegate, _WKFindDelegate, _WKIconLoadingDelegate, _WKInputDelegate, _WKFullscreenDelegate, WKNavigationDelegate, _WKTextManipulationDelegate;

@interface WKWebView : NSView <WebViewImplDelegate, NSUserInterfaceValidations, NSTextInputClient, NSTextInputClient_Async, NSTouchBarProvider, NSFilePromiseProviderDelegate, NSDraggingSource, NSScrollViewSeparatorTrackingAdapter, WKShareSheetDelegate, WTWritingToolsDelegate, NSTextInputTraits> {
    struct RetainPtr<WKWebViewConfiguration> { WKWebViewConfiguration *m_ptr; } _configuration;
    struct RefPtr<WebKit::WebPageProxy, WTF::RawPtrTraits<WebKit::WebPageProxy>, WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> { struct WebPageProxy *m_ptr; } _page;
    struct unique_ptr<WebKit::NavigationState, std::default_delete<WebKit::NavigationState>> { struct NavigationState *__ptr_; } _navigationState;
    struct unique_ptr<WebKit::UIDelegate, std::default_delete<WebKit::UIDelegate>> { struct UIDelegate *__ptr_; } _uiDelegate;
    struct unique_ptr<WebKit::IconLoadingDelegate, std::default_delete<WebKit::IconLoadingDelegate>> { struct IconLoadingDelegate *__ptr_; } _iconLoadingDelegate;
    struct unique_ptr<WebKit::ResourceLoadDelegate, std::default_delete<WebKit::ResourceLoadDelegate>> { struct ResourceLoadDelegate *__ptr_; } _resourceLoadDelegate;
    struct WeakObjCPtr<id<_WKTextManipulationDelegate>> { id m_weakReference; } _textManipulationDelegate;
    struct WeakObjCPtr<id<_WKInputDelegate>> { id m_weakReference; } _inputDelegate;
    struct WeakObjCPtr<id<_WKAppHighlightDelegate>> { id m_weakReference; } _appHighlightDelegate;
    struct RetainPtr<_WKWarningView> { _WKWarningView *m_ptr; } _warningView;
    struct optional<bool> { union { char __null_state_; BOOL __val_; } ; BOOL __engaged_; } _resolutionForShareSheetImmediateCompletionForTesting;
    unsigned long long _selectionAttributes;
    unsigned long long _observedRenderingProgressEvents;
    BOOL _usePlatformFindUI;
    BOOL _usesAutomaticContentInsetBackgroundFill;
    BOOL _shouldSuppressTopColorExtensionView;
    BOOL _alwaysPrefersSolidColorHardPocket;
    BOOL _isGettingAdjustedColorForTopContentInsetColorFromDelegate;
    struct RetainPtr<NSColor> { NSColor *m_ptr; } _overrideTopScrollEdgeEffectColor;
    struct RetainPtr<NSMapTable<NSUUID *,WTTextSuggestion *>> { NSMapTable *m_ptr; } _writingToolsTextSuggestions;
    struct RetainPtr<WTSession> { WTSession *m_ptr; } _activeWritingToolsSession;
    struct RetainPtr<id<WKIntelligenceTextEffectCoordinating>> { id<WKIntelligenceTextEffectCoordinating> m_ptr; } _intelligenceTextEffectCoordinator;
    unsigned long long _partialIntelligenceTextAnimationCount;
    BOOL _writingToolsTextReplacementsFinished;
    struct RetainPtr<STWebpageController> { STWebpageController *m_ptr; } _screenTimeWebpageController;
    struct RetainPtr<NSVisualEffectView> { NSVisualEffectView *m_ptr; } _screenTimeBlurredSnapshot;
    struct unique_ptr<WebKit::WebViewImpl, std::default_delete<WebKit::WebViewImpl>> { struct WebViewImpl *__ptr_; } _impl;
    struct RetainPtr<WKTextFinderClient> { WKTextFinderClient *m_ptr; } _textFinderClient;
    struct BlockPtr<void ()> { id /* block */ m_block; } _windowSnapshotReadinessHandler;
    BOOL _didAccessBackForwardList;
    BOOL _dontResetTransientActivationAfterRunJavaScript;
    BOOL _gamepadsRecentlyAccessed;
    struct RetainPtr<id> { id m_ptr; } _gamepadsRecentlyAccessedState;
    struct FixedContainerEdges { struct RectEdges<mpark::variant<WebCore::PredominantColorType, WebCore::Color>> { struct array<mpark::variant<WebCore::PredominantColorType, WebCore::Color>, 4UL> { struct variant<WebCore::PredominantColorType, WebCore::Color> { struct impl<WebCore::PredominantColorType, WebCore::Color> { union recursive_union<mpark::detail::Trait::Available, 0UL, WebCore::PredominantColorType, WebCore::Color> { char dummy_; struct alt<0UL, WebCore::PredominantColorType> { unsigned char value; } head_; union recursive_union<mpark::detail::Trait::Available, 1UL, WebCore::Color> { char dummy_; struct alt<1UL, WebCore::Color> { struct Color { unsigned long long m_colorAndFlags; } value; } head_; union recursive_union<mpark::detail::Trait::Available, 2UL> { } tail_; } tail_; } data_; unsigned char index_; } impl_; } __elems_[4]; } m_sides; } colors; } _fixedContainerEdges;
    struct RetainPtr<WKScrollGeometry> { WKScrollGeometry *m_ptr; } _currentScrollGeometry;
    BOOL _allowsMagnification;
    struct RectEdges<WTF::RetainPtr<WKColorExtensionView>> { struct array<WTF::RetainPtr<WKColorExtensionView>, 4UL> { struct RetainPtr<WKColorExtensionView> { WKColorExtensionView *m_ptr; } __elems_[4]; } m_sides; } _fixedColorExtensionViews;
    struct OptionSet<WebKit::HideScrollPocketReason> { unsigned char m_storage; } _reasonsToHideTopScrollPocket;
    BOOL _needsTopScrollPocketDueToVisibleContentInset;
    BOOL _shouldUpdateNeedsTopScrollPocketDueToVisibleContentInset;
}

@property (class, copy, nonatomic, setter=_setStringForFind:) NSString *_stringForFind;

@property (nonatomic, readonly) Class _intelligenceBaseClass;
@property (readonly, nonatomic) NSString *_proxyName;
@property (readonly, nonatomic) BOOL _isContentFromNetwork;
@property (readonly, nonatomic) id _remoteObjectRegistry;
@property (readonly, nonatomic) WKBrowsingContextHandle *_handle;
@property (nonatomic, setter=_setObservedRenderingProgressEvents:) unsigned long long _observedRenderingProgressEvents;
@property (weak, nonatomic, setter=_setHistoryDelegate:) id<WKHistoryDelegatePrivate> _historyDelegate;
@property (weak, nonatomic, setter=_setIconLoadingDelegate:) id<_WKIconLoadingDelegate> _iconLoadingDelegate;
@property (weak, nonatomic, setter=_setResourceLoadDelegate:) id<_WKResourceLoadDelegate> _resourceLoadDelegate;
@property (readonly, nonatomic) NSURL *_unreachableURL;
@property (readonly, nonatomic) NSURL *_mainFrameURL;
@property (readonly, nonatomic) NSURL *_resourceDirectoryURL;
@property (readonly, nonatomic) NSArray *_certificateChain;
@property (readonly, nonatomic) NSURL *_committedURL;
@property (readonly, nonatomic) NSString *_MIMEType;
@property (readonly, nonatomic) NSString *_userAgent;
@property (copy, setter=_setApplicationNameForUserAgent:) NSString *_applicationNameForUserAgent;
@property (copy, setter=_setCustomUserAgent:) NSString *_customUserAgent;
@property (readonly, nonatomic, getter=_isPlayingAudio) BOOL _playingAudio;
@property (nonatomic, setter=_setUserContentExtensionsEnabled:) BOOL _userContentExtensionsEnabled;
@property (readonly, nonatomic) int _webProcessIdentifier;
@property (readonly, nonatomic) int _provisionalWebProcessIdentifier;
@property (readonly, nonatomic) int _gpuProcessIdentifier;
@property (readonly, nonatomic) int _modelProcessIdentifier;
@property (nonatomic, getter=_isEditable, setter=_setEditable:) BOOL _editable;
@property (readonly, nonatomic) BOOL _negotiatedLegacyTLS;
@property (readonly, nonatomic) BOOL _wasPrivateRelayed;
@property (readonly, nonatomic) NSData *_sessionStateData;
@property (readonly, nonatomic) _WKSessionState *_sessionState;
@property (nonatomic, setter=_setAllowsRemoteInspection:) BOOL _allowsRemoteInspection;
@property (copy, nonatomic, setter=_setRemoteInspectionNameOverride:) NSString *_remoteInspectionNameOverride;
@property (readonly, nonatomic) BOOL _isBeingInspected;
@property (readonly, nonatomic) _WKInspector *_inspector;
@property (readonly, nonatomic) _WKFrameHandle *_mainFrame;
@property (weak, nonatomic, setter=_setTextManipulationDelegate:) id<_WKTextManipulationDelegate> _textManipulationDelegate;
@property (nonatomic, setter=_setAddsVisitedLinks:) BOOL _addsVisitedLinks;
@property (copy, nonatomic, setter=_setCORSDisablingPatterns:) NSArray *_corsDisablingPatterns;
@property (readonly, nonatomic) BOOL _networkRequestsInProgress;
@property (readonly, nonatomic, getter=_isShowingNavigationGestureSnapshot) BOOL _showingNavigationGestureSnapshot;
@property (nonatomic, setter=_setLayoutMode:) unsigned long long _layoutMode;
@property (nonatomic, setter=_setFixedLayoutSize:) struct CGSize { double x0; double x1; } _fixedLayoutSize;
@property (nonatomic, setter=_setViewportSizeForCSSViewportUnits:) struct CGSize { double x0; double x1; } _viewportSizeForCSSViewportUnits;
@property (nonatomic, setter=_setViewScale:) double _viewScale;
@property (nonatomic, setter=_setMinimumEffectiveDeviceWidth:) double _minimumEffectiveDeviceWidth;
@property (nonatomic, setter=_setBackgroundExtendsBeyondPage:) BOOL _backgroundExtendsBeyondPage;
@property (nonatomic, setter=_setUseSystemAppearance:) BOOL _useSystemAppearance;
@property (readonly, nonatomic) unsigned long long _selectionAttributes;
@property (readonly, nonatomic) BOOL _webProcessIsResponsive;
@property (nonatomic, setter=_setPaginationMode:) long long _paginationMode;
@property (nonatomic, setter=_setPaginationBehavesLikeColumns:) BOOL _paginationBehavesLikeColumns;
@property (nonatomic, setter=_setPageLength:) double _pageLength;
@property (nonatomic, setter=_setGapBetweenPages:) double _gapBetweenPages;
@property (nonatomic, setter=_setPaginationLineGridEnabled:) BOOL _paginationLineGridEnabled;
@property (readonly) unsigned long long _pageCount;
@property (readonly, nonatomic) BOOL _supportsTextZoom;
@property (nonatomic, setter=_setTextZoomFactor:) double _textZoomFactor;
@property (nonatomic, setter=_setPageZoomFactor:) double _pageZoomFactor;
@property (weak, nonatomic, setter=_setDiagnosticLoggingDelegate:) id<_WKDiagnosticLoggingDelegate> _diagnosticLoggingDelegate;
@property (weak, nonatomic, setter=_setFindDelegate:) id<_WKFindDelegate> _findDelegate;
@property (weak, nonatomic, setter=_setInputDelegate:) id<_WKInputDelegate> _inputDelegate;
@property (readonly, nonatomic, getter=_isDisplayingPDF) BOOL _displayingPDF;
@property (readonly, nonatomic, getter=_isDisplayingStandaloneImageDocument) BOOL _displayingStandaloneImageDocument;
@property (readonly, nonatomic, getter=_isDisplayingStandaloneMediaDocument) BOOL _displayingStandaloneMediaDocument;
@property (nonatomic, setter=_setScrollPerformanceDataCollectionEnabled:) BOOL _scrollPerformanceDataCollectionEnabled;
@property (readonly, nonatomic) NSArray *_scrollPerformanceData;
@property (nonatomic, getter=_allowsMediaDocumentInlinePlayback, setter=_setAllowsMediaDocumentInlinePlayback:) BOOL _allowsMediaDocumentInlinePlayback;
@property (nonatomic, setter=_setFullscreenDelegate:) id<_WKFullscreenDelegate> _fullscreenDelegate;
@property (readonly, nonatomic) BOOL _isInFullscreen;
@property (readonly, nonatomic) unsigned long long _mediaCaptureState;
@property (readonly, nonatomic) unsigned long long _mediaMutedState;
@property (nonatomic, setter=_setMediaCaptureEnabled:) BOOL _mediaCaptureEnabled;
@property (readonly, nonatomic) BOOL _isSuspended;
@property (readonly, nonatomic) NSColor *_sampledTopFixedPositionContentColor;
@property (readonly, nonatomic) BOOL _canTogglePictureInPicture;
@property (readonly, nonatomic) BOOL _canToggleInWindow;
@property (readonly, nonatomic) BOOL _canEnterFullscreen;
@property (readonly, nonatomic) BOOL _isPictureInPictureActive;
@property (readonly, nonatomic) BOOL _isInWindowActive;
@property (nonatomic, setter=_setCanUseCredentialStorage:) BOOL _canUseCredentialStorage;
@property (weak, nonatomic, setter=_setAppHighlightDelegate:) id<_WKAppHighlightDelegate> _appHighlightDelegate;
@property (readonly, nonatomic) NSColor *_sampledPageTopColor;
@property (readonly, nonatomic) _WKSpatialBackdropSource *_spatialBackdropSource;
@property (nonatomic, setter=_setOverrideDeviceScaleFactor:) double _overrideDeviceScaleFactor;
@property (readonly, nonatomic) unsigned long long _displayCaptureSurfaces;
@property (readonly, nonatomic) long long _displayCaptureState;
@property (readonly, nonatomic) long long _systemAudioCaptureState;
@property (readonly, nonatomic) BOOL _allowsAnyAnimationToPlay;
@property (readonly, nonatomic) NSURL *_requiredWebExtensionBaseURL;
@property (readonly, nonatomic) BOOL _hasActiveNowPlayingSession;
@property (nonatomic, setter=_setDontResetTransientActivationAfterRunJavaScript:) BOOL _dontResetTransientActivationAfterRunJavaScript;
@property (readonly, nonatomic) long long _webProcessState;
@property (nonatomic) struct { unsigned int x0[8]; } presentingApplicationAuditToken;
@property (nonatomic, setter=_setShouldSuppressTopColorExtensionView:) BOOL _shouldSuppressTopColorExtensionView;
@property (readonly, copy, nonatomic) NSArray *certificateChain;
@property (readonly, nonatomic) NSString *_caLayerTreeAsText;
@property (nonatomic, setter=_setMediaCaptureReportingDelayForTesting:) double _mediaCaptureReportingDelayForTesting;
@property (readonly, nonatomic) BOOL _wirelessVideoPlaybackDisabled;
@property (nonatomic, setter=_setScrollingUpdatesDisabledForTesting:) BOOL _scrollingUpdatesDisabledForTesting;
@property (readonly, nonatomic) NSString *_scrollingTreeAsText;
@property (readonly, nonatomic) int _networkProcessIdentifier;
@property (readonly, nonatomic) unsigned long long _countOfUpdatesWithLayerChanges;
@property (readonly, nonatomic) BOOL _hasServiceWorkerBackgroundActivityForTesting;
@property (readonly, nonatomic) BOOL _hasServiceWorkerForegroundActivityForTesting;
@property (readonly, nonatomic) BOOL _isLoggerEnabledForTesting;
@property (readonly, nonatomic) BOOL _hasAccessibilityActivityForTesting;
@property (readonly, nonatomic) unsigned long long _fixedContainerEdges;
@property (readonly, nonatomic) NSColor *_sampledLeftFixedPositionContentColor;
@property (readonly, nonatomic) NSColor *_sampledBottomFixedPositionContentColor;
@property (readonly, nonatomic) NSColor *_sampledRightFixedPositionContentColor;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } unionRectInVisibleSelectedRange;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } documentVisibleRect;
@property (readonly) BOOL supportsAdaptiveImageGlyph;
@property (readonly) NSTouchBar *touchBar;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } scrollViewFrame;
@property (readonly) BOOL hasScrolledContentsUnderTitlebar;
@property (readonly) double separatorOffset;
@property (readonly) BOOL relaxRegistrationRequirements;
@property (readonly) BOOL hasHeader;
@property long long titlebarBackgroundStyle;
@property (readonly, nonatomic) struct OpaqueWKPage { } *_pageRefForTransitionToWKWebView;
@property (readonly, nonatomic) BOOL _hasActiveVideoForControlsManager;
@property (nonatomic, setter=_setIgnoresNonWheelEvents:) BOOL _ignoresNonWheelEvents;
@property (nonatomic, setter=_setIgnoresMouseMoveEvents:) BOOL _ignoresMouseMoveEvents;
@property (nonatomic, setter=_setClipsToVisibleRect:) BOOL _clipsToVisibleRect;
@property (readonly, nonatomic) NSView *_safeBrowsingWarning;
@property (readonly, nonatomic) unsigned long long _pinnedState;
@property (nonatomic, setter=_setRubberBandingEnabled:) unsigned long long _rubberBandingEnabled;
@property (nonatomic, setter=_setBackgroundColor:) NSColor *_backgroundColor;
@property (copy, nonatomic, setter=_setUnderlayColor:) NSColor *_underlayColor;
@property (nonatomic, setter=_setTotalHeightOfBanners:) double _totalHeightOfBanners;
@property (nonatomic, setter=_setDrawsBackground:) BOOL _drawsBackground;
@property (nonatomic, setter=_setTopContentInset:) double _topContentInset;
@property (nonatomic, setter=_setAutomaticallyAdjustsContentInsets:) BOOL _automaticallyAdjustsContentInsets;
@property (nonatomic, setter=_setWindowOcclusionDetectionEnabled:) BOOL _windowOcclusionDetectionEnabled;
@property (readonly, nonatomic) long long _spellCheckerDocumentTag;
@property (nonatomic, setter=_setShouldExpandContentToViewHeightForAutoLayout:) BOOL _shouldExpandContentToViewHeightForAutoLayout;
@property (nonatomic, setter=_setMinimumLayoutWidth:) double _minimumLayoutWidth;
@property (nonatomic, setter=_setSizeToContentAutoSizeMaximumSize:) struct CGSize { double x0; double x1; } _sizeToContentAutoSizeMaximumSize;
@property (nonatomic, setter=_setAlwaysShowsHorizontalScroller:) BOOL _alwaysShowsHorizontalScroller;
@property (nonatomic, setter=_setAlwaysShowsVerticalScroller:) BOOL _alwaysShowsVerticalScroller;
@property (nonatomic, setter=_setOverlayScrollbarStyle:) unsigned long long _overlayScrollbarStyle;
@property (retain, nonatomic, setter=_setInspectorAttachmentView:) NSView *_inspectorAttachmentView;
@property (nonatomic, setter=_setHeaderBannerLayer:) CALayer *_headerBannerLayer;
@property (nonatomic, setter=_setFooterBannerLayer:) CALayer *_footerBannerLayer;
@property (nonatomic, setter=_setThumbnailView:) _WKThumbnailView *_thumbnailView;
@property (nonatomic, setter=_setIgnoresAllEvents:) BOOL _ignoresAllEvents;
@property (nonatomic, setter=_setUsePlatformFindUI:) BOOL _usePlatformFindUI;
@property (readonly, nonatomic) double minimumMagnification;
@property (nonatomic, setter=_setWantsMediaPlaybackControlsView:) BOOL _wantsMediaPlaybackControlsView;
@property (readonly, nonatomic) id _mediaPlaybackControlsView;
@property (readonly, nonatomic) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } _obscuredContentInsets;
@property (nonatomic, setter=_setUsesAutomaticContentInsetBackgroundFill:) BOOL _usesAutomaticContentInsetBackgroundFill;
@property (copy, nonatomic, setter=_setOverrideTopScrollEdgeEffectColor:) NSColor *_overrideTopScrollEdgeEffectColor;
@property (nonatomic, setter=_setOverflowHeightForTopScrollEdgeEffect:) double _overflowHeightForTopScrollEdgeEffect;
@property (readonly, nonatomic) NSScrollPocket *_topScrollPocket;
@property (readonly, nonatomic) BOOL _hasActiveVideoForControlsManager;
@property (readonly, nonatomic) BOOL _shouldRequestCandidates;
@property (readonly, nonatomic) BOOL _allowsInlinePredictions;
@property (readonly, nonatomic) NSMenu *_activeMenu;
@property (readonly, nonatomic) BOOL _secureEventInputEnabledForTesting;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _windowRelativeBoundsForCustomSwipeViewsForTesting;
@property (nonatomic, setter=_setAlwaysPrefersSolidColorHardPocket:) BOOL _alwaysPrefersSolidColorHardPocket;
@property (nonatomic, setter=_setHasActiveNowPlayingSession:) BOOL _hasActiveNowPlayingSession;
@property (readonly, nonatomic) struct RetainPtr<WKWebView> { id x0; } _horizontallyAttachedInspectorWebView;
@property (readonly, copy, nonatomic) WKWebViewConfiguration *configuration;
@property (weak, nonatomic) id<WKNavigationDelegate> navigationDelegate;
@property (weak, nonatomic) id<WKUIDelegate> UIDelegate;
@property (readonly, nonatomic) WKBackForwardList *backForwardList;
@property (readonly, copy, nonatomic) NSString *title;
@property (readonly, copy, nonatomic) NSURL *URL;
@property (readonly, nonatomic, getter=isLoading) BOOL loading;
@property (readonly, nonatomic) double estimatedProgress;
@property (readonly, nonatomic) BOOL hasOnlySecureContent;
@property (readonly, nonatomic) struct __SecTrust { } *serverTrust;
@property (readonly, nonatomic) BOOL canGoBack;
@property (readonly, nonatomic) BOOL canGoForward;
@property (readonly, nonatomic) long long cameraCaptureState;
@property (readonly, nonatomic) long long microphoneCaptureState;
@property (nonatomic) BOOL allowsBackForwardNavigationGestures;
@property (copy, nonatomic) NSString *customUserAgent;
@property (nonatomic) BOOL allowsLinkPreview;
@property (nonatomic) BOOL allowsMagnification;
@property (nonatomic) double magnification;
@property (nonatomic) double pageZoom;
@property (copy, nonatomic) NSString *mediaType;
@property (copy, nonatomic) id interactionState;
@property (readonly, nonatomic) BOOL isBlockedByScreenTime;
@property (readonly, nonatomic) NSColor *themeColor;
@property (copy, nonatomic) NSColor *underPageBackgroundColor;
@property (readonly, nonatomic) long long fullscreenState;
@property (readonly, nonatomic) struct NSEdgeInsets { double top; double left; double bottom; double right; } minimumViewportInset;
@property (readonly, nonatomic) struct NSEdgeInsets { double top; double left; double bottom; double right; } maximumViewportInset;
@property (nonatomic, getter=isInspectable) BOOL inspectable;
@property (readonly, nonatomic, getter=isWritingToolsActive) BOOL writingToolsActive;
@property (nonatomic) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } obscuredContentInsets;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL includesTextListMarkers;
@property long long autocorrectionType;
@property long long spellCheckingType;
@property long long grammarCheckingType;
@property long long smartQuotesType;
@property long long smartDashesType;
@property long long smartInsertDeleteType;
@property long long textReplacementType;
@property long long dataDetectionType;
@property long long linkDetectionType;
@property long long textCompletionType;
@property long long inlinePredictionType;
@property long long mathExpressionCompletionType;
@property long long writingToolsBehavior;
@property unsigned long long allowedWritingToolsResultOptions;

+ (BOOL)accessInstanceVariablesDirectly;
+ (void)_clearApplicationBundleIdentifierTestingOverride;
+ (id)_confirmMalwareSentinel;
+ (BOOL)_handlesSafeBrowsing;
+ (void)_permissionChanged:(id)a0 forOrigin:(id)a1;
+ (void)_setApplicationBundleIdentifier:(id)a0;
+ (id)_userVisibleStringForURL:(id)a0;
+ (id)_visitUnsafeWebsiteSentinel;
+ (BOOL)_willUpgradeToHTTPS:(id)a0;
+ (BOOL)automaticallyNotifiesObserversOfUnderPageBackgroundColor;
+ (BOOL)handlesURLScheme:(id)a0;

- (void)selectAll:(id)a0;
- (void)reloadFromOrigin:(id)a0;
- (void)_outdent:(id)a0;
- (void)unmarkText;
- (void)stopLoading:(id)a0;
- (void)uppercaseWord:(id)a0;
- (void)copyFont:(id)a0;
- (void)shareSheetDidDismiss:(id)a0;
- (void)swipeWithEvent:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })markedRange;
- (BOOL)_isValid;
- (BOOL)validateUserInterfaceItem:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectedRange;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)moveForward:(id)a0;
- (void)_close;
- (void)pasteFont:(id)a0;
- (void)mouseDown:(id)a0;
- (void)_insertNestedOrderedList:(id)a0;
- (void)mouseUp:(id)a0;
- (void)compositionSession:(id)a0 didReceiveText:(id)a1 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 inContext:(id)a3 finished:(BOOL)a4;
- (BOOL)hasMarkedText;
- (void)_increaseListLevel:(id)a0;
- (void)alignLeft:(id)a0;
- (void)_insertUnorderedList:(id)a0;
- (void)_insertOrderedList:(id)a0;
- (BOOL)isOpaque;
- (void)removeTextPlaceholder:(id)a0 willInsertText:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)insertAdaptiveImageGlyph:(id)a0 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)viewWillMoveToWindow:(id)a0;
- (void)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })a0 completionHandler:(id /* block */)a1;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (void)alignRight:(id)a0;
- (void)_pasteAndMatchStyle:(id)a0;
- (void)_dismissContactPickerWithContacts:(id)a0;
- (void)willBeginWritingToolsSession:(id)a0 requestContexts:(id /* block */)a1;
- (void)_decreaseListLevel:(id)a0;
- (void)didBeginWritingToolsSession:(id)a0 contexts:(id)a1;
- (BOOL)_allowAnimationControls;
- (void)proofreadingSession:(id)a0 didUpdateState:(long long)a1 forSuggestionWithUUID:(id)a2 inContext:(id)a3;
- (void)writingToolsSession:(id)a0 didReceiveAction:(long long)a1;
- (void)lowercaseWord:(id)a0;
- (void)didEndWritingToolsSession:(id)a0 accepted:(BOOL)a1;
- (void)_pasteAsQuotation:(id)a0;
- (void)proofreadingSession:(id)a0 didReceiveSuggestions:(id)a1 processedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 inContext:(id)a3 finished:(BOOL)a4;
- (void)makeTextWritingDirectionNatural:(id)a0;
- (void)_indent:(id)a0;
- (void)makeTextWritingDirectionLeftToRight:(id)a0;
- (void)goBack:(id)a0;
- (void)updateLayer;
- (void)_toggleStrikeThrough:(id)a0;
- (void)mouseDragged:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)keyDown:(id)a0;
- (void)setGrammarCheckingEnabled:(BOOL)a0;
- (BOOL)resignFirstResponder;
- (void)paste:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (BOOL)isFlipped;
- (BOOL)becomeFirstResponder;
- (id)reload;
- (void)copy:(id)a0;
- (long long)conversationIdentifier;
- (void)endPreviewPanelControl:(id)a0;
- (void)insertText:(id)a0;
- (void)cut:(id)a0;
- (void)doCommandBySelector:(SEL)a0;
- (id)valueForUndefinedKey:(id)a0;
- (unsigned long long)characterIndexForPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_intelligenceCollectContentIn:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 collector:(id)a1;
- (void)beginPreviewPanelControl:(id)a0;
- (void)capitalizeWord:(id)a0;
- (id)_contentsOfUserInterfaceItem:(id)a0;
- (void)insertNewline:(id)a0;
- (void)makeTextWritingDirectionRightToLeft:(id)a0;
- (void)alignJustified:(id)a0;
- (void)alignCenter:(id)a0;
- (void)viewDidMoveToWindow;
- (void)_changeListType:(id)a0;
- (id)initWithCoder:(id)a0;
- (id).cxx_construct;
- (void)viewDidChangeBackingProperties;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)viewDidChangeEffectiveAppearance;
- (void)moveBackward:(id)a0;
- (BOOL)acceptsPreviewPanelControl:(id)a0;
- (void)_insertNestedUnorderedList:(id)a0;
- (void).cxx_destruct;
- (void)addObserver:(id)a0 forKeyPath:(id)a1 options:(unsigned long long)a2 context:(void *)a3;
- (void)deleteBackward:(id)a0;
- (void)draggedImage:(id)a0 endedAt:(struct CGPoint { double x0; double x1; })a1 operation:(unsigned long long)a2;
- (BOOL)isAutomaticLinkDetectionEnabled;
- (void)moveUp:(id)a0;
- (BOOL)providesWritingToolsContextMenu;
- (void)rightMouseDown:(id)a0;
- (void)scrollPageDown:(id)a0;
- (void)changeSpelling:(id)a0;
- (void)delete:(id)a0;
- (void)draggingExited:(id)a0;
- (void)ignoreSpelling:(id)a0;
- (void)indent:(id)a0;
- (void)moveBackwardAndModifySelection:(id)a0;
- (void)moveWordLeftAndModifySelection:(id)a0;
- (void)otherMouseDown:(id)a0;
- (void)pageUp:(id)a0;
- (void)registerPocketContainer:(id)a0 onEdge:(long long)a1;
- (void)scrollLineDown:(id)a0;
- (void)showGuessPanel:(id)a0;
- (void)toggleAutomaticTextReplacement:(id)a0;
- (long long)_addTrackingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 owner:(id)a1 userData:(void *)a2 assumeInside:(BOOL)a3 useTrackingNum:(int)a4;
- (void)_addTrackingRects:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 owner:(id)a1 userDataList:(void **)a2 assumeInsideList:(BOOL *)a3 trackingNums:(long long *)a4 count:(int)a5;
- (id)_hitTest:(struct CGPoint { double x0; double x1; } *)a0 dragTypes:(id)a1;
- (void)_insertText:(id)a0 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)_intelligenceCollectRemoteContentInVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 remoteContextWrapper:(id)a1;
- (void)_removeTrackingRects:(long long *)a0 count:(int)a1;
- (void)_setSemanticContext:(long long)a0;
- (BOOL)_wantsKeyDownForEvent:(id)a0;
- (BOOL)_windowResizeMouseLocationIsInVisibleScrollerThumb:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)acceptsFirstMouse:(id)a0;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityAttributeValue:(id)a0 forParameter:(id)a1;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityParameterizedAttributeNames;
- (long long)addTrackingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 owner:(id)a1 userData:(void *)a2 assumeInside:(BOOL)a3;
- (id)attributedSubstringForProposedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 actualRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)attributedSubstringForProposedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 completionHandler:(id /* block */)a1;
- (id)candidateListTouchBarItem;
- (void)centerSelectionInVisibleArea:(id)a0;
- (void)changeAttributes:(id)a0;
- (void)changeColor:(id)a0;
- (void)changeFont:(id)a0;
- (void)characterIndexForPoint:(struct CGPoint { double x0; double x1; })a0 completionHandler:(id /* block */)a1;
- (void)checkSpelling:(id)a0;
- (void)deleteBackwardByDecomposingPreviousCharacter:(id)a0;
- (void)deleteForward:(id)a0;
- (void)deleteToBeginningOfLine:(id)a0;
- (void)deleteToBeginningOfParagraph:(id)a0;
- (void)deleteToEndOfLine:(id)a0;
- (void)deleteToEndOfParagraph:(id)a0;
- (void)deleteToMark:(id)a0;
- (void)deleteWordBackward:(id)a0;
- (void)deleteWordForward:(id)a0;
- (id)documentContainerView;
- (unsigned long long)draggingEntered:(id)a0;
- (void)draggingSession:(id)a0 endedAtPoint:(struct CGPoint { double x0; double x1; })a1 operation:(unsigned long long)a2;
- (unsigned long long)draggingSession:(id)a0 sourceOperationMaskForDraggingContext:(long long)a1;
- (unsigned long long)draggingUpdated:(id)a0;
- (id)filePromiseProvider:(id)a0 fileNameForType:(id)a1;
- (void)filePromiseProvider:(id)a0 writePromiseToURL:(id)a1 completionHandler:(id /* block */)a2;
- (void)findMatchesForString:(id)a0 relativeToMatch:(id)a1 findOptions:(unsigned long long)a2 maxResults:(unsigned long long)a3 resultCollector:(id /* block */)a4;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 actualRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)firstRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 completionHandler:(id /* block */)a1;
- (void)flagsChanged:(id)a0;
- (void)getSelectedText:(id /* block */)a0;
- (void)hasMarkedTextWithCompletionHandler:(id /* block */)a0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)inputContext;
- (void)insertBacktab:(id)a0;
- (void)insertLineBreak:(id)a0;
- (void)insertNewlineIgnoringFieldEditor:(id)a0;
- (void)insertParagraphSeparator:(id)a0;
- (void)insertTab:(id)a0;
- (void)insertTabIgnoringFieldEditor:(id)a0;
- (void)insertText:(id)a0 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (BOOL)isAutomaticDashSubstitutionEnabled;
- (BOOL)isAutomaticQuoteSubstitutionEnabled;
- (BOOL)isAutomaticTextReplacementEnabled;
- (BOOL)isGrammarCheckingEnabled;
- (void)keyUp:(id)a0;
- (void)magnifyWithEvent:(id)a0;
- (id)makeTouchBar;
- (void)markedRangeWithCompletionHandler:(id /* block */)a0;
- (BOOL)mouseDownCanMoveWindow;
- (void)moveDown:(id)a0;
- (void)moveDownAndModifySelection:(id)a0;
- (void)moveForwardAndModifySelection:(id)a0;
- (void)moveLeft:(id)a0;
- (void)moveLeftAndModifySelection:(id)a0;
- (void)moveParagraphBackwardAndModifySelection:(id)a0;
- (void)moveParagraphForwardAndModifySelection:(id)a0;
- (void)moveRight:(id)a0;
- (void)moveRightAndModifySelection:(id)a0;
- (void)moveToBeginningOfDocument:(id)a0;
- (void)moveToBeginningOfDocumentAndModifySelection:(id)a0;
- (void)moveToBeginningOfLine:(id)a0;
- (void)moveToBeginningOfLineAndModifySelection:(id)a0;
- (void)moveToBeginningOfParagraph:(id)a0;
- (void)moveToBeginningOfParagraphAndModifySelection:(id)a0;
- (void)moveToEndOfDocument:(id)a0;
- (void)moveToEndOfDocumentAndModifySelection:(id)a0;
- (void)moveToEndOfLine:(id)a0;
- (void)moveToEndOfLineAndModifySelection:(id)a0;
- (void)moveToEndOfParagraph:(id)a0;
- (void)moveToEndOfParagraphAndModifySelection:(id)a0;
- (void)moveToLeftEndOfLine:(id)a0;
- (void)moveToLeftEndOfLineAndModifySelection:(id)a0;
- (void)moveToRightEndOfLine:(id)a0;
- (void)moveToRightEndOfLineAndModifySelection:(id)a0;
- (void)moveUpAndModifySelection:(id)a0;
- (void)moveWordBackward:(id)a0;
- (void)moveWordBackwardAndModifySelection:(id)a0;
- (void)moveWordForward:(id)a0;
- (void)moveWordForwardAndModifySelection:(id)a0;
- (void)moveWordLeft:(id)a0;
- (void)moveWordRight:(id)a0;
- (void)moveWordRightAndModifySelection:(id)a0;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)a0;
- (void)orderFrontSubstitutionsPanel:(id)a0;
- (void)otherMouseDragged:(id)a0;
- (void)otherMouseUp:(id)a0;
- (void)pageDown:(id)a0;
- (void)pageDownAndModifySelection:(id)a0;
- (void)pageUpAndModifySelection:(id)a0;
- (void)pasteAsPlainText:(id)a0;
- (void)pasteboard:(id)a0 provideDataForType:(id)a1;
- (void)pasteboardChangedOwner:(id)a0;
- (BOOL)performDragOperation:(id)a0;
- (BOOL)performKeyEquivalent:(id)a0;
- (void)prepareContentInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)prepareForDragOperation:(id)a0;
- (void)pressureChangeWithEvent:(id)a0;
- (void)quickLookWithEvent:(id)a0;
- (BOOL)readSelectionFromPasteboard:(id)a0;
- (void)removeTrackingRect:(long long)a0;
- (void)renewGState;
- (void)replaceMatches:(id)a0 withString:(id)a1 inSelectionOnly:(BOOL)a2 resultCollector:(id /* block */)a3;
- (void)rightMouseDragged:(id)a0;
- (void)rightMouseUp:(id)a0;
- (void)rotateWithEvent:(id)a0;
- (void)scrollFindMatchToVisible:(id)a0;
- (void)scrollLineUp:(id)a0;
- (void)scrollPageUp:(id)a0;
- (void)scrollToBeginningOfDocument:(id)a0;
- (void)scrollToEndOfDocument:(id)a0;
- (void)scrollWheel:(id)a0;
- (void)selectFindMatch:(id)a0 completionHandler:(id /* block */)a1;
- (void)selectLine:(id)a0;
- (void)selectParagraph:(id)a0;
- (void)selectToMark:(id)a0;
- (void)selectWord:(id)a0;
- (void)selectedRangeWithCompletionHandler:(id /* block */)a0;
- (void)setAutomaticDashSubstitutionEnabled:(BOOL)a0;
- (void)setAutomaticLinkDetectionEnabled:(BOOL)a0;
- (void)setAutomaticQuoteSubstitutionEnabled:(BOOL)a0;
- (void)setAutomaticTextReplacementEnabled:(BOOL)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setMagnification:(double)a0 centeredAtPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)setMark:(id)a0;
- (void)setMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)setUserInterfaceLayoutDirection:(long long)a0;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)a0;
- (void)showContextMenuForSelection:(id)a0;
- (void)showWritingTools:(id)a0;
- (void)smartMagnifyWithEvent:(id)a0;
- (void)startSpeaking:(id)a0;
- (void)stopSpeaking:(id)a0;
- (void)subscript:(id)a0;
- (void)superscript:(id)a0;
- (void)swapWithMark:(id)a0;
- (void)toggleAutomaticDashSubstitution:(id)a0;
- (void)toggleAutomaticLinkDetection:(id)a0;
- (void)toggleAutomaticQuoteSubstitution:(id)a0;
- (void)toggleAutomaticSpellingCorrection:(id)a0;
- (void)toggleContinuousSpellChecking:(id)a0;
- (void)toggleGrammarChecking:(id)a0;
- (void)toggleSmartInsertDelete:(id)a0;
- (void)transpose:(id)a0;
- (void)typingAttributesWithCompletionHandler:(id /* block */)a0;
- (void)underline:(id)a0;
- (void)unionRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 completionHandler:(id /* block */)a1;
- (void)unregisterPocketContainer:(id)a0 onEdge:(long long)a1;
- (void)unscript:(id)a0;
- (id)validAttributesForMarkedText;
- (id)validRequestorForSendType:(id)a0 returnType:(id)a1;
- (id)view:(id)a0 stringForToolTip:(long long)a1 point:(struct CGPoint { double x0; double x1; })a2 userData:(void *)a3;
- (void)viewDidEndLiveResize;
- (void)viewDidHide;
- (void)viewDidUnhide;
- (void)viewWillStartLiveResize;
- (BOOL)wantsUpdateLayer;
- (BOOL)writeSelectionToPasteboard:(id)a0 types:(id)a1;
- (void)yank:(id)a0;
- (void)yankAndSelect:(id)a0;
- (id)loadData:(id)a0 MIMEType:(id)a1 characterEncodingName:(id)a2 baseURL:(id)a3;
- (void)stopLoading;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 configuration:(id)a1;
- (id)loadRequest:(id)a0;
- (void)evaluateJavaScript:(id)a0 completionHandler:(id /* block */)a1;
- (id)loadHTMLString:(id)a0 baseURL:(id)a1;
- (void)reload:(id)a0;
- (void)selectSentence:(id)a0;
- (id)_formDelegate;
- (BOOL)_isClosed;
- (void)_setFormDelegate:(id)a0;
- (id)_windowSnapshotInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withOptions:(unsigned int)a1;
- (id)goBack;
- (id)goForward;
- (void)goForward:(id)a0;
- (void)moveToBeginningOfSentence:(id)a0;
- (void)moveToBeginningOfSentenceAndModifySelection:(id)a0;
- (void)moveToEndOfSentence:(id)a0;
- (void)moveToEndOfSentenceAndModifySelection:(id)a0;
- (void)outdent:(id)a0;
- (id)printOperationWithPrintInfo:(id)a0;
- (id)reloadFromOrigin;
- (void)takeFindStringFromSelection:(id)a0;
- (void)_dataTaskWithRequest:(id)a0 runAtForegroundPriority:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)_didLoadNonAppInitiatedRequest:(id /* block */)a0;
- (void)_lastNavigationWasAppInitiated:(id /* block */)a0;
- (void)_retrieveAccessibilityTreeData:(id /* block */)a0;
- (void)_setDrawsTransparentBackground:(BOOL)a0;
- (void)_setNowPlayingMetadataObserver:(id /* block */)a0;
- (void)_toggleInWindow;
- (BOOL)_web_superPerformKeyEquivalent:(id)a0;
- (void)_cancelImmediateActionAnimation;
- (void)_doAfterNextPresentationUpdate:(id /* block */)a0;
- (void)_nowPlayingMediaTitleAndArtist:(id /* block */)a0;
- (struct OpaqueWKPage { } *)_pageForTesting;
- (void)_restoreData:(id)a0 completionHandler:(id /* block */)a1;
- (void)_setNeedsScrollGeometryUpdates:(BOOL)a0;
- (void)_updateFixedColorExtensionViews;
- (void)_activeSpaceDidChange:(id)a0;
- (void)_addAppHighlight;
- (void)_addAppHighlightInNewGroup:(BOOL)a0 originatedInApp:(BOOL)a1;
- (void)_addEventAttributionWithSourceID:(unsigned char)a0 destinationURL:(id)a1 sourceDescription:(id)a2 purchaser:(id)a3 reportEndpoint:(id)a4 optionalNonce:(id)a5 applicationBundleID:(id)a6 ephemeral:(BOOL)a7;
- (void)_addMediaPlaybackControlsView:(id)a0;
- (void)_addReasonToHideTopScrollPocket:(unsigned char)a0;
- (void)_addTextAnimationForAnimationID:(id)a0 withData:(const void *)a1;
- (void)_adjustVisibilityForTargetedElements:(id)a0 completionHandler:(id /* block */)a1;
- (id)_adjustedColorForTopContentInsetColorFromUIDelegate:(id)a0;
- (void)_alignCenter:(id)a0;
- (void)_alignJustified:(id)a0;
- (void)_alignLeft:(id)a0;
- (void)_alignRight:(id)a0;
- (BOOL)_allMediaPresentationsClosed;
- (BOOL)_alwaysBounceHorizontal;
- (BOOL)_alwaysBounceVertical;
- (void)_appPrivacyReportTestingData:(id /* block */)a0;
- (void)_archiveWithConfiguration:(id)a0 completionHandler:(id /* block */)a1;
- (id)_attachmentForIdentifier:(id)a0;
- (int)_audioRoutingArbitrationStatus;
- (double)_audioRoutingArbitrationUpdateTime;
- (BOOL)_beginBackSwipeForTesting;
- (void)_beginDeferringViewInWindowChanges;
- (void)_callAsyncJavaScript:(id)a0 arguments:(id)a1 inFrame:(id)a2 inContentWorld:(id)a3 completionHandler:(id /* block */)a4;
- (BOOL)_canChangeFrameLayout:(id)a0;
- (void)_cancelFixedColorExtensionFadeAnimationsForTesting;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_candidateRect;
- (void)_clearAppPrivacyReportTestingData:(id /* block */)a0;
- (void)_clearBackForwardCache;
- (void)_clearBrowsingWarning;
- (void)_clearBrowsingWarningIfForMainFrameNavigation;
- (void)_clearServiceWorkerEntitlementOverride:(id /* block */)a0;
- (void)_clearWarningView;
- (void)_clearWarningViewIfForMainFrameNavigation;
- (void)_closeAllMediaPresentations;
- (BOOL)_completeBackSwipeForTesting;
- (void)_completeImmediateActionAnimation;
- (void)_completeTextManipulation:(id)a0 completion:(id /* block */)a1;
- (void)_completeTextManipulationForItems:(id)a0 completion:(id /* block */)a1;
- (void)_computePagesForPrinting:(id)a0 completionHandler:(id /* block */)a1;
- (id)_containerForFixedColorExtension;
- (void)_convertPoint:(struct CGPoint { double x0; double x1; })a0 fromFrame:(id)a1 toMainFrameCoordinates:(id /* block */)a2;
- (void)_convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromFrame:(id)a1 toMainFrameCoordinates:(id /* block */)a2;
- (void)_countStringMatches:(id)a0 options:(unsigned long long)a1 maxCount:(unsigned long long)a2;
- (void)_createFlagsChangedEventMonitorForTesting;
- (void)_createIconDataFromImageData:(id)a0 withLengths:(id)a1 completionHandler:(id /* block */)a2;
- (void)_createMediaSessionCoordinatorForTesting:(id)a0 completionHandler:(id /* block */)a1;
- (void)_dataTaskWithRequest:(id)a0 completionHandler:(id /* block */)a1;
- (void)_decodeImageData:(id)a0 preferredSize:(id)a1 completionHandler:(id /* block */)a2;
- (void)_denyNextUserMediaRequest;
- (void)_didChangeEditorState;
- (void)_didDisableBrowserExtensions:(id)a0;
- (void)_didDismissContactPicker;
- (void)_didDismissContextMenu;
- (void)_didEnableBrowserExtensions:(id)a0;
- (void)_didEndPartialIntelligenceTextAnimation;
- (void)_didHandleAcceptedCandidate;
- (void)_didInsertAttachment:(void *)a0 withSource:(id)a1;
- (void)_didInvalidateDataForAttachment:(void *)a0;
- (void)_didLoadAppInitiatedRequest:(id /* block */)a0;
- (void)_didPresentContactPicker;
- (void)_didRemoveAttachment:(void *)a0;
- (void)_didShowContextMenu;
- (void)_didUpdateCandidateListVisibility:(BOOL)a0;
- (void)_disableBackForwardSnapshotVolatilityForTesting;
- (void)_disableFrameSizeUpdates;
- (void)_disableURLSchemeCheckInDataDetectors;
- (void)_dismissContentRelativeChildWindows;
- (void)_dismissDigitalCredentialsPicker:(void *)a0;
- (void)_doAfterActivityStateUpdate:(id /* block */)a0;
- (void)_doAfterAdjustingColorForTopContentInsetFromUIDelegate:(void *)a0;
- (void)_doAfterNextPresentationUpdateWithoutWaitingForAnimatedResizeForTesting:(id /* block */)a0;
- (void)_doAfterNextPresentationUpdateWithoutWaitingForPainting:(id /* block */)a0;
- (void)_doAfterNextVisibleContentRectAndPresentationUpdate:(id /* block */)a0;
- (void)_doAfterNextVisibleContentRectUpdate:(id /* block */)a0;
- (void)_doAfterProcessingAllPendingMouseEvents:(id /* block */)a0;
- (void)_doWindowSnapshotReadinessUpdate;
- (void)_dumpPrivateClickMeasurement:(id /* block */)a0;
- (void)_enableFrameSizeUpdates;
- (void)_endDeferringViewInWindowChanges;
- (void)_endDeferringViewInWindowChangesSync;
- (id)_ensureTextFinderClient;
- (void)_enterFullscreen;
- (void)_enterInWindow;
- (void)_evaluateJavaScript:(id)a0 asAsyncFunction:(BOOL)a1 withSourceURL:(id)a2 withArguments:(id)a3 forceUserGesture:(BOOL)a4 inFrame:(id)a5 inWorld:(id)a6 completionHandler:(id /* block */)a7;
- (void)_evaluateJavaScript:(id)a0 inFrame:(id)a1 inContentWorld:(id)a2 completionHandler:(id /* block */)a3;
- (void)_evaluateJavaScript:(id)a0 withSourceURL:(id)a1 inFrame:(id)a2 inContentWorld:(id)a3 completionHandler:(id /* block */)a4;
- (void)_evaluateJavaScript:(id)a0 withSourceURL:(id)a1 inFrame:(id)a2 inContentWorld:(id)a3 withUserGesture:(BOOL)a4 completionHandler:(id /* block */)a5;
- (void)_evaluateJavaScriptWithoutUserGesture:(id)a0 completionHandler:(id /* block */)a1;
- (void)_executeEditCommand:(id)a0 argument:(id)a1 completion:(id /* block */)a2;
- (void)_exitInWindow;
- (void)_fetchDataOfTypes:(unsigned long long)a0 completionHandler:(id /* block */)a1;
- (void)_findString:(id)a0 options:(unsigned long long)a1 maxCount:(unsigned long long)a2;
- (void)_forceRequestCandidates;
- (unsigned int)_forwardedLogsCountForTesting;
- (void)_frameInfoFromHandle:(id)a0 completionHandler:(id /* block */)a1;
- (void)_frameTrees:(id /* block */)a0;
- (void)_frames:(id /* block */)a0;
- (id)_fullScreenPlaceholderView;
- (id)_fullScreenWindow;
- (void)_gestureEventWasNotHandledByWebCore:(id)a0;
- (void)_getApplicationManifestWithCompletionHandler:(id /* block */)a0;
- (void)_getContentsAsAttributedStringWithCompletionHandler:(id /* block */)a0;
- (void)_getContentsAsStringWithCompletionHandler:(id /* block */)a0;
- (void)_getContentsAsStringWithCompletionHandlerKeepIPCConnectionAliveForTesting:(id /* block */)a0;
- (void)_getContentsOfAllFramesAsStringWithCompletionHandler:(id /* block */)a0;
- (void)_getInformationFromImageData:(id)a0 completionHandler:(id /* block */)a1;
- (void)_getMainResourceDataWithCompletionHandler:(id /* block */)a0;
- (void)_getNotifyStateForTesting:(id)a0 completionHandler:(id /* block */)a1;
- (void)_getPDFFirstPageSizeInFrame:(id)a0 completionHandler:(id /* block */)a1;
- (void)_getProcessDisplayNameWithCompletionHandler:(id /* block */)a0;
- (void)_getTextFragmentMatchWithCompletionHandler:(id /* block */)a0;
- (void)_getWebArchiveDataWithCompletionHandler:(id /* block */)a0;
- (void)_gpuToWebProcessConnectionCountForTesting:(id /* block */)a0;
- (void)_grantAccessToAssetServices;
- (void)_handleAcceptedCandidate:(id)a0;
- (void)_handleControlledElementIDResponse:(id)a0;
- (BOOL)_hasFlagsChangedEventMonitorForTesting;
- (BOOL)_hasSleepDisabler;
- (BOOL)_hasVisibleColorExtensionView:(unsigned char)a0;
- (void)_hideFindUI;
- (BOOL)_holdWindowResizeSnapshotIfNeeded;
- (id)_immediateActionAnimationControllerForHitTestResult:(id)a0 withType:(long long)a1 userData:(id)a2;
- (void)_initializeWithConfiguration:(id)a0;
- (id)_insertAttachmentWithFileWrapper:(id)a0 contentType:(id)a1 completion:(id /* block */)a2;
- (id)_insertAttachmentWithFileWrapper:(id)a0 contentType:(id)a1 options:(id)a2 completion:(id /* block */)a3;
- (id)_insertAttachmentWithFilename:(id)a0 contentType:(id)a1 data:(id)a2 options:(id)a3 completion:(id /* block */)a4;
- (void)_installScreenTimeWebpageControllerIfNeeded;
- (void)_interactWithMediaControlsForTesting;
- (void)_internalDoAfterNextPresentationUpdate:(id /* block */)a0 withoutWaitingForPainting:(BOOL)a1 withoutWaitingForAnimatedResize:(BOOL)a2;
- (void)_invalidateWindowSnapshotReadinessHandler;
- (void)_isJITEnabled:(id /* block */)a0;
- (void)_isLayerTreeFrozenForTesting:(id /* block */)a0;
- (void)_killWebContentProcess;
- (void)_killWebContentProcessAndResetState;
- (void)_launchInitialProcessIfNecessary;
- (void)_loadAlternateHTMLString:(id)a0 baseURL:(id)a1 forUnreachableURL:(id)a2;
- (void)_loadAndDecodeImage:(id)a0 constrainedToSize:(struct CGSize { double x0; double x1; })a1 maximumBytesFromNetwork:(unsigned long long)a2 completionHandler:(id /* block */)a3;
- (id)_loadData:(id)a0 MIMEType:(id)a1 characterEncodingName:(id)a2 baseURL:(id)a3 userData:(id)a4;
- (id)_loadRequest:(id)a0 shouldOpenExternalURLs:(BOOL)a1;
- (id)_loadRequest:(id)a0 shouldOpenExternalURLsPolicy:(long long)a1;
- (void)_loadServiceWorker:(id)a0 completionHandler:(id /* block */)a1;
- (void)_loadServiceWorker:(id)a0 usingModules:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)_modelProcessModelPlayerCountForTesting:(id /* block */)a0;
- (id)_nameForVisualIdentificationOverlay;
- (void)_numberOfVisibilityAdjustmentRectsWithCompletionHandler:(id /* block */)a0;
- (struct RectEdges<float> { struct array<float, 4UL> { float x0[4]; } x0; })_obscuredInsetsForFixedColorExtension;
- (struct NakedPtr<WebKit::WebPageProxy> { struct WebPageProxy *x0; })_page;
- (double)_pageScale;
- (void)_pauseAllAnimationsWithCompletionHandler:(id /* block */)a0;
- (void)_pauseNowPlayingMediaSession:(id /* block */)a0;
- (id)_pdfHUDs;
- (void)_playAllAnimationsWithCompletionHandler:(id /* block */)a0;
- (void)_playPredominantOrNowPlayingMediaSession:(id /* block */)a0;
- (void)_preconnectToServer:(id)a0;
- (void)_prepareForImmediateActionAnimation;
- (void)_prepareForMoveToWindow:(id)a0 completionHandler:(id /* block */)a1;
- (id)_printOperationWithPrintInfo:(id)a0;
- (id)_printOperationWithPrintInfo:(id)a0 forFrame:(id)a1;
- (void)_processDidResumeForTesting;
- (void)_processWillSuspendForTesting:(id /* block */)a0;
- (void)_processWillSuspendImminentlyForTesting;
- (void)_proofreadingSessionShowDetailsForSuggestionWithUUID:(id)a0 relativeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_proofreadingSessionUpdateState:(unsigned char)a0 forSuggestionWithUUID:(id)a1;
- (id)_propertiesOfLayerWithID:(unsigned long long)a0;
- (struct RefPtr<WebKit::WebPageProxy, WTF::RawPtrTraits<WebKit::WebPageProxy>, WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> { struct WebPageProxy *x0; })_protectedPage;
- (void)_recalculateViewportSizesWithMinimumViewportInset:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0 maximumViewportInset:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a1 throwOnInvalidInput:(BOOL)a2;
- (id)_reloadExpiredOnly;
- (id)_reloadWithoutContentBlockers;
- (void)_removeDataDetectedLinks:(id /* block */)a0;
- (void)_removeMediaPlaybackControlsView;
- (void)_removeReasonToHideTopScrollPocket:(unsigned char)a0;
- (void)_removeTextAnimationForAnimationID:(id)a0;
- (void)_requestActiveNowPlayingSessionInfo:(id /* block */)a0;
- (void)_requestAllTargetableElementsInfo:(double)a0 completionHandler:(id /* block */)a1;
- (void)_requestAllTextWithCompletionHandler:(id /* block */)a0;
- (void)_requestControlledElementID;
- (void)_requestTargetedElementInfo:(id)a0 completionHandler:(id /* block */)a1;
- (void)_requestTextExtraction:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 completionHandler:(id /* block */)a1;
- (void)_resetInteraction;
- (void)_resetNavigationGestureStateForTesting;
- (void)_resetSecureInputState;
- (void)_resetVisibilityAdjustmentsForTargetedElements:(id)a0 completionHandler:(id /* block */)a1;
- (struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; })_resolutionForShareSheetImmediateCompletionForTesting;
- (void)_restoreAndScrollToAppHighlight:(id)a0;
- (void)_restoreAppHighlights:(id)a0;
- (void)_restoreFromSessionStateData:(id)a0;
- (id)_restoreSessionState:(id)a0 andNavigate:(BOOL)a1;
- (void)_resumeAllMediaPlayback;
- (void)_resumePage:(id /* block */)a0;
- (void)_revokeAccessToAssetServices;
- (void)_saveBackForwardSnapshotForItem:(id)a0;
- (void)_saveResources:(id)a0 suggestedFileName:(id)a1 completionHandler:(id /* block */)a2;
- (id)_screenTimeBlurredSnapshot;
- (id)_screenTimeWebpageController;
- (void)_scrollToEdge:(unsigned long long)a0 animated:(BOOL)a1;
- (id)_scrollbarStateForScrollingNodeID:(unsigned long long)a0 processID:(unsigned long long)a1 isVertical:(BOOL)a2;
- (void)_serviceWorkersEnabled:(id /* block */)a0;
- (id)_sessionStateWithFilter:(id /* block */)a0;
- (void)_setAlwaysBounceHorizontal:(BOOL)a0;
- (void)_setAlwaysBounceVertical:(BOOL)a0;
- (void)_setConnectedToHardwareConsoleForTesting:(BOOL)a0;
- (void)_setContentOffsetX:(id)a0 y:(id)a1 animated:(BOOL)a2;
- (void)_setContinuousSpellCheckingEnabledForTesting:(BOOL)a0;
- (void)_setCustomSwipeViews:(id)a0;
- (void)_setCustomSwipeViewsObscuredContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)_setCustomSwipeViewsTopContentInset:(float)a0;
- (void)_setDidMoveSwipeSnapshotCallback:(id /* block */)a0;
- (void)_setDisplayCaptureState:(long long)a0 completionHandler:(id /* block */)a1;
- (void)_setFont:(id)a0 sender:(id)a1;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 andScrollBy:(struct CGSize { double x0; double x1; })a1;
- (void)_setGamepadsRecentlyAccessed:(BOOL)a0;
- (void)_setGrammarCheckingEnabledForTesting:(BOOL)a0;
- (void)_setIndexOfGetDisplayMediaDeviceSelectedForTesting:(id)a0;
- (void)_setMediaVolumeForTesting:(float)a0;
- (void)_setObscuredContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0 immediate:(BOOL)a1;
- (void)_setPageMuted:(unsigned long long)a0;
- (void)_setPageScale:(double)a0 withOrigin:(struct CGPoint { double x0; double x1; })a1;
- (void)_setPrivateClickMeasurementAppBundleIDForTesting:(id)a0 completionHandler:(id /* block */)a1;
- (void)_setPrivateClickMeasurementAttributionReportURLsForTesting:(id)a0 destinationURL:(id)a1 completionHandler:(id /* block */)a2;
- (void)_setPrivateClickMeasurementAttributionTokenPublicKeyURLForTesting:(id)a0 completionHandler:(id /* block */)a1;
- (void)_setPrivateClickMeasurementAttributionTokenSignatureURLForTesting:(id)a0 completionHandler:(id /* block */)a1;
- (void)_setPrivateClickMeasurementOverrideTimerForTesting:(BOOL)a0 completionHandler:(id /* block */)a1;
- (void)_setSelectedColorForColorPicker:(id)a0;
- (void)_setShareSheetCompletesImmediatelyWithResolutionForTesting:(BOOL)a0;
- (void)_setShouldSuppressFirstResponderChanges:(BOOL)a0;
- (void)_setStatisticsCrossSiteLoadWithLinkDecorationForTesting:(id)a0 withToHost:(id)a1 withWasFiltered:(BOOL)a2 withCompletionHandler:(id /* block */)a3;
- (void)_setSystemAudioCaptureState:(long long)a0 completionHandler:(id /* block */)a1;
- (void)_setSystemCanPromptForGetDisplayMediaForTesting:(BOOL)a0;
- (void)_setSystemPreviewCompletionHandlerForLoadTesting:(id /* block */)a0;
- (void)_setThrottleStateForTesting:(int)a0;
- (void)_setTopContentInset:(double)a0 immediate:(BOOL)a1;
- (void)_setupPageConfiguration:(void *)a0 withPool:(void *)a1;
- (BOOL)_shouldBypassGeolocationPromptForTesting;
- (void)_showBrowsingWarning:(const void *)a0 completionHandler:(void *)a1;
- (void)_showDigitalCredentialsPicker:(const void *)a0 completionHandler:(void *)a1;
- (void)_showSafeBrowsingWarningWithTitle:(id)a0 warning:(id)a1 details:(id)a2 completionHandler:(id /* block */)a3;
- (void)_showSafeBrowsingWarningWithURL:(id)a0 title:(id)a1 warning:(id)a2 details:(id)a3 completionHandler:(id /* block */)a4;
- (void)_showSafeBrowsingWarningWithURL:(id)a0 title:(id)a1 warning:(id)a2 detailsWithLinks:(id)a3 completionHandler:(id /* block */)a4;
- (void)_showWarningView:(const void *)a0 completionHandler:(void *)a1;
- (void)_showWarningViewWithTitle:(id)a0 warning:(id)a1 details:(id)a2 completionHandler:(id /* block */)a3;
- (void)_showWarningViewWithURL:(id)a0 title:(id)a1 warning:(id)a2 details:(id)a3 completionHandler:(id /* block */)a4;
- (void)_showWarningViewWithURL:(id)a0 title:(id)a1 warning:(id)a2 detailsWithLinks:(id)a3 completionHandler:(id /* block */)a4;
- (void)_showWritingTools;
- (void)_simulateClickOverFirstMatchingTextInViewportWithUserInteraction:(id)a0 completionHandler:(id /* block */)a1;
- (void)_simulateDeviceOrientationChangeWithAlpha:(double)a0 beta:(double)a1 gamma:(double)a2;
- (void)_simulateMouseEnter:(id)a0;
- (void)_simulateMouseMove:(id)a0;
- (void)_startImageAnalysis:(id)a0 target:(id)a1;
- (void)_startTextManipulationsWithConfiguration:(id)a0 completion:(id /* block */)a1;
- (void)_stopAllMediaPlayback;
- (void)_stopMediaCapture;
- (void)_storeAppHighlight:(const void *)a0;
- (void)_suspendAllMediaPlayback;
- (id)_suspendMediaPlaybackCounter;
- (void)_suspendPage:(id /* block */)a0;
- (void)_switchFromStaticFontRegistryToUserFontRegistry;
- (void)_takeFindStringFromSelection:(id)a0;
- (void)_takeFindStringFromSelectionInternal:(id)a0;
- (void)_takePDFSnapshotWithConfiguration:(id)a0 completionHandler:(id /* block */)a1;
- (void)_terminateIdleServiceWorkersForTesting;
- (void)_textFragmentDirectiveFromSelectionWithCompletionHandler:(id /* block */)a0;
- (void)_textFragmentRangesWithCompletionHandlerForTesting:(id /* block */)a0;
- (void)_textPreviewsForElementWithID:(id)a0 completionHandler:(id /* block */)a1;
- (void)_togglePictureInPicture;
- (BOOL)_tryClose;
- (BOOL)_tryToSwipeWithEvent:(id)a0 ignoringPinnedState:(BOOL)a1;
- (void)_uninstallScreenTimeWebpageController;
- (void)_updateFixedColorExtensionViewFrames;
- (void)_updateFixedContainerEdges:(const void *)a0;
- (void)_updateHiddenScrollPocketEdges;
- (void)_updateMediaPlaybackControlsManager;
- (void)_updateScreenTimeBasedOnWindowVisibility;
- (void)_updateScreenTimeViewGeometry;
- (void)_updateScrollGeometryWithContentOffset:(struct CGPoint { double x0; double x1; })a0 contentSize:(struct CGSize { double x0; double x1; })a1;
- (void)_updateTopScrollPocketCaptureColor;
- (void)_updateWebpagePreferences:(id)a0;
- (void)_web_cancelImmediateActionAnimation;
- (void)_web_completeImmediateActionAnimation;
- (void)_web_didAddMediaControlsManager:(id)a0;
- (void)_web_didChangeContentSize:(struct CGSize { double x0; double x1; })a0;
- (void)_web_didPerformDragOperation:(BOOL)a0;
- (void)_web_didRemoveMediaControlsManager;
- (void)_web_dismissContentRelativeChildWindows;
- (void)_web_dismissContentRelativeChildWindowsWithAnimation:(BOOL)a0;
- (unsigned long long)_web_dragDestinationActionForDraggingInfo:(id)a0;
- (void)_web_editorStateDidChange;
- (void)_web_gestureEventWasNotHandledByWebCore:(id)a0;
- (BOOL)_web_hasActiveIntelligenceTextEffects;
- (id)_web_immediateActionAnimationControllerForHitTestResultInternal:(void *)a0 withType:(unsigned int)a1 userData:(struct Object { void /* function */ **x0; void *x1; } *)a2;
- (void)_web_prepareForImmediateActionAnimation;
- (void)_web_restoreContentRelativeChildViews;
- (id)_web_superAccessibilityAttributeValue:(id)a0;
- (void)_web_superDoCommandBySelector:(SEL)a0;
- (id)_web_superHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)_web_superInputContext;
- (void)_web_superKeyDown:(id)a0;
- (void)_web_superMagnifyWithEvent:(id)a0;
- (void)_web_superQuickLookWithEvent:(id)a0;
- (void)_web_superRemoveTrackingRect:(long long)a0;
- (void)_web_superSmartMagnifyWithEvent:(id)a0;
- (void)_web_superSwipeWithEvent:(id)a0;
- (void)_web_suppressContentRelativeChildViews;
- (BOOL)_writingToolsTextReplacementsFinished;
- (unsigned long long)accessibilityRemoteChildTokenHash;
- (unsigned long long)accessibilityUIProcessLocalTokenHash;
- (void)callAsyncJavaScript:(id)a0 arguments:(id)a1 inFrame:(id)a2 inContentWorld:(id)a3 completionHandler:(id /* block */)a4;
- (void)closeAllMediaPresentations;
- (void)closeAllMediaPresentations:(id /* block */)a0;
- (void)closeAllMediaPresentationsWithCompletionHandler:(id /* block */)a0;
- (void)colorExtensionViewDidAppear:(id)a0;
- (void)colorExtensionViewWillDisappear:(id)a0;
- (void)createPDFWithConfiguration:(id)a0 completionHandler:(id /* block */)a1;
- (void)createWebArchiveDataWithCompletionHandler:(id /* block */)a0;
- (void)evaluateJavaScript:(id)a0 inFrame:(id)a1 inContentWorld:(id)a2 completionHandler:(id /* block */)a3;
- (void)fetchDataOfTypes:(unsigned long long)a0 completionHandler:(id /* block */)a1;
- (void)findString:(id)a0 withConfiguration:(id)a1 completionHandler:(id /* block */)a2;
- (id)goToBackForwardListItem:(id)a0;
- (void)intelligenceTextEffectCoordinator:(id)a0 contentPreviewForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 completion:(id /* block */)a2;
- (void)intelligenceTextEffectCoordinator:(id)a0 decorateReplacementsForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 completion:(id /* block */)a2;
- (void)intelligenceTextEffectCoordinator:(id)a0 rectsForProofreadingSuggestionsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 completion:(id /* block */)a2;
- (void)intelligenceTextEffectCoordinator:(id)a0 setSelectionForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 completion:(id /* block */)a2;
- (void)intelligenceTextEffectCoordinator:(id)a0 textPreviewsForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 completion:(id /* block */)a2;
- (void)intelligenceTextEffectCoordinator:(id)a0 updateTextVisibilityForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 visible:(BOOL)a2 identifier:(id)a3 completion:(id /* block */)a4;
- (id)loadFileRequest:(id)a0 allowingReadAccessToURL:(id)a1;
- (id)loadFileURL:(id)a0 allowingReadAccessToURL:(id)a1;
- (id)loadSimulatedRequest:(id)a0 response:(id)a1 responseData:(id)a2;
- (id)loadSimulatedRequest:(id)a0 responseHTMLString:(id)a1;
- (id)loadSimulatedRequest:(id)a0 withResponse:(id)a1 responseData:(id)a2;
- (id)loadSimulatedRequest:(id)a0 withResponseHTMLString:(id)a1;
- (void)pauseAllMediaPlayback:(id /* block */)a0;
- (void)pauseAllMediaPlaybackWithCompletionHandler:(id /* block */)a0;
- (void)requestMediaPlaybackState:(id /* block */)a0;
- (void)requestMediaPlaybackStateWithCompletionHandler:(id /* block */)a0;
- (void)restoreData:(id)a0 completionHandler:(id /* block */)a1;
- (void)resumeAllMediaPlayback:(id /* block */)a0;
- (void)resumeDownloadFromResumeData:(id)a0 completionHandler:(id /* block */)a1;
- (BOOL)scrollViewDrawsMagicPocket;
- (void)setAllMediaPlaybackSuspended:(BOOL)a0 completionHandler:(id /* block */)a1;
- (void)setCameraCaptureState:(long long)a0 completionHandler:(id /* block */)a1;
- (void)setMicrophoneCaptureState:(long long)a0 completionHandler:(id /* block */)a1;
- (void)setMinimumViewportInset:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0 maximumViewportInset:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a1;
- (void)startDownloadUsingRequest:(id)a0 completionHandler:(id /* block */)a1;
- (void)suspendAllMediaPlayback:(id /* block */)a0;
- (void)takeSnapshotWithConfiguration:(id)a0 completionHandler:(id /* block */)a1;
- (id)viewForIntelligenceTextEffectCoordinator:(id)a0;

@end
