@class NSString, NSDictionary, NSArray;

@interface NSError : NSObject <BSDescriptionProviding, NSCopying, NSSecureCoding> {
    void *_reserved;
    long long _code;
    NSString *_domain;
    NSDictionary *_userInfo;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly, nonatomic, getter=ac_isUnrecoverableDatabaseError) BOOL ac_unrecoverableDatabaseError;
@property (readonly, nonatomic, getter=ac_isDiskFullSQLError) BOOL ac_diskFullSQLError;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *domain;
@property (readonly) long long code;
@property (readonly, copy) NSDictionary *userInfo;
@property (readonly, copy) NSString *localizedDescription;
@property (readonly, copy) NSString *localizedFailureReason;
@property (readonly, copy) NSString *localizedRecoverySuggestion;
@property (readonly, copy) NSArray *localizedRecoveryOptions;
@property (readonly) id recoveryAttempter;
@property (readonly, copy) NSString *helpAnchor;
@property (readonly, copy) NSArray *underlyingErrors;

+ (id)bs_errorWithDomain:(id)a0 code:(long long)a1 configuration:(id /* block */)a2;
+ (id)rbs_errorClientNotAuthorized;
+ (id)rbs_errorClientNotEntitled:(id)a0 permanent:(BOOL)a1;
+ (id)_SFL_BookmarkDataAndURLAreNULLError;
+ (id)_SFL_BookmarkResolvedToURLInTrashError;
+ (id)_SFL_CorruptArchiveErrorWithUnderlyingError:(id)a0;
+ (id)_SFL_UnimplementedError;
+ (id)_SFL_insertErrorWithUnderlyingError:(id)a0;
+ (id)_SFL_removeErrorWithUnderlyingError:(id)a0;
+ (id)_SFL_setPropertiesErrorWithUnderlyingError:(id)a0;
+ (id)_SFL_updateErrorWithUnderlyingError:(id)a0;
+ (id)errorWithMTLCaptureErrorCode:(long long)a0;
+ (id)ak_anisetteErrorWithCode:(long long)a0 underlyingError:(id)a1;
+ (id)ak_attestationErrorWithCode:(long long)a0 underlyingError:(id)a1;
+ (id)ak_deviceListErrorWithCode:(long long)a0;
+ (id)ak_errorWithCode:(long long)a0;
+ (id)ak_errorWithCode:(long long)a0 underlyingError:(id)a1;
+ (id)ak_errorWithCode:(long long)a0 userInfo:(id)a1;
+ (id)ak_generalErrorWithCode:(long long)a0 errorDomain:(id)a1 underlyingError:(id)a2;
+ (id)ak_livenessErrorWithCode:(long long)a0;
+ (id)ak_passkeyErrorWithCode:(long long)a0;
+ (id)ak_wrappedAnisetteError:(int)a0;
+ (id)ak_wrappedAnisetteError:(long long)a0 underlyingADIErrorCode:(int)a1;
+ (id)errorWithCoreCryptoStatus:(int)a0 description:(id)a1 args:(char *)a2;
+ (id)errorWithCoreCryptoStatus:(int)a0 userInfo:(id)a1;
+ (id)errorWithJoiningError:(long long)a0 format:(id)a1;
+ (id)errorWithJoiningError:(long long)a0 format:(id)a1 arguments:(char *)a2;
+ (id)errorWithOSStatus:(int)a0 description:(id)a1 args:(char *)a2;
+ (id)errorWithOSStatus:(int)a0 userInfo:(id)a1;
+ (id)errorWithDomain:(id)a0 code:(long long)a1 description:(id)a2;
+ (id)errorWithDomain:(id)a0 code:(long long)a1 description:(id)a2 underlying:(id)a3;
+ (id)errorWithIOReturn:(int)a0;
+ (id)buildCheckedError:(id)a0;
+ (id)_buildCheckedErrorForDomain:(id)a0 withCode:(long long)a1 safeUnderlying:(id)a2 description:(id)a3;
+ (long long)_checkedDepthCount:(id)a0;
+ (BOOL)_checkedIsSafeUserInfo:(id)a0;
+ (id)buildAndLogCheckedSUCoreError:(long long)a0 underlying:(id)a1 description:(id)a2;
+ (id)buildCheckedSUCoreError:(long long)a0 underlying:(id)a1 description:(id)a2;
+ (id)_EX_errorWithCode:(long long)a0 description:(id)a1;
+ (id)_EX_errorWithCode:(long long)a0 underlyingError:(id)a1;
+ (id)_EX_hostIsLackingRequiredEntitlementErrorWithHostPID:(int)a0 requiredEntitlements:(id)a1;
+ (id)_EX_parameterError;
+ (id)_EX_processExitedErrorWithName:(id)a0 pid:(int)a1;
+ (id)_EX_unimplementedError;
+ (id)descriptionFromZhuGeErrorCode:(unsigned long long)a0;
+ (id)errorWithZhuGeErrorCode:(unsigned long long)a0 underlyingError:(id)a1;
+ (id)errorWithDomain:(id)a0 code:(long long)a1 userInfo:(id)a2;
+ (void)_setFileNameLocalizationEnabled:(BOOL)a0;
+ (id /* block */)userInfoValueProviderForDomain:(id)a0;
+ (id)_cocoaErrorWithCode:(long long)a0 path:(id)a1 url:(id)a2 underlying:(id)a3 variant:(id)a4 source:(id)a5 destination:(id)a6;
+ (id)_readCorruptErrorWithFormat:(id)a0;
+ (void)_registerBuiltInFormatters;
+ (void)_registerFormatter:(void /* function */ *)a0 forErrorKey:(id)a1 parameters:(const char *)a2;
+ (void)_web_addErrorsWithCodesAndDescriptions:(id)a0 inDomain:(id)a1;
+ (id)_web_errorWithDomain:(id)a0 code:(long long)a1 URL:(id)a2;
+ (id)_web_errorWithDomain:(id)a0 code:(long long)a1 failingURL:(id)a2;
+ (void)setUserInfoValueProviderForDomain:(id)a0 provider:(id /* block */)a1;

- (id)ac_sanitizeObject:(id)a0;
- (id)ac_secureCodingError;
- (id)descriptionBuilderWithMultilinePrefix:(id)a0;
- (id)succinctDescription;
- (id)descriptionWithMultilinePrefix:(id)a0;
- (id)succinctDescriptionBuilder;
- (BOOL)rbs_isPermanentFailure;
- (id)initWithIOAccelError:(long long)a0;
- (BOOL)ak_isAppleIDSetupErrorWithCode:(long long)a0;
- (id)ak_allUnderlyingErrors;
- (id)ak_allUnderlyingErrorsWithMaxDepth:(long long)a0;
- (id)ak_errorByAppendingUserInfo:(id)a0;
- (id)ak_errorsHeaderStringWithMessage;
- (BOOL)ak_isAdditionalCTASelected;
- (BOOL)ak_isAppleIDSetupCancelError;
- (BOOL)ak_isAuthenticationError;
- (BOOL)ak_isAuthenticationErrorWithCode:(long long)a0;
- (BOOL)ak_isEligibleForProxiedAuthFallback;
- (BOOL)ak_isIncompatibleDevicesError;
- (BOOL)ak_isLAUserCancelError;
- (BOOL)ak_isServerThrottlingError;
- (BOOL)ak_isServiceError;
- (BOOL)ak_isSurrogateAuthAlreadyInProgressError;
- (BOOL)ak_isUnableToPromptError;
- (BOOL)ak_isUserCancelError;
- (BOOL)ak_isUserInitiatedError;
- (BOOL)ak_isUserSkippedError;
- (BOOL)ak_isUserTryAgainError;
- (BOOL)ak_isXPCServiceError;
- (id)errorDescriptionIncludingUnderlyingErrorsWithMaxDepth:(long long)a0;
- (BOOL)isAccountNotProvisioned;
- (id)initWithCoreCryptoStatus:(int)a0 description:(id)a1 args:(char *)a2;
- (id)initWithCoreCryptoStatus:(int)a0 userInfo:(id)a1;
- (id)initWithJoiningError:(long long)a0 userInfo:(id)a1;
- (id)initWithOSStatus:(int)a0 description:(id)a1 args:(char *)a2;
- (id)initWithOSStatus:(int)a0 userInfo:(id)a1;
- (BOOL)isBSServiceConnectionError;
- (long long)checkedCode;
- (id)checkedDomain;
- (long long)checkedLayer;
- (long long)checkedIndications;
- (id)checkedDescription;
- (id)checkedSummary;
- (BOOL)shouldFallbackToCustomerScan;
- (id)checkedOfLayer:(long long)a0;
- (id)checkedIndicationsDescription;
- (id)checkedIndicationsSummary;
- (id)checkedNameForCode;
- (BOOL)_checkedIsSafe:(BOOL)a0;
- (long long)checkedIndicationsMatchingMask:(long long)a0;
- (id)checkedUserInfo;
- (long long)_checkedIndicationsMatching:(long long)a0;
- (id)_checkedStackErrorAtDepth:(long long)a0;
- (id)_deepestWithLayer;
- (long long)_errorInStackLayer;
- (id)_errorInStackOfLayer:(long long)a0;
- (long long)checkedDepthCount;
- (id)checkedForDepthIndex:(long long)a0;
- (unsigned long long)checkedSystemPartitionSize;
- (id)augmentWithPrefix:(id)a0;
- (BOOL)isRecoverableError;
- (id)_ZhuGeDescriptionWithLayer:(unsigned long long)a0;
- (id)ZhuGeDescription;
- (unsigned long long)_cfTypeID;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)replacementObjectForPortCoder:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (id)init;
- (id)initWithCoder:(id)a0;
- (BOOL)isEqual:(id)a0;
- (id)redactedDescription;
- (id)initWithDomain:(id)a0 code:(long long)a1 userInfo:(id)a2;
- (id)_web_failingURL;
- (id)_callStackReturnAddresses;
- (id)_cocoaErrorString:(id)a0;
- (id)_cocoaErrorString:(id)a0 fromBundle:(id)a1 tableName:(id)a2;
- (id)_cocoaErrorStringWithKind:(id)a0;
- (id)_cocoaErrorStringWithKind:(id)a0 variant:(id)a1;
- (long long)_collectApplicableUserInfoFormatters:(struct **)a0 max:(long long)a1;
- (id)_formatCocoaErrorString:(id)a0 parameters:(const char *)a1 applicableFormatters:(struct **)a2 count:(long long)a3;
- (struct __CFString { } *)_retainedUserInfoCallBackForKey:(id)a0;
- (BOOL)_web_errorIsInDomain:(id)a0;
- (id)_web_initWithDomain:(id)a0 code:(long long)a1 failingURL:(id)a2;
- (id)_web_initWithDomain_nowarn:(id)a0 code:(long long)a1 URL:(id)a2;
- (id)_web_localizedDescription;

@end
