@class MTLLoadedFileContentsWrapper, NSArray, NSString, NSMutableDictionary, NSObject, MTLLoadedFile;
@protocol OS_dispatch_queue, MTLDevice, OS_dispatch_data;

@interface _MTLBinaryArchive : _MTLObjectWithLabel <MTLBinaryArchiveSPI> {
    MTLLoadedFile *_fileMapping;
    MTLLoadedFileContentsWrapper *_fileData;
    unsigned int _internalArchiverId;
    BOOL _isLegacy;
    BOOL _alwaysReturnDriverReflection;
    BOOL _bitcodeStripped;
    char *_archiveIDInt;
    BOOL _reloadingAfterSerialization;
    BOOL _hasBuiltins;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_serializeQueue;
    struct unordered_map<MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>, CompareFunctionIdHash, CompareFunctionIdHash, std::allocator<std::pair<const MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>> { struct __hash_table<std::__hash_value_type<MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, std::__unordered_map_hasher<MTLHashKey, std::__hash_value_type<MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, CompareFunctionIdHash, CompareFunctionIdHash>, std::__unordered_map_equal<MTLHashKey, std::__hash_value_type<MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, CompareFunctionIdHash, CompareFunctionIdHash>, std::allocator<std::__hash_value_type<MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLHashKey, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _executableFileIndex;
    struct unordered_map<MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>, UnorderedContainerHash, UnorderedContainerHash, std::allocator<std::pair<const MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>> { struct __hash_table<std::__hash_value_type<MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, UnorderedContainerHash, UnorderedContainerHash>, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, UnorderedContainerHash, UnorderedContainerHash>, std::allocator<std::__hash_value_type<MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _reflectionsIndex;
    struct unordered_map<unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>>>> { struct __hash_table<std::__hash_value_type<unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<std::pair<MTLHashKey, unsigned int>>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _airntBinaryList;
    struct vector<MTLAirNTObject *, std::allocator<MTLAirNTObject *>> { struct MTLAirNTObject **__begin_; struct MTLAirNTObject **__end_; struct MTLAirNTObject **__cap_; } _airntObjectList;
    struct vector<MTLAirNTObject *, std::allocator<MTLAirNTObject *>> { struct MTLAirNTObject **__begin_; struct MTLAirNTObject **__end_; struct MTLAirNTObject **__cap_; } _airntFromDescriptorFunctionList;
    struct vector<MTLPipelineNTObject *, std::allocator<MTLPipelineNTObject *>> { struct MTLPipelineNTObject **__begin_; struct MTLPipelineNTObject **__end_; struct MTLPipelineNTObject **__cap_; } _airntPipelineList;
    struct map<MTLUINT256_t, std::pair<unsigned int, unsigned long long>, CompareHash, std::allocator<std::pair<const MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { struct __tree<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, std::__map_value_compare<MTLUINT256_t, std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, CompareHash>, std::allocator<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { void *__begin_node_; struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __end_node_; unsigned long long __size_; } __tree_; } _legacyPipelineFileIndex;
    struct vector<functionIdExtended, std::allocator<functionIdExtended>> { struct functionIdExtended *__begin_; struct functionIdExtended *__end_; struct functionIdExtended *__cap_; } _airntExtraBinaryEntries;
    struct unordered_map<unsigned long long, unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, unsigned long long>>> { struct __hash_table<std::__hash_value_type<unsigned long long, unsigned long long>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, unsigned long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _airntOffsetToIndexMap;
    NSMutableDictionary *_entries;
    NSMutableDictionary *_asynEntries;
    NSString *_absoluteOpenPath;
    struct unordered_map<unsigned long long, id<MTLLibrarySPI>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, id<MTLLibrarySPI>>>> { struct __hash_table<std::__hash_value_type<unsigned long long, id<MTLLibrarySPI>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLLibrarySPI>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLLibrarySPI>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, id<MTLLibrarySPI>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLLibrarySPI>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLLibrarySPI>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLLibrarySPI>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLLibrarySPI>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _libCache;
    struct unordered_map<MTLUINT256_t, _NSRange, UnorderedContainerHash, UnorderedContainerHash, std::allocator<std::pair<const MTLUINT256_t, _NSRange>>> { struct __hash_table<std::__hash_value_type<MTLUINT256_t, _NSRange>, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, _NSRange>, UnorderedContainerHash, UnorderedContainerHash>, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, _NSRange>, UnorderedContainerHash, UnorderedContainerHash>, std::allocator<std::__hash_value_type<MTLUINT256_t, _NSRange>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, _NSRange>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, _NSRange>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, _NSRange>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, _NSRange>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _specializedLibraryCache;
    struct unordered_map<MTLUINT256_t, _NSRange, UnorderedContainerHash, UnorderedContainerHash, std::allocator<std::pair<const MTLUINT256_t, _NSRange>>> { struct __hash_table<std::__hash_value_type<MTLUINT256_t, _NSRange>, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, _NSRange>, UnorderedContainerHash, UnorderedContainerHash>, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, _NSRange>, UnorderedContainerHash, UnorderedContainerHash>, std::allocator<std::__hash_value_type<MTLUINT256_t, _NSRange>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, _NSRange>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, _NSRange>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, _NSRange>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, _NSRange>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _stitchedLibraryCache;
    struct unordered_map<std::string, id<MTLLibrarySPI>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, id<MTLLibrarySPI>>>> { struct __hash_table<std::__hash_value_type<std::string, id<MTLLibrarySPI>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, id<MTLLibrarySPI>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, id<MTLLibrarySPI>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, id<MTLLibrarySPI>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, id<MTLLibrarySPI>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, id<MTLLibrarySPI>>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, id<MTLLibrarySPI>>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, id<MTLLibrarySPI>>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _extLibCache;
    struct unordered_map<MTLUINT256_t, MTLAirEntry *, UnorderedContainerHash, UnorderedContainerHash, std::allocator<std::pair<const MTLUINT256_t, MTLAirEntry *>>> { struct __hash_table<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, UnorderedContainerHash, UnorderedContainerHash>, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, UnorderedContainerHash, UnorderedContainerHash>, std::allocator<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _specializedFunctionByHash;
    struct unordered_map<MTLUINT256_t, MTLAirEntry *, UnorderedContainerHash, UnorderedContainerHash, std::allocator<std::pair<const MTLUINT256_t, MTLAirEntry *>>> { struct __hash_table<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, UnorderedContainerHash, UnorderedContainerHash>, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, UnorderedContainerHash, UnorderedContainerHash>, std::allocator<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLAirEntry *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _stitchedFunctionByHash;
    NSObject<OS_dispatch_data> *_metalScript;
    struct unordered_map<MTLHashKey, MTLOpaqueGPUArchiverUnitId *, CompareFunctionIdHash, CompareFunctionIdHash, std::allocator<std::pair<const MTLHashKey, MTLOpaqueGPUArchiverUnitId *>>> { struct __hash_table<std::__hash_value_type<MTLHashKey, MTLOpaqueGPUArchiverUnitId *>, std::__unordered_map_hasher<MTLHashKey, std::__hash_value_type<MTLHashKey, MTLOpaqueGPUArchiverUnitId *>, CompareFunctionIdHash, CompareFunctionIdHash>, std::__unordered_map_equal<MTLHashKey, std::__hash_value_type<MTLHashKey, MTLOpaqueGPUArchiverUnitId *>, CompareFunctionIdHash, CompareFunctionIdHash>, std::allocator<std::__hash_value_type<MTLHashKey, MTLOpaqueGPUArchiverUnitId *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLHashKey, MTLOpaqueGPUArchiverUnitId *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLHashKey, MTLOpaqueGPUArchiverUnitId *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLHashKey, MTLOpaqueGPUArchiverUnitId *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLHashKey, MTLOpaqueGPUArchiverUnitId *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _gpuArchiverIDMap;
    struct unique_ptr<MTLPipelineCollection, std::default_delete<MTLPipelineCollection>> { struct MTLPipelineCollection *__ptr_; } _pipelineCollection;
    struct unique_ptr<MTLMetalScriptBuilder, std::default_delete<MTLMetalScriptBuilder>> { struct MTLMetalScriptBuilder *__ptr_; } _mtlScriptBuilder;
    struct shared_ptr<std::unordered_map<MTLUINT256_t, NSObject<OS_dispatch_data> *, UnorderedContainerHash, UnorderedContainerHash>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _uniqueBitcodeList;
    BOOL _collectArchives;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } _serializing;
    struct unordered_map<MTLUINT256_t, NSObject<OS_dispatch_data> *, UnorderedContainerHash, UnorderedContainerHash, std::allocator<std::pair<const MTLUINT256_t, NSObject<OS_dispatch_data> *>>> { struct __hash_table<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, UnorderedContainerHash, UnorderedContainerHash>, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, UnorderedContainerHash, UnorderedContainerHash>, std::allocator<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _legacySpecializedFunctions;
    struct map<MTLUINT256_t, std::pair<unsigned int, unsigned long long>, CompareHash, std::allocator<std::pair<const MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { struct __tree<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, std::__map_value_compare<MTLUINT256_t, std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, CompareHash>, std::allocator<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { void *__begin_node_; struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __end_node_; unsigned long long __size_; } __tree_; } _legacySpecializedFunctionArchiveFileIndex;
    unsigned long long _specializedFunctionArchiveOffset;
    unsigned long long _specializedFunctionArchiveBytes;
    struct map<MTLUINT256_t, std::pair<unsigned int, unsigned long long>, CompareHash, std::allocator<std::pair<const MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { struct __tree<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, std::__map_value_compare<MTLUINT256_t, std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, CompareHash>, std::allocator<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { void *__begin_node_; struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __end_node_; unsigned long long __size_; } __tree_; } _recompilationArchiveFileIndex;
    unsigned long long _recompilationArchiveOffset;
    unsigned long long _recompilationArchiveBytes;
    struct unordered_map<MTLUINT256_t, MTLProgramObject *, UnorderedContainerHash, UnorderedContainerHash, std::allocator<std::pair<const MTLUINT256_t, MTLProgramObject *>>> { struct __hash_table<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, UnorderedContainerHash>, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, UnorderedContainerHash>, std::allocator<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _variantMap;
    unsigned long long _newBinary;
}

@property BOOL recompilationTarget;
@property (readonly) BOOL stripped;
@property (readonly) unsigned long long options;
@property (readonly) NSArray *keys;
@property (copy) NSString *label;
@property (readonly) id<MTLDevice> device;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (unsigned int)archiveTypeAtURL:(id)a0 device:(id)a1 error:(id *)a2;
+ (unsigned int)archiveVersionCompatible:(struct MachOToolsVersion { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })a0 isMatchingSlice:(BOOL)a1 device:(id)a2;
+ (id)descriptorDataForArchive:(id)a0;
+ (BOOL)deserializeBinaryArchiveDescriptorMachO:(struct DeserializedBinaryArchiveLayout { BOOL x0; BOOL x1; unsigned long long x2; unsigned long long x3; BOOL x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; BOOL x9; unsigned long long x10; unsigned long long x11; BOOL x12; struct MTLLoaderSliceIdentifier { int x0; int x1; } x13; id x14; } *)a0 fileData:(id)a1;
+ (BOOL)deserializeBinaryArchiveHeader:(struct DeserializedBinaryArchiveLayout { BOOL x0; BOOL x1; unsigned long long x2; unsigned long long x3; BOOL x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; BOOL x9; unsigned long long x10; unsigned long long x11; BOOL x12; struct MTLLoaderSliceIdentifier { int x0; int x1; } x13; id x14; } *)a0 fileData:(id)a1 device:(id)a2;
+ (struct MTLLoaderSliceIdentifier { int x0; int x1; })sliceIDForSpecializedFunctionsForLLVMVersion:(int)a0;

- (void)dealloc;
- (id)formattedDescription:(unsigned long long)a0;
- (id)newSpecializedFunctionWithHash:(struct { unsigned char x0[32]; } *)a0 libraryPath:(id)a1;
- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)serializeToURL:(id)a0 error:(id *)a1;
- (BOOL)storeComputePipelineDescriptor:(id)a0;
- (BOOL)addLibraryWithDescriptor:(id)a0 error:(id *)a1;
- (BOOL)addComputePipelineFunctionsWithDescriptor:(id)a0 error:(id *)a1;
- (BOOL)addComputePipelineFunctionsWithDescriptor:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (BOOL)addFunctionWithDescriptor:(id)a0 library:(id)a1 error:(id *)a2;
- (BOOL)addMeshRenderPipelineFunctionsWithDescriptor:(id)a0 error:(id *)a1;
- (BOOL)addMeshRenderPipelineFunctionsWithDescriptor:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (BOOL)addRenderPipelineFunctionsWithDescriptor:(id)a0 error:(id *)a1;
- (BOOL)addRenderPipelineFunctionsWithDescriptor:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (BOOL)addTileRenderPipelineFunctionsWithDescriptor:(id)a0 error:(id *)a1;
- (BOOL)addTileRenderPipelineFunctionsWithDescriptor:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (id)archiveFunctionIds;
- (BOOL)enumerateArchivesFromBackingFile:(id /* block */)a0;
- (BOOL)enumerateArchivesFromPipelineCollection:(id /* block */)a0;
- (void *)pipelineCollection;
- (BOOL)recompileToArchiveWithURL:(id)a0 error:(id *)a1;
- (BOOL)serializeToURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (BOOL)storeMeshRenderPipelineDescriptor:(id)a0;
- (BOOL)storeRenderPipelineDescriptor:(id)a0;
- (BOOL)storeTileRenderPipelineDescriptor:(id)a0;
- (void)addArchiveEntryInternal:(id)a0 forKey:(const struct { unsigned char x0[32]; } *)a1;
- (id)materializeFromFileOffset:(unsigned long long)a0 hash:(struct { unsigned char x0[32]; } *)a1;
- (void)addBinaryEntryImpl:(id)a0 forKey:(id)a1;
- (void)addBinaryEntryInternal:(id)a0 forKey:(id)a1;
- (void)addStitchedLibraryWithKey:(const struct { unsigned char x0[32]; } *)a0 descriptors:(const void *)a1 inputFunctions:(id)a2 library:(id)a3;
- (void)addStitchingInputsFunction:(id)a0 toEntry:(id)a1;
- (BOOL)airntSerializeToURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (BOOL)archiveSkipsAIRValidation;
- (void)clearLibCache;
- (void)deallocContainers;
- (BOOL)enumerateArchivesFromBackingFileFromSlice:(const struct MTLLoaderSliceIdentifier { int x0; int x1; } *)a0 version:(unsigned long long)a1 verifyKey:(const struct { unsigned char x0[32]; } *)a2 offset:(unsigned long long)a3 bytes:(unsigned long long)a4 enumerator:(id /* block */)a5;
- (BOOL)enumerateSpecializedFunctionArchivesFromBackingFile:(id /* block */)a0;
- (void *)findProgramObjectForFunction:(const struct { unsigned char x0[32]; } *)a0;
- (id)flatBufferFromJSON:(id)a0 schema:(const char *)a1 schemaSize:(unsigned long long)a2;
- (id)getArchiveIDWithError:(id *)a0;
- (id)getArchiveIDWithErrorInternal:(id *)a0;
- (id)getBinaryDataForKey:(id)a0 reflectionType:(char)a1;
- (id)getFunctionNameFromAirDescriptor:(const struct stitchedAirDescriptor { id x0; struct { unsigned char x0[32]; } x1; } *)a0;
- (id)getLibraryDescriptorWithAirScrpt:(const struct StitchingScript { unsigned char x0[1]; } *)a0;
- (id)getMetalScript;
- (BOOL)getScriptsWithAIRNTObject:(void *)a0;
- (BOOL)getSpecializedFunctionArchivesToSerialize:(void *)a0;
- (void)initMetalScriptWithArchive:(id)a0;
- (id)initWithDevice:(id)a0 descriptor:(id)a1 error:(id *)a2;
- (id)initWithOptions:(unsigned long long)a0 device:(id)a1 url:(id)a2 error:(id *)a3;
- (BOOL)legacySerializeToURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (BOOL)loadAirSliceAtOffset:(unsigned long long)a0 sliceLength:(unsigned long long)a1;
- (BOOL)loadAirntBlocksForSlice:(const struct MTLLoaderSliceIdentifier { int x0; int x1; } *)a0 sliceOffset:(unsigned long long)a1 skipAIRValidation:(BOOL)a2;
- (BOOL)loadFileIndex:(void *)a0 expectedSliceId:(const struct MTLLoaderSliceIdentifier { int x0; int x1; } *)a1 expectedVersion:(unsigned long long)a2 sliceOffset:(unsigned long long)a3;
- (BOOL)loadFromURL:(id)a0 error:(id *)a1;
- (id)localStitchedFunctionLookupWithDescriptor:(const struct stitchedAirDescriptor { id x0; struct { unsigned char x0[32]; } x1; } *)a0;
- (id)materializeAIRNTBlockForKey:(id)a0 reflectionType:(char)a1;
- (void)materializeAirNTAllForSlice:(const struct MTLLoaderSliceIdentifier { int x0; int x1; } *)a0 entryList:(struct shared_ptr<std::vector<machOEntry>> { void *x0; struct __shared_weak_count *x1; })a1;
- (void)materializeAirNTFromOnlineForSlice:(const struct MTLLoaderSliceIdentifier { int x0; int x1; } *)a0 entryList:(struct shared_ptr<std::vector<machOEntry>> { void *x0; struct __shared_weak_count *x1; })a1;
- (void)materializeAirNTSpecializedFunctions:(struct shared_ptr<std::vector<machOEntry>> { void *x0; struct __shared_weak_count *x1; })a0;
- (void)materializeAirNTStitchedFunctions:(struct shared_ptr<std::vector<machOEntry>> { void *x0; struct __shared_weak_count *x1; })a0;
- (id)materializeAirScript:(void *)a0;
- (void)materializeAll;
- (void)materializeAllAIRNTLegacy;
- (id)materializeBitCode:(void *)a0 atIndex:(unsigned int)a1;
- (id)materializeEntryForKey:(const struct { unsigned char x0[32]; } *)a0 fileIndex:(void *)a1 containsEntry:(id /* block */)a2 addEntry:(id /* block */)a3;
- (id)materializeFromHash:(struct { unsigned char x0[32]; } *)a0 fileIndex:(void *)a1;
- (void)materializeLinkedBitcodes:(void *)a0 hashList:(void *)a1;
- (id)materializeReflectionBlock:(void *)a0;
- (id)newArchiveDataForKeyInternal:(const struct { unsigned char x0[32]; } *)a0;
- (id)newArchiverIdWithBinaryKey:(id)a0 entry:(id)a1 srcArchiverId:(id)a2 functionType:(unsigned long long)a3;
- (id)newComputePipelineDescriptorWithScript:(const struct PipelineScript { unsigned char x0[1]; } *)a0 obj:(void *)a1 destinationArchive:(id)a2 error:(id *)a3;
- (id)newFunctionDescriptorWithAirScript:(const struct ConstantsSpecializationScript { unsigned char x0[1]; } *)a0;
- (id)newLibraryInArchiveAtPos:(void *)a0 atIndex:(unsigned int)a1 error:(id *)a2;
- (id)newLibraryInArchiveWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 error:(id *)a1;
- (id)newMeshRenderPipelineDescriptorWithScript:(const struct PipelineScript { unsigned char x0[1]; } *)a0 obj:(void *)a1 destinationArchive:(id)a2 error:(id *)a3;
- (id)newRecompiledFunctionWithAIRNTObject:(void *)a0 destinationArchive:(id)a1 error:(id *)a2;
- (id)newRecompiledFunctionWithAIRNTObject:(void *)a0 index:(unsigned long long)a1 destinationArchive:(id)a2 error:(id *)a3;
- (id)newRenderPipelineDescriptorWithScript:(const struct PipelineScript { unsigned char x0[1]; } *)a0 obj:(void *)a1 destinationArchive:(id)a2 error:(id *)a3;
- (id)newStitchedLibraryWithKey:(const struct { unsigned char x0[32]; } *)a0 descriptors:(const void *)a1;
- (id)newTileRenderPipelineDescriptorWithScript:(const struct PipelineScript { unsigned char x0[1]; } *)a0 obj:(void *)a1 destinationArchive:(id)a2 error:(id *)a3;
- (void)preloadLibrariesInAirntObject:(void *)a0 error:(id *)a1;
- (void *)programObjectForFunction:(const struct { unsigned char x0[32]; } *)a0;
- (id)recompileFunction:(id)a0 inLibrary:(id)a1 toArchive:(id)a2 toBinary:(BOOL)a3 error:(id *)a4;
- (BOOL)recompilePipelinesToArchive:(id)a0 error:(id *)a1;
- (BOOL)recompileStatelessToArchive:(id)a0 error:(id *)a1;
- (BOOL)recompileToArchive:(id)a0 error:(id *)a1;
- (struct { unsigned char x0[32]; })reflectionHashWithFunctionId:(const void *)a0 binaryPos:(unsigned long long)a1;
- (BOOL)remoteInsertionBegin;
- (void)remoteInsertionEnd;
- (BOOL)removeComputePipelineFunctionsWithDescriptor:(id)a0 error:(id *)a1;
- (BOOL)requiresLegacyReflection;
- (void)setMTLLinkedFunctions:(id)a0 LFS:(const struct LinkedFunctions { unsigned char x0[1]; } *)a1 obj:(void *)a2 destinationArchive:(id)a3 error:(id *)a4;
- (BOOL)supportsAIRNT;
- (void)updatePipelineWithPipelineArchiverId:(id)a0 key:(id)a1 functionType:(unsigned long long)a2;
- (BOOL)updateReflectionForEntry:(id)a0 binaryKey:(id)a1 requiredReflection:(char)a2;

@end
