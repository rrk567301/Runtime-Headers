@class NSString;
@protocol MTL4CommandAllocator, MTL4CommandBuffer;

@interface _MTL4ComputeCommandEncoder : _MTL4CommandEncoder <MTL4ComputeCommandEncoderGGDSPI>

@property (copy) NSString *label;
@property (readonly, nonatomic) id<MTL4CommandBuffer> commandBuffer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) id<MTL4CommandAllocator> commandAllocator;

- (void)optimizeContentsForGPUAccess:(id)a0;
- (void)copyIndirectCommandBuffer:(id)a0 sourceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 destination:(id)a2 destinationIndex:(unsigned long long)a3;
- (void)dispatchThreadgroups:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 threadsPerThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a1;
- (void)optimizeContentsForCPUAccess:(id)a0 slice:(unsigned long long)a1 level:(unsigned long long)a2;
- (void)fillTexture:(id)a0 level:(unsigned long long)a1 slice:(unsigned long long)a2 region:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a3 color:(struct { double x0; double x1; double x2; double x3; })a4 pixelFormat:(unsigned long long)a5;
- (void)optimizeIndirectCommandBuffer:(id)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)fillTexture:(id)a0 level:(unsigned long long)a1 slice:(unsigned long long)a2 region:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a3 bytes:(const void *)a4 length:(unsigned long long)a5;
- (void)fillTexture:(id)a0 level:(unsigned long long)a1 slice:(unsigned long long)a2 region:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })a3 color:(struct { double x0; double x1; double x2; double x3; })a4;
- (void)copyFromTexture:(id)a0 toTexture:(id)a1;
- (void)optimizeContentsForGPUAccess:(id)a0 slice:(unsigned long long)a1 level:(unsigned long long)a2;
- (void)setComputePipelineState:(id)a0;
- (void)executeCommandsInBuffer:(id)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)resetCommandsInBuffer:(id)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)optimizeContentsForCPUAccess:(id)a0;
- (void)copyFromTexture:(id)a0 sourceSlice:(unsigned long long)a1 sourceLevel:(unsigned long long)a2 toTexture:(id)a3 destinationSlice:(unsigned long long)a4 destinationLevel:(unsigned long long)a5 sliceCount:(unsigned long long)a6 levelCount:(unsigned long long)a7;
- (void)fillBuffer:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 pattern4:(unsigned int)a2;
- (void)dispatchThreads:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 threadsPerThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a1;
- (void)encodeStartElse;
- (void)signalProgress:(unsigned int)a0;
- (void)setThreadgroupDistributionMode:(long long)a0;
- (void)beginVirtualSubstream;
- (void)buildAccelerationStructure:(id)a0 descriptor:(id)a1 scratchBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)copyAccelerationStructure:(id)a0 toAccelerationStructure:(id)a1;
- (void)copyAndCompactAccelerationStructure:(id)a0 toAccelerationStructure:(id)a1;
- (void)copyFromBuffer:(id)a0 sourceOffset:(unsigned long long)a1 sourceBytesPerRow:(unsigned long long)a2 sourceBytesPerImage:(unsigned long long)a3 sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a4 toTexture:(id)a5 destinationSlice:(unsigned long long)a6 destinationLevel:(unsigned long long)a7 destinationOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a8;
- (void)copyFromBuffer:(id)a0 sourceOffset:(unsigned long long)a1 sourceBytesPerRow:(unsigned long long)a2 sourceBytesPerImage:(unsigned long long)a3 sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a4 toTexture:(id)a5 destinationSlice:(unsigned long long)a6 destinationLevel:(unsigned long long)a7 destinationOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a8 options:(unsigned long long)a9;
- (void)copyFromBuffer:(id)a0 sourceOffset:(unsigned long long)a1 toBuffer:(id)a2 destinationOffset:(unsigned long long)a3 size:(unsigned long long)a4;
- (void)copyFromTensor:(id)a0 sourceOrigin:(id)a1 sourceDimensions:(id)a2 toTensor:(id)a3 destinationOrigin:(id)a4 destinationDimensions:(id)a5;
- (void)copyFromTensor:(id)a0 sourceSlice:(struct MTLTensorSlice { id x0; id x1; })a1 toTensor:(id)a2 destinationSlice:(struct MTLTensorSlice { id x0; id x1; })a3;
- (void)copyFromTexture:(id)a0 sourceSlice:(unsigned long long)a1 sourceLevel:(unsigned long long)a2 sourceOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a3 sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a4 toBuffer:(id)a5 destinationOffset:(unsigned long long)a6 destinationBytesPerRow:(unsigned long long)a7 destinationBytesPerImage:(unsigned long long)a8;
- (void)copyFromTexture:(id)a0 sourceSlice:(unsigned long long)a1 sourceLevel:(unsigned long long)a2 sourceOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a3 sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a4 toBuffer:(id)a5 destinationOffset:(unsigned long long)a6 destinationBytesPerRow:(unsigned long long)a7 destinationBytesPerImage:(unsigned long long)a8 options:(unsigned long long)a9;
- (void)copyFromTexture:(id)a0 sourceSlice:(unsigned long long)a1 sourceLevel:(unsigned long long)a2 sourceOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a3 sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a4 toTexture:(id)a5 destinationSlice:(unsigned long long)a6 destinationLevel:(unsigned long long)a7 destinationOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a8;
- (void)deserializeInstanceAccelerationStructure:(id)a0 referencedAccelerationStructures:(id)a1 fromBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)deserializePrimitiveAccelerationStructure:(id)a0 fromBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)dispatchThreadgroupsWithIndirectBuffer:(unsigned long long)a0 threadsPerThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a1;
- (void)dispatchThreadsWithIndirectBuffer:(unsigned long long)a0;
- (void)enableNullBufferBinds:(BOOL)a0;
- (BOOL)encodeEndDoWhile:(unsigned long long)a0 comparison:(unsigned long long)a1 referenceValue:(unsigned int)a2;
- (BOOL)encodeEndIf;
- (BOOL)encodeEndWhile;
- (void)encodeStartDoWhile;
- (void)encodeStartIf:(unsigned long long)a0 comparison:(unsigned long long)a1 referenceValue:(unsigned int)a2;
- (void)encodeStartWhile:(unsigned long long)a0 comparison:(unsigned long long)a1 referenceValue:(unsigned int)a2;
- (void)endVirtualSubstream;
- (void)executeCommandsInBuffer:(id)a0 indirectBuffer:(unsigned long long)a1;
- (void)fillBuffer:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 value:(unsigned char)a2;
- (void)generateMipmapsForTexture:(id)a0;
- (void)insertCompressedTextureReinterpretationFlush;
- (void)invalidateCompressedTexture:(id)a0;
- (void)invalidateCompressedTexture:(id)a0 slice:(unsigned long long)a1 level:(unsigned long long)a2;
- (unsigned long long)nextVirtualSubstream;
- (void)refitAccelerationStructure:(id)a0 descriptor:(id)a1 destination:(id)a2 scratchBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)refitAccelerationStructure:(id)a0 descriptor:(id)a1 destination:(id)a2 scratchBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a3 options:(unsigned long long)a4;
- (void)serializeInstanceAccelerationStructure:(id)a0 referencedAccelerationStructures:(id)a1 toBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)serializePrimitiveAccelerationStructure:(id)a0 toBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)setArgumentTable:(id)a0;
- (void)setImageblockWidth:(unsigned long long)a0 height:(unsigned long long)a1;
- (void)setSubstream:(unsigned int)a0;
- (void)setThreadgroupDistributionModeWithClusterGroupIndex:(unsigned int)a0;
- (void)setThreadgroupMemoryLength:(unsigned long long)a0 atIndex:(unsigned long long)a1;
- (void)setToolsDispatchBufferSPI:(unsigned long long)a0 atIndex:(unsigned long long)a1;
- (unsigned long long)stages;
- (void)waitForProgress:(unsigned int)a0;
- (void)waitForVirtualSubstream:(unsigned long long)a0;
- (void)writeAccelerationStructureSerializationData:(id)a0 toBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)writeAccelerationStructureTraversalDepth:(id)a0 toBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)writeCompactedAccelerationStructureSize:(id)a0 toBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)writeDeserializedAccelerationStructureSize:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a0 toBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a1;
- (BOOL)writeGenericBVHStructureOfAccelerationStructure:(id)a0 into:(id)a1;
- (BOOL)writeGenericBVHStructureSizesOfAccelerationStructure:(id)a0 into:(id)a1;
- (void)writeGenericBVHStructureSizesOfAccelerationStructure:(id)a0 toBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)writeSerializedAccelerationStructureSize:(id)a0 toBuffer:(struct MTL4BufferRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)writeTimestampWithGranularity:(long long)a0 intoHeap:(id)a1 atIndex:(unsigned long long)a2;
- (id)initWithCommandAllocator:(id)a0;

@end
