@class NSView, NSClickGestureRecognizer, NSPanGestureRecognizer, NSString, NSSet, NSOperationQueue, CALayer, QLPreviewDocument, NSMutableSet, NSImage, QLPreviewDragController, QLPreviewViewReserved;
@protocol QLPreviewCustomView, QLPreviewViewDelegate, QLPreviewItem;

@interface QLPreviewView : NSView <QLPreviewTextOverlayHostDelegate, QLSeamlessOpenerDelegate, NSDraggingDestination, QLScrollable, QLScrollControllerDelegate, CALayerDelegate, NSGestureRecognizerDelegate, QLPreviewDragDelegate> {
    QLPreviewViewReserved *_reserved;
}

@property (retain) QLPreviewDragController *dragController;
@property (retain) NSPanGestureRecognizer *dragGestureRecognizer;
@property (getter=isDragging) BOOL dragging;
@property (retain) NSMutableSet *savingDocuments;
@property BOOL inHitTest;
@property BOOL inTimeoutEventLoop;
@property (retain) NSClickGestureRecognizer *doubleClickRecognizer;
@property (retain) NSOperationQueue *fileCoordinationQueue;
@property BOOL ignoreHDRSuppressionChange;
@property (retain) QLPreviewDocument *document;
@property (readonly) BOOL canBeResized;
@property (readonly) BOOL isLoaded;
@property (readonly) BOOL isGeneric;
@property BOOL sizesPreviewToFit;
@property (readonly) struct CGSize { double x0; double x1; } naturalPreviewSize;
@property int mode;
@property BOOL enableRemotePreviews;
@property (retain) NSView *loadingView;
@property double loadingTimeout;
@property (retain) NSView *emptyView;
@property (retain) NSView<QLPreviewCustomView> *genericView;
@property id<QLPreviewViewDelegate> delegate;
@property (readonly) BOOL hasControls;
@property BOOL showControls;
@property (readonly) BOOL needsVolumeControl;
@property BOOL muted;
@property float volume;
@property (readonly) BOOL needsPlayControl;
@property BOOL playing;
@property (readonly) BOOL trimmingSupported;
@property (readonly) BOOL needsTimeControl;
@property (readonly) double duration;
@property double currentTime;
@property (readonly) BOOL playedToTheEnd;
@property BOOL showRemainingTime;
@property (readonly) BOOL needsPageControl;
@property (readonly) unsigned long long numberOfPages;
@property unsigned long long currentPage;
@property (readonly) BOOL needsScrollControl;
@property (readonly) double totalScroll;
@property double currentScroll;
@property (readonly) double totalHorizontalScroll;
@property double currentHorizontalScroll;
@property (readonly) BOOL needsZoomControl;
@property (readonly) double maxZoomFactor;
@property (readonly) double zoomFactorToFitWidth;
@property struct CGPoint { double x0; double x1; } focusPoint;
@property double zoomFactor;
@property BOOL autoZooms;
@property long long draggingFormation;
@property BOOL automaticallyMakePreviewFirstResponder;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } previewDocumentFrame;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } previewContentFrame;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } previewUsefulFrame;
@property (readonly) BOOL scalable;
@property (readonly) BOOL prefersSizeToFit;
@property unsigned long long cacheSize;
@property (retain) NSSet *supportedDisplayBundleIDs;
@property (readonly) id<QLPreviewItem> displayedPreviewItem;
@property (readonly) CALayer *contentLayer;
@property (readonly) NSImage *contentImage;
@property BOOL allowsAlerts;
@property BOOL visible;
@property (retain) id<QLPreviewItem> previewItem;
@property (retain) id displayState;
@property BOOL shouldCloseWithWindow;
@property BOOL autostarts;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property double verticalScrollValue;
@property (readonly) double verticalKnobProportion;
@property double horizontalScrollValue;

+ (BOOL)automaticallyNotifiesObserversForKey:(id)a0;
+ (id)keyPathsForValuesAffectingVolume;
+ (BOOL)requiresConstraintBasedLayout;
+ (id)keyPathsForValuesAffectingCurrentTime;
+ (void)initialize;
+ (id)keyPathsForValuesAffectingPlaying;
+ (id)keyPathsForValuesAffectingTouchBar;
+ (void)pushAbortModalSessionEvent;
+ (id)keyPathsForValuesAffectingMuted;
+ (id)keyPathsForValuesAffectingZoomFactor;
+ (void)prewarmUIService;
+ (id)keyPathsForValuesAffectingDisplayState;
+ (id)keyPathsForValuesAffectingDuration;
+ (void)_setupDiskWatch;
+ (id)keyPathsForValuesAffectingPreviewContentFrameForSeamlessOpening;
+ (id)_descriptionOfDisplayable:(id)a0;
+ (Class)_dragGestureRecognizerClass;
+ (void)_registerVNodeSchemeHandler;
+ (id)defaultSupportedDisplayBundleIDsForMode:(int)a0;
+ (BOOL)isVNodeURL:(id)a0;
+ (id)keyPathsForValuesAffectingAutoZooms;
+ (id)keyPathsForValuesAffectingCurrentHorizontalScroll;
+ (id)keyPathsForValuesAffectingCurrentPage;
+ (id)keyPathsForValuesAffectingCurrentScroll;
+ (id)keyPathsForValuesAffectingDisplayBundleID;
+ (id)keyPathsForValuesAffectingDisplayedDisplayBundle;
+ (id)keyPathsForValuesAffectingDisplayedPreviewItem;
+ (id)keyPathsForValuesAffectingFocusPoint;
+ (id)keyPathsForValuesAffectingHasHorizontalScroller;
+ (id)keyPathsForValuesAffectingHorizontalKnobProportion;
+ (id)keyPathsForValuesAffectingHorizontalScrollValue;
+ (id)keyPathsForValuesAffectingMaxZoomFactor;
+ (id)keyPathsForValuesAffectingNeedsPageControl;
+ (id)keyPathsForValuesAffectingNeedsPlayControl;
+ (id)keyPathsForValuesAffectingNeedsScrollControl;
+ (id)keyPathsForValuesAffectingNeedsTimeControl;
+ (id)keyPathsForValuesAffectingNeedsVolumeControl;
+ (id)keyPathsForValuesAffectingNeedsZoomControl;
+ (id)keyPathsForValuesAffectingNumberOfPages;
+ (id)keyPathsForValuesAffectingPlayedToTheEnd;
+ (id)keyPathsForValuesAffectingPreviewContentFrame;
+ (id)keyPathsForValuesAffectingPreviewDocumentFrame;
+ (id)keyPathsForValuesAffectingPreviewOpaqueFrame;
+ (id)keyPathsForValuesAffectingPreviewUsefulFrame;
+ (id)keyPathsForValuesAffectingProgress;
+ (id)keyPathsForValuesAffectingSeekTolerance;
+ (id)keyPathsForValuesAffectingTotalHorizontalScroll;
+ (id)keyPathsForValuesAffectingTotalScroll;
+ (id)keyPathsForValuesAffectingTrimmingSupported;
+ (id)keyPathsForValuesAffectingVerticalKnobProportion;
+ (id)keyPathsForValuesAffectingVerticalScrollValue;
+ (id)keyPathsForValuesAffectingZoomFactorToFitWidth;
+ (void)setVNodeDelegate:(id)a0;
+ (id)supportedContentTypesForMode:(int)a0;
+ (id)vNodeURLWithPath:(id)a0;

- (void)selectAll:(id)a0;
- (id)screen;
- (BOOL)isRemote;
- (id)touchBar;
- (id)actionForLayer:(id)a0 forKey:(id)a1;
- (void)mouseDown:(id)a0;
- (void)viewWillMoveToWindow:(id)a0;
- (float)progress;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sourceFrame;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)keyDown:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 style:(unsigned long long)a1;
- (int)flavor;
- (BOOL)becomeFirstResponder;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (void)copy:(id)a0;
- (void)doCommandBySelector:(SEL)a0;
- (id)customDisplayName;
- (void)resizeSubviewsWithOldSize:(struct CGSize { double x0; double x1; })a0;
- (void)flushCache;
- (void)viewDidMoveToWindow;
- (void)didOpen;
- (BOOL)respondsToSelector:(SEL)a0;
- (void)deactivate;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)viewDidChangeEffectiveAppearance;
- (void)activate;
- (void)stop:(id)a0;
- (void)close;
- (void).cxx_destruct;
- (void)start:(id)a0;
- (void)draggingExited:(id)a0;
- (unsigned int)_CAViewFlags;
- (BOOL)_allowAutoresizingMaskFixupDueToSuperOverridingResizeSubviews;
- (void)_windowWillClose:(id)a0;
- (BOOL)acceptsFirstMouse:(id)a0;
- (BOOL)acceptsFirstResponder;
- (double)backingScaleFactor;
- (unsigned long long)draggingEntered:(id)a0;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)a0;
- (unsigned long long)draggingUpdated:(id)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldAttemptToRecognizeWithEvent:(id)a1;
- (BOOL)hasHorizontalScroller;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)performDragOperation:(id)a0;
- (id)seamlessOpener:(id)a0 sourcePreviewViewForPreviewItem:(id)a1;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)a0;
- (void)viewDidEndLiveResize;
- (void)viewDidHide;
- (void)viewDidUnhide;
- (BOOL)wantsPeriodicDraggingUpdates;
- (BOOL)wantsScrollEventsForSwipeTrackingOnAxis:(long long)a0;
- (id)displayBundleID;
- (id)forcedContentTypeUTI;
- (void)setForcedContentTypeUTI:(id)a0;
- (BOOL)_isVisible;
- (void)openExternalURL:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })borderFrame;
- (id)currentURL;
- (id)cacheManager;
- (void)setCacheManager:(id)a0;
- (void)didHide;
- (void)willShow;
- (id)pasteboardWriter;
- (id)draggingItems;
- (void)willOpen;
- (void)didShow;
- (void)willHide;
- (void)_stopTimeOut;
- (struct CGImage { } *)copyImageRepresentationWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (void)refreshPreviewItem;
- (void)_commonInitWithStyle:(unsigned long long)a0;
- (void)_updateControls;
- (void)_timedOut;
- (void)diskWillEject:(id)a0;
- (id)mandatoryServer;
- (BOOL)shouldShowInlinePreviewControls;
- (BOOL)_hasPathOverlay;
- (void)addHiddenContentViewForLoading:(id)a0;
- (void)didHideOverlay:(id)a0;
- (id)dragContentView;
- (BOOL)hasValidPreview;
- (BOOL)hidePlayControl;
- (BOOL)_accessibilityIsEmpty;
- (BOOL)_accessibilityIsLoading;
- (void)_activateOverlayControls;
- (void)_activatePageNumberDisplay;
- (void)_activatePathOverlay;
- (void)_activateViewControls;
- (id)_actualDisplayBundleID;
- (BOOL)_adaptPreviewFrameForStaticPreviewSizeHint:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 minSize:(struct CGSize { double x0; double x1; })a1 maxSize:(struct CGSize { double x0; double x1; })a2;
- (void)_adjustDeltaPosition:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 forDisplayBundle:(id)a1;
- (id)_bottomConstraint;
- (BOOL)_canChangeDisplayedDocument;
- (BOOL)_canChangeVisibilityTo:(int)a0;
- (BOOL)_contentIsSharedBetweenOldDisplayable:(id)a0 andNewDisplayable:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRectFromDisplayedDisplayable:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRectToDisplayedDisplayable:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_currentPreviewedURL;
- (void)_deactivateOverlayControls;
- (void)_deactivatePageNumberDisplay;
- (void)_deactivatePathOverlay;
- (void)_deactivateViewControls;
- (id)_defaultLoadingHints;
- (id)_descriptionForView:(id)a0;
- (void)_didHideDisplayable:(id)a0;
- (void)_didShowDisplayable:(id)a0;
- (struct CGPoint { double x0; double x1; })_displayBundlePointForWindowPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)_displayable;
- (id)_displayedBundleID;
- (void)_endLoadingDocument:(id)a0;
- (id)_filteredDisplayBundleID;
- (BOOL)_hasSetupPageNumberOverlay;
- (id)_hierarchicalDescriptionForView:(id)a0 level:(int)a1;
- (void)_invalidateCachedDocumentForURL:(id)a0;
- (BOOL)_needsPageControlForDisplayBundle:(id)a0;
- (BOOL)_needsPlayControlForDisplayBundle:(id)a0;
- (BOOL)_needsScrollControlForDisplayBundle:(id)a0;
- (BOOL)_needsTimeControlForDisplayBundle:(id)a0;
- (BOOL)_needsZoomControlForDisplayBundle:(id)a0;
- (id)_pathString;
- (BOOL)_prepareToRecycleDocument:(id)a0 willRestore:(BOOL *)a1;
- (id)_previewContainerViewConstraintsFromContainerViewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_previewFirstResponder;
- (void)_recycleDocument:(id)a0 restore:(BOOL)a1;
- (void)_setDisplayable:(id)a0 transition:(int)a1;
- (void)_setDisplayedDocument:(id)a0 transition:(int)a1;
- (void)_setDocument:(id)a0 canDelayDisplay:(BOOL)a1;
- (void)_setPreviewContainerViewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setPreviewItem:(id)a0;
- (void)_setupLayerIfNeeded;
- (BOOL)_shouldAdaptSizeToScreen;
- (BOOL)_shouldManageVisibilityOnlyIfVisible:(BOOL)a0;
- (BOOL)_shouldShowDisplayable:(id)a0 forDisplayBundle:(id)a1;
- (void)_shouldShowViewControls:(BOOL *)a0 overlayControls:(BOOL *)a1 forDisplayBundle:(id)a2;
- (void)_startLoadingDocumentWithTimeoutDate:(id)a0;
- (void)_startLoadingPreviewItem:(id)a0 timeoutDate:(id)a1;
- (void)_startTimeOut;
- (void)_updateBackingScaleFactor;
- (BOOL)_updateDisplayableWithTransition:(int)a0;
- (void)_updateDisplayedDocumentWithDelayedDisplay:(BOOL)a0;
- (void)_updateFrameOfDisplayable:(id)a0;
- (void)_updateOpaqueShape;
- (void)_willHideDisplayable:(id)a0;
- (void)_willShowDisplayable:(id)a0;
- (BOOL)allowLoadingOfUnsupportedDisplayBundleIDs;
- (void)appHDRSuppressionDidChange:(id)a0;
- (id)appURLForNextOpening;
- (void)backingScaleDidChange:(id)a0;
- (BOOL)canAcceptDocument:(id)a0;
- (BOOL)canRestoreDocument:(id)a0;
- (BOOL)canStealDocumentFromPreviewView:(id)a0;
- (BOOL)debugHighlighted;
- (void)debugPreview:(id)a0;
- (void)discardAccessoryControllers;
- (id)displayBundleWithID:(id)a0 forPreviewItem:(id)a1;
- (id)displayableContentView;
- (id)displayedDisplayBundle;
- (id)displayedDocument;
- (unsigned long long)doubleClickModifierFlags;
- (id)draggedURL;
- (id)draggingSourceView;
- (id)emptyDisplayable;
- (BOOL)fastDrawing;
- (void)forceTimeoutForDocument:(id)a0;
- (BOOL)fullLayers;
- (BOOL)generateThumbnailForPage:(unsigned long long)a0 maxSize:(struct CGSize { double x0; double x1; })a1 completionBlock:(id /* block */)a2;
- (id)genericDisplayable;
- (void)getImageRepresentationWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 completion:(id /* block */)a1;
- (void)giveInputFocus;
- (BOOL)hasCachedDocumentForItem:(id)a0;
- (BOOL)hasContentAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)hideLoadingSpinner;
- (double)horizontalKnobProportion;
- (id)initialDisplayBundleID;
- (struct CGSize { double x0; double x1; })initialThumbnailSize;
- (int)inputFocusType;
- (BOOL)isDisplayingError;
- (BOOL)isNativeFileType;
- (BOOL)isWindowKey;
- (id)launchURLForPreviewItem:(id)a0;
- (id)loadingDisplayable;
- (BOOL)loadingForForceTouch;
- (id)loadingViewForPreview:(id)a0 displayBundle:(id)a1;
- (struct CGPoint { double x0; double x1; })locationForEvent:(id)a0;
- (struct CGSize { double x0; double x1; })minimumSizeOfContentWithDefault:(struct CGSize { double x0; double x1; })a0;
- (BOOL)openExternalURLNoChecks:(id)a0;
- (void)openUserActivity:(id)a0 inAppWithBundleId:(id)a1 withCompletion:(id /* block */)a2;
- (struct CGSize { double x0; double x1; })optimalSizeForBoundingSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })optimalSizeFromCurrentSize:(struct CGSize { double x0; double x1; })a0 minSize:(struct CGSize { double x0; double x1; })a1 maxSize:(struct CGSize { double x0; double x1; })a2 defaultSize:(struct CGSize { double x0; double x1; })a3 maxArea:(double)a4 screen:(id)a5;
- (void)pathWatcher:(id)a0 fileAtURLWasDeleted:(id)a1;
- (void)pathWatcher:(id)a0 fileAtURLWasModified:(id)a1 onlyAttributes:(BOOL)a2;
- (void)pathWatcher:(id)a0 fileAtURLWasMoved:(id)a1;
- (void)performOpenTransitionWithUpdatedProperties:(id /* block */)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })previewContentFrameForSeamlessOpening;
- (void)previewDocument:(id)a0 didSaveEdit:(BOOL)a1 toURL:(id)a2;
- (void)previewDocument:(id)a0 gotDisplayBundle:(id)a1;
- (void)previewDocumentDidChangeDisplayable:(id)a0;
- (void)previewDocumentDidLoad:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })previewOpaqueFrame;
- (int)previewStatus;
- (void)previewStatusDidChange;
- (void)receivedDoubleClickGesture:(id)a0;
- (void)receivedDragGesture:(id)a0;
- (void)receivedPinchGestureWithMagnification:(double)a0;
- (void)refreshDisplayableForDocument:(id)a0;
- (void)refreshPreviewItemWithTimeoutDate:(id)a0;
- (void)restoreStolenDocument:(id)a0;
- (double)scrollController:(id)a0 pageScrollPercentageForScroller:(id)a1;
- (void)scrollController:(id)a0 scrollerDidEndTracking:(id)a1;
- (double)seekTolerance;
- (void)setAllowLoadingOfUnsupportedDisplayBundleIDs:(BOOL)a0;
- (void)setAppURLForNextOpening:(id)a0;
- (void)setAppearanceOfDisplayable:(id)a0;
- (void)setDebugHighlighted:(BOOL)a0;
- (void)setDoubleClickModifierFlags:(unsigned long long)a0;
- (void)setEmptyDisplayable:(id)a0;
- (void)setFullLayers:(BOOL)a0;
- (void)setGenericDisplayable:(id)a0;
- (void)setHideLoadingSpinner:(BOOL)a0;
- (void)setInitialDisplayBundleID:(id)a0;
- (void)setInitialThumbnailSize:(struct CGSize { double x0; double x1; })a0;
- (void)setLoadingDisplayable:(id)a0;
- (void)setLoadingForForceTouch:(BOOL)a0;
- (void)setMandatoryServer:(id)a0;
- (void)setMode:(int)a0 reloadItemIfNeeded:(BOOL)a1;
- (void)setPreviewItem:(id)a0 blockingUntilLoading:(BOOL)a1;
- (void)setPreviewItem:(id)a0 blockingUntilLoading:(BOOL)a1 timeoutDate:(id)a2;
- (void)setPreviewItem:(id)a0 blockingUntilLoading:(BOOL)a1 timeoutDate:(id)a2 transition:(int)a3;
- (void)setSeekTolerance:(double)a0;
- (void)setTracksMouseMovements:(BOOL)a0;
- (void)setUpdatePreviewSize:(BOOL)a0;
- (void)setVisualMargins:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)set_emptyView:(id)a0;
- (void)set_genericView:(id)a0;
- (void)set_loadingView:(id)a0;
- (BOOL)setupDragPasteboard:(id)a0;
- (BOOL)shouldAcceptDisplayBundleID:(id)a0;
- (BOOL)shouldOpenURL:(id)a0;
- (BOOL)shouldPreserveDisplayStateWhenNavigating;
- (BOOL)shouldRemoteDisplayBundleID:(id)a0;
- (BOOL)shouldShowInlinePreviewContent;
- (BOOL)shouldUseAsyncLoading;
- (id)sizingDisplayBundle;
- (void)startDragFromGesture:(id)a0 beganOrFailedHandler:(id /* block */)a1;
- (void)startWatchingURL:(id)a0;
- (id)stealDocument;
- (void)stopWatchingURL:(id)a0;
- (id)timeoutDateFromNow;
- (id)titleForPreviewItem:(id)a0 options:(int)a1;
- (BOOL)tracksMouseMovements;
- (void)updateDisplayedDocumentWithTransition:(int)a0;
- (void)updateLoadingViewAppearance:(id)a0 forPreview:(id)a1 displayBundle:(id)a2;
- (void)updateLoadingViewWithTransitionImage:(id)a0 transitionFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)useLegacyDragging;
- (id)viewForEvent:(id)a0;
- (id)viewForLocation:(struct CGPoint { double x0; double x1; })a0;
- (id)viewsDescription;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })visualMargins;
- (void)willShowOverlay:(id)a0;
- (void)windowKeyDidChange:(id)a0;
- (BOOL)windowSupportsRemoteViews;

@end
