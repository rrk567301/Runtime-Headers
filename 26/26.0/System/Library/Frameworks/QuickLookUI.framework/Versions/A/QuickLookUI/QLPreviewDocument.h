@class NSScreen, NSString, NSArray, NSURL, QLPreviewDocumentReserved, QLPreviewView, NSWindow, QLDisplayBundle;
@protocol QLPreviewItem;

@interface QLPreviewDocument : NSObject <QLDisplayBundleOwner> {
    QLPreviewDocumentReserved *_reserved;
    BOOL _isSavingMarkup;
    long long _saveMode;
}

@property (retain) QLDisplayBundle *displayBundle;
@property (retain) QLDisplayBundle *loadingDisplayBundle;
@property BOOL wasEdited;
@property long long saveMode;
@property (readonly) id<QLPreviewItem> previewItem;
@property (readonly) QLPreviewView *previewView;
@property (readonly) BOOL isLoaded;
@property (readonly) BOOL isGeneric;
@property (readonly) BOOL isSaving;
@property (copy) NSString *password;
@property (readonly) unsigned long long numberOfPages;
@property (retain) NSArray *highlightedOccurrences;
@property unsigned long long focusedOccurrenceIndex;
@property (readonly) int previewMode;
@property (readonly) int flavor;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (readonly) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } visualMargins;
@property (readonly) BOOL isRemote;
@property (readonly) double backingScaleFactor;
@property (readonly) BOOL isWindowKey;
@property (readonly) BOOL isAppHDRSuppressed;
@property (readonly) BOOL windowSupportsRemoteViews;
@property (readonly) int previewStatus;
@property (readonly) NSScreen *screen;
@property (readonly) NSWindow *window;
@property (readonly) NSURL *currentURL;
@property (readonly) NSURL *savedCopyURL;
@property (readonly) BOOL allowsAlerts;
@property BOOL tracksMouseMovements;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)keyPathsForValuesAffectingIsLoaded;
+ (id)keyPathsForValuesAffectingAllowsAlerts;
+ (id)keyPathsForValuesAffectingBounds;
+ (id)keyPathsForValuesAffectingCurrentURL;
+ (id)keyPathsForValuesAffectingDisplayable;
+ (id)keyPathsForValuesAffectingFlavor;
+ (id)keyPathsForValuesAffectingIsRemote;
+ (id)keyPathsForValuesAffectingIsWindowKey;
+ (id)keyPathsForValuesAffectingNumberOfPages;
+ (id)keyPathsForValuesAffectingPreviewMode;
+ (id)keyPathsForValuesAffectingVisualMargins;

- (void)setState:(unsigned long long)a0;
- (void)startLoading;
- (unsigned long long)state;
- (void)dealloc;
- (void)invalidate;
- (id)preview;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void).cxx_destruct;
- (id)displayState;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (BOOL)accessibilityIsIgnored;
- (struct CGPoint { double x0; double x1; })convertPointFromScreen:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointToScreen:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromScreen:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToScreen:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)rotate:(long long)a0;
- (void)openExternalURL:(id)a0;
- (void)setPreviewView:(id)a0;
- (id)displayable;
- (void)doubleClickOnPreviewContent;
- (void)updateFullScreenFromMagnification:(double)a0;
- (long long)initialActivity;
- (BOOL)_bundleMustLoadInWindow:(id)a0;
- (void)_didEndLoading;
- (void)_fallbackLoadWithError:(id)a0;
- (id)_hintsWithPreviewViewForWebviewPreloading:(id)a0;
- (void)_loadDisplayBundleID:(id)a0 withLastError:(int)a1 hints:(id)a2;
- (void)_loadPreviewFailedDueToPasswordProtection;
- (void)_loadPreviewFailedIgnoringState:(BOOL)a0 withError:(id)a1;
- (void)_loadPreviewMismatchedWithExpectedDisplayBundleID:(id)a0 hints:(id)a1;
- (void)_loadPreviewSucceeded;
- (void)_loadWithDisplayBundleID:(id)a0 hints:(id)a1 remoteMode:(unsigned long long)a2;
- (void)_setupCoreSpotlightPreviewWithSearchUID:(id)a0 appBundleID:(id)a1 extensionPath:(id)a2 contentType:(id)a3 hints:(id)a4;
- (void)_setupDataProviderPreviewForItem:(id)a0 hints:(id)a1;
- (id)_setupOptionsCommonWithContentType:(id)a0 hints:(id)a1;
- (void)_setupPreviewCommon;
- (void)_setupURLPreview:(id)a0 contentType:(id)a1 hints:(id)a2;
- (void)_startObservingDocumentDirty;
- (void)_stopObservingDocumentDirty;
- (void)cancelPreview;
- (void)displayBundle:(id)a0 didEditPage:(long long)a1;
- (void)displayBundle:(id)a0 didSaveEdit:(BOOL)a1 toURL:(id)a2;
- (void)displayBundle:(id)a0 didShowScreentimeLockout:(BOOL)a1;
- (void)displayBundle:(id)a0 requestReloadAndFallbackWithError:(id)a1;
- (void)displayBundleAddHiddenContentViewToWindowForLoading:(id)a0;
- (void)displayBundleCustomTitleUpdated:(id)a0;
- (void)displayBundleDidCancelMarkup:(id)a0;
- (void)displayBundleDidDesistRemote:(id)a0 expectedDisplayBundleID:(id)a1;
- (void)displayBundleDidEnterMarkup:(id)a0;
- (void)displayBundleDidExitMarkup:(id)a0 waitingForSave:(BOOL)a1;
- (void)displayBundleDidLoad:(id)a0;
- (void)displayBundleDidMismatchLoading:(id)a0 withHints:(id)a1 expectedDisplayBundleID:(id)a2;
- (void)displayBundleFailedToLoad:(id)a0 withError:(id)a1;
- (void)displayBundleSizingUpdated:(id)a0;
- (BOOL)drawPage:(unsigned long long)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 context:(struct CGContext { } *)a2;
- (BOOL)eligibleForRecycling;
- (id)findOccurrencesOfString:(id)a0 inPage:(unsigned long long)a1 withOptions:(unsigned long long)a2;
- (BOOL)generateThumbnailForPage:(unsigned long long)a0 maxSize:(struct CGSize { double x0; double x1; })a1 completionBlock:(id /* block */)a2;
- (id)initWithPreviewItem:(id)a0 forPreviewView:(id)a1;
- (BOOL)isExternalDocument;
- (struct CGPoint { double x0; double x1; })locationForEvent:(id)a0;
- (void)setExternalDocument:(BOOL)a0;
- (void)setFocusedOccurrenceIndex:(unsigned long long)a0 inPage:(unsigned long long)a1;
- (void)setInitialActivity:(long long)a0;
- (BOOL)shouldOpenURL:(id)a0;
- (void)startLoadingWithForcedDisplayBundleID:(id)a0 hints:(id)a1;
- (void)startWatchingURL:(id)a0;
- (void)stopWatchingURL:(id)a0;
- (id)stringForPage:(unsigned long long)a0;
- (double)thumbnailAspectRatioForPage:(unsigned long long)a0;
- (id)viewForEvent:(id)a0;
- (void)willTimeOut;

@end
