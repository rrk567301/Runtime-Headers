@class NSURL, QLPreview, NSDictionary, DMFApplicationPolicyMonitor, NSTouchBar, NSMutableArray, CALayer, NSResponder, NSString, NSSet, QLDisplayBundleViewController, NSOperationQueue, NSArray, NSData, NSView, DMFCategoryPolicyMonitor, NSUUID;
@protocol QLDisplayBundleOwner, QLPreviewItem;

@interface QLDisplayBundle : NSObject <QLPreviewPageNavigationDataSource, QLTimeSliderDataSource, QLAccessibilityUIElementDelegate, NSFilePresenter, QLDisplayable, NSPasteboardWriting> {
    NSMutableArray *_accessoryControllers;
    int _activation;
    int _activationCount;
    BOOL _isObservingOwner;
}

@property (readonly) NSDictionary *accessibilityUIElements;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long numberOfPages;
@property unsigned long long currentPage;
@property (readonly) double defaultPageThumbnailRatio;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property BOOL playing;
@property (readonly) double duration;
@property double currentTime;
@property double seekTolerance;
@property BOOL showRemainingTime;
@property (readonly) BOOL needsVolumeControl;
@property (readonly) BOOL hidePlayControl;
@property BOOL muted;
@property float volume;
@property (readonly) BOOL autoplay;
@property (retain) NSData *bookmarkData;
@property (retain) NSURL *bookmarkURL;
@property (retain) NSUUID *operationUUID;
@property (retain) QLDisplayBundleViewController *qlViewController;
@property BOOL inMarkup;
@property (retain) DMFCategoryPolicyMonitor *screentimeCategoryPolicyMonitor;
@property (retain) DMFApplicationPolicyMonitor *screentimeApplicationPolicyMonitor;
@property long long currentScreentimePolicy;
@property (copy) id /* block */ evictionCompletionHandler;
@property (retain) QLPreview *preview;
@property (readonly) NSString *displayBundleID;
@property (readonly, retain) id<QLPreviewItem> previewItem;
@property (readonly) NSURL *URL;
@property (retain) id<QLDisplayBundleOwner> owner;
@property (readonly) BOOL isLoaded;
@property (readonly) BOOL isRemote;
@property (readonly) BOOL isWindowKey;
@property (readonly) BOOL isAppHDRSuppressed;
@property (readonly) BOOL canBeReused;
@property (readonly, nonatomic) BOOL shouldBeFilePresenter;
@property (readonly) int activationState;
@property (readonly) BOOL activated;
@property (readonly) BOOL deactivated;
@property (readonly) int displayFlags;
@property (readonly) int additionalDisplayFlags;
@property (readonly) int disabledDisplayFlags;
@property (readonly) NSString *customDisplayName;
@property (readonly) NSString *displayNameComplement;
@property (readonly) BOOL canShowTitleInBubble;
@property (readonly) BOOL canShowOpenButton;
@property (readonly) BOOL needsTimeControl;
@property (readonly) BOOL isDisplayingError;
@property (readonly) BOOL opaque;
@property (readonly) BOOL viewUsesLayer;
@property (retain) id displayState;
@property BOOL highlighted;
@property (readonly) int mode;
@property (readonly) int flavor;
@property (readonly) int backgroundStyle;
@property (readonly) unsigned long long overlayVisibilityOptions;
@property (readonly) BOOL shouldShowInlinePreviewControls;
@property (readonly) BOOL shouldShowInlinePreviewContent;
@property (readonly) BOOL keepThumbnailUnderInlinePreview;
@property (readonly) BOOL hasHorizontalScroller;
@property (nonatomic) int visibility;
@property (readonly) CALayer *contentLayer;
@property (readonly) NSView *dragContentView;
@property (readonly) BOOL shouldDrawBubbleBackground;
@property (readonly) double backingScaleFactor;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentFrame;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } opaqueFrame;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentFrameForSeamlessOpening;
@property (readonly) NSDictionary *sizingConstraints;
@property (readonly) BOOL scalable;
@property (readonly) BOOL fullyLoaded;
@property (readonly) BOOL guessedOptimalSize;
@property (readonly) BOOL delegatesControls;
@property (readonly) BOOL showCompactPlayControl;
@property (readonly) int navigationControls;
@property (readonly) BOOL hasTime;
@property (readonly) BOOL autoplay;
@property BOOL playing;
@property (readonly) double duration;
@property double seekTolerance;
@property double currentTime;
@property (readonly) BOOL playedToTheEnd;
@property (readonly) BOOL hasAudio;
@property BOOL muted;
@property float volume;
@property (readonly) BOOL hasPages;
@property (readonly) unsigned long long numberOfPages;
@property unsigned long long currentPage;
@property (readonly) int pageDisplay;
@property (readonly) BOOL showScrollerToChangePages;
@property (readonly) double defaultPageThumbnailRatio;
@property (readonly) struct CGSize { double x0; double x1; } displayPageSize;
@property (readonly) double contentOffsetForScroller;
@property (readonly) BOOL hasScrolling;
@property (readonly) double totalScroll;
@property double currentScroll;
@property (readonly) double totalHorizontalScroll;
@property double currentHorizontalScroll;
@property (readonly) BOOL hasZooming;
@property (readonly) double maxZoomFactor;
@property (readonly) double zoomFactorToFitWidth;
@property struct CGPoint { double x0; double x1; } focusPoint;
@property double zoomFactor;
@property BOOL autoZooms;
@property (readonly) BOOL supportsZoomActions;
@property (readonly) BOOL markupSupported;
@property (readonly) BOOL rotateSupported;
@property (readonly) NSView *markupControls;
@property BOOL documentDirty;
@property (readonly) NSURL *shareItemURL;
@property (readonly) BOOL trimmingSupported;
@property (readonly) BOOL visualSearchSupported;
@property (readonly) NSString *visualSearchSymbolName;
@property (readonly) NSTouchBar *touchBar;
@property BOOL tracksMouseMovements;
@property (readonly) unsigned long long observedEvents;
@property (readonly) BOOL prefersLocalEventLoop;
@property (retain) NSArray *highlightedOccurrences;
@property unsigned long long focusedOccurrenceIndex;
@property (readonly) NSURL *launchURL;
@property (readonly) NSDictionary *openingApplicationInfo;
@property (readonly) BOOL allowsAlerts;
@property (readonly) BOOL shouldPreserveAspectRatioWhenResizing;
@property (readonly) BOOL allowsNetworkAccess;
@property (readonly) BOOL allowsJavascript;
@property (readonly) BOOL allowsPlugIns;
@property (readonly) BOOL allowsFileAccess;
@property (readonly) BOOL allowsOpeningFileURLs;
@property (readonly) BOOL pathBarShouldOverlay;
@property (retain) NSArray *invalidModes;
@property (readonly, copy) NSURL *presentedItemURL;
@property (readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property (readonly, copy) NSURL *primaryPresentedItemURL;
@property (readonly) NSSet *observedPresentedItemUbiquityAttributes;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) NSView *quickLookView;
@property (readonly) CALayer *quickLookLayer;
@property (readonly) QLDisplayBundleViewController *quickLookViewController;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } quickLookFrame;
@property (readonly) NSResponder *responder;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } borderFrame;
@property (readonly) id accessibilityFocusedUIElement;
@property int inputFocusType;

+ (id)keyPathsForValuesAffectingDisplayState;
+ (id)_pathOfScreenshotWithKey:(id)a0;
+ (BOOL)errorShouldFallbackToGenericPreview:(id)a0;
+ (id)evictionError;
+ (BOOL)generateThumbnail:(struct __QLThumbnailRequest { } *)a0 withData:(id)a1 contentTypeUTI:(id)a2 previewProperties:(id)a3 properties:(id)a4;
+ (BOOL)generateThumbnail:(struct __QLThumbnailRequest { } *)a0 withURL:(id)a1 contentTypeUTI:(id)a2 previewProperties:(id)a3 properties:(id)a4;
+ (id)imageForScreenshotKey:(id)a0;
+ (id)keyPathsForValuesAffectingBorderFrame;
+ (id)keyPathsForValuesAffectingContentFrame;
+ (id)keyPathsForValuesAffectingContentFrameForSeamlessOpening;
+ (id)keyPathsForValuesAffectingHasScrolling;
+ (id)keyPathsForValuesAffectingHasTime;
+ (id)keyPathsForValuesAffectingHasZooming;
+ (id)keyPathsForValuesAffectingHidePlayControl;
+ (id)keyPathsForValuesAffectingIsWindowKey;
+ (id)keyPathsForValuesAffectingNeedsVolumeControl;
+ (id)keyPathsForValuesAffectingPlayedToTheEnd;
+ (id)newDisplayBundleViewController;
+ (id)newPreviewDocumentDisplayBundleForPreview:(id)a0;
+ (id)potentialExpectedDisplayBundleIDsForPreview:(id)a0;
+ (id)screentimeTimeoutError;

- (void)selectAll:(id)a0;
- (void)layoutSublayersOfLayer:(id)a0;
- (BOOL)hasActiveTextSelection;
- (void)cancelLoading;
- (id)actionForLayer:(id)a0 forKey:(id)a1;
- (void)cleanup;
- (void)dealloc;
- (void)discard;
- (void)copy:(id)a0;
- (id)operationName;
- (void)didOpen;
- (void)deactivate;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)activate;
- (void).cxx_destruct;
- (void)accommodatePresentedItemEvictionWithCompletionHandler:(id /* block */)a0;
- (void)performSelector:(SEL)a0 withObject:(id)a1 afterDelay:(double)a2;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)accessibilityIsIgnored;
- (double)contentsEDRStrength;
- (id)pasteboardPropertyListForType:(id)a0;
- (id)writableTypesForPasteboard:(id)a0;
- (unsigned long long)writingOptionsForType:(id)a0 pasteboard:(id)a1;
- (BOOL)isSafe;
- (void)rotate:(long long)a0;
- (void)openExternalURL:(id)a0;
- (void)refreshSynchronously;
- (BOOL)isTrimming;
- (void)editOccuredOnPage:(long long)a0;
- (void)enterMarkup;
- (void)promptSaveForCloseWithCloseHandler:(id /* block */)a0;
- (void)animateEDRToMatchViewSize:(struct CGSize { double x0; double x1; })a0 duration:(double)a1;
- (void)updateProperties:(id /* block */)a0;
- (void)didHide;
- (void)willShow;
- (void)willOpen;
- (void)didShow;
- (void)willHide;
- (BOOL)canSelectText;
- (void)windowDidChange;
- (struct CGImage { } *)copyImageRepresentationWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (BOOL)isExporting;
- (void)beginOperation:(id)a0;
- (void)didLoad;
- (void)endVisualSearch;
- (BOOL)hasDisplayFlag:(int)a0;
- (void)drawHighlights:(id)a0 inContext:(struct CGContext { } *)a1 style:(int)a2;
- (void)willEnterMarkup;
- (void)zoomWithAction:(long long)a0;
- (void)_bindedWindowWillClose:(id)a0;
- (void)_discardBoundWindowControllers;
- (void)_saveScreenshotWithKey:(id)a0;
- (void)_startObservingOwner;
- (void)_stopObservingOwner;
- (void)_unbindWindowController:(id)a0;
- (id)accessibilityAttributeValue:(id)a0 forUIElementWithIdentifier:(id)a1;
- (BOOL)accessibilityIsAttributeSettable:(id)a0 forUIElementWithIdentifier:(id)a1;
- (void)appHDRSuppressionDidChange;
- (void)backingScaleFactorDidChange;
- (void)beginTrim;
- (void)beginVisualSearch;
- (id)bundleIDForScreentime;
- (id)categoryForScreentime;
- (void)checkScreenTimePolicy;
- (void)commitTrim;
- (BOOL)contentHasHDR;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentViewBorderFrame;
- (id)customDisplayNameWithLongForm:(BOOL)a0;
- (void)customTitleUpdated;
- (void)debugPreview:(id)a0;
- (void)didDesistRemoteWithExpectedDisplayBundleID:(id)a0;
- (void)didEnterMarkup;
- (void)didFailLoadingWithError:(id)a0;
- (void)didMismatchLoadingWithHints:(id)a0 expectedDisplayBundleID:(id)a1;
- (void)didSaveEdit:(BOOL)a0 toURL:(id)a1;
- (void)disableHDRUpdates;
- (void)discardAccessoryControllers;
- (void)drawBubbleBackgroundInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 contentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)drawFlavorInBackgroundLayer:(id)a0 foregroundLayer:(id)a1 contentSize:(struct CGSize { double x0; double x1; })a2 maxSize:(struct CGSize { double x0; double x1; })a3 parts:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; }[7] *)a4;
- (BOOL)drawPage:(unsigned long long)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 context:(struct CGContext { } *)a2;
- (void)endOperation:(id)a0;
- (void)endWatchingScreenTimePolicy;
- (void)exitMarkup:(long long)a0;
- (id)findOccurrencesOfString:(id)a0 inPage:(unsigned long long)a1 withOptions:(unsigned long long)a2;
- (BOOL)forwardTextSelectionModification:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForUIElementWithIdentifier:(id)a0;
- (BOOL)generateThumbnailForPage:(unsigned long long)a0 maxSize:(struct CGSize { double x0; double x1; })a1 completionBlock:(id /* block */)a2;
- (void)getImageRepresentationWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 completion:(id /* block */)a1;
- (BOOL)hasContentAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)hasControlAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)hostedInWindowServerDidChange;
- (BOOL)inVisualSearch;
- (id)initWithPreview:(id)a0 owner:(id)a1;
- (BOOL)intelligencePreviewViewSuppliesDocument:(id)a0;
- (void)intelligenceWritePDF:(id)a0 completionBlock:(id /* block */)a1;
- (void)intelligenceWritePDF:(id)a0 ofView:(id)a1 completionBlock:(id /* block */)a2;
- (BOOL)isClickablePoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)isValidInPreviewMode:(int)a0;
- (int)loadWithHints:(id)a0;
- (struct CGPoint { double x0; double x1; })locationForEvent:(id)a0;
- (void)modeDidChange;
- (BOOL)mustHandleDoubleClickAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)mustHandleDragAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)mustHandleEvent:(id)a0;
- (BOOL)prefersLocalEventLoopForEvent:(id)a0;
- (void)presentScreenTimeLockoutWithPolicy:(long long)a0;
- (void)previewStatusDidChange;
- (id)quickLookContentView;
- (id)rectsForStringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inPage:(unsigned long long)a1;
- (void)reenableHDRUpdatesWithAnimationDuration:(double)a0;
- (void)reloadAndFallbackWithError:(id)a0;
- (void)reloadForMarkupWithCompletion:(id /* block */)a0;
- (void)revertMarkup:(id /* block */)a0;
- (void)revertTrim;
- (void)saveModeDidChange;
- (void)setFocusedOccurrenceIndex:(unsigned long long)a0 inPage:(unsigned long long)a1;
- (void)setOverlayControlOverlayFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 rollOverFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)set_QLBundleAppearance:(id)a0;
- (BOOL)shouldOpenExternalURL:(id)a0;
- (BOOL)shouldShowPagesOnLeft;
- (BOOL)showAccessoryController:(id)a0;
- (void)showOverlayControls:(BOOL)a0 withOverlayController:(id)a1;
- (void)sizingUpdated;
- (void)startWatchingScreenTimePolicy;
- (id)stringForPage:(unsigned long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })stringRangeForPage:(unsigned long long)a0;
- (void)teardownMarkup:(long long)a0 needsSave:(BOOL *)a1;
- (double)thumbnailAspectRatioForPage:(unsigned long long)a0;
- (void)updatePropertiesForSize:(struct CGSize { double x0; double x1; })a0 previewMode:(int)a1 completion:(id /* block */)a2;
- (void)updateURLFromBookmark;
- (BOOL)validateURLSecureAccess:(id)a0;
- (id)viewForEvent:(id)a0;
- (id)viewForLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)willTimeOut;
- (void)windowKeyDidChange;

@end
