@class _CSMultiQuery, CSUserQueryContext, NSArray, CSSuggestionsRanker, NSString, CSQueryRankingConfiguration, NSDictionary, NSObject, NSMutableArray, _CSContactSearch;
@protocol OS_dispatch_semaphore;

@interface CSUserQuery : CSSearchQuery {
    CSUserQueryContext *_clientContext;
    CSQueryRankingConfiguration *_rankingConfig;
    CSSuggestionsRanker *_suggestionsRanker;
    NSDictionary *_parserOptions;
    NSString *_searchString;
    NSMutableArray *_nlpSuggestions;
    NSMutableArray *_templateSuggestions;
    NSMutableArray *_suggestions;
    NSMutableArray *_completions;
    NSMutableArray *_instantAnswers;
    _CSContactSearch *_contactSearch;
    _CSMultiQuery *_contactCountingQuerySearchFrom;
    _CSMultiQuery *_contactCountingQuerySearchTo;
    long long _foundSuggestionCount;
    long long _tokenCount;
    BOOL _queryRewritten;
    BOOL _queryIsTopHit;
    long long _currentTokenKind;
    long long _currentTokenScope;
}

@property (copy) id /* block */ foundInstantAnswersHandler;
@property (copy) id /* block */ foundInstantAnswersHandlerOld;
@property (copy) id /* block */ attributedQueryHandler;
@property (copy, nonatomic) NSArray *contactSearchResults;
@property (readonly, nonatomic) NSObject<OS_dispatch_semaphore> *contactSearchSemaphore;
@property (readonly, nonatomic) unsigned long long contactSearchSemaphoreWaitTime;
@property (readonly) long long foundSuggestionCount;
@property (copy) id /* block */ foundSuggestionsHandler;

+ (void)preheat:(id)a0;
+ (id)dedupSuggestions:(id)a0 queryContextScopeIsToPerson:(BOOL)a1 seenContactInfoToSuggestion:(id)a2;
+ (id)defaultParseOptionsForClientContext:(id)a0;
+ (void)prepareLocalResources;
+ (void)sortSearchableItems:(id)a0;
+ (void)prepareProtectionClasses:(id)a0;
+ (id)computeEmailAddressTopicalityScore:(id)a0 inputEmailAddress:(id)a1 queryUnigrams:(id)a2 locale:(id)a3;
+ (id)dedupedDateSuggestions:(id)a0;
+ (id)dedupedNextTokenSuggestions:(id)a0 context:(id)a1;
+ (id)collectUnigrams:(id)a0 locale:(id)a1;
+ (id)normalizeAndTrimContacts:(id)a0 maxCount:(long long)a1;
+ (id)parseSearchString:(id)a0 parseOptions:(id)a1 userQueryOptions:(unsigned int)a2;
+ (id)advancedComponentsWithSearchString:(id)a0 userQueryString:(id)a1 parseResult:(id)a2 parseOptions:(id)a3 userQueryOptions:(unsigned int)a4;
+ (id)emailSpecialChars;
+ (id)parseResultWithSearchString:(id)a0 parseOptions:(id)a1 queryContext:(id)a2 isZKW:(BOOL)a3;
+ (void)filteredTemplateSuggestions:(id)a0 nlpSuggestions:(id)a1;
+ (double)computeTopicalityScoreForName:(id)a0 inputName:(id)a1 numTokensInName:(unsigned long long)a2 isContactsSuggestion:(BOOL)a3 queryUnigrams:(id)a4 isFirstName:(BOOL)a5 locale:(id)a6;
+ (id)generateFilterQueriesBasedOnPreviousSuggestions:(id)a0;
+ (id)removeSuggestionsAndTrimChars:(id)a0;
+ (void)prepare;
+ (double)computeScoreForNameUnigrams:(id)a0 queryUnigrams:(id)a1 queryString:(id)a2 locale:(id)a3 isContactsSuggestion:(BOOL)a4;
+ (BOOL)skipTextSemanticSearchForSearchString:(id)a0 queryContext:(id)a1 skipReason:(id *)a2;
+ (id)mailResources;
+ (id)queryParserResourcesInfo;
+ (id)queryContextWithUserQueryString:(id)a0 searchString:(id)a1 clientContext:(id)a2;
+ (id)orderedSuggestions:(id)a0 options:(id)a1;
+ (void)updateWithTemplateSuggestions:(id)a0 searchString:(id)a1 currentSuggestion:(id)a2;
+ (id)dedupedSuggestions:(id)a0 queryContextScopeIsToPerson:(BOOL)a1 options:(id)a2;
+ (id)dedupedSuggestions:(id)a0 options:(id)a1;
+ (id)trimCharactersInString:(id)a0;
+ (id)trimSuggestions:(id)a0 options:(id)a1 peopleSelectedScope:(long long)a2 isShortQuery:(BOOL)a3;
+ (void)computeRankingScoreForSuggestions:(id)a0 queryString:(id)a1 locale:(id)a2;
+ (float)_computeThresholdWithScale:(float)a0 bias:(float)a1 cutoffOffset:(float)a2;
+ (id)computeRankingScoreForSuggestion:(id)a0 queryString:(id)a1 locale:(id)a2;
+ (id)orderedSuggestionsForPhotos:(id)a0 options:(id)a1;
+ (id)suggestionsByDetectingEmailIntentForPeopleSuggestions:(id)a0;

- (void)setFilterQueries:(id)a0;
- (id)initWithQueryString:(id)a0 queryContext:(id)a1;
- (void)userEngagedWithItem:(id)a0 visibleItems:(id)a1 userInteractionType:(long long)a2;
- (void)handleFoundItems:(id)a0;
- (void)userEngagedWithSuggestion:(id)a0 visibleSuggestions:(id)a1 userInteractionType:(long long)a2;
- (void)handleFoundCompletions:(id)a0;
- (id)foundSuggestions;
- (void)handleFoundInstantAnswers:(id)a0;
- (id)foundCompletions;
- (void)userEngagedWithResult:(id)a0 interactionType:(int)a1;
- (void)processInstantAnswersWithFoundItems:(id)a0;
- (void)startContactSearchIfNeededWithSearchQuery:(id)a0;
- (void)start;
- (void)handleCompletion:(id)a0;
- (void)willStartQuery;
- (void)prepareSearch;
- (id)queryContext;
- (id)processToContacts:(id)a0 resultsToMultiQuery:(id)a1 contactsTo:(id)a2 processedContacts:(id)a3;
- (void)handleFoundSuggestions:(id)a0;
- (id)initWithQueryString:(id)a0 context:(id)a1;
- (void)handleQueryRewritten;
- (void)cancel;
- (id)keyboardLanguage;
- (BOOL)isTopHitQuery;
- (BOOL)queryRewritten;
- (void)handleSuggestions;
- (id)queryStringWithQueryContext:(id)a0 searchString:(id)a1 options:(id)a2;
- (void)updateRecentSuggestions:(id)a0;
- (void)handleInstantAnswers;
- (id)foundTemplateSuggestions;
- (id)processFromContacts:(id)a0 resultsFromMultiQuery:(id)a1 contactsFrom:(id)a2 processedContacts:(id)a3;
- (void)userEngagedWithResult:(id)a0 visibleResults:(id)a1 interactionType:(int)a2;
- (void)handleParseResult:(id)a0;
- (id)peopleSuggestionsWithContactSearchResults:(id)a0;
- (void)filterContactPeopleSuggestions:(id)a0 cachedSuggestionsEmailToScope:(id)a1 completionHandler:(id /* block */)a2;
- (void)handleFoundInstantAnswer:(id)a0;
- (void)handleFoundTemplateSuggestions:(id)a0;
- (id)initWithUserQueryString:(id)a0 queryContext:(id)a1;
- (id)foundNLPSuggestions;
- (id)foundInstantAnswers;
- (id)initWithUserQueryString:(id)a0 userQueryContext:(id)a1;
- (id)initWithUserAttributedQueryString:(id)a0 userQueryContext:(id)a1;
- (id)filterQueries;
- (id)clientContext;
- (void)startContactSearchWithUserQuery:(id)a0 maxCount:(long long)a1;
- (id)initWithSearchString:(id)a0 keyboardLanguage:(id)a1 attributes:(id)a2;
- (void)handleFoundNLPSuggestions:(id)a0;
- (void)userEngagedWithSuggestion:(id)a0 visibleSuggestions:(id)a1 interactionType:(int)a2;
- (void).cxx_destruct;
- (id)initWithUserString:(id)a0 queryContext:(id)a1;

@end
