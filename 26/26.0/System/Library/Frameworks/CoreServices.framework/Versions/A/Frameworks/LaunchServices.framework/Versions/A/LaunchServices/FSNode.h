@class NSArray, NSString, NSURL;

@interface FSNode : NSObject <NSCopying, NSSecureCoding, FSNodePropertyProviding> {
    NSURL *_url;
    unsigned long long _cacheExpiration;
    unsigned char _isDirectory : 2;
    unsigned char _hasReferringAliasNode : 1;
    unsigned char _canUseFileCache : 1;
    unsigned char _isInitialized : 1;
}

@property (class, readonly) NSArray *bookmarkDataPropertiesToInclude;
@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly, getter=isInternetLocatorFile) BOOL internetLocatorFile;
@property (readonly, nonatomic) BOOL canIssueIO;
@property (readonly, nonatomic, getter=isDirectory) BOOL directory;
@property (readonly, nonatomic, getter=isBusyDirectory) BOOL busyDirectory;
@property (readonly, nonatomic, getter=isExecutableModeFile) BOOL executableModeFile;
@property (readonly, nonatomic, getter=isExecutable) BOOL executable;
@property (readonly, nonatomic, getter=isResolvable) BOOL resolvable;
@property (readonly, nonatomic, getter=isSymbolicLink) BOOL symbolicLink;
@property (readonly, nonatomic, getter=isAliasFile) BOOL aliasFile;
@property (readonly, nonatomic, getter=isSideFault) BOOL sideFault;
@property (readonly, nonatomic) BOOL hasPackageBit;
@property (readonly, nonatomic, getter=isRegularFile) BOOL regularFile;
@property (readonly, nonatomic, getter=isHidden) BOOL hidden;
@property (readonly, nonatomic) BOOL hasHiddenExtension;
@property (readonly, nonatomic, getter=isDataContainer) BOOL dataContainer;
@property (readonly, nonatomic, getter=isVolume) BOOL volume;
@property (readonly, nonatomic, getter=isMountTrigger) BOOL mountTrigger;
@property (readonly, nonatomic, getter=isSecuredSystemContent) BOOL securedSystemContent;
@property (readonly, nonatomic, getter=isOnDiskImage) BOOL onDiskImage;
@property (readonly, nonatomic, getter=isOnLocalVolume) BOOL onLocalVolume;
@property (readonly, nonatomic, getter=isOnTimeMachineVolume) BOOL onTimeMachineVolume;
@property (readonly, getter=isInTrash) BOOL inTrash;
@property (readonly, getter=isTrashFolder) BOOL trashFolder;
@property (readonly, getter=isAVCHDCollection) BOOL AVCHDCollection;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)canWriteURL:(id)a0 fromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (BOOL)getName:(id *)a0 fileIdentifier:(unsigned long long *)a1 creationDate:(double *)a2 forBookmarkData:(id)a3 error:(id *)a4;
+ (BOOL)canWriteURL:(id)a0 withAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (BOOL)canReadMetadataOfURL:(id)a0 fromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (BOOL)getCreationDate:(double *)a0 forBookmarkData:(id)a1 error:(id *)a2;
+ (id)_resolvedURLFromAliasFile:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
+ (BOOL)canAccessURL:(id)a0 withAuditToken:(const struct { unsigned int x0[8]; } *)a1 operation:(const char *)a2;
+ (void)warnAboutFSRefUsageWithReason:(unsigned char)a0;
+ (id)pathForBookmarkData:(id)a0 error:(id *)a1;
+ (BOOL)canReadURL:(id)a0 withAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (BOOL)shimFSRef:(const struct FSRef { unsigned char x0[80]; } *)a0 reason:(unsigned char)a1 error:(id *)a2 block:(id /* block */)a3;
+ (id)relativePathToFullPath:(id)a0 fromBasePath:(id)a1;
+ (BOOL)isBookmarkDataFull:(id)a0;
+ (BOOL)getFSRef:(struct FSRef { unsigned char x0[80]; } *)a0 fromURL:(id)a1 reason:(unsigned char)a2 error:(id *)a3;
+ (BOOL)looksLikeTrashFolderName:(id)a0;
+ (id)rootVolumeNode;
+ (void *)openResourceFilesMap;
+ (id)validURLSchemesForInternetLocatorFileExtension:(id)a0;
+ (BOOL)getFileIdentifier:(unsigned long long *)a0 forBookmarkData:(id)a1 error:(id *)a2;
+ (BOOL)isBookmarkDataInTrash:(id)a0;
+ (id)_resolvedNodeFromAliasFile:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
+ (BOOL)getFileIdentifier:(unsigned long long *)a0 forBookmarkProperties:(id)a1;
+ (BOOL)canReadMetadataOfURL:(id)a0 withAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (BOOL)getVolumeIdentifier:(unsigned long long *)a0 forBookmarkData:(id)a1 error:(id *)a2;
+ (BOOL)getFileSystemRepresentation:(char[1024])a0 forBookmarkData:(id)a1;
+ (BOOL)canReadURL:(id)a0 fromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a1;
+ (BOOL)canAccessURL:(id)a0 fromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a1 operation:(const char *)a2;
+ (id)prebootVolumeNode;
+ (unsigned char)compareBookmarkData:(id)a0 toBookmarkData:(id)a1;
+ (void)warnAboutResourceForkUsageWithReason:(unsigned char)a0;
+ (BOOL)shimFSRefs:(const struct FSRef { unsigned char x0[80]; } *)a0 count:(long long)a1 reason:(unsigned char)a2 error:(id *)a3 block:(id /* block */)a4;
+ (id)nameForBookmarkData:(id)a0 error:(id *)a1;

- (void)removeCachedResourceValueForKey:(id)a0;
- (id)bookmarkDataRelativeToNode:(id)a0 error:(id *)a1;
- (id)resolveDataForkInternetLocatorFile;
- (id)URL;
- (BOOL)isInMailbox;
- (id)diskImageURLWithFlags:(unsigned int)a0 error:(id *)a1;
- (id)initWithAppleEventDescriptor:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
- (id)initWithPath:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
- (id)initByResolvingBookmarkData:(id)a0 options:(unsigned long long)a1 relativeToNode:(id)a2 bookmarkDataIsStale:(BOOL *)a3 error:(id *)a4;
- (BOOL)getDeviceNumber:(int *)a0 error:(id *)a1;
- (id)resolvedNodeWithFlags:(unsigned int)a0 error:(id *)a1;
- (id)initWithFileSystemRepresentation:(const char *)a0 flags:(unsigned int)a1 error:(id *)a2;
- (BOOL)getInodeNumber:(unsigned long long *)a0 error:(id *)a1;
- (BOOL)writeInternetLocatorFileWithURL:(id)a0 dataWritingOptions:(unsigned long long)a1 error:(id *)a2;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (BOOL)getIsDirectory_NoIO:(BOOL *)a0;
- (BOOL)getTemporaryResourceValue:(id *)a0 forKey:(id)a1;
- (const struct _FSInternetLocatorTypeInfo { id x0; id x1; unsigned int x2; } *)internetLocatorTypeInfoForExtension:(id)a0 fileType:(unsigned int)a1;
- (BOOL)getHFSType:(unsigned int *)a0 creator:(unsigned int *)a1 error:(id *)a2;
- (id)initWithURL:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
- (BOOL)getDeviceRefNum:(unsigned long long *)a0 error:(id *)a1;
- (id)pathWithError:(id *)a0;
- (id)initWithAEDesc:(const struct AEDesc { unsigned int x0; struct OpaqueAEDataStorageType **x1; } *)a0 flags:(unsigned int)a1 error:(id *)a2;
- (struct __CFBundle { } *)copyCFBundleWithError:(id *)a0;
- (void)clearURLPropertyCacheIfStale;
- (void)setTemporaryResourceValue:(id)a0 forKey:(id)a1;
- (BOOL)childNodeWithRelativePathExists:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (BOOL)getLength:(unsigned long long *)a0 error:(id *)a1;
- (struct OpaqueMappedResourceFileRef { } *)openResourceFileForReadingWithReason:(unsigned char)a0 error:(id *)a1;
- (void)setReferringAliasNode:(id)a0;
- (BOOL)getHasCarbon:(BOOL *)a0 andCFMResources:(BOOL *)a1 propertyList:(id *)a2 fromResourceFile:(struct OpaqueMappedResourceFileRef { } *)a3 reason:(unsigned char)a4 error:(id *)a5;
- (BOOL)getFileSystemRepresentation:(char[1024])a0 error:(id *)a1;
- (BOOL)getContentModificationDate:(double *)a0 error:(id *)a1;
- (id)initWithConfigurationString:(int)a0 flags:(unsigned int)a1 error:(id *)a2;
- (id)resolveWindowsURLFileToURL;
- (id)extendedAttributeWithName:(id)a0 options:(int)a1 error:(id *)a2;
- (BOOL)getFinderInfo:(union { unsigned char x0[32]; struct { struct FileInfo { unsigned int x0; unsigned int x1; unsigned short x2; struct Point { short x0; short x1; } x3; unsigned short x4; } x0; struct ExtendedFileInfo { short x0[4]; unsigned short x1; short x2; int x3; } x1; } x1; struct { struct FolderInfo { struct Rect { short x0; short x1; short x2; short x3; } x0; unsigned short x1; struct Point { short x0; short x1; } x2; unsigned short x3; } x0; struct ExtendedFolderInfo { struct Point { short x0; short x1; } x0; int x1; unsigned short x2; short x3; int x4; } x1; } x2; } *)a0 error:(id *)a1;
- (BOOL)checkResourceIsReachableAndReturnError:(id *)a0;
- (BOOL)isInTemporaryDirectory;
- (BOOL)getResourceValue:(id *)a0 forKey:(id)a1 options:(unsigned char)a2 error:(id *)a3;
- (BOOL)canWriteFromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (id)resolveInternetLocatorFileToNetworkVolumeURL;
- (id)initByResolvingBookmarkData:(id)a0 relativeToNode:(id)a1 bookmarkDataIsStale:(BOOL *)a2 error:(id *)a3;
- (BOOL)setFinderInfo:(const union { unsigned char x0[32]; struct { struct FileInfo { unsigned int x0; unsigned int x1; unsigned short x2; struct Point { short x0; short x1; } x3; unsigned short x4; } x0; struct ExtendedFileInfo { short x0[4]; unsigned short x1; short x2; int x3; } x1; } x1; struct { struct FolderInfo { struct Rect { short x0; short x1; short x2; short x3; } x0; unsigned short x1; struct Point { short x0; short x1; } x2; unsigned short x3; } x0; struct ExtendedFolderInfo { struct Point { short x0; short x1; } x0; int x1; unsigned short x2; short x3; int x4; } x1; } x2; } *)a0 error:(id *)a1;
- (BOOL)getCreationDate:(double *)a0 error:(id *)a1;
- (const struct _FSInternetLocatorTypeInfo { id x0; id x1; unsigned int x2; } *)internetLocatorTypeInfoForScheme:(id)a0;
- (id)bookmarkDataWithOptions:(unsigned long long)a0 relativeToNode:(id)a1 error:(id *)a2;
- (BOOL)canReadMetadataFromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (BOOL)hasPackageBit;
- (BOOL)canReadWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (id)temporaryDirectoryNodeWithFlags:(unsigned int)a0 error:(id *)a1;
- (BOOL)getVolumeIdentifier:(unsigned long long *)a0 error:(id *)a1;
- (id)initWithFSRef:(const struct FSRef { unsigned char x0[80]; } *)a0 reason:(unsigned char)a1 flags:(unsigned int)a2 error:(id *)a3;
- (BOOL)getCachedResourceValueIfPresent:(id *)a0 forKey:(id)a1 error:(id *)a2;
- (id)sideFaultResourceValuesWithError:(id *)a0;
- (BOOL)getOwnerUID:(unsigned int *)a0 error:(id *)a1;
- (BOOL)setExtendedAttribute:(id)a0 name:(id)a1 options:(int)a2 error:(id *)a3;
- (BOOL)getFileIdentifier:(unsigned long long *)a0 error:(id *)a1;
- (BOOL)canReadMetadataWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (id)canonicalPathWithError:(id *)a0;
- (id)volumeNodeWithFlags:(unsigned int)a0 error:(id *)a1;
- (id)appleEventDescriptorWithOptions:(unsigned long long)a0 error:(id *)a1;
- (BOOL)canReadFromSandboxWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (id)initWithDirectory:(unsigned long long)a0 inDomain:(unsigned long long)a1 lastPathComponent:(id)a2 createIntermediateDirectories:(BOOL)a3 flags:(unsigned int)a4 error:(id *)a5;
- (id)initWithCoder:(id)a0;
- (void)closeResourceFile:(struct OpaqueMappedResourceFileRef { } *)a0 reason:(unsigned char)a1;
- (BOOL)getFSRef:(struct FSRef { unsigned char x0[80]; } *)a0 reason:(unsigned char)a1 error:(id *)a2;
- (BOOL)hasHiddenExtension;
- (id)childNodeWithRelativePath:(id)a0 flags:(unsigned int)a1 error:(id *)a2;
- (BOOL)canWriteWithAuditToken:(const struct { unsigned int x0[8]; } *)a0;
- (id)nameWithError:(id *)a0;
- (id)bundleIdentifierWithContext:(struct LSContext { id x0; } *)a0 error:(id *)a1;
- (id)extensionWithError:(id *)a0;
- (BOOL)setResourceValue:(id)a0 forKey:(id)a1 options:(unsigned char)a2 error:(id *)a3;
- (id)canonical:(BOOL)a0 pathWithError:(id *)a1;
- (void)prepareForReuse;
- (id)bundleIdentifierWithError:(id *)a0;
- (BOOL)isEqual:(id)a0;
- (BOOL)getWriterBundleIdentifier:(id *)a0 error:(id *)a1;
- (id)referringAliasNode;
- (void).cxx_destruct;
- (id)trashNodeWithError:(id *)a0;
- (id)redactedDescription;
- (id)bundleInfoDictionaryWithError:(id *)a0;
- (id)URLFromInternetLocatorFileWithError:(id *)a0;

@end
