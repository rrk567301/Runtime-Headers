@class NSCell, NSArray, NSString, NSMutableArray, NSColor;
@protocol NSMatrixDelegate;

@interface NSMatrix : NSControl <NSUserInterfaceValidations, NSViewToolTipOwner> {
    id _reserved2;
    SEL _reserved3;
    SEL _doubleAction;
    SEL _errorAction;
    id _selectedCell;
    long long _selectedRow;
    long long _selectedCol;
    id _private;
    long long _numRows;
    struct CGSize { double width; double height; } _cellSize;
    struct CGSize { double width; double height; } _intercell;
    id _delegate;
    long long _numCols;
    id _font;
    id _cellClass;
    NSColor *_backgroundColor;
    NSMutableArray *_cells;
    struct __MFlags { unsigned char reservedMatrix : 2; unsigned char cellSizeNeedsAutorecalc : 1; unsigned char autorecalculatesCellSize : 1; unsigned char drawingContextMenuHighlightOnAllSelectedRows : 1; unsigned char drawingContextMenuHighlight : 1; unsigned char browserOptimizationsEnabled : 1; unsigned char reservedMatrix3 : 1; unsigned char tmpAllowNonVisibleCellsToBecomeFirstResponder : 1; unsigned char reservedMatrix2 : 3; unsigned char checkForSimpleTrackingMode : 1; unsigned char useSimpleTrackingMode : 1; unsigned char refusesFirstResponder : 1; unsigned char dontScroll : 1; unsigned char changingSelectionWithKeyboard : 1; unsigned char onlySetKeyCell : 1; unsigned char currentlySelectingCell : 1; unsigned char allowsIncrementalSearching : 1; unsigned char tabKeyTraversesCellsExplicitlySet : 1; unsigned char tabKeyTraversesCells : 1; unsigned char drawingAncestor : 1; unsigned char autosizeCells : 1; unsigned char drawsBackground : 1; unsigned char drawsCellBackground : 1; unsigned char selectionByRect : 1; unsigned char autoscroll : 1; unsigned char allowEmptySel : 1; unsigned char listMode : 1; unsigned char radioMode : 1; unsigned char highlightMode : 1; } _mFlags;
    id _protoCell;
}

@property Class cellClass;
@property (copy) NSCell *prototype;
@property unsigned long long mode;
@property BOOL allowsEmptySelection;
@property (readonly, copy) NSArray *cells;
@property (readonly) NSCell *selectedCell;
@property (readonly, copy) NSArray *selectedCells;
@property (readonly) long long selectedRow;
@property (readonly) long long selectedColumn;
@property (getter=isSelectionByRect) BOOL selectionByRect;
@property struct CGSize { double x0; double x1; } cellSize;
@property struct CGSize { double x0; double x1; } intercellSpacing;
@property (copy) NSColor *backgroundColor;
@property (copy) NSColor *cellBackgroundColor;
@property BOOL drawsCellBackground;
@property BOOL drawsBackground;
@property (readonly) long long numberOfRows;
@property (readonly) long long numberOfColumns;
@property SEL doubleAction;
@property BOOL autosizesCells;
@property (getter=isAutoscroll) BOOL autoscroll;
@property (readonly) long long mouseDownFlags;
@property (weak) id<NSMatrixDelegate> delegate;
@property BOOL autorecalculatesCellSize;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (Class)_classToCheckForRequiresConstraintBasedLayout;
+ (BOOL)_controlClassSupportsNoCell;
+ (id)_dropHighlightColor;
+ (BOOL)accessibilityIsSingleCelled;
+ (BOOL)isCompatibleWithResponsiveScrolling;

- (BOOL)_isRTL;
- (void)textDidChange:(id)a0;
- (void)selectAll:(id)a0;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)validateUserInterfaceItem:(id)a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)mouseDown:(id)a0;
- (void)becomeKeyWindow;
- (BOOL)isOpaque;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (id)font;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)keyDown:(id)a0;
- (BOOL)resignFirstResponder;
- (void)removeColumn:(long long)a0;
- (void)encodeWithCoder:(id)a0;
- (void)setEnabled:(BOOL)a0;
- (void)setFont:(id)a0;
- (BOOL)isFlipped;
- (BOOL)becomeFirstResponder;
- (void)updateTrackingAreas;
- (id)initWithCoder:(id)a0;
- (id)menuForEvent:(id)a0;
- (void)updateConstraints;
- (void)sizeToFit;
- (void).cxx_destruct;
- (void)sortUsingFunction:(void /* function */ *)a0 context:(void *)a1;
- (void)sortUsingSelector:(SEL)a0;
- (void)moveUp:(id)a0;
- (void)resignKeyWindow;
- (void)setErrorAction:(SEL)a0;
- (id)toolTipForCell:(id)a0;
- (id)_recursiveFindDefaultButtonCell;
- (void)accessibilitySetFocus:(id)a0 forChild:(id)a1;
- (void)drawCellInside:(id)a0;
- (id)keyCell;
- (long long)__keyCol;
- (long long)__keyRow;
- (long long)_acceptableRowAboveKeyInVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (long long)_acceptableRowAboveRow:(long long)a0 minRow:(long long)a1;
- (long long)_acceptableRowAboveRow:(long long)a0 tryBelowPoint:(struct CGPoint { double x0; double x1; })a1;
- (long long)_acceptableRowBelowKeyInVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (long long)_acceptableRowBelowRow:(long long)a0 maxRow:(long long)a1;
- (long long)_acceptableRowBelowRow:(long long)a0 tryAbovePoint:(struct CGPoint { double x0; double x1; })a1;
- (id)_accessibilityCorrectlyParentedCells:(id)a0;
- (unsigned long long)_accessibilityIndexOfChildInNavigationOrder:(id)a0;
- (BOOL)_accessibilityIsRadioGroup;
- (void)_accessibilityLoadBrowserCellsAtRow:(long long)a0 count:(long long)a1;
- (void)_allocAndInitPrivateIvars;
- (id)_alternateDown:(id)a0 :(id)a1 :(long long)a2 :(long long)a3;
- (void)_autorecalculateCellSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundsRectOccupiedByCells;
- (id)_browserColumnController;
- (BOOL)_browserOptimizationsEnabled;
- (id)_cellForRow:(long long)a0 browser:(id)a1 browserColumn:(long long)a2;
- (long long)_cellFurthestFrom:(long long)a0 andCol:(long long)a1;
- (void)_changeSelectionWithEvent:(id)a0;
- (BOOL)_changingSelectionWithKeyboard;
- (void)_checkForSimpleTrackingMode;
- (void)_clearKeyCell;
- (void)_clearMouseTrackingForCell:(id)a0;
- (BOOL)_clearSelectedCell;
- (void)_computeAllRevealovers;
- (BOOL)_containedInSingleColumnClipView;
- (void)_deselectAllExcept:(long long)a0 :(long long)a1 andDraw:(BOOL)a2;
- (void)_doResetOfCursorRects:(BOOL)a0 revealovers:(BOOL)a1;
- (void)_drawCellAt:(long long)a0 col:(long long)a1 insideOnly:(BOOL)a2;
- (void)_drawCellAtRow:(long long)a0 column:(long long)a1 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_finishedMakingConnections;
- (id)_firstHighlightedCell;
- (long long)_firstSelectableRow;
- (void)_getBrowser:(id *)a0 browserColumn:(long long *)a1;
- (id)_getDrawingRow:(long long *)a0 andCol:(long long *)a1;
- (BOOL)_getRow:(long long *)a0 andCol:(long long *)a1 ofCell:(id)a2 atRect:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a3;
- (void)_getRow:(long long *)a0 column:(long long *)a1 nearPoint:(struct CGPoint { double x0; double x1; })a2;
- (void)_getRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a0 andColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1 intersectingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_getVisibleRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a0 columnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (BOOL)_hasEditableCell;
- (void)_highlightCell:(BOOL)a0 atRow:(long long)a1 column:(long long)a2 andDraw:(BOOL)a3;
- (id)_initialize:(long long)a0 :(long long)a1 :(long long)a2;
- (BOOL)_isAccessibilityContentNavigatorSectionCandidate;
- (BOOL)_isAccessibilityTopLevelNavigatorSectionCandidate;
- (BOOL)_keyEquivalentModifierMask:(unsigned long long)a0 matchesModifierFlags:(unsigned long long)a1;
- (void)_keyboardModifyRow:(long long)a0 column:(long long)a1 withEvent:(id)a2;
- (BOOL)_loopHit:(struct CGPoint { double x0; double x1; })a0 row:(long long *)a1 col:(long long *)a2;
- (void)_maintainCell;
- (void)_makeDownCellKey;
- (id)_makeEditable:(id)a0 :(long long)a1 :(long long)a2 :(id)a3;
- (void)_makeLeftCellKey;
- (BOOL)_makeNextCellKey;
- (void)_makeNextCellOrViewKey;
- (BOOL)_makePreviousCellKey;
- (void)_makePreviousCellOrViewKey;
- (void)_makeRightCellKey;
- (void)_makeUpCellKey;
- (void)_menuDidEndTracking:(id)a0;
- (void)_mouseDownListmode:(id)a0;
- (id)_mouseDownNonListmode:(id)a0;
- (id)_mouseDownSimpleTrackingMode:(id)a0;
- (BOOL)_mouseHit:(struct CGPoint { double x0; double x1; })a0 row:(long long *)a1 col:(long long *)a2;
- (void)_mouseLoop:(id)a0 :(id)a1 :(long long)a2 :(long long)a3 :(struct _SelectionAnchor { long long x0; long long x1; long long x2; } *)a4 :(BOOL)a5;
- (void)_moveDownWithEvent:(id)a0;
- (void)_moveLeftWithEvent:(id)a0;
- (void)_moveRightWithEvent:(id)a0;
- (void)_moveUpWithEvent:(id)a0;
- (void)_needsDisplayfromColumn:(long long)a0;
- (void)_needsDisplayfromRow:(long long)a0;
- (id)_normalListmodeDown:(id)a0 :(id)a1 :(long long)a2 :(long long)a3;
- (void)_pageDownWithEvent:(id)a0;
- (void)_pageUpWithEvent:(id)a0;
- (BOOL)_performDragFromMouseDown:(id)a0;
- (BOOL)_performKeyEquivalent:(id)a0 conditionally:(BOOL)a1;
- (BOOL)_radioHit:(struct CGPoint { double x0; double x1; })a0 row:(long long *)a1 col:(long long *)a2;
- (void)_recursiveWindowDidEnableToolTipCreationAndDisplay;
- (void)_removeAllCellMouseTracking;
- (void)_resetBrowserClickedRowAndColumn;
- (void)_rightMouseUpOrDown:(id)a0;
- (id)_scrollRowToCenter:(long long)a0;
- (void)_selectAllNoRecurse:(id)a0;
- (void)_selectCellIfRequired;
- (BOOL)_selectFirstEnabledCell;
- (void)_selectKeyCellAtRow:(long long)a0 column:(long long)a1;
- (BOOL)_selectNextCellKeyStartingAtRow:(long long)a0 column:(long long)a1;
- (id)_selectRange:(struct _SelectionAnchor { long long x0; long long x1; long long x2; } *)a0 oldArea:(struct _SelectionAnchor { long long x0; long long x1; long long x2; } *)a1 lit:(BOOL)a2 includeX:(BOOL)a3;
- (id)_selectRectRange:(struct _SelectionAnchor { long long x0; long long x1; long long x2; } *)a0 :(BOOL)a1;
- (id)_selectRowRange:(struct _SelectionAnchor { long long x0; long long x1; long long x2; } *)a0 :(BOOL)a1;
- (id)_selectTextOfCell:(id)a0;
- (void)_sendDoubleActionToCellAt:(struct CGPoint { double x0; double x1; })a0;
- (void)_setAllowsNonVisibleCellsToBecomeFirstResponder:(BOOL)a0;
- (void)_setBrowserOptimizationsEnabled:(BOOL)a0;
- (void)_setKeyCellAtRow:(long long)a0 column:(long long)a1;
- (void)_setKeyCellFromBottom;
- (void)_setKeyCellFromTop;
- (void)_setKeyCellNeedsDisplay;
- (void)_setMouseTrackingForCell:(id)a0;
- (void)_setNeedsDisplayForSelectedCells;
- (void)_setNeedsDisplayInRow:(long long)a0 column:(long long)a1;
- (void)_setPrototypeNoCopy:(id)a0;
- (void)_setSelectedCell:(id)a0;
- (void)_setSelectedCell:(id)a0 atRow:(long long)a1 column:(long long)a2;
- (id)_setSelectionRange:(struct _SelectionAnchor { long long x0; long long x1; long long x2; } *)a0 :(BOOL)a1;
- (void)_setUseSimpleTrackingMode:(BOOL)a0;
- (void)_setWindow:(id)a0;
- (id)_shiftDown:(id)a0 :(id)a1 :(long long)a2 :(long long)a3;
- (BOOL)_shouldDelegateTargetActionForSelector:(SEL)a0;
- (BOOL)_shouldDrawContextMenuHighlightForRow:(long long)a0 column:(long long)a1;
- (BOOL)_shouldShowFirstResponderAtRow:(long long)a0 column:(long long)a1 ignoringWindowKeyState:(BOOL)a2;
- (BOOL)_shouldShowFirstResponderForCell:(id)a0;
- (unsigned long long)_subclassOverrideFlags;
- (void)_toolTipManagerWillRecomputeToolTipsByRemoving:(BOOL)a0 adding:(BOOL)a1;
- (void)_updateCellImage:(id)a0;
- (BOOL)_useSimpleTrackingMode;
- (void)_windowChangedKeyState;
- (BOOL)acceptsFirstMouse:(id)a0;
- (BOOL)acceptsFirstResponder;
- (unsigned long long)accessibilityArrayAttributeCount:(id)a0;
- (id)accessibilityArrayAttributeValues:(id)a0 index:(unsigned long long)a1 maxCount:(unsigned long long)a2;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityCurrentEditorForCell:(id)a0;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHelpStringForChild:(id)a0;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (unsigned long long)accessibilityIndexOfChild:(id)a0;
- (BOOL)accessibilityIsChildFocusable:(id)a0;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsOrientationAttributeSettable;
- (BOOL)accessibilityIsSelectedChildrenAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (BOOL)accessibilityIsVisibleChildrenAttributeSettable;
- (id)accessibilityOrientationAttribute;
- (id)accessibilityPositionOfChild:(id)a0;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySelectedChildrenAttribute;
- (void)accessibilitySetSelectedChildrenAttribute:(id)a0;
- (id)accessibilitySizeOfChild:(id)a0;
- (id)accessibilityValueAttribute;
- (id)accessibilityVisibleChildrenAttribute;
- (id)accessiblityChildCells;
- (void)addColumn;
- (void)addColumnWithCells:(id)a0;
- (void)addRow;
- (void)addRowWithCells:(id)a0;
- (id)allowEmptySel:(BOOL)a0;
- (void)altModifySelection:(id)a0;
- (void)calcSize;
- (id)cellAtRow:(long long)a0 column:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cellFrameAtRow:(long long)a0 column:(long long)a1;
- (id)cellWithTag:(long long)a0;
- (void)deselectAllCells;
- (void)deselectSelectedCell;
- (void)drawCell:(id)a0;
- (void)drawCellAtRow:(long long)a0 column:(long long)a1;
- (void)drawContextMenuHighlightForCellIndexes:(id)a0;
- (void)drawFocusRingMask;
- (SEL)errorAction;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBounds;
- (void)getNumberOfRows:(long long *)a0 columns:(long long *)a1;
- (BOOL)getRow:(long long *)a0 column:(long long *)a1 forPoint:(struct CGPoint { double x0; double x1; })a2;
- (BOOL)getRow:(long long *)a0 column:(long long *)a1 ofCell:(id)a2;
- (void)helpRequested:(id)a0;
- (void)highlightCell:(BOOL)a0 atRow:(long long)a1 column:(long long)a2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 mode:(unsigned long long)a1 cellClass:(Class)a2 numberOfRows:(long long)a3 numberOfColumns:(long long)a4;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 mode:(unsigned long long)a1 prototype:(id)a2 numberOfRows:(long long)a3 numberOfColumns:(long long)a4;
- (void)insertColumn:(long long)a0;
- (void)insertColumn:(long long)a0 withCells:(id)a1;
- (void)insertRow:(long long)a0;
- (void)insertRow:(long long)a0 withCells:(id)a1;
- (void)invalidateIntrinsicContentSizeForCell:(id)a0;
- (void)keyUp:(id)a0;
- (id)makeCellAtRow:(long long)a0 column:(long long)a1;
- (void)moveDown:(id)a0;
- (void)moveLeft:(id)a0;
- (void)moveRight:(id)a0;
- (BOOL)needsPanelToBecomeKey;
- (void)performClick:(id)a0;
- (BOOL)performKeyEquivalent:(id)a0;
- (void)putCell:(id)a0 atRow:(long long)a1 column:(long long)a2;
- (BOOL)refusesFirstResponder;
- (void)removeRow:(long long)a0;
- (void)renewRows:(long long)a0 columns:(long long)a1;
- (void)resetCursorRects;
- (void)resizeWithOldSuperviewSize:(struct CGSize { double x0; double x1; })a0;
- (void)scrollCellToVisibleAtRow:(long long)a0 column:(long long)a1;
- (void)selectCell:(id)a0;
- (void)selectCellAtRow:(long long)a0 column:(long long)a1;
- (BOOL)selectCellWithTag:(long long)a0;
- (void)selectNextKeyView:(id)a0;
- (void)selectPreviousKeyView:(id)a0;
- (void)selectText:(id)a0;
- (id)selectTextAtRow:(long long)a0 column:(long long)a1;
- (BOOL)sendAction;
- (BOOL)sendAction:(SEL)a0 to:(id)a1;
- (void)sendAction:(SEL)a0 to:(id)a1 forAllCells:(BOOL)a2;
- (void)sendDoubleAction;
- (void)setAction:(SEL)a0 atRow:(long long)a1 column:(long long)a2;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setKeyCell:(id)a0;
- (void)setRefusesFirstResponder:(BOOL)a0;
- (void)setScrollable:(BOOL)a0;
- (void)setSelectionFrom:(long long)a0 to:(long long)a1 anchor:(long long)a2 highlight:(BOOL)a3;
- (void)setState:(long long)a0 atRow:(long long)a1 column:(long long)a2;
- (void)setTabKeyTraversesCells:(BOOL)a0;
- (void)setTag:(long long)a0 atRow:(long long)a1 column:(long long)a2;
- (void)setTag:(long long)a0 target:(id)a1 action:(SEL)a2 atRow:(long long)a3 column:(long long)a4;
- (void)setTarget:(id)a0 atRow:(long long)a1 column:(long long)a2;
- (void)setToolTip:(id)a0 forCell:(id)a1;
- (void)setValidateSize:(BOOL)a0;
- (void)shiftModifySelection:(id)a0;
- (void)sizeToCells;
- (void)startSpeaking:(id)a0;
- (void)stopSpeaking:(id)a0;
- (BOOL)tabKeyTraversesCells;
- (void)textDidBeginEditing:(id)a0;
- (void)textDidEndEditing:(id)a0;
- (BOOL)textShouldBeginEditing:(id)a0;
- (BOOL)textShouldEndEditing:(id)a0;
- (id)textView:(id)a0 completions:(id)a1 forPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 indexOfSelectedItem:(long long *)a3;
- (BOOL)textView:(id)a0 doCommandBySelector:(SEL)a1;
- (BOOL)textView:(id)a0 shouldChangeTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementString:(id)a2;
- (void)updateCell:(id)a0;
- (void)updateCellInside:(id)a0;
- (id)view:(id)a0 stringForToolTip:(long long)a1 point:(struct CGPoint { double x0; double x1; })a2 userData:(void *)a3;
- (void)viewDidEndLiveResize;

@end
