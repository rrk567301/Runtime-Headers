@class NSRulerMarker, NSScrollView, NSString, NSView, NSArray, NSMutableArray, NSDictionary;

@interface NSRulerView : NSView {
    NSScrollView *_scrollView;
    unsigned long long _orientation;
    NSString *_units;
    double _originOffset;
    double _ruleThickness;
    double _thicknessForMarkers;
    double _thicknessForAccessoryView;
    NSView *_clientView;
    NSMutableArray *_markers;
    NSView *_accessoryView;
    NSDictionary *_cachedHashDict;
    double _cachedDocViewToRulerConversion;
    NSRulerMarker *_draggingMarker;
    id _accessibilityPanelController;
    NSMutableArray *_markerLines;
    id _draggingMarkerView;
    id _formattedHashLabelCache;
    NSView *_contentView;
    struct { unsigned char _showTooltip : 1; unsigned char _rtlLayoutDirection : 1; unsigned char _accessoryHostMode : 1; unsigned int _reserved : 29; } _rvFlags;
}

@property (weak) NSScrollView *scrollView;
@property unsigned long long orientation;
@property (readonly) double baselineLocation;
@property (readonly) double requiredThickness;
@property double ruleThickness;
@property double reservedThicknessForMarkers;
@property double reservedThicknessForAccessoryView;
@property (copy) NSString *measurementUnits;
@property double originOffset;
@property (weak) NSView *clientView;
@property (copy) NSArray *markers;
@property (retain) NSView *accessoryView;
@property (readonly, getter=isFlipped) BOOL flipped;

+ (id)separatorColor;
+ (void)initialize;
+ (id)labelColor;
+ (id)_labelCell;
+ (void)_registerUnitWithName:(id)a0 abbreviation:(id)a1 unitToPointsConversionFactor:(double)a2 stepUpCycle:(id)a3 stepDownCycle:(id)a4;
+ (id)_registrationDictionaryForUnitNamed:(id)a0;
+ (BOOL)accessibilityIsSingleCelled;
+ (id)hashMarkColor;
+ (void)registerUnitWithName:(id)a0 abbreviation:(id)a1 unitToPointsConversionFactor:(double)a2 stepUpCycle:(id)a3 stepDownCycle:(id)a4;
+ (id)rulerLineColor;

- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)mouseDown:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)layout;
- (void)_commonInit;
- (void)encodeWithCoder:(id)a0;
- (id)description;
- (id)initWithCoder:(id)a0;
- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_markerAreaRect;
- (id)accessibilityActionDescription:(id)a0;
- (void)rightMouseDown:(id)a0;
- (id)_markerHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)initWithScrollView:(id)a0 orientation:(unsigned long long)a1;
- (void)_addMarker:(id)a0;
- (void)_cancelAddMarker:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_centerScanSeparatorRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_draggingMarkerView;
- (void)_drawContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_hashMarkDictionary;
- (id)_hashMarkDictionaryForDocView:(id)a0 measurementUnitToBoundsConversionFactor:(double)a1 stepUpCycle:(id)a2 stepDownCycle:(id)a3 minimumHashSpacing:(double)a4 minimumLabelSpacing:(double)a5;
- (id)_hashMarkDictionaryForDocumentView:(id)a0 measurementUnitName:(id)a1;
- (BOOL)_isAccessoryViewHostMode;
- (double)_locationFromUnitsValue:(double)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_maxRuleAreaRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectWithSingleThickness:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_ruleAreaMarginRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_ruleAreaRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rulerAccessoryViewAreaRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rulerContentRect;
- (struct CGSize { double x0; double x1; })_rulerContentSize;
- (struct CGPoint { double x0; double x1; })_rulerOrigin;
- (void)_scrollToMatchContentView;
- (void)_setAccessoryViewHostMode:(BOOL)a0;
- (void)_setDraggingMarker:(id)a0;
- (double)_unitsForClientLocation:(double)a0;
- (double)_unitsForRulerLocation:(double)a0;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityHelpStringForChild:(id)a0;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)accessibilityIsChildFocusable:(id)a0;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsMarkerUIElementsAttributeSettable;
- (BOOL)accessibilityIsOrientationAttributeSettable;
- (BOOL)accessibilityIsUnitDescriptionAttributeSettable;
- (BOOL)accessibilityIsUnitsAttributeSettable;
- (id)accessibilityMarkerUIElementsAttribute;
- (id)accessibilityMaxValueAttribute;
- (id)accessibilityMinValueAttribute;
- (id)accessibilityOrientationAttribute;
- (void)accessibilityPerformAction:(id)a0;
- (id)accessibilityPositionOfChild:(id)a0;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySizeOfChild:(id)a0;
- (id)accessibilityUnitDescriptionAttribute;
- (id)accessibilityUnitsAttribute;
- (void)addMarker:(id)a0;
- (BOOL)displaysTooltips;
- (void)drawHashMarksAndLabelsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawMarkersInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawRulerLines;
- (void)drawSeparatorInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)invalidateHashMarks;
- (id)labelStringForValue:(id)a0;
- (BOOL)mouseDownCanMoveWindow;
- (void)moveRulerlineFromLocation:(double)a0 toLocation:(double)a1;
- (void)removeMarker:(id)a0;
- (void)setDisplaysTooltips:(BOOL)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setLabelString:(id)a0 forValue:(id)a1;
- (void)setUserInterfaceLayoutDirection:(long long)a0;
- (id)testPart:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)trackMarker:(id)a0 withMouseEvent:(id)a1;
- (long long)userInterfaceLayoutDirection;
- (void)viewDidEndLiveResize;

@end
