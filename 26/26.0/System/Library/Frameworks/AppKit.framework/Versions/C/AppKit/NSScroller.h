@class NSColor, NSString, NSScrollerImp;

@interface NSScroller : NSControl <NSScrollerImpDelegate> {
    struct { unsigned char isHoriz : 1; unsigned char arrowsLoc : 2; unsigned char partsUsable : 2; unsigned char fine : 1; unsigned char needsEnableFlush : 1; unsigned char thumbing : 1; unsigned char slotDrawn : 1; unsigned char knobDrawn : 1; unsigned char lit : 1; unsigned char knobLit : 1; unsigned char reserved : 1; unsigned char controlTint : 3; unsigned short repeatCount : 16; } sFlags;
    NSScrollerImp *_scrollerImp;
    double _curValue;
    double _percent;
    double _knobSize;
    struct { unsigned char hitPart : 4; unsigned char controlSize : 2; unsigned char inMaxEnd : 1; unsigned char setFloatValueOverridden : 1; unsigned char setFloatValueKnobProportionOverridden : 1; unsigned char style : 1; unsigned char styleCompatibility : 1; unsigned char overlayScrollerState : 2; unsigned char knobStyle : 2; unsigned char  : 2; unsigned char isTrackingMouse : 1; unsigned short  : 14; } _sFlags2;
}

@property (class, readonly) long long clickBehavior;
@property (class, readonly) BOOL scrollerSubclassIsCompatibleWithOverlayScrollers;
@property (class, readonly, getter=isCompatibleWithOverlayScrollers) BOOL compatibleWithOverlayScrollers;
@property (class, readonly) long long preferredScrollerStyle;

@property (setter=_setLionScrollerStyle:) long long _lionScrollerStyle;
@property (setter=_setHitPart:) unsigned long long _hitPart;
@property (nonatomic) BOOL _prefersFlushBottomAppearance;
@property (readonly, copy) NSColor *_effectiveKnobColor;
@property (readonly, copy) NSColor *_effectiveTrackColor;
@property (readonly) long long _orientation;
@property (setter=_setThumbingDoubleValue:) double _thumbingDoubleValue;
@property (setter=_setThumbingKnobProportion:) double _thumbingKnobProportion;
@property (readonly) NSScrollerImp *scrollerImp;
@property (readonly) unsigned long long _overlayScrollerState;
@property (readonly) double overlayScrollerKnobAlpha;
@property (readonly) double overlayScrollerTrackAlpha;
@property long long scrollerStyle;
@property long long knobStyle;
@property (readonly) unsigned long long usableParts;
@property unsigned long long controlSize;
@property (readonly) unsigned long long hitPart;
@property double knobProportion;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (BOOL)clipsToBounds;
+ (void)_aquaScrollerBehaviorChanged:(id)a0;
+ (void)_aquaScrollerVariantChanged:(id)a0;
+ (long long)_arrowsConfig;
+ (void)_setArrowsConfig:(long long)a0;
+ (BOOL)accessibilityIsSingleCelled;
+ (id)defaultAnimationForKey:(id)a0;
+ (double)scrollerWidth;
+ (double)scrollerWidthForControlSize:(unsigned long long)a0;
+ (double)scrollerWidthForControlSize:(unsigned long long)a0 scrollerStyle:(long long)a1;

- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)highlight:(BOOL)a0;
- (void)mouseDown:(id)a0;
- (BOOL)isOpaque;
- (void)setDoubleValue:(double)a0;
- (void)updateLayer;
- (float)floatValue;
- (void)setLayer:(id)a0;
- (BOOL)allowsVibrancy;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)encodeWithCoder:(id)a0;
- (void)setEnabled:(BOOL)a0;
- (BOOL)isFlipped;
- (double)doubleValue;
- (void)updateTrackingAreas;
- (void)setFloatValue:(float)a0;
- (id)initWithCoder:(id)a0;
- (id)effectiveAppearance;
- (void)_decrementPage:(id)a0;
- (void)_incrementPage:(id)a0;
- (void)_setAvoidingOtherScrollerThumb:(BOOL)a0;
- (void)setControlTint:(unsigned long long)a0;
- (void)_changeDoubleValueWithActionBy:(double)a0;
- (void)_decrementLine:(id)a0;
- (void)_incrementLine:(id)a0;
- (void)_scrollByDelta:(double)a0;
- (void)accessibilitySetValueAttribute:(id)a0;
- (void)setExpansionTransitionProgress:(double)a0;
- (BOOL)_accessibilityIsSupportedPartCode:(unsigned long long)a0;
- (id)_accessibilityScrollView;
- (const unsigned long long *)_accessibilitySupportedPartCodes;
- (id)_accessibilityUIElementForPartCode:(unsigned long long)a0;
- (void)_automateLiveScroll;
- (BOOL)_canBecomeFocused;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_drawingRectForPart:(unsigned long long)a0;
- (double)_expansionTransitionProgress;
- (BOOL)_fixScrollerImpForSwizzlers;
- (BOOL)_isAccessibilityContainerSectionCandidate;
- (BOOL)_isTrackingInKnob;
- (void)_old_drawArrow:(unsigned long long)a0 highlightPart:(unsigned long long)a1;
- (void)_postScrollerDidBeginTrackingNotification;
- (void)_postScrollerDidEndTrackingNotification;
- (long long)_preferredLayerContentsRedrawPolicy;
- (void)_really_setLionScrollerStyle:(long long)a0;
- (double)_repeatTime;
- (void)_replaceScrollerImp;
- (BOOL)_routeAroundScrollerStyleAccessors;
- (void)_setIsHorizontal:(BOOL)a0;
- (void)_setNeedsDisplayIfNotLayerBackedOverlayCompatible;
- (void)_setNeedsDisplayIfNotLayerBackedOverlayCompatibleInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setOverlayScrollerState:(unsigned long long)a0 forceImmediately:(BOOL)a1;
- (void)_setTrackingInKnob:(BOOL)a0;
- (void)_setWindow:(id)a0;
- (unsigned long long)_subclassOverrideFlags;
- (unsigned long long)_testPartUsingDestinationFloatValue:(struct CGPoint { double x0; double x1; })a0 scrollView:(id)a1;
- (double)_uiStateTransitionProgress;
- (int)_vibrancyBlendMode;
- (void)_windowChangedKeyState;
- (BOOL)_windowResizeMouseLocationIsInVisibleScrollerThumb:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)acceptsFirstMouse:(id)a0;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityHelpStringForChild:(id)a0;
- (id)accessibilityHiddenAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)accessibilityIsChildFocusable:(id)a0;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsHiddenAttributeSettable;
- (BOOL)accessibilityIsOrientationAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (id)accessibilityOrientationAttribute;
- (id)accessibilityPositionOfChild:(id)a0;
- (id)accessibilityRoleAttribute;
- (void)accessibilitySetHiddenAttribute:(id)a0;
- (id)accessibilitySizeOfChild:(id)a0;
- (id)accessibilityValueAttribute;
- (unsigned long long)arrowsPosition;
- (void)checkSpaceForParts;
- (unsigned long long)controlTint;
- (void)drawArrow:(unsigned long long)a0 highlight:(BOOL)a1;
- (void)drawArrow:(unsigned long long)a0 highlightPart:(unsigned long long)a1;
- (void)drawKnob;
- (void)drawKnobSlotInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 highlight:(BOOL)a1;
- (void)drawParts;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)layer:(id)a0 shouldInheritContentsScale:(double)a1 fromWindow:(id)a2;
- (struct CGPoint { double x0; double x1; })mouseLocationInScrollerForScrollerImp:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForPart:(unsigned long long)a0;
- (void)resetCursorRects;
- (void)scrollerImp:(id)a0 animateExpansionTransitionWithDuration:(double)a1;
- (void)scrollerImp:(id)a0 animateKnobAlphaTo:(double)a1 duration:(double)a2;
- (void)scrollerImp:(id)a0 animateTrackAlphaTo:(double)a1 duration:(double)a2;
- (void)scrollerImp:(id)a0 animateUIStateTransitionWithDuration:(double)a1;
- (void)scrollerImp:(id)a0 overlayScrollerStateChangedTo:(unsigned long long)a1;
- (BOOL)sendAction:(SEL)a0 to:(id)a1;
- (void)setArrowsPosition:(unsigned long long)a0;
- (void)setFloatValue:(float)a0 knobProportion:(double)a1;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setOverlayScrollerKnobAlpha:(double)a0;
- (void)setOverlayScrollerTrackAlpha:(double)a0;
- (void)setPresentationValue:(double)a0;
- (void)setUiStateTransitionProgress:(double)a0;
- (void)setUsePresentationValue:(BOOL)a0;
- (BOOL)shouldUseLayerPerPartForScrollerImp:(id)a0;
- (unsigned long long)testPart:(struct CGPoint { double x0; double x1; })a0;
- (void)trackKnob:(id)a0;
- (void)trackPagingArea:(id)a0;
- (void)trackScrollButtons:(id)a0;
- (BOOL)wantsLayer;
- (BOOL)wantsUpdateLayer;

@end
