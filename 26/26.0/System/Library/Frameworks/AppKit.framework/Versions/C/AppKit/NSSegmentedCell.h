@class NSSegmentedControlBezelConfiguration, NSMutableArray, NSObject;
@protocol NSSegmentedControlVisualProvider;

@interface NSSegmentedCell : NSActionCell {
    NSMutableArray *_segmentItems;
    long long _selectedSegment;
    long long _keySegment;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _lastBounds;
    struct { unsigned char trackingMode : 3; unsigned char trimmedLabels : 1; unsigned char drawing : 1; unsigned char recalcToolTips : 1; unsigned char usesWindowsStyle : 1; unsigned char dontShowSelectedAndPressedAppearance : 1; unsigned char menuShouldBeUniquedAgainstMain : 1; unsigned char style : 8; unsigned char segmentedSeparated : 1; unsigned char isObservingAllowsRollover : 1; } _seFlags;
    NSMutableArray *_segmentTrackingInfo;
    id _menuUniquer;
    long long _toolbarAppearance;
    NSObject<NSSegmentedControlVisualProvider> *_visualProvider;
    NSSegmentedControlBezelConfiguration *_bezelConfiguration;
}

@property long long segmentCount;
@property long long selectedSegment;
@property unsigned long long trackingMode;
@property long long segmentStyle;

+ (double)_additionalContentOffsetForStyle:(long long)a0 controlSize:(unsigned long long)a1;
+ (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_alignmentRectInsetsForStyle:(long long)a0 size:(unsigned long long)a1 semanticContext:(long long)a2;
+ (long long)_applicableStyleForBaseStyle:(long long)a0 automaticStyle:(BOOL)a1 usesWindowsStyle:(BOOL)a2 segmentedSeparatedStyle:(BOOL)a3 shouldUseTexturedToolbarStyle:(BOOL)a4;
+ (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_bezelToDrawingRectInsetsForStyle:(long long)a0 controlSize:(unsigned long long)a1 scale:(double)a2 semanticContext:(long long)a3;
+ (double)_cuiPixelHeightForStyle:(long long)a0 size:(unsigned long long)a1 scale:(double)a2 currentAppearance:(id)a3 semanticContext:(long long)a4;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_cuiRectForProposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 style:(long long)a1 controlSize:(unsigned long long)a2 scale:(double)a3 currentAppearance:(id)a4 controlView:(id)a5;
+ (void)_debugDrawOnePixelFrameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 color:(id)a1 draw:(BOOL)a2;
+ (double)_endCapWidthForStyle:(long long)a0 controlSize:(unsigned long long)a1;
+ (BOOL)_givenState:(unsigned long long)a0 hasState:(unsigned long long)a1;
+ (unsigned long long)_image_state_for_visual_state:(unsigned long long)a0 style:(long long)a1 drawsBezel:(BOOL)a2 trackingMode:(unsigned long long)a3;
+ (BOOL)_isStyleAutomatic:(long long)a0;
+ (BOOL)_isStyleSeparated:(long long)a0;
+ (BOOL)_isTexturedStyle:(long long)a0;
+ (id)_labelCell;
+ (double)_menuIndicatorAdjustForStyle:(long long)a0 size:(unsigned long long)a1;
+ (double)_preferredHeightForStyle:(long long)a0 controlSize:(unsigned long long)a1 semanticContext:(long long)a2 controlView:(id)a3;
+ (BOOL)_segmentStyleIsFakedWithButtonArt:(long long)a0;
+ (BOOL)_segmentStyleShowsSelectedInBezelWithTracking:(long long)a0 tracking:(unsigned long long)a1;
+ (BOOL)_segmentStyleWantsOnStateWhenPressedWithMomentaryTracking:(long long)a0;
+ (BOOL)_styleNeedsRolloverTracking:(long long)a0;
+ (double)_textVerticalAdjustForStyle:(long long)a0 controlSize:(unsigned long long)a1 font:(id)a2;
+ (unsigned long long)_validateControlSize:(unsigned long long)a0;
+ (double)_verticalScaleForControlView:(id)a0;
+ (Class)_visualProviderClassForBezelConfiguration:(id)a0 controlView:(id)a1;
+ (struct __CFString { } *)_widgetTypeForSegmentStyle:(long long)a0 semanticContext:(long long)a1;
+ (struct __CFString { } *)_widgetTypeForSegmentStyleFull:(long long)a0 semanticContext:(long long)a1;
+ (struct __CFString { } *)_widgetTypeStyleCommon:(long long)a0 semanticContext:(long long)a1;
+ (BOOL)prefersTrackingUntilMouseUp;

- (long long)integerValue;
- (void)setHighlighted:(BOOL)a0;
- (id)objectValue;
- (void)setObjectValue:(id)a0;
- (BOOL)isOpaque;
- (void)setDoubleValue:(double)a0;
- (float)floatValue;
- (void)setIntegerValue:(long long)a0;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)encodeWithCoder:(id)a0;
- (void)setEnabled:(BOOL)a0;
- (void)setFont:(id)a0;
- (void)setControlSize:(unsigned long long)a0;
- (id)init;
- (double)doubleValue;
- (void)setFloatValue:(float)a0;
- (id)initWithCoder:(id)a0;
- (void)setContinuous:(BOOL)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (int)intValue;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (long long)indexOfSelectedItem;
- (struct CGSize { double x0; double x1; })_cellSizeWithOptions:(id)a0 forBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_setKeySegment:(long long)a0;
- (id)menuForSegment:(long long)a0;
- (long long)_indexOfFirstPossibleKeySegment;
- (id)_symbolConfigurationForSegment:(long long)a0;
- (id)_visualProvider;
- (void)accessibilitySetFocus:(id)a0 forChild:(id)a1;
- (BOOL)continueTrackingGesture:(id)a0 inView:(id)a1;
- (BOOL)isMenuIndicatorShownForSegment:(long long)a0;
- (void)setControlView:(id)a0;
- (void)_acceleratorTimerFired;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_accessibilityScreenRectForSegment:(long long)a0;
- (id)_accessibilitySegmentAtIndex:(long long)a0;
- (void)_addSegmentItemCount:(long long)a0;
- (void)_adjustRectForR2L:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)_anySegmentShowsBadge;
- (long long)_applicableSegmentedCellStyle;
- (unsigned long long)_applicableTrackingModeForSegment:(long long)a0;
- (void)_attachToControlView:(id)a0;
- (id)_auxiliaryStorage;
- (long long)_badgeValueForSegment:(long long)a0;
- (long long)_baseStyle;
- (double)_baselineOffsetFromBottomOfControlView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundsForCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_calculateSelectedSegmentForPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_canMakeNextSegmentKeyWithoutWrapping;
- (BOOL)_canMakePreviousSegmentKeyWithoutWrapping;
- (struct CGSize { double x0; double x1; })_cellSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 distribution:(long long)a1;
- (void)_cleanupTracking;
- (void)_clearMouseTracking;
- (id)_compressibleOptionsForControlView:(id)a0;
- (BOOL)_continueSetupForTrackingAtLocation:(struct CGPoint { double x0; double x1; })a0 hasPressure:(BOOL)a1;
- (BOOL)_controlOrCellhasDrawingOverrides:(id)a0;
- (void)_controlViewDidChangeEffectiveAppearance:(id)a0;
- (void)_controlViewDidChangeEffectiveSemanticContext:(id)a0;
- (void)_controlViewDidMoveToWindow:(id)a0;
- (void)_controlViewFinishedMakingConnections;
- (void)_deselectAllButFirstSelectedSegment;
- (void)_deselectAllSegments;
- (void)_didChangeBorderShape;
- (void)_displayDelayedMenu;
- (BOOL)_dontShowSelectedAndPressedAppearance;
- (void)_drawBackgroundWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (id)_effectiveContentStyleForSegment:(long long)a0 inView:(id)a1;
- (unsigned long long)_getVisualStateForSegment:(unsigned long long)a0 andTrackingMode:(unsigned long long *)a1 forApplicableStyle:(long long)a2;
- (BOOL)_hasItemTooltips;
- (BOOL)_haveSegmentAtIndex:(long long)a0;
- (BOOL)_hidesUnselectedLabelsWhenNecessary;
- (double)_imageTextGap;
- (id)_imageToDrawForSegment:(long long)a0;
- (BOOL)_inTouchBar;
- (BOOL)_inactiveStateShowsRolloversForSegment:(long long)a0;
- (long long)_indexOfHighlightedSegment;
- (long long)_indexOfHilightedSegment;
- (long long)_indexOfLastPossibleKeySegment;
- (long long)_indexOfSelectedSegment;
- (long long)_initialBackgroundStyleCompatibilityGuessIgnoringExternalContext;
- (BOOL)_isAccessibilityContainerSectionCandidate;
- (BOOL)_isFlatOnEdge:(unsigned long long)a0;
- (BOOL)_itemAtIndexIsSelected:(long long)a0;
- (id)_keyEquivalentUniquerCreatingIfNecessary:(BOOL)a0;
- (long long)_keySegment;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_labelRectForSegment:(long long)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 withView:(id)a2;
- (void)_makeSegmentItemsPerformSelector:(SEL)a0;
- (double)_maxContentWidth;
- (double)_menuDelayTimeForSegment:(long long)a0;
- (BOOL)_mouseIsInsideSegmentAtIndex:(long long)a0;
- (BOOL)_needRedrawOnWindowChangedKeyState;
- (BOOL)_needsGasPedalConfiguration;
- (BOOL)_needsRolloverTrackingWithPerSegmentTracking:(BOOL *)a0;
- (BOOL)_needsToolTipRecalc;
- (void)_performClick:(id)a0 ignoreMenus:(BOOL)a1;
- (void)_performClick:(id)a0 onSegment:(long long)a1 ignoreMenus:(BOOL)a2;
- (BOOL)_performKeyEquivalent:(id)a0 conditionally:(BOOL)a1;
- (void)_postRolloverNotification;
- (id)_preferredAppearanceForAppearance:(id)a0 inView:(id)a1;
- (void)_prepareForAccessibilityPerformActionOnSegment:(long long)a0;
- (id)_pressureConfigurationIfNeeded;
- (BOOL)_proRecalcToolTips;
- (void)_proSetRecalcToolTips:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectForSegment:(long long)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_refreshVisualProvider;
- (void)_removeAllToolTips;
- (BOOL)_resizeSegmentsForCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_segmentAlignmentRectInsetsForControlView:(id)a0;
- (long long)_segmentHighlightState:(long long)a0;
- (id)_segmentItemAtIndex:(long long)a0;
- (id)_segmentItems;
- (long long)_segmentShowingRollover;
- (BOOL)_segmentStyleWantsOnStateWhenPressed;
- (long long)_segmentedCellStyle;
- (id)_segmentedControlContentStyle:(id)a0;
- (double)_segmentedMenuDelayTime;
- (double)_segmentedMenuDragSlopRect;
- (BOOL)_segmentedSeparatedStyle;
- (id)_segmentsDeselectedBySegment:(long long)a0;
- (void)_selectHighlightedSegment;
- (id)_selectedSegmentBezelColor;
- (BOOL)_sendActionFrom:(id)a0;
- (void)_setBadgeValue:(long long)a0 forSegment:(long long)a1 inView:(id)a2;
- (void)_setBaseStyle:(long long)a0;
- (void)_setCompressibleOptions:(id)a0 forControlView:(id)a1;
- (void)_setDontShowSelectedAndPressedAppearance:(BOOL)a0;
- (void)_setFlagsForStyle:(long long)a0;
- (void)_setHidesUnselectedLabelsWhenNecessary:(BOOL)a0;
- (void)_setInactiveStateShowsRollovers:(BOOL)a0 forSegment:(long long)a1;
- (void)_setIndexOfHighlightedSegment:(long long)a0;
- (void)_setIsFlat:(BOOL)a0 onEdge:(unsigned long long)a1;
- (void)_setItemAtIndex:(long long)a0 isSelected:(BOOL)a1;
- (void)_setMenuShouldBeUniquedAgainstMainMenu:(BOOL)a0;
- (void)_setMouseTrackingInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ofView:(id)a1 withConfiguration:(id)a2;
- (void)_setNeedsToolTipRecalc:(BOOL)a0;
- (void)_setSegmentItems:(id)a0 updateSegmentItemViews:(BOOL)a1;
- (void)_setSegmentedCellStyle:(long long)a0;
- (void)_setSegmentedSeparated:(BOOL)a0;
- (void)_setSelectedSegmentBezelColor:(id)a0;
- (void)_setShowsBadge:(BOOL)a0 forSegment:(long long)a1 inView:(id)a2;
- (void)_setSpringLoadingHighlightForSegment:(long long)a0 toValue:(long long)a1;
- (void)_setSpringLoadingSegment:(long long)a0;
- (void)_setToolbarAppearance:(long long)a0;
- (void)_setTrackingMode:(unsigned int)a0;
- (void)_setUsesWindowsStyle:(BOOL)a0;
- (void)_setVisualProvider:(id)a0;
- (BOOL)_setupForTackingAtLocation:(struct CGPoint { double x0; double x1; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 latchingToSingleSegment:(BOOL)a3;
- (BOOL)_shouldDrawBezel;
- (BOOL)_shouldUseAlternateImageForSegment:(long long)a0;
- (BOOL)_shouldUseSlidingSegmentedControl;
- (BOOL)_showsBadgeForSegment:(long long)a0;
- (void)_springLoadSegment:(BOOL)a0;
- (long long)_springLoadingHighlightForSegment:(long long)a0;
- (long long)_springLoadingSegment;
- (unsigned long long)_subclassOverrideFlags;
- (void)_subtractSegmentItemCount:(long long)a0;
- (long long)_toolbarAppearance;
- (void)_trackSelectedItemMenu;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_trackingBoundsWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (unsigned int)_trackingMode;
- (long long)_trackingSegment;
- (void)_updateHighlightStateConfiguration;
- (void)_updateImageConfigurationForSegment:(long long)a0;
- (void)_updateLabelViewForSegmentItem:(id)a0 segmentContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 imageState:(unsigned long long)a2 controlView:(id)a3;
- (void)_updateMouseTracking;
- (void)_updateNSSegmentItemViewFramesForCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_updateSegmentImagesForSymbolCriteria;
- (void)_updateSegmentItemsActiveStateInView:(id)a0;
- (void)_updateUsesSlidingSegmentStyle;
- (void)_updateWantsRollover;
- (BOOL)_useHitTestInTrackMouse;
- (BOOL)_usesItemViews;
- (BOOL)_usesWindowsStyle;
- (int)_vibrancyBlendModeForControlView:(id)a0;
- (BOOL)_wantsGroupRolloverInView:(id)a0;
- (BOOL)_wantsMenuIndicatorForSegment:(long long)a0;
- (BOOL)_wantsToolbarRolloverInView:(id)a0;
- (void)_windowChangedKeyStateWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (void)accessibilityDrawFocusRing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFocusRingBounds;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHelpStringForChild:(id)a0;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)accessibilityIdentifierForSegment:(long long)a0;
- (BOOL)accessibilityIsChildFocusable:(id)a0;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (id)accessibilityLabelForSegment:(long long)a0;
- (id)accessibilityPositionOfChild:(id)a0;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySizeOfChild:(id)a0;
- (id)accessibilityUserInputLabels:(long long)a0;
- (id)accessibilityValueAttribute;
- (long long)alignmentForSegment:(long long)a0;
- (id)alternateImageForSegment:(long long)a0;
- (BOOL)beginTrackingGestureRecognizer:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (struct CGSize { double x0; double x1; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)compressibleOptions;
- (BOOL)continueTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (void)continueTrackingPeriodicEvent:(id)a0 inView:(id)a1;
- (double)doubleValueForSelectedSegment;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawSegment:(long long)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 withView:(id)a2;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)getPeriodicDelay:(float *)a0 interval:(float *)a1;
- (unsigned long long)hitTestForEvent:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (id)imageForSegment:(long long)a0;
- (unsigned long long)imageScalingForSegment:(long long)a0;
- (long long)indexOfSegmentContainingPoint:(struct CGPoint { double x0; double x1; })a0 inCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)initImageCell:(id)a0;
- (id)initTextCell:(id)a0;
- (long long)interiorBackgroundStyleForSegment:(long long)a0;
- (BOOL)isEnabledForSegment:(long long)a0;
- (BOOL)isSelectedForSegment:(long long)a0;
- (id)labelForSegment:(long long)a0;
- (void)layoutLayerWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)makeNextSegmentKey;
- (void)makePreviousSegmentKey;
- (struct CGSize { double x0; double x1; })minimumCellSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)performClick:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForSegment:(long long)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (long long)segmentDistribution;
- (BOOL)selectSegmentWithTag:(long long)a0;
- (void)setAccessibilityIdentifier:(id)a0 forSegment:(long long)a1;
- (void)setAccessibilityLabel:(id)a0 forSegment:(long long)a1;
- (void)setAccessibilityUserInputLabels:(id)a0 forSegment:(long long)a1;
- (void)setAlignment:(long long)a0 forSegment:(long long)a1;
- (void)setAlternateImage:(id)a0 forSegment:(long long)a1;
- (void)setBezeled:(BOOL)a0;
- (void)setBordered:(BOOL)a0;
- (void)setEnabled:(BOOL)a0 forSegment:(long long)a1;
- (void)setImage:(id)a0 forSegment:(long long)a1;
- (void)setImageScaling:(unsigned long long)a0 forSegment:(long long)a1;
- (void)setIntValue:(int)a0;
- (void)setLabel:(id)a0 forSegment:(long long)a1;
- (void)setMenu:(id)a0 forSegment:(long long)a1;
- (void)setMenuIndicatorShown:(BOOL)a0 forSegment:(long long)a1;
- (void)setSegmentDistribution:(long long)a0;
- (void)setSegmentStyle:(long long)a0 forceRecalc:(BOOL)a1;
- (void)setSelected:(BOOL)a0 forSegment:(long long)a1;
- (void)setShowsMenuIndicator:(BOOL)a0 forSegment:(long long)a1;
- (void)setTag:(long long)a0 forSegment:(long long)a1;
- (void)setToolTip:(id)a0 forSegment:(long long)a1;
- (void)setUserInterfaceLayoutDirection:(long long)a0;
- (void)setUsesAquaduck:(BOOL)a0;
- (void)setWidth:(double)a0 forSegment:(long long)a1;
- (BOOL)showsMenuIndicatorForSegment:(long long)a0;
- (void)springLoadingActivated:(BOOL)a0 draggingInfo:(id)a1;
- (unsigned long long)springLoadingEntered:(id)a0;
- (void)springLoadingExited:(id)a0;
- (void)springLoadingHighlightChanged:(id)a0;
- (unsigned long long)springLoadingUpdated:(id)a0;
- (BOOL)startTrackingAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)stopTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 mouseIsUp:(BOOL)a3;
- (long long)tagForSegment:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)toolTipForSegment:(long long)a0;
- (void)touchBeganAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)touchCancelledAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)touchEndedAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)touchMovedFrom:(struct CGPoint { double x0; double x1; })a0 to:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (BOOL)trackMouse:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 untilMouseUp:(BOOL)a3;
- (void)updateTrackingAreaWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (BOOL)usesAquaduck;
- (id)view:(id)a0 stringForToolTip:(long long)a1 point:(struct CGPoint { double x0; double x1; })a2 userData:(void *)a3;
- (BOOL)wantsUpdateLayerInView:(id)a0;
- (double)widthForSegment:(long long)a0;

@end
