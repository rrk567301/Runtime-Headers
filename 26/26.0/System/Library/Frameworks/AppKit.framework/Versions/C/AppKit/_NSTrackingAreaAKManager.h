@class NSPressureConfiguration, NSWindow, NSMutableOrderedSet;

@interface _NSTrackingAreaAKManager : _NSTrackingAreaManager <NSMouseMovedListener> {
    NSWindow *_window;
    unsigned int _wid;
    NSPressureConfiguration *_pressureConfiguration;
    id _orderOnScreenObserver;
    id _resizeObserver;
    unsigned long long _structuralRegionID;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _structuralRegionRect;
    NSMutableOrderedSet *_activeTrackingAreas;
    NSMutableOrderedSet *_activeDragTrackingAreas;
    NSMutableOrderedSet *_activeMenuTrackingAreas;
    BOOL _isTrackingMenu;
    id _menuMouseMoveMonitor;
    id _menuTrackingTerminationMonitor;
    id _mouseUpExitMonitor;
    unsigned char _isInsideStructuralRegion : 1;
    unsigned char _sentInvalidateCursorRectsMsg : 1;
    unsigned char _validCursorRects : 1;
    unsigned char _allowsCursorRectsWhenInactive : 1;
    unsigned char _cursorRectsDisabled : 1;
    unsigned char _trackingAreasDirty : 1;
    unsigned char _isActiveTrackingAreaUpdateScheduled : 1;
}

@property (readonly) unsigned long long options;

+ (BOOL)areCursorRectsEnabled;
+ (id)convertEventToCursorUpdateIfNeeded:(id)a0;
+ (id)cursorRectCursor;
+ (void)disableCursorRects;
+ (void)discardTrackingAndCursorEventsIfNeeded;
+ (void)enableCursorRects;
+ (void)gdbDumpCursorStack;
+ (BOOL)handleCursorRectEvent:(id)a0;
+ (BOOL)isTrackingIDInstalled:(long long)a0 wid:(long long)a1;
+ (void)resetCursorStack;
+ (void)restoreCursor;
+ (BOOL)routeEnterExitEvent:(id)a0;
+ (void)trackingRegionID:(unsigned long long)a0 windowID:(unsigned int)a1 getTrackingAreaID:(long long *)a2 userData:(void **)a3;
+ (unsigned long long)trackingRegionIDForTrackingAreaID:(long long)a0 wid:(unsigned int)a1;

- (id)window;
- (void)dealloc;
- (void)setWindow:(id)a0;
- (id)initWithWindow:(id)a0;
- (void).cxx_destruct;
- (Class)viewHelperClass;
- (void)_activeTrackingAreasNeedUpdate;
- (void)_exitAllActiveTrackingAreas:(struct CGPoint { double x0; double x1; })a0 modifierFlags:(unsigned long long)a1;
- (void)_invalidateCursorRectsForViewsWithNoTrackingAreas;
- (void)_mouseMoved:(id)a0;
- (void)_routeEnterExitEvent:(id)a0;
- (void)_setupStructuralRegionIfNeeded;
- (void)_startMenuTrackingOfTrackingAreas;
- (void)_startMenuTrackingOfTrackingAreasIfNeeded;
- (void)_updateActiveTrackingAreasForWindowLocation:(struct CGPoint { double x0; double x1; })a0 modifierFlags:(unsigned long long)a1;
- (void)_updateDragTrackingAreasForWindowLocation:(struct CGPoint { double x0; double x1; })a0 modifierFlags:(unsigned long long)a1;
- (void)_updateMenuActiveTrackingAreasForWindowLocation:(struct CGPoint { double x0; double x1; })a0 modifierFlags:(unsigned long long)a1;
- (void)_updateStructuralRegionCreateIfNeeded:(BOOL)a0;
- (void)_updateTrackpadBehavior;
- (void)activateTrackingRectsForApplicationActivation;
- (BOOL)allowsCursorRectsWhenInactive;
- (BOOL)areCursorRectsEnabled;
- (void)cursorUpdate:(id)a0;
- (void)deactivateTrackingRectsForApplicationDeactivation;
- (void)disableCursorRects;
- (void)disableTrackingArea:(id)a0;
- (void)disableTrackingRect:(long long)a0;
- (void)discardCursorRects;
- (id)discardCursorRectsForView:(id)a0;
- (void)discardEventsForTrackingArea:(id)a0;
- (void)discardTrackingRect:(long long)a0;
- (void)discardTrackingRects:(long long *)a0 count:(long long)a1;
- (void)displayCycleUpdateStructuralRegions;
- (void)enableCursorRects;
- (void)enableTrackingArea:(id)a0;
- (void)enableTrackingRect:(long long)a0;
- (void)gdbDumpCursorRects;
- (BOOL)hasCursorRects;
- (BOOL)hasCursorRectsForView:(id)a0;
- (BOOL)hasValidCursorRects;
- (void)invalidateCursorRectsForView:(id)a0;
- (void)invalidateCursorRectsForView:(id)a0 force:(BOOL)a1;
- (void)invalidateCursorRectsForViewsWithNoTrackingAreas;
- (void)markCursorRectsForRemovedView:(id)a0;
- (void)menuTrackingTrackingAreaEvent:(id)a0 delayedArray:(id)a1;
- (void)mouseMoved:(id)a0;
- (void)moveTrackingArea:(id)a0 toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)postInvalidCursorRects;
- (void)recursiveResetTrackingAreasToPending;
- (void)resetCursorRects;
- (BOOL)routeEnterExitEvent:(id)a0;
- (void)setAllowsCursorRectsWhenInactive:(BOOL)a0;
- (void)setCursorForMouseLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)setTrackingAreasDirty;
- (long long)setTrackingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inside:(BOOL)a1 owner:(id)a2 userData:(void *)a3 useTrackingNum:(long long)a4;
- (void)setTrackingRects;
- (BOOL)shouldDelayEventDuringEventBlockingTransition:(id)a0;
- (BOOL)shouldResetCursorRects;
- (BOOL)shouldShowCursorRects;
- (BOOL)shouldUpdateTrackingAreasDuringScrolling;
- (void)synchronizeConfigurationForTrackingArea:(id)a0;
- (long long)trackingAreaIDForTrackingArea:(id)a0;
- (void)updateCursorRectsDueToBecomingKey;
- (void)updateCursorRectsDueToBecomingVisible;
- (void)updateCursorRectsDueToResigningKey;
- (void)updateTrackingAreasDueToEndScrolling;
- (void)verifyTrackingRects;

@end
