@class NSView, NSString, NSArray, NSAttributedString, NSTextField, NSStackView, NSLayoutConstraint, NSTabBarItem, NSImage, NSMutableArray, NSButton, NSImageView;
@protocol NSTabButtonDelegate;

@interface NSTabButton : NSTabBarViewButton <NSRolloverButtonDelegate> {
    BOOL _didEstablishTabBarViewItemBindings;
    NSView *_placeholderAccessoryViewForCentering;
    NSArray *_accessoryViewConstraints;
    NSStackView *_titleContainerView;
    NSTextField *_titleTextField;
    NSButton *_closeButton;
    NSImageView *_imageView;
    NSStackView *_mainContentContainer;
    NSView *_mainContentClippingContainer;
    NSStackView *_accessoryViewsContainer;
    NSLayoutConstraint *_mainContentContainerWidthConstraint;
    NSLayoutConstraint *_mainContentContainerLeftConstraint;
    NSLayoutConstraint *_mainContentContainerRightConstraint;
    NSLayoutConstraint *_mainContentContainerHorizontalCenteringConstraint;
    NSLayoutConstraint *_titleContainerViewHorizontalCenteringConstraint;
    double _buttonWidthForTitleLayout;
    long long _alignment;
    double _mainContentContainerCenterOffset;
    double _titleTextFieldCenterOffset;
    BOOL _canShowCloseButton;
    BOOL _isDealloced;
}

@property (weak, nonatomic) id<NSTabButtonDelegate> delegate;
@property (readonly) NSTabBarItem *tabBarViewItem;
@property (copy, nonatomic) NSString *title;
@property (copy, nonatomic) NSAttributedString *attributedTitle;
@property (nonatomic) long long alignment;
@property (copy, nonatomic) NSMutableArray *accessoryViews;
@property (nonatomic) BOOL canShowCloseButton;
@property (nonatomic, getter=isPinned) BOOL pinned;
@property (nonatomic) BOOL showIcon;
@property (retain, nonatomic) NSImage *image;
@property (nonatomic, getter=isShowingCloseButton) BOOL showingCloseButton;
@property (nonatomic) double buttonWidthForTitleLayout;
@property (nonatomic) double mainContentContainerCenterOffset;
@property (nonatomic) double titleTextFieldCenterOffset;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_titleFont;

- (id)accessibilityLabel;
- (void)viewWillMoveToWindow:(id)a0;
- (void)updateLayer;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setAlignment:(long long)a0;
- (void)dealloc;
- (long long)alignment;
- (void)setActive:(BOOL)a0;
- (BOOL)becomeFirstResponder;
- (void)_updateConstraints;
- (id)accessibilityValue;
- (id)menuForEvent:(id)a0;
- (BOOL)isSpringLoaded;
- (void)setValue:(id)a0 forKey:(id)a1;
- (void).cxx_destruct;
- (id)tabImageOfSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)_windowIsActive;
- (void)draggingExited:(id)a0;
- (id)_accessoryViewsIncludingPlaceholder;
- (id)_attributedStringColorMapForMainWindow:(BOOL)a0 activeTab:(BOOL)a1 isDragging:(BOOL)a2;
- (BOOL)_canShowCloseButton;
- (void)_closeButtonClicked:(id)a0;
- (id)_dragTypes;
- (id)_keysToObserve;
- (void)_setUpAccessoryViewsIncludingPlaceholder;
- (void)_setUpConstraints;
- (BOOL)_shouldShowCloseButton;
- (BOOL)_shouldShowIconView;
- (id)_titleStringAttributesForMainWindow:(BOOL)a0 activeTab:(BOOL)a1 isDragging:(BOOL)a2;
- (void)_updateAccessibilityChildren;
- (void)_updateAccessibilityProperties;
- (void)_updateTitleContainerConstraints;
- (void)_updateTitleTextFieldAndAccessibilityProperties;
- (BOOL)acceptsFirstResponder;
- (BOOL)accessibilityPerformPress;
- (BOOL)accessibilityPerformShowMenu;
- (id)accessibilitySubrole;
- (id)associatedWindow;
- (double)buttonWidthForTitleLayout;
- (void)concludeDragOperation:(id)a0;
- (id)draggingDestination;
- (void)draggingEnded:(id)a0;
- (unsigned long long)draggingEntered:(id)a0;
- (unsigned long long)draggingUpdated:(id)a0;
- (void)drawFocusRingMask;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBounds;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 tabBarViewItem:(id)a1;
- (double)mainContentContainerCenterOffset;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)needsPanelToBecomeKey;
- (void)performClick:(id)a0;
- (BOOL)performDragOperation:(id)a0;
- (id)pinnedTabDragImageOfSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)prepareForDragOperation:(id)a0;
- (void)rolloverButtonDidBecomeFirstResponder:(id)a0;
- (void)rolloverButtonDidResignFirstResponder:(id)a0;
- (void)setButtonWidthForTitleLayout:(double)a0;
- (void)setHasMouseOverHighlight:(BOOL)a0 shouldAnimateCloseButton:(BOOL)a1;
- (void)setHasPressedHighlight:(BOOL)a0;
- (void)setMainContentContainerCenterOffset:(double)a0;
- (void)setTitleTextFieldCenterOffset:(double)a0;
- (void)springLoadingActivated:(BOOL)a0 draggingInfo:(id)a1;
- (unsigned long long)springLoadingEntered:(id)a0;
- (void)springLoadingExited:(id)a0;
- (void)springLoadingHighlightChanged:(id)a0;
- (id)springLoadingTarget;
- (unsigned long long)springLoadingUpdated:(id)a0;
- (id)tabDragImageOfSize:(struct CGSize { double x0; double x1; })a0;
- (double)titleTextFieldCenterOffset;
- (void)updateDraggingItemsForDrag:(id)a0;
- (void)updateImageVisibility;
- (BOOL)wantsPeriodicDraggingUpdates;

@end
