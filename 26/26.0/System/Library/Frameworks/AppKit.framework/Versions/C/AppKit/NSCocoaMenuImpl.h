@class NSMutableDictionary, NSMenuItem, NSMenuSelectionRect, NSMenu, NSObject, NSResponder, NSAppearance, NSString, NSMutableSet, NSMenuItemView, NSMenuTrackingSession, NSView, NSPopupMenuWindow, NSWindow;
@protocol NSContextMenuWindowProtocol, NSSubmenuPresenting, NSMenuRepresentable, NSMenuLifecycleProtocol, NSMenuLifecycleDelegate, NSMenuItemViewProtocol, NSContextMenuLifecycleProtocol, NSMenuContextProtocol;

@interface NSCocoaMenuImpl : NSResponder <NSSubmenuPresenting, NSMenuImpl, NSMenuRepresentationDelegate, NSMenuLifecycleProtocol> {
    NSMenu *_menu;
    NSMenuSelectionRect *_selectionMaterialView;
    NSMutableSet *_condensedMenuItems;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _renderedLayerFrame;
    double _indentationWidth;
    long long _lastMouseEnteredTrackingNumber;
    BOOL _currentlyEnabling;
    BOOL _shouldUpdateStateImage;
    BOOL _shouldExcludeStateImage;
    BOOL _needsUpdateMenuSeparators;
    BOOL _isR2L;
    BOOL _usesMenuBarMaterial;
    BOOL _ignoresBackingViewRemovals;
    BOOL _isGrouping;
    BOOL _isUpdatingModifiers;
    BOOL _isToolTipVisible;
    NSMutableDictionary *_alternateItemToPrimaryItem;
    NSAppearance *_resolvedAppearance;
    NSCocoaMenuImpl<NSContextMenuLifecycleProtocol> *_primarySubmenuImpl;
    NSCocoaMenuImpl<NSContextMenuLifecycleProtocol> *_secondarySubmenuImpl;
    NSMenuItem *_lastHighlightedItem;
    long long _visibleDynamicItemIndex;
    BOOL _isCondensingSeparators;
    BOOL _suppressHighlightNotifications;
    BOOL _isHighlightingItemView;
    BOOL _resigningFirstResponder;
}

@property (class, readonly) BOOL _isAnyMenuTracking;

@property (setter=_setMaximumSizeForTesting:) struct CGSize { double x0; double x1; } _maximumSizeForTesting;
@property (nonatomic) long long scrollingBehavior;
@property (nonatomic) long long presentationOptions;
@property (weak, nonatomic) NSCocoaMenuImpl *superview;
@property (readonly, weak) NSObject<NSMenuLifecycleProtocol> *presentationParent;
@property (retain, nonatomic) NSMenuTrackingSession *trackingSession;
@property (readonly, weak) NSObject<NSContextMenuWindowProtocol> *_window;
@property (weak, nonatomic) NSView<NSMenuItemViewProtocol> *highlightedView;
@property (readonly, weak, nonatomic) NSMenuItemView *highlightedMenuItemView;
@property (weak, nonatomic) NSView<NSMenuItemViewProtocol> *viewPresentingSubmenu;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } highlightedFrame;
@property (nonatomic) unsigned long long currentMenuUpdateFlags;
@property (nonatomic) unsigned long long populateReasonTokens;
@property (nonatomic) BOOL ignoresMouseEvents;
@property (nonatomic) BOOL isViewPopulated;
@property (nonatomic) BOOL isVisible;
@property (nonatomic) BOOL isRenderingInFilterMode;
@property (readonly) BOOL isEmphasized;
@property (setter=setUsesMenuBarMaterial:) BOOL usesMenuBarMaterial;
@property (readonly, nonatomic) NSObject<NSMenuRepresentable> *activeRepresentationView;
@property (readonly, weak) NSMenuSelectionRect *selectionMaterialView;
@property (readonly, weak) NSPopupMenuWindow *_hostWindow;
@property (readonly, weak) NSWindow *window;
@property (readonly) long long predominantAxis;
@property (readonly) double verticalOffset;
@property (readonly) BOOL _prefersSyncRendering;
@property (readonly) BOOL _shouldDismissOnMouseUpWithDefaultTracking;
@property (readonly) BOOL shouldPresentAsPullDown;
@property (readonly) BOOL _isTrackingUsingKeyboard;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _accessibilityFrame;
@property (readonly, weak) NSResponder<NSSubmenuPresenting> *parentMenuImpl;
@property (readonly, weak) NSView *firstResponderView;
@property (readonly, weak) NSView *viewAtCurrentMouseLocation;
@property (readonly, weak) NSMenuItem *highlightedItem;
@property (nonatomic) BOOL isMenuWindowClosing;
@property (nonatomic) BOOL shouldHighlightFirstItem;
@property (readonly) BOOL canOpenSubmenu;
@property (readonly) BOOL canPerformActionForHighlightedItem;
@property (readonly) BOOL isTargetingCustomMenuItemView;
@property (readonly) BOOL isKey;
@property (readonly) BOOL supportsTypeSelect;
@property (readonly) BOOL _delaysSubmenuPresentation;
@property (readonly) BOOL _allowsHighlightingFirstItem;
@property struct OpaqueUCTypeSelectRef { } *typeSelectRef;
@property (readonly) NSCocoaMenuImpl<NSContextMenuLifecycleProtocol> *primarySubmenu;
@property (readonly) NSCocoaMenuImpl<NSContextMenuLifecycleProtocol> *secondarySubmenu;
@property (readonly) NSCocoaMenuImpl<NSContextMenuLifecycleProtocol> *deepestPresentedSubmenu;
@property (readonly) NSCocoaMenuImpl<NSContextMenuLifecycleProtocol> *deepestKeySubmenu;
@property (readonly) NSCocoaMenuImpl<NSContextMenuLifecycleProtocol> *currentPresentedSubmenu;
@property (readonly) NSCocoaMenuImpl<NSContextMenuLifecycleProtocol> *secondaryPresentedSubmenu;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain) NSObject<NSMenuContextProtocol> *presentationContext;
@property (weak) NSObject<NSMenuLifecycleDelegate> *delegate;
@property (readonly, weak) NSMenu *menu;
@property (readonly) BOOL shouldSendLifecycleNotifications;
@property (readonly) NSMenuItem *targetedItem;
@property (setter=_setCurrentMenuUpdateFlags:) unsigned long long _currentMenuUpdateFlags;
@property (readonly) NSView *_presentingView;

+ (void)_didChangeHelpMenuFrom:(id)a0 to:(id)a1;
+ (void)_highlightMenuItem:(id)a0 withImpl:(id)a1 highlightNotUnhighlight:(BOOL)a2 completionDelay:(double)a3 withCompletionBlock:(id /* block */)a4;
+ (void)_invalidateItemHighlightTimer;
+ (id)_menuItemWithKeyEquivalentMatchingEvent:(id)a0 inMenu:(id)a1 includingDisabledItems:(BOOL)a2;
+ (void)_performActionForMenuItem:(id)a0 invocationType:(unsigned long long)a1;

- (void)mouseDown:(id)a0;
- (void)viewWillDisappear;
- (void)_reloadData;
- (void)mouseUp:(id)a0;
- (void)setMenu:(id)a0;
- (void)mouseDragged:(id)a0;
- (void)dealloc;
- (void)keyDown:(id)a0;
- (void)viewDidAppear;
- (void)viewDidLayout;
- (BOOL)openWithOptions:(long long)a0;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (id)appearance;
- (void).cxx_destruct;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeRequiresModifiersToBeVisibleFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_updateToolTip:(id)a0;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeSubmenuParentItemUnchoosableFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_sendMenuClosed;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_absoluteFrameForView:(id)a0;
- (BOOL)_addHighlightForView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundsIfOpen;
- (BOOL)_canOpenSubmenuFromView:(id)a0;
- (void)_cancelTrackingWithAnimation:(BOOL)a0;
- (long long)_defaultImageScale;
- (struct __CFString { } *)_delayMode;
- (void)_delayUntil:(id /* block */)a0;
- (void)_didAutoScroll:(long long)a0 direction:(long long)a1;
- (void)_didChangeAppearance;
- (void)_displayAlternateItemsInMenu:(id)a0 withModifiers:(unsigned long long)a1 startIndex:(long long)a2 endIndex:(long long)a3 changeArray:(id)a4;
- (void)_expandWindowFrameBy:(struct CGPoint { double x0; double x1; })a0 dueToUserEvent:(BOOL)a1;
- (void)_findDynamicGroupInMenu:(id)a0 startingAtIndex:(long long)a1 firstIndexPtr:(long long *)a2 lastIndexPtr:(long long *)a3 primaryIndexPtr:(long long *)a4;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForViewAtMenuIndex:(long long)a0;
- (BOOL)_highlightItemAtIndex:(long long)a0 allowingDisabledItems:(BOOL)a1;
- (void)_highlightMenuItemView:(id)a0 shouldOpenSubmenu:(BOOL)a1;
- (BOOL)_highlightVisibleItemAtIndex:(long long)a0 direction:(long long)a1 allowingDisabledItems:(BOOL)a2;
- (BOOL)_highlightVisibleItemAtIndex:(long long)a0 direction:(long long)a1 skippingInitialItem:(BOOL)a2 allowingDisabledItems:(BOOL)a3 maxMenuIndex:(long long)a4;
- (BOOL)_highlightVisibleItemAtMenuIndex:(long long)a0 direction:(long long)a1;
- (BOOL)_highlightVisibleItemAtMenuIndex:(long long)a0 direction:(long long)a1 skippingInitialItem:(BOOL)a2 maxIndex:(long long)a3;
- (long long)_indexOfHighlightedViewInMenu;
- (void)_informOwnerViewOfMenuState:(BOOL)a0;
- (void)_initTrackingSessionIfNeeded;
- (BOOL)_isMenuItemSelectable:(id)a0;
- (void)_itemAdded:(long long)a0;
- (void)_itemChanged:(long long)a0;
- (void)_itemRemoved:(long long)a0;
- (void)_limitedViewMenuItemWantsRedisplay:(long long)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)_makeItemViewForMenuItem:(id)a0 filterQuery:(id)a1 appearanceOverride:(id)a2;
- (id)_makeViewForMenuItemAtIndex:(long long)a0 withFilterQuery:(id)a1 menuItemPtr:(id *)a2;
- (struct CGSize { double x0; double x1; })_maximumSizeForScreen:(id)a0;
- (void)_menu:(id)a0 didChangeHiddenInRepresentationFrom:(BOOL)a1 to:(BOOL)a2;
- (void)_menuDidChangeAccessibilityOverriddenAttribute:(id)a0 from:(id)a1 to:(id)a2;
- (void)_menuDidChangeAutoenablesFrom:(BOOL)a0 to:(BOOL)a1;
- (void)_menuDidChangeCondensesSeparatorsFrom:(BOOL)a0 to:(BOOL)a1;
- (void)_menuDidChangeDelegateTo:(id)a0;
- (void)_menuDidChangeFontFrom:(id)a0 to:(id)a1;
- (void)_menuDidChangeHasBottomPaddingFrom:(BOOL)a0 to:(BOOL)a1;
- (void)_menuDidChangeHasSidebandUpdaterWithRoles:(long long)a0 from:(BOOL)a1 to:(BOOL)a2;
- (void)_menuDidChangeHasTopPaddingFrom:(BOOL)a0 to:(BOOL)a1;
- (void)_menuDidChangeIndentationWidthFrom:(unsigned long long)a0 to:(unsigned long long)a1;
- (void)_menuDidChangeNCStyleFrom:(BOOL)a0 to:(BOOL)a1;
- (void)_menuDidChangeNextMenuFrom:(id)a0 to:(id)a1;
- (void)_menuDidChangePluginInsertionModeFrom:(long long)a0 to:(long long)a1;
- (void)_menuDidChangeShowsStateColumnFrom:(BOOL)a0 to:(BOOL)a1;
- (void)_menuDidChangeTitleFrom:(id)a0 to:(id)a1;
- (void)_menuDidChangeUserInterfaceLayoutDirectionFrom:(long long)a0 to:(long long)a1;
- (void)_menuDidChangeWidthFrom:(double)a0 to:(double)a1;
- (void)_menuDidRemoveAllItems:(id)a0;
- (BOOL)_menuHasCommandKeys:(id)a0;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 customViewDidChangeSize:(struct CGSize { double x0; double x1; })a2;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeAccessibilityOverriddenAttribute:(id)a2 from:(id)a3 to:(id)a4;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeActionFrom:(SEL)a2 to:(SEL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeAlternateFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeAttributedTitleFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeBadgeFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeCustomViewFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeCustomViewHandlesEventsFrom:(BOOL)a2 to:(BOOL)a3 viewDidWantHIView:(BOOL)a4;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeCustomViewIsDrawingOnlyFrom:(BOOL)a2 to:(BOOL)a3 viewDidWantHIView:(BOOL)a4;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeDestructiveFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeEnabledStateFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeFontFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeGroupHeaderFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeHiddenFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeHiddenInRepresentationFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeImageFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeImageSizeFrom:(struct CGSize { double x0; double x1; })a2 to:(struct CGSize { double x0; double x1; })a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeImagesTo:(id)a2 highlightedImage:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeIndentFrom:(long long)a2 to:(long long)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeKeyEquivalentDisplayOverrideTo:(id)a2;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeKeyEquivalentFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeKeyEquivalentModifierMaskFrom:(unsigned long long)a2 to:(unsigned long long)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeKeyEquivalentVirtualKeyCodeFrom:(unsigned short)a2 to:(unsigned short)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeNewItemsCountFrom:(unsigned long long)a2 to:(unsigned long long)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeNextItemIsAlternateFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeRespectsKeyEquivalentWhileHiddenFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeSeparatorStatusFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeShowsBlockedByScreenTimeFrom:(BOOL)a2 to:(BOOL)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeStateImageFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeSubmenuContentsWithSubmenu:(id)a2;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeSubmenuFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeSubtitleFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeTitleFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 atIndex:(unsigned long long)a1 didChangeTooltipFrom:(id)a2 to:(id)a3;
- (void)_menuItem:(id)a0 wasAddedToNewIndex:(unsigned long long)a1;
- (void)_menuItem:(id)a0 wasRemovedFromPreviousIndex:(unsigned long long)a1;
- (id)_newSelectionRect;
- (BOOL)_openSubmenuFromView:(id)a0 highlightingFirstItem:(BOOL)a1 withDelay:(BOOL)a2;
- (void)_openSubmenuFromView:(id)a0 impl:(id)a1 parentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 highlightingFirstItem:(BOOL)a3 withDelay:(BOOL)a4;
- (void)_popUpContextMenu:(id)a0 withEvent:(id)a1 forView:(id)a2;
- (void)_popUpContextMenu:(id)a0 withEvent:(id)a1 forView:(id)a2 withFont:(id)a3;
- (BOOL)_popUpMenuPositioningItem:(id)a0 atCocoaIndex:(unsigned long long)a1 atLocation:(struct CGPoint { double x0; double x1; })a2 inView:(id)a3 withPrivateFlags:(unsigned long long)a4 appearance:(id)a5;
- (BOOL)_popUpMenuRelativeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1 preferredEdge:(unsigned long long)a2;
- (void)_prepareForPresentation;
- (long long)_primaryDynamicItemForItemAtIndex:(long long)a0;
- (struct OpaqueMenuRef { } *)_principalMenuRef;
- (unsigned long long)_privateFlagsForMenuDirectionInView:(id)a0;
- (void)_removeHighlightForView:(id)a0;
- (void)_returnMenuRefWithToken:(id)a0;
- (id)_rootImpl;
- (void)_routeEventIfNeeded:(id)a0 toSubview:(id)a1;
- (void)_scrollIfNecessaryToKeepSelectionVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionLayerFrameForView:(id)a0;
- (void)_send1MenuPopulate;
- (void)_sendMenuEnableItems;
- (void)_sendMenuOpening;
- (void)_sendMenuPopulate;
- (void)_setHighlighted:(BOOL)a0 menuItemView:(id)a1;
- (void)_setNeedsUpdateMenuSeparators;
- (void)_stopDelay;
- (id)_textFieldResponder;
- (void)_updateMenuSeparators;
- (void)_updateMenuSeparatorsIfNeeded;
- (id)_viewAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)addSubmenu:(id)a0;
- (double)additionalPulldownMenuOffset;
- (double)additionalTitleOffsetForItem:(id)a0;
- (BOOL)allowsBackingViewDisplay;
- (void)becomeKeyIfNeeded;
- (void)beginGroupingLayoutChanges;
- (void)beginGroupingUpdates;
- (BOOL)canBeginAutoScrollWithEvent:(id)a0;
- (void)didBecomeKey;
- (void)didDismissSubmenu:(id)a0;
- (void)didResignKey;
- (void)didScrollAboveThreshold:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)dismissAnimated:(BOOL)a0 completion:(id /* block */)a1;
- (void)dismissSingleSubmenuAnimated:(BOOL)a0;
- (void)dismissSubmenuAnimated:(BOOL)a0;
- (void)dismissSubmenuAnimated:(BOOL)a0 coalescingSubmenus:(BOOL)a1;
- (void)endGroupingLayoutChanges;
- (void)endGroupingUpdates;
- (BOOL)filterMenuWithKeyEvent:(id)a0;
- (void)forEachRepresentationViewDo:(id /* block */)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForViewAtMenuIndex:(long long)a0;
- (void)handleMouseEvent:(id)a0;
- (BOOL)hasBottomPadding;
- (BOOL)hasTopPadding;
- (void)highlightItemAtIndex:(long long)a0;
- (void)highlightItemUnderMouse;
- (BOOL)highlightNext:(long long)a0;
- (BOOL)highlightNext:(long long)a0 axis:(long long)a1;
- (BOOL)highlightNextPageOrLastVisibleItem;
- (BOOL)highlightNextSectionOrLastVisibleItem;
- (BOOL)highlightNextVisibleItemIfExists;
- (BOOL)highlightPrevious:(long long)a0;
- (BOOL)highlightPrevious:(long long)a0 axis:(long long)a1;
- (BOOL)highlightPreviousPageOrFirstVisibleItem;
- (BOOL)highlightPreviousSectionOrFirstVisibleItem;
- (BOOL)highlightPreviousVisibleItemIfExists;
- (id)initWithMenu:(id)a0;
- (BOOL)isEventTargetingCustomMenuItemView:(id)a0;
- (double)lineHeight;
- (id)makeViewForMenuItemAtIndex:(long long)a0 withFilterQuery:(id)a1;
- (double)markWidthsForItem:(id)a0;
- (void)menuItemDidBecomeFirstResponder:(id)a0;
- (void)mouseMoved:(id)a0;
- (void)notifySuperOfSubmenuDismissalIfNeeded:(id)a0;
- (BOOL)openSubmenuFromHighlightedItem;
- (BOOL)openSubmenuFromView:(id)a0;
- (void)openSubmenuIfNeeded;
- (BOOL)openWithOptions:(long long)a0 selectedItem:(long long)a1;
- (void)performActionWithHighlightingForItemAtIndex:(long long)a0 invocationType:(unsigned long long)a1;
- (void)performDefaultAction:(id)a0 completion:(id /* block */)a1;
- (BOOL)performKeyEquivalent:(id)a0;
- (void)performMenuAction:(SEL)a0 withTarget:(id)a1;
- (BOOL)performSearchWithString:(id)a0;
- (void)popUpMenu:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1 width:(double)a2 forView:(id)a3 withSelectedItem:(long long)a4 withFont:(id)a5;
- (void)popUpMenu:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1 width:(double)a2 forView:(id)a3 withSelectedItem:(long long)a4 withFont:(id)a5 withFlags:(unsigned long long)a6 withOptions:(id)a7;
- (void)popUpMenu:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1 width:(double)a2 view:(id)a3 selectedItemIndexProvider:(id /* block */)a4 font:(id)a5 flags:(unsigned long long)a6 options:(id)a7;
- (void)popUpMenu:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1 width:(double)a2 view:(id)a3 selectedItemIndexProvider:(id /* block */)a4 font:(id)a5 positioningRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a6 flags:(unsigned long long)a7 options:(id)a8;
- (void)popupWindowWillShrinkMenu:(double)a0;
- (double)preferredViewHeightForMenuItemAtIndex:(unsigned long long)a0;
- (void)prepareToOpenSubmenuAtIndex:(long long)a0 options:(long long)a1;
- (void)presentSubmenuWindow:(id)a0 fromView:(id)a1 parentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 highlightingFirstItem:(BOOL)a3 withDelay:(BOOL)a4;
- (void)reloadHeightForFilteredMenuItems:(id)a0 withAdditionalSpacingExcludingPadding:(double)a1;
- (void)removeHighlightIfNeededForMenuItemView:(id)a0 withNewItem:(id)a1;
- (BOOL)shouldDismissOnEvent:(id)a0 withTracking:(long long)a1;
- (BOOL)shouldHighlightMenuItemView:(id)a0;
- (void)submenuDidBecomeKey;
- (void)supermenuDidBecomeKey;
- (void)unhighlightItemIfNeeded;
- (void)unhighlightItemIfNeededWithoutResigningFirstResponder;
- (void)updateModifierFlagsTo:(unsigned long long)a0;
- (id)viewAtCurrentMouseLocation:(id)a0;
- (void)viewDidDisappear;
- (void)viewWillAppear;

@end
