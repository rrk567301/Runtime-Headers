@class NSWindowStackController, NSDictionary, NSDockTile, NSColor, NSKVOForwarder, NSMutableSet, NSWindowAuxiliary, NSResponder, NSStatusItem, NSScreen, CAContext, NSTouchBar, CALayer, NSButtonCell, NSTitlebarAccessoryViewController, NSEvent, NSURL, NSWindowTab, NSWindowController, _NSWMWindowTilingStateController, NSAppearance, NSArray, NSFocusController, _TtC6AppKitP33_AC11E6D80E8F29D0F38A4234F2D641AD35NSWindowPocketAppearanceCoordinator, NSWindowFocusProxy, NSMutableDictionary, NSColorSpace, NSString, NSObject, _NSTrackingAreaManager, NSTabBarItem, NSWindowTabGroup, NSView, NSImage, NSViewController, NSSet, NSToolbar, NSHostedViewScene;
@protocol NSAppearanceCustomization, NSWindowDelegate, _NSGestureEnvironment, _NSDisplayLinkInfoProvider, NSSharingServicePickerToolbarItemDelegate;

@interface NSWindow : NSResponder <NSAppearanceCustomizationInternal, NSISEngineDelegate, NSWindowScrollPocketElementProviding, _NSDisplayLinkInfoProvider, _NSDisplayLinkCreatingWithOptions, NSViewRoot, NSGestureRecognizerDelegate, WMWindowDelegate, NSTouchBarProviderContainer, NSKVOForwarding, NSAnimatablePropertyContainer, NSMenuItemValidation, NSUserInterfaceValidations, NSUserInterfaceItemIdentification, NSAppearanceCustomization, NSAccessibilityElement, NSAccessibility> {
    NSResponder *_firstResponder;
    int _level;
    NSColor *_backgroundColor;
    unsigned char _flushDisabled : 1;
    unsigned char _ignoreResignEvent : 1;
    NSImage *_miniIcon;
    struct CGSize { double x0; double x1; } *_sizeLimits;
    NSString *_frameSaveName;
    NSToolbar *_toolbar;
    id _defaultButtonCell;
    NSView *_initialFirstResponderX;
    NSMutableDictionary *_windowLayoutsByScreenLayout;
    NSMutableDictionary *_lastUserWindowLayoutsByScreenUUID;
    unsigned long long _moveGenerationForScreenLayout;
    unsigned long long _resizeGenerationForScreenLayout;
    unsigned long long _saveWindowLayoutSuspensionCount;
    unsigned int _autoPositionMask;
    BOOL _didSetAutoPositionMask;
    long long _windowNum;
    _NSTrackingAreaManager *_trackingAreaManager;
    NSEvent *_lastWindowMovedEvent;
    NSView *_contentView;
    id _delegate;
    unsigned char _styleMask;
    struct __wFlags { unsigned char backing : 2; unsigned char visible : 1; unsigned char isMainWindow : 1; unsigned char isKeyWindow : 1; unsigned char hidesOnDeactivate : 1; unsigned char dontFreeWhenClosed : 1; unsigned char oneShot : 1; unsigned char deferred : 1; unsigned char unused0 : 3; unsigned char docEdited : 1; unsigned char staticDepthLimit : 1; unsigned char worksWhenModal : 1; unsigned char limitedBecomeKey : 1; unsigned char needsFlush : 1; unsigned char viewsNeedDisplay : 1; unsigned char ignoredFirstMouse : 1; unsigned char repostedFirstMouse : 1; unsigned char hasPendingMiniaturize : 1; unsigned char tempHidden : 1; unsigned char floatingPanel : 1; unsigned char wantsToBeOnMainScreen : 1; unsigned char needsBuildLayerTree : 1; unsigned char deferCanDraw : 1; unsigned char titleIsRepresentedFilename : 1; unsigned char excludedFromWindowsMenu : 1; unsigned char depthLimit : 4; unsigned char delegateReturnsValidRequestor : 1; unsigned char lmouseupPending : 1; unsigned char rmouseupPending : 1; unsigned char hasColorSensitiveUI : 1; unsigned char wantsToRegDragTypes : 1; unsigned char unused5 : 1; unsigned char avoidsActivation : 1; unsigned char frameSavedUsingTitle : 1; unsigned char didRegDragTypes : 1; unsigned char delayedOneShot : 1; unsigned char postedNeedsDisplayNote : 1; unsigned char unused2 : 1; unsigned char initialFirstResponderTempSet : 1; unsigned char autodisplay : 1; unsigned char tossedFirstEvent : 1; unsigned char unused6 : 1; unsigned char autolayoutEngagedSomewhere : 1; unsigned char hasRegisteredBackdropViews : 1; unsigned char unused3 : 1; unsigned char keyViewSelectionDirection : 2; unsigned char defaultButtonCellKETemporarilyDisabled : 1; unsigned char defaultButtonCellKEDisabled : 1; unsigned char menuHasBeenSet : 1; unsigned char unused7 : 1; unsigned char showingModalFrame : 1; unsigned char unused4 : 1; unsigned char makingFirstResponderForMouseDown : 1; unsigned char needsZoom : 1; unsigned char sentWindowNeedsDisplayMsg : 1; unsigned char wasModalAtSometime : 1; unsigned char unused8 : 1; } _wFlags;
    NSWindowAuxiliary *_auxiliaryStorage;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frame;
    NSView *_lastLeftHit;
    NSView *_lastRightHit;
    id _fieldEditor;
    NSView *_borderView;
    NSMutableSet *_dragTypes;
    int _winEventMask;
    unsigned long long _currentZoomState;
    unsigned long long _previousZoomState;
    long long _previousScreenNumber;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _previousFrameForScreenChange;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frameAtStartMove;
    struct CGPoint { double x; double y; } _cursorLocationAtStartMove;
    NSScreen *_screenAtStartMove;
    BOOL _didStartMove;
    BOOL _hidesTitlebarWhenShared;
    CAContext *_contentContext;
    CALayer *_contentLayer;
    NSArray *_previewRepresentableActivityItems;
    NSKVOForwarder *_KVOForwarder;
    _NSWMWindowTilingStateController *_tilingStateController;
    long long _orderFrontAnimationType;
    long long _orderOutAnimationType;
    double _effectiveCornerRadius;
    NSHostedViewScene *_hostedViewScene;
    BOOL _dontPassResponderSearchBackToApp;
}

@property (class, readonly) double maxBackingScaleFactor;
@property (class, readonly, copy) NSSet *_allowedRunLoopModesForToolTips;
@property (class, readonly) int defaultDepthLimit;
@property (class) BOOL allowsAutomaticWindowTabbing;
@property (class, readonly) long long userTabbingPreference;

@property (nonatomic, readonly) _TtC6AppKitP33_AC11E6D80E8F29D0F38A4234F2D641AD35NSWindowPocketAppearanceCoordinator *_pocketAppearanceCoordinator;
@property (nonatomic, readonly) NSString *_adaptationDebugDescription;
@property (readonly, getter=isTabOverviewVisible) BOOL tabOverviewVisible;
@property (retain, setter=_setTabBarAccessoryViewController:) NSTitlebarAccessoryViewController *_tabBarAccessoryViewController;
@property (readonly, retain) NSTabBarItem *_tabBarItem;
@property (setter=_setWindowStackController:) NSWindowStackController *_windowStackController;
@property (readonly) NSWindow *_currentlySelectedTabbedWindow;
@property (retain) NSResponder *_beforeTabPickerResponder;
@property (readonly) Class _trackingAreaManagerClass;
@property BOOL allowsCursorRectsWhenInactive;
@property (readonly) BOOL _shouldUpdateTrackingAreasDuringScrolling;
@property (readonly) BOOL _hasValidCursorRects;
@property (readonly, copy) NSArray *drawers;
@property (readonly) NSTouchBar *touchBar;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, weak) NSStatusItem *statusItem;
@property (setter=_setIsEventShapeValid:) BOOL _isEventShapeValid;
@property (setter=_setIsDrawnTrusted:) BOOL _isDrawnTrusted;
@property (setter=_setValidateSecurityOfSuperlayers:) BOOL _validateSecurityOfSuperlayers;
@property (readonly) BOOL allowsInteriorShadow;
@property (weak) id timeMachineDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) BOOL hasCloseBox;
@property (readonly) BOOL hasTitleBar;
@property (readonly, getter=isFloatingPanel) BOOL floatingPanel;
@property (readonly, getter=isMiniaturizable) BOOL miniaturizable;
@property (readonly, getter=isModalPanel) BOOL modalPanel;
@property (readonly, getter=isResizable) BOOL resizable;
@property (readonly, getter=isZoomable) BOOL zoomable;
@property long long orderedIndex;
@property (readonly) id<_NSGestureEnvironment> gestureEnvironment;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, getter=isInKeyWindow) BOOL inKeyWindow;
@property (readonly) NSView *contentView;
@property (readonly, getter=isVisible) BOOL visible;
@property (readonly) double _displayScale;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) id<_NSDisplayLinkInfoProvider> _parentDisplayLinkInfoProvider;
@property (readonly) BOOL _shouldPauseDisplayLink;
@property (readonly) int _displayIDForDisplayLink;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isRestorable) BOOL restorable;
@property Class restorationClass;
@property (readonly, copy) NSArray *_scrollPocketElements;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, weak) id<NSSharingServicePickerToolbarItemDelegate> _supplementalSharingServicePickerToolbarItemDelegate;
@property (readonly) BOOL _wantsFocusSystem;
@property (retain) NSFocusController *_focusController;
@property (readonly) BOOL _wantsGameControllerNavigationEvents;
@property (readonly) NSWindowFocusProxy *_focusProxy;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) id<NSAppearanceCustomization> _effectiveAppearanceParent;
@property (retain) NSAppearance *appearance;
@property (readonly) NSAppearance *effectiveAppearance;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, setter=_setFunctionRowContext:) CAContext *_functionRowContext;
@property (readonly) BOOL _hasPendingMiniaturize;
@property (retain, nonatomic, setter=_setDesktopIconRectInfos:) NSArray *_desktopIconRectInfos;
@property (copy, nonatomic, setter=_setPersistentIdentifierForWindowManagement:) NSString *_persistentIdentifierForWindowManagement;
@property (nonatomic, setter=_setStubProcessSerialNumberForWindowManagement:) struct CPSProcessSerNum { unsigned int x0; unsigned int x1; } _stubProcessSerialNumberForWindowManagement;
@property (readonly, weak) CAContext *_contextForLayerHosting;
@property (readonly, weak) CAContext *_layerHostedContext;
@property (readonly, weak) CAContext *_windowLayerContext;
@property (readonly) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } _layerTransformToHost;
@property (readonly, getter=_isFunctionRowWindow) BOOL _functionRowWindow;
@property BOOL hasColorSensitiveUI;
@property (readonly) BOOL _ignoreForIntelligence;
@property (readonly) BOOL _skipIntelligenceWindowSnapshot;
@property (retain, nonatomic, setter=_setDesktopIconRectInfos:) NSArray *_desktopIconRectInfos;
@property (copy, nonatomic, setter=_setPersistentIdentifierForWindowManagement:) NSString *_persistentIdentifierForWindowManagement;
@property (nonatomic, setter=_setStubProcessSerialNumberForWindowManagement:) struct CPSProcessSerNum { unsigned int x0; unsigned int x1; } _stubProcessSerialNumberForWindowManagement;
@property (readonly, weak) CAContext *_contextForLayerHosting;
@property (readonly, weak) CAContext *_layerHostedContext;
@property (readonly, weak) CAContext *_windowLayerContext;
@property (readonly) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } _layerTransformToHost;
@property (readonly, getter=_isFunctionRowWindow) BOOL _functionRowWindow;
@property BOOL hasColorSensitiveUI;
@property (readonly) BOOL _ignoreForIntelligence;
@property (readonly) BOOL _skipIntelligenceWindowSnapshot;
@property (copy) NSString *title;
@property (copy) NSString *subtitle;
@property long long titleVisibility;
@property BOOL titlebarAppearsTransparent;
@property long long toolbarStyle;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentLayoutRect;
@property (readonly) id contentLayoutGuide;
@property (copy) NSArray *titlebarAccessoryViewControllers;
@property (copy) NSURL *representedURL;
@property (copy) NSString *representedFilename;
@property (getter=isExcludedFromWindowsMenu) BOOL excludedFromWindowsMenu;
@property (retain) NSView *contentView;
@property (weak) id<NSWindowDelegate> delegate;
@property (readonly) long long windowNumber;
@property unsigned long long styleMask;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } cascadingReferenceFrame;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (readonly) BOOL inLiveResize;
@property struct CGSize { double x0; double x1; } resizeIncrements;
@property struct CGSize { double x0; double x1; } aspectRatio;
@property struct CGSize { double x0; double x1; } contentResizeIncrements;
@property struct CGSize { double x0; double x1; } contentAspectRatio;
@property BOOL viewsNeedDisplay;
@property BOOL preservesContentDuringLiveResize;
@property (readonly, weak) NSResponder *firstResponder;
@property (readonly) unsigned long long resizeFlags;
@property (getter=isReleasedWhenClosed) BOOL releasedWhenClosed;
@property (readonly, getter=isZoomed) BOOL zoomed;
@property (readonly, getter=isMiniaturized) BOOL miniaturized;
@property (copy) NSColor *backgroundColor;
@property (getter=isMovable) BOOL movable;
@property (getter=isMovableByWindowBackground) BOOL movableByWindowBackground;
@property BOOL hidesOnDeactivate;
@property BOOL canHide;
@property (retain) NSImage *miniwindowImage;
@property (copy) NSString *miniwindowTitle;
@property (readonly) NSDockTile *dockTile;
@property (getter=isDocumentEdited) BOOL documentEdited;
@property (readonly, getter=isVisible) BOOL visible;
@property (readonly, getter=isKeyWindow) BOOL keyWindow;
@property (readonly, getter=isMainWindow) BOOL mainWindow;
@property (readonly) BOOL canBecomeKeyWindow;
@property (readonly) BOOL canBecomeMainWindow;
@property (readonly) BOOL worksWhenModal;
@property BOOL preventsApplicationTerminationWhenModal;
@property (readonly) double backingScaleFactor;
@property BOOL allowsToolTipsWhenApplicationIsInactive;
@property unsigned long long backingType;
@property long long level;
@property int depthLimit;
@property (readonly) BOOL hasDynamicDepthLimit;
@property (readonly) NSScreen *screen;
@property (readonly) NSScreen *deepestScreen;
@property BOOL hasShadow;
@property double alphaValue;
@property (getter=isOpaque) BOOL opaque;
@property unsigned long long sharingType;
@property BOOL allowsConcurrentViewDrawing;
@property BOOL displaysWhenScreenProfileChanges;
@property BOOL canBecomeVisibleWithoutLogin;
@property unsigned long long collectionBehavior;
@property long long animationBehavior;
@property (readonly, getter=isOnActiveSpace) BOOL onActiveSpace;
@property (readonly, copy) NSString *stringWithSavedFrame;
@property (readonly, copy) NSString *frameAutosaveName;
@property struct CGSize { double x0; double x1; } minSize;
@property struct CGSize { double x0; double x1; } maxSize;
@property struct CGSize { double x0; double x1; } contentMinSize;
@property struct CGSize { double x0; double x1; } contentMaxSize;
@property struct CGSize { double x0; double x1; } minFullScreenContentSize;
@property struct CGSize { double x0; double x1; } maxFullScreenContentSize;
@property (readonly, copy) NSDictionary *deviceDescription;
@property (weak) NSWindowController *windowController;
@property (readonly, copy) NSArray *sheets;
@property (readonly) NSWindow *attachedSheet;
@property (readonly, getter=isSheet) BOOL sheet;
@property (readonly) NSWindow *sheetParent;
@property (readonly, copy) NSArray *childWindows;
@property (weak) NSWindow *parentWindow;
@property (weak) NSObject<NSAppearanceCustomization> *appearanceSource;
@property (retain) NSColorSpace *colorSpace;
@property (readonly) unsigned long long occlusionState;
@property long long titlebarSeparatorStyle;
@property (retain) NSViewController *contentViewController;
@property (weak) NSView *initialFirstResponder;
@property (readonly) unsigned long long keyViewSelectionDirection;
@property (retain) NSButtonCell *defaultButtonCell;
@property BOOL autorecalculatesKeyViewLoop;
@property (retain) NSToolbar *toolbar;
@property BOOL showsToolbarButton;
@property long long tabbingMode;
@property (copy) NSString *tabbingIdentifier;
@property (readonly, copy) NSArray *tabbedWindows;
@property (readonly) NSWindowTab *tab;
@property (readonly, weak) NSWindowTabGroup *tabGroup;
@property (readonly) BOOL hasActiveWindowSharingSession;
@property (readonly) long long windowTitlebarLayoutDirection;
@property (readonly) NSKVOForwarder *_KVOForwarder;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy) NSDictionary *animations;
@property (copy) NSString *identifier;
@property (retain) NSAppearance *appearance;
@property (readonly) NSAppearance *effectiveAppearance;
@property (getter=isAccessibilityElement) BOOL accessibilityElement;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } accessibilityFrame;
@property (getter=isAccessibilityFocused) BOOL accessibilityFocused;
@property struct CGPoint { double x0; double x1; } accessibilityActivationPoint;
@property (weak) id accessibilityTopLevelUIElement;
@property (copy) NSURL *accessibilityURL;
@property (retain) id accessibilityValue;
@property (copy) NSString *accessibilityValueDescription;
@property (copy) NSArray *accessibilityVisibleChildren;
@property (copy) NSString *accessibilitySubrole;
@property (copy) NSString *accessibilityTitle;
@property (weak) id accessibilityTitleUIElement;
@property (copy) NSArray *accessibilityNextContents;
@property long long accessibilityOrientation;
@property (retain) id accessibilityOverflowButton;
@property (weak) id accessibilityParent;
@property (copy) NSString *accessibilityPlaceholderValue;
@property (copy) NSArray *accessibilityPreviousContents;
@property (copy) NSString *accessibilityRole;
@property (copy) NSString *accessibilityRoleDescription;
@property (retain) id accessibilitySearchButton;
@property (retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected) BOOL accessibilitySelected;
@property (copy) NSArray *accessibilitySelectedChildren;
@property (copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (retain) id accessibilityShownMenu;
@property (retain) id accessibilityMinValue;
@property (retain) id accessibilityMaxValue;
@property (copy) NSArray *accessibilityLinkedUIElements;
@property (weak) id accessibilityWindow;
@property (copy) NSString *accessibilityIdentifier;
@property (copy) NSString *accessibilityHelp;
@property (copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityExpanded) BOOL accessibilityExpanded;
@property (getter=isAccessibilityEdited) BOOL accessibilityEdited;
@property (getter=isAccessibilityEnabled) BOOL accessibilityEnabled;
@property (copy) NSArray *accessibilityChildren;
@property (copy) NSArray *accessibilityChildrenInNavigationOrder;
@property (retain) id accessibilityClearButton;
@property (retain) id accessibilityCancelButton;
@property (getter=isAccessibilityProtectedContent) BOOL accessibilityProtectedContent;
@property (copy) NSArray *accessibilityContents;
@property (copy) NSString *accessibilityLabel;
@property (getter=isAccessibilityAlternateUIVisible) BOOL accessibilityAlternateUIVisible;
@property (copy) NSArray *accessibilitySharedFocusElements;
@property (getter=isAccessibilityRequired) BOOL accessibilityRequired;
@property (copy) NSArray *accessibilityCustomRotors;
@property (copy) NSArray *accessibilityUserInputLabels;
@property (copy) NSArray *accessibilityAttributedUserInputLabels;
@property (retain) id accessibilityApplicationFocusedUIElement;
@property (retain) id accessibilityMainWindow;
@property (getter=isAccessibilityHidden) BOOL accessibilityHidden;
@property (getter=isAccessibilityFrontmost) BOOL accessibilityFrontmost;
@property (retain) id accessibilityFocusedWindow;
@property (copy) NSArray *accessibilityWindows;
@property (weak) id accessibilityExtrasMenuBar;
@property (weak) id accessibilityMenuBar;
@property (copy) NSArray *accessibilityColumnTitles;
@property (getter=isAccessibilityOrderedByRow) BOOL accessibilityOrderedByRow;
@property long long accessibilityHorizontalUnits;
@property long long accessibilityVerticalUnits;
@property (copy) NSString *accessibilityHorizontalUnitDescription;
@property (copy) NSString *accessibilityVerticalUnitDescription;
@property (copy) NSArray *accessibilityHandles;
@property (retain) id accessibilityWarningValue;
@property (retain) id accessibilityCriticalValue;
@property (getter=isAccessibilityDisclosed) BOOL accessibilityDisclosed;
@property (weak) id accessibilityDisclosedByRow;
@property (retain) id accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel;
@property (copy) NSArray *accessibilityMarkerUIElements;
@property (retain) id accessibilityMarkerValues;
@property (retain) id accessibilityMarkerGroupUIElement;
@property long long accessibilityUnits;
@property (copy) NSString *accessibilityUnitDescription;
@property long long accessibilityRulerMarkerType;
@property (copy) NSString *accessibilityMarkerTypeDescription;
@property (retain) id accessibilityHorizontalScrollBar;
@property (retain) id accessibilityVerticalScrollBar;
@property (copy) NSArray *accessibilityAllowedValues;
@property (copy) NSArray *accessibilityLabelUIElements;
@property float accessibilityLabelValue;
@property (copy) NSArray *accessibilitySplitters;
@property (retain) id accessibilityDecrementButton;
@property (retain) id accessibilityIncrementButton;
@property (copy) NSArray *accessibilityTabs;
@property (retain) id accessibilityHeader;
@property long long accessibilityColumnCount;
@property long long accessibilityRowCount;
@property long long accessibilityIndex;
@property (copy) NSArray *accessibilityColumns;
@property (copy) NSArray *accessibilityRows;
@property (copy) NSArray *accessibilityVisibleRows;
@property (copy) NSArray *accessibilitySelectedRows;
@property (copy) NSArray *accessibilityVisibleColumns;
@property (copy) NSArray *accessibilitySelectedColumns;
@property long long accessibilitySortDirection;
@property (copy) NSArray *accessibilityRowHeaderUIElements;
@property (copy) NSArray *accessibilitySelectedCells;
@property (copy) NSArray *accessibilityVisibleCells;
@property (copy) NSArray *accessibilityColumnHeaderUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityRowIndexRange;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityColumnIndexRange;
@property long long accessibilityInsertionPointLineNumber;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySharedCharacterRange;
@property (copy) NSArray *accessibilitySharedTextUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityVisibleCharacterRange;
@property long long accessibilityNumberOfCharacters;
@property (copy) NSString *accessibilitySelectedText;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySelectedTextRange;
@property (copy) NSArray *accessibilitySelectedTextRanges;
@property (retain) id accessibilityToolbarButton;
@property (getter=isAccessibilityModal) BOOL accessibilityModal;
@property (retain) id accessibilityProxy;
@property (getter=isAccessibilityMain) BOOL accessibilityMain;
@property (retain) id accessibilityFullScreenButton;
@property (retain) id accessibilityGrowArea;
@property (copy) NSString *accessibilityDocument;
@property (retain) id accessibilityDefaultButton;
@property (retain) id accessibilityCloseButton;
@property (retain) id accessibilityZoomButton;
@property (retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized) BOOL accessibilityMinimized;
@property (copy) NSArray *accessibilityCustomActions;

+ (BOOL)_hasOverrideForSelector:(SEL)a0;
+ (void)initialize;
+ (void)_addWindowTabsMenuItemsIfNeeded;
+ (long long)_readWindowTabbingModeFromPrefs;
+ (BOOL)_shouldMiniaturizeOnDoubleClick;
+ (void)_batchMinimizeWindowsWithBlock:(id /* block */)a0;
+ (void)_calcKeyAndMain;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustFrameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forResize:(struct CGSize { double x0; double x1; })a1 resizeEdges:(unsigned long long)a2;
+ (BOOL)_allowsNontitledResizableWindows;
+ (void)_automateActivateDeactivate;
+ (long long)_baseModalWindowLevel;
+ (BOOL)_batchOrderWindows:(unsigned long long)a0 withBlock:(id /* block */)a1;
+ (unsigned int)_copyDeferWindowManagerIPCPort;
+ (BOOL)_currentWorkspaceIsUserSpace;
+ (id)_defaultShadowSpec;
+ (id /* block */)_deferWindowManagerIPCUntil;
+ (void)_disableKeyStateChangeNotifications;
+ (void)_enableKeyStateChangeNotifications;
+ (void)_getExteriorResizeEdgeThicknesses:(double[8])a0 forStyleMask:(unsigned long long)a1;
+ (void)_getResizeEdgeAndCornerThicknesses:(double[8])a0 forStyleMask:(unsigned long long)a1;
+ (BOOL)_hiddenInWindowList;
+ (BOOL)_hidesChromeWhenFullScreen;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_integralizeProposedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 againstExistingFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
+ (BOOL)_isStyleMaskEffectivelyTitled:(unsigned long long)a0;
+ (void)_minimizeAll;
+ (void)_minimizeAllBypassingWindowManager:(id)a0;
+ (long long)_mouseHysteresisCheck:(id)a0 withExpiration:(id)a1 andDistance:(struct CGSize { double x0; double x1; })a2 finalMouseLocation:(struct CGPoint { double x0; double x1; } *)a3;
+ (void)_noteTabsNeedIndexing;
+ (void)_postActiveFirstResponderChanged;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_savedFrameFromString:(id)a0;
+ (BOOL)_sendDockMenuCommand:(unsigned int)a0 withTag:(unsigned long long)a1 modifierFlags:(unsigned long long)a2;
+ (void)_setBaseWindowModalLevel:(long long)a0;
+ (void)_setShouldInvertImplicitBehavior:(BOOL)a0;
+ (void)_setShouldInvertImplicitBehaviorToYesForCurrentRunLoop;
+ (void)_setTabPlusButtonWasClicked:(BOOL)a0;
+ (BOOL)_shouldFillOnDoubleClick;
+ (BOOL)_shouldInvertImplicitBehavior;
+ (BOOL)_shouldZoomOnDoubleClick;
+ (void)_tabbedWindowsFinishedRestoration;
+ (double)_tileDividerInteriorResizeEdgeThickness;
+ (void)_updateTabbingModePreference;
+ (BOOL)_useReducedMotionFullScreenTransition;
+ (unsigned long long)_validateStyleMask:(unsigned long long)a0;
+ (BOOL)_wantsAutomaticWindowTabbing;
+ (id)_windowNumbersWithOptions:(unsigned long long)a0 onSpace:(unsigned long long)a1;
+ (id)_windowWithContentViewController:(id)a0 styleMask:(unsigned long long)a1;
+ (id)_windowWithPersistentUIWindowID:(unsigned int)a0;
+ (BOOL)automaticallyNotifiesObserversOfAppearance;
+ (BOOL)automaticallyNotifiesObserversOfBackgroundColor;
+ (BOOL)automaticallyNotifiesObserversOfContentLayoutGuide;
+ (BOOL)automaticallyNotifiesObserversOfContentLayoutRect;
+ (BOOL)automaticallyNotifiesObserversOfFirstResponder;
+ (BOOL)automaticallyNotifiesObserversOfFrame;
+ (BOOL)automaticallyNotifiesObserversOfHasActiveWindowSharingSession;
+ (BOOL)automaticallyNotifiesObserversOfHostsLayersInWindowServer;
+ (BOOL)automaticallyNotifiesObserversOfScreen;
+ (BOOL)automaticallyNotifiesObserversOfTitlebarAppearsTransparent;
+ (BOOL)automaticallyNotifiesObserversOfUndoManager;
+ (BOOL)automaticallyNotifiesObserversOfVisible;
+ (BOOL)automaticallyNotifiesObserversOf_borderView;
+ (BOOL)automaticallyNotifiesObserversOf_effectiveCornerRadius;
+ (BOOL)automaticallyNotifiesObserversOf_functionRowContext;
+ (BOOL)automaticallyNotifiesObserversOf_titlebarBackdropGroupName;
+ (BOOL)automaticallyNotifiesObserversOf_windowLayerContext;
+ (BOOL)canBeResizedFromInterior;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentRectForFrameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 styleMask:(unsigned long long)a1;
+ (struct OpaqueCUIRendererRef { } *)coreUIRenderer;
+ (id)defaultAnimationForKey:(id)a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameRectForContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 styleMask:(unsigned long long)a1;
+ (Class)frameViewClassForStyleMask:(unsigned long long)a0;
+ (id)keyPathsForValuesAffectingAppearance;
+ (id)keyPathsForValuesAffectingContentLayoutRect;
+ (id)keyPathsForValuesAffectingEffectiveAppearance;
+ (id)keyPathsForValuesAffectingTitlebarBlendingMode;
+ (id)keyPathsForValuesAffectingUndoManager;
+ (id)keyPathsForValuesAffecting_appearanceForAttachedPopovers;
+ (struct CGSize { double x0; double x1; })minContentSizeForMinFrameSize:(struct CGSize { double x0; double x1; })a0 styleMask:(unsigned long long)a1;
+ (struct CGSize { double x0; double x1; })minFrameSizeForMinContentSize:(struct CGSize { double x0; double x1; })a0 styleMask:(unsigned long long)a1;
+ (double)minFrameWidthWithTitle:(id)a0 styleMask:(unsigned long long)a1;
+ (void)removeFrameUsingName:(id)a0;
+ (void)setUserTabbingPreference:(long long)a0;
+ (BOOL)shouldPreferWindowTabbingForEvent:(id)a0;
+ (BOOL)shouldPreferWindowTabbingForEvent:(id)a0 withIdentifier:(id)a1;
+ (double)standardContentBorderThicknessForEdge:(unsigned long long)a0 borderSize:(unsigned long long)a1 styleMask:(unsigned long long)a2;
+ (id)standardWindowButton:(unsigned long long)a0 forStyleMask:(unsigned long long)a1;
+ (long long)windowNumberAtPoint:(struct CGPoint { double x0; double x1; })a0 belowWindowWithWindowNumber:(long long)a1;
+ (id)windowNumbersWithOptions:(unsigned long long)a0;
+ (id)windowWithContentViewController:(id)a0;

- (void)selectNextTab:(id)a0;
- (BOOL)validateMenuItem:(id)a0;
- (id)animator;
- (void)setContentSize:(struct CGSize { double x0; double x1; })a0;
- (id)attributedSubtitle;
- (id)menu;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrame;
- (id)displayTitle;
- (void)setAttributedSubtitle:(id)a0;
- (BOOL)validateUserInterfaceItem:(id)a0;
- (void)sendEvent:(id)a0;
- (double)_effectiveCornerRadius;
- (void)_close;
- (void)mouseDown:(id)a0;
- (void)becomeKeyWindow;
- (long long)_effectiveToolbarStyle;
- (void)setMenu:(id)a0;
- (void)cancelOperation:(id)a0;
- (void)setIsVisible:(BOOL)a0;
- (void)center;
- (void)layoutIfNeeded;
- (void)dealloc;
- (void)keyDown:(id)a0;
- (long long)uniqueID;
- (void)displayIfNeeded;
- (id)undoManager;
- (void)encodeRestorableStateWithCoder:(id)a0;
- (id)recursiveDescription;
- (struct CGSize { double x0; double x1; })_shadowOffset;
- (void)encodeWithCoder:(id)a0;
- (void)_setCornerRadius:(double)a0;
- (void)_moveTabToNewWindow:(id)a0;
- (double)_cornerRadius;
- (void)_close:(id)a0;
- (BOOL)_hasBackgroundColor;
- (id)init;
- (void)removeObserver:(id)a0 forKeyPath:(id)a1 context:(void *)a2;
- (void)doCommandBySelector:(SEL)a0;
- (id)_displayName;
- (void)display;
- (void)_screenChanged:(id)a0;
- (void)restoreStateWithCoder:(id)a0;
- (void)constraintsDidChangeInEngine:(id)a0;
- (void)update;
- (BOOL)_isHidden;
- (id)document;
- (id)initWithCoder:(id)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)heartBeat:(struct { double x0; double x1; double x2; struct { unsigned char x0 : 1; unsigned int x1 : 31; } x3; } *)a0;
- (void)setValue:(id)a0 forKey:(id)a1;
- (struct CGSize { double x0; double x1; })_shadowRadius;
- (void)_setFirstResponder:(id)a0;
- (id)currentEvent;
- (void)close;
- (void).cxx_destruct;
- (void)selectPreviousTab:(id)a0;
- (void)addObserver:(id)a0 forKeyPath:(id)a1 options:(unsigned long long)a2 context:(void *)a3;
- (id)objectSpecifier;
- (id)NS_touchBarProviders;
- (BOOL)_allowsOrdering;
- (BOOL)_animationShouldCallFlushWindow;
- (id)_bindingAdaptor;
- (BOOL)_canMiniaturize;
- (void)_cgsSizeWindow:(struct CGSize { double x0; double x1; })a0;
- (void)_changeKeyState;
- (void)_clearAnyValidResponderOverride;
- (id)_destroyRealWindowIfNotVisible:(id)a0;
- (id)_displayChanged;
- (id)_displayChangedWithoutAdjusting;
- (void)_doOrderWindow:(id)a0;
- (void)_doTabbedWindowDidChangeToolbar;
- (void)_fromConstraintsSetWindowFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_hasCursorRects;
- (void)_invalidateCompositedBackground;
- (BOOL)_isWidgetWindow;
- (void)_layout_setPrimitiveAnchorInfo:(id)a0;
- (void)_markCursorRectsForRemovedView:(id)a0;
- (BOOL)_minimizeToDock;
- (void)_moveToDisplay:(id)a0;
- (void)_recalculateKeyViewLoopIfNeeded;
- (void)_resignKeyFocus;
- (id)_savedFirstResponderForRenaming;
- (void)_selectNextTab:(id)a0;
- (void)_setAnyViewCanDrawConcurrently:(BOOL)a0;
- (void)_setCornerPath:(struct CGPath { } *)a0;
- (void)_setFrameEventTime:(unsigned long long)a0 forWMWindow:(id)a1;
- (void)_setSharesParentFirstResponder:(BOOL)a0;
- (void)_setShouldAutoFlattenLayerTree:(BOOL)a0;
- (void)_setViewsNeedUpdateConstraints:(BOOL)a0;
- (void)_setWindowDepth;
- (void)_sizeAllDrawers;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_standardFrameForDrawersInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_tabbedWindowsDidExitFullScreen;
- (void)_titlebarEditingDidEndNormally:(BOOL)a0 title:(id)a1 editingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 grantHandler:(id /* block */)a3;
- (BOOL)_toolbarIsShown;
- (id)_trailingSidebarTrackingAdapter;
- (BOOL)_tryLockViewHierarchyForWriting;
- (void)_unlockSublevel;
- (void)_updateFrameToScreenConstraints;
- (void)_validSize:(struct CGSize { double x0; double x1; } *)a0 forFullScreen:(BOOL)a1 force:(BOOL)a2;
- (id)_viewDetaching:(id)a0;
- (BOOL)_wantsFullScreenTileDropTargets;
- (id)accessibilityActionDescription:(id)a0;
- (void)editTitleWithCompletionHandler:(id /* block */)a0;
- (id)graphicsContext;
- (void)pinTab:(id)a0;
- (void)resignKeyWindow;
- (void)rightMouseDown:(id)a0;
- (void)runToolbarCustomizationPalette:(id)a0;
- (void)setCanHostLayersInWindowServer:(BOOL)a0;
- (void)setFrameOrigin:(struct CGPoint { double x0; double x1; })a0;
- (void)setShadowStyle:(unsigned long long)a0;
- (void)setTitleHidden:(BOOL)a0;
- (struct CGSize { double x0; double x1; })standardWindowButtonGroupOffset;
- (id)tab;
- (void)GDBDumpCursorRects;
- (id)NS_touchBarProvidersKeyPaths;
- (void)__close;
- (struct CGSize { double x0; double x1; })_actualMinFullScreenContentSize;
- (BOOL)_allowsSnapping;
- (BOOL)_canAutoParticipateInWindowTabs;
- (void)_changeAllDrawersFirstResponder;
- (void)_changeJustMain;
- (void)_clearKeyWindow;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentResizeRectForFrameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_createSiblingTileForWindow:(id)a0 preferredPositions:(unsigned long long)a1 responseHandler:(id /* block */)a2;
- (id)_currentDividerResizeDirections;
- (void)_disablePosting;
- (id)_displayChangedSoAdjustWindows:(BOOL)a0;
- (void)_doFullScreenCleanupForOrderOut;
- (id)_documentWindow;
- (void)_dragWindowRelativeToMouseDown:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_draggableFrame;
- (id)_findKeyLoopGroupingViewFollowingKeyLoopGroupingView:(id)a0 direction:(unsigned long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameRectForContentResizeRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_fullScreenModalStackController;
- (void)_handleResignKeyAppearanceEvent;
- (void)_hideAllDrawers;
- (BOOL)_isSidebarEffectivelyFullHeight;
- (BOOL)_isTitledWindow;
- (void)_layoutViewTree;
- (void)_resumeWindowServerLayerHosting;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_savedFrameForExitingFullScreen;
- (void)_setIsRemovingFromParentWindow:(BOOL)a0;
- (void)_setKeyViewRedirectionDisabled:(BOOL)a0;
- (void)_setModeDisablesServerSideDrag:(BOOL)a0;
- (void)_setSharingWantsRecordingStyle:(BOOL)a0;
- (void)_setTempHidden:(BOOL)a0;
- (void)_setWindowResizeConstraintSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)_shouldOpenInNewFullScreenSpace;
- (BOOL)_shouldStartWindowDragForEvent:(id)a0;
- (id)_texturePattern;
- (long long)_trackingAreaIDForTrackingArea:(id)a0;
- (void)_unhideChildren;
- (void)_updateEventMaskDueToOrderedOut;
- (void)_updateFullScreenSpaceDockTitle;
- (void)_verifyDefaultButtonCellIfDirty;
- (void)_viewAttaching:(id)a0;
- (BOOL)_wantsHeartBeat;
- (void)_windowExposed:(id)a0;
- (id)accessibilityMinimizedAttribute;
- (unsigned long long)backingLocation;
- (id)displayLinkWithTarget:(id)a0 selector:(SEL)a1;
- (void)draggingExited:(id)a0;
- (void)guessDockTitle:(id)a0;
- (unsigned long long)liveResizeEdges;
- (void)runToolbarConfigurationPalette:(id)a0;
- (void)setAutodisplay:(BOOL)a0;
- (void)setTabbingMode:(long long)a0;
- (void)setTitlebarBlurFiltersDisabled:(BOOL)a0;
- (void)setUserInterfaceItemIdentifier:(id)a0;
- (BOOL)showsLockButton;
- (void)_absorbDeferredNeedsDisplayRegion;
- (BOOL)_acceptsSecondaryKey;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_accessibilityFrameForElement:(id)a0;
- (BOOL)_accessibilityIsModal;
- (void)_accessibilitySetSwiftUIDelegate:(id)a0;
- (void)_accessibilitySetTitleCellRemoved:(BOOL)a0;
- (id)_accessibilitySheetParent;
- (id)_accessibilitySubtitleCell;
- (id)_accessibilitySwiftUIDelegate;
- (id)_accessibilityTitleCell;
- (BOOL)_accessibilityTitleCellRemoved;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_accessibilityTitleRect;
- (id)_accessibilityViewCorrectedForFieldEditor:(id)a0;
- (void)_acquireNextMinimizationSeed;
- (void)_activateTrackingRectsForApplicationActivation;
- (BOOL)_addCursorRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 cursor:(id)a1 forView:(id)a2;
- (void)_addKnownSubview:(id)a0;
- (void)_addKnownSubview:(id)a0 positioned:(long long)a1 relativeTo:(id)a2;
- (void)_addMouseMovedListener:(id)a0;
- (void)_addTabbedWindow:(id)a0 ordered:(long long)a1;
- (void)_addToGroups:(id)a0 ordered:(long long)a1;
- (void)_addToWindowsMenuIfNecessary;
- (void)_addTouchListener:(id)a0;
- (void)_adjustChildWindowMovementOffsets;
- (void)_adjustColorSpace:(BOOL)a0;
- (void)_adjustDynamicDepthLimit;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 constrained:(BOOL)a1 forSheet:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fittingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_adjustMinAndMaxSizeForSheet:(BOOL)a0;
- (void)_adjustNeedsDisplayRegionForNewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_adjustWindowFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 forMoveFromScreen:(id)a1 toScreen:(id)a2;
- (void)_adjustWindowFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 forMoveFromScreen:(id)a1 toScreen:(id)a2 location:(struct CGPoint { double x0; double x1; })a3;
- (void)_adjustWindowFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 fromScreen:(id)a1 toScreen:(id)a2;
- (void)_adjustWindowMovementOffsetsRelativeToParent;
- (void)_adjustWindowResolution;
- (void)_adjustWindowToScreen;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustedFrameForSaving:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustedFrameFromDefaults:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })_adjustedOriginAroundAnchorPointForSize:(struct CGSize { double x0; double x1; })a0 fromFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)_allowEdgeResizingCursorsInInactiveApp;
- (BOOL)_allowedInDashboardSpaceWithCollectionBehavior:(unsigned long long)a0;
- (BOOL)_allowedInOtherAppsFullScreenSpaceWithCollectionBehavior:(unsigned long long)a0;
- (BOOL)_allowsActiveInputContext;
- (BOOL)_allowsActiveInputContextDuringMenuTracking;
- (BOOL)_allowsAnyValidResponder;
- (BOOL)_allowsCompositing;
- (BOOL)_allowsExteriorResizing;
- (BOOL)_allowsFullHeightFloatingSidebarLayout;
- (BOOL)_allowsImplicitRemovalFromMovementGroup;
- (BOOL)_allowsMoving;
- (BOOL)_allowsRootLayerBacking;
- (BOOL)_allowsSizeSnapping;
- (void)_animateFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 viaBlock:(id /* block */)a1;
- (BOOL)_anyViewCanDrawConcurrently;
- (id)_appearanceForAttachedPopovers;
- (unsigned long long)_applicationTerminationBehaviorWhenModal;
- (BOOL)_applyWindowLayoutForScreen:(id)a0;
- (void)_applyWindowLevelWithTagUpdateNeeded:(BOOL)a0;
- (void)_asyncDragImage:(id)a0 at:(struct CGPoint { double x0; double x1; })a1 offset:(struct CGSize { double x0; double x1; })a2 event:(id)a3 pasteboard:(id)a4 source:(id)a5 slideBack:(BOOL)a6;
- (void)_attachHostedViewScene:(id)a0;
- (void)_attachSheetWindow:(id)a0;
- (BOOL)_attemptToCloseAllTabs:(id)a0;
- (BOOL)_attemptToSnapWindowSizeWithEvent:(id)a0;
- (unsigned long long)_autoPositionMask;
- (BOOL)_autohidesToolbar;
- (void)_autolayoutEngagedSomewhereInWindow;
- (void)_automateLiveResize;
- (unsigned long long)_automaticApplicationTerminationBehaviorWhenModal;
- (id)_aux;
- (BOOL)_avoidsActivation;
- (float)_backdropBleedAmount;
- (double)_backingStoreResolution;
- (unsigned long long)_backingType;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_baseTransform;
- (id)_batchClose;
- (id)_batchZoom;
- (void)_beginATUWindowDragForGreenButtonPressAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_beginFauxModalSession;
- (BOOL)_beginNextQueuedSheetIfNecessary;
- (void)_beginNextQueuedSheetInGroupIfNecessary;
- (void)_beginSheet:(id)a0 completionHandler:(id /* block */)a1 isCritical:(BOOL)a2;
- (void)_beginWindowBlockingModalSessionForSheet:(id)a0 service:(id)a1 completionHandler:(id /* block */)a2 isCritical:(BOOL)a3;
- (void)_beginWindowBlockingModalSessionForShownService:(id)a0;
- (void)_beginWindowDragWithEvent:(id)a0 options:(unsigned long long)a1;
- (void)_beginWindowDragWithEvent:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)_bestGuessSectionInElements:(id)a0 sectionKey:(id)a1 compareFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)_bestScreenByGeometry;
- (id)_bestScreenByGeometryOfFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 avoidingFullScreen:(BOOL)a1;
- (id)_bestScreenByGeometryOfFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 respectingSpaceAssignment:(BOOL)a1;
- (id)_bestScreenBySpaceAssignment;
- (id)_bestScreenBySpaceAssignmentOrGeometry;
- (void)_bindTitleToContentViewController;
- (BOOL)_blocksActionWhenModal:(SEL)a0;
- (BOOL)_blocksKeyAndMainWindowTouchBarsWhenModal;
- (id)_borderView;
- (BOOL)_borderViewCanAddWindowTabs;
- (void)_borderViewChanged;
- (double)_bottomBarHeight;
- (double)_bottomCornerRadius;
- (void)_cacheAndSetPropertiesForCollectionBehavior:(unsigned long long)a0;
- (long long)_cachedGlobalWindowNum;
- (id)_calcAndSetFilenameTitle;
- (BOOL)_canAddUnderTitlebarViews;
- (BOOL)_canAdjustSizeForScreensHaveSeparateSpacesIfFillingSecondaryScreen;
- (BOOL)_canAutoQuitQuietlyAndSafelyWithOptionalExplanation:(id)a0;
- (BOOL)_canBeRemovedFromStageManagerSet;
- (BOOL)_canBeSnappingTarget;
- (BOOL)_canBecomeMainWindowAndVisibleOrHidden;
- (BOOL)_canBecomeMainWindowWithoutVisibilityCheck;
- (BOOL)_canBecomeSecondaryKeyWindow;
- (BOOL)_canCloseOtherTabs;
- (BOOL)_canEditTitle;
- (BOOL)_canEnterFullScreenOrTileMode;
- (BOOL)_canEnterTileMode;
- (BOOL)_canEnterTileModeForBehavior:(unsigned long long)a0;
- (BOOL)_canJoinActiveFullScreenSpace;
- (BOOL)_canJoinFullScreenSpace:(unsigned long long)a0;
- (BOOL)_canJoinFullScreenSpace:(unsigned long long)a0 forRestoration:(BOOL)a1;
- (BOOL)_canMergeWindows;
- (BOOL)_canMiniaturizeCheckingMask:(BOOL)a0 forButtonEnabledState:(BOOL)a1;
- (BOOL)_canMoveTabToNewWindow;
- (BOOL)_canQuitQuietlyAndSafelyWithOptionalExplanation:(id)a0;
- (BOOL)_canSelectNextOrPreviousTab;
- (BOOL)_canTabMergeWithIdentifier:(id)a0;
- (BOOL)_canTabWithIdentifier:(id)a0;
- (void)_cancelKey:(id)a0;
- (void)_cancelPerformSelectors;
- (BOOL)_cancelTitleEditing;
- (void)_cancelWindowSharingTransferRequestIfApplicable;
- (unsigned int)_carbonWindowClass;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_cascadingReferenceFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_centerSheetFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forParent:(id)a1 inParentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (struct CGImage { } *)_cgImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(unsigned int)a1;
- (struct CGImage { } *)_cgImageScreenShot;
- (struct CGImage { } *)_cgImageScreenShotIncludingShadow:(BOOL)a0 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 visualEffectViewWithDesktopBleedOnly:(BOOL)a2 spaceID:(unsigned long long)a3;
- (struct CGImage { } *)_cgImageScreenShotIncludingSpaceID:(unsigned long long)a0;
- (void)_cgsMoveWindow:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 moveGroup:(BOOL)a1;
- (void)_cgsPlaceWindow:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_cgsPositionManagedByExternalAgent;
- (void)_cgsWindowRelativeMoveChildrenWithGroup;
- (BOOL)_cgsWindowSaysSupportsTiling;
- (void)_changeAllAttachmentsFirstResponder;
- (void)_changeAllAttachmentsKeyState;
- (void)_changeAllAttachmentsMainState;
- (void)_changeAllAttachmentsVisibleWithoutLogin;
- (void)_changeAllDrawersKeyState;
- (void)_changeAllDrawersMainState;
- (void)_changeFirstResponderToParentsFirstResponder;
- (void)_changeKeyAndMainLimitedOK:(BOOL)a0;
- (void)_changeMainState;
- (void)_changeVisibleWithoutLogin;
- (void)_changeWindowFrameFromConstraintsIfNecessary;
- (void)_changeWindowTileLocation:(id)a0;
- (void)_checkForImplicitRemovalFromMovementGroupWhenMovingToFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (long long)_childLevel:(long long)a0;
- (long long)_childWindowOrderingPriority;
- (id)_childWindows;
- (BOOL)_classAndTitleAllowMain;
- (void)_cleanupAndRemoveFullScreenContentController;
- (void)_cleanupToolbarFromFullScreen;
- (void)_clearMainWindow;
- (id)_clearModalWindowLevel;
- (void)_clearWindowSharingTransferHostView;
- (void)_clickRecognized:(id)a0;
- (void)_closeForTermination;
- (id)_closestElementToPosition:(struct CGPoint { double x0; double x1; })a0 inElements:(id)a1;
- (struct CGPoint { double x0; double x1; })_collapsedOrigin;
- (BOOL)_colorSpaceIsInherited;
- (void)_commonAwake;
- (void)_commonInitFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 styleMask:(unsigned long long)a1 backing:(unsigned long long)a2 defer:(BOOL)a3;
- (void)_commonMinMaxSizeChanged;
- (BOOL)_commonPerformKeyEquivalent:(id)a0 conditionally:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_commonValidFrameForResizeFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromResizeEdge:(unsigned long long)a1;
- (id)_compositedBackground;
- (BOOL)_confirmSize:(struct CGSize { double x0; double x1; } *)a0 force:(BOOL)a1;
- (BOOL)_containedMenusAreEligibleForKeyEquivalents;
- (double)_contentBlurRadius;
- (BOOL)_contentHasShadow;
- (void)_contentViewControllerChanged;
- (BOOL)_contentsHaveInvalidRestorableState;
- (BOOL)_contextIDRemoteStatusChangeShouldAffectWindow:(unsigned int)a0;
- (BOOL)_controlAppearanceChangesOnKeyStateChange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertAdjustedFrameFromDefaults:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRectFromIntegralizationSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRectToIntegralizationSpace:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })_convertViewRootPointFromScreen:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })_convertViewRootPointToScreen:(struct CGPoint { double x0; double x1; })a0;
- (void)_coordinateScrollPocketAppearance:(id)a0 luma:(double)a1 glassFrost:(long long)a2 glassMaterialProviderPocket:(id)a3 windowRelativeFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 forPocket:(id)a5;
- (void)_coordinateScrollPocketAppearance:(id)a0 luma:(double)a1 glassFrost:(long long)a2 windowRelativeFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 forPocket:(id)a4;
- (void)_coordinateScrollPocketAppearance:(id)a0 windowRelativeFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 forPocket:(id)a2;
- (id)_copyAcquiredViewHierarchyLockForReading;
- (id)_copyMinimizeDictionary;
- (id)_copyNeedsDisplayRegionInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 validateSubtractedRegion:(BOOL)a1;
- (id)_copyPublicPersistentUIInfo;
- (id)_copyWorkspaceIdentifier;
- (id)_cornerMask;
- (void)_cornerMaskChanged;
- (BOOL)_cornerMaskShouldDefineShadow;
- (struct CGPath { } *)_cornerPath;
- (struct CGPath { } *)_createEventShapePath;
- (void)_createFullScreenContentControllerIfNeeded;
- (id)_createHostViewForSharing;
- (struct __CFDictionary { } *)_createWindowsMenuEntryWithTitle:(id)a0 enabled:(BOOL)a1;
- (id)_creationCallStackAdresses;
- (id)_creationCallStackSymbols;
- (void)_crossfadeMoveToFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forAdjustmentToScreen:(id)a1;
- (unsigned long long)_currentZoomState;
- (BOOL)_currentlyAllowsFullScreenMode;
- (id)_cursorForResizeDirection:(long long)a0;
- (id)_customImageForStandardWindowButton:(unsigned long long)a0 state:(unsigned long long)a1 dirty:(BOOL)a2 controlTint:(unsigned long long)a3;
- (id)_customTitleCell;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_customTitleFrame;
- (void)_cycleDrawers:(id)a0;
- (void)_cycleDrawersBackwards:(id)a0;
- (void)_cycleDrawersReversed:(BOOL)a0;
- (void)_cycleWindows:(id)a0;
- (void)_cycleWindowsBackwards:(id)a0;
- (void)_deactivateTrackingRectsForApplicationDeactivation;
- (void)_decrementViewCount;
- (BOOL)_defaultButtonPaused;
- (unsigned long long)_defaultCollectionBehavior;
- (id)_defaultColorSpaceForScreen;
- (BOOL)_deferQuickLookIfPossible;
- (BOOL)_delayedWindowDisplayEnabled;
- (void)_deminiaturizeBypassingWindowManager;
- (long long)_depthOfSubview:(id)a0;
- (void)_desktopIconRectInfosChanged;
- (void)_destroyLocalWindowSharingWindowController;
- (id)_destroyRealWindow:(BOOL)a0;
- (void)_destroyWMWindow;
- (void)_detachSheetWindow:(id)a0;
- (void)_didAddChildWindow:(id)a0;
- (void)_didChangeResolutionHint;
- (void)_didEndViewScrolling;
- (void)_didEnterFullScreen;
- (void)_didExitFullScreen;
- (void)_didFailToEnterFullScreen;
- (void)_didFailToExitFullScreen;
- (void)_didRemoveChildWindow:(id)a0;
- (void)_didResignKeyAppearance;
- (void)_didRestoreUserActivity:(id)a0;
- (void)_disableDelayedWindowDisplay;
- (void)_disableEnablingKeyEquivalentForDefaultButtonCell;
- (void)_disableFullScreenMenubarAutohiding;
- (BOOL)_disableParentSheetDimming;
- (BOOL)_disableSheetAnimation;
- (void)_disableToolTipCreationAndDisplay;
- (void)_disableTrackingArea:(id)a0;
- (void)_disableTrackingRect:(long long)a0;
- (id)_discardCursorRectsForView:(id)a0;
- (void)_discardTrackingRect:(long long)a0;
- (void)_discardTrackingRects:(long long *)a0 count:(long long)a1;
- (void)_discardWindowResizeConstraintsAndMarkAsNeedingUpdate;
- (void)_dismissModalForTerminate;
- (void)_displayAllDrawersIfNeeded;
- (id)_displayLinkWithOptions:(unsigned long long)a0 handler:(id /* block */)a1;
- (id)_displayLinkWithOptions:(unsigned long long)a0 target:(id)a1 selector:(SEL)a2;
- (void)_displayProfileChanged;
- (void)_displayResolutionChanged;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_divideFrameForEdge:(unsigned long long)a0;
- (void)_doNonVisibleTabDeminimize;
- (void)_doNonVisibleTabMinimize;
- (void)_doOrderOutEndedButAttachedSheets;
- (int)_doRestoreComingFromDock:(BOOL)a0 forceActivation:(BOOL)a1 wantsToBeKey:(BOOL)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_doScreenSizeSnappingFromResizedEdge:(unsigned long long)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 state:(struct { BOOL x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; unsigned long long x5; BOOL x6; unsigned long long x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8[64]; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9[64]; double x10; double x11; double x12; double x13; struct CGRect *x14; unsigned long long x15; id x16; BOOL x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; } *)a2;
- (void)_doSnapToFrame;
- (void)_doTabbedWindowCleanupForOrderOut;
- (void)_doTabbedWindowMadeKey;
- (void)_doTabbedWindowOrderFront;
- (BOOL)_doTabbedWindowOrderInWithWasVisible:(BOOL)a0 mode:(long long)a1;
- (void)_doTabbedWindowSyncTitleToTabBar;
- (void)_doTabbedWindowSyncToolbar;
- (void)_doTabbedWindowWillEnterVersionsEditor;
- (void)_doTabbedWindowWillExitVersionsEditor;
- (void)_doUpdateTilingConstraintsImmediately;
- (void)_doWindowTabCleanupForStyleMaskChange;
- (void)_doWindowTabOrderAbove:(id)a0;
- (void)_doWindowTabOrderOut;
- (void)_doWindowTabSetupAttemptingToJoinExistingStack:(BOOL)a0 makeIfNeeded:(BOOL)a1;
- (void)_doWindowWillBeVisibleAsSheet:(BOOL)a0;
- (void)_doWindowWillBecomeHidden;
- (void *)_dockItem;
- (id)_documentAutosavingError;
- (long long)_documentEditingState;
- (BOOL)_documentShowsPanelOnClose;
- (BOOL)_doesOwnRealWindow;
- (BOOL)_doingCacheDisplayInRect;
- (void)_dosetTitle:(id)a0 andDefeatWrap:(BOOL)a1;
- (id)_dragTypes;
- (void)_dragWindowRelativeToMouseDown:(struct CGPoint { double x0; double x1; })a0 options:(unsigned long long)a1;
- (void)_dragWindowRelativeToMouseDown:(struct CGPoint { double x0; double x1; })a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (void)_drawKeyboardUIIndicationForView:(id)a0 debuggingIndex:(id)a1;
- (void)_drawKeyboardUILoopIfNeededForEvent:(id)a0;
- (void)_drawKeyboardUILoopStartingAtResponder:(id)a0 validOnly:(BOOL)a1;
- (void)_dropSharedFirstResponder;
- (id)_dumpImage;
- (id)_dumpLayer;
- (BOOL)_edgeResizingCursorUpdate:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1;
- (unsigned long long)_editingModeForTitle:(id)a0 editingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2;
- (long long)_effectiveAnimationBehaviorIfModal:(BOOL)a0;
- (unsigned long long)_effectiveCollectionBehavior;
- (long long)_effectiveOrderFrontAnimationTypeIfModal:(BOOL)a0;
- (long long)_effectiveOrderOutAnimationTypeIfModal:(BOOL)a0;
- (long long)_effectiveTitlePosition;
- (double)_effectiveTitlebarAlphaValue;
- (long long)_effectiveToolbarStyleAssumingExpandedIfHidden;
- (unsigned long long)_effectiveWindowTypeFromCollectionBehavior;
- (void)_enableDelayedWindowDisplay;
- (void)_enableEnablingKeyEquivalentForDefaultButtonCell;
- (void)_enableFullScreenMenubarAutohiding;
- (void)_enablePosting;
- (void)_enableScreenUpdatesIfNeeded;
- (void)_enableToolTipCreationAndDisplay;
- (void)_enableTrackingArea:(id)a0;
- (void)_enableTrackingRect:(long long)a0;
- (void)_encodeTabbedWindowRestorableStateWithCoder:(id)a0;
- (void)_encodeWindowLayoutsByScreenLayoutWithCoder:(id)a0;
- (void)_endFauxModalSession;
- (void)_endLiveResize;
- (void)_endLiveResizeForAllDrawers;
- (void)_endLocalRenameSession;
- (void)_endRemoteRenameSession;
- (void)_endTitlebarRenamingPrecleanup;
- (void)_endWindowBlockingModalSession:(struct _NSModalSession { id x0; id x1; struct _NSModalSession *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; BOOL x9; short x10; long long x11; id x12; id x13; SEL x14; void *x15; long long x16; id x17; id /* block */ x18; id x19; BOOL x20; } *)a0 returnCode:(long long)a1;
- (void)_endWindowBlockingModalSessionForShownService:(id)a0;
- (void)_endWindowMoveWithEvent:(id)a0;
- (void)_endWindowSharingSessionForOrderOutIfNeeded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_enforceFullScreenRestrictionForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_enforceMenuBarAvoidanceForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1;
- (void)_ensureStackControllerExists;
- (void)_enterATUWithTileOnLeft:(BOOL)a0;
- (void)_enterAutomaticFullScreen;
- (void)_enterFullScreenIfNeededAfterMiniturized;
- (void)_enterFullScreenModeForRestoration;
- (void)_enterFullScreenModeForRestorationAndSwitchToSpace;
- (BOOL)_enterFullScreenModeForRestorationInParentSpaceWithName:(id)a0 previousTileRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 previousParentSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 previousSpaceOrder:(id)a3;
- (BOOL)_enterFullScreenModeOnTileSpaceWithName:(id)a0;
- (BOOL)_enterFullScreenModeOnTileSpaceWithName:(id)a0 takeOwnership:(BOOL)a1;
- (void)_enterFullScreenModeWithTransition:(id)a0;
- (id)_eventFirstResponderChainDescription;
- (BOOL)_eventIsOldSelectNextPreviousTabKeyEquivalent:(id)a0 direction:(BOOL *)a1;
- (id)_eventMonitorForRenaming;
- (void)_eventWasFiltered:(id)a0;
- (BOOL)_excludeFromOrderingGroup;
- (BOOL)_excludedFromVisibleWindowList;
- (id)_expandedTitleCell;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_expandedTitleCellRect;
- (BOOL)_explicitlyAllowsFullScreenAuxiliary;
- (BOOL)_explicitlyAllowsFullScreenPrimary;
- (void)_filterDownPotentialSectionResult:(id)a0 keys:(id)a1;
- (void)_finalUpdateSectionResult:(id)a0 withCandidates:(id)a1 element:(id)a2 keys:(id)a3 allowMultiple:(BOOL)a4;
- (id)_findDragTargetFrom:(id)a0;
- (id)_findFirstKeyViewInDirection:(unsigned long long)a0 forKeyLoopGroupingView:(id)a1;
- (id)_findStandardWindowButton:(unsigned long long)a0;
- (void)_finishClosingWindow;
- (void)_finishDeminiaturizeFromDock:(BOOL)a0;
- (void)_finishMinimizeToDock;
- (void)_finishedMakingConnections;
- (id)_firstPossibleNonContainerContentInWindowChildren:(id)a0;
- (BOOL)_firstResponderCanBeWeak;
- (id)_firstResponderIvar;
- (BOOL)_firstResponderIvarExpectedToBeSet;
- (BOOL)_firstResponderIvarIs:(id)a0;
- (void)_fixIgnoredKeyMainAppearancesIfNeeded;
- (void)_forceFlushWindowToScreen;
- (BOOL)_forceInactiveShadow;
- (BOOL)_forceMainAppearance;
- (BOOL)_forceSheetTransparency;
- (BOOL)_forwardActionToParent:(SEL)a0;
- (BOOL)_forwardedObserveValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 resizedFromEdge:(unsigned long long)a1 withDelta:(struct CGSize { double x0; double x1; })a2 withEvent:(id)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 resizedFromEdge:(unsigned long long)a1 withDelta:(struct CGSize { double x0; double x1; })a2 withEvent:(id)a3 withState:(struct { BOOL x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; unsigned long long x5; BOOL x6; unsigned long long x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8[64]; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9[64]; double x10; double x11; double x12; double x13; struct CGRect *x14; unsigned long long x15; id x16; BOOL x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; } *)a4;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForFullScreenMode;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForFullScreenModeInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForVisualizedConstraintsWindow:(id)a0;
- (BOOL)_frameIsCurrentlyAnimating;
- (BOOL)_frameOriginIsCurrentlyAnimating;
- (double)_frameworkScaleFactor;
- (void)_fromConstraintsCalculateWindowMinSize:(struct CGSize { double x0; double x1; } *)a0 maxSize:(struct CGSize { double x0; double x1; } *)a1 allowDynamicLayout:(BOOL)a2 changingOnlySlightly:(BOOL)a3;
- (void)_fromConstraintsGetWindowMinSize:(struct CGSize { double x0; double x1; } *)a0 maxSize:(struct CGSize { double x0; double x1; } *)a1 allowDynamicLayout:(BOOL)a2 changingOnlySlightly:(BOOL)a3;
- (void)_fromScreenCommonCode:(id)a0;
- (id)_fullScreenContentController;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_fullScreenParentFrame;
- (id)_fullScreenPreferredJoinRatioDefaultsKey;
- (unsigned long long)_fullScreenPresentationOptions;
- (long long)_fullScreenSidebarToolbarMaterial;
- (BOOL)_fullScreenSidebarUsesWithinWindowBlending;
- (void)_fullScreenStatusChanged;
- (BOOL)_fullScreenTileFillsScreen;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_fullScreenTileFrame;
- (double)_fullScreenTitlebarMinHeight;
- (void)_fullScreenUpdateUserSpaceSavedFrameIfNeeded;
- (id)_generateCompositedBackground;
- (id)_gestureRecognizersForTouch:(id)a0;
- (id)_getActiveUndoManager;
- (void)_getConstrainedWindowMinSize:(struct CGSize { double x0; double x1; } *)a0 maxSize:(struct CGSize { double x0; double x1; } *)a1;
- (void)_getConstrainedWindowMinSize:(struct CGSize { double x0; double x1; } *)a0 maxSize:(struct CGSize { double x0; double x1; } *)a1 changingOnlySlightly:(BOOL)a2;
- (void)_getEdgeResizingRects:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (void)_getEdgeResizingRects:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 allowedEdges:(unsigned long long)a1;
- (void)_getEdgeResizingRects:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 forBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 allowedEdges:(unsigned long long)a2;
- (void)_getExteriorResizeEdgeThicknesses:(double[8])a0;
- (id)_getPositionFromServer;
- (void)_getResizeEdgeAndCornerThicknesses:(double[8])a0;
- (void)_getRetainedLastFocusRingView:(id *)a0 bleedRegion:(id *)a1;
- (id)_getUndoManager:(BOOL)a0;
- (long long)_globalWindowNum;
- (id)_gradientImage;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_growBoxRect;
- (void)_handleDesktopBackgroundClickEnd;
- (void)_handleFocusToolbarHotKey:(id)a0;
- (void)_handleMouseDownEvent:(id)a0 isDelayedEvent:(BOOL)a1;
- (void)_handleMouseDraggedEvent:(id)a0;
- (void)_handleResignMainAppearanceEvent;
- (void)_handleWindowShouldCloseEvent:(id)a0;
- (BOOL)_hasActiveAppearance;
- (BOOL)_hasActiveAppearanceForStandardWindowButton:(unsigned long long)a0;
- (BOOL)_hasActiveAppearanceIgnoringKeyFocus;
- (BOOL)_hasActiveControls;
- (BOOL)_hasBottomAccessoryViewController;
- (BOOL)_hasBottomAccessoryViewControllerNeedingBackground;
- (BOOL)_hasContiguousBottomAccessoryViewController;
- (BOOL)_hasCursorRectsForView:(id)a0;
- (BOOL)_hasDescendentThatSharesKeyStatusWithSelfAndHasKeyAppearanceIncludingSheets:(BOOL)a0;
- (BOOL)_hasEverHadInvalidRestorableState;
- (BOOL)_hasFullSizeContentView;
- (BOOL)_hasGradientBackground;
- (BOOL)_hasIncompatibleAppearanceOverride;
- (BOOL)_hasInvalidRestorableState;
- (BOOL)_hasKeyAppearance;
- (BOOL)_hasMainAppearance;
- (BOOL)_hasMouseMovedListeners;
- (BOOL)_hasQueuedSheets;
- (BOOL)_hasRegisteredForDragTypes;
- (BOOL)_hasSiblingSpaceWhenFullScreenPrefersModal;
- (BOOL)_hasTabBarItem;
- (BOOL)_hasToolbar;
- (BOOL)_hasWindowRef;
- (BOOL)_hasWindowRefCreatedForCarbonControl;
- (void)_hideAttachedWindows:(BOOL)a0 findKey:(BOOL)a1;
- (void)_hideChildren;
- (void)_hideMenu:(id)a0;
- (void)_hideSheet:(BOOL)a0;
- (void)_hideSheetWindow:(id)a0 findKey:(BOOL)a1;
- (void)_hideToolbar:(id)a0 animate:(BOOL)a1;
- (void)_hierarchyDidChangeInView:(id)a0;
- (void)_hiliteWindow:(struct OpaqueWindowPtr { } *)a0 fromWindow:(id)a1;
- (BOOL)_hitTestInResizeRegionShouldReturnNil;
- (id)_hitTestWithHysteresisCheck:(struct CGPoint { double x0; double x1; })a0 forEvent:(id)a1 allowWindowDragging:(BOOL *)a2;
- (id /* block */)_holdResizeSnapshotWithReason:(id)a0;
- (BOOL)_hostWindowIsKey;
- (BOOL)_hostsLayersInWindowServer;
- (BOOL)_ignoreForFullScreenTransition;
- (BOOL)_ignoreForFullScreenTransitionSnapshot;
- (BOOL)_ignoreForVisibleNonFullScreenSpace;
- (BOOL)_ignoreWindowStackController;
- (BOOL)_ignoredForScripting;
- (id)_implicitTabbingIdentifier;
- (BOOL)_implicitlyAllowsFullScreenPrimary;
- (BOOL)_implicitlyAllowsWindowTabbing;
- (BOOL)_implicitlyDisallowTiling;
- (BOOL)_implicitlyTileable;
- (BOOL)_inFullScreen;
- (BOOL)_inLiveResize;
- (BOOL)_includedInParentWindowShare;
- (void)_incrementViewCount;
- (id)_initContent:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 styleMask:(unsigned long long)a1 backing:(unsigned long long)a2 defer:(BOOL)a3 contentView:(id)a4;
- (id)_initContent:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 styleMask:(unsigned long long)a1 backing:(unsigned long long)a2 defer:(BOOL)a3 screen:(id)a4 contentView:(id)a5;
- (id)_initFromGlobalWindow:(long long)a0 inRect:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1;
- (id)_initFromGlobalWindow:(long long)a0 inRect:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 styleMask:(unsigned long long)a2;
- (id)_inlineSubtitleCell;
- (id)_inlineTitleCell;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_inlineTitleRect;
- (id)_inspectorSplitViewItemSeparatorTrackingAdapter;
- (void)_installCarbonAppDockHandlers;
- (void)_installCarbonWindowEventHandlers;
- (void)_installCocoaWindowEventHandlers;
- (void)_installCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent;
- (void)_installRootMetricsHandler;
- (struct CGImage { } *)_intelligenceCaptureCGImage:(BOOL)a0;
- (void)_internalEditTitleWithCompletionHandler:(id /* block */)a0;
- (BOOL)_internalHandleAppKitDefinedEvent:(id)a0;
- (void)_interruptFrameAnimations;
- (void)_interruptPerformHoldingResizeSnapshots;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_intersectBottomCornersWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_invalidateAllRevealoversForView:(id)a0;
- (void)_invalidateCursorRectsForView:(id)a0 force:(BOOL)a1;
- (void)_invalidateDocumentIcon;
- (void)_invalidateRestorableStateOfContents;
- (void)_invalidateWindowConstraintsMinMaxSizeCache;
- (void)_invalidateWindowConstraintsMinMaxSizeCacheOnlySlightly:(BOOL)a0;
- (BOOL)_isActiveAndOnScreen:(id)a0;
- (BOOL)_isAlertWindow;
- (BOOL)_isChildOfWindow:(id)a0;
- (BOOL)_isChildOfWindowWithWindowNumber:(long long)a0;
- (BOOL)_isConsideredForActivation;
- (BOOL)_isConsideredOpenForPersistentState;
- (BOOL)_isConsideredSheetForResizing;
- (BOOL)_isDesktopIconWindow;
- (BOOL)_isDocModal;
- (BOOL)_isDocWindow;
- (BOOL)_isDraggable;
- (BOOL)_isEffectivelyTitled;
- (BOOL)_isEffectivelyVisible;
- (BOOL)_isFullScreenModal;
- (BOOL)_isImageCache;
- (BOOL)_isInHiddenWindowTab;
- (BOOL)_isInSomeVisibleSpace;
- (BOOL)_isInactiveRevisionWindow;
- (BOOL)_isInspectorEffectivelyFullHeight;
- (BOOL)_isKeyWindow;
- (BOOL)_isKeyWindowIgnoringFocus;
- (BOOL)_isModalWindow;
- (BOOL)_isNonactivatingPanel;
- (BOOL)_isOnActiveScreen;
- (BOOL)_isPerformingRestoration;
- (BOOL)_isProcessLocalWindow;
- (BOOL)_isResigningKeyFocusOnly;
- (BOOL)_isRunningADocModalAttachedSheet;
- (BOOL)_isScreenLayoutAware;
- (BOOL)_isSearch:(id)a0;
- (BOOL)_isSheetOnModalWindow;
- (BOOL)_isSheetOnNonactivatingParent;
- (BOOL)_isSheetOnWindowWithWindowNumber:(long long)a0;
- (BOOL)_isSidebarFloating;
- (BOOL)_isSnapshotRestorationEnabled;
- (BOOL)_isTabbedWithOtherWindows;
- (BOOL)_isTitleHidden;
- (BOOL)_isToolTipCreationAndDisplayEnabled;
- (BOOL)_isToolbar:(id)a0;
- (BOOL)_isUtilityWindow;
- (BOOL)_isView:(id)a0 standardWindowButtonOfType:(unsigned long long)a1;
- (BOOL)_isViewRoot;
- (BOOL)_isViewScrolling;
- (BOOL)_isWindowPointInStandardWindowButtonGroup:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_joinActiveFullScreenSpaceUsingPosition:(unsigned long long)a0;
- (BOOL)_joinFullScreenSpace:(unsigned long long)a0 usingPosition:(unsigned long long)a1 withTransition:(id)a2;
- (BOOL)_joinTiledFullScreenSpace:(unsigned long long)a0 usingPosition:(unsigned long long)a1;
- (void)_justOrderOut;
- (BOOL)_keepChildrenAttached;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_keepOnScreenSheetFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_keyViewLoopsMayCrossWindows;
- (BOOL)_keyViewRedirectionDisabled;
- (id)_kitAppearance;
- (id)_largestElementInElements:(id)a0;
- (id)_lastDragRegionData;
- (id)_lastLeftHit;
- (id)_lastRightHit;
- (void)_latchView:(id)a0 forEvent:(id)a1;
- (void)_latchViewForPressureEvent:(id)a0;
- (void)_latchViewForScrollEvent:(id)a0;
- (id)_latestStubProperties;
- (id)_layoutDescription;
- (id)_layoutEngine;
- (id)_layoutEngineEngaging;
- (id)_layoutEngineIfAvailable;
- (id)_layout_anchorInfo;
- (struct CGPoint { double x0; double x1; })_layout_anchorPoint;
- (struct CGPoint { double x0; double x1; })_layout_anchorPointInEngine;
- (id)_layout_defaultAnchorInfo;
- (id)_layout_primitiveAnchorInfo;
- (void)_lighterViewDetaching:(id)a0;
- (id)_liveResizeOperation;
- (BOOL)_lmouseUpPending;
- (id)_localSharingWindowController;
- (id)_localizedDescriptionForSectionIdentifier:(id)a0;
- (BOOL)_locationTemporary;
- (void)_lockFirstResponder;
- (void)_lockToAbsoluteSubLevel:(long long)a0;
- (void)_lockViewHierarchyForReading;
- (void)_lockViewHierarchyForWriting;
- (void)_magnificationRecognized:(id)a0;
- (void)_makeKeyRegardlessOfVisibility;
- (void)_makeNewWindowInTab;
- (BOOL)_makeParentWindowHaveFirstResponder:(id)a0;
- (void)_makeTabStackActive;
- (BOOL)_makingFirstResponderForMouseDown;
- (BOOL)_managesWindowRef;
- (void)_markAppropriateForAutomaticFullScreenMode:(BOOL)a0;
- (void)_markAsEverHavingInvalidRestorableState;
- (void)_markDefaultButtonCellDirty;
- (void)_markEndOfLiveResizeForPerformanceMeasurement;
- (void)_markStartOfLiveResizeForPerformanceMeasurement;
- (void)_maskRoundedBottomCorners:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)_maxXTitlebarButtonsWidth;
- (void)_maximizeTileToFillScreen;
- (BOOL)_measuringMinFullScreenContentSize;
- (void)_mergeAllWindows:(id)a0;
- (struct CGSize { double x0; double x1; })_minContentSizeForDrawers;
- (struct CGSize { double x0; double x1; })_minFullScreenContentSizeForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })_minSizeForDrawers;
- (double)_minXTitlebarButtonsWidth;
- (BOOL)_miniaturizedOrCanBecomeMain;
- (unsigned int)_minimizationSeed;
- (void)_minimizeSucceeded:(BOOL)a0;
- (void)_minimizeToDockBypassingWindowManager;
- (void)_miniturizeFromFullScreen;
- (struct _NSModalSession { id x0; id x1; struct _NSModalSession *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; BOOL x9; short x10; long long x11; id x12; id x13; SEL x14; void *x15; long long x16; id x17; id /* block */ x18; id x19; BOOL x20; } *)_modalSessionForShownService:(id)a0;
- (BOOL)_movableByBottomBar;
- (void)_moveAllDrawersByOffset:(struct CGSize { double x0; double x1; })a0;
- (id)_moveOffscreen;
- (void)_moveOnscreen;
- (void)_moveSheetByItself:(id)a0 delta:(struct CGPoint { double x0; double x1; })a1;
- (void)_moveToModalStackController:(id)a0;
- (void)_moveToScreen:(id)a0;
- (void)_moveTrackingArea:(id)a0 toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_moveWindowFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 fromScreen:(id)a1 toScreen:(id)a2;
- (BOOL)_needsBehindWindowBlendingForFullScreenTitlebar;
- (BOOL)_needsDisplayForEntireRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_needsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_needsTilingConstraintUpdate;
- (BOOL)_needsToRemoveFieldEditor;
- (BOOL)_needsToResetDragMargins;
- (id)_newAutoGeneratedSectionsWithSearchKeys:(id)a0 searchDepth:(long long)a1 existingElements:(id)a2;
- (id)_newFirstResponderAfterResigning;
- (id)_newSectionCandidatesForSearchElements:(id)a0 depth:(long long)a1;
- (id)_newStandardItemWithItemIdentifier:(id)a0 willBeInsertedIntoToolbar:(BOOL)a1;
- (BOOL)_nextResponderChainValidateUIItem:(id)a0 withResult:(BOOL)a1;
- (id)_nextTabbedWindowToSelect;
- (id)_nonModalDocumentError;
- (void)_noteAllowedResizeDirectionsMayHaveChanged;
- (void)_noteExteriorResizeMarginsMayHaveChanged;
- (void)_noteInstantiationFromWindowTemplate;
- (id)_nsib_candidateRedundantConstraints;
- (void)_nsib_setUsesPointIntegralizationForLayout:(BOOL)a0;
- (BOOL)_nsib_usesPointIntegralizationForLayout;
- (id)_oldFirstResponderBeforeBecoming;
- (void)_oldPlaceWindow:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromServer:(BOOL)a1;
- (double)_opaqueAspectDimensionForDimension:(double)a0 isHorizontal:(BOOL)a1;
- (id)_openDrawers;
- (void)_orderForwardWithEvent:(id)a0;
- (long long)_orderFrontAnimationType;
- (void)_orderFrontRelativeToWindow:(id)a0;
- (void)_orderOut:(BOOL)a0 calculatingKeyWithOptions:(id)a1 documentWindow:(id)a2;
- (long long)_orderOutAnimationType;
- (void)_orderOutCalculatingKeyWithOptions:(id)a0;
- (BOOL)_orderOutInProgress;
- (void)_orderOutRelativeToWindow:(id)a0;
- (void)_orderOutWhenAppHiddenRelativeToWindow:(id)a0;
- (id)_orderedAttachedWindows;
- (id)_orderedDrawerAndWindowKeyLoopGroupingViews;
- (id)_orderingGroup;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_overrideDefeatingConstrainFrameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toScreen:(id)a1 fullScreenConstrainToTile:(BOOL)a2;
- (BOOL)_ownerOnly;
- (unsigned long long)_parentSpaceID;
- (id)_parentWindowForAddingToMovementGroupWithProposedParent:(id)a0;
- (void)_pauseUIHeartBeatingInView:(id)a0;
- (BOOL)_pendingMiniaturizeViaRestoration;
- (BOOL)_performDividerDragWithEvent:(id)a0 forResizeDirection:(long long)a1;
- (void)_performHoldingResizeSnapshots:(id /* block */)a0 completionHandler:(id /* block */)a1;
- (BOOL)_performKeyEquivalentConditionally:(id)a0;
- (BOOL)_performSpecialWindowOrderingWasEffectivelyVisible:(BOOL)a0 options:(id)a1;
- (void)_performToggleToolbarShown:(id)a0;
- (unsigned long long)_permittedResizeEdges;
- (void)_persistFrame;
- (unsigned int)_persistentStateTerminationGeneration;
- (id)_persistentUIChildren;
- (id)_persistentUIIdentifier;
- (id)_persistentUIWindow;
- (unsigned int)_persistentUIWindowID;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_pixelRectInPoints:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_pointRectInPixels:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_positionAllDrawers;
- (void)_positionSheet:(id)a0 constrained:(BOOL)a1 andDisplay:(BOOL)a2;
- (void)_positionSheetsConstrained:(BOOL)a0 andDisplay:(BOOL)a1;
- (void)_positionWindowOnBestScreen;
- (BOOL)_positionWithUnmanagedFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_positioningRectForSheet:(id)a0;
- (BOOL)_positionsToolbarInExternalWindow;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_possiblyCenteredFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1;
- (void)_postInvalidCursorRects;
- (void)_postWillOrderOffScreenNotification;
- (void)_postWindowDidChangeBackingPropertiesAndDisplayWindowForPreviousBackingScaleFactor:(double)a0 previousColorSpace:(id)a1;
- (void)_postWindowNeedsDisplay;
- (void)_postWindowNeedsLayout;
- (void)_postWindowNeedsToResetDragMargins;
- (void)_postWindowNeedsUpdateConstraints;
- (void)_postWindowWillOrderOnScreenNotification;
- (BOOL)_postingDisabled;
- (id)_potentialCandidateKeyForSectionKey:(id)a0;
- (id)_preferredNextWindowToSelect;
- (unsigned long long)_preferredPositionForTileJoin;
- (BOOL)_prefersSolariumAppearance;
- (void)_preliminaryUpdateSectionResult:(id)a0 element:(id)a1 keys:(id)a2;
- (BOOL)_prepareTabbedWindowDeminimize;
- (BOOL)_prepareTabbedWindowMinimize;
- (BOOL)_prepareToMinimize;
- (void)_prepareToMinimizeCore;
- (BOOL)_prepareToRestoreFromDock:(BOOL)a0 forceActivation:(BOOL)a1 wantsToBeKey:(BOOL)a2;
- (void)_prepareToRestoreRegularFromDock:(BOOL)a0 forceActivation:(BOOL)a1 wantsToBeKey:(BOOL)a2;
- (void)_prepareToUnMinimizeFromDock:(BOOL)a0 forceActivation:(BOOL)a1 wantsToBeKey:(BOOL)a2;
- (BOOL)_prepareToZoom;
- (BOOL)_presenterOnly;
- (BOOL)_preserveAnimatingFrames;
- (void)_pressRecognized:(id)a0;
- (BOOL)_preventsActivation;
- (BOOL)_processKeyboardUIKey:(id)a0;
- (void)_provideActuationFeedbackWithEvent:(id)a0;
- (void)_queryCanAddSiblingTileForWindow:(id)a0 responseHandler:(id /* block */)a1;
- (void)_reacquireToolbarViewFromFullScreenWindow;
- (BOOL)_realMakeFirstResponder:(id)a0;
- (long long)_realWindowNumber;
- (void)_reallyDoOrderWindow:(id)a0;
- (void)_reallyDoOrderWindowAboveOrBelow:(id)a0;
- (void)_reallyDoOrderWindowOutRelativeTo:(id)a0;
- (BOOL)_reallyIsVisible;
- (void)_reallySendEvent:(id)a0 isDelayedEvent:(BOOL)a1;
- (void)_reallySetFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_rebuildOrderingGroup:(BOOL)a0;
- (void)_recursiveResetTrackingAreasToPending;
- (id)_redundantConstraints;
- (void)_refreshTilingConstraints:(BOOL)a0;
- (void)_refreshWindowResizeConstraintsWithSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGSRegionObject { } *)_regionForOpaqueViewsBlockingDraggableFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSRegionObject { } *)_regionForOpaqueViewsModifiedForResizing:(struct CGSRegionObject { } *)a0;
- (void)_registerAllDrawersForDraggedTypesIfNeeded;
- (void)_registerBackdropView:(id)a0;
- (void)_registerDragTypes:(id)a0;
- (id)_registerDragTypesIfNeeded;
- (void)_registerDragTypesLater;
- (void)_registerSidebarAdapter:(id)a0;
- (void)_registerTrailingSidebarAdapter:(id)a0;
- (BOOL)_registerWithDockIfNeeded;
- (id)_registeredBackdropViews;
- (int)_regularMinimizeToDock;
- (id)_remainingHoldResizeSnapshots;
- (id)_remoteRenameSession;
- (void)_removeAllDrawersImmediately:(BOOL)a0;
- (void)_removeAsSavedFirstResponder:(id)a0;
- (void)_removeCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent;
- (BOOL)_removeCursorRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 cursor:(id)a1 forView:(id)a2;
- (void)_removeEventHandlers;
- (void)_removeFromGroups:(id)a0;
- (void)_removeFromParentIfPossible;
- (void)_removeMouseMovedListener:(id)a0;
- (void)_removeScrollPocketAppearanceCoordination:(id)a0;
- (void)_removeTileFromFullScreen:(id)a0;
- (void)_removeTouchListener:(id)a0;
- (void)_removeWindowFromStageManagerSet:(id)a0;
- (void)_removeWindowRef;
- (void)_renamingDidEndNormally:(BOOL)a0;
- (void)_reparentSheetsToSelfOnFullScreenExit;
- (void)_requestSharingOfWindow:(id)a0 title:(id)a1 image:(id)a2 completionHandler:(id /* block */)a3;
- (void)_resetAllDrawersDisableCounts;
- (void)_resetDisableCounts;
- (void)_resetDragMargins;
- (void)_resetDragMarginsIfNeeded;
- (void)_resetFirstResponder;
- (void)_resetPostingCounts;
- (void)_resetSplitViewUserPreferredThicknessFromSetAlignmentFrames;
- (void)_resetUndoManager;
- (void)_resetUndoManagerIfNecessary:(id)a0;
- (unsigned long long)_resizableEdgesForGrowing:(unsigned long long *)a0 shrinking:(unsigned long long *)a1;
- (long long)_resizeDirectionForMouseLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_resizeFromWindowManagerWithTargetGeometry:(id)a0 springSettings:(id)a1 completion:(id /* block */)a2;
- (void)_resizeSetFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withEvent:(id)a1;
- (long long)_resizeWeighting;
- (void)_resizeWithEvent:(id)a0;
- (BOOL)_resizingShouldSnapToWindows;
- (id)_responderDebugDescription;
- (id)_restorableStateRepresentedURL;
- (void)_restoreLevelAfterRunningModal;
- (id)_restoreModalWindowLevel;
- (void)_restoreStubPropertiesFromPersistentUIPropertyList:(id)a0;
- (void)_restoreTabbedWindowStateWithCoder:(id)a0;
- (void)_restoreWindowLayoutsByScreenLayoutWithCoder:(id)a0;
- (void)_restoreWindowManagementPropertiesWithCoder:(id)a0;
- (void)_resumeSavingWindowLayout;
- (void)_resumeUIHeartBeatingInView:(id)a0;
- (void)_revertZoomToEdge;
- (void)_revertZoomToScreen;
- (id)_rootViewForViewRoot;
- (void)_rotationRecognized:(id)a0;
- (BOOL)_routeEnterExitEvent:(id)a0;
- (BOOL)_runningDocModal;
- (BOOL)_runningDocModalOrFauxModal;
- (id)_runningWindowTransformAnimation;
- (void)_saveCurrentZoomState;
- (void)_saveFirstResponder;
- (void)_saveFrameBeforeFullScreen;
- (void)_saveFrameUsingName:(id)a0 domain:(id)a1;
- (void)_saveTilePreferredSize;
- (void)_saveWindowLayoutBeforeFullScreen:(BOOL)a0;
- (void)_saveWindowLayoutForScreen:(id)a0;
- (void)_saveWindowLayoutForScreenLayout;
- (void)_saveWindowLayoutFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forScreen:(id)a1;
- (void)_saveZoomInFrame;
- (id)_savedScreen;
- (double)_scaleFactor;
- (void)_scheduleWindowForBatchOrdering:(long long)a0 relativeTo:(long long)a1;
- (id)_screenForAutomatedLiveResize;
- (id)_screenForMoveBack;
- (id)_screenForWindowLayoutAdjustment;
- (BOOL)_scrollViewIntersectsSoutheastGrowCorner:(id)a0;
- (BOOL)_secondaryKeyMakeFirstResponder:(id)a0;
- (id)_sectionsForElement:(id)a0 keys:(id)a1 depth:(long long)a2 allowMultiple:(BOOL)a3;
- (BOOL)_selectAnyValidResponderOverride;
- (void)_selectFirstKeyView;
- (void)_selectPreviousTab:(id)a0;
- (void)_selectWindow:(id)a0;
- (long long)_semanticContext;
- (void)_sendAcquireKeyAppearanceChangeToResponder:(id)a0;
- (void)_sendAcquireMainAppearanceToResponder:(id)a0;
- (void)_sendAnalyticsForDismissModalForTerminate:(BOOL)a0;
- (void)_sendDesktopIconRectInfosToWM;
- (void)_sendDockFullScreenTitle:(id)a0;
- (void)_sendForcedWindowChangedKeyState;
- (void)_sendResignKeyAppearanceChangeToResponder:(id)a0;
- (void)_sendWindowChangedKeyStateIfNeeded;
- (void)_sendWindowDidEndDragging;
- (void)_sendWindowWillMoveNoteWithEvent:(id)a0;
- (void)_sendWindowWillStartDragging;
- (void)_setAlertWindow:(BOOL)a0;
- (void)_setAllowEdgeResizingCursorsInInactiveApp:(BOOL)a0;
- (void)_setApplicationTerminationBehaviorWhenModal:(unsigned long long)a0;
- (void)_setAutoPositionMask:(unsigned long long)a0;
- (void)_setAvoidsActivation:(BOOL)a0;
- (void)_setBackingScaleFactor:(double)a0;
- (int)_setBackingStoreResolution:(double)a0;
- (void)_setBindingAdaptor:(id)a0;
- (int)_setCGColorSpace:(struct CGColorSpace { } *)a0;
- (void)_setCanCycle:(BOOL)a0;
- (BOOL)_setColorSpace:(id)a0 sendNotification:(BOOL)a1 displayIfChanged:(BOOL)a2;
- (void)_setContentBlurRadius:(double)a0;
- (void)_setContentHasShadow:(BOOL)a0;
- (void)_setContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setContentsHaveInvalidRestorableState:(BOOL)a0;
- (void)_setCursorForMouseLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_setDefaultButtonCell:(id)a0;
- (void)_setDefaultButtonPaused:(BOOL)a0;
- (void)_setDisableInteraction:(BOOL)a0;
- (void)_setDisableParentSheetDimming:(BOOL)a0;
- (void)_setDisableSheetAnimation:(BOOL)a0;
- (void)_setDocModal:(BOOL)a0;
- (void)_setDocumentAutosavingError:(id)a0;
- (void)_setDocumentButtonEnabled:(BOOL)a0;
- (void)_setDocumentEdited:(BOOL)a0;
- (void)_setDocumentEditingState:(long long)a0 animate:(BOOL)a1;
- (void)_setDocumentShowsPanelOnClose:(BOOL)a0;
- (void)_setDoingCacheDisplayInRect:(BOOL)a0;
- (void)_setDontPassResponderSearchBackToApp:(BOOL)a0;
- (void)_setEffectiveCornerRadius:(double)a0;
- (void)_setEventMask:(unsigned long long)a0;
- (void)_setEventMask:(unsigned long long)a0 forTrackingRect:(long long)a1;
- (void)_setExcludedFromVisibleWindowList:(BOOL)a0;
- (void)_setFirstResponderIvar:(id)a0;
- (void)_setForceActiveControls:(BOOL)a0;
- (void)_setForceInactiveShadow:(BOOL)a0;
- (void)_setForceIsOnActiveSpace:(BOOL)a0;
- (void)_setForceMainAppearance:(BOOL)a0;
- (void)_setForceSheetTransparency:(BOOL)a0;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 display:(BOOL)a1 allowImplicitAnimation:(BOOL)a2 stashSize:(BOOL)a3;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromAdjustmentToScreen:(id)a1 anchor:(struct CGPoint { double x0; double x1; })a2 animate:(BOOL)a3;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromAdjustmentToScreen:(id)a1 anchorIfNeeded:(struct CGPoint { double x0; double x1; } *)a2 animate:(BOOL)a3;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromAdjustmentToScreen:(id)a1 animate:(BOOL)a2;
- (void)_setFrameAfterMove:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_setFrameAutosaveName:(id)a0 changeFrame:(BOOL)a1;
- (void)_setFrameCommon:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 display:(BOOL)a1 fromServer:(BOOL)a2;
- (void)_setFrameCommon:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 display:(BOOL)a1 stashSize:(BOOL)a2;
- (BOOL)_setFrameFromString:(id)a0 overrideTopLeft:(const struct CGPoint { double x0; double x1; } *)a1 preferActiveDisplay:(BOOL)a2 constrainFullFrame:(BOOL)a3 force:(BOOL)a4;
- (void)_setFrameFromString:(id)a0 preferActiveDisplay:(BOOL)a1;
- (void)_setFrameHeightDelta:(double)a0 resizingFromTop:(BOOL)a1 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2;
- (void)_setFrameNeedsDisplay:(BOOL)a0;
- (void)_setFrameSavedUsingTitle:(BOOL)a0;
- (BOOL)_setFrameUsingName:(id)a0 domain:(id)a1;
- (BOOL)_setFrameUsingName:(id)a0 domain:(id)a1 force:(BOOL)a2;
- (void)_setFrameWidthDelta:(double)a0 resizingFromRight:(BOOL)a1 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2;
- (void)_setFrameworkScaleFactor:(double)a0;
- (void)_setFullScreenPresentationOptions:(unsigned long long)a0;
- (void)_setFullScreenSavedFrameFromWindow:(id)a0;
- (void)_setFullScreenSidebarToolbarMaterial:(long long)a0;
- (void)_setFullScreenSidebarUsesWithinWindowBlending:(BOOL)a0;
- (void)_setHasActiveAppearance:(BOOL)a0;
- (void)_setHasInvalidRestorableState:(BOOL)a0;
- (void)_setIgnoreWindowStackController:(BOOL)a0;
- (void)_setIgnoresCurrentEvent:(BOOL)a0;
- (void)_setInSharingSession:(BOOL)a0;
- (void)_setInactiveRevisionWindow:(BOOL)a0;
- (void)_setIncludedInParentWindowShare:(BOOL)a0;
- (void)_setIsInHiddenWindowTab:(BOOL)a0;
- (void)_setIsMinimized:(BOOL)a0;
- (void)_setIsPerformingRestoration:(BOOL)a0;
- (void)_setIsSelectivelyShared:(BOOL)a0;
- (void)_setKeepChildrenAttached:(BOOL)a0;
- (void)_setKeyViewGroupBoundaryNeedsRecalc:(BOOL)a0;
- (void)_setKeyViewLoopNeedsRecalc:(BOOL)a0;
- (void)_setKeyViewSelectionDirection:(unsigned long long)a0;
- (void)_setLastDragRegion:(void *)a0;
- (void)_setLastFocusRingView:(id)a0 bleedRegion:(id)a1;
- (void)_setLevelForAllDrawers;
- (void)_setLiveResizedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 animated:(BOOL)a1;
- (void)_setLocationTemporary:(BOOL)a0;
- (void)_setMiniaturized:(BOOL)a0;
- (void)_setModal:(BOOL)a0;
- (void)_setModalWindowLevel;
- (void)_setMouseMovedEventsEnabled:(BOOL)a0;
- (void)_setMovableByBottomBar:(BOOL)a0;
- (void)_setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setNeedsDisplayInRegion:(id)a0;
- (void)_setNeedsToRemoveFieldEditor:(BOOL)a0;
- (void)_setNeedsToResetDragMargins:(BOOL)a0;
- (void)_setNeedsZoom:(id)a0;
- (void)_setNextToolbarDisplayMode:(id)a0;
- (void)_setNextToolbarSizeAndDisplayMode:(id)a0;
- (void)_setNextToolbarSizeMode:(id)a0;
- (void)_setNonModalDocumentError:(id)a0;
- (void)_setNonactivatingPanel:(BOOL)a0;
- (void)_setOcclusionStateIsVisible:(BOOL)a0;
- (void)_setOrderFrontAnimationType:(long long)a0;
- (void)_setOrderOutAnimationType:(long long)a0;
- (void)_setOrderOutInProgress:(BOOL)a0;
- (void)_setOwnsRealWindow:(BOOL)a0;
- (void)_setPreferredNextWindowToSelect:(id)a0;
- (void)_setPrefersSolariumAppearance;
- (void)_setPreventsActivation:(BOOL)a0;
- (void)_setPreviousToolbarSizeAndDisplayMode:(id)a0;
- (void)_setRegisteredBackdropViews:(id)a0;
- (void)_setRemoteRenameSession:(id)a0;
- (void)_setRepresentedURL:(id)a0;
- (void)_setResizeWeighting:(long long)a0;
- (void)_setRunningWindowTransformAnimation:(id)a0;
- (void)_setSavedFirstResponderForRenaming:(id)a0;
- (void)_setScaleFactor:(double)a0;
- (void)_setShadowActiveState;
- (void)_setShadowParameters;
- (void)_setSheet:(BOOL)a0;
- (void)_setSheetParent:(id)a0;
- (void)_setShowingModalFrame:(BOOL)a0;
- (void)_setSidebarTrackingAdapter:(id)a0;
- (void)_setSidecarMenuController:(id)a0;
- (void)_setStartingSizeAndPosition;
- (void)_setTabbedFullHeightSidebarsAreIndependent:(BOOL)a0;
- (void)_setTemporarilyIgnoresMoves:(BOOL)a0;
- (void)_setTemporaryContentView:(id)a0;
- (void)_setTexturedBackground:(BOOL)a0;
- (void)_setTileMinSize:(struct CGSize { double x0; double x1; })a0 tileMaxSize:(struct CGSize { double x0; double x1; })a1 tilePreferredSize:(struct CGSize { double x0; double x1; })a2;
- (void)_setTrackingAreasDirty;
- (long long)_setTrackingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inside:(BOOL)a1 owner:(id)a2 userData:(void *)a3;
- (long long)_setTrackingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inside:(BOOL)a1 owner:(id)a2 userData:(void *)a3 useTrackingNum:(long long)a4;
- (void)_setTrackingRects;
- (void)_setTrailingSidebarTrackingAdapter:(id)a0;
- (void)_setTransformDidCompleteHandler:(id /* block */)a0;
- (void)_setTransformForAnimation:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 anchorPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)_setUpFirstResponder;
- (void)_setUpFirstResponderBeforeBecomingVisible;
- (void)_setUtilityWindow:(BOOL)a0;
- (void)_setViewsNeedBuildLayerTree;
- (void)_setViewsNeedDisplay;
- (void)_setViewsNeedLayout;
- (void)_setViewsNeedLayout:(BOOL)a0;
- (void)_setViewsNeedUpdateConstraints;
- (void)_setViewsNeedUpdateLayoutDependentMetrics:(BOOL)a0;
- (void)_setVisible:(BOOL)a0;
- (void)_setVisibleWithoutLoginForAllDrawers;
- (void)_setWantsChildConfinement:(BOOL)a0;
- (void)_setWantsHideOnDeactivate:(BOOL)a0;
- (void)_setWantsMouseMoveEventsInBackground:(BOOL)a0;
- (void)_setWantsToBeOnMainScreen:(BOOL)a0;
- (void)_setWantsToDestroyRealWindow:(BOOL)a0;
- (void)_setWindowBackdropCaptureView:(id)a0;
- (void)_setWindowDepth:(int)a0;
- (void)_setWindowDidExistAtLaunch:(BOOL)a0;
- (void)_setWindowLayerContext:(id)a0;
- (void)_setWindowNumber:(long long)a0;
- (void)_setWindowRef:(struct OpaqueWindowPtr { } *)a0;
- (void)_setWindowResizeConstraints:(id)a0;
- (void)_setWindowResolution:(double)a0;
- (void)_setWindowTag;
- (struct CGSize { double x0; double x1; })_shadowOffsetForActiveAppearance:(BOOL)a0;
- (void)_shake;
- (BOOL)_sharesParentFirstResponder;
- (BOOL)_sharesParentKeyState;
- (BOOL)_sharingWantsRecordingStyle;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_sheetDimmingMaterialRect;
- (id)_sheetDimmingParentView;
- (BOOL)_shouldAutoFlattenLayerTree;
- (BOOL)_shouldCloseForTermination;
- (BOOL)_shouldDelayEventDuringEventBlockingTransition:(id)a0;
- (BOOL)_shouldDoScreenSizeSnappingFromResizedEdge:(unsigned long long)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 state:(struct { BOOL x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; unsigned long long x5; BOOL x6; unsigned long long x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8[64]; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9[64]; double x10; double x11; double x12; double x13; struct CGRect *x14; unsigned long long x15; id x16; BOOL x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; } *)a2;
- (BOOL)_shouldEnterFullScreenModeOnOrderIn;
- (BOOL)_shouldForceRolloverStylingForControl:(id)a0;
- (BOOL)_shouldGetCornerMaskFromVisualEffectView;
- (BOOL)_shouldIgnoreSetFrameOrigin;
- (BOOL)_shouldIncludeTitlebarAccessoryViewsInKeyViewLoop;
- (BOOL)_shouldJoinTabbingStackOnOrderIn;
- (unsigned long long)_shouldJoinTileSpaceOnOrderIn:(id)a0;
- (BOOL)_shouldParticipateInBatchOrdering:(long long)a0;
- (BOOL)_shouldReallyOrderWindow;
- (BOOL)_shouldRecordPersistentState;
- (BOOL)_shouldRemoveFromParentIfPossible;
- (BOOL)_shouldResetCursorRects;
- (BOOL)_shouldRoundCornersForSurface;
- (BOOL)_shouldShowCursorRects;
- (BOOL)_shouldShowResizeCursor;
- (BOOL)_shouldSnapSizeOnDoubleClick;
- (BOOL)_shouldSnapSizeWhenResizing;
- (BOOL)_shouldSyncSurfaceToView;
- (BOOL)_shouldSynchronizeGroupVisibilityForOptions:(id)a0;
- (BOOL)_shouldUseTexturedAppearanceForSegmentedCellInView:(id)a0;
- (BOOL)_shouldZoomInDragRegionAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_showDragBeginFeedback;
- (BOOL)_showToolTip;
- (void)_showToolbar:(id)a0 animate:(BOOL)a1;
- (BOOL)_showingModalSheet;
- (void)_sidebarAdapterWasAddedToWindow:(id)a0;
- (void)_sidebarProviderWillRemoveFromWindow:(id)a0;
- (BOOL)_sidebarSitsBelowToolbar;
- (id)_sidebarSplitViewItemSeparatorTrackingAdapter;
- (id)_sidebarTrackingAdapter;
- (id)_sidecarMenuController;
- (void)_sizeAllDrawersWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })_sizeForProposedSize:(struct CGSize { double x0; double x1; })a0 resizeEdges:(unsigned long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_sizeSnappedFrameForOppositeEdge:(unsigned long long)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 state:(struct { BOOL x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; unsigned long long x5; BOOL x6; unsigned long long x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8[64]; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9[64]; double x10; double x11; double x12; double x13; struct CGRect *x14; unsigned long long x15; id x16; BOOL x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; } *)a2;
- (void)_skipNextDocumentAnimation;
- (void)_snapSizeToFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withEvent:(id)a1;
- (BOOL)_snapWindowSizeInDirection:(long long)a0 withEvent:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_snapWindowSizeWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 resizeDirection:(long long)a1 state:(struct { BOOL x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; unsigned long long x5; BOOL x6; unsigned long long x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8[64]; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9[64]; double x10; double x11; double x12; double x13; struct CGRect *x14; unsigned long long x15; id x16; BOOL x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; } *)a2;
- (id)_snapshotImageForAnimation;
- (BOOL)_someFullScreenInstanceHasSuppressedImplicitFullScreen;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_standardFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_standardFrameForScreen:(id)a0 isMoveToiPad:(BOOL)a1;
- (void)_startClientSideMove;
- (void)_startLiveResize;
- (void)_startLiveResizeForAllDrawers;
- (void)_startLocalRenameSessionWithDelegate:(id)a0;
- (void)_startRemoteRenameSessionWithURL:(id)a0 delegate:(id)a1;
- (void)_startSnappingToFrameTimerAfterDelay:(double)a0;
- (void)_startWindowDragWithEvent:(id)a0 animate:(BOOL)a1;
- (void)_startWindowDragWithEvent:(id)a0 options:(unsigned long long)a1 animate:(BOOL)a2;
- (void)_startWindowDragWithEvent:(id)a0 options:(unsigned long long)a1 animate:(BOOL)a2 completionHandler:(id /* block */)a3;
- (void)_startWindowMoveWithEvent:(id)a0;
- (id)_startingWindowForSendAction:(SEL)a0;
- (void)_stashCollapsedOrigin:(struct CGPoint { double x0; double x1; })a0;
- (void)_stashOrigin:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })_stashedOrigin;
- (void)_stopClientSideMove;
- (void)_stopSnappingToFrameTimer;
- (id)_storedTabbingIdentifier;
- (id)_stringWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1 adjustingForToolbar:(BOOL)a2;
- (id)_stringWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1 tilingState:(id)a2 adjustingForToolbar:(BOOL)a3;
- (id)_stringWithSavedFrame;
- (id)_stringWithSavedFrameAdjustingForToolbar:(BOOL)a0;
- (unsigned long long)_styleMaskForWindowManagement;
- (id)_substituteKeyWindowForAction:(SEL)a0;
- (void)_subtractFromNeedsDisplayRegion:(id)a0;
- (BOOL)_supportsDockInitiatedFullScreen;
- (BOOL)_supportsNewTabButton;
- (BOOL)_supportsTabbing;
- (BOOL)_supportsTitlebarAccessoryViewControllers;
- (void)_surrenderToolbarViewForFullScreenWindow;
- (void)_suspendSavingWindowLayout;
- (void)_suspendWindowServerLayerHosting;
- (void)_switchDragRegistrationToRemoteContext:(unsigned int)a0;
- (void)_syncFrameMetrics;
- (void)_synchronizeConfigurationForTrackingArea:(id)a0;
- (void)_synchronizeOrderingGroupVisibility;
- (void)_synchronizeOverrideForActiveGestureRecognizers;
- (void)_synthesizeEventsForLiveResize;
- (BOOL)_tabBarIsVisible;
- (id)_tabGroup;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_tabRect;
- (BOOL)_tabbedFullHeightSidebarsAreIndependent;
- (id)_tabbedWindows;
- (void)_tabbedWindowsDidEnterFullScreen;
- (BOOL)_tabbedWindowsHandleEnterFullScreen;
- (void)_tabbedWindowsWillEnterFullScreen;
- (BOOL)_tabbingPerformKeyEquivalent:(id)a0;
- (void)_tabsFinishDeminiaturizeFromDock;
- (void)_takeApplicationMenuIfNeeded:(id)a0;
- (void)_tearDownFullScreenWithoutDestroyingSpace;
- (void)_teardownVisualizedConstraintsView;
- (id)_tempHide:(BOOL)a0 relWin:(long long)a1;
- (id)_tempHideHODWindow;
- (id)_tempUnhideHODWindow;
- (BOOL)_temporarilyIgnoreMoves;
- (void)_termOneShotWindow;
- (void)_termWindowIfOwner;
- (unsigned long long)_themeBackgroundStyle;
- (id)_themeFrame;
- (id)_threadContext;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_tileFrameForFullScreen;
- (void)_tileLeft:(id)a0;
- (struct CGSize { double x0; double x1; })_tilePreferredSize;
- (void)_tileRight:(id)a0;
- (unsigned long long)_tileSpaceID;
- (id)_titleForWindowsMenuItem;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_titleFrameForEditingWithProposedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_titleIsRepresentedFilename;
- (BOOL)_titleMightBeEditable;
- (struct CGSRegionObject { } *)_titlebarActivationRegion;
- (id)_titlebarBackdropGroupName;
- (struct CGSRegionObject { } *)_titlebarButtonsPreventingActivationRegion;
- (struct CGSRegionObject { } *)_titlebarCommandModifierExclusionRegion;
- (id)_titlebarContainerView;
- (id)_titlebarDisplayIdentifier;
- (id)_toggleFrameAutosaveEnabled:(id)a0;
- (void)_toggleIPad:(id)a0;
- (void)_toggleOrderedFrontMost:(id)a0;
- (BOOL)_toggleOrderedFrontMostWillOrderOut;
- (void)_toggleSelectAnyValidResponderOverride;
- (void)_toggleTabBar:(id)a0;
- (void)_toggleTabOverview:(id)a0;
- (void)_toggleTabOverview:(id)a0 animated:(BOOL)a1;
- (void)_toggleToolbarConfigPanel:(id)a0;
- (BOOL)_toolbarButtonIsClickable;
- (void)_toolbarFrameSizeChanged:(id)a0 oldSize:(struct CGSize { double x0; double x1; })a1;
- (double)_toolbarLeadingSpace;
- (void)_toolbarPillButtonClicked:(id)a0;
- (double)_toolbarTrailingSpace;
- (id)_toolbarView;
- (double)_topBarHeight;
- (double)_topCornerRadius;
- (id)_topmostChild;
- (id)_topmostVisibleCanBecomeKeyAttachedSheet;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_trackingRegionWindowRectFlipped:(BOOL)a0;
- (void)_trailingSidebarAdapterWasAddedToWindow:(id)a0;
- (void)_trailingSidebarProviderWillRemoveFromWindow:(id)a0;
- (void)_transferSharingFromWindow:(id)a0 askForConfirmation:(BOOL)a1 completionHandler:(id /* block */)a2;
- (id)_transformsDescription;
- (double)_transparency;
- (BOOL)_tryWindowDragWithEvent:(id)a0;
- (id)_ultimateParentWindow;
- (void)_unbindTitleIfNecessary;
- (void)_unhideAllDrawers;
- (void)_unhideSheet;
- (void)_uninhibitedOrderOut;
- (void)_unlockFirstResponder;
- (void)_unlockViewHierarchyForReading;
- (void)_unlockViewHierarchyForWriting;
- (void)_unregisterBackdropView:(id)a0;
- (void)_unregisterDragTypes;
- (void)_unscheduleWindowForBatchOrdering;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_unsnapSizeFromFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromEdge:(unsigned long long)a1 state:(struct { BOOL x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; unsigned long long x5; BOOL x6; unsigned long long x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8[64]; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9[64]; double x10; double x11; double x12; double x13; struct CGRect *x14; unsigned long long x15; id x16; BOOL x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; } *)a2;
- (void)_updateButtonsForFullScreen;
- (void)_updateButtonsForModeChanged;
- (void)_updateButtonsForWindowSharingSession;
- (void)_updateCollectionBehavior;
- (void)_updateConstraintVisualization;
- (BOOL)_updateConstraintsForEngineHostingViews:(id)a0;
- (void)_updateContentLayoutGuideFrame;
- (void)_updateCursorRectsDueToBecomingKey;
- (void)_updateCursorRectsDueToBecomingVisible;
- (void)_updateCursorRectsDueToResigningKey;
- (BOOL)_updateEdgeResizingTrackingAreas;
- (void)_updateEventMaskDueToBecomingKey;
- (void)_updateEventMaskDueToCommonAwake;
- (void)_updateEventMaskDueToDisableCursorRects;
- (void)_updateEventMaskDueToEnableCursorRects;
- (void)_updateEventMaskDueToInit;
- (void)_updateEventMaskDueToResigningKey;
- (void)_updateFirstResponderForIgnoredChildWindow:(id)a0;
- (id)_updateFrameWidgets;
- (void)_updateFullHeightDividerStatus;
- (void)_updateFullHeightSidebarStatus;
- (void)_updateFullHeightTrailingSidebarStatus;
- (BOOL)_updateInheritedBackingScaleFactorIfNeeded;
- (BOOL)_updateInheritedColorSpaceIfNeeded;
- (void)_updateLayoutDependentMetricsIfNeeded;
- (void)_updateMouseMovedState;
- (void)_updateMovementGroup;
- (void)_updateOnAllWorkspacesTagBit;
- (void)_updateSavedFrameForFullScreen;
- (void)_updateSectionSearchElements:(id)a0 keys:(id)a1 element:(id)a2;
- (void)_updateSettingsSendingScreenChangeNotification;
- (void)_updateSettingsSendingScreenChangeNotificationToScreen:(id)a0;
- (void)_updateSharingSurrogate;
- (void)_updateStateForMoveBackToScreen:(long long)a0;
- (void)_updateStructuralRegionsOnNextDisplayCycle;
- (void)_updateTitleTextField;
- (void)_updateTrackingAreasDueToEndScrolling;
- (void)_updateWindowCanServerSideDrag;
- (void)_updateWindowIsFullScreenCapable;
- (void)_updateWindowManagerLiveResize;
- (void)_updateWindowManagerWantsDisableSnapshotRestoration;
- (void)_updateWindowsMenuItemIfNeeded;
- (BOOL)_userInterfaceItemIsTemporarilyDisabled:(id)a0;
- (BOOL)_usesCustomDrawing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_validFrameForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 resizedFromEdge:(unsigned long long)a1;
- (void)_validSize:(struct CGSize { double x0; double x1; } *)a0 force:(BOOL)a1;
- (unsigned long long)_validateCollectionBehavior:(unsigned long long)a0;
- (id)_validateFirstResponder:(id)a0;
- (BOOL)_validateMove;
- (BOOL)_validateMoveAndUserSpace;
- (BOOL)_validateShowAllTabsMenuItem:(id)a0;
- (void)_validateSizeUsingConstraints:(struct CGSize { double x0; double x1; } *)a0;
- (unsigned long long)_validateStyleMask:(unsigned long long)a0;
- (BOOL)_validateTabUserInterfaceItem:(id)a0 withResult:(BOOL)a1;
- (BOOL)_validateTile;
- (BOOL)_validateTileChange;
- (BOOL)_validateToggleTabBarItem:(id)a0;
- (BOOL)_validateZoom;
- (void)_verifyDefaultButtonCell:(BOOL)a0;
- (void)_verifyTrackingRects;
- (BOOL)_viewIsInContentBorder:(id)a0;
- (id)_viewTreeDescription;
- (BOOL)_viewsNeedLayout;
- (BOOL)_viewsNeedUpdateConstraints;
- (BOOL)_visibleAndCanBecomeKey;
- (BOOL)_visibleAndCanBecomeKeyLimitedOK:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleTileFrameForFullScreen;
- (BOOL)_visualEffectViewAlwaysUseWSAwareBackdrops;
- (id)_visualizedConstraintsView;
- (BOOL)_wantsAsyncContext;
- (BOOL)_wantsChildConfinement;
- (BOOL)_wantsConstraintEngineSizeValidation;
- (BOOL)_wantsFullScreenCleanupOnOrderOut;
- (BOOL)_wantsHideOnDeactivate;
- (BOOL)_wantsMouseMoveEventsInBackground;
- (BOOL)_wantsSheetDimmingMaterial;
- (BOOL)_wantsSheetParentAppearance;
- (BOOL)_wantsSnapshotProxyWindowForOrderOutAnimation;
- (BOOL)_wantsToDestroyRealWindow;
- (BOOL)_wantsUserAttention;
- (BOOL)_wasActiveBeforeCurrentEvent;
- (BOOL)_wasModalAtSometime;
- (id)_wholeAccessibilityTitleString;
- (BOOL)_willBeInFullScreenSpace;
- (BOOL)_willBecomeTabbedWithOtherWindows;
- (void)_willBeginViewScrolling;
- (void)_willEnterFullScreen;
- (void)_willRemoveChildWindow:(id)a0;
- (void)_willStartRenameWithTitle:(id)a0 editingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (BOOL)_windowCanBeRestored;
- (id)_windowControlMenuItems;
- (int)_windowDepth;
- (void)_windowDeviceRound;
- (void)_windowDeviceRoundWithContext:(id)a0;
- (void)_windowDidChangeAppearance;
- (BOOL)_windowDidExistAtLaunch;
- (BOOL)_windowDying;
- (void)_windowFailedToMoveWithEvent:(id)a0;
- (id)_windowForLayoutEncoding;
- (id)_windowForSharing;
- (id)_windowForSheetMovementAndOrderingGroups;
- (id)_windowForToolbar;
- (BOOL)_windowIsBeingMoved;
- (void)_windowLayoutWillMove;
- (void)_windowLayoutWillResize;
- (BOOL)_windowManagerAware;
- (BOOL)_windowMayBecomeFullScreen;
- (void)_windowMoved:(id)a0;
- (void)_windowMovedToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_windowMovedToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 dueToMoveEvent:(BOOL)a1;
- (struct OpaqueWindowPtr { } *)_windowRef;
- (struct OpaqueWindowPtr { } *)_windowRefCreatedForCarbonApp;
- (struct OpaqueWindowPtr { } *)_windowRefCreatedForCarbonControl;
- (id)_windowResizeConstraints;
- (void)_windowResizeConstraints_borderViewChanged;
- (double)_windowResolution;
- (void)_windowSharingControllerDidInvalidate;
- (id)_windowTilingMenu;
- (void)_windowTransformAnimationDidEnd:(id)a0;
- (id)_windowTransformAnimationForOrdering:(long long)a0 animationType:(long long)a1 interruptingAnimation:(id)a2;
- (void)_windowTransformAnimationWillBegin:(id)a0;
- (BOOL)_windowValidForDrawing;
- (BOOL)_wiringNibConnections;
- (BOOL)_worksWhenModalOrChildOfModalWindow;
- (BOOL)_wouldBeSufficientlyUnclippedOnSpace:(unsigned long long)a0;
- (BOOL)_wrapsCarbonWindow;
- (void)_zoomBottom:(id)a0;
- (void)_zoomBottomAndTop:(id)a0;
- (void)_zoomBottomLeft:(id)a0;
- (void)_zoomBottomRight:(id)a0;
- (void)_zoomBottomThreeUp:(id)a0;
- (BOOL)_zoomButtonIsFullScreenButton;
- (void)_zoomCenter:(id)a0;
- (void)_zoomFill:(id)a0;
- (void)_zoomLeft:(id)a0;
- (void)_zoomLeftAndRight:(id)a0;
- (void)_zoomLeftThreeUp:(id)a0;
- (void)_zoomQuarters:(id)a0;
- (void)_zoomRight:(id)a0;
- (void)_zoomRightAndLeft:(id)a0;
- (void)_zoomRightThreeUp:(id)a0;
- (void)_zoomToFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 willChangeScreens:(BOOL)a1 toIPad:(BOOL)a2 zoomState:(unsigned long long)a3;
- (void)_zoomToScreen:(id)a0;
- (void)_zoomToScreen:(id)a0 isMoveToiPad:(BOOL)a1;
- (void)_zoomToScreenEdge:(unsigned long long)a0;
- (void)_zoomTop:(id)a0;
- (void)_zoomTopAndBottom:(id)a0;
- (void)_zoomTopLeft:(id)a0;
- (void)_zoomTopRight:(id)a0;
- (void)_zoomTopThreeUp:(id)a0;
- (void)_zoomUntile:(id)a0;
- (BOOL)acceptsMouseMovedEvents;
- (id)accessibilityActionNames;
- (id)accessibilityActivationPointAttribute;
- (void)accessibilityAddDeferredNotification:(id)a0;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityCancelButtonAttribute;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (id)accessibilityCloseButtonAttribute;
- (id)accessibilityDefaultButtonAttribute;
- (id)accessibilityDocumentAttribute;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFocusRingBounds;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityFullScreenAttribute;
- (id)accessibilityFullScreenButtonAttribute;
- (id)accessibilityHelpStringForChild:(id)a0;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)accessibilityIsAttributeSettable:(id)a0;
- (BOOL)accessibilityIsCancelButtonAttributeSettable;
- (BOOL)accessibilityIsChildFocusable:(id)a0;
- (BOOL)accessibilityIsChildOfApp;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsCloseButtonAttributeSettable;
- (BOOL)accessibilityIsDefaultButtonAttributeSettable;
- (BOOL)accessibilityIsDocumentAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsFullScreenAttributeSettable;
- (BOOL)accessibilityIsFullScreenButtonAttributeSettable;
- (BOOL)accessibilityIsGrowAreaAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsMainAttributeSettable;
- (BOOL)accessibilityIsMinimizeButtonAttributeSettable;
- (BOOL)accessibilityIsMinimizedAttributeSettable;
- (BOOL)accessibilityIsModalAttributeSettable;
- (BOOL)accessibilityIsParentAttributeSettable;
- (BOOL)accessibilityIsPositionAttributeSettable;
- (BOOL)accessibilityIsProxyAttributeSettable;
- (BOOL)accessibilityIsRoleAttributeSettable;
- (BOOL)accessibilityIsRoleDescriptionAttributeSettable;
- (BOOL)accessibilityIsSectionsAttributeSettable;
- (BOOL)accessibilityIsSizeAttributeSettable;
- (BOOL)accessibilityIsSubroleAttributeSettable;
- (BOOL)accessibilityIsTitleAttributeSettable;
- (BOOL)accessibilityIsTitleUIElementAttributeSettable;
- (BOOL)accessibilityIsToolbarButtonAttributeSettable;
- (BOOL)accessibilityIsWindowAttributeSettable;
- (BOOL)accessibilityIsZoomButtonAttributeSettable;
- (id)accessibilityMainAttribute;
- (id)accessibilityMinimizeButtonAttribute;
- (id)accessibilityModalAttribute;
- (id)accessibilityParent;
- (id)accessibilityParentAttribute;
- (void)accessibilityPerformAction:(id)a0;
- (id)accessibilityPositionAttribute;
- (id)accessibilityPositionOfChild:(id)a0;
- (void)accessibilityPostNotification:(id)a0;
- (id)accessibilityProxyAttribute;
- (id)accessibilityRoleAttribute;
- (id)accessibilityRoleDescriptionAttribute;
- (id)accessibilitySectionsAttribute;
- (void)accessibilitySendDeferredNotifications;
- (void)accessibilitySetFullScreenAttribute:(id)a0;
- (void)accessibilitySetMainAttribute:(id)a0;
- (void)accessibilitySetMinimizedAttribute:(id)a0;
- (void)accessibilitySetPositionAttribute:(id)a0;
- (void)accessibilitySetSizeAttribute:(id)a0;
- (void)accessibilitySetValue:(id)a0 forAttribute:(id)a1;
- (BOOL)accessibilityShouldUseUniqueId;
- (id)accessibilitySizeAttribute;
- (id)accessibilitySizeOfChild:(id)a0;
- (id)accessibilitySubroleAttribute;
- (id)accessibilitySubtitleUIElementAttribute;
- (BOOL)accessibilitySupportsOverriddenAttributes;
- (id)accessibilityTitleAttribute;
- (id)accessibilityTitleUIElementAttribute;
- (id)accessibilityToolbarButtonAttribute;
- (id)accessibilityTopLevelUIElementAttributeValueHelper;
- (double)accessibilityVisibleArea;
- (id)accessibilityWindowAttribute;
- (id)accessibilityWindowAttributeValueHelper;
- (long long)accessibilityWindowNumber;
- (id)accessibilityZoomButtonAttribute;
- (void)acquireKeyAppearance;
- (void)acquireMainAppearance;
- (void)addChildWindow:(id)a0 ordered:(long long)a1;
- (void)addChildWindow:(id)a0 ordered:(long long)a1 shareKey:(BOOL)a2;
- (void)addDocumentIconButton;
- (void)addInspectorBarOwner:(id)a0;
- (void)addTabbedWindow:(id)a0 ordered:(long long)a1;
- (void)addTitlebarAccessoryViewController:(id)a0;
- (void)addUnderTitlebarView:(id)a0 withAssociatedWithView:(id)a1;
- (void)adjustLayoutForResolutionChangeToRetina:(BOOL)a0;
- (BOOL)allowUninhibitedChildren;
- (long long)anchorAttributeForOrientation:(long long)a0;
- (id)anchorItemForOrientation:(long long)a0;
- (id)animationForKey:(id)a0;
- (double)animationResizeTime:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)appearanceParent;
- (BOOL)areCursorRectsEnabled;
- (BOOL)autofill;
- (id)autofillColor;
- (BOOL)autorecalculatesContentBorderThicknessForEdge:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })backingAlignedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(unsigned long long)a1;
- (void)becomeMainWindow;
- (BOOL)becomesKeyOnlyIfNeeded;
- (void)beginCriticalSheet:(id)a0 completionHandler:(id /* block */)a1;
- (id)beginDraggingSessionWithItems:(id)a0 event:(id)a1 source:(id)a2;
- (void)beginSheet:(id)a0 completionHandler:(id /* block */)a1;
- (BOOL)bottomCornerRounded;
- (id)boundsAsQDRect;
- (void)cacheImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)cacheMiniwindowTitle:(id)a0 guess:(BOOL)a1;
- (BOOL)canBeVisibleOnAllSpaces;
- (BOOL)canEnterFullScreenMode;
- (BOOL)canHostLayersInWindowServer;
- (BOOL)canMoveToCurrentSpaceOnScreen:(id)a0;
- (BOOL)canRepresentDisplayGamut:(long long)a0;
- (BOOL)canStoreColor;
- (struct CGPoint { double x0; double x1; })cascadeTopLeftFromPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)changeToolBarDisplayModeToDisplayMode:(unsigned long long)a0;
- (void)changeToolbarDisplayMode:(id)a0;
- (void)changeToolbarDisplayModeToNumber:(id)a0;
- (id)computed_focusController;
- (BOOL)computed_wantsFocusSystem;
- (void)concludeDragOperation:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })constrainFrameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toScreen:(id)a1;
- (double)contentBorderThicknessForEdge:(unsigned long long)a0;
- (id)contentInsetColor;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentRectForFrameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentRectForFrameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 styleMask:(unsigned long long)a1;
- (id)contentSeparatorColor;
- (long long)contentTitlebarSeparatorStyle;
- (void)contextMenuKeyDown:(id)a0;
- (struct CGPoint { double x0; double x1; })convertBaseToScreen:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointFromBacking:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointFromScreen:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointToBacking:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertPointToScreen:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromBacking:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromScreen:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToBacking:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToScreen:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })convertScreenToBase:(struct CGPoint { double x0; double x1; })a0;
- (void)cursorUpdate:(id)a0;
- (id)dataWithEPSInsideRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)dataWithPDFInsideRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)deminiaturize:(id)a0;
- (void)disableCursorRects;
- (void)disableFlushWindow;
- (void)disableKeyEquivalentForDefaultButtonCell;
- (void)disableScreenUpdatesUntilFlush;
- (void)disableSnapshotRestoration;
- (void)discardCachedImage;
- (void)discardCursorRects;
- (void)discardEventsMatchingMask:(unsigned long long)a0 beforeEvent:(id)a1;
- (id)displayLinkWithHandler:(id /* block */)a0;
- (BOOL)dockTitleIsGuess;
- (void)dragImage:(id)a0 at:(struct CGPoint { double x0; double x1; })a1 offset:(struct CGSize { double x0; double x1; })a2 event:(id)a3 pasteboard:(id)a4 source:(id)a5 slideBack:(BOOL)a6;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })dragRectForFrameRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)draggingEnded:(id)a0;
- (unsigned long long)draggingEntered:(id)a0;
- (unsigned long long)draggingUpdated:(id)a0;
- (void)editTitle:(id)a0;
- (void)enableCursorRects;
- (void)enableFlushWindow;
- (void)enableKeyEquivalentForDefaultButtonCell;
- (void)enableSnapshotRestoration;
- (void)endEditingFor:(id)a0;
- (void)endSheet:(id)a0;
- (void)endSheet:(id)a0 returnCode:(long long)a1;
- (id)engine:(id)a0 markerForConstraintToBreakAmongConstraints:(id)a1;
- (void)engine:(id)a0 willBreakConstraint:(id)a1 dueToMutuallyExclusiveConstraints:(id)a2;
- (void)enterFullScreenMode:(id)a0;
- (void)exerciseAmbiguityInLayout;
- (void)exitFullScreenMode:(id)a0;
- (id)fieldEditor:(BOOL)a0 forObject:(id)a1;
- (void)flushWindow;
- (void)flushWindowIfNeeded;
- (struct CGPoint { double x0; double x1; })frameOrigin;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameRectForContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameRectForContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 styleMask:(unsigned long long)a1;
- (struct CGPoint { double x0; double x1; })frameTopLeftPoint;
- (id)functionRow;
- (long long)gState;
- (unsigned long long)gestureEventMask;
- (BOOL)gestureRecognizer:(id)a0 shouldAttemptToRecognizeWithEvent:(id)a1;
- (BOOL)getResolutionHint:(struct CGSize { double x0; double x1; } *)a0;
- (void *)graphicsPort;
- (id)handleCloseScriptCommand:(id)a0;
- (id)handlePrintScriptCommand:(id)a0;
- (id)handleSaveScriptCommand:(id)a0;
- (BOOL)hasAmbiguousLayout;
- (BOOL)hasKeyAppearance;
- (BOOL)hasKeyAppearanceIncludingSheets:(BOOL)a0;
- (BOOL)hasMainAppearance;
- (void)helpRequested:(id)a0;
- (void)hideToolbar:(id)a0;
- (BOOL)hostsLayersInWindowServer;
- (BOOL)ignoresMouseEvents;
- (id)initWithContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 styleMask:(unsigned long long)a1 backing:(unsigned long long)a2 defer:(BOOL)a3;
- (id)initWithContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 styleMask:(unsigned long long)a1 backing:(unsigned long long)a2 defer:(BOOL)a3 screen:(id)a4;
- (id)initWithWindowRef:(void *)a0;
- (void)insertTitlebarAccessoryViewController:(id)a0 atIndex:(long long)a1;
- (id)inspectorBar;
- (void)invalidateCursorRectsForView:(id)a0;
- (void)invalidateShadow;
- (BOOL)isAutodisplay;
- (BOOL)isFlushWindowDisabled;
- (BOOL)isOneShot;
- (BOOL)isPreferenceToolbarWindow;
- (BOOL)isTabbed;
- (BOOL)isTitlebarHidden;
- (void)lockButtonClicked:(id)a0;
- (BOOL)makeFirstResponder:(id)a0;
- (void)makeKeyAndOrderFront:(id)a0;
- (void)makeKeyWindow;
- (void)makeMainWindow;
- (struct CGSize { double x0; double x1; })maxFullScreenContentSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })maxTitlebarTitleRect;
- (void)mergeAllWindows:(id)a0;
- (struct CGSize { double x0; double x1; })minFrameSizeForMinContentSize:(struct CGSize { double x0; double x1; })a0 styleMask:(unsigned long long)a1;
- (struct CGSize { double x0; double x1; })minFullScreenContentSize;
- (void)miniaturize:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })mouseConfinementRect;
- (struct CGPoint { double x0; double x1; })mouseLocationOutsideOfEventStream;
- (void)moveTabToNewWindow:(id)a0;
- (void)navigateWithEvent:(id)a0;
- (id)nextEventMatchingMask:(unsigned long long)a0;
- (id)nextEventMatchingMask:(unsigned long long)a0 untilDate:(id)a1 inMode:(id)a2 dequeue:(BOOL)a3;
- (id)openDrawers;
- (void)orderBack:(id)a0;
- (void)orderFront:(id)a0;
- (void)orderFrontRegardless;
- (void)orderOut:(id)a0;
- (void)orderOutTabbedWindowGroup:(id)a0;
- (void)orderWindow:(long long)a0 relativeTo:(long long)a1;
- (void)orderWindowWithOptions:(id)a0;
- (void)performClose:(id)a0;
- (void)performCloseOtherTabs:(id)a0;
- (void)performCloseTabbedWindowGroup:(id)a0;
- (BOOL)performDragOperation:(id)a0;
- (BOOL)performKeyEquivalent:(id)a0;
- (void)performMiniaturize:(id)a0;
- (BOOL)performMnemonic:(id)a0;
- (void)performWindowDragWithEvent:(id)a0;
- (void)performWindowDragWithEvent:(id)a0 completionHandler:(id /* block */)a1;
- (void)performZoom:(id)a0;
- (void)postEvent:(id)a0 atStart:(BOOL)a1;
- (unsigned long long)preferredBackingLocation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })preferredFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1;
- (BOOL)prefersFullWidthTitlebarWhenAccessoriesVisible;
- (BOOL)prepareForDragOperation:(id)a0;
- (id)previewRepresentableActivityItems;
- (void)print:(id)a0;
- (void)quickLookPreviewItems:(id)a0;
- (void)quickLookPreviewItemsAtWindowLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)quickLookWithEvent:(id)a0;
- (void)rebuildLayoutFromScratch;
- (void)recalculateKeyViewLoop;
- (void)redo:(id)a0;
- (void)registerForDraggedTypes:(id)a0;
- (BOOL)registerScrollViewSeparatorTrackingAdapter:(id)a0;
- (void)registerSplitViewItemSeparatorTrackingAdapter:(id)a0;
- (id)registeredDraggedTypes;
- (void)removeChildWindow:(id)a0;
- (void)removeInspectorBarOwner:(id)a0;
- (void)removeTitlebarAccessoryViewControllerAtIndex:(long long)a0;
- (void)removeUnderTitlebarView:(id)a0 withAssociatedWithView:(id)a1;
- (void)requestSharingOfWindow:(id)a0 completionHandler:(id /* block */)a1;
- (void)requestSharingOfWindowUsingPreview:(id)a0 title:(id)a1 completionHandler:(id /* block */)a2;
- (void)requestSharingOfWindowWithImage:(id)a0 title:(id)a1 completionHandler:(id /* block */)a2;
- (void)resetCursorRects;
- (void)resignKeyAppearance;
- (void)resignMainAppearance;
- (void)resignMainWindow;
- (void)restoreCachedImage;
- (id)restoreWindowOnDockDeath;
- (id)restoreWindowOnDockReincarnation;
- (void)runSnapshotAnimations:(id /* block */)a0 completionHandler:(id /* block */)a1;
- (void)saveFrameUsingName:(id)a0;
- (void)selectKeyViewFollowingView:(id)a0;
- (void)selectKeyViewPrecedingView:(id)a0;
- (void)selectNextKeyView:(id)a0;
- (void)selectPreviousKeyView:(id)a0;
- (void)setAcceptsMouseMovedEvents:(BOOL)a0;
- (void)setAccessibilitySections:(id)a0;
- (void)setAnchorAttribute:(long long)a0 forOrientation:(long long)a1;
- (void)setAnchorItem:(id)a0 forOrientation:(long long)a1;
- (void)setAppearanceParent:(id)a0;
- (void)setAutofill:(BOOL)a0;
- (void)setAutofillColor:(id)a0;
- (void)setAutorecalculatesContentBorderThickness:(BOOL)a0 forEdge:(unsigned long long)a1;
- (void)setBottomCornerRounded:(BOOL)a0;
- (void)setBoundsAsQDRect:(id)a0;
- (void)setCanBeVisibleOnAllSpaces:(BOOL)a0;
- (void)setCanEnterFullScreenMode:(BOOL)a0;
- (void)setContentBorderThickness:(double)a0 forEdge:(unsigned long long)a1;
- (void)setContentTitlebarSeparatorStyle:(long long)a0;
- (void)setDynamicDepthLimit:(BOOL)a0;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 display:(BOOL)a1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 display:(BOOL)a1 animate:(BOOL)a2;
- (BOOL)setFrameAutosaveName:(id)a0;
- (void)setFrameFromString:(id)a0;
- (void)setFrameTopLeftPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)setFrameUsingName:(id)a0;
- (BOOL)setFrameUsingName:(id)a0 force:(BOOL)a1;
- (void)setGestureEventMask:(unsigned long long)a0;
- (void)setIgnoresMouseEvents:(BOOL)a0;
- (void)setInspectorBar:(id)a0;
- (void)setIsMiniaturized:(BOOL)a0;
- (void)setIsZoomed:(BOOL)a0;
- (void)setKeyView:(id)a0;
- (void)setMaxFullScreenContentSize:(struct CGSize { double x0; double x1; })a0;
- (void)setMinFullScreenContentSize:(struct CGSize { double x0; double x1; })a0;
- (void)setMouseConfinementRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setOneShot:(BOOL)a0;
- (void)setPreferredBackingLocation:(unsigned long long)a0;
- (void)setPrefersFullWidthTitlebarWhenAccessoriesVisible:(BOOL)a0;
- (void)setPreviewRepresentableActivityItems:(id)a0;
- (void)setShowsAutosaveButton:(BOOL)a0;
- (void)setShowsContentSeparator:(BOOL)a0 forEdge:(unsigned long long)a1;
- (void)setShowsLockButton:(BOOL)a0;
- (void)setShowsResizeIndicator:(BOOL)a0;
- (void)setShowsTitlebarWhenShared:(BOOL)a0;
- (void)setStandardWindowButtonGroupOffset:(struct CGSize { double x0; double x1; })a0;
- (void)setStandardWindowTitleButtonsAlphaValue:(double)a0;
- (void)setTabOverviewVisible:(BOOL)a0;
- (void)setTabbingIdentifier:(id)a0;
- (void)setTitleMode:(long long)a0;
- (void)setTitlePosition:(long long)a0;
- (void)setTitleWithRepresentedFilename:(id)a0;
- (void)setTitlebarAlphaValue:(double)a0;
- (void)setTitlebarAppearsTransparentWhenFullscreen:(BOOL)a0;
- (void)setTitlebarDrawsBottomDividerWhenTransparent:(BOOL)a0;
- (void)setTitlebarHandlesDoubleClickWhenTransparent:(BOOL)a0;
- (void)setTitlebarHeight:(double)a0;
- (void)setTitlebarHidden:(BOOL)a0;
- (void)setUnsnappedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setUserInterfaceLayoutDirection:(long long)a0;
- (void)setWindowSharingTitlebarAppearsTransparent:(BOOL)a0;
- (unsigned long long)shadowOptions;
- (unsigned long long)shadowOptionsForActiveAppearance:(BOOL)a0;
- (id)shadowParameters;
- (unsigned long long)shadowStyle;
- (id)sharingIndicator;
- (unsigned long long)sheetBehavior;
- (void)showContextMenuForSelection:(id)a0;
- (id)showDeminiaturizedWindow;
- (void)showToolbar:(id)a0;
- (BOOL)showsAutosaveButton;
- (BOOL)showsContentSeparatorForEdge:(unsigned long long)a0;
- (BOOL)showsFullScreenButton;
- (BOOL)showsResizeIndicator;
- (BOOL)showsTitlebarWhenShared;
- (BOOL)showsWindowSharingTitlebarButton;
- (id)snapshotFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(unsigned long long)a1;
- (id)standardWindowButton:(unsigned long long)a0;
- (double)standardWindowTitleButtonsAlphaValue;
- (BOOL)standardizeFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })startRectForSheet:(id)a0;
- (id)supplementalTargetForAction:(SEL)a0 sender:(id)a1;
- (id)tabGroup;
- (id)tabbedWindows;
- (id)tabbingIdentifier;
- (long long)tabbingMode;
- (BOOL)titleHidden;
- (long long)titleMode;
- (long long)titlePosition;
- (id)titlebarAccessoryViewControllers;
- (double)titlebarAlphaValue;
- (BOOL)titlebarAppearsTransparentWhenFullscreen;
- (long long)titlebarBlendingMode;
- (BOOL)titlebarBlurFiltersDisabled;
- (BOOL)titlebarDrawsBottomDividerWhenTransparent;
- (BOOL)titlebarHandlesDoubleClickWhenTransparent;
- (double)titlebarHeight;
- (id)titlebarTitleFont;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titlebarTitleRect;
- (id)titlebarViewController;
- (void)toggleFullScreen:(id)a0;
- (void)toggleSidebar:(id)a0;
- (void)toggleTabBar:(id)a0;
- (void)toggleTabOverview:(id)a0;
- (void)toggleToolbarShown:(id)a0;
- (void)toggleUsingSmallToolbarIcons:(id)a0;
- (id)toolbarTitlebarTitleTextField;
- (struct CGPoint { double x0; double x1; })topLeftPoint;
- (void)trackEventsMatchingMask:(unsigned long long)a0 timeout:(double)a1 mode:(id)a2 handler:(id /* block */)a3;
- (void)transferWindowSharingToWindow:(id)a0 completionHandler:(id /* block */)a1;
- (BOOL)tryToPerform:(SEL)a0 with:(id)a1;
- (void)undo:(id)a0;
- (void)unpinTab:(id)a0;
- (void)unregisterDraggedTypes;
- (void)unregisterScrollViewSeparatorTrackingAdapter:(id)a0;
- (void)unregisterSplitViewItemSeparatorTrackingAdapter:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })unsnappedFrame;
- (void)updateConstraintsIfNeeded;
- (void)updateDraggingItemsForDrag:(id)a0;
- (void)updateInDock;
- (void)useOptimizedDrawing:(BOOL)a0;
- (id)userInterfaceItemIdentifier;
- (long long)userInterfaceLayoutDirection;
- (double)userSpaceScaleFactor;
- (id)validRequestorForSendType:(id)a0 returnType:(id)a1;
- (BOOL)view:(id)a0 acceptsFirstMouseEvent:(id)a1 initialKeyWindow:(id)a2;
- (void)visualizeConstraints:(id)a0;
- (BOOL)wantsPeriodicDraggingUpdates;
- (void)window:(id)a0 didUpdateWithChangedProperties:(unsigned long long)a1;
- (void)window:(id)a0 didUpdateWithChangedServerProperties:(unsigned long long)a1;
- (void)windowDidBecomeTabbed;
- (void *)windowRef;
- (void *)windowRefWithCompositedAttribute:(BOOL)a0 andFrameworkScaledAttribute:(BOOL)a1;
- (id)windowSectionController;
- (id)windowTitleController;
- (long long)windowTitlebarLayoutDirection;
- (void)zoom:(id)a0;

@end
