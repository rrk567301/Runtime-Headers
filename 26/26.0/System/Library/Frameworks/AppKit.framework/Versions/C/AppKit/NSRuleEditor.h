@class NSViewAnimation, NSString, NSDictionary, NSPredicate, NSIndexSet, NSMutableArray, NSView;
@protocol NSRuleEditorDelegate;

@interface NSRuleEditor : NSControl {
    id _ruleDataSource;
    id _ruleDelegate;
    NSIndexSet *_draggingRows;
    NSMutableArray *_rowCache;
    NSView *_slicesHolder;
    NSMutableArray *_slices;
    double _sliceHeight;
    double _alignmentGridWidth;
    long long _subviewIndexOfDropLine;
    id _dropLineView;
    NSViewAnimation *_currentAnimation;
    NSString *_stringsFileName;
    id _standardLocalizer;
    id _headerLocalizer;
    NSPredicate *_predicate;
    long long _nestingMode;
    struct { unsigned char elideUpdating : 1; unsigned char lastAlternateKeyValue : 1; unsigned char extendedDelegateCalls : 1; unsigned char editable : 1; unsigned char settingSize : 1; unsigned char suppressKeyDown : 1; unsigned char dropWasSuccessful : 1; unsigned char delegateWantsValidation : 1; unsigned char disallowEmpty : 1; unsigned char lastDrewWithFRAppearance : 1; unsigned char allowsEmptyCompoundRows : 1; unsigned char dropChangedRowCount : 1; unsigned int reserved : 20; } _ruleEditorFlags;
    NSString *_typeKeyPath;
    NSString *_itemsKeyPath;
    NSString *_valuesKeyPath;
    NSString *_subrowsArrayKeyPath;
    Class _rowClass;
    id _boundArrayOwner;
    NSString *_boundArrayKeyPath;
    long long _lastRow;
}

@property (weak) id<NSRuleEditorDelegate> delegate;
@property (copy) NSString *formattingStringsFilename;
@property (copy) NSDictionary *formattingDictionary;
@property unsigned long long nestingMode;
@property double rowHeight;
@property (getter=isEditable) BOOL editable;
@property BOOL canRemoveAllRows;
@property (readonly) NSPredicate *predicate;
@property (readonly) long long numberOfRows;
@property (readonly, copy) NSIndexSet *selectedRowIndexes;
@property Class rowClass;
@property (copy) NSString *rowTypeKeyPath;
@property (copy) NSString *subrowsKeyPath;
@property (copy) NSString *criteriaKeyPath;
@property (copy) NSString *displayValuesKeyPath;

+ (BOOL)accessibilityIsSingleCelled;

- (void)selectAll:(id)a0;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)encodeWithCoder:(id)a0;
- (BOOL)isFlipped;
- (void)_setPredicate:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)sizeToFit;
- (void).cxx_destruct;
- (BOOL)_isInDesignMode;
- (BOOL)_performDragForSlice:(id)a0 withEvent:(id)a1;
- (id)_queryChild:(long long)a0 ofItem:(id)a1 withRowType:(long long)a2;
- (id)_selectedSlices;
- (void)_sendRuleAction;
- (id)_slices;
- (id)_toolTipForAddCompoundRowButton;
- (void)addRow:(id)a0;
- (void)draggedImage:(id)a0 endedAt:(struct CGPoint { double x0; double x1; })a1 operation:(unsigned long long)a2;
- (void)reloadPredicate;
- (void)_performClickOnSlice:(id)a0 withEvent:(id)a1;
- (id)criteriaForRow:(long long)a0;
- (void)draggingExited:(id)a0;
- (void)unbind:(id)a0;
- (void)_addOptionFromSlice:(id)a0 ofRowType:(unsigned long long)a1;
- (double)_alignmentGridWidth;
- (BOOL)_allowsEmptyCompoundRows;
- (unsigned long long)_applicableNestingMode;
- (void)_changedItem:(id)a0 toItem:(id)a1 inRow:(long long)a2;
- (void)_changedRowArray:(id)a0 withOldRowArray:(id)a1 forParent:(id)a2;
- (id)_childlessParentsIfSlicesWereDeletedAtIndexes:(id)a0;
- (long long)_countOfRowsStartingAtObject:(id)a0;
- (id)_createNewSliceWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ruleEditorView:(id)a1;
- (id)_createSliceDropSeparator;
- (void)_deleteSlice:(id)a0;
- (void)_deselectAll;
- (id)_dragImageForIndices:(id)a0;
- (unsigned long long)_dragOperationFromInfo:(id)a0;
- (BOOL)_dragShouldBeginFromMouseDown:(id)a0;
- (id)_draggingTypes;
- (id)_extendItem:(id)a0 withRow:(long long)a1;
- (BOOL)_findRowObject:(id)a0 startingAtObject:(id)a1 withIndex:(long long *)a2;
- (void)_fullCacheUpdate;
- (void)_fullCacheUpdateRecursive:(id)a0 intoRow:(long long *)a1 withIndentation:(long long)a2;
- (id)_generateFormattingDictionaryString;
- (id)_generateFormattingDictionaryStringsFile;
- (void)_getAllAvailableItems:(id *)a0 values:(id *)a1 asChildrenOfItem:(id)a2 inRow:(long long)a3;
- (id)_getItemsAndValuesToAddForRow:(long long)a0 ofType:(unsigned long long)a1;
- (id)_globalIndexesForSubrowIndexes:(id)a0 ofParentObject:(id)a1;
- (id)_includeSubslicesForSlicesAtIndexes:(id)a0;
- (void)_initRuleEditorShared;
- (id)_insertNewRowAtIndex:(long long)a0 ofType:(unsigned long long)a1 withParentRow:(long long)a2;
- (long long)_lastRow;
- (long long)_lastSelectedSliceIndex;
- (long long)_layoutOrderForItem:(id)a0 inRow:(long long)a1;
- (id)_layoutOrdersForChoiceRootedAtItem:(id)a0 inRow:(long long)a1;
- (void)_loadInitialRows;
- (id)_localizerForSlice:(id)a0;
- (double)_minimumFrameHeight;
- (void)_mouseDownOnSlice:(id)a0 withEvent:(id)a1;
- (id)_newSlice;
- (BOOL)_nextUnusedItems:(id *)a0 andValues:(id *)a1 forRow:(long long)a2 forRowType:(unsigned long long)a3;
- (BOOL)_plusMinusButtonsAcceptFirstMouse;
- (void)_postRowCountChangedNotificationOfType:(long long)a0 indexes:(id)a1;
- (void)_postRuleOptionChangedNotification;
- (BOOL)_privateDelegateMethodsEnabled;
- (BOOL)_queryCanSelectItem:(id)a0 displayValue:(id)a1 inRow:(long long)a2;
- (long long)_queryNumberOfChildrenOfItem:(id)a0 withRowType:(unsigned long long)a1;
- (id)_queryOrderLocalizedDictionaries:(id)a0 withParent:(id)a1;
- (id)_queryValueForItem:(id)a0 inRow:(long long)a1;
- (void)_reconfigureSubviewsAnimate:(BOOL)a0;
- (void)_recursiveGenerateFormattingDictionaryPlistForItem:(id)a0 rowType:(unsigned long long)a1 intoArray:(id)a2 withPriorValues:(id)a3 hasSiblings:(BOOL)a4;
- (void)_removeSubrowsForRow:(long long)a0 fromSet:(id)a1;
- (void)_rightMouseDownOnSlice:(id)a0 withEvent:(id)a1;
- (id)_rootRowsArray;
- (id)_rowCacheForIndex:(long long)a0;
- (long long)_rowIndexForRowObject:(id)a0;
- (BOOL)_ruleViewHasFirstResponder;
- (id)_searchCacheForRowObject:(id)a0;
- (id)_selectedSliceIndices;
- (void)_setAlignmentGridWidth:(double)a0;
- (void)_setAllowsEmptyCompoundRows:(BOOL)a0;
- (void)_setBoundDataSource:(id)a0 withKeyPath:(id)a1 options:(id)a2;
- (void)_setHeaderLocalizer:(id)a0;
- (void)_setPrivateDelegateMethodsEnabled:(BOOL)a0;
- (void)_setStandardLocalizer:(id)a0;
- (void)_setSuppressKeyDownHandling:(BOOL)a0;
- (void)_setWindow:(id)a0;
- (BOOL)_shouldHideAddButtonForSlice:(id)a0;
- (BOOL)_shouldHideSubtractButtonForSlice:(id)a0;
- (void)_startObservingRowObjectsRecursively:(id)a0;
- (void)_stopAnimationWithoutChangingFrames;
- (void)_stopObservingRowObjectsRecursively:(id)a0;
- (unsigned long long)_subclassOverrideFlags;
- (id)_subrowObjectsOfObject:(id)a0;
- (BOOL)_suppressKeyDownHandling;
- (id)_toolTipForAddSimpleRowButton;
- (id)_toolTipForDeleteRowButton;
- (id)_uniqueizeIndexSet:(id)a0;
- (unsigned long long)_updateDragging:(id)a0;
- (void)_updatePredicate;
- (void)_updateRowTypesToAdd;
- (void)_updateSliceIndentationAtIndex:(long long)a0 toIndentation:(long long)a1 withIndexSet:(id)a2;
- (void)_updateSliceIndentations;
- (void)_updateSliceRows;
- (BOOL)_validateItem:(id)a0 value:(id)a1 inRow:(long long)a2;
- (BOOL)_wantsMinimalArchival;
- (BOOL)_wantsRowAnimations;
- (void)_windowChangedKeyState;
- (void)_windowUpdate:(id)a0;
- (id)accessibilityRoleAttribute;
- (void)bind:(id)a0 toObject:(id)a1 withKeyPath:(id)a2 options:(id)a3;
- (id)displayValuesForRow:(long long)a0;
- (unsigned long long)draggingEntered:(id)a0;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)a0;
- (unsigned long long)draggingUpdated:(id)a0;
- (void)insertRowAtIndex:(long long)a0 withType:(unsigned long long)a1 asSubrowOfRow:(long long)a2 animate:(BOOL)a3;
- (long long)parentRowForRow:(long long)a0;
- (BOOL)performDragOperation:(id)a0;
- (id)predicateForRow:(long long)a0;
- (void)reloadCriteria;
- (void)removeRowAtIndex:(long long)a0;
- (void)removeRowsAtIndexes:(id)a0 includeSubrows:(BOOL)a1;
- (long long)rowForDisplayValue:(id)a0;
- (unsigned long long)rowTypeForRow:(long long)a0;
- (void)selectRowIndexes:(id)a0 byExtendingSelection:(BOOL)a1;
- (void)setCriteria:(id)a0 andDisplayValues:(id)a1 forRowAtIndex:(long long)a2;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (id)subrowIndexesForRow:(long long)a0;
- (BOOL)wantsPeriodicDraggingUpdates;

@end
