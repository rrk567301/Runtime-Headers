@class NSString, NSView, NSURL, NSArray, NSLock, NSWindow;
@protocol NSDrawerDelegate;

@interface NSDrawer : NSResponder <NSAccessibilityElement, NSAccessibility> {
    unsigned long long _drawerState;
    unsigned long long _drawerNextState;
    unsigned long long _drawerEdge;
    unsigned long long _drawerNextEdge;
    unsigned long long _drawerPreferredEdge;
    float _drawerPercent;
    float _drawerPercentSaved;
    double _drawerLeadingOffset;
    double _drawerTrailingOffset;
    NSLock *_drawerLock;
    NSWindow *_drawerParentWindow;
    NSWindow *_drawerNextParentWindow;
    NSString *_drawerSaveName;
    double _drawerStartTime;
    double _drawerTotalTime;
    struct __CFRunLoop { } *_drawerLoop;
    struct __CFRunLoopTimer { } *_drawerTimer;
    id _drawerDelegate;
    unsigned int _drawerFlags;
    struct __CFRunLoopObserver { } *_drawerObserver;
    NSWindow *_drawerWindow;
}

@property NSWindow *parentWindow;
@property (retain) NSView *contentView;
@property unsigned long long preferredEdge;
@property id<NSDrawerDelegate> delegate;
@property (readonly) long long state;
@property (readonly) unsigned long long edge;
@property struct CGSize { double x0; double x1; } contentSize;
@property struct CGSize { double x0; double x1; } minContentSize;
@property struct CGSize { double x0; double x1; } maxContentSize;
@property double leadingOffset;
@property double trailingOffset;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isAccessibilityElement) BOOL accessibilityElement;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } accessibilityFrame;
@property (getter=isAccessibilityFocused) BOOL accessibilityFocused;
@property struct CGPoint { double x0; double x1; } accessibilityActivationPoint;
@property (weak) id accessibilityTopLevelUIElement;
@property (copy) NSURL *accessibilityURL;
@property (retain) id accessibilityValue;
@property (copy) NSString *accessibilityValueDescription;
@property (copy) NSArray *accessibilityVisibleChildren;
@property (copy) NSString *accessibilitySubrole;
@property (copy) NSString *accessibilityTitle;
@property (weak) id accessibilityTitleUIElement;
@property (copy) NSArray *accessibilityNextContents;
@property long long accessibilityOrientation;
@property (retain) id accessibilityOverflowButton;
@property (weak) id accessibilityParent;
@property (copy) NSString *accessibilityPlaceholderValue;
@property (copy) NSArray *accessibilityPreviousContents;
@property (copy) NSString *accessibilityRole;
@property (copy) NSString *accessibilityRoleDescription;
@property (retain) id accessibilitySearchButton;
@property (retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected) BOOL accessibilitySelected;
@property (copy) NSArray *accessibilitySelectedChildren;
@property (copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (retain) id accessibilityShownMenu;
@property (retain) id accessibilityMinValue;
@property (retain) id accessibilityMaxValue;
@property (copy) NSArray *accessibilityLinkedUIElements;
@property (weak) id accessibilityWindow;
@property (copy) NSString *accessibilityIdentifier;
@property (copy) NSString *accessibilityHelp;
@property (copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityExpanded) BOOL accessibilityExpanded;
@property (getter=isAccessibilityEdited) BOOL accessibilityEdited;
@property (getter=isAccessibilityEnabled) BOOL accessibilityEnabled;
@property (copy) NSArray *accessibilityChildren;
@property (copy) NSArray *accessibilityChildrenInNavigationOrder;
@property (retain) id accessibilityClearButton;
@property (retain) id accessibilityCancelButton;
@property (getter=isAccessibilityProtectedContent) BOOL accessibilityProtectedContent;
@property (copy) NSArray *accessibilityContents;
@property (copy) NSString *accessibilityLabel;
@property (getter=isAccessibilityAlternateUIVisible) BOOL accessibilityAlternateUIVisible;
@property (copy) NSArray *accessibilitySharedFocusElements;
@property (getter=isAccessibilityRequired) BOOL accessibilityRequired;
@property (copy) NSArray *accessibilityCustomRotors;
@property (copy) NSArray *accessibilityUserInputLabels;
@property (copy) NSArray *accessibilityAttributedUserInputLabels;
@property (retain) id accessibilityApplicationFocusedUIElement;
@property (retain) id accessibilityMainWindow;
@property (getter=isAccessibilityHidden) BOOL accessibilityHidden;
@property (getter=isAccessibilityFrontmost) BOOL accessibilityFrontmost;
@property (retain) id accessibilityFocusedWindow;
@property (copy) NSArray *accessibilityWindows;
@property (weak) id accessibilityExtrasMenuBar;
@property (weak) id accessibilityMenuBar;
@property (copy) NSArray *accessibilityColumnTitles;
@property (getter=isAccessibilityOrderedByRow) BOOL accessibilityOrderedByRow;
@property long long accessibilityHorizontalUnits;
@property long long accessibilityVerticalUnits;
@property (copy) NSString *accessibilityHorizontalUnitDescription;
@property (copy) NSString *accessibilityVerticalUnitDescription;
@property (copy) NSArray *accessibilityHandles;
@property (retain) id accessibilityWarningValue;
@property (retain) id accessibilityCriticalValue;
@property (getter=isAccessibilityDisclosed) BOOL accessibilityDisclosed;
@property (weak) id accessibilityDisclosedByRow;
@property (retain) id accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel;
@property (copy) NSArray *accessibilityMarkerUIElements;
@property (retain) id accessibilityMarkerValues;
@property (retain) id accessibilityMarkerGroupUIElement;
@property long long accessibilityUnits;
@property (copy) NSString *accessibilityUnitDescription;
@property long long accessibilityRulerMarkerType;
@property (copy) NSString *accessibilityMarkerTypeDescription;
@property (retain) id accessibilityHorizontalScrollBar;
@property (retain) id accessibilityVerticalScrollBar;
@property (copy) NSArray *accessibilityAllowedValues;
@property (copy) NSArray *accessibilityLabelUIElements;
@property float accessibilityLabelValue;
@property (copy) NSArray *accessibilitySplitters;
@property (retain) id accessibilityDecrementButton;
@property (retain) id accessibilityIncrementButton;
@property (copy) NSArray *accessibilityTabs;
@property (retain) id accessibilityHeader;
@property long long accessibilityColumnCount;
@property long long accessibilityRowCount;
@property long long accessibilityIndex;
@property (copy) NSArray *accessibilityColumns;
@property (copy) NSArray *accessibilityRows;
@property (copy) NSArray *accessibilityVisibleRows;
@property (copy) NSArray *accessibilitySelectedRows;
@property (copy) NSArray *accessibilityVisibleColumns;
@property (copy) NSArray *accessibilitySelectedColumns;
@property long long accessibilitySortDirection;
@property (copy) NSArray *accessibilityRowHeaderUIElements;
@property (copy) NSArray *accessibilitySelectedCells;
@property (copy) NSArray *accessibilityVisibleCells;
@property (copy) NSArray *accessibilityColumnHeaderUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityRowIndexRange;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityColumnIndexRange;
@property long long accessibilityInsertionPointLineNumber;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySharedCharacterRange;
@property (copy) NSArray *accessibilitySharedTextUIElements;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilityVisibleCharacterRange;
@property long long accessibilityNumberOfCharacters;
@property (copy) NSString *accessibilitySelectedText;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } accessibilitySelectedTextRange;
@property (copy) NSArray *accessibilitySelectedTextRanges;
@property (retain) id accessibilityToolbarButton;
@property (getter=isAccessibilityModal) BOOL accessibilityModal;
@property (retain) id accessibilityProxy;
@property (getter=isAccessibilityMain) BOOL accessibilityMain;
@property (retain) id accessibilityFullScreenButton;
@property (retain) id accessibilityGrowArea;
@property (copy) NSString *accessibilityDocument;
@property (retain) id accessibilityDefaultButton;
@property (retain) id accessibilityCloseButton;
@property (retain) id accessibilityZoomButton;
@property (retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized) BOOL accessibilityMinimized;
@property (copy) NSArray *accessibilityCustomActions;

+ (void)initialize;
+ (double)_drawerVelocity;
+ (unsigned long long)_drawerTransform;
+ (void)_setDrawerTransform:(unsigned long long)a0;
+ (void)_setDrawerVelocity:(double)a0;
+ (BOOL)_usesCorrectContentSize;

- (BOOL)isOpen;
- (id)menu;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrame;
- (void)setMenu:(id)a0;
- (void)_size;
- (void)dealloc;
- (id)undoManager;
- (void)toggle:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (void)open;
- (void)doCommandBySelector:(SEL)a0;
- (id)initWithCoder:(id)a0;
- (void)close:(id)a0;
- (void)close;
- (void)_changeKeyState;
- (void)_doDetachDrawer;
- (id)accessibilityActionDescription:(id)a0;
- (void)_doAttachDrawer;
- (void)_doRemoveDrawer;
- (void)_setDrawerEdge:(unsigned long long)a0;
- (void)_unhide;
- (BOOL)_allowsImplicitRemovalFromMovementGroup;
- (void)_changeFirstResponderToParentsFirstResponder;
- (void)_changeMainState;
- (void)_displayIfNeeded;
- (void)_doAttachDrawerIgnoreHidden:(BOOL)a0;
- (void)_doAutoselectEdge;
- (void)_doCloseDrawer;
- (void)_doOpenDrawer;
- (void)_doPositionDrawer;
- (void)_doPositionDrawerAndSize:(struct CGSize { double x0; double x1; })a0 parentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_doPositionDrawerAndSize:(struct CGSize { double x0; double x1; })a0 parentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 stashSize:(BOOL)a2;
- (void)_doResizeDrawerWithDelta:(struct CGPoint { double x0; double x1; })a0 fromFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_doSetParentWindow:(id)a0;
- (void)_doSlideDrawerWithDelta:(struct CGPoint { double x0; double x1; })a0;
- (void)_doStartDrawer;
- (void)_doStopDrawer;
- (id)_drawerWindow;
- (unsigned long long)_edge;
- (void)_endLiveResize;
- (void)_hide;
- (id)_initWithContentSize:(struct CGSize { double x0; double x1; })a0 preferredEdge:(unsigned long long)a1;
- (struct CGSize { double x0; double x1; })_minParentWindowContentSize;
- (void)_position;
- (id)_registerDragTypesIfNeeded;
- (void)_resetDisableCounts;
- (void)_resetPostingCounts;
- (void)_resizeWithDelta:(struct CGPoint { double x0; double x1; })a0 fromFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 beginOperation:(BOOL)a2 endOperation:(BOOL)a3;
- (void)_setLevel;
- (void)_setVisibleWithoutLogin;
- (void)_sizeWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_slideWithDelta:(struct CGPoint { double x0; double x1; })a0 beginOperation:(BOOL)a1 endOperation:(BOOL)a2;
- (void)_startLiveResize;
- (void)_takeFocus;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)a0;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)accessibilityIsAttributeSettable:(id)a0;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsParentAttributeSettable;
- (id)accessibilityParent;
- (id)accessibilityParentAttribute;
- (void)accessibilityPerformAction:(id)a0;
- (id)accessibilitySectionsAttribute;
- (void)accessibilitySetValue:(id)a0 forAttribute:(id)a1;
- (id)autosaveName;
- (void)flushBufferedKeyEvents;
- (void)helpRequested:(id)a0;
- (id)initWithContentSize:(struct CGSize { double x0; double x1; })a0 preferredEdge:(unsigned long long)a1;
- (void)interpretKeyEvents:(id)a0;
- (void)open:(id)a0;
- (void)openOnEdge:(unsigned long long)a0;
- (BOOL)performKeyEquivalent:(id)a0;
- (void)removeImmediately:(BOOL)a0;
- (void)setAutosaveName:(id)a0;
- (BOOL)tryToPerform:(SEL)a0 with:(id)a1;
- (id)validRequestorForSendType:(id)a0 returnType:(id)a1;

@end
