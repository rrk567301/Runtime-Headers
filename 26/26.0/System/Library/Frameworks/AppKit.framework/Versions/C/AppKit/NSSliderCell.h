@class NSSliderAccessory, NSString, CADisplayLink, NSTimer, NSView, NSMutableDictionary, NSColor, CAMediaTimingFunction;
@protocol NSSliderVisualProvider;

@interface NSSliderCell : NSActionCell <NSSliderTickMarksDelegate> {
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _trackRect;
    double _neutralValue;
    double _previousValue;
    double _originalValue;
    double _knobOffset;
    double _altIncValue;
    double _displayValue;
    BOOL _valueAnimationEnabled;
    BOOL _isCompatibleWithValueAnimation;
    BOOL _isAnimatingValue;
    double _animateToValue;
    double _animateFromValue;
    CADisplayLink *_valueAnimationDisplayLink;
    CAMediaTimingFunction *_valueAnimationTimingFunction;
    double _valueAnimationStartTime;
    NSMutableDictionary *_tickMarkProminence;
    double _defaultValue;
    long long _trackingPressureStage;
    NSSliderAccessory *_minimumValueAccessory;
    NSSliderAccessory *_maximumValueAccessory;
    id<NSSliderVisualProvider> _visualProvider;
    NSTimer *_repeatTimer;
    NSColor *_trackFillColor;
    NSView *_cachedControlViewForVibrancy;
    BOOL _cachedDisallowsVibrancy;
    long long __tintProminence;
    BOOL _hidesKnob;
    int _numberOfTickMarks;
    double _value;
    double _maxValue;
    double _minValue;
    struct __sliderCellFlags { unsigned char weAreVertical : 1; unsigned char weAreVerticalSet : 1; unsigned char weHaveStickyOrientation : 1; unsigned char isPressed : 1; unsigned char allowsTickMarkValuesOnly : 1; unsigned char tickMarkPosition : 1; unsigned char sliderType : 2; unsigned char drawing : 1; unsigned char snappedToTickMark : 1; unsigned char snappedToPreviousValue : 1; unsigned char snappedToDefaultValue : 1; unsigned char snappingAllowed : 1; unsigned char collapseOnResize : 1; unsigned char startedOnAccessory : 1; unsigned char explicitlySetVisualProvider : 1; unsigned char explicitlySetNeutralValue : 1; unsigned short reserved2 : 15; } _scFlags;
}

@property (class, readonly) BOOL prefersTrackingUntilMouseUp;

@property (readonly) double _primaryTickMarkInset;
@property (readonly) double _orthogonalTickMarkInset;
@property (readonly) double _lastBaselineOffsetFromBottom;
@property BOOL usesAquaduck;
@property (readonly) id<NSSliderVisualProvider> _visualProvider;
@property double minValue;
@property double maxValue;
@property double altIncrementValue;
@property unsigned long long sliderType;
@property (getter=isVertical) BOOL vertical;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } trackRect;
@property (readonly) double knobThickness;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (Class)_visualProviderClassForDrawingState:(struct { unsigned long long x0; unsigned long long x1; BOOL x2; long long x3; long long x4; double x5; double x6; BOOL x7; BOOL x8; BOOL x9; long long x10; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x11; double x12; BOOL x13; id x14; id x15; BOOL x16; long long x17; BOOL x18; double x19; double x20; double x21; double x22; BOOL x23; long long x24; BOOL x25; unsigned long long x26; BOOL x27; })a0;

- (long long)integerValue;
- (id)objectValue;
- (void)setObjectValue:(id)a0;
- (id)titleColor;
- (BOOL)isOpaque;
- (void)setDoubleValue:(double)a0;
- (double)defaultValue;
- (float)floatValue;
- (void)setIntegerValue:(long long)a0;
- (void)dealloc;
- (void)setTitleColor:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)setStringValue:(id)a0;
- (id)titleFont;
- (void)setImage:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (id)stringValue;
- (void)setControlSize:(unsigned long long)a0;
- (id)init;
- (double)doubleValue;
- (void)setDefaultValue:(double)a0;
- (void)setTitleFont:(id)a0;
- (id)image;
- (BOOL)isContinuous;
- (id)title;
- (void)setFloatValue:(float)a0;
- (void)setTitle:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setContinuous:(BOOL)a0;
- (int)intValue;
- (void).cxx_destruct;
- (long long)_tintProminence;
- (id)accessibilityActionDescription:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })barRectFlipped:(BOOL)a0;
- (void)setTickMarkIsProminent:(BOOL)a0 atIndex:(long long)a1;
- (void)accessibilitySetFocus:(id)a0 forChild:(id)a1;
- (void)accessibilitySetValueAttribute:(id)a0;
- (unsigned long long)barFill;
- (BOOL)continueTrackingGesture:(id)a0 inView:(id)a1;
- (double)normalizedTickMarkValueAtIndex:(long long)a0;
- (void)setControlView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_accessibilityIndicatorRect;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_alignmentRectInsetsInView:(id)a0;
- (BOOL)_applicableShowsFocus;
- (BOOL)_barIsTintedWithValue;
- (BOOL)_calcTrackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 andAdjustRect:(BOOL)a1;
- (void)_clearValueAnimation;
- (BOOL)_collapsesOnResize;
- (struct { unsigned long long x0; unsigned long long x1; BOOL x2; long long x3; long long x4; double x5; double x6; BOOL x7; BOOL x8; BOOL x9; long long x10; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x11; double x12; BOOL x13; id x14; id x15; BOOL x16; long long x17; BOOL x18; double x19; double x20; double x21; double x22; BOOL x23; long long x24; BOOL x25; unsigned long long x26; BOOL x27; })_currentDrawingState;
- (struct { unsigned long long x0; unsigned long long x1; BOOL x2; long long x3; long long x4; double x5; double x6; BOOL x7; BOOL x8; BOOL x9; long long x10; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x11; double x12; BOOL x13; id x14; id x15; BOOL x16; long long x17; BOOL x18; double x19; double x20; double x21; double x22; BOOL x23; long long x24; BOOL x25; unsigned long long x26; BOOL x27; })_currentDrawingStateWithAppearance:(id)a0;
- (void)_drawCustomTrackWithTrackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_drawMaxValueImage;
- (void)_drawMinValueImage;
- (void)_drawTickMarks;
- (void)_drawValueImage:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)_drawsBackground;
- (long long)_effectiveControlState;
- (id)_effectiveSymbolConfiguration;
- (long long)_effectiveTickMarkPosition;
- (long long)_effectiveUserInterfaceLayoutDirection;
- (BOOL)_hasCustomDrawKnob;
- (BOOL)_hasSnappingBehavior;
- (BOOL)_isR2L;
- (BOOL)_isVertical;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_knobRectFlipped:(BOOL)a0 value:(double)a1;
- (void)_moveInDirection:(unsigned long long)a0;
- (BOOL)_needRedrawOnWindowChangedKeyState;
- (double)_normalizedDoubleValue;
- (double)_normalizedNeutralValue;
- (BOOL)_noteTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 startEvent:(BOOL)a3 endEvent:(BOOL)a4;
- (BOOL)_noteTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 startEvent:(BOOL)a3 endEvent:(BOOL)a4 canValidateValue:(BOOL)a5;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectOfMaxValueImageFlipped:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectOfMinValueImageFlipped:(BOOL)a0;
- (void)_repeatTimerFired:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_resetTrackRectWithCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setCollapsesOnResize:(BOOL)a0;
- (BOOL)_setKnobThickness:(double)a0 usingInsetRect:(BOOL)a1;
- (void)_setTintProminence:(long long)a0;
- (void)_setVisualProvider:(id)a0;
- (BOOL)_shouldSendActionForEventType:(unsigned long long)a0;
- (unsigned long long)_subclassOverrideFlags;
- (BOOL)_tickMarksAreOnLeftOrTopEdge;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_trackRectForCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_updateValueAnimationCompatibility;
- (BOOL)_usesCustomTrackImage;
- (int)_vibrancyBlendModeForControlView:(id)a0;
- (id)_visualProviderIfExists;
- (id)_visualProviderInView:(id)a0;
- (id)accessibilityActionNames;
- (id)accessibilityActivationPointAttribute;
- (id)accessibilityAllowedValuesAttribute;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityHelpStringForChild:(id)a0;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)accessibilityIsActivationPointAttributeSettable;
- (BOOL)accessibilityIsAllowedValuesAttributeSettable;
- (BOOL)accessibilityIsChildFocusable:(id)a0;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsMaxValueAttributeSettable;
- (BOOL)accessibilityIsMinValueAttributeSettable;
- (BOOL)accessibilityIsOrientationAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (BOOL)accessibilityIsValueIndicatorAttributeSettable;
- (id)accessibilityMaxValueAttribute;
- (id)accessibilityMinValueAttribute;
- (id)accessibilityOrientationAttribute;
- (void)accessibilityPerformAction:(id)a0;
- (id)accessibilityPositionOfChild:(id)a0;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySizeOfChild:(id)a0;
- (id)accessibilityValueAttribute;
- (id)accessibilityValueIndicatorAttribute;
- (BOOL)allowsTickMarkValuesOnly;
- (BOOL)animates;
- (BOOL)beginTrackingGestureRecognizer:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (struct CGSize { double x0; double x1; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (long long)closestTickMarkIndexToValue:(double)a0;
- (double)closestTickMarkValueToValue:(double)a0;
- (BOOL)continueTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2;
- (void)drawBarInside:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 flipped:(BOOL)a1;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawKnob;
- (void)drawKnob:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawTickMarks;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (BOOL)hidesKnob;
- (unsigned long long)hitTestForEvent:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (long long)indexOfTickMarkAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)invalidateRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forControlView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })knobRectFlipped:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })knobValueRangeRect:(BOOL)a0;
- (id)maxValueImage;
- (id)maximumValueAccessory;
- (id)minValueImage;
- (id)minimumValueAccessory;
- (double)neutralValue;
- (long long)numberOfTickMarks;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectOfTickMarkAtIndex:(long long)a0;
- (void)setAllowsTickMarkValuesOnly:(BOOL)a0;
- (void)setAnimates:(BOOL)a0;
- (void)setBarFill:(unsigned long long)a0;
- (void)setHidesKnob:(BOOL)a0;
- (void)setIntValue:(int)a0;
- (void)setKnobThickness:(double)a0;
- (void)setMaxValueImage:(id)a0;
- (void)setMaximumValueAccessory:(id)a0;
- (void)setMinValueImage:(id)a0;
- (void)setMinimumValueAccessory:(id)a0;
- (void)setNeutralValue:(double)a0;
- (void)setNumberOfTickMarks:(long long)a0;
- (void)setTickMarkPosition:(unsigned long long)a0;
- (void)setTitleCell:(id)a0;
- (void)setTrackFillColor:(id)a0;
- (BOOL)startTrackingAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (void)stopTracking:(struct CGPoint { double x0; double x1; })a0 at:(struct CGPoint { double x0; double x1; })a1 inView:(id)a2 mouseIsUp:(BOOL)a3;
- (BOOL)tickMarkIsProminentAtIndex:(long long)a0;
- (unsigned long long)tickMarkPosition;
- (double)tickMarkValueAtIndex:(long long)a0;
- (id)titleCell;
- (void)touchEndedAt:(struct CGPoint { double x0; double x1; })a0 inView:(id)a1;
- (id)trackFillColor;
- (BOOL)trackMouse:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 untilMouseUp:(BOOL)a3;

@end
