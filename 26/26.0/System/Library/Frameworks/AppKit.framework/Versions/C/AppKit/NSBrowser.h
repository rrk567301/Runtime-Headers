@class NSMutableArray, NSString, NSArray, NSScroller, _NSBlockKeyValueObservation, NSIndexPath, NSColor;
@protocol NSBrowserDelegate;

@interface NSBrowser : NSControl {
    id _delegate;
    SEL _doubleAction;
    id _cellPrototype;
    struct CGSize { double width; double height; } _columnSize;
    short _numberOfVisibleColumns;
    short _minColumnWidth;
    short _firstVisibleColumn;
    short _maxVisibleColumns;
    NSMutableArray *_titles;
    NSString *_pathSeparator;
    id _brAuxiliaryStorage;
    NSString *_firstColumnTitle;
    NSScroller *_scroller;
    struct __Brflags { unsigned char firstVisibleCalculationDisabled : 1; unsigned char prefersAllColumnUserResizing : 1; unsigned char usesSmallScrollers : 1; unsigned char usesSmallSizeTitleFont : 1; unsigned char actionNeedsToBeSent : 1; unsigned char acceptsFirstMouse : 1; unsigned char refusesFirstResponder : 1; unsigned char disableCompositing : 6; unsigned char delegateSelectsCellsByRow : 1; unsigned char allowsIncrementalSearching : 1; unsigned char time : 1; unsigned char hasHorizontalScroller : 1; unsigned char prohibitEmptySel : 1; unsigned char sendActionOnArrowKeys : 1; unsigned char dontDrawTitles : 1; unsigned char acceptArrowKeys : 1; unsigned char delegateValidatesColumns : 1; unsigned char delegateDoesNotCreateRowsInMatrix : 1; unsigned char delegateSelectsCellsByString : 1; unsigned char delegateSetsTitles : 1; unsigned char delegateImplementsWillDisplayCell : 1; unsigned char separateColumns : 1; unsigned char titleFromPrevious : 1; unsigned char isTitled : 1; unsigned char reuseColumns : 1; unsigned char allowsBranchSelection : 1; unsigned char allowsMultipleSelection : 1; } _brflags;
    Class _matrixClass;
    NSMutableArray *_columns;
    struct NSEdgeInsets { double top; double left; double bottom; double right; } _contentInsets;
    unsigned char _automaticallyAdjustsContentInsets : 1;
    _NSBlockKeyValueObservation *_titlebarOverhangObservation;
}

@property (class, readonly) Class cellClass;

@property (readonly, getter=isLoaded) BOOL loaded;
@property SEL doubleAction;
@property (retain) id cellPrototype;
@property (weak) id<NSBrowserDelegate> delegate;
@property BOOL reusesColumns;
@property BOOL hasHorizontalScroller;
@property BOOL autohidesScroller;
@property BOOL separatesColumns;
@property (getter=isTitled) BOOL titled;
@property double minColumnWidth;
@property long long maxVisibleColumns;
@property BOOL allowsMultipleSelection;
@property BOOL allowsBranchSelection;
@property BOOL allowsEmptySelection;
@property BOOL takesTitleFromPreviousColumn;
@property BOOL sendsActionOnArrowKeys;
@property (copy) NSString *pathSeparator;
@property (readonly) long long clickedColumn;
@property (readonly) long long clickedRow;
@property (readonly) long long selectedColumn;
@property (readonly) id selectedCell;
@property (readonly, copy) NSArray *selectedCells;
@property (copy) NSIndexPath *selectionIndexPath;
@property (copy) NSArray *selectionIndexPaths;
@property long long lastColumn;
@property (readonly) long long numberOfVisibleColumns;
@property (readonly) long long firstVisibleColumn;
@property (readonly) long long lastVisibleColumn;
@property (readonly) double titleHeight;
@property unsigned long long columnResizingType;
@property BOOL prefersAllColumnUserResizing;
@property double rowHeight;
@property (copy) NSString *columnsAutosaveName;
@property BOOL allowsTypeSelect;
@property (retain) NSColor *backgroundColor;

+ (void)initialize;
+ (Class)matrixColumnViewControllerClass;
+ (BOOL)_prefersCellUserInterfaceLayoutDirection;
+ (BOOL)accessibilityIsSingleCelled;
+ (Class)browserColumnViewClass;
+ (Class)browserTableColumnClass;
+ (Class)browserTableViewClass;
+ (id)defaultAnimationForKey:(id)a0;
+ (Class)previewColumnViewControllerClass;
+ (void)removeSavedColumnsWithAutosaveName:(id)a0;
+ (Class)tableColumnViewControllerClass;

- (void)selectAll:(id)a0;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)mouseDown:(id)a0;
- (void)becomeKeyWindow;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })contentInsets;
- (BOOL)isOpaque;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (BOOL)setPath:(id)a0;
- (void)updateLayer;
- (void)setMenu:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)keyDown:(id)a0;
- (BOOL)resignFirstResponder;
- (void)encodeWithCoder:(id)a0;
- (void)setEnabled:(BOOL)a0;
- (id)valueForKey:(id)a0;
- (BOOL)becomeFirstResponder;
- (id)path;
- (void)setControlSize:(unsigned long long)a0;
- (void)setValue:(id)a0 forKeyPath:(id)a1;
- (void)viewDidMoveToWindow;
- (id)initWithCoder:(id)a0;
- (void)setContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)tile;
- (void).cxx_destruct;
- (void)validateVisibleColumns;
- (struct CGSize { double x0; double x1; })_calcVisibleColumnAreaAvailable;
- (BOOL)_doMoveBackward;
- (void)_dragRowIndexes:(id)a0 inColumn:(long long)a1 withEvent:(id)a2 pasteboard:(id)a3 source:(id)a4 slideBack:(BOOL)a5;
- (id)_lastDraggedOrUpEventFollowing:(id)a0;
- (id)_recursiveSetDefaultKeyViewLoop;
- (void)_releaseAutoExpandingItemsCache;
- (void)_scrollColumnToVisible:(long long)a0 private:(BOOL)a1;
- (void)_setBorderType:(unsigned long long)a0;
- (id)_typeSelectStringForColumn:(long long)a0 row:(long long)a1;
- (long long)columnOfMatrix:(id)a0;
- (void)draggedImage:(id)a0 endedAt:(struct CGPoint { double x0; double x1; })a1 operation:(unsigned long long)a2;
- (BOOL)ignoreModifierKeysWhileDragging;
- (id)matrixInColumn:(long long)a0;
- (void)resignKeyWindow;
- (void)setMatrixClass:(Class)a0;
- (void)_old_encodeWithCoder_NSBrowser:(id)a0;
- (void)_tileContinuousScrollingBrowser;
- (void)draggingExited:(id)a0;
- (void)setNextKeyView:(id)a0;
- (BOOL)_actOnKeyDown:(id)a0;
- (void)_addAnimatedColumn;
- (void)_addColumnSubviewAndAnimateIfNecessary:(id)a0;
- (void)_addColumnWithoutChangingVisibleColumn;
- (BOOL)_addingOrAnimatingNewColumn;
- (void)_alignColumnForStretchedWindowWithInfo:(struct _NSBrowserColumnResizeInfo { BOOL x0; BOOL x1; BOOL x2; id x3; long long x4; double x5; struct CGSize { double x0; double x1; } x6; } *)a0;
- (void)_alignFirstVisibleColumnToDocumentViewEdge:(BOOL)a0;
- (BOOL)_allowsDelegateSizingForUserResize;
- (void)_animateLastAddedColumnToVisible;
- (Class)_animatorClass;
- (BOOL)_autoExpandItemUnderCursor;
- (void)_autosaveColumnsIfNecessary;
- (void)_autoscrollForDraggingInfo:(id)a0 timeDelta:(double)a1;
- (void)_beforeDrawCell:(id)a0 atRow:(long long)a1 col:(long long)a2 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3;
- (void)_beginColumnDragging;
- (unsigned long long)_borderType;
- (id)_browserIBMetrics;
- (void)_bumpSelectedItem:(id)a0;
- (void)_calcNumVisibleColumnsAndColumnSize;
- (long long)_calculateSizeToFitWidthOfColumn:(long long)a0 testLoadedOnly:(BOOL)a1;
- (BOOL)_canDragRowsWithIndexes:(id)a0 inColumn:(long long)a1 withEvent:(id)a2;
- (void)_cancelAutoExpandItemUnderCursor;
- (id)_child:(long long)a0 ofItem:(id)a1;
- (Class)_classToCheckForWantsUpdateLayer;
- (void)_clearLeafControllers;
- (void)_clearVisitedColumnContentWidths;
- (void)_collapseAutoExpandedItems;
- (id)_columnControllerInColumn:(long long)a0;
- (long long)_columnOfView:(id)a0;
- (void)_columnResizeChangeFrameOfColumn:(id)a0 toFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 constrainWidth:(BOOL)a2 resizeInfo:(struct _NSBrowserColumnResizeInfo { BOOL x0; BOOL x1; BOOL x2; id x3; long long x4; double x5; struct CGSize { double x0; double x1; } x6; } *)a3;
- (void)_commitAutoExpandedItems;
- (void)_computeAndAlignFirstClosestVisibleColumn;
- (void)_computeFirstCompletelyVisibleColumn;
- (void)_computeFirstMostlyVisibleColumn;
- (void)_computeFirstVisibleColumnRequireCompletelyVisible:(BOOL)a0;
- (void)_concludeDragRows:(id)a0 inColumn:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_containerRelativeFrameOfColumn:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_containerRelativeFrameOfInsideOfColumn:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_containerRelativeTitleFrameOfColumn:(long long)a0;
- (id)_containerViewOfColumns;
- (id)_containerViewOfTitles;
- (BOOL)_continuousResizeNotifications;
- (unsigned long long)_controlSizeForScrollers;
- (id)_createColumn:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 empty:(BOOL)a1;
- (BOOL)_delegateDoesNotCreateRowsInMatrix;
- (BOOL)_delegateRepondsToValidateDrop;
- (BOOL)_delegateRespondsToNamesOfPromisedFilesDroppedAtDestination;
- (BOOL)_delegateRespondsToSelectCellsByRow;
- (BOOL)_delegateRespondsToWillDisplayCell;
- (BOOL)_delegateRespondsToWriteRows;
- (BOOL)_determineIsSameTargetForDragInfo:(id)a0;
- (void)_didChangeLastColumn:(long long)a0 toColumn:(long long)a1;
- (void)_disableAutosavingAndColumnResizingNotificationsAndMark:(BOOL)a0;
- (void)_disableColumnAnimation;
- (void)_doClickAndQueueSendingOfAction:(id)a0;
- (void)_doClickAndQueueSendingOfAction:(id)a0 removeAndAddColumnsIfNecessary:(BOOL)a1 movingBack:(BOOL)a2;
- (BOOL)_doMoveForward;
- (void)_doPostColumnConfigurationDidChangeNotification:(id)a0;
- (void)_doTiming;
- (BOOL)_dragShouldBeginFromMouseDown:(id)a0;
- (id)_draggingImageForRowsWithIndexes:(id)a0 inColumn:(long long)a1 withEvent:(id)a2 offset:(struct CGPoint { double x0; double x1; } *)a3;
- (void)_drawDropHighlight;
- (void)_drawDropHighlightAboveRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_drawDropHighlightAroundColumnWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_drawDropHighlightAroundRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isSelected:(BOOL)a1 rounded:(BOOL)a2;
- (void)_drawDropHighlightBackgroundAroundRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_drawEmptyColumnsForView:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)_drawRectIfEmptyWhenSubviewsCoverDirtyRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_drawScrollViewFocusRing:(id)a0 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 needsFullDisplay:(BOOL)a2;
- (void)_drawTitlesForView:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)_dropHighlightBackgroundColor;
- (id)_dropHighlightColor;
- (id)_dropHighlightColorForEntireTableView;
- (void)_enableAutosavingAndColumnResizingNotifications;
- (void)_enableColumnAnimation;
- (void)_endColumnDragging;
- (void)_ensureValidSelection;
- (void)_equalyResizeColumnsByDelta:(double)a0 resizeInfo:(struct _NSBrowserColumnResizeInfo { BOOL x0; BOOL x1; BOOL x2; id x3; long long x4; double x5; struct CGSize { double x0; double x1; } x6; } *)a1;
- (void)_fastPathDrawEmptyColumnsForView:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)_findRow:(long long *)a0 column:(long long *)a1 forItem:(id)a2;
- (long long)_firstSelectableRowInMatrix:(id)a0 inColumn:(long long)a1;
- (void)_fixKeyViewForView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_focusRingRect;
- (BOOL)_forceSynchronizedScrollingAnimation;
- (id)_gdbColumnControllers;
- (id)_gdbLeafItemViewControllerByItem;
- (BOOL)_getMatchingRow:(long long *)a0 forString:(id)a1 inMatrix:(id)a2 startingAtRow:(long long)a3 prefixMatch:(BOOL)a4 caseSensitive:(BOOL)a5;
- (BOOL)_hasKeyboardFocus;
- (BOOL)_hasLeafViewControllerForItem:(id)a0;
- (id)_hitTest:(struct CGPoint { double x0; double x1; } *)a0 dragTypes:(id)a1;
- (id)_horizontalScroller;
- (BOOL)_hoverAreaIsSameAsLast:(id)a0;
- (id)_imageForEmptyColumnOfSize:(struct CGSize { double x0; double x1; })a0;
- (id)_imageForEmptyVerticalScroller;
- (long long)_indexOfItem:(id)a0 inColumn:(long long)a1;
- (long long)_indexOfItem:(id)a0 inParent:(id)a1;
- (long long)_internalNextTypeSelectMatchFromRow:(long long)a0 toRow:(long long)a1 inColumn:(long long)a2 forString:(id)a3;
- (id)_internalTypeSelectStringForColumn:(long long)a0 row:(long long)a1;
- (BOOL)_isAccessibilityContentSectionCandidate;
- (BOOL)_isExpandableItem:(id)a0;
- (BOOL)_isExpandableRow:(long long)a0 withParentItem:(id)a1;
- (BOOL)_isLeafRow:(long long)a0 withParentItem:(id)a1;
- (BOOL)_isTypeSelectRow:(long long)a0 column:(long long)a1;
- (id)_itemAtRow:(long long)a0 parentItem:(id)a1;
- (void)_itemBasedReloadColumn:(long long)a0;
- (long long)_keyRowOrSelectedRowOfMatrix:(id)a0 inColumn:(long long)a1;
- (id)_lastDraggedEventFollowing:(id)a0;
- (id)_lastNonLeafColumnController;
- (id)_loadCell:(id)a0 atRow:(long long)a1 col:(long long)a2 inMatrix:(id)a3;
- (id)_loadedCellAtRow:(long long)a0 column:(long long)a1 inMatrix:(id)a2;
- (void)_markAutoExpandedItemWithDragInfo:(id)a0;
- (void)_matrixBasedReloadColumn:(long long)a0;
- (BOOL)_matrixShouldAddColumnForColumn:(long long)a0 matrix:(id)a1;
- (struct CGSize { double x0; double x1; })_minimumDocumentViewSize;
- (id)_newSelectionIndexesFromOldSelectedItems:(id)a0 parentItem:(id)a1;
- (long long)_nextTypeSelectMatchFromRow:(long long)a0 toRow:(long long)a1 inColumn:(long long)a2 forString:(id)a3;
- (long long)_numberOfChildrenOfItem:(id)a0;
- (id)_old_initWithCoder_NSBrowser:(id)a0;
- (BOOL)_performDragFromMouseDown:(id)a0 inColumn:(long long)a1;
- (BOOL)_performTypeSelect:(id)a0;
- (void)_postColumnConfigurationDidChangeNotification;
- (void)_postDidScrollNotification;
- (void)_postWillScrollNotification;
- (double)_preferedColumnWidth;
- (void)_prepareToDragRows:(id)a0 inColumn:(long long)a1;
- (void)_readPersistentBrowserColumns;
- (void)_reattachColumnSubviews:(id)a0;
- (void)_recursiveDisplayAllDirtyWithLockFocus:(BOOL)a0 visRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_recursiveDisplayRectIfNeededIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isVisibleRect:(BOOL)a1 rectIsVisibleRectForView:(id)a2 topView:(BOOL)a3;
- (void)_reloadRow:(long long)a0 column:(long long)a1;
- (void)_resizeColumn:(id)a0 withEvent:(id)a1;
- (void)_resizeColumnByDelta:(double)a0 resizeInfo:(struct _NSBrowserColumnResizeInfo { BOOL x0; BOOL x1; BOOL x2; id x3; long long x4; double x5; struct CGSize { double x0; double x1; } x6; } *)a1;
- (void)_restoreLastSelectedItemsBeforeAutoExpand;
- (void)_restoreTypeSelectCellValue;
- (id)_rootItem;
- (void)_scheduleCollapsingAutoExpandedItems;
- (void)_scrollColumnToLastVisible:(long long)a0;
- (void)_scrollColumnToVisible:(long long)a0 requireCompletelyVisible:(BOOL)a1;
- (BOOL)_scrollColumnsForScrollerIncrementOrDecrementUsingPart:(long long)a0;
- (void)_scrollColumnsRightBy:(long long)a0;
- (void)_scrollFirstVisibleColumnIntoView;
- (void)_scrollLastColumnTrailingEdgeToVisible;
- (void)_scrollOptimizingLastColumnPlacement;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_scrollViewForColumns;
- (void)_scrollViewForColumnsDidTrackHorizontalScroller:(id)a0;
- (void)_scrollViewForColumnsDocumentViewFrameDidChange:(id)a0;
- (void)_scrollViewForColumnsDocumentViewVisibilityChange:(id)a0;
- (void)_scrollViewForColumnsWillTrackHorizontalScroller:(id)a0;
- (BOOL)_selectCell:(id)a0 inColumn:(long long)a1;
- (BOOL)_selectItemBestMatching:(id)a0;
- (void)_selectRowIndexes:(id)a0 inColumn:(long long)a1;
- (id)_selectedCellsInColumn:(long long)a0;
- (long long)_selectedOrFirstValidRowInColumn:(long long)a0;
- (BOOL)_sendDelegateAcceptDropForDragInfo:(id)a0;
- (void)_sendDelegateCreateRowsForColumn:(long long)a0 inMatrix:(id)a1;
- (BOOL)_sendDelegateSelectRow:(long long)a0 inColumn:(long long)a1;
- (void)_sendDelegateValidateDropForDragInfo:(id)a0;
- (void)_sendDelegateWillDisplayCell:(id)a0 atRow:(long long)a1 column:(long long)a2;
- (BOOL)_sendDelegateWriteRowsWithIndexes:(id)a0 inColumn:(long long)a1 toPasteboard:(id)a2;
- (void)_sendQueuedAction;
- (void)_setAcceptsFirstMouse:(BOOL)a0;
- (void)_setAllowsDelegateSizingForUserResize:(BOOL)a0;
- (void)_setClickedColumn:(long long)a0 clickedRow:(long long)a1;
- (void)_setContinuousResizeNotifications:(BOOL)a0;
- (void)_setDropHighilightColorIfSelected:(BOOL)a0;
- (void)_setDropTargetColumn:(long long)a0 targetRow:(long long)a1 targetDropOperation:(unsigned long long)a2 dragOperation:(unsigned long long)a3;
- (void)_setFirstColumnTitle:(id)a0;
- (void)_setFocusRingNeedsDisplay;
- (void)_setHasHorizontalScroller:(BOOL)a0;
- (void)_setInitialColumnContentSizeOfColumn:(id)a0;
- (void)_setLineBorderColor:(id)a0;
- (void)_setNeedsDisplayBeginingAtColumn:(long long)a0;
- (void)_setNeedsDisplayForTargetRow:(long long)a0 column:(long long)a1 operation:(unsigned long long)a2;
- (void)_setNeedsDisplayInColumn:(long long)a0;
- (void)_setNewPreferedColumnWidth:(double)a0;
- (void)_setNumVisibleColumns:(long long)a0;
- (void)_setScrollViewForColumns:(id)a0;
- (void)_setScrollerSize:(unsigned long long)a0;
- (void)_setShouldAnimateColumnScrolling:(BOOL)a0;
- (void)_setShouldForwardTypeSelectionToNextColumn:(BOOL)a0;
- (void)_setTitle:(id)a0 ofColumn:(long long)a1;
- (void)_setUsesSmallTitleFont:(BOOL)a0;
- (void)_setVisibleRectOfColumns:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setWantsRevealovers:(BOOL)a0;
- (void)_setWidth:(double)a0 ofColumn:(long long)a1 stretchWindow:(BOOL)a2;
- (BOOL)_shouldAnimateColumnScrolling;
- (BOOL)_shouldAutoExpandItemAtRow:(long long)a0 inColumn:(long long)a1;
- (BOOL)_shouldAutoScrollForPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_shouldAutoscrollForDraggingInfo:(id)a0;
- (BOOL)_shouldClipViewForTitlesCopyOnScroll;
- (BOOL)_shouldDelegateTargetActionForSelector:(SEL)a0;
- (BOOL)_shouldDrawFocus;
- (BOOL)_shouldForwardTypeSelectionToNextColumn;
- (BOOL)_shouldMaintainFirstResponder;
- (BOOL)_shouldScrollStartOfColumnToVisible;
- (BOOL)_shouldShowCellExpansionForRow:(long long)a0 column:(long long)a1;
- (BOOL)_shouldStretchWindowIfNecessaryForUserColumnResize;
- (BOOL)_shouldTypeSelectForEvent:(id)a0;
- (void)_sizeDocumentViewToColumns;
- (void)_sizeDocumentViewToColumnsAndAlign;
- (void)_sizeDocumentViewToColumnsAndAlignIfNecessary:(BOOL)a0;
- (void)_sizeMatrixOfColumnToFit:(id)a0;
- (void)_sizeToFitColumn:(id)a0 withEvent:(id)a1;
- (void)_sizeToFitColumn:(id)a0 withSizeToFitType:(long long)a1;
- (void)_sizeToFitColumnMenuAction:(id)a0;
- (void)_slowPathDrawEmptyColumnsForView:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_startObservingScrollerOfScrollViewForColumns;
- (void)_stopObservingScrollerOfScrollViewForColumns;
- (BOOL)_stretchWindowIfNecessaryToFitResizedColumnWithInfo:(struct _NSBrowserColumnResizeInfo { BOOL x0; BOOL x1; BOOL x2; id x3; long long x4; double x5; struct CGSize { double x0; double x1; } x6; } *)a0 resizeColumnDelta:(double *)a1;
- (unsigned long long)_subclassOverrideFlags;
- (void)_syncScrollerSizeOfColumn:(id)a0;
- (void)_synchronizeTitlesAndColumnsViewFrame;
- (void)_synchronizeTitlesAndColumnsViewVisibleRect;
- (id)_titleCellOfColumn:(long long)a0;
- (void)_typeSelectEndCurrentSearch;
- (BOOL)_typeSelectInterpretKeyEvent:(id)a0;
- (void)_typeSelectScheduleEndOfSearch;
- (id)_typeSelectString;
- (BOOL)_typeSelectUndoLastSearch;
- (id)_uncachedLastSelectedIndexSetForItem:(id)a0;
- (id)_unhookColumnSubviews;
- (void)_updateAutomaticContentInsets;
- (void)_updateNumberOfTitleCellsIfNecessary;
- (void)_updateNumberOfTitleCellsIfNecessary:(long long)a0;
- (BOOL)_useSnowLeopardBehavior;
- (BOOL)_userClickOrKeyInColumnShouldMaintainColumnPosition;
- (BOOL)_usingGoldenStyles;
- (void)_validateDropForDragInfo:(id)a0;
- (double)_validateNewWidthOfColumn:(id)a0 width:(double)a1;
- (id)_viewInColumn:(long long)a0;
- (id)_viewThatShouldBecomeFirstResponder;
- (void)_viewWillResignFirstResponder:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleRectOfColumns;
- (id)_visitedColumnContentWidths;
- (void)_willStartTrackingMouseInMatrix:(id)a0 withEvent:(id)a1;
- (void)_windowChangedKeyState;
- (void)_writePersistentBrowserColumns;
- (void)_zeroPinnedResizeColumnsBySharingDelta:(double)a0 lastSharingColumn:(id)a1 resizeInfo:(struct _NSBrowserColumnResizeInfo { BOOL x0; BOOL x1; BOOL x2; id x3; long long x4; double x5; struct CGSize { double x0; double x1; } x6; } *)a2;
- (BOOL)abortEditing;
- (BOOL)acceptsArrowKeys;
- (BOOL)acceptsFirstMouse:(id)a0;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityAttributeNames;
- (id)accessibilityColumnTitlesAttribute;
- (id)accessibilityColumnsAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)accessibilityHorizontalScrollBarAttribute;
- (BOOL)accessibilityIsColumnTitlesAttributeSettable;
- (BOOL)accessibilityIsColumnsAttributeSettable;
- (BOOL)accessibilityIsHorizontalScrollBarAttributeSettable;
- (BOOL)accessibilityIsVisibleColumnsAttributeSettable;
- (id)accessibilityRoleAttribute;
- (id)accessibilityVisibleColumnsAttribute;
- (void)addColumn;
- (void)addColumnForItem:(id)a0;
- (BOOL)allowsIncrementalSearching;
- (BOOL)automaticallyAdjustsContentInsets;
- (void)beforeDraw;
- (BOOL)canDragRowsWithIndexes:(id)a0 inColumn:(long long)a1 withEvent:(id)a2;
- (double)columnContentWidthForColumnWidth:(double)a0;
- (double)columnWidthForColumnContentWidth:(double)a0;
- (id)currentTypeSelectSearchString;
- (double)defaultColumnWidth;
- (void)didFinishColumnScrollWithHelper:(id)a0;
- (void)displayAllColumns;
- (void)displayColumn:(long long)a0;
- (void)doClick:(id)a0;
- (void)doDoubleClick:(id)a0;
- (void)draggedImage:(id)a0 beganAt:(struct CGPoint { double x0; double x1; })a1;
- (void)draggingEnded:(id)a0;
- (unsigned long long)draggingEntered:(id)a0;
- (id)draggingImageForRowsWithIndexes:(id)a0 inColumn:(long long)a1 withEvent:(id)a2 offset:(struct CGPoint { double x0; double x1; } *)a3;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)a0;
- (unsigned long long)draggingUpdated:(id)a0;
- (void)drawTitleOfColumn:(long long)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)editItemAtIndexPath:(id)a0 withEvent:(id)a1 select:(BOOL)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameOfColumn:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameOfInsideOfColumn:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameOfRow:(long long)a0 inColumn:(long long)a1;
- (BOOL)getRow:(long long *)a0 column:(long long *)a1 forPoint:(struct CGPoint { double x0; double x1; })a2;
- (id)indexPathForColumn:(long long)a0;
- (id)indexPathForItem:(id)a0;
- (BOOL)isLeafItem:(id)a0;
- (id)itemAtIndexPath:(id)a0;
- (id)itemAtRow:(long long)a0 column:(long long)a1;
- (id)itemAtRow:(long long)a0 inColumn:(long long)a1;
- (void)loadColumnZero;
- (id)loadedCellAtRow:(long long)a0 column:(long long)a1;
- (Class)matrixClass;
- (void)moveLeft:(id)a0;
- (void)moveRight:(id)a0;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)a0;
- (BOOL)needsPanelToBecomeKey;
- (void)noteHeightOfRowsWithIndexesChanged:(id)a0 inColumn:(long long)a1;
- (id)ns_widgetType;
- (id)parentForItem:(id)a0;
- (id)parentForItemsInColumn:(long long)a0;
- (id)pathToColumn:(long long)a0;
- (void)performClick:(id)a0;
- (BOOL)performDragOperation:(id)a0;
- (BOOL)performKeyEquivalent:(id)a0;
- (BOOL)preservesContentDuringLiveResize;
- (BOOL)refusesFirstResponder;
- (void)registerForDraggedTypes:(id)a0;
- (void)reloadColumn:(long long)a0;
- (void)reloadDataForRowIndexes:(id)a0 inColumn:(long long)a1;
- (void)reloadItem:(id)a0 reloadChildren:(BOOL)a1;
- (void)scrollColumnToVisible:(long long)a0;
- (void)scrollColumnsLeftBy:(long long)a0;
- (void)scrollColumnsRightBy:(long long)a0;
- (void)scrollRowToVisible:(long long)a0 inColumn:(long long)a1;
- (void)scrollViaScroller:(id)a0;
- (void)selectRow:(long long)a0 inColumn:(long long)a1;
- (void)selectRowIndexes:(id)a0 inColumn:(long long)a1;
- (id)selectedCellInColumn:(long long)a0;
- (long long)selectedRowInColumn:(long long)a0;
- (id)selectedRowIndexesInColumn:(long long)a0;
- (BOOL)sendAction;
- (void)setAcceptsArrowKeys:(BOOL)a0;
- (void)setAllowsIncrementalSearching:(BOOL)a0;
- (void)setAutomaticallyAdjustsContentInsets:(BOOL)a0;
- (void)setBorderType:(unsigned long long)a0;
- (void)setCellClass:(Class)a0;
- (void)setDefaultColumnWidth:(double)a0;
- (void)setDraggingSourceOperationMask:(unsigned long long)a0 forLocal:(BOOL)a1;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setNeedsDisplay:(BOOL)a0;
- (void)setRefusesFirstResponder:(BOOL)a0;
- (void)setTitle:(id)a0 ofColumn:(long long)a1;
- (void)setUserColumnResizingAutoresizesWindow:(BOOL)a0;
- (void)setWidth:(double)a0 ofColumn:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleFrameOfColumn:(long long)a0;
- (id)titleOfColumn:(long long)a0;
- (void)unregisterDraggedTypes;
- (void)updateCell:(id)a0;
- (void)updateCellInside:(id)a0;
- (void)updateScroller;
- (BOOL)userColumnResizingAutoresizesWindow;
- (void)viewWillDraw;
- (double)widthOfColumn:(long long)a0;

@end
