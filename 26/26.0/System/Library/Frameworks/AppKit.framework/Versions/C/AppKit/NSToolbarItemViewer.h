@class NSMapTable, NSToolbar, NSPanGestureRecognizer, NSToolbarLabelStack, NSToolbarPlatterView, NSMutableArray, NSPortalView, NSString, _NSToolbarItemBadgeView, NSToolbarView, NSArray, NSView, NSToolbarItem;

@interface NSToolbarItemViewer : NSView <NSGestureRecognizerDelegate, NSToolbarViewLayoutItem> {
    NSToolbarItem *_item;
    NSToolbarView *_toolbarView;
    NSToolbarLabelStack *_labelStack;
    long long _priorityIndex;
    NSMutableArray *_activeConstraints;
    struct CGSize { double width; double height; } _maxViewerSize;
    struct CGSize { double width; double height; } _minViewerSize;
    struct CGSize { double width; double height; } _scalableMinIconSize;
    struct CGSize { double width; double height; } _scalableMaxIconSize;
    double _preferredTrailingPosition;
    double _widthRequiredForLabelLayout;
    NSToolbarView *_savedToolbarView;
    NSToolbarItem *_savedItem;
    NSToolbar *_savedToolbar;
    NSView *_selectionWidget;
    NSMutableArray *_hiddenItemDecorationViews;
    NSPortalView *_portalView;
    NSPanGestureRecognizer *_panGR;
    NSMapTable *_toolTipsToItems;
    NSToolbarPlatterView *_associatedPlatter;
    struct { unsigned char drawsIconPart : 1; unsigned char drawsLabelPart : 1; unsigned char iconAreaIncludesLabelArea : 1; unsigned char labelOnlyShowsAsPopupMenu : 1; unsigned char needsModeConfiguration : 1; unsigned char inPaletteView : 1; unsigned char returnFocusToWindowAfterClick : 1; unsigned char needsInitialAutovalidation : 1; unsigned char accessibilityAddedDescriptionToSubelements : 1; unsigned char configuringForLayout : 1; unsigned char needsPreferredTrailingPositionUpdate : 1; unsigned char pressed : 1; unsigned char rollover : 1; unsigned char needsViewerSizeUpdate : 1; unsigned char wantsToBeCentered : 1; unsigned char needsToolTipUpdate : 1; unsigned char inEditingMode : 1; unsigned char inGlassSidebar : 1; unsigned char animatingIn : 1; unsigned char animatingOut : 1; unsigned char becomingUnhidden : 1; } _tbivFlags;
}

@property (retain, nonatomic) _NSToolbarItemBadgeView *badgeView;
@property long long priorityIndex;
@property (readonly) NSToolbarItem *item;
@property BOOL transparentBackground;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (setter=_setNeedsModeConfiguration:) BOOL _needsModeConfiguration;
@property BOOL animatingIn;
@property BOOL animatingOut;
@property (readonly) BOOL alwaysWantsOverflowTransitions;
@property (readonly) BOOL participatesInOverflow;
@property (readonly) unsigned long long itemPosition;
@property (readonly) BOOL isGroup;
@property BOOL inGlassSidebar;
@property (readonly) struct CGSize { double x0; double x1; } minSize;
@property (readonly) struct CGSize { double x0; double x1; } maxSize;
@property (readonly) BOOL isSpace;
@property (readonly) BOOL wantsToBeCentered;
@property (readonly) struct CGSize { double x0; double x1; } preferredSize;
@property (readonly) struct CGSize { double x0; double x1; } contentClippingSize;
@property (readonly) struct CGSize { double x0; double x1; } compressedMinSize;
@property (readonly) double preferredZOrder;
@property (readonly) double preferredTrailingPosition;
@property (readonly) BOOL isTitle;
@property (readonly) BOOL isVisible;
@property (readonly) unsigned long long glassBehavior;
@property (readonly) BOOL isNavigational;
@property (readonly) NSArray *subitems;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } glassBackedViewRectInSelf;
@property (weak) NSToolbarPlatterView *associatedPlatter;
@property (getter=isFirstItemInGlassGroup) BOOL firstItemInGlassGroup;
@property (getter=isLastItemInGlassGroup) BOOL lastItemInGlassGroup;

- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)mouseDown:(id)a0;
- (void)mouseUp:(id)a0;
- (void)updateLayer;
- (void)dealloc;
- (BOOL)resignFirstResponder;
- (void)layout;
- (BOOL)becomeFirstResponder;
- (void)constraintsDidChangeInEngine:(id)a0;
- (void)viewDidMoveToWindow;
- (BOOL)respondsToSelector:(SEL)a0;
- (void)viewDidMoveToSuperview;
- (void)_intrinsicContentSizeInvalidatedForChildView:(id)a0;
- (void)pan:(id)a0;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (id)accessibilityCustomActions;
- (void).cxx_destruct;
- (id)accessibilityActionDescription:(id)a0;
- (void)setFrameOrigin:(struct CGPoint { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })sizeThatFitsProposedLayoutSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)element:(id)a0 hasOverriddenAttribute:(id)a1;
- (void)_accessibilityConfigureToolbarItem;
- (void)_accessibilityConfigureViewItemToolbarItem;
- (BOOL)_accessibilityIsCommonToolbarButtonItem;
- (BOOL)_accessibilityIsInCustomizationSheet;
- (BOOL)_accessibilityIsSpaceOrSeparatorItem;
- (id)_accessibilityLabelElements;
- (void)_accessibilityOptionsChanged;
- (id)_accessibilityParentAdjustedFocusedUIElement:(id)a0;
- (id)_accessibilityParentAdjustedHitTestElement:(id)a0 atLocation:(id)a1;
- (void)_accessibilityShowMenu:(id)a0;
- (id)_accessibilityTitleElement;
- (id)_accessibilityToolbarItemLabel;
- (id)_accessibilityToolbarItemLabelAtIndex:(unsigned long long)a0;
- (long long)_accessibilityToolbarItemViewerConfiguration;
- (Class)_accessibilityToolbarItemViewerHelperClass;
- (BOOL)_accessibilityTreatButtonAsToolbarButton:(id)a0;
- (BOOL)_accessibilityTreatSegmentedControlAsToolbarButtons:(id)a0;
- (void)_beginToolbarEditingMode;
- (void)_endToolbarEditingMode;
- (BOOL)_hasDescriptionForElement:(id)a0;
- (void)_layoutSubtreeWithOldSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)_needsLayoutEngine;
- (id)_nextResponderForEvent:(id)a0;
- (void)_setFirstItemInGlassGroup:(BOOL)a0;
- (void)_setLastItemInGlassGroup:(BOOL)a0;
- (void)_setLayoutEngine:(id)a0;
- (id)_toolbarView;
- (void)_windowChangedKeyState;
- (BOOL)acceptsFirstMouse:(id)a0;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityDescriptionAttribute;
- (id)accessibilityEnabledAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (id)accessibilityIdentifierAttribute;
- (BOOL)accessibilityIsDescriptionAttributeSettable;
- (BOOL)accessibilityIsEnabledAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsTitleAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (void)accessibilityPerformAction:(id)a0;
- (void)accessibilityPopUpMenuCreated:(id)a0 forSubview:(id)a1 returningAccessibilityParent:(id *)a2;
- (id)accessibilityRoleAttribute;
- (void)accessibilitySetFocusedAttribute:(id)a0;
- (id)accessibilityTitleAttribute;
- (id)accessibilityValueAttribute;
- (double)additionalWidthRequiredForProposedLayoutSize:(struct CGSize { double x0; double x1; })a0;
- (void)configureForLayoutInDisplayMode:(unsigned long long)a0 andSizeMode:(unsigned long long)a1 inToolbarView:(id)a2;
- (id)declaredLayoutConstraints;
- (void)decrementVisibilityCount;
- (void)drawFocusRingMask;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBounds;
- (BOOL)gestureRecognizer:(id)a0 shouldAttemptToRecognizeWithEvent:(id)a1;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0;
- (void)incrementVisibilityCount;
- (id)initWithItem:(id)a0 forToolbarView:(id)a1;
- (BOOL)mouseDownCanMoveWindow;
- (void)mouseMoved:(id)a0;
- (void)moveLeft:(id)a0;
- (void)moveRight:(id)a0;
- (BOOL)needsPanelToBecomeKey;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setNeedsDisplay:(BOOL)a0;
- (id)view:(id)a0 stringForToolTip:(long long)a1 point:(struct CGPoint { double x0; double x1; })a2 userData:(void *)a3;
- (void)viewWillDraw;

@end
