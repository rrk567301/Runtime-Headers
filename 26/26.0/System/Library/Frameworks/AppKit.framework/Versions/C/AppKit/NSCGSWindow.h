@class NSCGSWindowBackingStore, NSArray, CAContext, CALayer, _NSCGSWindowMovementChildren, NSDictionary, CABackdropLayer, NSPointerArray, NSCGSWindowCornerMask, NSMapTable, NSCGSWindowWarp;

@interface NSCGSWindow : NSObject {
    long long _creationFlags;
    void *_deviceID;
    unsigned int _windowID;
    int _directRights;
    int _allRights;
    unsigned long long _markedPropertyMask;
    unsigned long long _cachedFlags;
    struct CGSRegionObject { } *_opaqueShape;
    struct CGSRegionObject { } *_eventShape;
    struct CGPath { } *_eventShapePath;
    struct CGSRegionObject { } *_resizeEventShape;
    NSCGSWindowCornerMask *_cornerMask;
    NSDictionary *_shadowProperties;
    struct CGPoint { double x; double y; } _origin;
    struct CGSize { double width; double height; } _size;
    double _scale;
    double _opacity;
    double _contentBlurRadius;
    struct CGSRegionObject { } *_dragShape;
    struct CGSRegionObject { } *_activationShape;
    struct CGSRegionObject { } *_buttonShape;
    struct CGSRegionObject { } *_commandModifierExclusionShape;
    unsigned char _hasKeyAppearance : 1;
    unsigned char _hasMainAppearance : 1;
    unsigned char _useActiveShadow : 1;
    unsigned char _createsBackdropGroupNamespace : 1;
    unsigned char _validateSecurityOfSuperlayers : 1;
    unsigned char _usesAutomaticContentsFormat : 1;
    unsigned char _allowsFlattening : 1;
    NSMapTable *_transforms;
    NSCGSWindowWarp *_warp;
    _NSCGSWindowMovementChildren *_movementChildren;
    NSCGSWindow *_relativeMoveParent;
    struct CGSize { double width; double height; } _relativeMoveOffset;
    struct CGSRegionObject { } *_mouseConfinementShape;
    struct CGColor { } *_chameleonOverrideColor;
    NSCGSWindowBackingStore *_backingStore;
    unsigned char _backingStoreAttached : 1;
    unsigned long long _windowTags;
    unsigned long long _tagsToSet;
    unsigned long long _tagsToClear;
    unsigned char _prefersCurrentSpace : 1;
    unsigned char _isAwaitingAsyncContext : 1;
    unsigned char _needsInitializeCornerRadius : 1;
    CAContext *_context;
    CALayer *_rootLayer;
    CABackdropLayer *_captureBackdropLayer;
    CALayer *_backingStoreLayer;
    CALayer *_contentLayer;
    struct CGColorSpace { } *_layerContextColorSpace;
    unsigned int _layerContextDepth;
    unsigned int _originDisplayChangeSeed;
    NSPointerArray *_pendingAsyncContextActions;
    long long _lastFrameChangeSeed;
    unsigned long long _lastFrameChangeTimestamp;
    unsigned char _suspendChanges : 1;
}

@property (class, readonly) long long windowCount;

@property int level;
@property (readonly, getter=isOrderedIn) BOOL orderedIn;
@property (copy) NSArray *movementChildren;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property struct CGSize { double x0; double x1; } size;
@property BOOL prefersCurrentSpace;
@property (copy) struct CGSRegionObject { } *dragShape;
@property (copy) struct CGSRegionObject { } *commandModifierExclusionShape;
@property (copy) struct CGSRegionObject { } *activationShape;
@property (copy) struct CGSRegionObject { } *buttonShape;
@property (copy) struct CGSRegionObject { } *mouseConfinementShape;
@property (readonly) unsigned long long lastFrameChangeTimestamp;
@property BOOL hasBackingStore;
@property (readonly) NSCGSWindowBackingStore *backingStore;
@property (readonly) BOOL ownsWindow;
@property (readonly) BOOL directlyOwnsWindow;
@property (readonly) int windowRights;
@property (readonly) unsigned int windowID;
@property (readonly) CAContext *contentContext;
@property double scale;
@property double opacity;
@property double contentBlurRadius;
@property (copy) struct CGSRegionObject { } *opaqueShape;
@property (copy) struct CGSRegionObject { } *eventShape;
@property (copy) struct CGPath { } *eventShapePath;
@property (copy) struct CGSRegionObject { } *resizeEventShape;
@property (retain) NSCGSWindowCornerMask *cornerMask;
@property (readonly) double cornerRadius;
@property (copy) NSDictionary *shadowProperties;
@property BOOL usesActiveShadow;
@property BOOL hasKeyAppearance;
@property BOOL hasMainAppearance;
@property unsigned long long tags;
@property (copy) struct CGColor { } *chameleonOverrideColor;
@property BOOL createsBackdropGroupNamespace;
@property BOOL validateSecurityOfSuperlayers;
@property (copy) struct CGColorSpace { } *layerContextColorSpace;
@property unsigned int layerContextDepth;
@property BOOL usesAutomaticContentsFormat;
@property (retain) CALayer *contentLayer;
@property BOOL allowsFlattening;
@property BOOL suspendChanges;

+ (void)synchronize;
+ (void)performBarrier:(id /* block */)a0;
+ (id)onScreenWindows;
+ (id)onScreenWindowsForConnectionID:(unsigned int)a0;
+ (void)addActionWithDefaultOrder:(id /* block */)a0;
+ (void)addActionWithOrder:(long long)a0 usingBlock:(id /* block */)a1;
+ (void)addPostDecodeAction:(id /* block */)a0;
+ (BOOL)automaticallyNotifiesObserversOfContentContext;
+ (struct CGImage { } *)captureWindowList:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 options:(unsigned long long)a2;
+ (struct CGImage { } *)captureWindowList:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 options:(unsigned long long)a2 seed:(unsigned int)a3;
+ (struct CGPoint { double x0; double x1; })convertPointFromCGCoordinates:(struct CGPoint { double x0; double x1; })a0;
+ (struct CGPoint { double x0; double x1; })convertPointToCGCoordinates:(struct CGPoint { double x0; double x1; })a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromCGCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToCGCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
+ (id)createContext:(id)a0;
+ (void)disableScreenUpdates;
+ (void)entangleUpdateOnFence:(id)a0;
+ (void)entangleUpdateOnFenceRight:(struct _mach_right_send { unsigned int x0; })a0;
+ (id)entanglingFenceHandle;
+ (BOOL)isAnyWindowOnAVisibleSpace:(id)a0;
+ (unsigned int)lazyCaptureTransactionSeed;
+ (unsigned long long)onScreenWindowCount;
+ (unsigned long long)onScreenWindowCountForConnectionID:(unsigned int)a0;
+ (void)orderApplicationWindowsFront;
+ (id)orderedVisibleSpaceWindowsForConnectionID:(unsigned int)a0;
+ (void)reenableScreenUpdates;
+ (void)synchronizeForCarbon;
+ (id)windowWithConnectionID:(unsigned int)a0 flags:(long long)a1;
+ (id)windowWithWindowID:(unsigned int)a0;
+ (id)windowsWithOptions:(unsigned int)a0 onSpaces:(id)a1 forConnectionID:(unsigned int)a2;
+ (id)windowsWithOptions:(unsigned int)a0 onSpacesMatching:(unsigned int)a1 forConnectionID:(unsigned int)a2;

- (void)dealloc;
- (id)description;
- (unsigned long long)bestParentSpaceContainingWindow;
- (id)makeLocallyRenderedLayerSurface;
- (id)_backingStore;
- (void)_entangleContextWithCommit;
- (BOOL)_hasUncommittedSpaceAssignmentChanges;
- (BOOL)_hasUncommittedSpaceGeometryChanges;
- (void)addMovementChild:(id)a0;
- (void)addToOrderingGroupAboveWindow:(id)a0;
- (void)addToOrderingGroupBelowWindow:(id)a0;
- (struct CGImage { } *)backingStoreImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (unsigned long long)bestSpaceContainingWindow;
- (unsigned long long)bestUserSpaceContainingWindow;
- (unsigned long long)bestUserSpaceForWindow;
- (unsigned long long)bestVisibleSpaceContainingWindow;
- (void)clearOrderingGroup;
- (struct CGPoint { double x0; double x1; })convertCGScreenLocationToCGWindowRelativePoint:(struct CGPoint { double x0; double x1; })a0;
- (unsigned long long)defaultSpace;
- (void)disableActivationOrderingWithInitiallyOrderedIn:(BOOL)a0;
- (void)enableActivationOrderingWithInitiallyOrderedIn:(BOOL)a0;
- (id)encodedLayerTree;
- (id)initWithConnectionID:(unsigned int)a0 flags:(long long)a1;
- (id)initWithWindowID:(unsigned int)a0;
- (void)invalidateAlphaShape;
- (BOOL)isExpectedToBeOnSpace:(unsigned long long)a0;
- (BOOL)isStickyByBinding;
- (void)lockWindowToAbsoluteSublevel:(int)a0;
- (id)makeLayerSurface;
- (void)moveGroupTo:(struct CGPoint { double x0; double x1; })a0 delta:(struct CGSize { double x0; double x1; })a1;
- (void)moveGroupTo:(struct CGPoint { double x0; double x1; })a0 delta:(struct CGSize { double x0; double x1; })a1 isChildOfGroupMovement:(BOOL)a2;
- (void)moveTo:(struct CGPoint { double x0; double x1; })a0 delta:(struct CGSize { double x0; double x1; })a1;
- (void)moveTo:(struct CGPoint { double x0; double x1; })a0 delta:(struct CGSize { double x0; double x1; })a1 isChildOfGroupMovement:(BOOL)a2;
- (void)moveToWindow:(id)a0 offsetX:(double)a1 Y:(double)a2;
- (void)noteSpaceAssignmentPending;
- (void)orderAboveWindow:(id)a0;
- (void)orderBack;
- (void)orderBelowWindow:(id)a0;
- (void)orderFront;
- (void)orderGroupAboveWindow:(id)a0;
- (void)orderGroupAboveWindowIfActive:(id)a0;
- (void)orderGroupBelowWindow:(id)a0;
- (void)orderGroupBelowWindowIfActive:(id)a0;
- (void)orderGroupFrontConditionally:(double)a0;
- (void)orderGroupOut;
- (void)orderGroupOutIfActive;
- (void)orderOut;
- (id)orderingGroup;
- (void)removeFromOrderingGroup;
- (void)removeMovementChild:(id)a0;
- (void)setTags:(unsigned long long)a0 mask:(unsigned long long)a1;
- (void)setTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 option:(unsigned int)a1 placement:(int)a2;
- (void)setWarp:(id)a0;
- (void)unlockWindowSublevel;

@end
