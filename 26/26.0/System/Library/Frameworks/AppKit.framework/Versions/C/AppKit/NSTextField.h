@class NSString, NSArray, NSAttributedString, NSToolbarItem, NSColor, NSTintConfiguration, NSTextEncapsulation, CUIStyleEffectConfiguration, NSNumber, NSTextPhraseAnimationController;
@protocol NSTextFieldDelegate, NSTextSuggestionsDelegate, _NSTextFieldHostingToolbarItem;

@interface NSTextField : NSControl <NSTextViewDelegate, NSUserInterfaceValidations, NSAccessibilityNavigableStaticText, NSTextContent> {
    double _maxLayoutWidth;
    long long _maximumNumberOfLines;
    NSNumber *_layoutEngineWidth;
    NSNumber *_cachedLayoutEngineWidth;
    struct CGSize { double width; double height; } _cachedIntrinsicContentSize;
    unsigned long long _textAlignmentPolicy;
    long long _updateConstraintsPassCounter;
    unsigned long long _lineBreakStrategy;
    struct NSEdgeInsets { double top; double left; double bottom; double right; } _cachedLanguageAwareOutsets;
    NSTextEncapsulation *_textEncapsulation;
    BOOL _shouldUpdateCachedLanguageAwareOutsets;
    BOOL _shouldCheckCurrentContentsForBoundsOutsets;
    BOOL _contentsRequiresBoundsOutsets;
    BOOL _passwordAutofillDisabled;
    BOOL _finishedFirstConstraintsPass;
    unsigned char _insideFormContext;
    SEL _errorAction;
    id _delegate;
}

@property (class, readonly) BOOL allowsWritingTools;

@property (nonatomic, weak) id<NSTextSuggestionsDelegate> _suggestionsDelegateObjC;
@property (nonatomic, copy) NSArray *__tokensObjectiveC;
@property (nonatomic, copy) NSString *__untokenizedTextObjectiveC;
@property (nonatomic, readonly) Class _intelligenceBaseClass;
@property NSToolbarItem<_NSTextFieldHostingToolbarItem> *hostingToolbarItem;
@property (setter=_setFocusRingAnimationType:) long long _focusRingAnimationType;
@property BOOL _trackingMouseForCell;
@property (readonly) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } languageAwareOutsets;
@property unsigned long long _allowsMultiPassIntrinsicContentSize;
@property (readonly) BOOL _wantsSeparatedSubviews;
@property (retain, setter=_setSidebarTintConfiguration:) NSTintConfiguration *_sidebarTintConfiguration;
@property unsigned long long textAlignmentPolicy;
@property (getter=_isPasswordAutofillEnabled, setter=_setPasswordAutofillEnabled:) BOOL _passwordAutofillEnabled;
@property (copy, nonatomic) CUIStyleEffectConfiguration *styleEffectConfiguration;
@property (setter=_setInsideFormContext:) BOOL _insideFormContext;
@property (copy, getter=_textEncapsulation, setter=_setTextEncapsulation:) NSTextEncapsulation *textEncapsulation;
@property (setter=_setWantsContentAwareTypesettingLanguage:) BOOL _wantsContentAwareTypesettingLanguage;
@property (weak) id<NSTextSuggestionsDelegate> suggestionsDelegate;
@property (readonly, nonatomic) BOOL _isShowingTextSuggestions;
@property (readonly, nonatomic) BOOL _searchSuggestionsFirstResponderOverrideEnabled;
@property (readonly, nonatomic) BOOL _searchSuggestionsFirstResponderOverrideValue;
@property NSTextPhraseAnimationController *animatedPlaceholderAnimationController;
@property (copy) NSString *placeholderString;
@property (copy) NSAttributedString *placeholderAttributedString;
@property (copy) NSColor *backgroundColor;
@property BOOL drawsBackground;
@property (copy) NSColor *textColor;
@property (getter=isBordered) BOOL bordered;
@property (getter=isBezeled) BOOL bezeled;
@property (getter=isEditable) BOOL editable;
@property (getter=isSelectable) BOOL selectable;
@property (weak) id<NSTextFieldDelegate> delegate;
@property (readonly) BOOL acceptsFirstResponder;
@property unsigned long long bezelStyle;
@property double preferredMaxLayoutWidth;
@property long long maximumNumberOfLines;
@property BOOL allowsDefaultTighteningForTruncation;
@property unsigned long long lineBreakStrategy;
@property BOOL allowsWritingTools;
@property BOOL allowsWritingToolsAffordance;
@property (copy) NSArray *placeholderStrings;
@property (copy) NSArray *placeholderAttributedStrings;
@property BOOL resolvesNaturalAlignmentWithBaseWritingDirection;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy) NSString *contentType;

+ (void)initialize;
+ (id)labelWithString:(id)a0;
+ (id)_aggregateTextSuggestionDelegates:(id)a0;
+ (Class)_classToCheckForRequiresConstraintBasedLayout;
+ (id)_fieldsContainingString:(id)a0;
+ (id)_newBaseLabelWithoutTitle;
+ (BOOL)_shouldUseBoundsOutsetsForString:(id)a0;
+ (struct __CFCharacterSet { } *)_tooBigChars;
+ (id)aggregateTextSuggestionDelegates:(id)a0;
+ (BOOL)allowsWritingToolsAffordance;
+ (BOOL)debugRollover;
+ (id)editableTextFieldWithString:(id)a0;
+ (id)labelWithAttributedString:(id)a0;
+ (id)textFieldWithAttributedString:(id)a0;
+ (id)textFieldWithString:(id)a0;
+ (id)wrappingLabelWithString:(id)a0;
+ (id)wrappingTextFieldWithString:(id)a0 preferredMaxLayoutWidth:(double)a1;

- (void)textDidChange:(id)a0;
- (struct { double x0; double x1; })_baselineOffsetsAtSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)validateUserInterfaceItem:(id)a0;
- (void)mouseDown:(id)a0;
- (void)setAllowsEditingTextAttributes:(BOOL)a0;
- (double)baselineOffsetFromBottom;
- (void)nsis_valueOfVariable:(id)a0 didChangeInEngine:(id)a1;
- (struct CGSize { double x0; double x1; })_intrinsicSizeWithinSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (void)invalidateIntrinsicContentSize;
- (void)updateLayer;
- (struct CGSize { double x0; double x1; })_layoutSizeThatFits:(struct CGSize { double x0; double x1; })a0 fixedAxes:(unsigned long long)a1;
- (BOOL)allowsVibrancy;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)setStringValue:(id)a0;
- (BOOL)resignFirstResponder;
- (void)setAttributedStringValue:(id)a0;
- (void)layout;
- (void)encodeWithCoder:(id)a0;
- (void)setEnabled:(BOOL)a0;
- (BOOL)isFlipped;
- (BOOL)becomeFirstResponder;
- (double)firstBaselineOffsetFromTop;
- (void)setControlSize:(unsigned long long)a0;
- (id)accessibilityValue;
- (void)_intelligenceCollectContentIn:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 collector:(id)a1;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (id)initWithCoder:(id)a0;
- (void)updateConstraints;
- (void)setResolvesNaturalAlignmentWithBaseWritingDirection:(BOOL)a0;
- (BOOL)allowsEditingTextAttributes;
- (BOOL)resolvesNaturalAlignmentWithBaseWritingDirection;
- (void)didChangeValueForKey:(id)a0;
- (BOOL)importsGraphics;
- (void)setErrorAction:(SEL)a0;
- (BOOL)_hasExtra10_11BordersInToolbars;
- (id)_vibrancyFilter;
- (id)_visualProvider;
- (BOOL)textView:(id)a0 clickedOnLink:(id)a1 atIndex:(unsigned long long)a2;
- (void)__replaceUntokenizedTextWithTokenFromObjectiveC:(id)a0;
- (BOOL)_allowRoundingToChangeSize;
- (struct { double x0; double x1; })_baselineOffsets;
- (void)_commonTextFieldInit;
- (id)_cornerConfiguration;
- (void)_deriveLineBreakModeFromAttributedString:(id)a0;
- (void)_finishedMakingConnections;
- (void)_handleInsertFromContactsCommand:(id)a0;
- (void)_handleInsertFromCreditCardsCommand:(id)a0;
- (void)_handleInsertFromPasswordsCommand:(id)a0;
- (BOOL)_hasLayoutEngine;
- (void)_invalidateCachedLanguageAwareOutsets;
- (BOOL)_isShowingTextSuggestions;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_languageAwareOutsetsWithFont:(id)a0;
- (unsigned long long)_lineBreakStrategyForCurrentConfiguration;
- (BOOL)_performMultiPassIntrinsicSize;
- (id)_preferredAppearance;
- (long long)_preferredLayerContentsRedrawPolicy;
- (void)_recursivelyInvalidateCachedContentStyle;
- (void)_resumeAutocomplete;
- (long long)_scrollPocketElementStyle;
- (BOOL)_searchSuggestionsFirstResponderOverrideEnabled;
- (BOOL)_searchSuggestionsFirstResponderOverrideValue;
- (void)_setPlaceholderAttributedStrings:(id)a0;
- (void)_setPlaceholderStrings:(id)a0;
- (BOOL)_shouldPrintByCallingDrawRect;
- (BOOL)_shouldUseBoundsOutsetsForCurrentConfig;
- (void)_suggestions_didSetAttributedStringValue;
- (void)_suggestions_didSetControlSize;
- (void)_suggestions_didSetStringValue;
- (id)_suggestions_makeTouchBar;
- (void)_suggestions_mouseDown:(id)a0;
- (void)_suggestions_setEnabled:(BOOL)a0;
- (void)_suggestions_textDidChange;
- (void)_suggestions_textDidEndEditing;
- (BOOL)_suggestions_textView:(id)a0 doCommandBySelector:(SEL)a1 isFallback:(BOOL)a2;
- (void)_suggestions_willBecomeFirstResponder:(BOOL)a0;
- (BOOL)_supportsDragAndDrop;
- (void)_updateConstraintsFinished;
- (void)_updateLayoutDependentMetricsIfNeeded;
- (id)acceptableDragTypes;
- (BOOL)acceptsFirstMouse:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrameForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (long long)accessibilityLineForIndex:(long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })accessibilityRangeForLine:(long long)a0;
- (id)accessibilityStringForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)allowsCharacterPickerTouchBarItem;
- (SEL)errorAction;
- (BOOL)isAutomaticTextCompletionEnabled;
- (BOOL)isSubviewFirstResponderOfItsWindow;
- (id)makeTouchBar;
- (void)markedTextDidChange:(id)a0;
- (BOOL)mouseDownCanMoveWindow;
- (id)ns_widgetType;
- (void)selectText:(id)a0;
- (void)setAllowsCharacterPickerTouchBarItem:(BOOL)a0;
- (void)setAutomaticTextCompletionEnabled:(BOOL)a0;
- (void)setCell:(id)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setImportsGraphics:(BOOL)a0;
- (void)setTitleWithMnemonic:(id)a0;
- (void)startSpeaking:(id)a0;
- (void)stopSpeaking:(id)a0;
- (BOOL)supportsFauxSolariumControlMetrics;
- (void)textDidBeginEditing:(id)a0;
- (void)textDidEndEditing:(id)a0;
- (BOOL)textShouldBeginEditing:(id)a0;
- (BOOL)textShouldEndEditing:(id)a0;
- (id)textTokensController;
- (id)textView:(id)a0 candidates:(id)a1 forSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (id)textView:(id)a0 candidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)textView:(id)a0 completions:(id)a1 forPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 indexOfSelectedItem:(long long *)a3;
- (BOOL)textView:(id)a0 doCommandBySelector:(SEL)a1;
- (void)textView:(id)a0 prepareMenu:(id)a1 forCharacterAtIndex:(unsigned long long)a2 withEvent:(id)a3;
- (BOOL)textView:(id)a0 shouldChangeTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementString:(id)a2;
- (BOOL)textView:(id)a0 shouldSelectCandidateAtIndex:(unsigned long long)a1;
- (void)updateCell:(id)a0;
- (void)viewDidEndLiveResize;
- (BOOL)wantsUpdateLayer;

@end
