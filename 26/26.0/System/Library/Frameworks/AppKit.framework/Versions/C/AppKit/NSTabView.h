@class NSTabViewItem, NSArray, NSView, NSLayoutConstraint, NSFont, NSSegmentedControl;
@protocol NSTabViewDelegate;

@interface NSTabView : NSView {
    id _tabViewItems;
    NSTabViewItem *_selectedTabViewItem;
    NSFont *_font;
    struct __NSTabViewTypeFlags { unsigned char tabViewBorderType : 3; unsigned char tabPosition : 5; unsigned int reserved : 24; } _typeFlags;
    BOOL _allowTruncatedLabels;
    id<NSTabViewDelegate> _delegate;
    BOOL _tabViewUnusedBOOL1;
    BOOL _drawsBackground;
    NSTabViewItem *_pressedTabViewItem;
    long long _endTabWidth;
    long long _maxOverlap;
    double _tabHeight;
    NSTabViewItem *_tabViewItemWithKeyView;
    NSView *_originalNextKeyView;
    NSLayoutConstraint *_tabViewMinimumSizeConstraint;
    struct __NSTabViewDelegateRespondTo { unsigned char shouldSelectTabViewItem : 1; unsigned char willSelectTabViewItem : 1; unsigned char didSelectTabViewItem : 1; unsigned char didChangeNumberOfTabViewItems : 1; unsigned int reserved : 28; } _delegateRespondTo;
    struct __NSTabViewFlags { unsigned char needsLayout : 1; unsigned char controlTint : 3; unsigned char controlSize : 2; unsigned char wiringNibConnections : 1; unsigned char wiringInteriorLastKeyView : 1; unsigned char originalNextKeyViewChanged : 1; unsigned char liveResizeSkippedResetToolTips : 1; unsigned char subviewsAddedForTabs : 1; unsigned char allowsPropertyChange : 1; unsigned char ownedByTabViewController : 1; unsigned int reserved : 19; } _flags;
    NSTabViewItem *_focusedTabViewItem;
    NSSegmentedControl *_segmentedControl;
    void *_tabViewUnused2;
}

@property BOOL usesSegmentedControl;
@property (readonly) NSTabViewItem *selectedTabViewItem;
@property (retain) NSFont *font;
@property unsigned long long tabViewType;
@property unsigned long long tabPosition;
@property unsigned long long tabViewBorderType;
@property (copy) NSArray *tabViewItems;
@property BOOL allowsTruncatedLabels;
@property (readonly) struct CGSize { double x0; double x1; } minimumSize;
@property BOOL drawsBackground;
@property unsigned long long controlSize;
@property (weak) id<NSTabViewDelegate> delegate;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentRect;
@property (readonly) long long numberOfTabViewItems;
@property unsigned long long controlTint;

+ (void)initialize;
+ (Class)_classToCheckForRequiresConstraintBasedLayout;
+ (void)_setUsesToolTipsWhenTruncated:(BOOL)a0;
+ (BOOL)_usesToolTipsWhenTruncated;

- (void)selectTabViewItem:(id)a0;
- (long long)indexOfTabViewItem:(id)a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)mouseDown:(id)a0;
- (void)becomeKeyWindow;
- (void)removeFromSuperview;
- (BOOL)isOpaque;
- (void)viewWillMoveToWindow:(id)a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (void)updateLayer;
- (BOOL)allowsVibrancy;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (BOOL)resignFirstResponder;
- (void)encodeRestorableStateWithCoder:(id)a0;
- (void)layout;
- (void)_commonInit;
- (void)encodeWithCoder:(id)a0;
- (BOOL)isFlipped;
- (BOOL)becomeFirstResponder;
- (void)restoreStateWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)viewDidChangeBackingProperties;
- (id)currentEditor;
- (void)updateConstraints;
- (void).cxx_destruct;
- (void)_drawThemeTab:(id)a0 withState:(unsigned long long)a1 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_old_encodeWithCoder_NSTabView:(id)a0;
- (id)_recursiveSetDefaultKeyViewLoop;
- (void)_removeTabButtonSubviewIfNeeded;
- (void)_springLoadItem;
- (unsigned long long)_tabOrientation;
- (void)addTabViewItem:(id)a0;
- (void)moveUp:(id)a0;
- (void)resignKeyWindow;
- (void)_addAndUpdateBezelLayerIfNeeded;
- (void)_didRemoveLayer;
- (void)_drawBackgroundAndBorderInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_hasBezelBorder;
- (void)_setMaxOverlap:(double)a0;
- (void)_setNeedsDisplayForTabViewItem:(id)a0;
- (id)_tabViewButtons;
- (void)setNextKeyView:(id)a0;
- (void)_accessibilityUpdateKeyboardFocusRingForTabViewItem:(id)a0;
- (void)_addSegmentedControl;
- (void)_addTabViewButtonsIfNeeded;
- (void)_addedTab:(id)a0 atIndex:(long long)a1;
- (BOOL)_associatedTabViewControllerHasTabs;
- (id)_backgroundBezelLayer;
- (id)_backgroundBezelMaskLayer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_bezelLayerFrame;
- (BOOL)_canMakePropertyChange;
- (void)_cancelDelayedKeyboardNavigationTabSwitch;
- (Class)_classToCheckForWantsUpdateLayer;
- (void)_concludeDefaultKeyLoopComputation;
- (struct __CFDictionary { } *)_copyCoreUIOptionsForTabViewItem:(id)a0 withState:(unsigned long long)a1 maskOnly:(BOOL)a2 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3;
- (BOOL)_coreUIDrawBezelInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withClip:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 flipped:(BOOL)a2;
- (BOOL)_coreUIDrawTab:(id)a0 withState:(unsigned long long)a1 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (BOOL)_coreUIDrawTab:(id)a0 withState:(unsigned long long)a1 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 maskOnly:(BOOL)a3;
- (struct __CFDictionary { } *)_createCoreUIBezelOptionsFlipped:(BOOL)a0;
- (struct __CFDictionary { } *)_createCoreUIMaskOnlyBezelOptionsForTabItem:(id)a0;
- (id)_currentBackgroundColor;
- (id)_currentBorderColor;
- (double)_currentBorderWidth;
- (double)_currentTabHeight;
- (void)_didChangeTabViewType;
- (double)_doLayoutTabs:(double)a0;
- (void)_doTestTabSwitchingPerformance;
- (void)_drawBezelBorderInBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_drawTabViewItem:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_drawTabsInDirtyRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)_endTabWidth;
- (id)_findFirstValidKeyViewStartingFrom:(id)a0 inTabViewItem:(id)a1;
- (long long)_findPreviousNextTab:(long long)a0 loop:(BOOL)a1 invertForR2L:(BOOL)a2 startingAtTabItem:(id)a3;
- (void)_finishedMakingConnections;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForBezelBorder;
- (struct CGSize { double x0; double x1; })_frameSizeForContentSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_hackFrameToMatchLegacyBezelRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_handleSegmentedControlClick;
- (BOOL)_hasCustomDrawRect;
- (BOOL)_hasHorizontalOrientation;
- (BOOL)_hasKeyboardFocus;
- (BOOL)_hasKeyboardFocusInTabItem:(id)a0;
- (BOOL)_hasSelectedTabRoundedBezel;
- (BOOL)_hasTabs;
- (id)_highlightColorForCell:(id)a0;
- (id)_hitTest:(struct CGPoint { double x0; double x1; } *)a0 dragTypes:(id)a1;
- (void)_invalidateTabsCache;
- (BOOL)_isViewValidOriginalNextKeyView:(id)a0;
- (void)_keyboardNavigateDoSelectOfFocusItem:(id)a0;
- (void)_keyboardNavigateToTabAtIndex:(long long)a0;
- (void)_keyboardNavigateToTabByDelta:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_labelRectForTabRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forItem:(id)a1;
- (void)_layoutSegmentedControl;
- (void)_layoutTabs;
- (double)_maxOverlap;
- (struct CGSize { double x0; double x1; })_minimumSizeNeedForTabItemLabel:(id)a0;
- (struct CGSize { double x0; double x1; })_nominalSizeNeedForTabItemLabel:(id)a0;
- (id)_old_initWithCoder_NSTabView:(id)a0;
- (id)_originalNextKeyView;
- (void)_performTabLayoutIfNeeded;
- (void)_prepareForDefaultKeyLoopComputation;
- (id)_pressedTabViewItem;
- (void)_previousNextTab:(long long)a0 loop:(BOOL)a1;
- (void)_primitiveSetDefaultNextKeyView:(id)a0;
- (void)_primitiveSetNextKeyView:(id)a0;
- (void)_primitiveSetPreviousKeyView:(id)a0;
- (void)_recursiveBreakKeyViewLoop;
- (void)_redisplayForStateChange;
- (void)_removeBackgroundBezelLayer;
- (void)_removeSegmentedControl;
- (void)_removeTabViewItems:(id)a0;
- (void)_resizeSelectedTabViewItem;
- (void)_setBackgroundBezelLayer:(id)a0;
- (void)_setBackgroundBezelMaskLayer:(id)a0;
- (void)_setCurrentTabHeight:(double)a0;
- (void)_setEndTabWidth:(double)a0;
- (void)_setInteriorNextKeyView:(id)a0;
- (void)_setKeyboardFocusRingNeedsDisplayForTabViewItem:(id)a0;
- (void)_setLayoutEngine:(id)a0;
- (void)_setNeedsLayout:(BOOL)a0;
- (void)_setNextKeyViewFor:(id)a0 toNextKeyView:(id)a1;
- (void)_setPressedTabViewItem:(id)a0;
- (void)_setTabViewButtons:(id)a0;
- (void)_setTabViewControllerAllowsPropertyChange:(BOOL)a0;
- (void)_setTabViewItemForSpringLoading:(id)a0;
- (void)_setTabViewTypeFlags:(unsigned long long)a0;
- (void)_setWindow:(id)a0;
- (BOOL)_shouldAppearActive;
- (BOOL)_shouldSelectTabViewItem:(id)a0;
- (BOOL)_shouldUseSeparateLayoutEngineForItem:(id)a0;
- (void)_switchInitialFirstResponder:(id)a0 lastKeyView:(id)a1 forTabViewItem:(id)a2;
- (void)_switchTabViewItem:(id)a0 oldView:(id)a1 withTabViewItem:(id)a2 newView:(id)a3 initialFirstResponder:(id)a4 lastKeyView:(id)a5;
- (void)_systemColorChanged:(id)a0;
- (id)_tabEnumerationFromLeftToRight;
- (double)_tabHeight;
- (BOOL)_tabIndexIsLeftOrTop:(unsigned long long)a0;
- (BOOL)_tabIndexIsRightOrBottom:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_tabRectAdjustedForOverlap:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_tabRectForTabViewItem:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_tabViewButtonFrame;
- (id)_tabViewController;
- (BOOL)_tabViewControllerAllowsPropertyChange;
- (id)_tabViewItemForSpringLoading;
- (BOOL)_tabViewOwnedByTabViewController;
- (BOOL)_tabsAreR2L;
- (void)_testTabSwitchingPerformance;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_themeContentRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_themeTabAndBarArea;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_titleRectForTabViewItem:(id)a0;
- (double)_totalMinimumTabsLengthWithOverlap:(double)a0;
- (double)_totalNominalTabsLengthWithOverlap:(double)a0;
- (double)_totalTabsLength:(BOOL)a0 overlap:(double)a1;
- (void)_updateBackgroundBezelLayerIfRequired;
- (void)_updateMinimumSizeConstraint;
- (void)_updateSegmentedControlLabels;
- (void)_updateTabViewButtons;
- (void)_updateTabViewButtonsFrame;
- (BOOL)_usesSubviewsForButtons;
- (int)_vibrancyBlendMode;
- (void)_willChangeTabViewType;
- (void)_windowChangedKeyState;
- (BOOL)_wiringNibConnections;
- (BOOL)acceptsFirstMouse:(id)a0;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityContentsAttribute;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)accessibilityIsContentsAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsTabsAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (id)accessibilityRoleAttribute;
- (id)accessibilityTabsAttribute;
- (id)accessibilityValueAttribute;
- (void)drawFocusRingMask;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBounds;
- (long long)indexOfTabViewItemWithIdentifier:(id)a0;
- (void)insertTabViewItem:(id)a0 atIndex:(long long)a1;
- (void)instantiateWithObjectInstantiator:(id)a0;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)mouseTracker:(id)a0 didStopTrackingWithEvent:(id)a1;
- (BOOL)mouseTracker:(id)a0 shouldContinueTrackingWithEvent:(id)a1;
- (BOOL)mouseTracker:(id)a0 shouldStartTrackingWithEvent:(id)a1;
- (void)moveDown:(id)a0;
- (void)moveLeft:(id)a0;
- (void)moveRight:(id)a0;
- (BOOL)needsPanelToBecomeKey;
- (id)ns_widgetType;
- (void)performClick:(id)a0;
- (void)removeFromSuperviewWithoutNeedingDisplay;
- (void)removeTabViewItem:(id)a0;
- (void)selectFirstTabViewItem:(id)a0;
- (void)selectLastTabViewItem:(id)a0;
- (void)selectNextTabViewItem:(id)a0;
- (void)selectPreviousTabViewItem:(id)a0;
- (void)selectTabViewItemAtIndex:(long long)a0;
- (void)selectTabViewItemWithIdentifier:(id)a0;
- (void)setContentCompressionResistancePriority:(float)a0 forOrientation:(long long)a1;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setTabViewMinimumSizeConstraint:(id)a0;
- (void)springLoadingActivated:(BOOL)a0 draggingInfo:(id)a1;
- (unsigned long long)springLoadingEntered:(id)a0;
- (void)springLoadingExited:(id)a0;
- (void)springLoadingHighlightChanged:(id)a0;
- (unsigned long long)springLoadingUpdated:(id)a0;
- (id)tabViewItemAtIndex:(long long)a0;
- (id)tabViewItemAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)tabViewMinimumSizeConstraint;
- (void)takeSelectedTabViewItemFromSender:(id)a0;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;

@end
