@class NSArray, NSString, NSMutableArray;

@interface NSImageRep : NSObject <NSSecureCoding, NSCopying, NSCoding> {
    NSString *_colorSpaceName;
    struct __repFlags { unsigned char hasAlpha : 1; unsigned char isOpaque : 1; unsigned char  : 2; unsigned char loadState : 2; unsigned char  : 2; unsigned char bitsPerSample : 8; unsigned char internalLayoutDirection : 2; unsigned short gsaved : 14; } _repFlags;
    int _pixelsWide;
    struct CGSize { double width; double height; } _size;
    int _pixelsHigh;
    NSMutableArray *_bitmapCache;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _bitmapCacheLock;
}

@property (class, readonly) BOOL supportsSecureCoding;
@property (class, readonly, copy) NSArray *registeredImageRepClasses;
@property (class, readonly, copy) NSArray *imageUnfilteredTypes;
@property (class, readonly, copy) NSArray *imageTypes;

@property (readonly) BOOL _incorporatesContentStyling;
@property (copy, setter=_setAppearanceName:) NSString *_appearanceName;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentRect;
@property (readonly) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } capInsets;
@property (readonly) long long resizingMode;
@property (readonly, getter=isTemplate) BOOL template;
@property (readonly) BOOL inheritsGeometryFromImage;
@property struct CGSize { double x0; double x1; } size;
@property (getter=hasAlpha) BOOL alpha;
@property (getter=isOpaque) BOOL opaque;
@property (copy) NSString *colorSpaceName;
@property long long bitsPerSample;
@property long long pixelsWide;
@property long long pixelsHigh;
@property long long layoutDirection;

+ (void)initialize;
+ (void)_validateHints:(id)a0;
+ (Class)imageRepClassForPasteboardType:(id)a0;
+ (id)_imageFileTypesNoCaching;
+ (id)_imagePasteboardTypesNoCaching;
+ (Class)_imageRepClassForFileNameExtension:(id)a0 andHFSFileType:(id)a1;
+ (id)_imageRepsWithContentsOfFile:(id)a0 expandImageContentNow:(BOOL)a1;
+ (id)_imageRepsWithContentsOfURL:(id)a0 expandImageContentNow:(BOOL)a1;
+ (id)_imageRepsWithContentsOfURL:(id)a0 expandImageContentNow:(BOOL)a1 giveUpOnNetworkURLsWithoutGoodExtensions:(BOOL)a2;
+ (id)_imageRepsWithData:(id)a0 fileType:(id)a1 hfsType:(id)a2 expandImageContentNow:(BOOL)a3;
+ (id)_imageTypesNoCaching;
+ (unsigned long long)_interpolationFromHint:(id)a0;
+ (BOOL)_preferFilter;
+ (long long)_userInterfaceLayoutDirectionFromHint:(id)a0;
+ (BOOL)canInitWithData:(id)a0;
+ (BOOL)canInitWithPasteboard:(id)a0;
+ (id)imageFileTypes;
+ (id)imagePasteboardTypes;
+ (Class)imageRepClassForData:(id)a0;
+ (Class)imageRepClassForFileType:(id)a0;
+ (Class)imageRepClassForType:(id)a0;
+ (id)imageRepWithContentsOfFile:(id)a0;
+ (id)imageRepWithContentsOfURL:(id)a0;
+ (id)imageRepWithData:(id)a0;
+ (id)imageRepWithPasteboard:(id)a0;
+ (id)imageRepsWithContentsOfFile:(id)a0;
+ (id)imageRepsWithContentsOfURL:(id)a0;
+ (id)imageRepsWithPasteboard:(id)a0;
+ (id)imageUnfilteredFileTypes;
+ (id)imageUnfilteredPasteboardTypes;
+ (void)registerImageRepClass:(Class)a0;
+ (void)unregisterImageRepClass:(Class)a0;

- (BOOL)_isValid;
- (id)initWithData:(id)a0;
- (BOOL)draw;
- (id)replacementObjectForCoder:(id)a0;
- (void)setColorSpace:(id)a0;
- (id)colorSpace;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)encodeWithCoder:(id)a0;
- (id)init;
- (id)description;
- (id)initWithCoder:(id)a0;
- (struct CGImage { } *)CGImageForProposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 context:(id)a1 hints:(id)a2;
- (id)_imageRepsForEncodingWithCoder:(id)a0;
- (struct CGImage { } *)CGImageForProposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 context:(id)a1 hints:(id)a2 flipped:(BOOL)a3;
- (void)_setCGImageRef:(struct CGImage { } *)a0;
- (struct CGImage { } *)_CGImageRef;
- (id)_bitmapImageReps;
- (id)_bitmapImageRepsForTIFFRepresentation;
- (struct CGPattern { } *)_createPatternForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 context:(id)a1;
- (BOOL)_drawFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(unsigned long long)a2 alpha:(double)a3 compositing:(BOOL)a4 flipped:(BOOL)a5 ignoreContext:(BOOL)a6;
- (BOOL)_drawOnlyUsesOneDrawingOperation;
- (id)_imageRep_colorSpaceName;
- (void)_imageRep_setColorSpaceName:(id)a0;
- (long long)_internalLayoutDirection;
- (BOOL)_loadDataIfNotYetLoaded;
- (struct CGImage { } *)_newCGImageForProposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 context:(id)a1 hints:(id)a2 flipped:(BOOL)a3;
- (long long)_numberOfColorComponentsNotIncludingAlpha;
- (long long)_pixelsHighOrResolutionIndependent;
- (long long)_pixelsWideOrResolutionIndependent;
- (void)_recache;
- (long long)_uncachedSize;
- (BOOL)_wantsToBeCached;
- (BOOL)drawAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(unsigned long long)a2 fraction:(double)a3 respectFlipped:(BOOL)a4 hints:(id)a5;
- (id)repWithGeometryInheritedFromImage:(id)a0;

@end
