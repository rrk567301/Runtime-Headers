@class NSArray, NSString, NSDictionary, NSColorSpace;
@protocol _NSDisplayLinkInfoProvider, UICoordinateSpace;

@interface NSScreen : NSObject <_NSDisplayLinkInfoProvider, _NSDisplayLinkCreatingWithOptions> {
    void /* unknown type, empty encoding */ _state;
}

@property (class, setter=_setFallbackBackingScaleFactor:) double _fallbackBackingScaleFactor;
@property (class, nonatomic, readonly) id<UICoordinateSpace> _focusCoordinateSpace;
@property (class, nonatomic, readonly) NSArray *screens;
@property (class, nonatomic, readonly) NSScreen *mainScreen;
@property (class, nonatomic, readonly) NSScreen *_zeroScreen;
@property (class, nonatomic, readonly) BOOL _zeroScreenIsNew;
@property (class, nonatomic, readonly) NSScreen *deepestScreen;
@property (class, nonatomic, readonly) unsigned long long _displayChangeSeed;
@property (class, nonatomic, readonly) BOOL _spacePerDisplay;
@property (class, nonatomic, readonly) BOOL screensHaveSeparateSpaces;

@property (readonly) id<_NSDisplayLinkInfoProvider> _parentDisplayLinkInfoProvider;
@property (readonly) BOOL _shouldPauseDisplayLink;
@property (readonly) int _displayIDForDisplayLink;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) long long hash;
@property (nonatomic, readonly) NSString *debugDescription;
@property (nonatomic, readonly) long long _screenNumber;
@property (nonatomic, readonly) int _displayID;
@property (nonatomic, readonly) int depth;
@property (nonatomic, readonly) NSColorSpace *colorSpace;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (nonatomic, readonly) double backingScaleFactor;
@property (nonatomic, readonly) double maximumExtendedDynamicRangeColorComponentValue;
@property (nonatomic, readonly) double maximumPotentialExtendedDynamicRangeColorComponentValue;
@property (nonatomic, readonly) double maximumReferenceExtendedDynamicRangeColorComponentValue;
@property (nonatomic, readonly) double _maximumExtendedDynamicRangeColorComponentValueWithoutObserving;
@property (nonatomic, readonly) double _maximumPotentialExtendedDynamicRangeColorComponentValueWithoutObserving;
@property (nonatomic, readonly) double _maximumReferenceExtendedDynamicRangeColorComponentValueWithoutObserving;
@property (nonatomic, readonly) NSString *_UUIDString;
@property (nonatomic, readonly) long long _dockOrientation;
@property (nonatomic, readonly) BOOL _dockHidden;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _dockRect;
@property (nonatomic, readonly) double _restingMenuBarHeight;
@property (nonatomic, readonly) double _revealedMenuBarHeight;
@property (nonatomic, readonly) double _layoutMenuBarHeight;
@property (nonatomic, readonly) double _layoutForcingRevealedMenuBarHeight;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _layoutFrame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } visibleFrame;
@property (nonatomic, readonly) struct NSEdgeInsets { double x0; double x1; double x2; double x3; } safeAreaInsets;
@property (nonatomic, readonly) NSDictionary *deviceDescription;
@property (nonatomic, readonly) const int *supportedWindowDepths;
@property (nonatomic, readonly) BOOL _isActiveScreen;
@property (nonatomic, readonly) NSString *localizedName;
@property (nonatomic, readonly) long long maximumFramesPerSecond;
@property (nonatomic, readonly) double minimumRefreshInterval;
@property (nonatomic, readonly) double maximumRefreshInterval;
@property (nonatomic, readonly) double displayUpdateGranularity;
@property (nonatomic, readonly) double lastDisplayUpdateTimestamp;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } auxiliaryTopLeftArea;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } auxiliaryTopRightArea;
@property (nonatomic, readonly) unsigned long long _stageStyle;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _stageFrame;
@property (nonatomic, readonly) unsigned long long _displayCapabilities;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _dockRectUnlessHidden;
@property (nonatomic, readonly) NSString *_hwModel;
@property (nonatomic, readonly) unsigned int CGDirectDisplayID;

+ (id)_screenAtPoint:(struct CGPoint { double x0; double x1; })a0;
+ (double)_backingScaleFactorForScreen:(id)a0;
+ (BOOL)_captureAllScreens:(id *)a0;
+ (struct CGPoint { double x0; double x1; })_cgScreenPointForPoint:(struct CGPoint { double x0; double x1; })a0;
+ (id)_localizedNamesForDisplayIDs:(id)a0;
+ (BOOL)_releaseAllCapturedScreens:(id *)a0;
+ (id)_screenForScreenNumber:(long long)a0;
+ (id)_screenForUUIDString:(id)a0;
+ (int)_shieldingWindowLevel;
+ (void)_sortForNameOrdering:(id)a0;
+ (double)_zeroScreenHeight;

- (id)init;
- (BOOL)isEqual:(id)a0;
- (void).cxx_destruct;
- (BOOL)_hasStageFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (id)_currentSetting;
- (id)displayLinkWithTarget:(id)a0 selector:(SEL)a1;
- (id)_availableSettings;
- (id)_bestSettingSimilarToSetting:(id)a0 exactMatch:(BOOL *)a1;
- (id)_bestSettingWithBitsPerPixel:(int)a0 width:(int)a1 height:(int)a2 exactMatch:(BOOL *)a3;
- (id)_bestSettingWithBitsPerPixel:(int)a0 width:(int)a1 height:(int)a2 refreshRate:(double)a3 exactMatch:(BOOL *)a4;
- (BOOL)_capture:(id *)a0;
- (id)_copy;
- (unsigned long long)_currentSpace;
- (id)_displayLinkWithOptions:(unsigned long long)a0 handler:(id /* block */)a1;
- (id)_displayLinkWithOptions:(unsigned long long)a0 target:(id)a1 selector:(SEL)a2;
- (BOOL)_isCaptured;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_notchFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_notchFrameForSpace:(unsigned long long)a0;
- (BOOL)_releaseCapture:(id *)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_safeAreaFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_safeVisibleFrame;
- (BOOL)_switchToSetting:(id)a0 error:(id *)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })backingAlignedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(unsigned long long)a1;
- (id)bezelPath;
- (BOOL)canRepresentDisplayGamut:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromBacking:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToBacking:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })devicePixelCounts;
- (id)displayLinkWithHandler:(id /* block */)a0;
- (id)imageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)imageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 underWindow:(id)a1;
- (double)userSpaceScaleFactor;

@end
