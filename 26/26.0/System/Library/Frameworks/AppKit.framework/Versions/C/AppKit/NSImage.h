@class NSDictionary, NSArray, NSString, NSData, NSImageSymbolConfiguration, NSLocale, NSColor;
@protocol NSImageRepProvider, NSImageDelegate;

@interface NSImage : NSObject <NSTextAttachmentImageContainer, NSItemProviderReading, NSItemProviderWriting, NSCopying, NSSecureCoding, NSPasteboardReading, NSPasteboardWriting> {
    NSString *_name;
    struct CGSize { double width; double height; } _size;
    NSColor *_backgroundColor;
    id<NSImageDelegate> _imageDelegate;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _alignmentRectInNormalizedCoordinates;
    NSString *_accessibilityDescriptionBacking;
    struct NSEdgeInsets { double top; double left; double bottom; double right; } _capInsets;
    long long _resizingMode;
    NSDictionary *_configuration;
    struct { unsigned char scalable : 1; unsigned char dataRetained : 1; unsigned char uniqueWindow : 1; unsigned char sizeWasExplicitlySet : 1; unsigned char builtIn : 1; unsigned char needsToExpand : 1; unsigned char useEPSOnResolutionMismatch : 1; unsigned char matchesOnlyOnBestFittingAxis : 1; unsigned char colorMatchPreferred : 1; unsigned char multipleResolutionMatching : 1; unsigned char focusedWhilePrinting : 1; unsigned char archiveByName : 1; unsigned char unboundedCacheDepth : 1; unsigned char flipped : 1; unsigned char aliased : 1; unsigned char dirtied : 1; unsigned char cacheMode : 2; unsigned char sampleMode : 3; unsigned char resMatchPreferred : 1; unsigned char isTemplate : 1; unsigned char hasTrivialEdges : 1; unsigned char  : 8; } _flags;
}

@property (class, readonly, copy) NSArray *imageTypes;
@property (class, readonly, copy) NSArray *imageUnfilteredTypes;
@property (class, readonly, copy) NSArray *readableTypeIdentifiersForItemProvider;
@property (class, readonly, copy) NSArray *writableTypeIdentifiersForItemProvider;
@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly) BOOL willProvideAdaptedImageForPresentation;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (setter=_setImageInterpolation:) unsigned long long _imageInterpolation;
@property (retain, setter=_setReps:) id<NSImageRepProvider> _reps;
@property (retain, setter=_setDefaultAccessibilityDescription:) NSString *_defaultAccessibilityDescription;
@property (readonly) BOOL _incorporatesContentStyling;
@property (readonly) BOOL _prefersResolutionMatch;
@property (copy, setter=_setTintColor:) NSColor *_tintColor;
@property (setter=_setHasTrivialEdges:) BOOL _hasTrivialEdges;
@property (readonly, copy) NSString *accessibilityEmbeddedImageDescriptionAttribute;
@property (readonly) BOOL _isIconAppearanceSensitive;
@property unsigned long long imageInterpolation;
@property (readonly, getter=_isSymbolImage) BOOL _symbolImage;
@property (readonly) NSString *_symbolName;
@property struct CGSize { double x0; double x1; } size;
@property (copy) NSColor *backgroundColor;
@property BOOL usesEPSOnResolutionMismatch;
@property BOOL prefersColorMatch;
@property BOOL matchesOnMultipleResolution;
@property BOOL matchesOnlyOnBestFittingAxis;
@property (readonly) NSData *TIFFRepresentation;
@property (readonly, copy) NSArray *representations;
@property (readonly, getter=isValid) BOOL valid;
@property (weak) id<NSImageDelegate> delegate;
@property unsigned long long cacheMode;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentRect;
@property (getter=isTemplate) BOOL template;
@property (copy) NSString *accessibilityDescription;
@property struct NSEdgeInsets { double x0; double x1; double x2; double x3; } capInsets;
@property long long resizingMode;
@property (readonly, copy) NSImageSymbolConfiguration *symbolConfiguration;
@property (readonly, copy) NSLocale *locale;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSArray *writableTypeIdentifiersForItemProvider;

+ (long long)itemProviderVisibilityForRepresentationWithTypeIdentifier:(id)a0;
+ (void)initialize;
+ (id)objectWithItemProviderData:(id)a0 typeIdentifier:(id)a1 error:(id *)a2;
+ (id)imageNamed:(id)a0;
+ (id)_symbolCompatibilityImageNamed:(id)a0;
+ (id)_allNames;
+ (BOOL)_canInitWithPasteboard:(id)a0 allowMultipleFiles:(BOOL)a1;
+ (id)_catalogIconImageWithName:(id)a0 bundle:(id)a1;
+ (id)_catalogImageWithName:(id)a0 bundle:(id)a1;
+ (id)_coreUIImageNamed:(id)a0;
+ (id)_emblemForCount:(long long)a0;
+ (id)_imageNamed:(id)a0;
+ (id)_imageWithSymbolName:(id)a0 bundle:(id)a1 variableValue:(double)a2 accessibilityDescription:(id)a3;
+ (id)_imageWithSymbolName:(id)a0 inCatalog:(id)a1 variableValue:(double)a2 accessibilityDescription:(id)a3 createdWithCompatibilityImageName:(BOOL)a4;
+ (id)_imageWithSystemSymbolName:(id)a0;
+ (id)_imageWithSystemSymbolName:(id)a0 variableValue:(double)a1 accessibilityDescription:(id)a2 allowPrivateLookup:(BOOL)a3;
+ (void)_invalidateImageTypeCaches;
+ (id)_kitBundleImageNamed:(id)a0;
+ (id)_mainBundleImageNamed:(id)a0;
+ (id)_systemIconImageNamed:(id)a0;
+ (id)_systemImageNamed:(id)a0;
+ (BOOL)canInitWithPasteboard:(id)a0;
+ (id)imageFileTypes;
+ (id)imageForResourceName:(id)a0 bundle:(id)a1;
+ (id)imagePasteboardTypes;
+ (id)imageUnfilteredFileTypes;
+ (id)imageUnfilteredPasteboardTypes;
+ (id)imageWithImageRep:(id)a0;
+ (id)imageWithPrivateSystemSymbolName:(id)a0;
+ (id)imageWithPrivateSystemSymbolName:(id)a0 accessibilityDescription:(id)a1;
+ (id)imageWithPrivateSystemSymbolName:(id)a0 variableValue:(double)a1;
+ (id)imageWithPrivateSystemSymbolName:(id)a0 variableValue:(double)a1 accessibilityDescription:(id)a2;
+ (id)imageWithSize:(struct CGSize { double x0; double x1; })a0 drawHandler:(id /* block */)a1;
+ (id)imageWithSize:(struct CGSize { double x0; double x1; })a0 drawingIsFlipped:(BOOL)a1 drawHandler:(id /* block */)a2;
+ (id)imageWithSize:(struct CGSize { double x0; double x1; })a0 flipped:(BOOL)a1 drawingHandler:(id /* block */)a2;
+ (id)imageWithSymbolName:(id)a0;
+ (id)imageWithSymbolName:(id)a0 accessibilityDescription:(id)a1;
+ (id)imageWithSymbolName:(id)a0 bundle:(id)a1;
+ (id)imageWithSymbolName:(id)a0 bundle:(id)a1 accessibilityDescription:(id)a2;
+ (id)imageWithSymbolName:(id)a0 bundle:(id)a1 variableValue:(double)a2;
+ (id)imageWithSymbolName:(id)a0 bundle:(id)a1 variableValue:(double)a2 accessibilityDescription:(id)a3;
+ (id)imageWithSymbolName:(id)a0 variableValue:(double)a1;
+ (id)imageWithSymbolName:(id)a0 variableValue:(double)a1 accessibilityDescription:(id)a2;
+ (id)imageWithSystemSymbolName:(id)a0;
+ (id)imageWithSystemSymbolName:(id)a0 accessibilityDescription:(id)a1;
+ (id)imageWithSystemSymbolName:(id)a0 variableValue:(double)a1;
+ (id)imageWithSystemSymbolName:(id)a0 variableValue:(double)a1 accessibilityDescription:(id)a2;
+ (id)readableTypesForPasteboard:(id)a0;

- (id)initWithContentsOfURL:(id)a0;
- (id)initWithData:(id)a0;
- (id)replacementObjectForCoder:(id)a0;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (BOOL)setName:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (void)setFlipped:(BOOL)a0;
- (BOOL)isFlipped;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })attachmentBoundsForAttributes:(id)a0 location:(id)a1 textContainer:(id)a2 proposedLineFragment:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 position:(struct CGPoint { double x0; double x1; })a4;
- (id)init;
- (id)imageForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 attributes:(id)a1 location:(id)a2 textContainer:(id)a3;
- (id)awakeAfterUsingCoder:(id)a0;
- (id)initWithContentsOfFile:(id)a0;
- (id)loadDataWithTypeIdentifier:(id)a0 forItemProviderCompletionHandler:(id /* block */)a1;
- (void *)CA_copyRenderValue;
- (id)name;
- (id)initWithCoder:(id)a0;
- (id)initWithSize:(struct CGSize { double x0; double x1; })a0;
- (void).cxx_destruct;
- (void)CA_prepareRenderValue;
- (id)initWithIconRef:(struct OpaqueIconRef { } *)a0;
- (id)initWithPasteboard:(id)a0;
- (struct CGImage { } *)CGImageForProposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 context:(id)a1 hints:(id)a2;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(unsigned long long)a2 fraction:(double)a3;
- (BOOL)NS_needsRecommitOnDefaultContentsScaleChange;
- (id)_initWithData:(id)a0 fileType:(id)a1 hfsType:(id)a2;
- (void)setCacheDepthMatchesImageDepth:(BOOL)a0;
- (id)initWithISIcon:(id)a0;
- (id)placeholderImageWithSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (void)recache;
- (id)TIFFRepresentationUsingCompression:(unsigned long long)a0 factor:(float)a1;
- (id)_accessibilityDescriptionBacking;
- (id)_accessibilityDescriptionBackingForArchiving;
- (id)_accessibilityDescriptionBackingForCopying;
- (void)_addRepresentations:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_alignmentRectInNormalizedCoordinates;
- (id)_alternateImageWithCriteria:(id)a0;
- (BOOL)_antialiased;
- (void)_applyAsContentsToLayer:(id)a0;
- (BOOL)_composite:(long long)a0 delta:(double)a1 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 toPoint:(struct CGPoint { double x0; double x1; })a3;
- (void)_compositeFlipped:(BOOL)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 operation:(unsigned long long)a3 fraction:(double)a4;
- (void)_compositeFlipped:(BOOL)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 operation:(unsigned long long)a3 fraction:(double)a4;
- (void)_compositeToPoint:(struct CGPoint { double x0; double x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(unsigned long long)a2 fraction:(double)a3;
- (void)_compositeToPoint:(struct CGPoint { double x0; double x1; })a0 operation:(unsigned long long)a1 fraction:(double)a2;
- (struct CGPattern { } *)_createPatternForContext:(id)a0;
- (id)_defaultImageHints;
- (void)_dispatchImageDidNotDraw:(id)a0;
- (void)_drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withState:(unsigned long long)a1 backgroundStyle:(int)a2 tintColor:(id)a3 operation:(unsigned long long)a4 fraction:(double)a5 flip:(BOOL)a6 hints:(id)a7;
- (void)_drawMappingAlignmentRectToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withState:(unsigned long long)a1 backgroundStyle:(int)a2 operation:(unsigned long long)a3 fraction:(double)a4 flip:(BOOL)a5 hints:(id)a6;
- (void)_drawMappingAlignmentRectToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withState:(unsigned long long)a1 backgroundStyle:(int)a2 tintColor:(id)a3 operation:(unsigned long long)a4 fraction:(double)a5 flip:(BOOL)a6 hints:(id)a7;
- (BOOL)_drawRepresentation:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 withScaling:(BOOL)a2;
- (void)_dumpFullImageInfo;
- (id)_flatImageWithColor:(id)a0;
- (id)_imageByApplyingShadowForDragging;
- (id)_imageByApplyingTintColor:(id)a0;
- (id)_imageByBadgingWithImage:(id)a0 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)_imageByRemovingConfigurationKey:(id)a0;
- (id)_imageByScalingToSize:(struct CGSize { double x0; double x1; })a0 withImageInterpolation:(unsigned long long)a1;
- (id)_imageByScalingToSize:(struct CGSize { double x0; double x1; })a0 withImageInterpolation:(unsigned long long)a1 imageScaling:(unsigned long long)a2;
- (id)_imageDidNotDrawHandlerRep;
- (id)_imageWithConfiguration:(id)a0;
- (id)_imageWithFallbackConfiguration:(id)a0;
- (id)_imageWithFallbackSymbolConfiguration:(id)a0;
- (id)_initWithIconRef:(struct OpaqueIconRef { } *)a0;
- (id)_initWithIconRef:(struct OpaqueIconRef { } *)a0 includeThumbnail:(BOOL)a1;
- (BOOL)_legacyAddRepresentationsForIconNamed:(id)a0 fromIconSectionInAppBinary:(id)a1;
- (void)_lockFocusOnRepresentation:(id)a0 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 context:(id)a2 hints:(id)a3 flipped:(BOOL)a4;
- (id)_providedAccessibilityDescription;
- (id)_repProviderForSymbolName:(id)a0 allowPrivateLookup:(BOOL)a1;
- (void)_replaceRepsWithRep:(id)a0;
- (id)_safari_imageWithBackgroundColor:(id)a0 compositingOperation:(unsigned long long)a1;
- (void)_setAccessibilityDescriptionBacking:(id)a0;
- (void)_setAlignmentRectInNormalizedCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setAntialiased:(BOOL)a0;
- (void)_setPrefersResolutionMatch:(BOOL)a0;
- (void)_setRepProvider:(id)a0;
- (void)_setRepProviderWithISIcon:(id)a0 allowingPlaceholder:(BOOL)a1 allowTranslucency:(BOOL)a2;
- (void)_setRepProviderWithIconRef:(struct OpaqueIconRef { } *)a0;
- (void)_setRepProviderWithReferencingURL:(id)a0;
- (void)_setRepProviderWithReferencingURLs:(id)a0;
- (void)_setRepProviderWithRepresentationsArray:(id)a0;
- (void)_setRepProviderWithSymbolName:(id)a0 allowPrivateLookup:(BOOL)a1;
- (id)_symbolDescription;
- (void)_usingBestRepresentationAmongRepresentations:(id)a0 forRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 context:(id)a2 hints:(id)a3 body:(id /* block */)a4;
- (void)_usingBestRepresentationForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 context:(id)a1 hints:(id)a2 body:(id /* block */)a3;
- (void)_usingRepProviderPerformBlock:(id /* block */)a0;
- (void)_usingRepresentationsPerformBlock:(id /* block */)a0;
- (BOOL)_whenDrawn:(id)a0 fills:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1;
- (void)addRepresentation:(id)a0;
- (void)addRepresentations:(id)a0;
- (id)bestRepresentationAmongRepresentations:(id)a0 forHints:(id)a1;
- (id)bestRepresentationForDevice:(id)a0;
- (id)bestRepresentationForHints:(id)a0;
- (id)bestRepresentationForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 context:(id)a1 hints:(id)a2;
- (BOOL)cacheDepthMatchesImageDepth;
- (void)cancelIncrementalLoad;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(unsigned long long)a2;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(unsigned long long)a2 fraction:(double)a3;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })a0 operation:(unsigned long long)a1;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })a0 operation:(unsigned long long)a1 fraction:(double)a2;
- (void)dissolveToPoint:(struct CGPoint { double x0; double x1; })a0 fraction:(double)a1;
- (void)dissolveToPoint:(struct CGPoint { double x0; double x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 fraction:(double)a2;
- (void)drawAtPoint:(struct CGPoint { double x0; double x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(unsigned long long)a2 fraction:(double)a3;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(unsigned long long)a2 fraction:(double)a3 hints:(id)a4;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(unsigned long long)a2 fraction:(double)a3 respectFlipped:(BOOL)a4 hints:(id)a5;
- (BOOL)drawRepresentation:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)hasAlpha;
- (BOOL)hitTestPoint:(struct CGPoint { double x0; double x1; })a0 withImageDestinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 context:(id)a2 hints:(id)a3;
- (BOOL)hitTestRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withImageDestinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 context:(id)a2 hints:(id)a3;
- (BOOL)hitTestRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withImageDestinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 context:(id)a2 hints:(id)a3 flipped:(BOOL)a4;
- (id)imageWithLocale:(id)a0;
- (id)imageWithSymbolConfiguration:(id)a0;
- (id)initByReferencingFile:(id)a0;
- (id)initByReferencingURL:(id)a0;
- (id)initByReferencingURLs:(id)a0;
- (id)initFromImage:(id)a0 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)initWithCGImage:(struct CGImage { } *)a0 size:(struct CGSize { double x0; double x1; })a1;
- (id)initWithDataIgnoringOrientation:(id)a0;
- (id)initWithISIcon:(id)a0 allowingPlaceholder:(BOOL)a1;
- (id)initWithISIcon:(id)a0 allowingPlaceholder:(BOOL)a1 allowTranslucency:(BOOL)a2;
- (id)initWithImageRep:(id)a0;
- (id)initWithPasteboardPropertyList:(id)a0 ofType:(id)a1;
- (BOOL)isCachedSeparately;
- (BOOL)isDataRetained;
- (id)layerContentsForContentsScale:(double)a0;
- (void)lockFocus;
- (void)lockFocusFlipped:(BOOL)a0;
- (void)lockFocusOnRepresentation:(id)a0;
- (void)lockFocusWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 context:(id)a1 hints:(id)a2 flipped:(BOOL)a3;
- (id)pasteboardPropertyListForType:(id)a0;
- (double)recommendedLayerContentsScale:(double)a0;
- (void)removeRepresentation:(id)a0;
- (BOOL)scalesWhenResized;
- (void)setCachedSeparately:(BOOL)a0;
- (void)setDataRetained:(BOOL)a0;
- (void)setScalesWhenResized:(BOOL)a0;
- (void)unlockFocus;
- (id)writableTypesForPasteboard:(id)a0;

@end
