@interface Network.QUICConnectionImplementation : Network.DefaultManyToManyProtocol {
    void /* unknown type, empty encoding */ state;
    void /* unknown type, empty encoding */ flowControl;
    void /* unknown type, empty encoding */ localCIDs;
    void /* unknown type, empty encoding */ remoteCIDs;
    void /* unknown type, empty encoding */ remoteTransportParameters;
    void /* unknown type, empty encoding */ localTransportParameters;
    void /* unknown type, empty encoding */ packetBuilder;
    void /* unknown type, empty encoding */ packetParser;
    void /* unknown type, empty encoding */ keyState;
    void /* unknown type, empty encoding */ remoteMaxDatagramFrameSize;
    void /* unknown type, empty encoding */ timer;
    void /* unknown type, empty encoding */ ack;
    void /* unknown type, empty encoding */ ecn;
    void /* unknown type, empty encoding */ recovery;
    void /* unknown type, empty encoding */ migration;
    void /* unknown type, empty encoding */ crypto;
    void /* unknown type, empty encoding */ pmtud;
    void /* unknown type, empty encoding */ protector;
    void /* unknown type, empty encoding */ unidirectionalStreams;
    void /* unknown type, empty encoding */ bidirectionalStreams;
    void /* unknown type, empty encoding */ sendableStreamList;
    void /* unknown type, empty encoding */ zombieStreamList;
    void /* unknown type, empty encoding */ pendingReassemblyDequeue;
    void /* unknown type, empty encoding */ unblockedSendStreams;
    void /* unknown type, empty encoding */ knownFlows;
    void /* unknown type, empty encoding */ initialSourceConnectionID;
    void /* unknown type, empty encoding */ currentPath;
    void /* unknown type, empty encoding */ pathList;
    void /* unknown type, empty encoding */ initialMSS;
    void /* unknown type, empty encoding */ isPacing;
    void /* unknown type, empty encoding */ shorthand;
    void /* unknown type, empty encoding */ qLog;
    void /* unknown type, empty encoding */ stats;
    void /* unknown type, empty encoding */ isServer;
    void /* unknown type, empty encoding */ isCancelled;
    void /* unknown type, empty encoding */ isBlocked;
    void /* unknown type, empty encoding */ versionReceived;
    void /* unknown type, empty encoding */ retryReceived;
    void /* unknown type, empty encoding */ spinBitEnabled;
    void /* unknown type, empty encoding */ autoReceivedBuffer;
    void /* unknown type, empty encoding */ outboundDataPending;
    void /* unknown type, empty encoding */ trafficManagementBackground;
    void /* unknown type, empty encoding */ initialKeysDiscarded;
    void /* unknown type, empty encoding */ receivedHandshakePacket;
    void /* unknown type, empty encoding */ discardCryptoFrames;
    void /* unknown type, empty encoding */ initialSpinValue;
    void /* unknown type, empty encoding */ retryEnabled;
    void /* unknown type, empty encoding */ earlyDataSignalled;
    void /* unknown type, empty encoding */ inError;
    void /* unknown type, empty encoding */ advertisedMaxData;
    void /* unknown type, empty encoding */ notifiedLostPath;
    void /* unknown type, empty encoding */ waitingForOutstandingKeepAliveAcks;
    void /* unknown type, empty encoding */ serverTLSOptions;
    void /* unknown type, empty encoding */ probeConnectivity;
    void /* unknown type, empty encoding */ connectionProbeConnectivity;
    void /* unknown type, empty encoding */ writeProbeConnectivity;
    void /* unknown type, empty encoding */ triggerAllStreamsUnblocked;
    void /* unknown type, empty encoding */ isL4SEnabled;
    void /* unknown type, empty encoding */ isHandshakeConfirmed;
    void /* unknown type, empty encoding */ datagramUseQuarterStreamID;
    void /* unknown type, empty encoding */ datagramUseContextID;
    void /* unknown type, empty encoding */ datagramEnableFlowID;
    void /* unknown type, empty encoding */ isECNEnabled;
    void /* unknown type, empty encoding */ isECNEchoEnabled;
    void /* unknown type, empty encoding */ originalDCID;
    void /* unknown type, empty encoding */ closeError;
    void /* unknown type, empty encoding */ closeFrameType;
    void /* unknown type, empty encoding */ applicationCloseError;
    void /* unknown type, empty encoding */ errorToReport;
}

@end
