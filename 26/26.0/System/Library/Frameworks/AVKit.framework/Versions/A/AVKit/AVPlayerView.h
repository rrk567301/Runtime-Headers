@class AVPlaybackSpeedCollection, AVPlaybackSpeed, AVAnimator, AVShareController, AVNowPlayingInfoController, NSString, AVPictureInPictureController, AVPlayerController, NSTimer, NSArray, AVPlayerControlsViewController, AVDesktopPlaybackContentContainerView, AVDesktopPlayerViewContentView, AVPlayer, AVObservationController, AVDesktopPlaybackControlsController, AVBehaviorStorage, NSWindow, NSObject, NSView, AVDesktopPlayerLayerView, VKCImageAnalysis, AVFullscreenPlaceholderView, VKCImageAnalysisOverlayView, AVTrimControlsViewController, AVVideoFrameVisualAnalyzer, AVDetachedFullscreenController;
@protocol OS_dispatch_queue, AVPlayerViewDelegate_AppStoreOnly, AVPlayerViewDelegate, AVTimeDisplayDelegate, AVPlayerViewPictureInPictureDelegate, AVPlayerViewSlowMotionDelegate;

@interface AVPlayerView : NSView <NSSharingServicePickerDelegate, NSSharingServiceDelegate, AVTrimControlsViewControllerDelegate, AVPictureInPictureContentSource, AVPictureInPictureControllerDelegate, AVDetachedFullscreenControllerDelegate, AVVolumeControlButtonDelegate, AVPlaybackSpeedCollectionDelegate, AVVideoFrameVisualAnalyzerDelegate, VKCImageAnalysisOverlayViewDelegate> {
    AVObservationController *_observationController;
    AVPlayerController *_playerController;
    AVPlaybackSpeedCollection *_playbackSpeedCollection;
    BOOL _requiresLinearPlayback;
    BOOL _canHideControls;
    BOOL _viewHasWindow;
    BOOL _prefersReducedUserInterface;
    NSTimer *_loadingThresholdTimer;
    BOOL _hasReachedLoadingThreshold;
    BOOL _didPausePlaybackForSheet;
    BOOL _skipSettingPreferredFirstResponder;
    NSString *_overrideParentApplicationDisplayIdentifier;
    BOOL _initializingContentView;
    VKCImageAnalysis *_videoFrameAnalysis;
    BOOL _playerShouldAutoplay;
    AVDesktopPlayerViewContentView *_contentView;
    AVPlayerControlsViewController *_playbackControlsViewController;
    AVTrimControlsViewController *_trimControlsViewController;
    AVPlayerControlsViewController *_editControlsViewController;
    long long _controlsStyle;
    BOOL _allowsPictureInPicturePlayback;
    AVPictureInPictureController *_pictureInPictureController;
    id /* block */ _trimCompletionBlock;
    BOOL _transitioningToFullscreen;
    AVFullscreenPlaceholderView *_placeholderView;
    NSArray *_placeholderViewConstraints;
    struct { struct { long long value; int timescale; unsigned int flags; long long epoch; } start; struct { long long value; int timescale; unsigned int flags; long long epoch; } duration; } _slowMotionTimeRange;
    id<AVPlayerViewSlowMotionDelegate> _slowMotionDelegate;
    struct { BOOL playerView_playerItemTimeForNormalizedTime; BOOL playerView_userInterfaceTimeForPlayerItemTime; BOOL playerView_playerItemTimeForUserInterfaceTime; } _slowMotionDelegateRespondsTo;
    struct { double top; double right; double bottom; double left; } _floatingPlaybackControlsMargin;
    BOOL _canZoomHorizontally;
    BOOL _canZoomVertically;
    BOOL _isZoomed;
    BOOL _showsAlternateMediaTrackPreview;
    BOOL _enableStereoEyesIfAvailable;
    long long _stereoEyes;
    id<AVTimeDisplayDelegate> _timeDisplayDelegate;
    AVShareController *_shareController;
    NSObject<OS_dispatch_queue> *_nowPlayingInfoCenterInitQueue;
    BOOL _updatesNowPlayingInfoCenter;
    long long _touchBarViewAppearCount;
    BOOL _showsAudioOnlyIndicatorView;
    BOOL _includesTrimAndCancelButtons;
    BOOL _prefersCompactTouchBarScrubber;
    BOOL _flashesControlsWhenChangingStyle;
    id /* block */ _playButtonHandlerForLazyPlayerLoading;
    id<AVPlayerViewDelegate_AppStoreOnly> _metricsDelegate;
    BOOL _inlineControlsShowMinimalControlsWhenPaused;
    float _defaultLinearPlaybackRate;
    AVAnimator *_animator;
    struct NSEdgeInsets { double top; double left; double bottom; double right; } _legibleContentInsets;
    BOOL _shouldHidePlayerViewWhenPictureInPictureIsActive;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) BOOL showsControlsPane;
@property (readonly) BOOL prefersUnobscuredContent;
@property struct { double x0; double x1; double x2; double x3; } floatingPlaybackControlsMargin;
@property BOOL canZoomHorizontally;
@property BOOL canZoomVertically;
@property (getter=isZoomed) BOOL zoomed;
@property BOOL showsAlternateMediaTrackPreview;
@property BOOL enableStereoEyesIfAvailable;
@property (nonatomic) long long stereoEyes;
@property (retain) AVTrimControlsViewController *trimControlsViewController;
@property (readonly, nonatomic) NSArray *behaviors;
@property (readonly, nonatomic) AVDesktopPlaybackControlsController *playbackControlsController;
@property (readonly, nonatomic) AVDesktopPlayerViewContentView *contentView;
@property (readonly, nonatomic) AVDesktopPlaybackContentContainerView *playbackContentContainerView;
@property (readonly, nonatomic) AVDesktopPlayerLayerView *playerLayerView;
@property (readonly, nonatomic) VKCImageAnalysisOverlayView *analysisView;
@property (readonly, nonatomic) AVPlayerControlsViewController *activeControlsViewController;
@property (retain, nonatomic) AVPlayerControlsViewController *playbackControlsViewController;
@property (retain, nonatomic) AVPlayerControlsViewController *editControlsViewController;
@property (nonatomic, getter=isTrimming) BOOL trimming;
@property (nonatomic, getter=isEditing) BOOL editing;
@property (nonatomic) BOOL prefersContentPrioritization;
@property (readonly, nonatomic) AVBehaviorStorage *behaviorStorage;
@property (readonly, nonatomic) AVDetachedFullscreenController *fullscreenController;
@property (retain, nonatomic) AVNowPlayingInfoController *nowPlayingInfoController;
@property (retain, nonatomic) AVPlaybackSpeedCollection *playbackSpeedCollection;
@property (retain, nonatomic) AVVideoFrameVisualAnalyzer *videoFrameVisualAnalyzer;
@property (weak, nonatomic) id<AVPlayerViewPictureInPictureDelegate> pictureInPictureDelegate;
@property (nonatomic) BOOL shouldUnhideOnPictureInPictureStop;
@property (readonly, nonatomic) BOOL hasReachedLoadingThreshold;
@property (readonly, nonatomic) BOOL viewHasBeenSetUp;
@property (readonly) BOOL showsFloatingControlsInFullscreen;
@property (nonatomic) BOOL visualLookupAvailable;
@property (nonatomic) BOOL showsVisualLookup;
@property (nonatomic) BOOL analysisInteractionInProgress;
@property (nonatomic) BOOL showsVisualAnalysisContextMenu;
@property (nonatomic) unsigned long long allowedTimeDisplayStylesInternal;
@property (nonatomic) unsigned long long availableTimeDisplayStylesInternal;
@property (nonatomic) long long videoGravityType;
@property (retain) AVPlayer *player;
@property long long controlsStyle;
@property (copy) NSString *videoGravity;
@property (readonly, getter=isReadyForDisplay) BOOL readyForDisplay;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } videoBounds;
@property (readonly) NSView *contentOverlayView;
@property BOOL updatesNowPlayingInfoCenter;
@property (weak, nonatomic) id<AVPlayerViewDelegate> delegate;
@property (copy) NSArray *speeds;
@property (readonly) AVPlaybackSpeed *selectedSpeed;
@property (nonatomic) BOOL allowsVideoFrameAnalysis;
@property (nonatomic) unsigned long long videoFrameAnalysisTypes;
@property (nonatomic, setter=setAllowsMagnification:) BOOL allowsMagnification;
@property (nonatomic, setter=setMagnification:) double magnification;
@property (nonatomic) long long preferredDisplayDynamicRange;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } avkit_videoRectInWindow;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } avkit_playerLayerRectInWindow;
@property (readonly) BOOL avkit_isVisible;
@property (readonly) NSWindow *avkit_window;

+ (void)initialize;
+ (id)keyPathsForValuesAffectingSpeeds;
+ (id)keyPathsForValuesAffectingReadyForDisplay;
+ (id)keyPathsForValuesAffectingVideoBounds;
+ (id)keyPathsForValuesAffectingVideoGravity;
+ (id)keyPathsForValuesAffectingSelectedSpeed;
+ (id)allowedClassesForRestorableStateKeyPath:(id)a0;
+ (id)keyPathsForValuesAffectingTouchBar;
+ (id)restorableStateKeyPaths;
+ (BOOL)automaticallyNotifiesObserversOfPlayerController;
+ (id)keyPathsForValuesAffectingActionPopUpButtonMenu;
+ (id)keyPathsForValuesAffectingActiveControlsViewController;
+ (id)keyPathsForValuesAffectingAllowedTimeDisplayStyles;
+ (id)keyPathsForValuesAffectingAvailableTimeDisplayStyles;
+ (id)keyPathsForValuesAffectingAvailableTimeDisplayStylesInternal;
+ (id)keyPathsForValuesAffectingCanBeginTrimming;
+ (id)keyPathsForValuesAffectingCanRequestBecomingFirstResponder;
+ (id)keyPathsForValuesAffectingCanShowSharingServiceButton;
+ (id)keyPathsForValuesAffectingControlsHidden;
+ (id)keyPathsForValuesAffectingFixedPlayerLayerSize;
+ (id)keyPathsForValuesAffectingIsFullScreen;
+ (id)keyPathsForValuesAffectingPlaybackContentContainerView;
+ (id)keyPathsForValuesAffectingPlayer;
+ (id)keyPathsForValuesAffectingPlayerLayerFrame;
+ (id)keyPathsForValuesAffectingPlayerLayerLayoutMode;
+ (id)keyPathsForValuesAffectingPlayerLayerView;
+ (id)keyPathsForValuesAffectingPrefersUnobscuredContent;
+ (id)keyPathsForValuesAffectingShouldInsetControlsFromVideoRect;
+ (id)keyPathsForValuesAffectingShowsControlsPane;
+ (id)keyPathsForValuesAffectingShowsDurationInsteadOfRemainingTime;
+ (id)keyPathsForValuesAffectingShowsFrameSteppingButtons;
+ (id)keyPathsForValuesAffectingShowsFullScreenToggleButton;
+ (id)keyPathsForValuesAffectingShowsSharingServiceButton;
+ (id)keyPathsForValuesAffectingShowsTimecodes;
+ (id)keyPathsForValuesAffecting_allowsMagnification;
+ (id)supportedPlaybackRates;
+ (BOOL)wantsPlayerLayerLayout;

- (void)setAllowsPictureInPicturePlayback:(BOOL)a0;
- (id)animator;
- (void)windowDidEndSheet:(id)a0;
- (id)defaultPlaybackRate;
- (BOOL)allowsPictureInPicturePlayback;
- (void)windowWillBeginSheet:(id)a0;
- (id)touchBar;
- (void)setDefaultPlaybackRate:(id)a0;
- (BOOL)validateUserInterfaceItem:(id)a0;
- (void)mouseUp:(id)a0;
- (void)viewWillMoveToWindow:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)setPlayerController:(id)a0;
- (void)layout;
- (void)_commonInit;
- (void)encodeWithCoder:(id)a0;
- (BOOL)becomeFirstResponder;
- (id)playerLayer;
- (id)playerController;
- (void)viewDidMoveToWindow;
- (id)initWithCoder:(id)a0;
- (id)metricsDelegate;
- (void)selectSpeed:(id)a0;
- (void)setMetricsDelegate:(id)a0;
- (void).cxx_destruct;
- (BOOL)acceptsFirstResponder;
- (void)setMagnification:(double)a0 centeredAtPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)sharingService:(id)a0 didFailToShareItems:(id)a1 error:(id)a2;
- (void)sharingService:(id)a0 didShareItems:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sharingService:(id)a0 sourceFrameOnScreenForShareItem:(id)a1;
- (id)sharingService:(id)a0 sourceWindowForShareItems:(id)a1 sharingContentScope:(long long *)a2;
- (id)sharingService:(id)a0 transitionImageForShareItem:(id)a1 contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2;
- (void)sharingService:(id)a0 willShareItems:(id)a1;
- (id)sharingServicePicker:(id)a0 delegateForSharingService:(id)a1;
- (id)sharingServicePicker:(id)a0 sharingServicesForItems:(id)a1 proposedSharingServices:(id)a2;
- (void)performWithService:(id)a0;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })legibleContentInsets;
- (void)setLegibleContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (BOOL)isFullScreen;
- (void)setShowsFullScreenToggleButton:(BOOL)a0;
- (void)exitFullScreen:(id)a0;
- (void)setShowsAudioOnlyIndicatorView:(BOOL)a0;
- (void)enterFullScreen:(id)a0;
- (void)hasActiveTextSelectionDidChangeForImageAnalysisOverlay:(id)a0;
- (void)imageAnalysisOverlay:(id)a0 didTapVisualSearchIndicatorWithNormalizedBoundingBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)imageAnalysisOverlay:(id)a0 highlightSelectedItemsValueDidChange:(BOOL)a1;
- (void)imageAnalysisOverlay:(id)a0 menuDidClose:(id)a1;
- (void)imageAnalysisOverlay:(id)a0 menuWillOpen:(id)a1;
- (void)imageAnalysisOverlayDidDismissVisualSearchController:(id)a0;
- (BOOL)imageAnalysisOvlerlayView:(id)a0 shouldBeginAtPoint:(struct CGPoint { double x0; double x1; })a1 forAnalysisType:(unsigned long long)a2;
- (void)textSelectionDidChangeForImageAnalysisOverlayView:(id)a0;
- (void)_setPlaybackContentDisplayType:(unsigned long long)a0;
- (void)removeBehavior:(id)a0;
- (void)_setHasReachedLoadingThreshold:(BOOL)a0;
- (void)_updateLoadingThresholdIfNeeded;
- (BOOL)canHideControls;
- (BOOL)canShareCompositionWithService:(id)a0;
- (void)playerControllerDidSeekChapter:(id)a0;
- (void)setPrefersReducedUserInterface:(BOOL)a0;
- (id)shareController;
- (void)_beginPlaybackControlsViewControllerRetainCycleIfNeeded;
- (void)_callTrimCompletionHandlerWithResult:(long long)a0;
- (BOOL)_canSetPreferredFirstResponder;
- (id)_contentViewIfReady;
- (void)_endAVAnimatorRetainCycleIfNeeded;
- (void)_endPlaybackControlsViewControllerRetainCycleIfNeeded;
- (void)_ensureBehaviorStorage;
- (void)_initializeContentContainerViewIfNeeded;
- (BOOL)_isAudioOnlyContent;
- (id)_pictureInPictureDelegateIfRespondsToSelector:(SEL)a0;
- (id)_playbackContentContainerViewIfReady;
- (id)_playerLayerViewIfReady;
- (id)_preferredFirstResponder;
- (void)_preserveFirstResponderStatusIfDescendantOf:(id)a0;
- (void)_resetLoadingThreshold;
- (void)_restorePlaybackControlsAfterTrimmingWithTrimControlsViewController:(id)a0;
- (void)_restorePreferredFirstResponderIfNeeded;
- (void)_setUpContentContainerViewIfNeeded;
- (void)_setUpNowPlayingInfoCenter;
- (void)_setUpPlaceholderViewIfNeeded;
- (void)_startObservations;
- (id)_stereoLayersView;
- (void)_updateActiveControlsViewControllerIfNeeded;
- (void)_updateActivePlaybackSpeedIfNeeded;
- (void)_updateControlsVisibilityPolicyIfNeeded;
- (void)_updateDefaultLinearPlaybackRateIfNeeded;
- (void)_updateDefaultPlaybackRateIfNeeded;
- (void)_updateExternalPlaybackIndicatorView;
- (void)_updatePictureInPictureButton;
- (void)_updatePlaybackContentTypeIfNeeded;
- (void)_updatePlaybackControlsViewControllerIfNeeded;
- (void)_updatePlayerControllerSideBySidePresentation;
- (void)_updateSelectedPlaybackSpeedIfPlayerControllerRateChanges;
- (void)_updateShowsSkipButtonsStateIfNeeded;
- (id)actionPopUpButtonMenu;
- (void)addBehavior:(id)a0;
- (id)allowedTimeDisplayStyles;
- (id)availableTimeDisplayStyles;
- (unsigned long long)availableTimeDisplayStylesInternal;
- (void)avkit_beginReducingResourcesForPictureInPictureViewController:(id)a0 playerController:(id)a1;
- (long long)avkit_contentSourceType;
- (void)avkit_endReducingResourcesForPictureInPictureViewController:(id)a0 playerController:(id)a1;
- (id)avkit_makePlayerControllerIfNeeded:(id)a0;
- (id)avkit_pictureInPictureViewController;
- (void)avkit_startRoutingVideoToPictureInPictureViewController:(id)a0;
- (void)avkit_stopRoutingVideoToPictureInPictureViewController:(id)a0;
- (BOOL)avkit_wantsManagedSecondScreenPlayback;
- (void)avkit_willBeginStoppingPictureInPictureForPictureInPictureViewController:(id)a0;
- (void)beginTimeDisplayInput:(id)a0;
- (void)beginTrimmingWithCompletionHandler:(id /* block */)a0;
- (void)beginTrimmingWithMaximumDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 completionHandler:(id /* block */)a1;
- (BOOL)canBeginTrimming;
- (BOOL)canRequestBecomingFirstResponder;
- (void)cancelTrim:(id)a0;
- (void)commitTrim:(id)a0;
- (BOOL)controlsHidden;
- (void)doService:(id)a0 withItems:(id)a1;
- (struct CGSize { double x0; double x1; })fixedPlayerLayerSize;
- (void)flashChapterNumber:(unsigned long long)a0 chapterTitle:(id)a1;
- (BOOL)flashesControlsWhenChangingStyle;
- (void)fullscreenController:(id)a0 didEnterFullscreenWithTransitionContext:(id)a1;
- (void)fullscreenController:(id)a0 didExitFullscreenWithTransitionContext:(id)a1;
- (void)fullscreenController:(id)a0 restoreUserInterfaceForFullScreenExitWithCompletionHandler:(id /* block */)a1;
- (id)fullscreenController:(id)a0 transitionInfoForProposedTransitionType:(unsigned long long)a1;
- (void)fullscreenController:(id)a0 willEnterFullscreenWithTransitionContext:(id)a1;
- (void)fullscreenController:(id)a0 willExitFullscreenWithTransitionContext:(id)a1;
- (void)handleLiveTextButton:(id)a0;
- (void)hideEditControlsViewControllerShouldPausePlayback:(BOOL)a0 withCompletionHandler:(id /* block */)a1;
- (void)hideEditControlsViewControllerWithCompletionHandler:(id /* block */)a0;
- (BOOL)includesTrimAndCancelButtons;
- (BOOL)inlineControlsShowMinimalControlsWhenPaused;
- (id)overrideParentApplicationDisplayIdentifier;
- (void)pictureInPictureButtonTapped:(id)a0;
- (id)pictureInPictureController;
- (void)pictureInPictureController:(id)a0 failedToStartPictureInPictureWithError:(id)a1;
- (void)pictureInPictureController:(id)a0 restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(id /* block */)a1;
- (void)pictureInPictureControllerDidStartPictureInPicture:(id)a0;
- (void)pictureInPictureControllerDidStopPictureInPicture:(id)a0;
- (void)pictureInPictureControllerWillStartPictureInPicture:(id)a0;
- (void)pictureInPictureControllerWillStopPictureInPicture:(id)a0;
- (id /* block */)playButtonHandlerForLazyPlayerLoading;
- (id)playbackRateCollection;
- (void)playbackSpeedCollection:(id)a0 selectedPlaybackSpeedDidChangeTo:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })playerLayerFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })playerLayerFrameForBoundsSize:(struct CGSize { double x0; double x1; })a0 playerLayerLayoutMode:(long long)a1;
- (long long)playerLayerLayoutMode;
- (BOOL)prefersCompactTouchBarScrubber;
- (BOOL)prefersReducedUserInterface;
- (id)previewThumbnailImage;
- (BOOL)requiresLinearPlayback;
- (void)setActionPopUpButtonMenu:(id)a0;
- (void)setAllowedTimeDisplayStyles:(id)a0;
- (void)setCanHideControls:(BOOL)a0;
- (void)setCanRequestBecomingFirstResponder:(BOOL)a0;
- (void)setFixedPlayerLayerSize:(struct CGSize { double x0; double x1; })a0;
- (void)setFlashesControlsWhenChangingStyle:(BOOL)a0;
- (void)setIncludesTrimAndCancelButtons:(BOOL)a0;
- (void)setInlineControlsShowMinimalControlsWhenPaused:(BOOL)a0;
- (void)setOverrideParentApplicationDisplayIdentifier:(id)a0;
- (void)setPlayButtonHandlerForLazyPlayerLoading:(id /* block */)a0;
- (void)setPlaybackRateCollection:(id)a0;
- (void)setPlayerLayerLayoutMode:(long long)a0;
- (void)setPrefersCompactTouchBarScrubber:(BOOL)a0;
- (void)setRequiresLinearPlayback:(BOOL)a0;
- (void)setShouldInsetControlsFromVideoRect:(BOOL)a0;
- (void)setShowsDurationInsteadOfRemainingTime:(BOOL)a0;
- (void)setShowsFrameSteppingButtons:(BOOL)a0;
- (void)setShowsSharingServiceButton:(BOOL)a0;
- (void)setShowsTimecodes:(BOOL)a0;
- (void)setSlowMotionDelegate:(id)a0;
- (void)setSlowMotionTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0;
- (void)setTimeDisplayDelegate:(id)a0;
- (void)setTimeDisplayStyle:(unsigned long long)a0;
- (id)sharingService:(id)a0 imageForShareItem:(id)a1 size:(struct CGSize { double x0; double x1; })a2 contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a3;
- (BOOL)shouldInsetControlsFromVideoRect;
- (void)showEditControlsViewController:(id)a0 shouldPausePlayback:(BOOL)a1 withCompletionHandler:(id /* block */)a2;
- (void)showEditControlsViewController:(id)a0 withCompletionHandler:(id /* block */)a1;
- (void)showSharingServicePickerRelativeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 ofView:(id)a1 preferredEdge:(unsigned long long)a2;
- (BOOL)showsAudioOnlyIndicatorView;
- (BOOL)showsDurationInsteadOfRemainingTime;
- (BOOL)showsFrameSteppingButtons;
- (BOOL)showsFullScreenToggleButton;
- (BOOL)showsSharingServiceButton;
- (BOOL)showsTimecodes;
- (id)slowMotionDelegate;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })slowMotionTimeRange;
- (id)timeDisplayDelegate;
- (unsigned long long)timeDisplayStyle;
- (void)toggleZoom:(id)a0;
- (void)touchBarControlsViewDidDisappear;
- (void)touchBarControlsViewWillAppear;
- (void)trimControlsViewControllerDidCancel:(id)a0;
- (void)trimControlsViewControllerDidTrim:(id)a0;
- (void)videoFrameVisualAnalyzerDidFinishAnalyzingVideoFrame:(id)a0 withAnalysis:(id)a1;
- (void)videoFrameVisualAnalyzerFailedAnalyzingVideoFrame:(id)a0 withError:(id)a1;
- (void)volumeControlButton:(id)a0 didHideVolumeSlider:(id)a1;
- (void)volumeControlButton:(id)a0 didShowVolumeSlider:(id)a1;
- (id)volumeControlButton:(id)a0 viewContainingVolumeSlider:(id)a1;
- (void)volumeControlViewDidChangeMutedState:(id)a0;
- (void)volumeControlViewDidChangeVolume:(id)a0;

@end
