@class NSMenu, NSString, AVControlsContainerViewController, AVDesktopPlaybackControlsController, AVPlaybackSpeedCollection, AVNowPlayingInfoController, AVDesktopGestureController, AVTrimControlsViewController, AVPlayerController, AVPlayerControlsViewController;

@interface AVAudioView : NSView <AVTrimControlsViewControllerDelegate, AVVolumeControlButtonDelegate, AVPlaybackSpeedCollectionDelegate, AVTouchBarControlsViewControllerDelegate> {
    AVPlayerController *_playerController;
    AVDesktopGestureController *_gestureController;
    BOOL _viewHasBeenSetup;
    BOOL _viewHasWindow;
    AVPlayerControlsViewController *_initialControlsViewController;
    AVPlayerControlsViewController *_playbackControlsViewController;
    BOOL _doNotMakePlaybackControlsViewControllerViewFirstResponder;
    BOOL _showsDurationInsteadOfRemainingTime;
    NSMenu *_actionPopUpButtonMenu;
    id /* block */ _trimCompletionBlock;
    AVTrimControlsViewController *_trimControlsViewController;
    AVPlayerControlsViewController *_editControlsViewController;
    AVNowPlayingInfoController *_nowPlayingInfoController;
    long long _touchBarViewAppearCount;
}

@property BOOL showsDurationInsteadOfRemainingTime;
@property BOOL showsSharingServiceButton;
@property (retain) NSMenu *actionPopUpButtonMenu;
@property (readonly) BOOL canBeginTrimming;
@property (readonly, getter=isEditing) BOOL editing;
@property BOOL showsTimecodes;
@property (retain, nonatomic) AVDesktopPlaybackControlsController *playbackControlsController;
@property (retain, nonatomic) AVControlsContainerViewController *controlsContainerViewController;
@property (retain, nonatomic) AVPlayerControlsViewController *playbackControlsViewController;
@property (retain, nonatomic) AVTrimControlsViewController *trimControlsViewController;
@property (retain, nonatomic) AVPlayerControlsViewController *editControlsViewController;
@property (nonatomic, getter=isTrimming) BOOL trimming;
@property (nonatomic, getter=isEditing) BOOL editing;
@property (retain) AVPlayerController *playerController;
@property (retain, nonatomic) AVPlaybackSpeedCollection *playbackSpeedCollection;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (id)allowedClassesForRestorableStateKeyPath:(id)a0;
+ (id)restorableStateKeyPaths;
+ (BOOL)automaticallyNotifiesObserversOfPlayerController;
+ (id)keyPathsForValuesAffectingCanBeginTrimming;
+ (id)keyPathsForValuesAffectingPlayer;
+ (id)keyPathsForValuesAffectingShowsDurationInsteadOfRemainingTime;
+ (id)keyPathsForValuesAffectingShowsSharingServiceButton;

- (void)swipeWithEvent:(id)a0;
- (void)setPlayer:(id)a0;
- (void)viewWillMoveToWindow:(id)a0;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (id)player;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)keyDown:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (BOOL)becomeFirstResponder;
- (id)initWithCoder:(id)a0;
- (id)metricsDelegate;
- (void).cxx_destruct;
- (BOOL)acceptsFirstResponder;
- (void)keyUp:(id)a0;
- (void)scrollWheel:(id)a0;
- (BOOL)showsAlternateMediaTrackPreview;
- (void)_callTrimCompletionHandlerWithResult:(long long)a0;
- (id)_currentControlsViewController;
- (id)_makeSelfFirstResponderIfCurrentFirstResponderIsDescendantOfSelfAndReturnCurrentFirstResponderInThatCase;
- (void)_replaceCurrentControlsViewControllerWithViewController:(id)a0;
- (void)_restorePlaybackControlsAfterTrimmingWithTrimControlsViewController:(id)a0;
- (void)_restorePreviousFirstResponderOrMakeCurrentControlsViewControllersInitialFirstResponderFirstResponderIfSelfIsCurrentFirstResponder:(id)a0;
- (void)_setupControlsContainerView;
- (void)_updateDefaultPlaybackRateIfNeeded;
- (void)_updatePictureInPictureButton;
- (void)_updatePlaybackControlsViewControllerRetainCycle;
- (void)beginTrimmingWithCompletionHandler:(id /* block */)a0;
- (void)beginTrimmingWithMaximumDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 completionHandler:(id /* block */)a1;
- (void)hideEditControlsViewControllerShouldPausePlayback:(BOOL)a0 withCompletionHandler:(id /* block */)a1;
- (void)hideEditControlsViewControllerWithCompletionHandler:(id /* block */)a0;
- (void)pictureInPictureButtonTapped:(id)a0;
- (id)pictureInPictureController;
- (id /* block */)playButtonHandlerForLazyPlayerLoading;
- (void)playbackSpeedCollection:(id)a0 selectedPlaybackSpeedDidChangeTo:(id)a1;
- (BOOL)prefersCompactTouchBarScrubber;
- (void)setPrefersCompactTouchBarScrubber:(BOOL)a0;
- (void)showEditControlsViewController:(id)a0 shouldPausePlayback:(BOOL)a1 withCompletionHandler:(id /* block */)a2;
- (void)showEditControlsViewController:(id)a0 withCompletionHandler:(id /* block */)a1;
- (BOOL)showsControlsPane;
- (BOOL)showsFrameSteppingButtons;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })slowMotionTimeRange;
- (void)touchBarControlsViewDidDisappear;
- (void)touchBarControlsViewWillAppear;
- (void)trimControlsViewControllerDidCancel:(id)a0;
- (void)trimControlsViewControllerDidTrim:(id)a0;
- (id)volumeControlButton:(id)a0 viewContainingVolumeSlider:(id)a1;
- (void)volumeControlViewDidChangeMutedState:(id)a0;
- (void)volumeControlViewDidChangeVolume:(id)a0;

@end
