@class NSURL, CKPCSKeysToRemove, CKRecordValueStore, NSDate, NSDictionary, CKRoughlyEquivalentProperties, CKReference, CKContainerID, NSString, CKEncryptedRecordValueStore, CKRecordID, NSSet, NSArray, NSData, CKEncryptedData, NSNumber;
@protocol CKRecordKeyValueSetting;

@interface CKRecord : NSObject <CKContainerAssignment, CKPropertiesDescription, CKRoughlyEquivalent, NSSecureCoding, NSCopying>

@property (class, readonly) BOOL supportsSecureCoding;

@property (copy) CKContainerID *containerID;
@property (copy) CKRecordValueStore *valueStore;
@property (copy) CKEncryptedRecordValueStore *encryptedValueStore;
@property BOOL needsRollAndCounterSign;
@property BOOL applyPCSKeysToRemoveForTesting;
@property BOOL hasUpdatedExpirationTimeInterval;
@property (copy) NSNumber *updatedExpirationTimeInterval;
@property (copy) NSDate *expirationDate;
@property (getter=isExpired) BOOL expired;
@property (readonly, nonatomic) unsigned long long assetCount;
@property (readonly, nonatomic) unsigned long long assetDiskSize;
@property (readonly, nonatomic) BOOL containsPackageValues;
@property (readonly, nonatomic) BOOL hasPropertiesRequiringEncryption;
@property (readonly, nonatomic) BOOL hasModifiedPropertiesRequiringEncryption;
@property (readonly, nonatomic) BOOL hasPropertiesRequiringDecryption;
@property (readonly, nonatomic) BOOL hasEncryptedData;
@property (readonly, nonatomic) BOOL hasModifiedEncryptedData;
@property (readonly, nonatomic) BOOL containsIndexedKeys;
@property BOOL requiresRecordSaveForMergeableDeltas;
@property BOOL serializeProtectionData;
@property (copy) NSData *zoneishKeyID;
@property (copy) NSString *previousProtectionEtag;
@property (copy) NSString *protectionEtag;
@property (copy) NSString *zoneProtectionEtag;
@property (copy) NSString *shareEtag;
@property (readonly, nonatomic) NSString *fullToken;
@property (readonly, nonatomic) NSData *shortSharingTokenData;
@property (readonly, nonatomic) NSData *shortSharingTokenHashData;
@property (readonly, nonatomic) NSData *encryptedFullTokenData;
@property BOOL isMergeableValueDeltaRecord;
@property (copy) NSString *previousProtectionEtagFromUnitTest;
@property (copy) NSData *pcsKeyID;
@property (copy) NSArray *allPCSKeyIDs;
@property (copy) CKReference *share;
@property (retain) CKReference *previousShare;
@property BOOL hasUpdatedShare;
@property (retain) CKReference *previousParent;
@property BOOL hasUpdatedParent;
@property struct _PCSIdentityData { } *signingPCSIdentity;
@property (copy) CKEncryptedData *chainPrivateKey;
@property (copy) CKEncryptedData *mutableEncryptedPSK;
@property (copy) NSData *chainProtectionInfo;
@property (copy) NSData *chainParentPublicKeyID;
@property (copy) NSArray *tombstonedPublicKeyIDs;
@property (copy) CKPCSKeysToRemove *pcsKeysToRemove;
@property (readonly) NSString *privateToken;
@property (copy) NSURL *mutableURL;
@property (copy) CKRecordID *creatorUserRecordID;
@property (copy) CKRecordID *lastModifiedUserRecordID;
@property (copy) NSDate *creationDate;
@property (copy) NSDate *modificationDate;
@property (getter=isKnownToServer) BOOL knownToServer;
@property BOOL wasCached;
@property (readonly, nonatomic) unsigned long long size;
@property long long permission;
@property (copy) NSDictionary *pluginFields;
@property (copy) CKRecordID *recordID;
@property (copy) NSString *etag;
@property (copy) NSArray *conflictLoserEtags;
@property (copy) NSString *modifiedByDevice;
@property (readonly) BOOL containsAssetValues;
@property (copy) NSData *protectionData;
@property BOOL wantsChainPCS;
@property (readonly, nonatomic) BOOL hasChainPCS;
@property BOOL useLightweightPCS;
@property (copy) NSString *routingKey;
@property (copy) NSString *baseToken;
@property (readonly, copy, nonatomic) NSString *shortToken;
@property BOOL wantsPublicSharingKey;
@property (readonly, copy) NSData *encryptedPublicSharingKey;
@property (copy) CKEncryptedData *mutableEncryptedPublicSharingKey;
@property (copy) NSData *mutableEncryptedPublicSharingKeyData;
@property (readonly, copy) NSURL *URL;
@property (readonly, copy, nonatomic) NSURL *uncachedURL;
@property (copy) NSString *displayedHostname;
@property (readonly, copy) NSDictionary *values;
@property (readonly, copy) NSDictionary *originalValues;
@property (copy) NSSet *changedKeysSet;
@property BOOL trackChanges;
@property (readonly, copy) id<CKRecordKeyValueSetting> encryptedValuesByKey;
@property (readonly, copy) id<CKRecordKeyValueSetting> valuesByKey;
@property (readonly, copy) NSString *recordType;
@property (readonly, copy) NSString *recordChangeTag;
@property (copy) CKReference *parent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) CKRoughlyEquivalentProperties *equivalencyProperties;

+ (BOOL)accessInstanceVariablesDirectly;
+ (void)initialize;
+ (id)keyForListField:(id)a0 withIndexRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
+ (id)decryptFullToken:(id)a0 shortSharingTokenData:(id)a1;
+ (id)encryptFullToken:(id)a0 shortSharingTokenData:(id)a1;
+ (id)fullTokenFromBaseToken:(id)a0 privateToken:(id)a1;
+ (id)keyForAppendingToListField:(id)a0;
+ (id)keyForFetchingItems:(unsigned long long)a0 atEndOfListField:(id)a1;
+ (id)keyForInsertingIntoListField:(id)a0 atIndex:(long long)a1;
+ (id)recordWithDuplicatedPackagesOfRecord:(id)a0 error:(id *)a1;
+ (id)shareURLWithShortToken:(id)a0 shareTitle:(id)a1 shareType:(id)a2 containerID:(id)a3 displayedHostname:(id)a4;

- (void)CKDescribePropertiesUsing:(id)a0;
- (void)setNilValueForKey:(id)a0;
- (id)changedKeys;
- (id)objectForKeyedSubscript:(id)a0;
- (id)allKeys;
- (void)dealloc;
- (id)CKDescriptionPropertiesWithPublic:(BOOL)a0 private:(BOOL)a1 shouldExpand:(BOOL)a2;
- (id)objectForKey:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)setRecordType:(id)a0;
- (id)initWithRecordType:(id)a0 recordID:(id)a1;
- (void)encodeWithCoder:(id)a0;
- (void)setObject:(id)a0 forKeyedSubscript:(id)a1;
- (BOOL)containsMergeableValues;
- (id)valueForKey:(id)a0;
- (id)init;
- (void)enumerateKeysAndValuesOfClasses:(id)a0 usingBlock:(id /* block */)a1;
- (void)setRecordID_modelMutation:(id)a0;
- (void)setStreamingAssetRequestOptions:(id)a0;
- (BOOL)containsValuePassingTest:(id /* block */)a0;
- (void)CKAssignToContainerWithID:(id)a0;
- (void)setObject:(id)a0 forKey:(id)a1;
- (id)initWithCoder:(id)a0;
- (BOOL)containsValueOfClasses:(id)a0 options:(unsigned long long)a1 passingTest:(id /* block */)a2;
- (void)setRecordType_modelMutation:(id)a0;
- (BOOL)containsValueOfClasses:(id)a0 passingTest:(id /* block */)a1;
- (void)enumerateKeysAndValuesUsingBlock:(id /* block */)a0;
- (void)setExpirationAfterTimeInterval:(id)a0;
- (void)resetChangedKeys;
- (id)allValues;
- (void)setValue:(id)a0 forKey:(id)a1;
- (void)setObjectNoValidate:(id)a0 forKey:(id)a1;
- (void).cxx_destruct;
- (id)redactedDescription;
- (void)enumerateKeysAndValuesOfClasses:(id)a0 options:(unsigned long long)a1 usingBlock:(id /* block */)a2;
- (id)encryptedValues;
- (void)encodeSystemFieldsWithCoder:(id)a0;
- (id)initWithRecordType:(id)a0 zoneID:(id)a1;
- (void)setParentReferenceFromRecordID:(id)a0;
- (id)_allStrings;
- (id)_copyWithOptions:(long long)a0;
- (id)allTokens;
- (BOOL)canHostServerURLInfo;
- (BOOL)canSkipRecordSaveForMergeables;
- (id)conciseDescription;
- (BOOL)containsAssetBackedMergeableDeltas;
- (BOOL)containsMergeableValuesWithDeltasToSave;
- (void)copyStreamingAssetServerFieldsFromServerRecord:(id)a0;
- (id)copyWithOriginalValues;
- (id)copyWithZone:(struct _NSZone { } *)a0 recordID:(id)a1 userFields:(BOOL)a2;
- (id)copyWithZone:(struct _NSZone { } *)a0 recordID:(id)a1 userFields:(BOOL)a2 systemFields:(BOOL)a3;
- (id)copyWithZone:(struct _NSZone { } *)a0 userFields:(BOOL)a1;
- (void)countMergeableValueMetrics:(id /* block */)a0;
- (id)decryptFullToken:(id)a0;
- (id)initInternalSkippingValidationWithRecordType:(id)a0 recordID:(id)a1;
- (id)initWithRecordTransport:(id)a0;
- (id)initWithRecordType:(id)a0;
- (BOOL)isMoreRecentThanRecord:(id)a0;
- (void)preTiboEncodeWithCoder:(id)a0;
- (BOOL)prepareMergeablesForUploadInContainer:(id)a0 useAssetsIfNecessary:(BOOL)a1 error:(id *)a2;
- (void)replaceRecordIDWith:(id)a0;
- (void)setChangedKeysSet_modelMutation:(id)a0;
- (void)setParentReferenceFromRecord:(id)a0;
- (void)setRecordChangeTag:(id)a0;
- (void)setRecordChangeTag_modelMutation:(id)a0;
- (id)shortSharingToken;
- (void)updateMergeablesForSuccessfulSave;
- (void)updateWithSavedRecordXPCMetadata:(id)a0 shouldOnlySaveAssetContent:(BOOL)a1;

@end
