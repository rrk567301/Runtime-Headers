@class NSString, NSArray, NSDictionary, MPSGraph, NSObject, MPSGraphCompilationDescriptor, NSFileManager, NSMutableSet;
@protocol OS_dispatch_queue;

@interface MPSGraphExecutable : MPSGraphObject {
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _originalModuleMutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _moduleCacheMutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _runtimeCacheMutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _executableMutex;
    MPSGraph *_graph;
    struct shared_ptr<mlir::MLIRContext> { struct MLIRContext *__ptr_; struct __shared_weak_count *__cntrl_; } _executableContext;
    void *_builder;
    struct OriginalModuleRef { struct unique_ptr<BaseModuleRef, std::default_delete<BaseModuleRef>> { struct BaseModuleRef *__ptr_; } _module; } _originalModule;
    void *_symbolTable;
    struct unique_ptr<GPU::detail::ReadDataFromFileCache, std::default_delete<GPU::detail::ReadDataFromFileCache>> { struct ReadDataFromFileCache *__ptr_; } _readDataFromFileCache;
    struct StringMap<std::unique_ptr<LazyCopyFile>, llvm::MallocAllocator> { struct StringMapEntryBase **TheTable; unsigned int NumBuckets; unsigned int NumItems; unsigned int NumTombstones; unsigned int ItemSize; } _dataFiles;
    struct StringMap<std::pair<BinaryResourceFileType, NSString *>, llvm::MallocAllocator> { struct StringMapEntryBase **TheTable; unsigned int NumBuckets; unsigned int NumItems; unsigned int NumTombstones; unsigned int ItemSize; } _binaryResourceFiles;
    MPSGraphCompilationDescriptor *_originalCompilationDescriptor;
    NSDictionary *_originalPerDeviceDescriptorCompilationOptions;
    NSDictionary *_callablesDescription;
    struct vector<std::string, std::allocator<std::string>> { void *__begin_; void *__end_; void *__cap_; } _symbolsWithMutableWeight;
    struct DenseMap<const MPSGraphExecutableSpecializedModule *, std::unique_ptr<RuntimeCacheEntry>, llvm::DenseMapInfo<const MPSGraphExecutableSpecializedModule *>, llvm::detail::DenseMapPair<const MPSGraphExecutableSpecializedModule *, std::unique_ptr<RuntimeCacheEntry>>> { void *Buckets; unsigned int NumEntries; unsigned int NumTombstones; unsigned int NumBuckets; } _runtimeCache;
    struct MPSGraphSpecializationCache { struct DenseMap<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>, std::unique_ptr<MPSGraphExecutableSpecializedModule>, MPSGraphModuleKeysSetInfo, llvm::detail::DenseMapPair<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>, std::unique_ptr<MPSGraphExecutableSpecializedModule>>> { void *Buckets; unsigned int NumEntries; unsigned int NumTombstones; unsigned int NumBuckets; } _moduleStorage; struct DenseMap<MPSGraphModuleKey, MPSGraphExecutableCacheValue, MPSGraphModuleKeyInfo, llvm::detail::DenseMapPair<MPSGraphModuleKey, MPSGraphExecutableCacheValue>> { void *Buckets; unsigned int NumEntries; unsigned int NumTombstones; unsigned int NumBuckets; } _currentCache; struct DenseSet<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>, MPSGraphModuleKeysSetInfo> { struct DenseMap<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>, llvm::detail::DenseSetEmpty, MPSGraphModuleKeysSetInfo, llvm::detail::DenseSetPair<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>>> { void *Buckets; unsigned int NumEntries; unsigned int NumTombstones; unsigned int NumBuckets; } TheMap; } _failedToLoadModules; } _withDeviceCache;
    struct MPSGraphSpecializationCache { struct DenseMap<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>, std::unique_ptr<MPSGraphExecutableSpecializedModule>, MPSGraphModuleKeysSetInfo, llvm::detail::DenseMapPair<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>, std::unique_ptr<MPSGraphExecutableSpecializedModule>>> { void *Buckets; unsigned int NumEntries; unsigned int NumTombstones; unsigned int NumBuckets; } _moduleStorage; struct DenseMap<MPSGraphModuleKey, MPSGraphExecutableCacheValue, MPSGraphModuleKeyInfo, llvm::detail::DenseMapPair<MPSGraphModuleKey, MPSGraphExecutableCacheValue>> { void *Buckets; unsigned int NumEntries; unsigned int NumTombstones; unsigned int NumBuckets; } _currentCache; struct DenseSet<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>, MPSGraphModuleKeysSetInfo> { struct DenseMap<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>, llvm::detail::DenseSetEmpty, MPSGraphModuleKeysSetInfo, llvm::detail::DenseSetPair<llvm::DenseSet<MPSGraphModuleKey, MPSGraphModuleKeyInfo>>> { void *Buckets; unsigned int NumEntries; unsigned int NumTombstones; unsigned int NumBuckets; } TheMap; } _failedToLoadModules; } _withNoDeviceCache;
    NSObject<OS_dispatch_queue> *_specializationDispatchQueue;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _specializationsPendingMutex;
    struct condition_variable { struct _opaque_pthread_cond_t { long long __sig; char __opaque[40]; } __cv_; } _specializationsPendingCV;
    struct atomic<int> { struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> { _Atomic int __a_value; } __a_; } _specializationsPending;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } _originalModuleIsOptimized;
    BOOL _hasPreloadedSpecializedModule;
    NSArray *_targetOperations;
    NSDictionary *_feeds;
    unsigned long long _modelUID;
    NSString *_modelTime;
    unsigned long long _compilationID;
    unsigned long long _evDumpModuleFlag;
    unsigned long long _sharedEventSignalValue;
    NSString *_evDumpModulePath;
    NSString *_dumpCompiledProductsPath;
    unsigned long long _evDumpFeedsResultsFlag;
    NSFileManager *_fileManager;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _encodeCountLock;
    unsigned long long _encodeCount;
    BOOL _enableCommitAndContinue;
    BOOL _enableProfilingOpNames;
    BOOL _briefProfilingOpNames;
    BOOL _simulateANECompileFailure;
    BOOL _simulateANELoadModelFailure;
    BOOL _runPlacementPass;
    BOOL _useCostModel;
    BOOL _oldCostModelPass;
    BOOL _printCostModel;
    BOOL _generateRuntimeExecutionReport;
    BOOL _legacyANEQuantization;
    BOOL _keepANECUnitNameAttrs;
    BOOL _disablePreEncodeTI;
    BOOL _enablePreEncodeTIReadInputs;
    BOOL _enableRuntimeTIVerifiers;
    BOOL _disableANECaching;
    BOOL _disableANEFallback;
    BOOL _compilationOnly;
    BOOL _enableQuantizedConvFusion;
    BOOL _disableQuantizedConvFusion;
    BOOL _forceTimingPasses;
    BOOL _disableReduceMultiRegionGreedyPlacement;
    BOOL _toolsOptimizedExecutableSkipPasses;
    long long _forcePlacementOnDevice;
    struct optional<std::unordered_set<std::string>> { union { char __null_state_; struct unordered_set<std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::string>> { struct __hash_table<std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::string>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::string, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::string, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } __val_; } ; BOOL __engaged_; } _funcNamesInOriginalModule;
    NSMutableSet *_snapshotLocModuleSet;
    NSString *_modelFileArchivePath;
}

@property unsigned long long options;
@property (readonly) NSArray *feedTensors;
@property (readonly) NSArray *targetTensors;

+ (unsigned long long)getValidateNetworkSupportedVersion;
+ (struct __CFDictionary { } *)validateNetworkWithParams:(struct __CFDictionary { } *)a0 apiVersion:(unsigned long long)a1;
+ (id)executableWithMPSGraphPackageAtURL:(id)a0 compilationDescriptor:(id)a1 error:(id *)a2;
+ (void)buildPerEntryPointToSymbolAndFileNameMapFrom:(id)a0 executableExecutionDescriptor:(id)a1;
+ (id)executableWithMLIRSourceFromURL:(id)a0 executableDescriptor:(id)a1 error:(id *)a2;
+ (id)executablesWithMLIRSourceForMultipleModules:(id)a0 executableDescriptor:(id)a1 regionNames:(id)a2;

- (void)dump;
- (id)functionNames;
- (id)debugDescription;
- (void)dealloc;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)getOutputShapes;
- (id)getInputShapesForFunction:(id)a0;
- (id)getOutputTypesWithDevice:(id)a0 entryPoint:(id)a1 compilationDescriptor:(id)a2;
- (id)initWithMPSGraphPackageAtURL:(id)a0 compilationDescriptor:(id)a1;
- (id)inputNamesForFunction:(id)a0;
- (id)newExecutableWithDevice:(id)a0 inputsArray:(id)a1 intermediateOperations:(id)a2 executionDescriptor:(id)a3;
- (id)optimizedBytecode:(id)a0 inputShapes:(id)a1 compilationDescriptor:(id)a2;
- (id)outputNamesForFunction:(id)a0;
- (id)resourceBlob:(id)a0 resourceName:(id)a1 error:(id *)a2;
- (id)runAsyncWithMTLCommandQueue:(id)a0 inputsArray:(id)a1 resultsArray:(id)a2 executionDescriptor:(id)a3;
- (id)runWithDevice:(id)a0 inputsArray:(id)a1 resultsArray:(id)a2 executionDescriptor:(id)a3;
- (void)specializeWithDevice:(id)a0 entryPoints:(id)a1 compilationDescriptor:(id)a2;
- (void)specializeWithDevice:(id)a0 entryPoints:(id)a1 compilationDescriptor:(id)a2 error:(id *)a3;
- (void)applyEntryPointToSymbolAndFileNameMap:(id)a0 device:(id)a1 compilationDescriptor:(id)a2;
- (id)encodeToCommandBuffer:(id)a0 inputsArray:(id)a1 resultsArray:(id)a2 executionDescriptor:(id)a3;
- (id)getInputShapes;
- (id)getOutputShapesForFunction:(id)a0;
- (id)getOutputTypesWithDevice:(id)a0 inputTypes:(id)a1 compilationDescriptor:(id)a2;
- (id)initWithMILProgram:(void *)a0 executableDescriptor:(id)a1;
- (id)runWithMTLCommandQueue:(id)a0 inputsArray:(id)a1 resultsArray:(id)a2;
- (void)serializeToMPSGraphPackageAtURL:(id)a0 descriptor:(id)a1;
- (void)unloadEntryPointToSymbolAndFileNameMap:(id)a0 device:(id)a1 compilationDescriptor:(id)a2;
- (void)commonPostInit:(struct unique_ptr<InMemoryModuleRef, std::default_delete<InMemoryModuleRef>> { struct InMemoryModuleRef *x0; })a0;
- (unsigned long long)getOptimizedNoDeviceModulesSize;
- (id)initWithMPSGraphPackageAtURLCommon:(id)a0 compilationDescriptor:(id)a1 error:(id *)a2;
- (id)runInternalWithDevice:(id)a0 commandBuffer:(id)a1 feedsDictionary:(id)a2 resultsDictionary:(id)a3 executableExecutionDescriptor:(id)a4 mpsGraphOwnedCommandBuffer:(BOOL)a5;
- (id)getDefaultEntryPointWithShapes:(id)a0;
- (void)allCommonSetup;
- (id)allocateTensorDataTargetsForDevice:(id)a0 shapedEntryPoint:(id)a1;
- (void)aneRegionOpsHashSet:(void *)a0;
- (void)applyInputTypes:(const void *)a0 toFunction:(struct FuncOp { struct Operation *x0; })a1;
- (void)applyOptimizationPassesWithDevice:(id)a0 module:(struct ModuleOp { struct Operation *x0; })a1 compilationID:(unsigned long long)a2 compilationDescriptor:(id)a3 perEntryPointFuncOpMLIRName:(const void *)a4;
- (id)applyOptionsToEntryPoint:(id)a0 compilationDescriptor:(id)a1;
- (void)checkCallablesForModule:(void *)a0;
- (BOOL)checkSpecializationValidForSingleEntry;
- (struct OwningOpRef<mlir::ModuleOp> { struct ModuleOp { struct Operation *x0; } x0; })cloneForFeeds:(id)a0 targetTensors:(id)a1 targetOperations:(id)a2;
- (void)commonPreInitWithDescriptor:(id)a0;
- (struct vector<mlir::Type, std::allocator<mlir::Type>> { struct Type *x0; struct Type *x1; struct Type *x2; })convertMPSGraphShapesToMLIRTypes:(id)a0;
- (struct vector<mlir::Type, std::allocator<mlir::Type>> { struct Type *x0; struct Type *x1; struct Type *x2; })convertMPSGraphShapesToMLIRTypes:(id)a0 funcOp:(struct FuncOp { struct Operation *x0; })a1 compilationDescriptor:(id)a2;
- (id)createMLIRLibraryWithMPSGraphPackage:(id)a0 packageKey:(id)a1 appendOptimizedModules:(BOOL)a2;
- (void)createMetalPackageAtURL:(id)a0 descriptor:(id)a1;
- (void)dumpArrayOfTensorData:(id)a0 basePath:(id)a1 separator:(id)a2 invocationCount:(unsigned long long)a3;
- (void)dumpCompiledProducts;
- (void)dumpModuleWithEV:(struct ModuleOp { struct Operation *x0; })a0;
- (id)emitObjCToURL:(id)a0 test:(BOOL)a1;
- (void)emitObjUnitTestToUrl:(id)a0;
- (id)emitViewerSPI;
- (void)emitViewerSPIToURL:(id)a0;
- (id)emitViewerSPIWithDevice:(id)a0 inputShapes:(id)a1 compilationDescriptor:(id)a2;
- (id)encodeWithMPSCommandBuffer:(id)a0 inputsArray:(id)a1 resultsArray:(id)a2 executionDescriptor:(id)a3;
- (struct vector<mlir::NamedAttribute, std::allocator<mlir::NamedAttribute>> { struct NamedAttribute *x0; struct NamedAttribute *x1; struct NamedAttribute *x2; })getAttributesFromDescriptors:(id)a0 context:(void *)a1 deviceDescriptor:(id)a2;
- (id)getDataFilesFromMPSGraphPackageAtURLCommon:(id)a0 error:(id *)a1;
- (struct MPSGraphModuleKey { struct SmallVector<long long, 6U> { void *x0; unsigned int x1; unsigned int x2; char x3[48]; } x0; id x1; id x2; id x3; id x4; })getDeviceCacheKeyForEntryPoint:(id)a0 device:(id)a1 compilationDescriptor:(id)a2;
- (struct MPSGraphModuleKey { struct SmallVector<long long, 6U> { void *x0; unsigned int x1; unsigned int x2; char x3[48]; } x0; id x1; id x2; id x3; id x4; })getDeviceCacheKeyForTransformedEntryPoint:(id)a0 device:(id)a1 compilationDescriptor:(id)a2;
- (struct MPSGraphModuleKey { struct SmallVector<long long, 6U> { void *x0; unsigned int x1; unsigned int x2; char x3[48]; } x0; id x1; id x2; id x3; id x4; })getDeviceCacheKeyForTransformedEntryPointImpl:(id)a0 deviceDescriptor:(id)a1 compilationDescriptor:(id)a2;
- (struct FuncOp { struct Operation *x0; })getEntryFuncOpForModule:(struct ModuleOp { struct Operation *x0; })a0;
- (id)getFunctionReflectionData;
- (id)getIR;
- (id)getInputShapesForFuncOp:(struct FuncOp { struct Operation *x0; })a0;
- (id)getInputShapesForFunction:(id)a0 error:(id *)a1;
- (id)getMutableWeightsFilePath;
- (void *)getNewRuntimeForDevice:(id)a0 specializedModule:(void *)a1 shapedEntryPoints:(id)a2 compilationDescriptor:(id)a3;
- (struct MPSGraphModuleKey { struct SmallVector<long long, 6U> { void *x0; unsigned int x1; unsigned int x2; char x3[48]; } x0; id x1; id x2; id x3; id x4; })getNoDeviceCacheKeyForTransformedEntryPoint:(id)a0 compilationDescriptor:(id)a1;
- (id)getOperationsToVisitForOperation:(id)a0 visitedOperations:(id)a1;
- (unsigned long long)getOptimizedModuleCacheSize;
- (unsigned long long)getOptimizedModulesSize;
- (unsigned long long)getOptimizedNoDeviceModuleCacheSize;
- (id)getOutputShapesForFuncOp:(struct FuncOp { struct Operation *x0; })a0;
- (id)getOutputTypesWithDevice:(id)a0 shapedEntryPoint:(id)a1 compilationDescriptor:(id)a2;
- (void *)getReadDataFromFileCache;
- (unsigned long long)getResourcesTotalSize;
- (void *)getRuntimeSpecializationAndEntryFunction:(id)a0 shapedEntryPoint:(id)a1 perEntryPointToSymbolAndFileNameMap:(id)a2 entryFuncOp:(void *)a3 runtime:(struct BaseRuntime **)a4;
- (id)getStateInputPositionsWithEntryFunctionName:(id)a0;
- (id)getTargetShapesForDevice:(id)a0 inputsArray:(id)a1;
- (id)getTensorDataArraysWithDevice:(id)a0 feedsDictionary:(id)a1 resultsDictionary:(id)a2 inputsArray:(id)a3 resultsArray:(id)a4 executableExecutionDescriptor:(id)a5;
- (unsigned long long)getTotalANEJITCompilations;
- (id)initWithCoreMLPackage:(id)a0 executableDescriptor:(id)a1;
- (id)initWithCoreMLPackageAtURL:(id)a0 compilationDescriptor:(id)a1;
- (id)initWithGraph:(id)a0 device:(id)a1 feeds:(id)a2 targetTensors:(id)a3 targetOperations:(id)a4 executableDescriptor:(id)a5;
- (id)initWithMILProgramWithURL:(id)a0 executableDescriptor:(id)a1;
- (id)initWithMLIRBytecode:(id)a0 executableDescriptor:(id)a1;
- (id)initWithMLIRCommon:(struct unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>> { struct MemoryBuffer *x0; })a0 executableDescriptor:(id)a1 error:(id *)a2;
- (id)initWithMLIRCoreML:(struct StringRef { char *x0; unsigned long long x1; })a0 executableDescriptor:(id)a1 error:(id *)a2;
- (id)initWithMLIRModule:(struct ModuleOp { struct Operation *x0; })a0 executableDescriptor:(id)a1;
- (id)initWithMLIRSource:(id)a0 executableDescriptor:(id)a1;
- (id)initWithMLIRSourceFromURL:(id)a0 executableDescriptor:(id)a1;
- (id)initWithMPSGraphPackageAtURL:(id)a0 adapterExecutable:(id)a1 compilationDescriptor:(id)a2;
- (id)initWithSpecializedMLIRModule:(struct ModuleOp { struct Operation *x0; })a0 device:(id)a1 shapedEntryPoint:(id)a2 compilationDescriptor:(id)a3 executableDescriptor:(id)a4;
- (void)initializeFuncNamesInOriginalModule;
- (id)initializeWithMLIRModule:(struct ModuleOp { struct Operation *x0; })a0 executableDescriptor:(id)a1;
- (id)inputNamesForFuncOp:(struct FuncOp { struct Operation *x0; })a0;
- (BOOL)isExecutableForFeeds:(id)a0 targetTensors:(id)a1 targetOperations:(id)a2 compilationDescriptor:(id)a3;
- (id)lazyInitWithModuleURL:(id)a0 executableDescriptor:(id)a1 callablesDescription:(id)a2 moduleResourcesLoader:(struct shared_ptr<ModuleResourcesLoader> { struct ModuleResourcesLoader *x0; struct __shared_weak_count *x1; })a3;
- (void)optimizeOriginalModule;
- (id)optimizedBytecodeForAllExistingSpecializations;
- (id)outputNamesForFuncOp:(struct FuncOp { struct Operation *x0; })a0;
- (struct ReturnOp { struct Operation *x0; })returnOpForFunctionInModule:(struct ModuleOp { struct Operation *x0; })a0;
- (id)runAsyncWithCommandQueue:(id)a0 inputsArray:(id)a1 resultsArray:(id)a2 executionDescriptor:(id)a3;
- (id)runAsyncWithDevice:(id)a0 inputsArray:(id)a1 resultsArray:(id)a2 executionDescriptor:(id)a3;
- (id)runInternalWithDevice:(id)a0 commandBuffer:(id)a1 feeds:(id)a2 results:(id)a3 executableExecutionDescriptor:(id)a4 mpsGraphOwnedCommandBuffer:(BOOL)a5;
- (id)runWithDevice:(id)a0 inputsArray:(id)a1 intermediateOperations:(id)a2 resultsArray:(id)a3 executionDescriptor:(id)a4;
- (id)runWithMTLCommandQueue:(id)a0 inputsArray:(id)a1 resultsArray:(id)a2 executionDescriptor:(id)a3;
- (BOOL)sendANEStreamingSessionSignal:(id)a0 sessionDescriptor:(id)a1 report:(id)a2;
- (void)serializeOptimizedBytecode:(struct ModuleOp { struct Operation *x0; })a0 :(id)a1 :(id)a2;
- (void)specializeForMultipleInputTypesWithDevice:(id)a0 multipleInputTypes:(id)a1 compilationDescriptor:(id)a2;
- (void)specializeWithDevice:(id)a0 inputShapes:(id)a1 compilationDescriptor:(id)a2;
- (void)specializeWithDevice:(id)a0 inputTypes:(id)a1 compilationDescriptor:(id)a2;
- (struct MPSGraphExecutableCacheValue { struct MPSGraphExecutableSpecializedModule *x0; struct BaseModuleRef *x1; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x2; })specializeWithDevice:(id)a0 shapedEntryPoint:(id)a1 compilationDescriptor:(id)a2;
- (void)specializeWithDevice:(id)a0 shapedEntryPoints:(id)a1 compilationDescriptor:(id)a2 error:(id *)a3;
- (struct SmallVector<MPSGraphExecutableCacheValue, 1U> { void *x0; unsigned int x1; unsigned int x2; char x3[40]; })specializedModuleWithDevice:(id)a0 shapedEntryPoints:(id)a1 compilationDescriptor:(id)a2 error:(id *)a3;

@end
