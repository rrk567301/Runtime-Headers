@class NSString, MPSGraph, MPSGraphTensor, _CADeveloperHUDProperties, MPSGraphExecutable, NSObject;
@protocol MTLTensor, MTLTexture, MTLBuffer, MTLEvent, OS_dispatch_group, MTLDevice, OS_dispatch_queue, MTL4MachineLearningPipelineState, MTL4ArgumentTable, MTLFence, MTLCommandQueue, MTLHeap;

@interface _M4FXTemporalDenoisingScalingEffect : _MTL4FXTemporalDenoisedScaler <MTL4FXTemporalDenoisedScalerSPI> {
    id<MTLDevice> _device;
    void /* unknown type, empty encoding */ _jitterOffset;
    void /* unknown type, empty encoding */ _motionVectorScale;
    struct CGPoint { double x; double y; } _previousJitterOffset;
    BOOL _autoExposureEnabled;
    BOOL _specularHitDistEnabled;
    BOOL _useANE;
    BOOL _midBicubicWarp;
    BOOL _reactiveMaskEnabled;
    BOOL _enableLateLatch;
    id<MTLTexture> _reactiveTexture;
    id<MTLTexture> _specularHitDistance;
    id<MTLTexture> _history;
    id<MTLTexture> _prevReactiveTexture;
    struct MPSGraphMPSGraphExecutableWrapper { MPSGraph *_graph; MPSGraphExecutable *_graphExecutableANE; MPSGraphExecutable *_graphExecutableGPU; MPSGraphTensor *_input_Tensor; MPSGraphTensor *_output_Tensor; NSObject<OS_dispatch_group> *_prewarm_group; BOOL _prewarmComplete; } _net_wrapper;
    struct UBFNetDescriptor { int version; unsigned int image_width; unsigned int image_height; unsigned int input_width; unsigned int input_height; unsigned int input_channels; unsigned int input_unshuffle_ratio; unsigned int unshuffle_width; unsigned int unshuffle_height; unsigned int unshuffle_channels; unsigned int output_shuffle_ratio; unsigned int output_width; unsigned int output_height; unsigned int output_channels; unsigned int up_channels; unsigned int layers_channels[4]; } _brnet_desc;
    struct MPSGraphMPSGraphExecutableWrapper { MPSGraph *_graph; MPSGraphExecutable *_graphExecutableANE; MPSGraphExecutable *_graphExecutableGPU; MPSGraphTensor *_input_Tensor; MPSGraphTensor *_output_Tensor; NSObject<OS_dispatch_group> *_prewarm_group; BOOL _prewarmComplete; } _dbfnet_net_wrapper;
    struct DBFNetDescriptor { int version; unsigned int image_width; unsigned int image_height; unsigned int input_width; unsigned int input_height; unsigned int input_channels; unsigned int output_width; unsigned int output_height; unsigned int output_channels; } _dbfnet_desc;
    void *_filter;
    void *_denoiseFilter;
    id<MTLBuffer> _input_TensorData_Buffer;
    id<MTLBuffer> _output_TensorData_Buffer;
    id<MTLBuffer> _dbfnet_input_TensorData_Buffer;
    id<MTLBuffer> _dbfnet_output_TensorData_Buffer;
    id<MTLTensor> _input_TensorData;
    id<MTLTensor> _output_TensorData;
    id<MTLTensor> _dbfnet_input_TensorData;
    id<MTLTensor> _dbfnet_output_TensorData;
    id<MTLCommandQueue> _commandQueue;
    id<MTLEvent> _inputEvent;
    id<MTLEvent> _outputEvent;
    id<MTLEvent> _midProcessingStartEvent;
    id<MTLEvent> _midProcessingDoneEvent;
    id<MTLEvent> _framePowerOnSharedEvent;
    id<MTLEvent> _frameSharedEvent;
    id<MTLFence> _dummyFence;
    unsigned long long _inputEventValue;
    unsigned long long _outputEventValue;
    NSObject<OS_dispatch_queue> *_asyncQueue;
    id<MTL4MachineLearningPipelineState> _dbfNetPSO;
    id<MTL4MachineLearningPipelineState> _netPSO;
    id<MTL4ArgumentTable> _dbfNetArg;
    id<MTL4ArgumentTable> _netArg;
    id<MTLTexture> _denoiserColorTexture;
    _CADeveloperHUDProperties *_hudProperties;
    struct CHistoryRecord { float x0; unsigned int x1; unsigned int x2; float x3; float x4; float x5[120]; float x6; float x7; } *_timingRecord;
    unsigned int frameIndex;
    id<MTLHeap> _netHeap;
    id<MTLHeap> _dbfNetHeap;
    id<MTLFence> _internalFence;
    struct MFXDevice4 { id x0; id x1; id x2; id x3; struct MFXComputeEncoder4 *x4; struct MFXRenderEncoder4 { id x0; id x1; } x5; } *device4;
    struct { void /* unknown type, empty encoding */ columns[4]; } _prevViewProjectionMatrix;
}

@property (nonatomic) unsigned long long inputContentWidth;
@property (nonatomic) unsigned long long inputContentHeight;
@property (nonatomic) BOOL reset;
@property (nonatomic) unsigned long long colorTextureBarrierStages;
@property (readonly, nonatomic) unsigned long long outputTextureBarrierStages;
@property (retain, nonatomic) id<MTLTexture> debugTexture;
@property (readonly, nonatomic) id<MTLTexture> dilatedMotionVectors;
@property (readonly, nonatomic) unsigned long long colorTextureUsage;
@property (readonly, nonatomic) unsigned long long depthTextureUsage;
@property (readonly, nonatomic) unsigned long long motionTextureUsage;
@property (readonly, nonatomic) unsigned long long reactiveTextureUsage;
@property (readonly, nonatomic) unsigned long long diffuseAlbedoTextureUsage;
@property (readonly, nonatomic) unsigned long long specularAlbedoTextureUsage;
@property (readonly, nonatomic) unsigned long long normalTextureUsage;
@property (readonly, nonatomic) unsigned long long roughnessTextureUsage;
@property (readonly, nonatomic) unsigned long long specularHitDistanceTextureUsage;
@property (readonly, nonatomic) unsigned long long denoiseStrengthMaskTextureUsage;
@property (readonly, nonatomic) unsigned long long transparencyOverlayTextureUsage;
@property (readonly, nonatomic) unsigned long long outputTextureUsage;
@property (retain, nonatomic) id<MTLTexture> colorTexture;
@property (retain, nonatomic) id<MTLTexture> depthTexture;
@property (retain, nonatomic) id<MTLTexture> motionTexture;
@property (retain, nonatomic) id<MTLTexture> diffuseAlbedoTexture;
@property (retain, nonatomic) id<MTLTexture> specularAlbedoTexture;
@property (retain, nonatomic) id<MTLTexture> normalTexture;
@property (retain, nonatomic) id<MTLTexture> roughnessTexture;
@property (retain, nonatomic) id<MTLTexture> specularHitDistanceTexture;
@property (retain, nonatomic) id<MTLTexture> denoiseStrengthMaskTexture;
@property (retain, nonatomic) id<MTLTexture> transparencyOverlayTexture;
@property (retain, nonatomic) id<MTLTexture> outputTexture;
@property (retain, nonatomic) id<MTLTexture> exposureTexture;
@property (nonatomic) float preExposure;
@property (retain, nonatomic) id<MTLTexture> reactiveMaskTexture;
@property (nonatomic) float jitterOffsetX;
@property (nonatomic) float jitterOffsetY;
@property (nonatomic) float motionVectorScaleX;
@property (nonatomic) float motionVectorScaleY;
@property (nonatomic) BOOL shouldResetHistory;
@property (nonatomic, getter=isDepthReversed) BOOL depthReversed;
@property (readonly, nonatomic) unsigned long long colorTextureFormat;
@property (readonly, nonatomic) unsigned long long depthTextureFormat;
@property (readonly, nonatomic) unsigned long long motionTextureFormat;
@property (readonly, nonatomic) unsigned long long diffuseAlbedoTextureFormat;
@property (readonly, nonatomic) unsigned long long specularAlbedoTextureFormat;
@property (readonly, nonatomic) unsigned long long normalTextureFormat;
@property (readonly, nonatomic) unsigned long long roughnessTextureFormat;
@property (readonly, nonatomic) unsigned long long specularHitDistanceTextureFormat;
@property (readonly, nonatomic) unsigned long long denoiseStrengthMaskTextureFormat;
@property (readonly, nonatomic) unsigned long long transparencyOverlayTextureFormat;
@property (readonly, nonatomic) unsigned long long reactiveMaskTextureFormat;
@property (readonly, nonatomic) unsigned long long outputTextureFormat;
@property (readonly, nonatomic) unsigned long long inputWidth;
@property (readonly, nonatomic) unsigned long long inputHeight;
@property (readonly, nonatomic) unsigned long long outputWidth;
@property (readonly, nonatomic) unsigned long long outputHeight;
@property (readonly, nonatomic) float inputContentMinScale;
@property (readonly, nonatomic) float inputContentMaxScale;
@property (nonatomic) struct { void /* unknown type, empty encoding */ columns[4]; } worldToViewMatrix;
@property (nonatomic) struct { void /* unknown type, empty encoding */ columns[4]; } viewToClipMatrix;
@property (retain, nonatomic) id<MTLFence> fence;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)dealloc;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)encodeToCommandBuffer:(id)a0;
- (id)initWithDevice:(id)a0 compiler:(id)a1 descriptor:(id)a2 history:(id)a3;
- (struct CGPoint { double x0; double x1; })jitterOffset;
- (struct CGPoint { double x0; double x1; })motionVectorScale;
- (BOOL)reversedDepth;
- (void)setJitterOffset:(struct CGPoint { double x0; double x1; })a0;
- (void)setMotionVectorScale:(struct CGPoint { double x0; double x1; })a0;
- (void)setReversedDepth:(BOOL)a0;

@end
