@class IMKCandidateWindowPositioning, NSArray, NSView, NSURL, NSAppearance, IMKCandidatePopoverController, IMKWindowController;

@interface IMKUIWindowBasedCandidateController : IMKUICandidateController

@property (retain, nonatomic) NSAppearance *appearance;
@property (nonatomic) BOOL deferredWindowVisibility;
@property (nonatomic) struct __DCSDictionary { } *definitionDictionary;
@property (nonatomic) struct __IDXIndex { } *definitionIndexRef;
@property (nonatomic) BOOL descriptionEnabled;
@property (retain, nonatomic) NSURL *descriptionStyleSheet;
@property (readonly, nonatomic, getter=isExpanded) BOOL expanded;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } extraSize;
@property (nonatomic) BOOL forceNoIncrementalSearchPositioning;
@property (nonatomic, getter=isGrouping) BOOL grouping;
@property (retain, nonatomic) NSView *informationView;
@property (nonatomic) double informationViewMinimumSize;
@property (readonly, nonatomic) BOOL isUsingIncrementalSearch;
@property (readonly, nonatomic) BOOL isSortable;
@property (nonatomic) unsigned long long numberOfSimilarWidthCandidates;
@property (nonatomic) struct CGSize { double width; double height; } positionalGridSize;
@property (retain, nonatomic) IMKCandidatePopoverController *popoverController;
@property (nonatomic) BOOL previousActionWasSortingChange;
@property (nonatomic) struct CGPoint { double x; double y; } previousPosition;
@property (nonatomic) BOOL resetCandidatesOnRelayout;
@property (nonatomic) BOOL resizeOnSelectionChanged;
@property (retain, nonatomic) NSArray *selectionKeyTitles;
@property (readonly, nonatomic) BOOL shouldNotShowCandidates;
@property (readonly, nonatomic) BOOL showsLegacyScroller;
@property (nonatomic) BOOL showsSortingBar;
@property (readonly, nonatomic) NSArray *topVisibleCandidates;
@property (nonatomic, getter=isVisible) BOOL visible;
@property (retain, nonatomic) IMKWindowController *windowController;
@property (retain, nonatomic) IMKCandidateWindowPositioning *windowPositioning;
@property (readonly, nonatomic) BOOL windowIsHorizontal;
@property (nonatomic) long long windowLevel;
@property (readonly, nonatomic) BOOL windowWillClose;
@property (readonly, nonatomic) BOOL windowTextIsVerticallyAligned;
@property (nonatomic) BOOL windowVisibleWithDeferral;
@property (nonatomic) BOOL windowVisibilityDidChange;

+ (id)defaultSelectionKeyTitles;

- (void)moveForward:(id)a0;
- (void)dealloc;
- (id)styleSheet;
- (id)init;
- (BOOL)handleKeyboardEvent:(id)a0;
- (void)beginGrouping;
- (void)moveUp:(id)a0;
- (void)pageUp:(id)a0;
- (void)endGrouping;
- (void)hide;
- (void)moveDown:(id)a0;
- (void)moveLeft:(id)a0;
- (void)moveRight:(id)a0;
- (void)pageDown:(id)a0;
- (void)clearPasteboard;
- (void)createNewLayout;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layout:(BOOL)a0;
- (void)moveToBeginning;
- (void)addCandidatesToPasteboard;
- (void)addInformationView;
- (struct CGPoint { double x0; double x1; })adjustedPositionWithGrid:(struct CGPoint { double x0; double x1; })a0;
- (void)didSelectCandidate:(id)a0 confirm:(BOOL)a1;
- (void)didSelectSortingMode:(id)a0;
- (void)initializeCanvas;
- (BOOL)isWindowBacked;
- (double)lineViewWidth;
- (void)moveBackwards:(id)a0;
- (void)moveToEnd;
- (void)moveToNextCandidate:(id)a0;
- (void)moveToPreviousCandidate:(id)a0;
- (BOOL)numberKeyPressed:(unsigned long long)a0;
- (void)performVisualLineUpdates;
- (struct CGSize { double x0; double x1; })preferredCanvasSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })recommendedWindowFrameWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)reloadWithUpdatingFirstCandidate:(BOOL)a0;
- (void)requestRadar;
- (void)resetPreviousPosition;
- (void)resizeWindow:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)resizeWindowIfNecessary:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)selectNextSortingMethod;
- (void)selectPreviousSortingMethod;
- (void)selectSortingMethod:(id)a0 expand:(BOOL)a1;
- (BOOL)selectionKeyPressed:(id)a0;
- (void)setSelectedCandidateKey:(id)a0 clickCount:(unsigned long long)a1 sendMessageToDelegate:(BOOL)a2;
- (BOOL)shouldShowRadarButton;
- (id)textClient;
- (struct CGPoint { double x0; double x1; })topPositionForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })topWindowPositionForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withClient:(id)a1;
- (void)updateCandidateCanvas;
- (void)updateCandidateSelection;
- (void)updateCanvasAfterSizeChange;
- (void)updateDebuggingInformation;
- (void)updateGroupNames;
- (void)updateHighlightForLineView:(id)a0;
- (void)updateHighlights;
- (void)updateIncrementalSearchState;
- (void)updatePreviousPosition;
- (void)updateSelectionKeys;
- (void)updateUIType;
- (void)updateVisibleSelectionOnMovement;
- (void)updateWindowLevel;
- (void)willUpdateCandidateCanvas;
- (void)windowAnimationDidFinish;
- (void)windowDidHide;

@end
