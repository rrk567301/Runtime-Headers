@interface CIContext : NSObject {
    void *_priv;
}

@property (readonly) unsigned long long identifier;
@property (readonly, nonatomic) struct CGColorSpace { } *workingColorSpace;
@property (readonly, nonatomic) int workingFormat;

+ (id)contextWithOptions:(id)a0;
+ (id)context;
+ (id)contextWithCGContext:(struct CGContext { } *)a0 options:(id)a1;
+ (BOOL)loadArchive:(id)a0;
+ (id)contextWithCGLContext:(struct _CGLContextObject { } *)a0 pixelFormat:(struct _CGLPixelFormatObject { } *)a1 options:(id)a2;
+ (id)contextWithMTLDevice:(id)a0 options:(id)a1;
+ (unsigned int)offlineGPUCount;
+ (id)_cachedContext:(id)a0 options:(id)a1;
+ (int)_crashed_because_nonaddressable_memory_was_passed_to_render:(id)a0 toBitmap:(void *)a1 rowBytes:(long long)a2 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 format:(int)a4 colorSpace:(struct CGColorSpace { } *)a5;
+ (id)_namedCache;
+ (id)_offlineGPUs;
+ (id)_singletonContext;
+ (void)clearArchives;
+ (id)contextForOfflineGPUAtIndex:(unsigned int)a0;
+ (id)contextForOfflineGPUAtIndex:(unsigned int)a0 colorSpace:(struct CGColorSpace { } *)a1 options:(id)a2 sharedContext:(struct _CGLContextObject { } *)a3;
+ (id)contextWithCGLContext:(struct _CGLContextObject { } *)a0 pixelFormat:(struct _CGLPixelFormatObject { } *)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3;
+ (id)contextWithMTLCommandQueue:(id)a0;
+ (id)contextWithMTLCommandQueue:(id)a0 options:(id)a1;
+ (id)contextWithMTLDevice:(id)a0;
+ (struct CGColorSpace { } *)defaultGrayColorSpace;
+ (struct CGColorSpace { } *)defaultRGBColorSpace;
+ (struct CGColorSpace { } *)defaultWorkingColorSpace;
+ (void *)internalCLContextWithOptions:(id)a0;
+ (void *)internalCLContextWithOptions:(id)a0 glContext:(void *)a1;
+ (void *)internalContextWithCGLContext:(struct _CGLContextObject { } *)a0 pixelFormat:(struct _CGLPixelFormatObject { } *)a1 options:(id)a2;
+ (void *)internalContextWithEAGLContext:(id)a0 options:(id)a1;
+ (void *)internalContextWithMTLCommandQueue:(id)a0 options:(id)a1;
+ (void *)internalContextWithMTLDevice:(id)a0 options:(id)a1;
+ (void *)internalGLContextWithOptions:(id)a0;
+ (void *)internalSWContextWithOptions:(id)a0;
+ (BOOL)isMetalAvailable;
+ (BOOL)isOpenCLAvailable;
+ (BOOL)loadArchiveWithName:(id)a0 fromURL:(id)a1;
+ (BOOL)loadArchiveWithURL:(id)a0;
+ (id)offlineGPUAtIndex:(unsigned int)a0;
+ (id)offlineGPUAtIndex:(unsigned int)a0 colorSpace:(struct CGColorSpace { } *)a1 options:(id)a2 sharedContext:(struct _CGLContextObject { } *)a3;
+ (void)purgeArchive:(id)a0;

- (void)abort;
- (void)clearCaches;
- (void)unlock;
- (id)device;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)dealloc;
- (id)objectForKey:(id)a0;
- (id)initWithOptions:(id)a0;
- (void)invalidate;
- (id)_initWithInternalRepresentation:(void *)a0;
- (void)lock;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })CTM;
- (id)_pdfDataRepresentation;
- (id)init;
- (id)description;
- (void)setCTM:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (void)setObject:(id)a0 forKey:(id)a1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGColorSpace { } *)_outputColorSpace;
- (struct CGImage { } *)createCGImage:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)drawImage:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (BOOL)loadArchive:(id)a0;
- (void)render:(id)a0;
- (void)reclaimResources;
- (void)render:(id)a0 toMTLTexture:(id)a1 commandBuffer:(id)a2 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 colorSpace:(struct CGColorSpace { } *)a4;
- (struct CGImage { } *)createCGImage:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 format:(int)a2 colorSpace:(struct CGColorSpace { } *)a3 deferred:(BOOL)a4;
- (void)render:(id)a0 toBitmap:(void *)a1 rowBytes:(long long)a2 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 format:(int)a4 colorSpace:(struct CGColorSpace { } *)a5;
- (id)HEIF10RepresentationOfImage:(id)a0 colorSpace:(struct CGColorSpace { } *)a1 options:(id)a2 error:(id *)a3;
- (id)JPEGRepresentationOfImage:(id)a0 colorSpace:(struct CGColorSpace { } *)a1 options:(id)a2;
- (id)PNGRepresentationOfImage:(id)a0 format:(int)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3;
- (id)initWithCGLContext:(struct _CGLContextObject { } *)a0 pixelFormat:(struct _CGLPixelFormatObject { } *)a1;
- (id)HEIFRepresentationOfImage:(id)a0 format:(int)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3;
- (id)OpenEXRRepresentationOfImage:(id)a0 options:(id)a1 error:(id *)a2;
- (id)TIFFRepresentationOfImage:(id)a0 format:(int)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3;
- (id)_CMPhotoRepresentationOfImage:(id)a0 depth:(int)a1 allowAlpha:(BOOL)a2 containerFormat:(int)a3 colorSpace:(struct CGColorSpace { } *)a4 options:(id)a5 error:(id *)a6;
- (id)_HEIFRepresentationOfImage:(id)a0 format:(int)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3 error:(id *)a4;
- (id)_JPEGRepresentationOfImage:(id)a0 colorSpace:(struct CGColorSpace { } *)a1 options:(id)a2 error:(id *)a3;
- (id)_PNGRepresentationOfImage:(id)a0 format:(int)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3 error:(id *)a4;
- (id)_TIFFRepresentationOfImage:(id)a0 format:(int)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3 error:(id *)a4;
- (void)_addDepthMap:(id)a0 session:(struct CMPhotoCompressionSession { } *)a1 imageHandle:(long long)a2 options:(id)a3;
- (void)_addGainMap:(id)a0 session:(struct CMPhotoCompressionSession { } *)a1 imageHandle:(long long)a2 containerFormat:(int)a3 options:(id)a4 orientation:(id)a5;
- (void)_addPortraitMatte:(id)a0 session:(struct CMPhotoCompressionSession { } *)a1 imageHandle:(long long)a2 options:(id)a3;
- (void)_addSemanticImages:(id)a0 session:(struct CMPhotoCompressionSession { } *)a1 imageHandle:(long long)a2 options:(id)a3;
- (struct CGImage { } *)_createCGImage:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 format:(int)a2 premultiplied:(BOOL)a3 colorSpace:(struct CGColorSpace { } *)a4 deferred:(struct Trilean { char x0; })a5 renderCallback:(id)a6;
- (id)_createClone;
- (id)_dataRepresentationOfImage:(id)a0 UTIType:(id)a1 format:(int)a2 premultiplied:(BOOL)a3 colorSpace:(struct CGColorSpace { } *)a4 options:(id)a5 addAuxData:(BOOL)a6 keysToMerge:(id)a7 error:(id *)a8;
- (void)_gpuContextCheck;
- (void)_insertEventMarker:(const char *)a0;
- (void *)_internalContext;
- (void *)_internalFallbackCL;
- (BOOL)_isCGBackedContext;
- (BOOL)_isGLBackedContext;
- (void)_performFaceDetection:(id)a0 image:(id)a1 orientation:(int)a2 filter:(id)a3;
- (id)_startTaskToRender:(id)a0 toDestination:(id)a1 forPrepareRender:(BOOL)a2 forClear:(BOOL)a3 error:(id *)a4;
- (id)addAuxOptionsForSDR:(id)a0 HDR:(id)a1 colorSpace:(struct CGColorSpace { } *)a2 rgbGainmap:(BOOL)a3;
- (struct CGImage { } *)calculateHDRStatsForCGImage:(struct CGImage { } *)a0;
- (void)calculateHDRStatsForCVPixelBuffer:(struct __CVBuffer { } *)a0;
- (void)calculateHDRStatsForIOSurface:(struct __IOSurface { } *)a0;
- (id)calculateHDRStatsForImage:(id)a0;
- (id)clientCommandQueue;
- (struct CGImage { } *)createCGImage:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 format:(int)a2;
- (struct CGImage { } *)createCGImage:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 format:(int)a2 colorSpace:(struct CGColorSpace { } *)a3;
- (struct CGImage { } *)createCGImage:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 format:(int)a2 colorSpace:(struct CGColorSpace { } *)a3 deferred:(BOOL)a4 calculateHDRStats:(BOOL)a5;
- (struct CGImage { } *)createCGImage:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 format:(int)a2 premultiplied:(BOOL)a3 colorSpace:(struct CGColorSpace { } *)a4 deferred:(BOOL)a5 renderCallback:(id /* block */)a6;
- (struct CGLayer { } *)createCGLayerWithSize:(struct CGSize { double x0; double x1; })a0 info:(struct __CFDictionary { } *)a1;
- (id)createColorCubeDataForFilters:(id)a0 dimension:(int)a1;
- (id)createColorCubeDataForFilters:(id)a0 dimension:(int)a1 colorSpace:(struct CGColorSpace { } *)a2;
- (id)depthBlurEffectFilterForImage:(id)a0 disparityImage:(id)a1 portraitEffectsMatte:(id)a2 hairSemanticSegmentation:(id)a3 glassesMatte:(id)a4 gainMap:(id)a5 orientation:(unsigned int)a6 options:(id)a7;
- (id)depthBlurEffectFilterForImage:(id)a0 disparityImage:(id)a1 portraitEffectsMatte:(id)a2 hairSemanticSegmentation:(id)a3 orientation:(unsigned int)a4 options:(id)a5;
- (id)depthBlurEffectFilterForImage:(id)a0 disparityImage:(id)a1 portraitEffectsMatte:(id)a2 orientation:(unsigned int)a3 options:(id)a4;
- (id)depthBlurEffectFilterForImageData:(id)a0 options:(id)a1;
- (id)depthBlurEffectFilterForImageURL:(id)a0 options:(id)a1;
- (void)drawImage:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)flatten:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 format:(int)a2 colorSpace:(struct CGColorSpace { } *)a3;
- (id)gainMapImageForSDR:(id)a0 HDR:(id)a1 colorSpace:(struct CGColorSpace { } *)a2 rgbGainmap:(BOOL)a3;
- (id)initWithCGContext:(struct CGContext { } *)a0 options:(id)a1;
- (id)initWithCGLContext:(struct _CGLContextObject { } *)a0 pixelFormat:(struct _CGLPixelFormatObject { } *)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3;
- (id)initWithCGLContext:(struct _CGLContextObject { } *)a0 pixelFormat:(struct _CGLPixelFormatObject { } *)a1 options:(id)a2;
- (id)initWithMTLCommandQueue:(id)a0 options:(id)a1;
- (id)initWithMTLDevice:(id)a0 options:(id)a1;
- (struct CGSize { double x0; double x1; })inputImageMaximumSize;
- (id)internalCommandQueue;
- (BOOL)isMetalBased;
- (BOOL)isOpenCLBased;
- (BOOL)isOpenGLBased;
- (BOOL)loadArchiveWithName:(id)a0 fromURL:(id)a1;
- (BOOL)loadArchiveWithURL:(id)a0;
- (unsigned long long)maximumInputImageSize;
- (unsigned long long)maximumOutputImageSize;
- (BOOL)measureRequirementsOf:(id)a0 query:(int)a1 :(id *)a2 results:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a3;
- (struct CGSize { double x0; double x1; })outputImageMaximumSize;
- (BOOL)prepareRender:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 toDestination:(id)a2 atPoint:(struct CGPoint { double x0; double x1; })a3 error:(id *)a4;
- (void)render:(id)a0 toCVPixelBuffer:(struct __CVBuffer { } *)a1;
- (void)render:(id)a0 toCVPixelBuffer:(struct __CVBuffer { } *)a1 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 colorSpace:(struct CGColorSpace { } *)a3;
- (void)render:(id)a0 toIOSurface:(struct __IOSurface { } *)a1 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 colorSpace:(struct CGColorSpace { } *)a3;
- (void)render:(id)a0 toTexture:(unsigned int)a1 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 colorSpace:(struct CGColorSpace { } *)a3;
- (void)render:(id)a0 toTexture:(unsigned int)a1 target:(unsigned int)a2 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 colorSpace:(struct CGColorSpace { } *)a4;
- (id)startTaskToClear:(id)a0 error:(id *)a1;
- (id)startTaskToRender:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 toDestination:(id)a2 atPoint:(struct CGPoint { double x0; double x1; })a3 error:(id *)a4;
- (id)startTaskToRender:(id)a0 toDestination:(id)a1 error:(id *)a2;
- (BOOL)writeHEIF10RepresentationOfImage:(id)a0 toURL:(id)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3 error:(id *)a4;
- (BOOL)writeHEIFRepresentationOfImage:(id)a0 toURL:(id)a1 format:(int)a2 colorSpace:(struct CGColorSpace { } *)a3 options:(id)a4 error:(id *)a5;
- (BOOL)writeJPEGRepresentationOfImage:(id)a0 toURL:(id)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3 error:(id *)a4;
- (BOOL)writeOpenEXRRepresentationOfImage:(id)a0 toURL:(id)a1 options:(id)a2 error:(id *)a3;
- (BOOL)writePNGRepresentationOfImage:(id)a0 toURL:(id)a1 format:(int)a2 colorSpace:(struct CGColorSpace { } *)a3 options:(id)a4 error:(id *)a5;
- (BOOL)writeTIFFRepresentationOfImage:(id)a0 toURL:(id)a1 format:(int)a2 colorSpace:(struct CGColorSpace { } *)a3 options:(id)a4 error:(id *)a5;

@end
