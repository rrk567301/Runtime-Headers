@class NSStackView, ABCardViewStyleProvider, NSPopUpButton, NSButton, ABImmediateActionGestureAdapter, ABOverlayView, ABCardCollectionView, NSString, ABThrottledTrackingAreaMonitor, NSArray, NSView, CNCollectionViewTouchBar, NSTrackingArea, ABCollectionViewItem;
@protocol CNCancelable;

@interface ABCardCollectionRowView : NSView <CNCollectionViewTouchBarDelegate, ABPopUpButtonDelegate, ABCardCollectionRowView, NSTextFieldDelegate> {
    id<CNCancelable> _firstResponderChangedToken;
    NSTrackingArea *_labelTrackingArea;
    NSTrackingArea *_valueTrackingArea;
    NSTrackingArea *_rowTrackingArea;
    BOOL _cursorInTrackingArea;
    BOOL _textHadContentBeforeEditing;
    NSArray *_constraints;
    ABThrottledTrackingAreaMonitor *_rowTrackingAreaMonitor;
    ABImmediateActionGestureAdapter *_immediateActionGestureAdapter;
}

@property (retain) CNCollectionViewTouchBar *collectionViewTouchBar;
@property BOOL shouldHideSuggestedButton;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain) NSButton *addValueButton;
@property (retain) NSButton *removeValueButton;
@property (retain) NSButton *privacyCheckbox;
@property (retain) NSButton *suggestedButton;
@property (retain) NSView *valueView;
@property (retain) NSView *labelView;
@property (retain) NSArray *actionGlyphButtons;
@property (retain) NSStackView *stackView;
@property (retain) ABOverlayView *focusRingView;
@property (retain) NSStackView *staticIdentityBadgeView;
@property (retain) NSView *messagingServiceLabel;
@property (retain) NSPopUpButton *messagingServiceChooserPopup;
@property (retain, nonatomic) ABCardViewStyleProvider *styleProvider;
@property (weak) ABCardCollectionView *cardCollectionView;
@property (weak) ABCollectionViewItem *collectionItem;
@property (getter=isLoaded) BOOL loaded;
@property (readonly, getter=isFocused) BOOL focused;
@property BOOL shouldHideAddButton;
@property BOOL shouldHideMinusButton;
@property BOOL shouldHighlightLabel;
@property BOOL valueIsPrivate;
@property (retain, nonatomic) NSView *accessoryView;

- (void)controlTextDidChange:(id)a0;
- (void)controlTextDidEndEditing:(id)a0;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)updateFonts;
- (void)mouseDown:(id)a0;
- (id)property;
- (void)viewWillMoveToWindow:(id)a0;
- (id)scope;
- (void)updateLabelFont;
- (BOOL)allowsVibrancy;
- (void)dealloc;
- (void)focus;
- (id)init;
- (BOOL)hasValue;
- (void)addField:(id)a0;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void).cxx_destruct;
- (BOOL)accessibilityPerformPress;
- (BOOL)commitEditing;
- (void)controlTextDidBeginEditing:(id)a0;
- (id)makeTouchBar;
- (id)updateKeyViewLoop;
- (id)labelTextColor;
- (void)applyDisplayAttributes;
- (void)generateConstraints;
- (BOOL)hideRemoveButton;
- (void)highlightSearchTerms:(id)a0;
- (id)labelMenuItems;
- (void)removeFromCollection:(id)a0;
- (id)selectedLabel;
- (void)beginEditing:(id)a0;
- (void)clearValue;
- (void)applyValueTextColorForRollover:(BOOL)a0;
- (BOOL)actionGlyphButtonsAlwaysVisible;
- (void)applyLabelTextColorForRollover:(BOOL)a0;
- (void)updateAddButton;
- (void)updateValueFont;
- (BOOL)_showTouchBar;
- (long long)actionGlyphButtonsGravity;
- (void)attachOverlayViewToFocusedView;
- (id)cardViewProperty;
- (void)configureClickToEdit;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentRegionForView:(id)a0 margin:(double)a1;
- (void)didChangeLabelForCollection:(id)a0;
- (void)didInsertIntoCollectionView:(id)a0;
- (void)didRemoveFromCollection:(id)a0;
- (void)drawLabelHighlightRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawValueHighlightRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 labelRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)editWithFocus:(id)a0;
- (void)glyphButtonPressed:(id)a0;
- (void)hideGlyphButtonsIfNeeded;
- (void)invalidateClickToEdit;
- (BOOL)isEditView;
- (BOOL)isLoadedAsynchronously;
- (id)labelContextualMenu;
- (void)labelFrameDidChange:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })labelHighlightRect;
- (id)labelTextField;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })labelTrackingRect;
- (void)mouseEnteredLabelTrackingArea;
- (void)mouseEnteredValueTrackingArea;
- (void)mouseExitedLabelTrackingArea;
- (void)mouseExitedValueTrackingArea;
- (void)ownFrameDidChange:(id)a0;
- (void)performCollectionAction:(id)a0 withSender:(id)a1 item:(id)a2;
- (void)popUpButtonWillResignFirstResponder:(id)a0;
- (void)prepareForDrawingWithoutRolloverHighlight;
- (void)privacyCheckboxClicked:(id)a0;
- (void)processControlTextDidChange:(id)a0;
- (void)processControlTextDidEndEditing:(id)a0;
- (void)resetFocusRingView;
- (void)resetLabelTrackingArea;
- (void)resetRowTrackingArea;
- (void)resetValueTrackingArea;
- (void)reviewSuggestion:(id)a0;
- (void)setGlyphsButtonsVisible:(BOOL)a0;
- (void)setPrivateMeEnabled:(BOOL)a0;
- (void)setValueSelectable:(BOOL)a0;
- (void)setupLabelTrackingArea;
- (void)setupRowTrackingArea;
- (void)setupRowTrackingAreaMonitor;
- (void)setupTrackingAreas;
- (void)setupValueTrackingArea;
- (BOOL)shouldDrawRolloverHighlight;
- (void)showGlyphsButtonsIfNeeded;
- (void)showLabelPopupMenuWithEvent:(id)a0;
- (long long)staticIdentityBadgeViewGravity;
- (id)synthesizedLabelViewClickEvent;
- (void)tearDownLabelTrackingArea;
- (void)tearDownRowTrackingArea;
- (void)tearDownTrackingAreas;
- (void)tearDownValueTrackingArea;
- (void)textFieldWillResignFirstResponder:(id)a0;
- (void)updateGlyphButtonsVisibility;
- (void)updateMultiValueControls;
- (void)updateRemoveButton;
- (void)updateTextColors;
- (void)updateValueFontWithFont:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })valueHighlightRect;
- (id)valueTextColor;
- (id)valueTextField;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })valueTrackingRect;
- (void)valueViewFrameDidChange:(id)a0;

@end
