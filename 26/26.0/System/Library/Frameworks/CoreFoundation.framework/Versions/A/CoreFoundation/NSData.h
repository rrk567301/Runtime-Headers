@class NSString;

@interface NSData : NSObject <_OSXPCObjectRepresentable, _PASDistilledString, CCDatabaseValue, NSCopying, NSMutableCopying, NSSecureCoding>

@property (class, readonly) BOOL supportsSecureCoding;
@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long length;
@property (readonly) const void *bytes;

+ (id)dataWithContentsOfURL:(id)a0;
+ (id)dataWithContentsOfURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
+ (BOOL)_subclassesMustBeExplicitlyMentionedWhenDecoded;
+ (id)allocWithZone:(struct _NSZone { } *)a0;
+ (id)data;
+ (id)dataWithBytes:(const void *)a0 length:(unsigned long long)a1;
+ (id)dataWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 freeWhenDone:(BOOL)a2;
+ (id)dataWithContentsOfURL:(id)a0 options:(unsigned long long)a1 maxLength:(unsigned long long)a2 error:(id *)a3;
+ (id)_alloc;
+ (BOOL)_base64DecodingAlwaysSucceedsForOptions:(unsigned long long)a0;
+ (id)_newZeroingDataWithBytes:(const void *)a0 length:(unsigned long long)a1;
+ (id)_newZeroingDataWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 deallocator:(id /* block */)a2;
+ (BOOL)_readBytesAndEncodingFromPath:(id)a0 maxLength:(long long)a1 encoding:(unsigned long long *)a2 bytes:(void **)a3 length:(long long *)a4 didMap:(BOOL *)a5 options:(unsigned long long)a6 reportProgress:(BOOL)a7 error:(id *)a8;
+ (BOOL)_readBytesFromPath:(id)a0 maxLength:(long long)a1 bytes:(void **)a2 length:(long long *)a3 didMap:(BOOL *)a4 options:(unsigned long long)a5 reportProgress:(BOOL)a6 error:(id *)a7;
+ (id)_scriptingPointWithDescriptor:(id)a0;
+ (id)_scriptingRectangleWithDescriptor:(id)a0;
+ (BOOL)_writeDataToPath:(id)a0 data:(id)a1 options:(unsigned long long)a2 reportProgress:(BOOL)a3 error:(id *)a4;
+ (BOOL)_writeDataToPath:(id)a0 data:(id)a1 options:(unsigned long long)a2 stringEncodingAttributeData:(id)a3 reportProgress:(BOOL)a4 error:(id *)a5;
+ (id)dataWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1;
+ (id)dataWithContentsOfFile:(id)a0;
+ (id)dataWithContentsOfFile:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
+ (id)dataWithContentsOfMappedFile:(id)a0;
+ (id)dataWithData:(id)a0;
+ (id)CKDataWithHexString:(id)a0;
+ (id)CKDataWithHexString:(id)a0 stringIsUppercase:(BOOL)a1;
+ (id)bs_dataWithVMAllocatedBytes:(const void *)a0 length:(unsigned long long)a1;
+ (id)__sfl_bookmarkDataWithURL:(id)a0;
+ (id)__sfl_bookmarkDataWithURLString:(id)a0;
+ (id)__btm_bookmarkDataWithURL:(id)a0;
+ (id)__btm_bookmarkDataWithURLString:(id)a0;
+ (id)ak_dataWithBase64UrlEncodedString:(id)a0;
+ (id)dataWithEncodedSequenceData:(id)a0 data:(id)a1 error:(id *)a2;
+ (id)dataWithEncodedSequenceString:(id)a0 data:(id)a1 error:(id *)a2;
+ (id)dataWithEncodedString:(id)a0 error:(id *)a1;
+ (id)dataFromHexString:(id)a0;
+ (id)aaf_fromImageRef:(struct CGImage { } *)a0;
+ (id)dataFromHexString:(id)a0;

- (id)initWithContentsOfURL:(id)a0;
- (BOOL)writeToFile:(id)a0 atomically:(BOOL)a1;
- (id)subdataWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)initWithBytes:(void *)a0 length:(unsigned long long)a1 copy:(BOOL)a2 freeWhenDone:(BOOL)a3 bytesAreVM:(BOOL)a4;
- (id)mutableCopyWithZone:(struct _NSZone { } *)a0;
- (id)initWithData:(id)a0;
- (BOOL)isEqualToData:(id)a0;
- (BOOL)writeToURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (BOOL)writeToFile:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (id)replacementObjectForCoder:(id)a0;
- (unsigned long long)_cfTypeID;
- (void)getBytes:(void *)a0 length:(unsigned long long)a1;
- (BOOL)_allowsDirectEncoding;
- (void)getBytes:(void *)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (BOOL)_canReplaceWithDispatchDataForXPCCoder;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)initWithContentsOfMappedFile:(id)a0 error:(id *)a1;
- (Class)classForCoder;
- (const void *)bytes;
- (id)initWithBytes:(void *)a0 length:(unsigned long long)a1 copy:(BOOL)a2 deallocator:(id /* block */)a3;
- (id)replacementObjectForPortCoder:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (BOOL)_isDispatchData;
- (id)initWithContentsOfURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (BOOL)_providesConcreteBacking;
- (id)initWithBytes:(const void *)a0 length:(unsigned long long)a1;
- (BOOL)_getBPlistMarker:(char *)a0 offset:(unsigned long long *)a1 trailer:(struct { unsigned char x0[5]; unsigned char x1; unsigned char x2; unsigned char x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; } *)a2;
- (BOOL)_isCompact;
- (id)initWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1;
- (id)_createDispatchData;
- (id)initWithContentsOfFile:(id)a0;
- (id)initWithBase64EncodedData:(id)a0 options:(unsigned long long)a1;
- (id)initWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 deallocator:(id /* block */)a2;
- (id)initWithContentsOfMappedFile:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfData:(id)a0 options:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (BOOL)_copyWillRetain;
- (id)initWithCoder:(id)a0;
- (id)initWithContentsOfFile:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (id)initWithContentsOfFile:(id)a0 error:(id *)a1;
- (unsigned long long)length;
- (void)getBytes:(void *)a0;
- (id)initWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 freeWhenDone:(BOOL)a2;
- (BOOL)isEqual:(id)a0;
- (BOOL)writeToURL:(id)a0 atomically:(BOOL)a1;
- (void)enumerateByteRangesUsingBlock:(id /* block */)a0;
- (id)initWithBase64EncodedString:(id)a0 options:(unsigned long long)a1;
- (BOOL)isNSData__;
- (id)base64EncodedStringWithOptions:(unsigned long long)a0;
- (id)base64EncodedDataWithOptions:(unsigned long long)a0;
- (void)deserializeInts:(int *)a0 count:(unsigned int)a1 atCursor:(unsigned int *)a2;
- (id)_asciiDescription;
- (id)_base64EncodingAsString:(BOOL)a0 withOptions:(unsigned long long)a1;
- (id)_compressedDataUsingCompressionAlgorithm:(int)a0 error:(id *)a1;
- (BOOL)_decodeBase64EncodedCharacterBuffer:(const char *)a0 length:(unsigned long long)a1 options:(unsigned long long)a2 buffer:(char *)a3 bufferLength:(unsigned long long)a4 state:(struct { BOOL x0; BOOL x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned int x5; } *)a5;
- (id)_decompressedDataUsingCompressionAlgorithm:(int)a0 error:(id *)a1;
- (id)_initWithBase64EncodedObject:(id)a0 options:(unsigned long long)a1;
- (void)_produceDataWithCompressionOperation:(int)a0 algorithm:(int)a1 handler:(id /* block */)a2;
- (id)_replaceCString:(const char *)a0 withCString:(const char *)a1;
- (id)_scriptingDebugDescription;
- (id)_scriptingPointDescriptor;
- (id)_scriptingRectangleDescriptor;
- (id)_web_guessedMIMEType;
- (id)_web_guessedMIMETypeForExtension:(id)a0;
- (id)_web_guessedMIMETypeForXML;
- (id)_web_parseRFC822HeaderFields;
- (id)base64Encoding;
- (id)compressedDataUsingAlgorithm:(long long)a0 error:(id *)a1;
- (id)decompressedDataUsingAlgorithm:(long long)a0 error:(id *)a1;
- (unsigned int)deserializeAlignedBytesLengthAtCursor:(unsigned int *)a0;
- (void)deserializeBytes:(void *)a0 length:(unsigned int)a1 atCursor:(unsigned int *)a2;
- (void)deserializeDataAt:(void *)a0 ofObjCType:(const char *)a1 atCursor:(unsigned int *)a2 context:(id)a3;
- (int)deserializeIntAtCursor:(unsigned int *)a0;
- (int)deserializeIntAtIndex:(unsigned int)a0;
- (void)deserializeInts:(int *)a0 count:(unsigned int)a1 atIndex:(unsigned int)a2;
- (id)initWithBase64Encoding:(id)a0;
- (id)initWithContentsOfFile:(id)a0 options:(unsigned long long)a1 maxLength:(unsigned long long)a2 error:(id *)a3;
- (id)initWithContentsOfURL:(id)a0 options:(unsigned long long)a1 maxLength:(unsigned long long)a2 error:(id *)a3;
- (BOOL)writeToFile:(id)a0 atomically:(BOOL)a1 error:(id *)a2;
- (id)CKHexString;
- (id)CKLowercaseHexStringWithoutSpaces;
- (id)CKUppercaseHexStringWithoutSpaces;
- (unsigned int)bs_lengthForMIG;
- (void *)bs_bytesForMIG;
- (void)encodeWithCAMLWriter:(id)a0;
- (id)CAMLType;
- (BOOL)__sfl_isDirectoryBookmark;
- (BOOL)__sfl_isFileBookmark;
- (BOOL)__sfl_matchBookmark:(id)a0 allowWeakMatch:(BOOL)a1;
- (BOOL)__sfl_matchBookmark:(id)a0 requiredMatchResult:(long long)a1;
- (id)__sfl_resolveBookmark;
- (id)__sfl_resolveBookmarkWithOptions:(unsigned long long)a0 relativeToURL:(id)a1;
- (id)__sfl_resourcePropertiesForKeys:(id)a0;
- (id)__sfl_resourcePropertyForKey:(id)a0;
- (id)__sfl_urlWithoutResolving;
- (id)__btm_displayName;
- (BOOL)__btm_isFileBookmark;
- (BOOL)__btm_matchBookmark:(id)a0 requiredMatchResult:(long long)a1;
- (id)__btm_resolveBookmark;
- (id)__btm_resolveBookmarkWithOptions:(unsigned long long)a0 relativeToURL:(id)a1 bookmarkDataIsStale:(BOOL *)a2 error:(id *)a3;
- (id)__btm_resourcePropertiesForKeys:(id)a0;
- (id)__btm_resourcePropertyForKey:(id)a0;
- (id)ak_SHA256Data;
- (id)_OS_xpcObjectRepresentation;
- (BOOL)decodeSequenceData:(id *)a0 data:(id *)a1 error:(id *)a2;
- (BOOL)decodeSequenceString:(id *)a0 data:(id *)a1 error:(id *)a2;
- (id)sha256;
- (id)_pas_dataWithNonnullBytes;
- (id)_pas_revivedString;
- (id)hexString;
- (id)aaf_toHexString;
- (id)aaf_toCompressedData:(int)a0;
- (struct CGImage { } *)aaf_toImageRef;
- (const void *)databaseValue_blobRepresentationWithLength:(unsigned long long *)a0;
- (id)databaseValue_toData;
- (id)databaseValue_toNumber;
- (id)databaseValue_toString;
- (long long)databaseValue_type;
- (BOOL)MI_writeAtomicallyToURL:(id)a0 withMode:(unsigned short)a1 owner:(unsigned int)a2 group:(unsigned int)a3 protectionClass:(int)a4 error:(id *)a5;
- (BOOL)MI_writeAtomicallyToURLMatchingCurrentFileMetadata:(id)a0 error:(id *)a1;
- (BOOL)MI_writeAtomicallyToURL:(id)a0 withMode:(unsigned short)a1 owner:(unsigned int)a2 group:(unsigned int)a3 error:(id *)a4;
- (BOOL)MI_writeAtomicallyToURL:(id)a0 withMode:(unsigned short)a1 owner:(unsigned int)a2 group:(unsigned int)a3 protectionClass:(int)a4 withBarrier:(BOOL)a5 error:(id *)a6;
- (id)asMessageSecurityHexString;

@end
