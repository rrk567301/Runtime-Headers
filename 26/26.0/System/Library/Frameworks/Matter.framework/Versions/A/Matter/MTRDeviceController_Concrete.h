@class MTRAsyncWorkQueue, MTRDeviceControllerFactory, MTRCommissionableBrowser, NSMutableArray, NSObject, MTRDeviceControllerDataStore, MTRDeviceStorageBehaviorConfiguration, NSNumber;
@protocol OS_dispatch_queue, MTRKeypair, MTROTAProviderDelegate;

@interface MTRDeviceController_Concrete : MTRDeviceController {
    struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { _Atomic unsigned char __a_value; } __a_; } _storedFabricIndex;
    struct atomic<std::optional<unsigned long long>> { struct __cxx_atomic_impl<std::optional<unsigned long long>, std::__cxx_atomic_base_impl<std::optional<unsigned long long>>> { _Atomic struct optional<unsigned long long> __a_value; } __a_; } _storedCompressedFabricID;
    struct MTRP256KeypairBridge { void /* function */ **_vptr$ECPKeypair; struct P256PublicKey { void /* function */ **_vptr$ECPKey; unsigned char bytes[65]; } mPublicKey; struct P256KeypairContext { unsigned char mBytes[512]; } mKeypair; BOOL mInitialized; id<MTRKeypair> mKeypair; struct P256PublicKey { void /* function */ **_vptr$ECPKey; unsigned char bytes[65]; } mPubkey; } _signingKeypairBridge;
    struct MTRP256KeypairBridge { void /* function */ **_vptr$ECPKeypair; struct P256PublicKey { void /* function */ **_vptr$ECPKey; unsigned char bytes[65]; } mPublicKey; struct P256KeypairContext { unsigned char mBytes[512]; } mKeypair; BOOL mInitialized; id<MTRKeypair> mKeypair; struct P256PublicKey { void /* function */ **_vptr$ECPKey; unsigned char bytes[65]; } mPubkey; } _operationalKeypairBridge;
    unsigned long long _keepRunningAssertionCounter;
    BOOL _shutdownPending;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _assertionLock;
    NSNumber *_controllerNodeID;
}

@property (readonly, nonatomic) void *cppCommissioner;
@property (readonly, nonatomic) void *partialDACVerifier;
@property (readonly, nonatomic) void *defaultDACVerifier;
@property (readonly, nonatomic) struct MTRDeviceControllerDelegateBridge { void /* function */ **x0; id x1; id x2; id x3; unsigned long long x4; } *deviceControllerDelegateBridge;
@property (readonly, nonatomic) void *operationalCredentialsDelegate;
@property (readonly, nonatomic) void *deviceAttestationDelegateBridge;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *chipWorkQueue;
@property (readonly, nonatomic) MTRDeviceControllerFactory *factory;
@property (readonly, nonatomic) id<MTROTAProviderDelegate> otaProviderDelegate;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *otaProviderDelegateQueue;
@property (readonly, nonatomic) MTRCommissionableBrowser *commissionableBrowser;
@property (readonly, nonatomic) struct MTRAttestationTrustStoreBridge { void /* function */ **x0; id x1; } *attestationTrustStoreBridge;
@property (readonly, nonatomic) NSMutableArray *serverEndpoints;
@property (readonly, nonatomic) MTRDeviceStorageBehaviorConfiguration *storageBehaviorConfiguration;
@property (readonly, nonatomic) BOOL shouldAdvertiseOperational;
@property (readonly) unsigned char fabricIndex;
@property (readonly, nonatomic) MTRAsyncWorkQueue *concurrentSubscriptionPool;
@property (readonly, nonatomic) MTRDeviceControllerDataStore *controllerDataStore;

+ (BOOL)checkForError:(struct ChipError { unsigned int x0; char *x1; unsigned int x2; })a0 logMsg:(id)a1 error:(id *)a2;

- (void)shutdown;
- (void)cleanup;
- (BOOL)isRunning;
- (id)description;
- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)startup:(id)a0;
- (id)controllerNodeID;
- (id)initWithParameters:(id)a0 error:(id *)a1;
- (void)addRunAssertion;
- (BOOL)checkIsRunning:(id *)a0;
- (id)openPairingWindowWithPIN:(unsigned long long)a0 duration:(unsigned long long)a1 discriminator:(unsigned long long)a2 setupPIN:(unsigned long long)a3 error:(id *)a4;
- (void)_controllerResumed;
- (void)_controllerSuspended;
- (id)_setupDeviceForNodeID:(id)a0 prefetchedClusterData:(id)a1;
- (id)accessGrantsForClusterPath:(id)a0;
- (BOOL)addServerEndpoint:(id)a0;
- (void)asyncDispatchToMatterQueue:(id /* block */)a0 errorHandler:(id /* block */)a1;
- (void)asyncGetCommissionerOnMatterQueue:(id /* block */)a0 errorHandler:(id /* block */)a1;
- (id)attestationChallengeForDeviceID:(id)a0;
- (id)baseDeviceForNodeID:(id)a0;
- (BOOL)cancelCommissioningForNodeID:(id)a0 error:(id *)a1;
- (BOOL)checkForInitError:(BOOL)a0 logMsg:(id)a1;
- (BOOL)checkForStartError:(struct ChipError { unsigned int x0; char *x1; unsigned int x2; })a0 logMsg:(id)a1;
- (BOOL)checkIsRunning;
- (void)cleanupAfterStartup;
- (void)clearDeviceAttestationDelegateBridge;
- (void)clearPendingShutdown;
- (BOOL)commissionNodeWithID:(id)a0 commissioningParams:(id)a1 error:(id *)a2;
- (id)compressedFabricID;
- (BOOL)continueCommissioningDevice:(void *)a0 ignoreAttestationFailure:(BOOL)a1 error:(id *)a2;
- (BOOL)definitelyUsesThreadForDevice:(unsigned long long)a0;
- (void)deinitFromFactory;
- (id)deviceBeingCommissionedWithNodeID:(id)a0 error:(id *)a1;
- (void)directlyGetSessionForNode:(unsigned long long)a0 completion:(id /* block */)a1;
- (void)downloadLogFromNodeWithID:(id)a0 type:(long long)a1 timeout:(double)a2 queue:(id)a3 completion:(id /* block */)a4;
- (id)fetchAttestationChallengeForDeviceId:(unsigned long long)a0;
- (void)finalShutdown;
- (void)forgetDeviceWithNodeID:(id)a0;
- (BOOL)getBaseDevice:(unsigned long long)a0 queue:(id)a1 completionHandler:(id /* block */)a2;
- (void)getSessionForCommissioneeDevice:(unsigned long long)a0 completion:(id /* block */)a1;
- (void)getSessionForNode:(unsigned long long)a0 completion:(id /* block */)a1;
- (id)initWithFactory:(id)a0 queue:(id)a1 storageDelegate:(id)a2 storageDelegateQueue:(id)a3 otaProviderDelegate:(id)a4 otaProviderDelegateQueue:(id)a5 uniqueIdentifier:(id)a6 concurrentSubscriptionPoolSize:(unsigned long long)a7 storageBehaviorConfiguration:(id)a8 startSuspended:(BOOL)a9;
- (void)invalidateCASESessionForNode:(id)a0;
- (struct ChipError { unsigned int x0; char *x1; unsigned int x2; })isRunningOnFabric:(void *)a0 fabricIndex:(unsigned char)a1 isRunning:(BOOL *)a2;
- (BOOL)matchesPendingShutdownControllerWithOperationalCertificate:(id)a0 andRootCertificate:(id)a1;
- (id)neededReadPrivilegeForClusterID:(id)a0 attributeID:(id)a1;
- (id)nodesWithStoredData;
- (BOOL)openPairingWindow:(unsigned long long)a0 duration:(unsigned long long)a1 error:(id *)a2;
- (void)operationalInstanceAdded:(id)a0;
- (BOOL)pairDevice:(unsigned long long)a0 address:(id)a1 port:(unsigned short)a2 setupPINCode:(unsigned int)a3 error:(id *)a4;
- (BOOL)pairDevice:(unsigned long long)a0 discriminator:(unsigned short)a1 setupPINCode:(unsigned int)a2 error:(id *)a3;
- (BOOL)pairDevice:(unsigned long long)a0 onboardingPayload:(id)a1 error:(id *)a2;
- (void)preWarmCommissioningSession;
- (void)removeRunAssertion;
- (void)removeServerEndpointInternal:(id)a0 queue:(id)a1 completion:(id /* block */)a2;
- (void)removeServerEndpointOnMatterQueue:(id)a0;
- (unsigned char)sessionTransportTypeForDevice:(id)a0;
- (void)setNocChainIssuer:(id)a0 queue:(id)a1;
- (BOOL)setOperationalCertificateIssuer:(id)a0 queue:(id)a1;
- (void)setPairingDelegate:(id)a0 queue:(id)a1;
- (BOOL)setupCommissioningSessionWithDiscoveredDevice:(id)a0 payload:(id)a1 newNodeID:(id)a2 error:(id *)a3;
- (BOOL)setupCommissioningSessionWithPayload:(id)a0 newNodeID:(id)a1 error:(id *)a2;
- (void)shutDownCppController;
- (BOOL)startBrowseForCommissionables:(id)a0 queue:(id)a1;
- (BOOL)stopBrowseForCommissionables;
- (void)syncRunOnWorkQueue:(id /* block */)a0 error:(id *)a1;
- (BOOL)syncRunOnWorkQueueWithBoolReturnValue:(id /* block */)a0 error:(id *)a1;
- (id)syncRunOnWorkQueueWithReturnValue:(id /* block */)a0 error:(id *)a1;

@end
