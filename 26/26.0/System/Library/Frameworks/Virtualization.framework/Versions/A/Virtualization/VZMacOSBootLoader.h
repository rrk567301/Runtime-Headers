@class NSURL;

@interface VZMacOSBootLoader : VZBootLoader {
    NSURL *_romURL;
}

@property (copy, setter=_setROMURL:) NSURL *_romURL;

- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (void).cxx_destruct;
- (struct expected<std::variant<VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Coprocessor, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO>, NSError *> { struct __conditional_no_unique_address<true, std::__expected_base<std::variant<VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Coprocessor, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO>, NSError *>::__repr> { struct __repr { struct __conditional_no_unique_address<false, std::__expected_base<std::variant<VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Coprocessor, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO>, NSError *>::__union_t> { union __union_t { struct variant<VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Coprocessor, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { struct __impl<VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Coprocessor, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { union __union<std::__variant_detail::_Trait::_Available, 0UL, VzCore::VirtualMachineConfiguration::BootLoaders::Binary, VzCore::VirtualMachineConfiguration::BootLoaders::Coprocessor, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { char x0; struct __alt<0UL, VzCore::VirtualMachineConfiguration::BootLoaders::Binary> { struct Binary { struct vector<VzCore::VirtualMachineConfiguration::BootLoaders::Binary::Segment, std::allocator<VzCore::VirtualMachineConfiguration::BootLoaders::Binary::Segment>> { struct Segment *x0; struct Segment *x1; struct Segment *x2; } x0; unsigned long long x1; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 1UL, VzCore::VirtualMachineConfiguration::BootLoaders::Coprocessor, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { char x0; struct __alt<1UL, VzCore::VirtualMachineConfiguration::BootLoaders::Coprocessor> { struct Coprocessor { struct variant<VzCore::Booting::AvpBooter::Version, Base::FileDescriptor> { struct __impl<VzCore::Booting::AvpBooter::Version, Base::FileDescriptor> { union __union<std::__variant_detail::_Trait::_Available, 0UL, VzCore::Booting::AvpBooter::Version, Base::FileDescriptor> { char x0; struct __alt<0UL, VzCore::Booting::AvpBooter::Version> { int x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 1UL, Base::FileDescriptor> { char x0; struct __alt<1UL, Base::FileDescriptor> { struct FileDescriptor { int x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 2UL> { } x2; } x2; } x0; unsigned int x1; } x0; } x0; struct optional<unsigned long long> { union { char x0; unsigned long long x1; } x0; BOOL x1; } x1; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 2UL, VzCore::VirtualMachineConfiguration::BootLoaders::Efi, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { char x0; struct __alt<2UL, VzCore::VirtualMachineConfiguration::BootLoaders::Efi> { struct Efi { struct optional<Base::FileDescriptor> { union { char x0; struct FileDescriptor { int x0; } x1; } x0; BOOL x1; } x0; struct VariableStore { struct shared_ptr<Base::VirtualMemory::Handle> { struct Handle *x0; struct __shared_weak_count *x1; } x0; } x1; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 3UL, VzCore::VirtualMachineConfiguration::BootLoaders::Linux, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { char x0; struct __alt<3UL, VzCore::VirtualMachineConfiguration::BootLoaders::Linux> { struct Linux { struct FileDescriptor { int x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { union __rep { struct __short { char x0[23]; unsigned char x1 : 7; unsigned char x2 : 1; } x0; struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x1; } x0; } x1; struct FileDescriptor { int x0; } x2; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 4UL, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { char x0; struct __alt<4UL, VzCore::VirtualMachineConfiguration::BootLoaders::MacOs> { struct MacOs { struct variant<VzCore::Booting::AvpBooter::Version, Base::FileDescriptor> { struct __impl<VzCore::Booting::AvpBooter::Version, Base::FileDescriptor> { union __union<std::__variant_detail::_Trait::_Available, 0UL, VzCore::Booting::AvpBooter::Version, Base::FileDescriptor> { char x0; struct __alt<0UL, VzCore::Booting::AvpBooter::Version> { int x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 1UL, Base::FileDescriptor> { char x0; struct __alt<1UL, Base::FileDescriptor> { struct FileDescriptor { int x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 2UL> { } x2; } x2; } x0; unsigned int x1; } x0; } x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 5UL, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { char x0; struct __alt<5UL, VzCore::VirtualMachineConfiguration::BootLoaders::MachO> { struct MachO { struct FileDescriptor { int x0; } x0; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 6UL> { } x2; } x2; } x2; } x2; } x2; } x2; } x0; unsigned int x1; } x0; } x0; id x1; } x0; } x0; BOOL x1; } x0; } x0; })_bootLoaderForConfiguration:(id)a0;
- (struct expected<NSDictionary *, NSError *> { struct __conditional_no_unique_address<true, std::__expected_base<NSDictionary *, NSError *>::__repr> { struct __repr { struct __conditional_no_unique_address<false, std::__expected_base<NSDictionary *, NSError *>::__union_t> { union __union_t { id x0; id x1; } x0; } x0; BOOL x1; } x0; } x0; })encodeWithEncoder:(id)a0;

@end
