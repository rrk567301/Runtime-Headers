@class IKKnobLayer, NSString, NSScrollView, NSURL, CALayer, NSDictionary, IKComposer, NSClipView, IKImageView, CAKeyframeAnimation;

@interface IKImageLayer : CATiledLayer {
    NSURL *_url;
    struct CGImage { } *_cgImageRef;
    struct CGSize { double width; double height; } _cachedImageSize;
    struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } _cachedCTM;
    struct CGImageSource { } *_isr;
    NSDictionary *_imageProperties;
    BOOL _animateTransition;
    CALayer *_backgroundLayer;
    IKComposer *_composer;
    unsigned long long _imageIndex;
    struct CGSize { double width; double height; } _dpi;
    CAKeyframeAnimation *_gifAnimation;
    NSScrollView *_ikScrollView;
    NSClipView *_ikClipView;
    IKImageView *_ikImageView;
    IKKnobLayer *_ikKnobLayer;
    struct CGPoint { double x; double y; } _eventMouseDownLocation;
    BOOL _closingDown;
    BOOL _supportsSubsampling;
    BOOL _handlingBoundsChanged;
    BOOL _waitingForResetAnchorPoint;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _startBoundsRect;
    struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } _imageTransform;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _imageLayerLock;
}

@property (nonatomic) double imageScalingX;
@property (nonatomic) double imageScalingY;
@property struct CGPoint { double x; double y; } imageScalingUserScaled;
@property double imageRotation;
@property (readonly, nonatomic) double userSpaceScaleFactor;
@property BOOL canAnimateImage;
@property BOOL isAnimatingImage;
@property BOOL isBadImage;
@property struct CGSize { double width; double height; } originalImageSize;
@property int orientationTag;
@property BOOL nonSquarePixels;
@property double nonSquareHeightFactor;
@property double nonSquareWidthFactor;
@property BOOL userDefaultsOverwriteMagnificationFilter;
@property BOOL userDefaultsOverwriteMinificationFilter;
@property (copy) NSString *magnificationFilterName;
@property (copy) NSString *minificationFilterName;
@property (readonly) struct CGImage { } *cachedImage;

+ (double)fadeDuration;
+ (BOOL)registerLayerWithView:(id)a0;

- (void)finalize;
- (void)zoomOut:(id)a0;
- (void)cleanup;
- (void)animateTransition:(id)a0;
- (void)renderInContext:(struct CGContext { } *)a0;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)dealloc;
- (void)invalidate;
- (id)imageProperties;
- (void)drawInContext:(struct CGContext { } *)a0;
- (double)scalingFactor;
- (id)init;
- (void)zoomIn:(id)a0;
- (void)setPosition:(struct CGPoint { double x0; double x1; })a0;
- (void)setRotation:(id)a0;
- (void)setAnchorPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGImage { } *)cgImage;
- (BOOL)animates;
- (void)scrollToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setAnimates:(BOOL)a0;
- (void)setKnobLayer:(id)a0;
- (double)rotationAngle;
- (void)setRotationAngle:(double)a0;
- (void)scrollToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)saveState:(id)a0;
- (void)rotateImageLeft:(id)a0;
- (void)rotateImageRight:(id)a0;
- (id)ciImage;
- (struct CGSize { double x0; double x1; })nonAutorotatedOriginalImageSize;
- (void)resetTransforms;
- (void)zoomActualSize:(id)a0;
- (void)ikMouseDragged:(id)a0;
- (void)setImageZoomFactor:(double)a0 centerPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)zoomImageToFit:(id)a0;
- (void)_updateLayer:(id)a0;
- (void)autoResizeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 allowZoomIn:(BOOL)a1;
- (BOOL)badImage;
- (void)centerImage;
- (void)clipViewBoundsChanged:(id)a0;
- (void)closingDown;
- (struct CGImage { } *)createSquarePixelCopy:(struct CGImage { } *)a0 width:(unsigned long long)a1 height:(unsigned long long)a2;
- (void)createThumbnailWidth:(int)a0 height:(int)a1 level:(int)a2;
- (void)doSetImage:(struct CGImage { } *)a0 imageProperties:(id)a1 imageState:(id)a2 options:(id)a3;
- (void)doSetImageWithState:(id)a0 options:(id)a1;
- (void)drawCachedImageInContext:(struct CGContext { } *)a0;
- (void)dumpCTM:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (void)dumpGeometry:(id)a0;
- (void)flipImageHorizontal:(id)a0;
- (void)flipImageVertical:(id)a0;
- (id)getMagnificationFilter;
- (id)getMinificationFilter;
- (void)ikLayerWasAddedToSuperlayer;
- (void)ikMouseDown:(id)a0;
- (void)ikMouseUp:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })imageTransform;
- (void)invalidateCachedCTM;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })limitRect;
- (id)optionsForCGImageSourceCreateImageAtIndex;
- (void)releaseCGImage;
- (void)renderWithRotationsInContext:(struct CGContext { } *)a0 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)replaceImage:(struct CGImage { } *)a0 imageProperties:(id)a1 imageState:(id)a2;
- (void)resetAnchorPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })rotationTransform;
- (void)setAnchorPointAndKeepFrame:(struct CGPoint { double x0; double x1; })a0;
- (void)setImage:(struct CGImage { } *)a0 imageProperties:(id)a1 imageState:(id)a2 options:(id)a3;
- (void)setImageWithURL:(id)a0 imageState:(id)a1 options:(id)a2;
- (void)setRotationAngle:(double)a0 centerPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)setScalingFactorX:(double)a0 factorY:(double)a1;
- (void)setScalingFactorX:(double)a0 factorY:(double)a1 visibleCenter:(struct CGPoint { double x0; double x1; })a2;
- (void)setVisibleCenterPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setup:(id)a0;
- (BOOL)shouldCacheFullSizeImage;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformForOrientationAndDPI;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformForOrientationAndDPIWithScaledTranslation;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformForOrientationAndDPIWithTranslation;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformForOrientationAndDPIWithTranslationForWidth:(float)a0 height:(float)a1;
- (struct CGSize { double x0; double x1; })transformedOriginalImageSize;
- (struct CGSize { double x0; double x1; })transformedScaledImageSize;
- (void)updateClipViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forVisibleCenter:(struct CGPoint { double x0; double x1; })a1;
- (void)updateImageLayer;
- (void)updateOrientationTag:(int)a0 animate:(BOOL)a1 reCenter:(BOOL)a2;
- (struct CGPoint { double x0; double x1; })visibleCenterPoint;
- (void)zoomImageToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;

@end
