@class NSString, NSURL, IKImageCorrectionHandler, IKScanInfo, ICScannerFunctionalUnit, NSMutableDictionary, IKScanUIController, NSMutableSet, ICScannerDevice;

@interface IKScan : NSObject <NSCopying> {
    ICScannerDevice *_scannerDevice;
    ICScannerFunctionalUnit *_functionalUnit;
    unsigned char _thresholdForBlackAndWhiteScanning;
    unsigned long long _userRequestedOverviewResolution;
    NSURL *_postProcessingApp;
    unsigned long long _currentScanType;
    NSMutableDictionary *_metaData;
    long long _numberOfSelections;
    long long _currentSelectionIndex;
    BOOL _transferModeMemoryBased;
    BOOL _scanFailed;
    int _currentScanIndex;
    BOOL _scanInProgress;
    BOOL _overviewScanInProgress;
}

@property (nonatomic) IKScanUIController *delegate;
@property (copy, nonatomic) NSString *documentName;
@property (copy, nonatomic) NSString *documentDisplayName;
@property (copy) NSString *lastDocumentName;
@property (copy) NSString *userSpecifiedDocumentName;
@property (copy, nonatomic) NSURL *documentLocation;
@property (copy) NSURL *lastDocumentLocation;
@property (copy) NSString *fileFormat;
@property unsigned long long pixelDataType;
@property unsigned long long bitDepth;
@property unsigned long long measurementUnit;
@property unsigned long long resolution;
@property unsigned long long scaleFactor;
@property BOOL useScanRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } scanRect;
@property struct CGPoint { double x; double y; } inchPosition;
@property unsigned long long scanRectOrientation;
@property unsigned long long documentType;
@property unsigned long long flatbedOrientation;
@property BOOL duplexScanningEnabled;
@property unsigned long long oddPageOrientation;
@property unsigned long long evenPageOrientation;
@property long long autoSelection;
@property double rotationAngle;
@property IKImageCorrectionHandler *imageCorrectionHandler;
@property (nonatomic) BOOL createSingleDocument;
@property (copy) NSURL *scannedImageURL;
@property (copy, nonatomic) NSURL *finalDestURL;
@property (retain) NSMutableSet *completedScans;
@property (nonatomic) double scanPercentDone;
@property long long state;
@property BOOL scanToTempDirectory;
@property BOOL scanComplete;
@property BOOL scanIsICARawScan;
@property (readonly) unsigned long long overviewResolution;
@property struct CGSize { double width; double height; } selectionSize;
@property struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } scanRectNonClipped;
@property (retain) IKScanInfo *scanInfo;
@property BOOL selfTestRunning;
@property BOOL reviewSimpleScanResults;
@property (nonatomic) BOOL createSingleDocumentReChecked;
@property long long scannerReportedError;
@property BOOL needsSpecialOrientationHandling;
@property BOOL performOCR;

+ (struct CGImage { } *)copy1BitImageFromCGContext:(struct CGContext { } *)a0 inputImage:(struct CGImage { } *)a1;

- (void)reset;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (void)wdCompleteScan:(id)a0;
- (void)CGImageSaveToFile:(struct CGImage { } *)a0 name:(const char *)a1;
- (unsigned long long)freeSpaceAtURL:(id)a0;
- (void)addImage:(struct CGImage { } *)a0 toPDFURL:(id)a1 orientation:(int)a2 useImageBounds:(BOOL)a3;
- (void)appendImage:(struct CGImage { } *)a0 toImageURL:(id)a1 orientation:(int)a2;
- (void)appendURL:(id)a0 toImageURL:(id)a1;
- (void)applyImageCorrection:(struct CGImage { } *)a0 url:(id)a1 completion:(id /* block */)a2;
- (void)autoScansNextPage;
- (BOOL)canAppend:(id)a0;
- (struct CGImage { } *)copyCGImageFromImageURL;
- (struct CGImage { } *)copyCGImageFromRawScanData:(id)a0;
- (struct CGImage { } *)copyCGImageFromRawScanURL;
- (struct CGImage { } *)copyCGImageFromURL;
- (struct __CFData { } *)copyImageData:(struct CGImage { } *)a0 resolution:(unsigned long long)a1 format:(struct __CFString { } *)a2;
- (struct __CFData { } *)copyJPEGData:(struct CGImage { } *)a0 resolution:(unsigned long long)a1;
- (struct CGImage { } *)copySizeOptimizedImage:(struct CGImage { } *)a0;
- (void)deleteTempFileForURL:(id)a0;
- (void)device:(id)a0 didEncounterError:(id)a1;
- (void)device:(id)a0 didReceiveStatusInformation:(id)a1;
- (void)doPostProcessing:(id)a0;
- (void)doneWithScan:(id)a0;
- (void)dumpVendorFeatures;
- (void)errorAlertDidEnd:(id)a0 returnCode:(long long)a1 contextInfo:(void *)a2;
- (void)handleCGImageDestinationFinalize:(BOOL)a0 url:(id)a1 format:(id)a2;
- (id)imagePropertiesForAppending:(struct CGImage { } *)a0;
- (void)overviewTimedOut;
- (void)postError:(long long)a0;
- (void)prepareForNumberOfSelections:(long long)a0;
- (void)resetOverviewTimer;
- (void)resetScanTimer;
- (void)rotateAndCrop:(struct CGImage { } *)a0 url:(id)a1 completion:(id /* block */)a2;
- (int)rotationFromOrientation:(int)a0 dict:(id)a1;
- (id)saveImage:(struct CGImage { } *)a0 toDownloadURL:(id)a1 documentName:(id)a2 imageType:(id)a3 optimize:(BOOL)a4;
- (void)saveToFinalDestination:(struct CGImage { } *)a0 url:(id)a1;
- (BOOL)scanNextSelection;
- (void)scanTimedOut;
- (void)scannerDevice:(id)a0 didCompleteOverviewScanWithError:(id)a1;
- (void)scannerDevice:(id)a0 didCompleteScanWithError:(id)a1;
- (void)scannerDevice:(id)a0 didScanToURL:(id)a1 newStyle:(BOOL)a2;
- (double)screenDPI;
- (BOOL)startOverviewScan:(id)a0;
- (BOOL)startScan:(id)a0;
- (id)tempScanDir;
- (id)tiffDataFromScanData:(id)a0;
- (void)updateFunctionalUnit:(id)a0;
- (void)updatePercentDone;
- (void)wdCompleteOverviewScan:(id)a0;
- (void)wdStartOverviewScan:(id)a0;
- (void)wdStartScan:(id)a0;
- (void)wdUpdateOverviewScan:(id)a0 percentDone:(double)a1;
- (void)wdUpdatePercentDone:(double)a0;
- (void)wdUpdateScan:(id)a0 percentDone:(double)a1;
- (void)writeImage:(struct CGImage { } *)a0 toImageURL:(id)a1 orientation:(int)a2;

@end
