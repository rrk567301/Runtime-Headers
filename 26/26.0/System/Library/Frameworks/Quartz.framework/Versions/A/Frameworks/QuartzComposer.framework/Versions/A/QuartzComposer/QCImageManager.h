@class GFList, NSMutableDictionary, NSDictionary, QCResourcePool, QCCGLContext;
@protocol QCCache;

@interface QCImageManager : NSObject {
    NSDictionary *_options;
    QCCGLContext *_context;
    NSMutableDictionary *_userInfo;
    struct __CFBag { } *_clients;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _managerMutex;
    QCResourcePool *_pixelBufferPool;
    QCResourcePool *_textureBufferPool;
    QCResourcePool *_texturePool;
    id<QCCache> _providerImageCache;
    id<QCCache> _representationCache;
    id<QCCache> _conversionCache;
    id<QCCache> _sequenceCache;
    id<QCCache> _imageCache;
    double _ageConfidence;
    double _requestedRAM;
    double _maximumAvailableRAM;
    double _requestedVRAM[8];
    double _maximumAvailableVRAM[8];
    long long _rendererID[8];
    double _reclaimResourcesTimestamp;
    double _GCReclaimResourcesTimestamp;
    GFList *_converterCache;
    unsigned long long _converterCacheTimestamp;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _converterCacheMutex;
    NSMutableDictionary *_exporterClassCache;
    NSMutableDictionary *_exporterTypeCache;
    unsigned long long _exporterCacheTimestamp;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _exporterCacheMutex;
    NSMutableDictionary *_convertersList;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _convertersListMutex;
    struct _opaque_pthread_cond_t { long long __sig; char __opaque[40]; } _convertersListCondition;
    NSMutableDictionary *_exportersList;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _exportersListMutex;
    struct _opaque_pthread_cond_t { long long __sig; char __opaque[40]; } _exportersListCondition;
    void *_cvTextureCache;
    struct _QCCacheProfileInfo { unsigned long long x0; unsigned long long x1; } *_cacheProfileInfo;
    void *_unused[1];
}

+ (void)initialize;
+ (id)unregisterBufferConverterClass:(Class)a0;
+ (double)_maximumAvailableMemoryForRendererID:(long long)a0;
+ (id)createUniqueImageManagerForQCCGLContext:(id)a0 options:(id)a1;
+ (id)imageBufferConverterClasses;
+ (float)priorityForBufferConverterClass:(Class)a0;
+ (void)registerImageBufferConverterClass:(Class)a0 priority:(float)a1;
+ (id)sharedSoftwareImageManager;

- (void)finalize;
- (void)dealloc;
- (id)options;
- (id)registeredClients;
- (void)unregisterClient:(id)a0;
- (id)description;
- (void)purgeResources;
- (void)registerClient:(id)a0;
- (id)userInfo;
- (id)openGLContext;
- (void)reclaimResources;
- (struct __CVOpenGLTextureCache { } *)CVOpenGLTextureCache;
- (id)createTextureBufferFromImageBuffer:(id)a0 target:(unsigned int)a1 sourceBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 options:(id)a3;
- (struct _QCCacheProfileInfo { unsigned long long x0; unsigned long long x1; } *)_cacheProfileInfo;
- (struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } *)_convertersListMutex;
- (id)_createImageBufferFromImageBuffer:(id)a0 withFormat:(id)a1 target:(unsigned int)a2 transformation:(id)a3 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 colorSpace:(struct CGColorSpace { } *)a5 options:(id)a6;
- (id)_createTextureBufferFromImageBuffer:(id)a0 target:(unsigned int)a1 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 needsClipping:(BOOL)a3 flippedState:(long long)a4 options:(id)a5;
- (id)QCCGLContext;
- (id)_convertersList;
- (BOOL)_computeImageBufferParametersForProvider:(id)a0 withFormat:(id)a1 target:(unsigned int)a2 colorSpace:(struct CGColorSpace { } *)a3 outSrcFormat:(id *)a4 outSrcTarget:(unsigned int *)a5 outSrcColorSpace:(struct CGColorSpace **)a6 outDstFormat:(id *)a7 outDstTarget:(unsigned int *)a8 outDstColorSpace:(struct CGColorSpace **)a9 relaxedFormat:(BOOL)a10 softwareOnly:(BOOL)a11;
- (struct _opaque_pthread_cond_t { long long x0; char x1[40]; } *)_convertersListCondition;
- (id)_createImageBufferFromProvider:(id)a0 withFormat:(id)a1 target:(unsigned int)a2 transformation:(id)a3 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 colorSpace:(struct CGColorSpace { } *)a5 options:(id)a6;
- (id)_createPixelBufferFromImageBuffer:(id)a0 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 needsClipping:(BOOL)a2 flippedState:(long long)a3 options:(id)a4;
- (id)userInfoForKey:(id)a0;
- (void)_finalize_QCImageManager;
- (void)_setProfileCache:(BOOL)a0;
- (id)ageStatisticsForIndex:(unsigned long long)a0;
- (double)availableMemoryForRequestedMemory:(double)a0 ofType:(int)a1 virtualScreen:(unsigned long long)a2;
- (id)copyPixelBufferFromImageBuffer:(id)a0 sourceBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 options:(id)a2;
- (BOOL)copyPixelsFromImage:(id)a0 toBaseAddress:(void *)a1 withBytesPerRow:(unsigned int)a2;
- (id)createFlattenedImage:(id)a0 withFormat:(id)a1 colorSpace:(struct CGColorSpace { } *)a2 options:(id)a3;
- (id)createImageWithSource:(id)a0 options:(id)a1;
- (id)createPixelBufferFromImageBuffer:(id)a0 sourceBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 options:(id)a2;
- (id)createPixelBufferFromImageBuffer:(id)a0 withFormat:(id)a1 transformation:(id)a2 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 colorSpace:(struct CGColorSpace { } *)a4 options:(id)a5;
- (id)createPixelBufferFromPixelBuffer:(id)a0 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 flip:(BOOL)a2 options:(id)a3;
- (id)createPixelBufferFromProvider:(id)a0 withFormat:(id)a1 transformation:(id)a2 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 colorSpace:(struct CGColorSpace { } *)a4 options:(id)a5;
- (id)createPixelBufferFromTextureBuffer:(id)a0 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 options:(id)a2;
- (id)createPixelBufferWithFormat:(id)a0 pixelsWide:(unsigned long long)a1 pixelsHigh:(unsigned long long)a2 options:(id)a3;
- (id)createRepresentationFromProvider:(id)a0 ofType:(id)a1 withOptions:(id)a2;
- (id)createSurfaceBufferFromPixelBuffer:(id)a0 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 flip:(BOOL)a2 options:(id)a3;
- (id)createSurfaceBufferFromProvider:(id)a0 withFormat:(id)a1 transformation:(id)a2 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 colorSpace:(struct CGColorSpace { } *)a4 options:(id)a5;
- (id)createSurfaceBufferFromTextureBuffer:(id)a0 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 options:(id)a2;
- (id)createSurfaceBufferWithFormat:(id)a0 pixelsWide:(unsigned long long)a1 pixelsHigh:(unsigned long long)a2 options:(id)a3;
- (id)createTextureBufferFromImageBuffer:(id)a0 withFormat:(id)a1 target:(unsigned int)a2 transformation:(id)a3 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 colorSpace:(struct CGColorSpace { } *)a5 options:(id)a6;
- (id)createTextureBufferFromPixelBuffer:(id)a0 target:(unsigned int)a1 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 options:(id)a3;
- (id)createTextureBufferFromProvider:(id)a0 withFormat:(id)a1 target:(unsigned int)a2 transformation:(id)a3 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 colorSpace:(struct CGColorSpace { } *)a5 options:(id)a6;
- (id)createTextureBufferFromTextureBuffer:(id)a0 target:(unsigned int)a1 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 flip:(BOOL)a3 options:(id)a4;
- (id)createTextureBufferWithFormat:(id)a0 target:(unsigned int)a1 pixelsWide:(unsigned long long)a2 pixelsHigh:(unsigned long long)a3 options:(id)a4;
- (id)initWithOpenGLContext:(id)a0 options:(id)a1;
- (id)initWithQCCGLContext:(id)a0 options:(id)a1;
- (id)listResources;
- (id)openGLContextForCurrentThread;
- (void)optimizeCaches;
- (id)performanceCountersForVirtualScreen:(unsigned long long)a0 purgeable:(BOOL)a1;
- (void)setUserInfo:(id)a0 forKey:(id)a1;

@end
