@class NSPanGestureRecognizer, NSClickGestureRecognizer, _MKDirectionalArrowRecognizer, MKCompassView, _MKRotationGestureRecognizer, _MKDirectionalPanGestureRecognizer, NSObject, _MKMouseDownGestureRecognizer, NSString, VKCompoundAnimation, _MKMagnificationGestureRecognizer, VKTimedAnimation, MKRotationFilter, MKMapView, MKScaleView;
@protocol OS_dispatch_source, MKMapGestureControllerDelegate;

@interface MKMapGestureController : NSObject <NSGestureRecognizerDelegate> {
    MKMapView *_mapView;
    _MKMouseDownGestureRecognizer *_mouseDownGestureRecognizer;
    NSPanGestureRecognizer *_panGestureRecognizer;
    _MKDirectionalPanGestureRecognizer *_panRotationGestureRecognizer;
    _MKDirectionalPanGestureRecognizer *_panTiltGestureRecognizer;
    _MKDirectionalPanGestureRecognizer *_panZoomGestureRecognizer;
    _MKDirectionalPanGestureRecognizer *_otherButtonPanRotationGestureRecognizer;
    _MKDirectionalPanGestureRecognizer *_otherButtonPanTiltGestureRecognizer;
    _MKMagnificationGestureRecognizer *_pinchGestureRecognizer;
    _MKRotationGestureRecognizer *_rotationGestureRecognizer;
    _MKDirectionalPanGestureRecognizer *_scaleDragGestureRecognizer;
    _MKDirectionalPanGestureRecognizer *_compassDragRotationGestureRecognizer;
    _MKDirectionalPanGestureRecognizer *_compassDragTiltGestureRecognizer;
    _MKDirectionalPanGestureRecognizer *_compassDragSimultaneousRotationGestureRecognizer;
    BOOL _compassRotateBeganInPositiveDirection;
    _MKDirectionalArrowRecognizer *_arrowPanGestureRecognizer;
    _MKDirectionalArrowRecognizer *_arrowRotateGestureRecognizer;
    _MKDirectionalArrowRecognizer *_arrowZoomGestureRecognizer;
    _MKDirectionalArrowRecognizer *_activeArrowGestureRecognizer;
    VKTimedAnimation *_currentArrowAnimation;
    BOOL _isFullRotatingFromArrows;
    long long _gestureCount;
    double _lastScale;
    double _lastMagnification;
    double _lastRotation;
    double _pinchFactorAverageInGesture;
    double _lastPinchUpdateTimestamp;
    double _lastRotationInGestureDelta;
    double _lastRotationUpdateTimestamp;
    double _lastRotationVelocity;
    struct CGPoint { double x; double y; } _rotationDragStartPoint;
    struct CGPoint { double x; double y; } _rotationDragCursorStartPoint;
    struct CGPoint { double x; double y; } _tiltDragStartPoint;
    struct CGPoint { double x; double y; } _tiltDragCursorStartPoint;
    struct CGPoint { double x; double y; } _zoomDragStartPoint;
    struct CGPoint { double x; double y; } _zoomDragCursorStartPoint;
    double _lastZoomDragTranslation;
    BOOL _panning;
    BOOL _pinching;
    BOOL _rotating;
    BOOL _dragRotating;
    BOOL _dragTilting;
    BOOL _dragZooming;
    struct CGPoint { double x; double y; } _scrollTranslation;
    BOOL _isScrollDecelerating;
    NSObject<OS_dispatch_source> *_scrollMomentumTimer;
    long long _scrollBehavior;
    struct CGPoint { double x; double y; } _lastArrowScrollTranslationDelta;
    double _arrowZoomSpeed;
    double _arrowZoomStartTimestamp;
    VKCompoundAnimation *_panDecelerationAnimationGroup;
    VKTimedAnimation *_pinchDecelerationAnimation;
    VKTimedAnimation *_rotationDecelerationAnimation;
    BOOL _handlingTrackpadScroll;
}

@property (retain, nonatomic) MKScaleView *scaleView;
@property (retain, nonatomic) MKCompassView *compassView;
@property (weak, nonatomic) id<MKMapGestureControllerDelegate> delegate;
@property (retain, nonatomic) MKRotationFilter *rotationFilter;
@property (nonatomic, getter=isRotationSnappingEnabled) BOOL rotationSnappingEnabled;
@property (nonatomic, getter=isZoomEnabled) BOOL zoomEnabled;
@property (nonatomic, getter=isScrollEnabled) BOOL scrollEnabled;
@property (nonatomic, getter=isRotationEnabled) BOOL rotationEnabled;
@property (nonatomic, getter=isTiltEnabled) BOOL tiltEnabled;
@property (readonly, nonatomic) NSClickGestureRecognizer *doubleClickGestureRecognizer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)zoomOut:(id)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (BOOL)keyDown:(id)a0;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldRequireFailureOfGestureRecognizer:(id)a1;
- (void)zoomIn:(id)a0;
- (void).cxx_destruct;
- (BOOL)_gestureRecognizer:(id)a0 shouldAttemptToRecognizeWithEvent:(id)a1;
- (void)flagsChanged:(id)a0;
- (BOOL)keyUp:(id)a0;
- (void)magnifyWithEvent:(id)a0;
- (void)rotateWithEvent:(id)a0;
- (void)scrollWithEvent:(id)a0;
- (void)smartMagnifyWithEvent:(id)a0;
- (void)handleRotation:(id)a0;
- (void)handleArrowPan:(id)a0;
- (void)_endCurrentScrollBehaviorWithLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_handleMouseDown:(id)a0;
- (void)_handleStandardPan:(id)a0;
- (void)_setupMomentumTimerWithLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_tearDownMomentumTimer;
- (void)beginGesturing;
- (void)cancelZoomInOrOut;
- (void)endGesturing;
- (void)handleArrowRotate:(id)a0;
- (void)handleArrowZoom:(id)a0;
- (void)handleDoubleClick:(id)a0;
- (void)handlePinch:(id)a0;
- (void)handleRotationPan:(id)a0;
- (void)handleScrollArrowMask:(long long)a0;
- (void)handleTiltPan:(id)a0;
- (void)handleZoomArrowMask:(long long)a0 speed:(double)a1;
- (void)handleZoomPan:(id)a0;
- (id)initWithMapView:(id)a0 gestureTargetView:(id)a1;
- (void)stopDynamicAnimations;

@end
