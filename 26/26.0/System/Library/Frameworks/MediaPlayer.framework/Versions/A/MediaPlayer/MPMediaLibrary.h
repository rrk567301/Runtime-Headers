@class NSURL, NSMutableDictionary, NSDate, ICUserIdentity, NSObject, MPMediaLibraryPrivacyContext, NSMutableArray, NSString, _MPActiveUserChangeMonitor, NSPointerArray, NSArray, ITLibrary, QueryCriteriaResultsCache;
@protocol OS_dispatch_queue, MPMediaLibraryDataProviderPrivate;

@interface MPMediaLibrary : NSObject <_MPActiveUserChangeMonitorDelegate, NSSecureCoding> {
    MPMediaLibraryPrivacyContext *_privacyContext;
    id<MPMediaLibraryDataProviderPrivate> _libraryDataProvider;
    NSObject<OS_dispatch_queue> *_entityCacheQueue;
    NSObject<OS_dispatch_queue> *_fixedQueue;
    NSArray *_notificationObservers;
    QueryCriteriaResultsCache *_itemsForCriteriaCache;
    QueryCriteriaResultsCache *_hasItemsForCriteriaCache;
    QueryCriteriaResultsCache *_countOfItemsForCriteriaCache;
    QueryCriteriaResultsCache *_itemResultSetsForCriteriaCache;
    QueryCriteriaResultsCache *_collectionsForCriteriaCache;
    QueryCriteriaResultsCache *_hasCollectionsForCriteriaCache;
    QueryCriteriaResultsCache *_countOfCollectionsForCriteriaCache;
    QueryCriteriaResultsCache *_collectionsResultSetsForCriteriaCache;
    NSMutableDictionary *_hasItemsDidLoadForCriteria;
    NSMutableDictionary *_hasCollectionsDidLoadForCriteria;
    NSMutableDictionary *_countOfCollectionsDidLoadForCriteria;
    NSMutableDictionary *_countOfItemsDidLoadForCriteria;
    NSMutableArray *_additionalLibraryFilterPredicates;
    NSObject<OS_dispatch_queue> *_additionalLibraryFilterPredicatesAccessQueue;
    NSPointerArray *_connectionAssertions;
    NSObject<OS_dispatch_queue> *_connectionAssertionsQueue;
    BOOL _disconnectAfterReleasingAssertions;
    float _connectionProgress;
    long long _removalReason;
    unsigned char _determinedHasMedia : 1;
    unsigned char _hasMedia : 1;
    unsigned char _determinedHasSongs : 1;
    unsigned char _hasSongs : 1;
    unsigned char _determinedHasGeniusMixes : 1;
    unsigned char _hasGeniusMixes : 1;
    unsigned char _determinedHasPlaylists : 1;
    unsigned char _hasPlaylists : 1;
    unsigned char _determinedHasComposers : 1;
    unsigned char _hasComposers : 1;
    unsigned char _determinedHasPodcasts : 1;
    unsigned char _hasPodcasts : 1;
    unsigned char _determinedHasUbiquitousBookmarkableItems : 1;
    unsigned char _hasUbiquitousBookmarkableContent : 1;
    unsigned char _determinedHasAudiobooks : 1;
    unsigned char _hasAudiobooks : 1;
    long long _cloudFilteringType;
    BOOL _filteringDisabled;
    BOOL _hasVideos;
    BOOL _determinedHasVideos;
    BOOL _hasMusicVideos;
    BOOL _determinedHasMusicVideos;
    BOOL _hasAudibleAudioBooks;
    BOOL _determinedHasAudibleAudioBooks;
    BOOL _hasMovies;
    BOOL _determinedHasMovies;
    BOOL _hasCompilations;
    BOOL _determinedHasCompilations;
    BOOL _hasITunesU;
    BOOL _determinedHasITunesU;
    BOOL _hasVideoITunesU;
    BOOL _determinedHasVideoITunesU;
    BOOL _hasMovieRentals;
    BOOL _determinedHasMovieRentals;
    BOOL _hasTVShows;
    BOOL _determinedHasTVShows;
    BOOL _hasHomeVideos;
    BOOL _determinedHasHomeVideos;
    BOOL _hasVideoPodcasts;
    BOOL _determinedHasVideoPodcasts;
    unsigned char _originalCellNetworkFlags;
    unsigned char _originalWiFiNetworkFlags;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly, nonatomic) NSURL *protectedContentSupportStorageURL;
@property (readonly, nonatomic) NSString *_syncValidity;
@property (readonly, nonatomic) long long libraryChangeObservers;
@property (nonatomic) long long removalReason;
@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _MLCoreStorageLock;
@property (retain, nonatomic) _MPActiveUserChangeMonitor *activeUserChangeMonitor;
@property (readonly, nonatomic) ITLibrary *itLibrary;
@property (retain, nonatomic, setter=_setMLCoreStorage:) id _MLCoreStorage;
@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int x0; } *_MLCoreStorageLockPointer;
@property (readonly, copy, nonatomic) ICUserIdentity *userIdentity;
@property (readonly, nonatomic) NSDate *lastModifiedDate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (long long)authorizationStatus;
+ (void)initialize;
+ (id)mediaLibraries;
+ (void)requestAuthorization:(id /* block */)a0;
+ (id)_mediaLibraries;
+ (id)_deviceMediaLibraryWithUserIdentity:(id)a0 createIfRequired:(BOOL)a1;
+ (void)_endDiscoveringMediaLibrariesIfAllowed;
+ (id)_libraryDataProviders;
+ (id)_libraryForDataProvider:(id)a0;
+ (long long)_mediaLibraryAuthorizationStatusFromCloudServiceAuthorizationStatus:(long long)a0;
+ (id)_mediaLibraryWithUniqueIdentifier:(id)a0 userDSID:(id)a1;
+ (void)_postNotificationName:(id)a0 library:(id)a1;
+ (void)_postNotificationName:(id)a0 library:(id)a1 userInfo:(id)a2;
+ (id)_sharedCloudServiceStatusMonitor;
+ (void)addLibraryDataProvider:(id)a0;
+ (void)beginDiscoveringMediaLibraries;
+ (id)defaultMediaLibrary;
+ (id)deviceMediaLibrary;
+ (id)deviceMediaLibraryWithUserIdentity:(id)a0;
+ (void)endDiscoveringMediaLibraries;
+ (BOOL)isLibraryServerDisabled;
+ (id)libraryDataProviders;
+ (void)libraryPathDidChangeForDataProvider:(id)a0;
+ (void)logDatabaseAccess;
+ (id)mediaLibraryWithUniqueIdentifier:(id)a0;
+ (id)mediaLibraryWithUniqueIdentifier:(id)a0 allowsLoadingFromDisk:(BOOL)a1;
+ (id)mediaLibraryWithUniqueIdentifier:(id)a0 userDSID:(id)a1;
+ (void)postEntitiesAddedOrRemovedNotificationForLibraryDataProvider:(id)a0;
+ (void)reloadDisplayValuesForLibraryDataProvider:(id)a0;
+ (void)reloadDynamicPropertiesForLibraryDataProvider:(id)a0;
+ (void)reloadInvisiblePropertiesForLibraryDataProvider:(id)a0;
+ (void)reloadLibraryDataProvider:(id)a0;
+ (void)removeLibraryDataProvider:(id)a0 removalReason:(long long)a1;
+ (void)setDefaultMediaLibrary:(id)a0;
+ (void)setGlobalPrivacyClientWithAuditToken:(struct { unsigned int x0[8]; })a0;
+ (void)setLibraryServerDisabled:(BOOL)a0;
+ (void)setRunLoopForNotifications:(id)a0;
+ (id)sharedMediaLibraries;
+ (void)syncGenerationDidChangeForLibraryDataProvider:(id)a0;
+ (void)uniqueIdentifierDidChangeForLibraryDataProvider:(id)a0;

- (void)disconnect;
- (void)_disconnect;
- (id)databasePath;
- (id)initWithDatabasePath:(id)a0;
- (void)dealloc;
- (void)setClientIdentity:(id)a0;
- (void)performReadTransactionWithBlock:(id /* block */)a0;
- (void)encodeWithCoder:(id)a0;
- (BOOL)writable;
- (id)init;
- (BOOL)performTransactionWithBlock:(id /* block */)a0;
- (long long)status;
- (id)name;
- (id)initWithCoder:(id)a0;
- (id)uniqueIdentifier;
- (void)_setupNotifications;
- (BOOL)isEqual:(id)a0;
- (void).cxx_destruct;
- (void)_tearDownNotifications;
- (BOOL)removeItems:(id)a0;
- (id)_initWithUserIdentity:(id)a0;
- (BOOL)requiresAuthentication;
- (id)artworkDataSource;
- (BOOL)deleteItems:(id)a0;
- (void)connectWithCompletionHandler:(id /* block */)a0;
- (BOOL)hasMediaOfType:(unsigned long long)a0;
- (BOOL)isDeviceLibrary;
- (id)multiverseIdentifierForCollectionWithPersistentID:(long long)a0 groupingType:(long long)a1;
- (BOOL)removePlaylist:(id)a0;
- (id)entityWithMultiverseIdentifier:(id)a0;
- (BOOL)hasCompilations;
- (BOOL)hasMovieRentals;
- (BOOL)isGeniusEnabled;
- (BOOL)playlistExistsWithPersistentID:(unsigned long long)a0;
- (id)URLForHomeSharingRequest:(id)a0;
- (void)_activeUserDidChangeNotification:(id)a0;
- (id)_addPlaylistWithName:(id)a0 activeGeniusPlaylist:(BOOL)a1 externalVendorIdentifier:(id)a2 properties:(id)a3 trackList:(id)a4 playlistEntryProperties:(id)a5;
- (id)_addPlaylistWithName:(id)a0 externalVendorIdentifier:(id)a1;
- (void)_canShowCloudTracksDidChangeNotification:(id)a0;
- (BOOL)_checkHasContent:(BOOL *)a0 determined:(BOOL *)a1 mediaType:(unsigned long long)a2 queryHasEntitiesBlock:(id /* block */)a3;
- (BOOL)_checkHasContent:(BOOL *)a0 determined:(BOOL *)a1 queryHasEntitiesBlock:(id /* block */)a2;
- (void)_clearCachedContentDataAndResultSets:(BOOL)a0;
- (void)_clearCachedEntitiesIncludingResultSets:(BOOL)a0;
- (void)_clearCountCriteriaCaches;
- (void)_clearPendingDisconnection;
- (id)_collectionPersistentIdentifiersForQueryCriteria:(id)a0;
- (id)_collectionsForQueryCriteria:(id)a0;
- (unsigned long long)_countOfCollectionsForQueryCriteria:(id)a0;
- (unsigned long long)_countOfItemsForQueryCriteria:(id)a0;
- (id)_dataProviderDescription;
- (void)_didReceiveMemoryWarning:(id)a0;
- (void)_displayValuesDidChangeNotification:(id)a0;
- (id)_getCachedValueForQueryCritiera:(id)a0 valueCriteriaCache:(id)a1 entitiesForCriteriaCache:(id)a2 didLoadBlocksByQueryCriteria:(id)a3 valueLoadedFromEntitiesArrayBlock:(id /* block */)a4 loadValueFromDataProviderBlock:(id /* block */)a5;
- (BOOL)_handlesSameAccountAs:(id)a0;
- (BOOL)_hasCollectionsForQueryCriteria:(id)a0;
- (BOOL)_hasItemsForQueryCriteria:(id)a0;
- (id)_initWithLibraryDataProvider:(id)a0;
- (id)_itemPersistentIdentifiersForQueryCriteria:(id)a0;
- (id)_itemsForQueryCriteria:(id)a0;
- (void)_performBlockOnLibraryHandlingTheSameAccount:(id /* block */)a0;
- (void)_reloadLibraryForContentsChangeWithNotificationInfo:(id)a0;
- (void)_reloadLibraryForDynamicPropertyChangeWithNotificationInfo:(id)a0;
- (void)_reloadLibraryForInvisiblePropertyChangeWithNotificationInfo:(id)a0;
- (void)_reloadLibraryForPathChange;
- (void)_reloadLibraryForRestrictionsChange;
- (void)_removeConnectionAssertion:(id)a0;
- (void)_scheduleLibraryChangeNotificationPostingBlock:(id /* block */)a0;
- (void)_setLibraryFilterPredicates;
- (void)activeUserChangeDidFinish;
- (void)addGlobalPlaylistWithID:(id)a0 andAddToCloudLibrary:(BOOL)a1 completion:(id /* block */)a2;
- (void)addItemWithProductID:(id)a0 completionHandler:(id /* block */)a1;
- (void)addLibraryFilterPredicate:(id)a0;
- (void)addNonLibraryOwnedPlaylistWithGlobalID:(id)a0 completion:(id /* block */)a1;
- (void)addNonLibraryOwnedPlaylistsWithGlobalIDs:(id)a0 completion:(id /* block */)a1;
- (void)addPlaylistStoreItemsWithMetadata:(id)a0 completion:(id /* block */)a1;
- (id)addPlaylistWithName:(id)a0;
- (id)addPlaylistWithName:(id)a0 activeGeniusPlaylist:(BOOL)a1;
- (id)addPlaylistWithName:(id)a0 properties:(id)a1 trackList:(id)a2 playlistEntryProperties:(id)a3;
- (void)addStoreItem:(long long)a0 andAddTracksToCloudLibrary:(BOOL)a1 withCompletion:(id /* block */)a2;
- (void)addStoreItemIDs:(id)a0 andAddTracksToCloudLibrary:(BOOL)a1 withCompletion:(id /* block */)a2;
- (void)addStoreItemIDs:(id)a0 referralObject:(id)a1 andAddTracksToCloudLibrary:(BOOL)a2 withCompletion:(id /* block */)a3;
- (void)addToLocalDeviceLibraryGlobalPlaylistWithID:(id)a0 completion:(id /* block */)a1;
- (void)addTracksToMyLibrary:(id)a0;
- (id)additionalLibraryFilterPredicates;
- (void)beginGeneratingLibraryChangeNotifications;
- (void)clearLocationPropertiesOfItem:(id)a0;
- (long long)cloudFilteringType;
- (BOOL)collectionExistsContainedWithinPersistentIDs:(const unsigned long long *)a0 count:(unsigned long long)a1 groupingType:(long long)a2 existentPID:(unsigned long long *)a3;
- (BOOL)collectionExistsContainedWithinSyncIDs:(id)a0 groupingType:(long long)a1 existentPID:(unsigned long long *)a2;
- (BOOL)collectionExistsInLibraryWithPersistentID:(unsigned long long)a0 groupingType:(long long)a1;
- (BOOL)collectionExistsWithCloudLibraryID:(id)a0 groupingType:(long long)a1 existentPID:(unsigned long long *)a2;
- (BOOL)collectionExistsWithCloudUniversalLibraryID:(id)a0 groupingType:(long long)a1 existentPID:(unsigned long long *)a2;
- (BOOL)collectionExistsWithName:(id)a0 groupingType:(long long)a1 existentPID:(unsigned long long *)a2;
- (BOOL)collectionExistsWithPersistentID:(unsigned long long)a0 groupingType:(long long)a1;
- (BOOL)collectionExistsWithSagaID:(long long)a0 groupingType:(long long)a1 existentPID:(unsigned long long *)a2;
- (BOOL)collectionExistsWithStoreID:(long long)a0 groupingType:(long long)a1 existentPID:(unsigned long long *)a2;
- (id)collectionInLibraryWithPersistentID:(unsigned long long)a0 groupingType:(long long)a1;
- (id)collectionWithPersistentID:(unsigned long long)a0 groupingType:(long long)a1;
- (id)collectionWithPersistentID:(unsigned long long)a0 groupingType:(long long)a1 verifyExistence:(BOOL)a2;
- (void)connectWithAuthenticationData:(id)a0 completionBlock:(id /* block */)a1;
- (id)connectionAssertionWithIdentifier:(id)a0;
- (float)connectionProgress;
- (unsigned long long)currentEntityRevision;
- (id)decodeItemWithCoder:(id)a0;
- (BOOL)deleteDatabaseProperty:(id)a0;
- (void)endGeneratingLibraryChangeNotifications;
- (id)entityCache;
- (id)entityWithLibraryURL:(id)a0;
- (id)entityWithPersistentID:(long long)a0 entityType:(long long)a1;
- (id)entityWithSiriSyncIdentifier:(id)a0;
- (id)entityWithSpotlightIdentifier:(id)a0;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)a0 maximumRevisionType:(long long)a1 inUsersLibrary:(BOOL)a2 usingBlock:(id /* block */)a3;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)a0 maximumRevisionType:(long long)a1 usingBlock:(id /* block */)a2;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)a0 usingBlock:(id /* block */)a1;
- (id)errorResolverForItem:(id)a0;
- (id)favoriteSongsPlaylist;
- (void)geniusItemsForSeedItem:(id)a0 completion:(id /* block */)a1;
- (void)getPlaylistWithUUID:(id)a0 creationMetadata:(id)a1 completionHandler:(id /* block */)a2;
- (BOOL)hasAddedToLibraryAppleMusicContent;
- (BOOL)hasAlbums;
- (BOOL)hasArtists;
- (BOOL)hasAudibleAudioBooks;
- (BOOL)hasAudioITunesUContent;
- (BOOL)hasAudiobooks;
- (BOOL)hasComposers;
- (BOOL)hasGeniusMixes;
- (BOOL)hasGenres;
- (BOOL)hasHomeVideos;
- (BOOL)hasITunesUContent;
- (BOOL)hasMedia;
- (BOOL)hasMovies;
- (BOOL)hasMusicVideos;
- (BOOL)hasPlaylists;
- (BOOL)hasPodcasts;
- (BOOL)hasSongs;
- (BOOL)hasTVShows;
- (BOOL)hasUbiquitousBookmarkableItems;
- (BOOL)hasUserPinnedLibraryEntity;
- (BOOL)hasUserPlaylists;
- (BOOL)hasUserPlaylistsContainingAppleMusicContent;
- (BOOL)hasVideoITunesUContent;
- (BOOL)hasVideoPodcasts;
- (BOOL)hasVideos;
- (unsigned int)homeSharingDatabaseID;
- (void)importArtworkTokenForEntityPersistentID:(unsigned long long)a0 entityType:(long long)a1 artworkToken:(id)a2 artworkType:(long long)a3 sourceType:(long long)a4;
- (BOOL)importOriginalArtworkFromImageData:(id)a0 withArtworkToken:(id)a1 artworkType:(long long)a2 sourceType:(long long)a3 mediaType:(unsigned long long)a4;
- (id)initWithClientIdentity:(id)a0 userIdentity:(id)a1;
- (BOOL)isCurrentThreadInTransaction;
- (BOOL)isHomeSharingLibrary;
- (BOOL)isValidAssetURL:(id)a0;
- (BOOL)itemExistsInDatabaseWithPersistentID:(unsigned long long)a0;
- (BOOL)itemExistsWithPersistentID:(unsigned long long)a0;
- (id)itemWithPersistentID:(unsigned long long)a0;
- (id)itemWithPersistentID:(unsigned long long)a0 verifyExistence:(BOOL)a1;
- (id)itemWithStoreID:(unsigned long long)a0;
- (id)libraryDataProvider;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)a0;
- (id)localizedSectionIndexTitles;
- (void)logDatabaseAccess;
- (id)multiverseIdentifierForTrackWithPersistentID:(long long)a0;
- (id)newPlaylistWithPersistentID:(unsigned long long)a0;
- (id)pathForAssetURL:(id)a0;
- (void)performStoreAlbumArtistLibraryImport:(id)a0 withCompletion:(id /* block */)a1;
- (void)performStoreItemLibraryImport:(id)a0 withCompletion:(id /* block */)a1;
- (id)photosMemoriesPlaylist;
- (id)playbackHistoryPlaylist;
- (long long)playlistGeneration;
- (id)playlistWithGlobalID:(id)a0;
- (id)playlistWithPersistentID:(unsigned long long)a0;
- (void)populateLocationPropertiesOfItem:(id)a0 withPath:(id)a1 assetProtectionType:(long long)a2;
- (void)populateLocationPropertiesOfItem:(id)a0 withPath:(id)a1 assetProtectionType:(long long)a2 completionBlock:(id /* block */)a3;
- (id)preferredAudioLanguages;
- (id)preferredSubtitleLanguages;
- (void)removeArtworkForEntityPersistentID:(unsigned long long)a0 entityType:(long long)a1 artworkType:(long long)a2 sourceType:(long long)a3;
- (void)removeLibraryFilterPredicate:(id)a0;
- (BOOL)removePlaylist:(id)a0 preserveUndeletableEntities:(BOOL)a1;
- (id)securityScopedFileURLForAssetURL:(id)a0;
- (void)setCloudFilteringType:(long long)a0;
- (void)setSyncPlaylistId:(unsigned long long)a0;
- (BOOL)setValue:(id)a0 forDatabaseProperty:(id)a1;
- (void)setValues:(id)a0 forProperties:(id)a1 forItemPersistentIDs:(id)a2;
- (unsigned long long)syncGenerationID;
- (unsigned long long)syncPlaylistId;
- (id)syncValidity;
- (unsigned long long)usageForSyncedMediaOfType:(unsigned long long)a0;
- (id)valueForDatabaseProperty:(id)a0;

@end
