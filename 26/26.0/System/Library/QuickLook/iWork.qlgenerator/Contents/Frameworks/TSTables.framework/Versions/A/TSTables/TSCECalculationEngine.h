@class TSTRefNamer, TSCERewritingMinion, TSCERemoteDataStore, TSCETablesByName, TSTHeaderNameMgr, TSCETablesByNameDistributor, NSMutableArray, NSString, TSCETransaction, TSCEUUidReferenceMap, TSKChangeNotifier, TSCEBulkCellChangeMinion, NSMutableDictionary, TSCENamedReferenceManager, TSCEUpgradingTablesMinion, TSCEReferencesToDirty, TSTMultiTableRemapper, TSCERewriteTableUIDInfo, NSObject, TSCEGroupByNodeMap, TSKAccessController, TSCESpillingOriginCache, TSTRefParser, TSCEDependencyTracker, TSCECalendar, NSDate, NSTimeZone, TSKChangeGroup, TSULocale;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_os_log;

@interface TSCECalculationEngine : TSPObject <TSCEFormulaReplacing> {
    BOOL _isUnarchiving;
    BOOL _calculationWillShutDown;
    TSULocale *_documentLocale;
    TSCEDependencyTracker *_dependencyTracker;
    int _recalculationThreadState;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _recalculationThreadStateMutex;
    BOOL _shouldCancelRecalculation;
    int _calculationPauseCount;
    NSObject<OS_dispatch_group> *_recalcLoopGroup;
    BOOL _blockingUntilRecalcIsComplete;
    double _recalcTime;
    NSObject<OS_dispatch_group> *_recalcDispatchGroup;
    NSObject<OS_dispatch_queue> *_recalcHighPriorityQueue;
    NSObject<OS_dispatch_queue> *_recalcLowPriorityQueue;
    struct unordered_set<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct __hash_table<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<unsigned short, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _modifiedOwnersInThisRecalcCycle;
    struct unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>> { struct __hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _deferredUpdateTrackedHeaders;
    BOOL _needsEmbiggenedCoordsCheck;
    struct vector<TSCERecalcPhaseState *, std::allocator<TSCERecalcPhaseState *>> { struct TSCERecalcPhaseState **__begin_; struct TSCERecalcPhaseState **__end_; struct TSCERecalcPhaseState **__cap_; } _phaseStates;
    void *_inProgressLeaves;
    struct unordered_set<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct __hash_table<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<unsigned short, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _inProgressOwnerIDs;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _inProgressLeavesMutex;
    BOOL _stopEvaluating;
    BOOL _hadDirtyCellsRecently;
    struct TSCERefResolverMap { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _refResolverMutex; struct unordered_map<unsigned short, TSCETableResolverWrapper *, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCETableResolverWrapper *>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _referenceResolversByOwnerId; struct unordered_map<TSKUIDStruct, TSCETableResolverWrapper *, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCETableResolverWrapper *>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _resolversByOwnerUID; BOOL _needsUpdate; struct unordered_map<unsigned short, TSCETableResolverWrapper *, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCETableResolverWrapper *>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCETableResolverWrapper *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _unlockedResolverMapByOwnerId; struct unordered_map<TSKUIDStruct, TSCETableResolverWrapper *, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCETableResolverWrapper *>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCETableResolverWrapper *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _unlockedResolversByOwnerUID; struct vector<TSCETableResolverWrapper *, std::allocator<TSCETableResolverWrapper *>> { struct TSCETableResolverWrapper **__begin_; struct TSCETableResolverWrapper **__end_; struct TSCETableResolverWrapper **__cap_; } _removedTableResolvers; } _refResolverMap;
    NSMutableDictionary *_legacyGlobalIDStringToOwnerUIDMap;
    unsigned long long _documentRandomSeed;
    NSDate *_currentDate;
    NSTimeZone *_currentTimeZone;
    TSCECalendar *_currentTimeZoneCalendar;
    TSCETablesByName *_tablesByName;
    TSCEUUidReferenceMap *_uuidReferenceMap;
    TSCEGroupByNodeMap *_groupNodeReferenceMap;
    int _XLImportDateMode;
    TSCERewriteTableUIDInfo *_tableUIDHistory;
    NSString *_previousLocaleIdentifier;
    BOOL _shouldPreventArchivingOfLocaleIdentifier;
    NSMutableArray *_allFormulasCleanObservers;
    NSMutableArray *_calculationStateObservers;
    BOOL _lastHasDirtyFormulas;
    NSDate *_lastUpdateTime;
    TSKChangeGroup *_pendingChangesForAsyncNotification;
    TSCETransaction *_currentTransaction;
    TSTMultiTableRemapper *_currentTableIdRemapper;
    TSTMultiTableRemapper *_rollbackTableIdRemapper;
    NSObject<OS_dispatch_queue> *_writeMutualExclusionQueue;
    unsigned int _upgradeOptions;
    BOOL _ownersRegistered;
    BOOL _documentDidLoadCompleted;
    BOOL _hasKnownEmbiggenedTable;
    unsigned long long _recalcCyclesSinceOpen;
    TSTRefNamer *_namer;
    TSTRefParser *_refParser;
    TSCEReferencesToDirty *_refsToDirty;
    TSTHeaderNameMgr *_headerNameMgr;
    TSCENamedReferenceManager *_namedReferenceManager;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _legacyNrmListsMutex;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct TSKUIDStruct *__cap_; } _beginTrackingNamesForLegacyNRMQueue;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct TSKUIDStruct *__cap_; } _endTrackingNamesForLegacyNRMQueue;
    struct unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>> { struct __hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _tablesWithNoLegacyNRMIndexes;
    struct unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>> { struct __hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _disallowedHeaderIndexingTables;
    TSCERemoteDataStore *_remoteDataStore;
    NSMutableArray *_rewriteSpecStack;
    BOOL _sentSetNowCommand;
    TSCERewritingMinion *_rewritingMinion;
    TSCESpillingOriginCache *_spillingOriginCache;
    NSObject<OS_os_log> *_signpostLog;
}

@property (weak, nonatomic) TSKAccessController *accessController;
@property (weak, nonatomic) TSKChangeNotifier *changeNotifier;
@property (retain) NSDate *currentDate;
@property (retain) NSTimeZone *currentTimeZone;
@property (retain) TSULocale *locale;
@property int XLImportDateMode;
@property (readonly) NSString *previousLocaleIdentifier;
@property (nonatomic) unsigned long long loadFromFileVersion;
@property (readonly, nonatomic) TSCEBulkCellChangeMinion *spillFormulasMinion;
@property (retain, nonatomic) TSCEUpgradingTablesMinion *upgradingFormulasMinion;
@property (nonatomic) BOOL needsSubOwnerIDUpgrade;
@property (readonly) TSCETablesByName *tablesByName;
@property (readonly) TSCETablesByNameDistributor *tableNameChangeDistributor;
@property (readonly) TSCETransaction *currentTransaction;
@property (retain, nonatomic) TSCERewritingMinion *rewritingMinion;
@property (readonly, nonatomic) BOOL shouldSendSetNowCommand;
@property (readonly) BOOL shouldAbortRecalculation;
@property (readonly) TSCERemoteDataStore *remoteDataStore;
@property (readonly, retain, nonatomic) TSTRefNamer *namer;
@property (readonly, retain, nonatomic) TSTRefParser *refParser;
@property (readonly, retain, nonatomic) TSTHeaderNameMgr *headerNameMgr;
@property (readonly, nonatomic) TSCENamedReferenceManager *namedReferenceManager;
@property unsigned long long documentRandomSeed;
@property (readonly) TSCERewriteTableUIDInfo *tableUIDHistory;
@property (retain) TSTMultiTableRemapper *currentTableIdRemapper;
@property (nonatomic) BOOL duringRollback;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)resumeEvaluationIfNotTerminated;
+ (void)confirmTermination;
+ (unsigned long long)generateRandomSeed;
+ (BOOL)isPotentiallyTerminating;
+ (void)pauseEvaluationForPotentialTermination;
+ (unsigned long long)randomSeedFromRandomLo:(int)a0 hi:(int)a1;
+ (void)splitRandomSeed:(unsigned long long)a0 intoLo:(int *)a1 hi:(int *)a2;

- (void)applicationWillResignActive:(id)a0;
- (id)initWithContext:(id)a0;
- (void)commonInit;
- (void)dealloc;
- (id).cxx_construct;
- (int)threadState;
- (void).cxx_destruct;
- (void)applicationDidBecomeActive:(id)a0;
- (void)flushAllChanges;
- (void)closeTransaction:(id)a0;
- (id)documentRoot;
- (id)openTransaction;
- (void)willModify;
- (void)willClose;
- (void)documentDidLoad;
- (unsigned int)delayedArchivingPriority;
- (id)packageLocator;
- (BOOL)shouldDelayArchiving;
- (void)saveToArchiver:(id)a0;
- (id)documentLocale;
- (void)loadFromUnarchiver:(id)a0;
- (void)markIndirectCallsAsDirty;
- (id)resolverMatchingName:(id)a0 contextResolver:(id)a1;
- (BOOL)allCellsAreClean;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct TSKUIDStruct *x2; })allRefResolverOwnerUIDs;
- (void)blockUntilRecalcIsCompleteWithTimeout:(double)a0;
- (id)calcEngine;
- (void)clearLegacyGlobalIDs;
- (id)emptyReferenceSetWrapper;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct TSUCellCoord *x2; })formulaCoordsReferringToRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 fromOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (BOOL)isRecalculationStarted;
- (void)markOwnerAsDirty:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)ownerIsRegistered:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (void)pauseRecalculation;
- (BOOL)recalculationIsPaused;
- (int)registerOwnerWithOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 owner:(id)a1 referenceResolver:(id)a2 baseOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a3 ownerKind:(unsigned short)a4;
- (void)removeAllFormulasFromOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)removeFormulaAt:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)replaceFormulaAt:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 precedents:(id)a2 replaceOptions:(struct TSCEReplaceFormulaOptions { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x6; id x7; })a3;
- (void)resumeRecalculation;
- (void)resumeRecalculationForBlock:(id /* block */)a0;
- (void)setOwnerUIDForLegacyGlobalID:(id)a0 ownerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)tableResolverForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)unregisterOwner:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (id)valueGridForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 hidingActionMask:(unsigned char)a2 error:(id *)a3;
- (void)clearPreviousLocaleIdentifier;
- (long long)dirtyCellCount;
- (void)documentLocaleDidChange;
- (BOOL)isInCollaborationMode;
- (void)markDateTimeVolatileFunctionsAsDirtyForCurrentDateTime;
- (void)markLocaleVolatileFunctionsAsDirty;
- (void)pauseRecalculationSometimeSoon;
- (void)pauseRecalculationForBlock:(id /* block */)a0;
- (id)allSpanningDependenciesAsString;
- (void)beginSuppressingWillModifyCalls;
- (void)p_removeApplicationNotification;
- (void)removeAllFormulasCleanObserver:(id)a0;
- (void)removeCalculationStateObserver:(id)a0;
- (void)superWillModify;
- (BOOL)cellIsInACycle:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x0; })corruptCellRefs;
- (void)markAllVolatileFunctionsAsDirty;
- (void)notifyObserversOfRecalcProgress;
- (void)popRewriteSpec:(id)a0;
- (BOOL)referenceIsValidIncludingSheet:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)resetFormulaAt:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCETableResolverWrapper { id x0; } *)tableResolverWrapperForTableID:(unsigned short)a0;
- (void)updateErrorAndWarnings:(id)a0 forCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (void)addAllFormulasCleanObserver:(id)a0;
- (void)addCalculationStateObserver:(id)a0;
- (void)addSubOwnerAliasesForUpgrade:(id)a0;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })aggregateRangeRefForCategoryRef:(id)a0;
- (unsigned char)aggregateTypeForCategoryRef:(id)a0;
- (id)allCellDependenciesAsString;
- (BOOL)allCellsAreCleanInOwner:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)allCellsAreCleanNonBlocking;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })allFormulaCoordsInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)allFormulaOwnersAsString;
- (BOOL)allOwnersRegistered;
- (id)allRangeDependenciesAsString;
- (id)anyResolver;
- (void)assertAt:(id)a0 nonCalcEngineException:(id)a1 evaluatingFormula:(id)a2;
- (void)assertDirtyPrecedentsCountConsistency;
- (void)assertNonCalcEngineException:(id)a0 exception:(id)a1 evaluatingFormula:(id)a2;
- (void)beginBatchingGroupCellDirtying;
- (void)beginTrackingNamesInTableForLegacyNRM:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)beginUpgradingFormulasMode;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })cachedSpillRangeForSpillingOriginCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 outError:(out id *)a1;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; id *x2; })categoryRefsForSpanningCategoryRef:(id)a0;
- (BOOL)cellContainsAFormula:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })cellCoordinatesNeedingExcelImportForTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })cellCoordsWithError:(long long)a0 inTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (unsigned long long)cellDependMemoryUseEstimate;
- (id)cellDependenciesAsStringForOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellRefSet { struct map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>> { struct __tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x0; })cellDependentsOfCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)cellHasPrecedents:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct vector<TSCECellRef, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; struct TSCECellRef *x1; struct TSCECellRef *x2; })cellRefsForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })cellsInACycleInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)clearDisallowHeaderIndexingForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)clearErrorAndWarningsForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)clearErrorAndWarningsForCells:(const void *)a0;
- (void)clearRecalculationTimer;
- (void)clearSpillSizeForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)clearSpillSizesInRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)clearSpillingOriginCache;
- (unsigned int)columnWidthInBodyOfTable:(id)a0;
- (void)computeResultsForUnitTest;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })conflictWinnerForSpillRect1:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0 spillOrigin2:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1 inTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (id)currentTimeZoneCalendar;
- (void)debugFlushAllDirtyReferences;
- (id)dependencyTracker;
- (void)detectAndRepairDirtyCellsAreOnLeafQueue;
- (unsigned long long)dirtyCellCountInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)dirtyCellsForColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 fromTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2;
- (void)dirtyCellsForInsertionOfColumns:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 forTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2 headerRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a3;
- (void)dirtyCellsForInsertionOfRows:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 forTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2 headerRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a3;
- (void)dirtyCellsForMergingRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a0 forTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 headerRowRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2 headerColumnRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a3;
- (void)dirtyCellsForRemovalOfColumns:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 fromTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2;
- (void)dirtyCellsForRemovalOfRows:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 fromTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2;
- (void)dirtyCellsForRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 fromTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2;
- (void)dirtyCellsForUpgrade;
- (void)dispatchOnePhase:(void *)a0;
- (BOOL)duringSubOwnerUIDUpgrade;
- (struct TSCEReferenceSet { void /* function */ **x0; id x1; struct unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x2; struct map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { struct __tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x3; void *x4; void *x5; void *x6; void *x7; void *x8; id x9; void *x10; })emptyReferenceSet;
- (void)endBatchingGroupCellDirtying;
- (void)endSuppressingWillModifyCalls;
- (void)endTrackingNamesInTableForLegacyNRM:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)endUpgradingFormulasMode;
- (void)enumerateFormulaOwnersUsingBlock:(id /* block */)a0;
- (unsigned long long)errorCountForOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)errorForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (long long)errorTypeForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)evaluateSynchedWithCalcEngineWithFormula:(id)a0 evalContext:(id)a1;
- (void)executeBlockWhileCalculationEngineIsNotWriting:(id /* block */)a0;
- (id)extendTableUIDHistoryWithRewrite:(id)a0;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct TSUCellCoord *x2; })formulaCoordsInRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct TSUCellCoord *x2; })formulaCoordsReferringToRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 fromOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 skipSpanning:(BOOL)a2;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })formulaOwnerUIDForInternalFormulaOwnerID:(unsigned short)a0;
- (int)forwardRegisterOwnerWithOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 legacyGlobalID:(id)a1;
- (BOOL)foundConsistencyIssues;
- (id)groupNodeReferenceMap;
- (BOOL)hasBackgroundTasks;
- (BOOL)hasDateTimeVolatileFunctions;
- (BOOL)hasDisallowedHeaderIndexingForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)hasFormulaAt:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)hasFormulaCellsUsingNowTodayRandom;
- (BOOL)hasMaxNumFormulas;
- (BOOL)hasRemoteDataFunctions;
- (BOOL)hasRunRecalculationALongTime;
- (BOOL)hasSpillingCellsForFormulaAt:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)hasSpillingCellsIntersectingRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (BOOL)hasSpillingErrorsForTable:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)hasSpillsOverlappingRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0 inTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 outSpillRects:(void *)a2;
- (BOOL)hasVerticalSpillingCellsInTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)hasVerticalSpillingCellsInTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 inRows:(id)a1;
- (void)headerStateOfTableChanged:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (void)headerStateOfTableChanged:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 changedRows:(BOOL)a1;
- (void)initializeDispatchObjects;
- (void)intendToChangePrecedent:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (unsigned short)internalFormulaOwnerIDForFormulaOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x0; })internalSpillingCellsForFormulaAt:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)invalidateAfterRecalc;
- (BOOL)isArrayFormulaCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)isBatchingGroupCellDirtying;
- (BOOL)isCellReferenceDirty:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)isRecalculationRunning;
- (id)legacyGlobalIDStringToOwnerUIDMap;
- (void)loadInProgressLeaves:(int)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })mapOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)markAllErrorsAsDirty;
- (void)markAllExternalGroupByRefsDirty:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)markAllFunctionsAsDirty;
- (void)markCellRefAsDirty:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)markCellRefSetAsDirty:(const void *)a0;
- (void)markCellRefsAsDirty:(id)a0;
- (void)markCoordsDirty:(const void *)a0 inInternalOwner:(unsigned short)a1;
- (void)markCoordsDirty:(const void *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)markDateTimeVolatileFunctionsAsDirty;
- (void)markGeometryVolatileFunctionsAsDirtyInOwner:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (void)markOnlyDependentsDirty:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)markRandomVolatileFunctionsAsDirty;
- (void)markRangeRefAsDirty:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)markRemoteDataVolatileFunctionsAsDirty;
- (void)markRemoteDataVolatileFunctionsAsDirtyForKeys:(id)a0;
- (void)markSpillingErrorsAsDirtyForTable:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (void)markTimeVolatileFunctionsAsDirty;
- (id)newTableResolverForResolver:(id)a0;
- (unsigned long long)numFormulaCellsInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (unsigned long long)numberOfCellsWithFormulas;
- (id)ownerForOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (id)ownerForUUIDBytes:(unsigned char[16])a0;
- (unsigned short)ownerKindForOwnerID:(unsigned short)a0;
- (unsigned short)ownerKindForOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })ownerUIDForLegacyGlobalID:(id)a0 registeringIfNeeded:(BOOL)a1;
- (void)p_addApplicationNotification;
- (void)p_blockUntilRecalcIsCompleteOnNewThreadWithTimeout:(id)a0;
- (void)p_blockUntilRecalcIsCompleteWithTimeout:(double)a0;
- (void)p_blockUntilRecalcTaskExitedWithTimeout:(double)a0;
- (struct TSCETableResolverWrapper { id x0; } *)p_tableOrLinkedResolverWrapperForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCETableResolverWrapper { id x0; } *)p_tableResolverWrapperForRefResolver:(id)a0;
- (void)performBackgroundTasksWithWriteLock;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })popNextTableToBeginTrackingNames;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })popNextTableToEndTrackingNames;
- (struct TSCEReferenceSet { void /* function */ **x0; id x1; struct unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x2; struct map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { struct __tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x3; void *x4; void *x5; void *x6; void *x7; void *x8; id x9; void *x10; })precedentsOfCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (int)preferredDispatchQueueWidth;
- (void)pushRewriteSpec:(id)a0;
- (BOOL)rangeIsWithinTable:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)recalcHoldingReadLock;
- (void)recalcHoldingWriteLock;
- (void)recalcPhaseHoldingReadLock:(void *)a0;
- (double)recalcTimeInSecs;
- (void)recalculateWithTimeout:(double)a0;
- (BOOL)referenceIsValid:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)referenceWasGuaranteedCleanAtRecalcCycleStart:(const struct TSCEAnyRef { unsigned short x0; struct TSCESpanningRangeRef { struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; unsigned char x1; } x1; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x2; BOOL x3; BOOL x4; id x5; } *)a0;
- (id)referencesToDirty;
- (void)registerOwners;
- (void)removeFormulasAt:(const void *)a0;
- (void)removeFormulasFromRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)replaceFormula:(id)a0 atCellCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (void)replaceFormula:(id)a0 atCellCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 replaceOptions:(struct TSCEReplaceFormulaOptions { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x6; id x7; })a3;
- (void)replaceRemoteDataKeysInterestedIn:(id)a0 forCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (void)replaceSpillError:(id)a0 ifCachedforSpillingOriginCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (void)resetCorruptCellRefs:(const void *)a0;
- (void)resetNRM;
- (void)resetSpillingFormulasInRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)resolverContainerMatchingName:(id)a0;
- (id)resolverContainerMatchingName:(id)a0 inDocumentRoot:(id)a1;
- (id)resolverForCellRef:(id)a0;
- (id)resolverForTableID:(unsigned short)a0;
- (id)resolverForTableUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (id)resolverMatchingName:(id)a0 inDocumentRoot:(id)a1 contextResolver:(id)a2;
- (id)resolverMatchingNameWithContextContainer:(id)a0 contextContainerName:(id)a1;
- (id)resolverMatchingNameWithContextContainer:(id)a0 inDocumentRoot:(id)a1 contextContainerName:(id)a2;
- (id)rewriteSpecStack;
- (void)rollbackTableUIDHistoryWithRewriteInfo:(id)a0;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })rootCauseForErrorInCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 atRootCell:(BOOL *)a1;
- (unsigned int)rowHeightInBodyOfTable:(id)a0;
- (void)scheduleDetectAndRepairConsistencyViolations;
- (void)scheduleRepairingSpanningFormulasInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)setCurrentDate:(id)a0 timeZone:(id)a1 markVolatilesDirty:(BOOL)a2;
- (void)setDisallowHeaderIndexingForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)setError:(id)a0 warnings:(id)a1 forCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a2;
- (void)setRemoteDataStore:(id)a0;
- (BOOL)setSpillSizeForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 spillSize:(struct { unsigned int x0; unsigned int x1; })a1 overlappingSpills:(void *)a2;
- (void)setTableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a0 bodyRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a1 forTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (BOOL)shouldForceRegisterAllTables;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })spillOriginsInRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCECellRefSet { struct map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>> { struct __tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x0; })spillOriginsSpillingIntoRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct { unsigned int x0; unsigned int x1; })spillSizeForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCECellRefSet { struct map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>> { struct __tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x0; })spillingCellsForFormulaAt:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCECellRefSet { struct map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>> { struct __tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x0; })spillingCellsInRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct TSCECellRefSet { struct map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>> { struct __tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x0; })spillingCellsViaDependenciesInRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })spillingRangeForFormulaAt:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)startRecalcTaskIfNecessary;
- (void)startRecalculation;
- (void)startRecalculationTask;
- (BOOL)stopEvaluatingNewLeaves;
- (id)tableOrLinkedResolverForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)tableResolverForRefResolver:(id)a0;
- (id)tableResolverForTableID:(unsigned short)a0;
- (struct TSCETableResolverWrapper { id x0; } *)tableResolverWrapperForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct vector<TSCECellRef, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; struct TSCECellRef *x1; struct TSCECellRef *x2; })unorderedCellRefsForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct TSCERecalculationState { unsigned char x0; })updateCalculatedPrecedents:(id)a0 forFormula:(id)a1 atCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a2 withState:(struct TSCERecalculationState { unsigned char x0; })a3;
- (void)updateEmbiggenedTableCache;
- (void)upgradeToSubOwnerUIDForOwners:(id)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })uuidForTableUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 andIndex:(unsigned int)a1 direction:(BOOL)a2;
- (id)uuidReferenceMap;
- (struct vector<TSCEValue *, std::allocator<TSCEValue *>> { id *x0; id *x1; id *x2; })valuesForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 hidingActionMask:(unsigned char)a2 error:(id *)a3;
- (BOOL)verifyAllOwnersAreKnown;
- (BOOL)verifyTableAndBodyRangesForTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })verticalSpillingCellsInTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })verticalSpillingCellsInTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 inRows:(id)a1;
- (id)warningsForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)wroteSpillingCells:(const void *)a0 forOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;

@end
