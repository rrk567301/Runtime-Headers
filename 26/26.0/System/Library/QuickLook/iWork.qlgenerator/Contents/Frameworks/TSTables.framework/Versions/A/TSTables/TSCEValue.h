@class NSMutableSet, TSKFormat;

@interface TSCEValue : NSObject <NSCopying>

@property (readonly, nonatomic) char nativeType;
@property (retain, nonatomic) NSMutableSet *warnings;
@property (readonly, nonatomic) BOOL isNil;
@property (readonly, nonatomic) BOOL isError;
@property (readonly, nonatomic) BOOL isToken;
@property (readonly, nonatomic) BOOL isEmptyArg;
@property (readonly, nonatomic) BOOL isTokenOrEmptyArg;
@property (readonly, nonatomic) unsigned long long hash;
@property (nonatomic) unsigned char rangeContextOverride;
@property (retain, nonatomic) TSKFormat *tskFormat;
@property (readonly, nonatomic) BOOL canResolveToSingleError;
@property (nonatomic) struct TSCEFormat { TSKFormat *_tskFormat; unsigned int _formatType; unsigned char _formatState; struct TSCEDurationFormat { unsigned char _useAutomaticUnits : 1; unsigned char _durationUnitSmallest : 6; unsigned char _durationUnitLargest : 6; unsigned char _durationStyle : 3; } _durationFormat; struct TSCEBaseFormat { unsigned char base; unsigned char basePlaces; BOOL baseUseMinusSign; } _baseFormat; struct TSCEFractionFormat { char fractionAccuracy; } _fractionFormat; struct TSCENumberFormat { unsigned char decimalPlaces; unsigned char negativeStyle : 3; unsigned char showThousandsSeparator : 1; unsigned char useAccountingStyle : 1; unsigned short currencyCodeIndex; } _numberFormat; } format;

+ (id)emptyValue;
+ (long long)compareValuesForLookupLeft:(id)a0 right:(id)a1 context:(id)a2 outError:(id *)a3;
+ (long long)compareValuesLeft:(id)a0 right:(id)a1 context:(id)a2 outError:(id *)a3;
+ (long long)compareValuesWithContextLeft:(id)a0 right:(id)a1 context:(id)a2 functionSpec:(id)a3 outError:(id *)a4;
+ (BOOL)valuesAreEqualLeft:(id)a0 right:(id)a1 context:(id)a2 outError:(id *)a3;

- (id)referenceValue;
- (id)date;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (id)description;
- (id).cxx_construct;
- (id)number;
- (void).cxx_destruct;
- (BOOL)boolean;
- (id)asNumberValue;
- (BOOL)isRichTextValue;
- (void)appendASTForConstantToNodeArray:(struct TSCEASTNodeArray { char *x0; unsigned long long x1; unsigned long long x2; BOOL x3; } *)a0;
- (id)asCategoryRef;
- (id)asDateValue;
- (id)asGrid:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 applyPreferredFormat:(BOOL)a3 outError:(id *)a4;
- (id)asReferenceValue;
- (id)asStringWithLocale:(id)a0;
- (id)asViewTractRefValue;
- (double)coercedDouble;
- (id)coercedStringWithContext:(id)a0;
- (id)coercedStringWithLocale:(id)a0;
- (char)deepType:(id)a0;
- (id)initWithTSKFormat:(id)a0;
- (BOOL)isValueGridValue;
- (id)valueGrid;
- (id)asRichTextValue;
- (BOOL)valueHasError:(int)a0 context:(id)a1 outError:(id *)a2;
- (void)attachWarnings:(id)a0;
- (BOOL)isThunk;
- (BOOL)asBoolean;
- (BOOL)asBoolean:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (BOOL)asBoolean:(id)a0 outError:(id *)a1;
- (id)asBooleanValue;
- (BOOL)asBooleanWithLocale:(id)a0;
- (id)asCategoryRefValue;
- (id)asDate:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (id)asDate:(id)a0 outError:(id *)a1;
- (id)asDateWithLocale:(id)a0;
- (id)asErrorValue;
- (id)asFunctorValue;
- (id)asFunctorValue:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (id)asFunctorWithArgsThunkValue;
- (id)asGridValue;
- (id)asNumber:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (id)asNumber:(id)a0 outError:(id *)a1;
- (id)asNumberWithLocale:(id)a0;
- (struct TSCERichTextStorage { id x0; id x1; BOOL x2; BOOL x3; BOOL x4; })asRawRichTextStorage:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (id)asRawString;
- (id)asRawString:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (id)asReference:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (struct TSCERichTextStorage { id x0; id x1; BOOL x2; BOOL x3; BOOL x4; })asRichTextStorage:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (BOOL)asStrictBoolean:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (id)asString:(id)a0;
- (id)asString:(id)a0 functionSpec:(id)a1 argumentIndex:(int)a2 outError:(id *)a3;
- (id)asString:(id)a0 outError:(id *)a1;
- (id)asStringValue;
- (id)asThunkValue;
- (id)asValueGrid:(id)a0;
- (id)asValueGridValue;
- (void)attachWarning:(id)a0;
- (id)canonicalKeyStringForLocale:(id)a0;
- (BOOL)coercedBool;
- (id)coercedDate;
- (id)coercedErrorWithContext:(id)a0;
- (id)convertArrayToText:(id)a0 maximumStringLength:(unsigned long long)a1 formatMode:(long long)a2;
- (id)deepResolveInPlace:(id)a0;
- (char)deepType:(id)a0 outError:(id *)a1;
- (id)errorWithContext:(id)a0;
- (id)evaluateThunk:(id)a0;
- (struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 6; unsigned char x2 : 6; unsigned char x3 : 3; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; BOOL x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; })formatWithContext:(id)a0;
- (id)gridValue;
- (id)initWithTSCEFormat:(const struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 6; unsigned char x2 : 6; unsigned char x3 : 3; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; BOOL x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } *)a0;
- (BOOL)isBooleanValue;
- (BOOL)isCaseSensitiveRegexString;
- (BOOL)isCategoryRefValue;
- (BOOL)isDateValue;
- (BOOL)isFunctorValue;
- (BOOL)isFunctorWithArgsThunkValue;
- (BOOL)isGridValue;
- (BOOL)isNativelyEqual:(id)a0;
- (BOOL)isNumberValue;
- (BOOL)isReferenceValue;
- (BOOL)isRegexString;
- (BOOL)isStringValue;
- (BOOL)isViewTractRefValue;
- (id)maxValue:(id)a0 locale:(id)a1;
- (id)minValue:(id)a0 locale:(id)a1;
- (struct TSCERichTextStorage { id x0; id x1; BOOL x2; BOOL x3; BOOL x4; })rawRichTextStorage;
- (id)reorganizeValueForSorting:(id)a0;
- (id)resolveToSingleValueOrError:(id)a0;
- (BOOL)valueIsEmptyWithContext:(id)a0;

@end
