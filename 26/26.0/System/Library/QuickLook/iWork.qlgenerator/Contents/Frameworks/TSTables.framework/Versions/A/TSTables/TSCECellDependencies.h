@class __end_, TSCEDependencyTracker, __cap_;

@interface TSCECellDependencies : NSObject {
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _tilesLock;
    struct vector<TSCECellRecordTile *, std::allocator<TSCECellRecordTile *>> { __end_ **__begin_; __cap_ **x0; id *x1; } _tiles;
    unsigned long long _numCellRecords;
    struct TSCEBitGrid { struct vector<TSCEBitGridTile *, std::allocator<TSCEBitGridTile *>> { struct TSCEBitGridTile **__begin_; struct TSCEBitGridTile **__end_; struct TSCEBitGridTile **__cap_; } _tiles; unsigned long long _count; unsigned long long _lastTileFoundAtIndex; } _containsAFormulaGrid;
    struct TSCEBitGrid { struct vector<TSCEBitGridTile *, std::allocator<TSCEBitGridTile *>> { struct TSCEBitGridTile **__begin_; struct TSCEBitGridTile **__end_; struct TSCEBitGridTile **__cap_; } _tiles; unsigned long long _count; unsigned long long _lastTileFoundAtIndex; } _isDirtyGrid;
    struct TSCEBitGrid { struct vector<TSCEBitGridTile *, std::allocator<TSCEBitGridTile *>> { struct TSCEBitGridTile **__begin_; struct TSCEBitGridTile **__end_; struct TSCEBitGridTile **__cap_; } _tiles; unsigned long long _count; unsigned long long _lastTileFoundAtIndex; } _isInACycleGrid;
    struct TSCEBitGrid { struct vector<TSCEBitGridTile *, std::allocator<TSCEBitGridTile *>> { struct TSCEBitGridTile **__begin_; struct TSCEBitGridTile **__end_; struct TSCEBitGridTile **__cap_; } _tiles; unsigned long long _count; unsigned long long _lastTileFoundAtIndex; } _isDirtyAndNotInACycleGrid;
    BOOL _hasExcelImportTranslationCells;
    void *_unarchivedCellRecords;
}

@property (readonly, nonatomic) BOOL isEmpty;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long _lower; unsigned long long _upper; } ownerUID;
@property (readonly, nonatomic) unsigned short internalOwnerID;
@property (nonatomic) unsigned short ownerIndex;
@property (nonatomic) TSCEDependencyTracker *dependencyTracker;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)encodeToArchive:(void *)a0;
- (BOOL)isCellRefDirty:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)markCellCleanAndPushNextLeaves:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (unsigned long long)numFormulaCells;
- (void)sortCellRecords;
- (void)applyBlockToRecordsInRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 cellRestrictions:(unsigned long long)a1 doWillModify:(BOOL)a2 block:(id /* block */)a3;
- (void)formulaCellsReferencingCellsAffectedByMoveRows:(id)a0 outFormulaCells:(void *)a1;
- (BOOL)isCellInACycle:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (void)setInACycleInGrid:(unsigned short)a0 row:(unsigned int)a1 inACycle:(BOOL)a2;
- (void)addCellsDependentOnBoth:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 precedent2:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a1 toCellCoordSet:(void *)a2;
- (void)addDependentsAtCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 toCellReferenceSet:(void *)a1;
- (void)addPrecedentsAtCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 toReferenceSet:(void *)a1;
- (void)adjustDirtyCountAndPushDependents:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0 outDependents:(id)a1 isInitialCell:(BOOL)a2 adjustBy:(unsigned long long)a3;
- (void)adjustDirtyPrecedentCount:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0 isInitialCell:(BOOL)a1 adjustBy:(unsigned long long)a2;
- (struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x0; })allCellRefs;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })allCoordsContainingFormulas;
- (void)appendEdgeToArchive:(void *)a0 edge:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a1;
- (void)appendExpandedEdgeToArchive:(void *)a0 edge:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a1;
- (void)applyBlockToRecords:(unsigned long long)a0 doWillModify:(BOOL)a1 block:(id /* block */)a2;
- (void)applyBlockToRecordsAtIndexes:(id)a0 rowIndexes:(id)a1 cellRestrictions:(unsigned long long)a2 doWillModify:(BOOL)a3 block:(id /* block */)a4;
- (void)applyBlockToSortedRecords:(unsigned long long)a0 doWillModify:(BOOL)a1 block:(id /* block */)a2;
- (void)assertDirtyPrecedentsCountConsistency;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })cellCoordinatesNeedingExcelImport;
- (BOOL)cellHasDeepPrecedentInRange:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 cellRange:(const struct TSCEInternalRangeReference { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; unsigned short x1; } *)a1;
- (BOOL)cellHasThisCellPrecedent:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 precedentRef:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a1;
- (BOOL)cellIsClean:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (BOOL)cellRecordHasPrecedents:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0;
- (id)cellRecordToString:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0;
- (void)cellRefsForCycleCellsReferringToCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 outCellRefs:(void *)a1;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })cellsInACycle;
- (void)cellsReferencingRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 fromOwnerID:(unsigned short)a1 outFormulaCoords:(void *)a2;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct TSUCellCoord *x2; })cellsWithRecordsInRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 formulaCellsOnly:(BOOL)a1;
- (void)clearCycleAndPushDependents:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0 outDependents:(id)a1;
- (void)collectDependencies:(id)a0;
- (unsigned long long)computedNumberOfDirtyPrecedents:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (BOOL)containsFormula:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (unsigned long long)countRecordsInRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 cellRestrictions:(unsigned long long)a1;
- (void)decrDirtySelfPlusPrecedentsCount:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0;
- (void)decrNumCells;
- (struct vector<TSCEInternalCellReference, std::allocator<TSCEInternalCellReference>> { struct TSCEInternalCellReference *x0; struct TSCEInternalCellReference *x1; struct TSCEInternalCellReference *x2; })dependentsOfCell:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)depthFirstSearch:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 state:(void *)a1;
- (id)descriptionOfCellsInRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 dirtyOnly:(BOOL)a1;
- (void)detectAndRepairDirtyCellsAreOnLeafQueue:(void *)a0;
- (void)dirtyAllCells;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })dirtyCells;
- (BOOL)dirtyPrecedentCountsAreConsistent:(BOOL)a0;
- (unsigned long long)dirtyPrecedentsCountOfCellCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (unsigned long long)dirtyPrecedentsCountOfCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })embiggenedCellCoord;
- (void)encodeToExpandedArchive:(void *)a0;
- (void)encodeToTiledArchive:(void *)a0 archiver:(id)a1;
- (id)explainDirtyPrecedentCount:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (void)findAndRecordCyclesInDirtyCells:(void *)a0 outCellsInCycles:(id)a1;
- (struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)findCellRecord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 willModifyOnTile:(BOOL)a1;
- (struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)findCellRecordForCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 willModifyOnTile:(BOOL)a1;
- (struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)findCellRecordForIntCellRef:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 willModifyOnTile:(BOOL)a1;
- (void)formulaCellsInRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 rewriteSpec:(id)a1 outFormulaCells:(void *)a2;
- (void)formulaCellsInThisOwner:(void *)a0;
- (void)formulaCellsReferencingCellsAffectedByInsertRows:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsReferencingCellsAffectedByRemoveRows:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsReferencingCellsInRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsReferencingIndexes:(id)a0 rowIndexes:(id)a1 outFormulaCells:(void *)a2;
- (void)formulaCellsReferencingThisOwner:(void *)a0;
- (BOOL)hasDependentsOfCell:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (BOOL)hasDirtyCells;
- (BOOL)hasPrecedentsAtCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (void)incrDirtySelfPlusPrecedentsCount:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0;
- (void)incrNumCells;
- (id)initWithDependTracker:(id)a0 ownerID:(unsigned short)a1 ownerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 ownerIndex:(unsigned short)a3;
- (BOOL)insertCellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0 doWillModify:(BOOL)a1;
- (BOOL)isCellDirty:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (BOOL)isCellRefInACycle:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)markCellRecordForPruning:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (void)markEverythingClean;
- (unsigned long long)memoryUseEstimate;
- (unsigned long long)numCellRecords;
- (unsigned long long)numDirtyCells;
- (unsigned long long)numDirtyNonCycleCells;
- (id)precedentsAsString:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 dirtyOnly:(BOOL)a1;
- (void)processNextCellForDFS:(void *)a0 cellRef:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a1;
- (void)pruneEmptyCellRecords:(id)a0 timeout:(double)a1;
- (void)pushDirectDependentsIfNotBothInCyle:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0 outDependents:(id)a1;
- (void)readExpandedPrecedentsWithOwners:(const void *)a0 cellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a1;
- (void)readExpandedPrecedentsWithoutOwners:(const void *)a0 cellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a1;
- (void)readFromArchive:(const void *)a0;
- (void)readFromExpandedArchive:(const void *)a0;
- (void)readFromTiledArchive:(const void *)a0 unarchiver:(id)a1 ownerDepends:(id)a2;
- (void)readPrecedentsWithOwners:(const void *)a0 cellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a1;
- (void)readPrecedentsWithoutOwners:(const void *)a0 cellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a1;
- (void)removeAllPrecedents;
- (void)removeCellRecordAt:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (void)removeDependentEdge:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 edge:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a1;
- (BOOL)removeSomePrecedents:(unsigned long long)a0 markDependentsDirty:(BOOL)a1;
- (BOOL)replaceCellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0;
- (void)resetOwnerUIDForUpgrade:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)setContainsAFormulaInGrid:(unsigned short)a0 row:(unsigned int)a1 containsFormula:(BOOL)a2;
- (void)setContainsFormula:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0 containsFormula:(BOOL)a1;
- (void)setDirtyInGrid:(unsigned short)a0 row:(unsigned int)a1 isDirty:(BOOL)a2;
- (void)setDirtySelfPlusPrecedentsCount:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0 dirtyCount:(unsigned long long)a1;
- (void)setInACycle:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a0 inACycle:(BOOL)a1;
- (id)tileForCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (id)tileForCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 createIfMissing:(BOOL)a1;
- (void)unpackAfterUnarchive;
- (id)userFriendlyOwnerName;

@end
