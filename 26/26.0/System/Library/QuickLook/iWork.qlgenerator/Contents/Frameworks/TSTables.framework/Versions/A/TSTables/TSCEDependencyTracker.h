@class TSCECalculationEngine, TSPObjectContext, TSCEReferenceSetWrapper, TSCELeafQueue, NSMutableArray;

@interface TSCEDependencyTracker : NSObject {
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _dependencyGraphLock;
    struct TSCEIDMap { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock; struct TSCEInternalIDAllocator { struct TSUIndexSet { unsigned char _isEmpty : 1; unsigned char _hasSingleRange : 1; struct TSUIndexRange { long long _begin; long long _end; } _singleRange; struct *_multipleRanges; } _usedIDs; } _idAllocator; struct unordered_map<unsigned short, TSKUIDStruct, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSKUIDStruct>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSKUIDStruct>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSKUIDStruct>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSKUIDStruct>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSKUIDStruct>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSKUIDStruct>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSKUIDStruct>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSKUIDStruct>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSKUIDStruct>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _internalIDToUIDMap; struct unordered_map<TSKUIDStruct, unsigned short, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, unsigned short>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, unsigned short>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned short>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned short>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>>, std::allocator<std::__hash_value_type<TSKUIDStruct, unsigned short>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned short>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned short>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned short>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned short>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _uidToInternalIDMap; struct unordered_map<unsigned short, unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, unsigned short>>> { struct __hash_table<std::__hash_value_type<unsigned short, unsigned short>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, unsigned short>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _duplicateInternalOwnerIDs; struct unordered_set<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct __hash_table<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<unsigned short, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _missingInternalTableIDs; struct unordered_set<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct __hash_table<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<unsigned short, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _unregisteredInternalOwnerIDs; } _formulaOwnerIDMap;
    struct unordered_map<unsigned short, TSCEFormulaOwnerDependencies *, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCEFormulaOwnerDependencies *>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCEFormulaOwnerDependencies *>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCEFormulaOwnerDependencies *>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCEFormulaOwnerDependencies *>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCEFormulaOwnerDependencies *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCEFormulaOwnerDependencies *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCEFormulaOwnerDependencies *>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCEFormulaOwnerDependencies *>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCEFormulaOwnerDependencies *>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _formulaOwnerDependencies;
    unsigned short _registeredOwnerIdCache;
    BOOL _ownersNeedRegistrationAfterDocumentLoads;
    TSCELeafQueue *_leafQueue;
    TSCELeafQueue *_cycleCalculationLeafQueue;
    struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _coordsForOwnerId; } _evaluationInProgressCells;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _evaluationInProgressLock;
    struct vector<TSCEInternalCellReference, std::allocator<TSCEInternalCellReference>> { struct TSCEInternalCellReference *__begin_; struct TSCEInternalCellReference *__end_; struct TSCEInternalCellReference *__cap_; } _modifiedCellsToDirtyQueue;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _corruptedCellRefsMutex;
    struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _coordsForOwnerId; } _corruptedCellRefs;
    _Atomic long long _numberOfFormulas;
    unsigned long long _batchingGroupCellDirtyingLevel;
    BOOL _dirtyRandomVolatileFunctionsAtEndOfDirtyBatching;
    unsigned long long _suppressWillModifyCallsLevel;
    NSMutableArray *_formulaOwnersToRegister;
    struct vector<TSCEUnregisteringOwnerPhasePair, std::allocator<TSCEUnregisteringOwnerPhasePair>> { struct TSCEUnregisteringOwnerPhasePair *__begin_; struct TSCEUnregisteringOwnerPhasePair *__end_; struct TSCEUnregisteringOwnerPhasePair *__cap_; } _ownerIdsToUnregister;
    TSCEReferenceSetWrapper *_noPrecedents;
    struct unordered_set<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct __hash_table<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>>> { void **__ptr_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>> { unsigned long long __size_; } __deleter_; } __bucket_list_; struct __hash_node_base<std::__hash_node<unsigned short, void *> *> { void *__next_; } __first_node_; unsigned long long __size_; float __max_load_factor_; } __table_; } _ownerIDsWithRecordsToPrune;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _ownerIDsWithRecordsToPruneLock;
}

@property (readonly, nonatomic) BOOL allOwnersRegistered;
@property (readonly, nonatomic) BOOL hasOwnerIdsToUnregister;
@property (nonatomic) BOOL shouldForceRegisterAllTables;
@property (readonly, nonatomic) TSPObjectContext *objectContext;
@property (readonly, nonatomic) TSCECalculationEngine *calcEngine;
@property (readonly, nonatomic) BOOL hasDateTimeVolatileFunctions;
@property (readonly, nonatomic) BOOL hasRemoteDataFunctions;
@property (readonly, nonatomic) BOOL containsAnyTable;
@property (nonatomic) BOOL duringSubOwnerUIDUpgrade;
@property (nonatomic) struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } coordinate; unsigned short tableID; unsigned short reserved; } currentCellBeingModified;
@property (readonly, nonatomic) BOOL hasEmbiggenedCoords;

+ (BOOL)rewriteTypeUsesAmendRewriteSpec:(unsigned int)a0;

- (void)dealloc;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)willModify;
- (void)willClose;
- (void)unregisterOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)allSpanningDependenciesAsString;
- (void)beginSuppressingWillModifyCalls;
- (id)dgl_cellDependenciesForOwnerID:(unsigned short)a0;
- (void)dirtyGeometryVolatileFunctions:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)encodeToArchive:(void *)a0 save31FormatAlso:(BOOL)a1 embiggenedFormatOnly:(BOOL)a2 archiver:(id)a3;
- (BOOL)cellIsInACycle:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x0; })corruptCellRefs;
- (BOOL)dgl_canDeleteOwnerDependencies:(unsigned short)a0;
- (id)dgl_explainDirtyPrecedentCount:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)findAndRecordCyclesInDirtyCells;
- (BOOL)intCellIsClean:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)addSubOwnerAliasesForUpgrade:(id)a0;
- (id)allCellDependenciesAsString:(BOOL)a0;
- (struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x0; })allCellRefsInOwner:(unsigned short)a0;
- (struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x0; })allDirtyCellRefs;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })allFormulaCoordsInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)allFormulaOwnersAsString;
- (id)allRangeDependenciesAsString;
- (id)allWholeOwnerDependenciesAsString;
- (void)assertDirtyPrecedentsCountConsistency;
- (void)assertForInconsistentDependGraph:(unsigned short)a0 assertMessage:(id)a1;
- (void)beginBatchingGroupCellDirtying;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })cellCoordinatesNeedingExcelImport:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })cellCoordsWithError:(long long)a0 inTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (unsigned long long)cellDependMemoryUseEstimate;
- (id)cellDependenciesForOwnerAsString:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 dirtyOnly:(BOOL)a1;
- (struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x0; })cellDependentsOfCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)cellHasDeepPrecedentInRange:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 cellRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (BOOL)cellHasPrecedents:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)cellHasThisCellPrecedent:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 precedent:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (BOOL)cellIsClean:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })cellRefForInternalCellReference:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)cellRefsReferringToGroupBy:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 outCellRefs:(void *)a1;
- (BOOL)cellRefsReferringToGroupNodes:(const void *)a0 groupByUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 outCellRefs:(void *)a2;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })cellsInACycleInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x0; })cellsInOwnerDependentOnBoth:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 precedent1:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 precedent2:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a2;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct TSUCellCoord *x2; })cellsReferencingRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 fromOwner:(unsigned short)a1 skipSpanning:(BOOL)a2;
- (void)clearCellsCurrentlyBeingEvaluated;
- (void)clearErrorAndWarningsForCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)clearErrorAndWarningsForCells:(const void *)a0;
- (void)clearOwnerIDHavingRecordsToPrune:(unsigned short)a0;
- (void)clearSpillSizeForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)clearSpillSizesInRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (long long)countNumberOfFormulaCells;
- (void)detectAndRepairConsistencyViolations;
- (void)detectAndRepairDirtyCellsAreOnLeafQueue;
- (id)dgl_allCellDependenciesAsString:(BOOL)a0;
- (id)dgl_allRangeDependenciesAsString;
- (void)dgl_assertDirtyPrecedentsCountConsistency;
- (id)dgl_cellDependenciesForOwnerAsString:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 dirtyOnly:(BOOL)a1;
- (id)dgl_cellDependenciesForOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)dgl_cellHasDeepPrecedentInRange:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 cellRange:(const struct TSCEInternalRangeReference { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; unsigned short x1; } *)a1;
- (BOOL)dgl_cellIsClean:(const struct TSCECellToEvaluate { struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } x0; id x1; struct TSCECellRecord *x2; } *)a0;
- (BOOL)dgl_cellIsInACycle:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (BOOL)dgl_cellIsReadyForEvaluation:(const struct TSCECellToEvaluate { struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } x0; id x1; struct TSCECellRecord *x2; } *)a0;
- (void)dgl_cellRefsForCycleCellsReferringToCell:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 outCellRefs:(void *)a1;
- (BOOL)dgl_cellRefsReferringToGroupNodes:(const void *)a0 groupByUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 outCellRefs:(void *)a2;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct TSUCellCoord *x2; })dgl_cellsWithRecordsInRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 formulaCellsOnly:(BOOL)a1;
- (void)dgl_clearCycleFlagsOnCellAndDependents:(struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; })a0 startCellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a1;
- (unsigned long long)dgl_computedNumberOfDirtyPrecedents:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)dgl_deleteOwnerDependenciesIfPossible:(unsigned short)a0;
- (void)dgl_dirtyAllCellsInOwnerID:(unsigned short)a0;
- (void)dgl_dirtyCellsInToDirtyQueue;
- (void)dgl_dirtyDateVolatileFunctions;
- (void)dgl_dirtyRandomVolatileFunctions;
- (void)dgl_dirtyTimeVolatileFunctions;
- (id)dgl_errorsForOwnerID:(unsigned short)a0;
- (id)dgl_errorsForOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)dgl_findAndRecordCyclesInDirtyCells;
- (struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)dgl_findCellRecord:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 willModifyOnTile:(BOOL)a1;
- (struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)dgl_findCellRecordInternal:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 willModifyOnTile:(BOOL)a1;
- (void)dgl_formulaCellRefsReferringToOwnerUIDs:(const void *)a0 outFormulaCells:(void *)a1;
- (void)dgl_formulaCellsAffectedByGeometryChangeToTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 outFormulaCells:(void *)a1;
- (void)dgl_formulaCellsReferencingUuidsInSpec:(id)a0 outFormulaCells:(void *)a1;
- (BOOL)dgl_hasDirtyCellsIgnoringNRM:(BOOL)a0;
- (BOOL)dgl_hasFormulaAt:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (BOOL)dgl_intCellIsClean:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)dgl_loadCacheForCell:(struct TSCECellToEvaluate { struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } x0; id x1; struct TSCECellRecord *x2; } *)a0;
- (void)dgl_markCellDirty:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)dgl_markCellRefAsDirty:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)dgl_markCellRefAsDirty:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 cellDependencies:(id)a1 cellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a2;
- (void)dgl_markCellsDirtyTraversingDependents:(struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; })a0 startCellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a1;
- (void)dgl_markDependentsDirty:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)dgl_markRandomVolatileFunctionsAsDirty;
- (long long)dgl_numDirtyCells;
- (id)dgl_ownerDependenciesForOwnerID:(unsigned short)a0;
- (id)dgl_ownerDependenciesForOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)dgl_ownerForOwnerID:(unsigned short)a0;
- (BOOL)dgl_ownerIDIsRegistered:(unsigned short)a0;
- (unsigned short)dgl_ownerKindForOwnerID:(unsigned short)a0;
- (unsigned long long)dgl_popNextLeavesIfAvailable:(void *)a0 numLeaves:(unsigned long long)a1 leafQueue:(id)a2;
- (id)dgl_precedentsAsString:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 dirtyOnly:(BOOL)a1;
- (struct TSCEReferenceSet { void /* function */ **x0; id x1; struct unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x2; struct map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { struct __tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x3; void *x4; void *x5; void *x6; void *x7; void *x8; id x9; void *x10; })dgl_precedentsOfCell:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)dgl_pushReferenceForImmediateEvaluation:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 pushOnFront:(BOOL)a1;
- (id)dgl_rangeDependenciesForOwnerID:(unsigned short)a0;
- (id)dgl_rangeDependenciesForOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)dgl_rangeRefIsDirty:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (int)dgl_registerOwnerID:(unsigned short)a0 owner:(id)a1 ownerIndex:(unsigned short)a2;
- (int)dgl_registerOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 owner:(id)a1 ownerIndex:(unsigned short)a2;
- (void)dgl_removeCellRefFromAllUuidMaps:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)dgl_removeFormulaForOwnerID:(unsigned short)a0 cellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (unsigned int)dgl_removePrecedentsFromOwnerInPhases:(unsigned short)a0 startPhase:(unsigned int)a1 startTime:(id)a2 timeout:(double)a3;
- (void)dgl_replaceCellWithFormulaForOwner:(unsigned short)a0 formulaCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 precedents:(id)a2 replaceOptions:(struct TSCEReplaceFormulaOptions { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x6; id x7; })a3;
- (void)dgl_setError:(id)a0 andWarnings:(id)a1 forCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2 inOwnerID:(unsigned short)a3;
- (id)dgl_spanningColumnDependenciesForOwnerID:(unsigned short)a0;
- (id)dgl_spanningColumnDependenciesForOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)dgl_spanningRowDependenciesForOwnerID:(unsigned short)a0;
- (id)dgl_spanningRowDependenciesForOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)dgl_unregisterOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 ownerID:(unsigned short)a1;
- (void)dgl_updateGraphWithCleanReference:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 cellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a1;
- (void)dgl_updateGraphWithCleanReference:(struct TSCECellToEvaluate { struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } x0; id x1; struct TSCECellRecord *x2; } *)a0 skipCycleCheck:(BOOL)a1;
- (unsigned long long)dgl_updateNumberOfDirtyPrecedents:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (unsigned long long)dgl_updateNumberOfDirtyPrecedents:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 cellDependencies:(id)a1 cellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a2;
- (id)dgl_wholeOwnerDependenciesForOwnerID:(unsigned short)a0;
- (id)dgl_wholeOwnerDependenciesForOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)dirtyAllCellsInAllOwners;
- (void)dirtyAllCellsInOwnerID:(unsigned short)a0;
- (void)dirtyAllCellsInOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)dirtyAllFunctions;
- (void)dirtyCellsWithErrors;
- (void)dirtyCellsWithSpillErrorsInTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)dirtyDateTimeVolatileFunctions;
- (void)dirtyDateVolatileFunctions;
- (void)dirtyForSpanningRowBug;
- (void)dirtyIndirectCalls;
- (void)dirtyLocaleVolatileFunctions;
- (void)dirtyRandomVolatileFunctions;
- (void)dirtyRemoteDataVolatileFunctions;
- (void)dirtyRemoteDataVolatileFunctionsForKeys:(id)a0;
- (void)dirtyTimeVolatileFunctions;
- (void)doneEvaluatingCell:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (BOOL)endBatchingGroupCellDirtying;
- (void)endSuppressingWillModifyCalls;
- (void)enumerateFormulaOwnersUsingBlock:(id /* block */)a0;
- (unsigned long long)errorCountForOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)errorForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (long long)errorTypeForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)evaluationCompletedForCells:(void *)a0 resultState:(struct TSCERecalculationState { unsigned char x0; })a1;
- (id)evaluationInfoForCell:(struct TSCECellToEvaluate { struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } x0; id x1; struct TSCECellRecord *x2; } *)a0 outHasDynamicPrecedents:(BOOL *)a1 outIsInCycle:(BOOL *)a2;
- (void)flushInProgressDirtying;
- (struct TSCECellRefSet { struct map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>> { struct __tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x0; })formulaCellsAffectedByRewrite:(id)a0 postMove:(BOOL)a1;
- (void)formulaCellsForDeletedOwner:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForGroupNodeChanges:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForGroupNodeUIDReassignment:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForInsertRows:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForInsertedOwner:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForMergeCells:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForMergeOriginMove:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForMoveRegion:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForMoveRows:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForPivotRuleChange:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForRemoveRows:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForSortRows:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForTableTranspose:(id)a0 outFormulaCells:(void *)a1;
- (void)formulaCellsForTableUIDReassignment:(id)a0 outFormulaCells:(void *)a1;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct TSUCellCoord *x2; })formulaCoordsInRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 inOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })formulaOwnerUIDForInternalFormulaOwnerID:(unsigned short)a0;
- (BOOL)hasCalculatedPrecedents:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)hasCalculatedPrecedentsInternal:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (BOOL)hasCellRecordsToPrune;
- (BOOL)hasDirtyCells;
- (BOOL)hasDirtyCellsIgnoringNRM:(BOOL)a0;
- (BOOL)hasFormulaAt:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)hasFormulaCellsUsingNowTodayRandom;
- (BOOL)hasHorizontalSpills:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)hasSpillingCellsIntersectingRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0 inTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (BOOL)hasSpillingErrorsForTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)hasSpillsOverlappingRange:(const struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a0 inTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 outSpillRects:(void *)a2;
- (BOOL)hasVerticalSpills:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)headerStateOfTableChanged:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 changedRows:(BOOL)a1;
- (const void *)idMap;
- (void)incrementalMarkCellRefDirty:(id)a0;
- (id)initWithCalcEngine:(id)a0;
- (id)initWithCalcEngine:(id)a0 archive:(const void *)a1 unarchiver:(id)a2;
- (BOOL)intCellContainsAFormula:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; })internalCellReferenceForCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (unsigned short)internalFormulaOwnerIDForFormulaOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (unsigned short)internalFormulaOwnerIDForFormulaOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 createIfMissing:(BOOL)a1;
- (struct TSCEInternalRangeReference { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; unsigned short x1; })internalRangeReferenceForRangeRef:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)isBatchingGroupCellDirtying;
- (BOOL)isSuppressingWillModifyCalls;
- (BOOL)leafQueueIsEmpty;
- (void)loadCacheForCell:(struct TSCECellToEvaluate { struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } x0; id x1; struct TSCECellRecord *x2; } *)a0;
- (void)markEverythingClean;
- (BOOL)markIntCellRefDirtyIfCellContainsAFormula:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (void)markIntRangeRefAsDirty:(const struct TSCEInternalRangeReference { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; unsigned short x1; } *)a0;
- (void)markOnlyDependentsDirty:(struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; })a0;
- (void)markOwnerIDHavingRecordsToPrune:(unsigned short)a0;
- (void)markRandomVolatileFunctionsAsDirty;
- (void)markRangeRefAsDirty:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)noteCorruptCellRef:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (unsigned long long)numCellRecordsInOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (long long)numDirtyCells;
- (unsigned long long)numDirtyCellsInOwnerID:(unsigned short)a0;
- (unsigned long long)numFormulaCellsInOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (long long)numberOfFormulas;
- (id)ownerForOwnerID:(unsigned short)a0;
- (id)ownerForOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)ownerIDIsRegistered:(unsigned short)a0;
- (struct unordered_set<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct __hash_table<unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<unsigned short>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned short, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<unsigned short, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; })ownerIDsWithRecordsToPrune;
- (BOOL)ownerIdIsUnregistering:(unsigned short)a0;
- (unsigned short)ownerKindForOwnerID:(unsigned short)a0;
- (BOOL)ownerUIDIsRegistered:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct vector<TSCECellToEvaluate, std::allocator<TSCECellToEvaluate>> { struct TSCECellToEvaluate *x0; struct TSCECellToEvaluate *x1; struct TSCECellToEvaluate *x2; })popNextLeaves:(unsigned long long)a0;
- (struct TSCEReferenceSet { void /* function */ **x0; id x1; struct unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; } x2; struct map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { struct __tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x3; void *x4; void *x5; void *x6; void *x7; void *x8; id x9; void *x10; })precedentsOfCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)printLeafQueue;
- (void)printOwners;
- (void)processPruningOfCellRecords:(double)a0;
- (void)processUnregisteringOwners:(double)a0;
- (void)pushCellsForImmediateEvaluation:(const void *)a0 pushOnFront:(BOOL)a1;
- (void)pushReferenceForImmediateEvaluation:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 cellRecord:(struct TSCECellRecord { struct TSCECellRecordEdgeLists *x0; struct os_unfair_lock_s { unsigned int x0; } x1; unsigned long long x2; struct TSCEPackedEdge { char x0[8]; } x3; unsigned int x4; unsigned short x5; unsigned short x6; } *)a1 pushOnFront:(BOOL)a2;
- (id)rangeDependenciesForOwnerID:(unsigned short)a0;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })rangeRefForInternalRangeReference:(const struct TSCEInternalRangeReference { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; unsigned short x1; } *)a0;
- (BOOL)rangeRefIsDirtyOrCurrentlyBeingEvaluated:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)registerFormulaOwners;
- (int)registerOwnerID:(unsigned short)a0 owner:(id)a1 ownerIndex:(unsigned short)a2;
- (int)registerOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 owner:(id)a1 ownerIndex:(unsigned short)a2;
- (void)removeAllPrecedentsFromOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)removeFormulaForOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 cellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (void)removeFormulasAt:(const void *)a0;
- (void)removeFormulasFromRange:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
- (void)replaceCellWithFormulaForOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 formulaCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 precedents:(id)a2 replaceOptions:(struct TSCEReplaceFormulaOptions { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x6; id x7; })a3;
- (void)replaceRemoteDataKeysInterestedInForCell:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 specifierSet:(id)a1;
- (void)resetAllExternalFormulasReferringToOwnerUIDs:(const void *)a0 upgradeMinion:(id)a1;
- (void)resetCorruptCellRefs:(const void *)a0;
- (void)resetNumberOfFormulas;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })rootCauseForErrorInCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 outAtRootCell:(BOOL *)a2;
- (void)scheduleMarkCellRefAsDirty:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)scheduleMarkIntCellRefAsDirty:(struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; })a0;
- (void)scheduleRepairingSpanningFormulasInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 upgradeMinion:(id)a1;
- (void)setError:(id)a0 andWarnings:(id)a1 forCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a3;
- (void)setHasCalculatedPrecedents:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 setting:(BOOL)a1;
- (void)setHasCalculatedPrecedentsInternal:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0 setting:(BOOL)a1;
- (BOOL)setSpillSize:(struct { unsigned int x0; unsigned int x1; })a0 forCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 withOverlaps:(void *)a2;
- (void)setTableAndBodyRangesForTable:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 bodyRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a1 tableID:(unsigned short)a2;
- (void)setTableAndBodyRangesForTable:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 bodyRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a1 tableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (id)spanningColumnDependenciesForOwnerID:(unsigned short)a0;
- (id)spanningRowDependenciesForOwnerID:(unsigned short)a0;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })spillOriginsInRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct { unsigned int x0; unsigned int x1; })spillSizeForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)unitTest_addSpanningReference:(id)a0 fromRef:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a1 toColumn:(unsigned int)a2 rangeContext:(unsigned char)a3;
- (void)unitTest_runOnDGL:(id /* block */)a0;
- (id)unitTest_spanningDepends:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 forColumns:(BOOL)a1;
- (void)updateNumberOfDirtyPrecedents:(const void *)a0;
- (void)upgradeOneOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 updatedOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 baseOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 ownerKind:(unsigned short)a3;
- (void)upgradeToSubOwnerUIDForOwners:(id)a0;
- (BOOL)verifyAllOwnersAreKnown;
- (void)verifyNumberOfFormulas;
- (BOOL)verifyTableAndBodyRangesForTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })verticalSpillCells:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)warningsForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)wroteSpillingCells:(const void *)a0 forTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;

@end
