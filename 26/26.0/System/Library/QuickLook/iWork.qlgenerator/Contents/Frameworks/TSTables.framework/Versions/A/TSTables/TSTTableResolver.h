@class TSCECalculationEngine, TSTTableTranslator, NSString, TSCECoordMapper, TSTTableInfo, TSTTableModel;
@protocol TSCEReferenceResolving;

@interface TSTTableResolver : NSObject

@property (readonly, nonatomic) TSCECalculationEngine *calcEngine;
@property (readonly, nonatomic) id<TSCEReferenceResolving> referenceResolverObject;
@property (readonly, nonatomic) id drawableInfo;
@property (readonly, nonatomic) TSTTableInfo *tableInfo;
@property (readonly, nonatomic) TSTTableModel *tableModel;
@property (readonly, nonatomic) TSTTableTranslator *tableTranslator;
@property (readonly, nonatomic) BOOL isCategorized;
@property (readonly, nonatomic) BOOL isPivotDataModel;
@property (readonly, nonatomic) BOOL isPivotTable;
@property (readonly, nonatomic) BOOL resolverIsATable;
@property (readonly, nonatomic) unsigned short localOwnerID;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } tableUID;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } resolverUID;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } conditionalStyleFormulaOwnerUID;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } mergeOwnerUID;
@property (readonly, nonatomic) struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } tableRangeCoordinate;
@property (readonly, nonatomic) struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } bodyRangeCoordinate;
@property (readonly, nonatomic) struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } footerRangeCoordinate;
@property (readonly, nonatomic) struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } viewTableRangeCoordinate;
@property (readonly, nonatomic) struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } viewBodyRangeCoordinate;
@property (readonly, nonatomic) BOOL hasEverBeenEmbiggened;
@property (readonly, nonatomic) NSString *sheetName;
@property (readonly, nonatomic) NSString *tableName;
@property (readonly, nonatomic) BOOL hasNamesInHeaders;
@property (readonly, nonatomic) BOOL formulaNeedsBidiStyling;
@property (readonly, nonatomic) TSCECoordMapper *coordMapper;

- (void).cxx_destruct;
- (void)willClose;
- (id)initWithTableModel:(id)a0;
- (struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })apparentRangeForRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 rangeContext:(unsigned char)a1;
- (struct TSCECellTractRefCore { struct TSUIndexSet { unsigned char x0 : 1; unsigned char x1 : 1; struct TSUIndexRange { long long x0; long long x1; } x2; struct *x3; } x0; struct TSUIndexSet { unsigned char x0 : 1; unsigned char x1 : 1; struct TSUIndexRange { long long x0; long long x1; } x2; struct *x3; } x1; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x2; unsigned char x3; struct TSUPreserveFlags { unsigned char x0; } x4; BOOL x5; BOOL x6; BOOL x7; })apparentTractRefForTractRef:(const struct TSCECellTractRefCore { struct TSUIndexSet { unsigned char x0 : 1; unsigned char x1 : 1; struct TSUIndexRange { long long x0; long long x1; } x2; struct *x3; } x0; struct TSUIndexSet { unsigned char x0 : 1; unsigned char x1 : 1; struct TSUIndexRange { long long x0; long long x1; } x2; struct *x3; } x1; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x2; unsigned char x3; struct TSUPreserveFlags { unsigned char x0; } x4; BOOL x5; BOOL x6; BOOL x7; } *)a0 rangeContext:(unsigned char)a1;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })columnUIDForColumnIndex:(unsigned short)a0;
- (id)makeReferenceWithTopLeft:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 bottomRight:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1 preserveFlags:(const struct TSUPreserveFlags { unsigned char x0; } *)a2;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })rowUIDForRowIndex:(unsigned int)a0;
- (id)valuesForViewTractRef:(id)a0 hidingActionMask:(unsigned char)a1 outError:(id *)a2;
- (void)documentLocaleDidChange;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })groupingColumnHeadersPrecedent:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })indirectAggTypeChangePrecedent:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })UIDForIndex:(unsigned int)a0 isRows:(BOOL)a1;
- (id)UIDSetForIndexes:(id)a0 isRows:(BOOL)a1;
- (id)UIDSetForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 isRows:(BOOL)a1;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct TSKUIDStruct *x2; })UIDsForIndexes:(id)a0 isRows:(BOOL)a1;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct TSKUIDStruct *x2; })UIDsForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 isRows:(BOOL)a1;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })allAggsInGroupRootPrecedent:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)apparentGridForRangeContext:(id)a0 rangeContext:(unsigned char)a1 spansAllColumns:(BOOL)a2 spansAllRows:(BOOL)a3;
- (id)canonicalCellReferenceForReference:(id)a0;
- (BOOL)cellModifiedInCurrentRecalcCycle:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (id)cellTextStyle:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (id)cellTractRefForViewTractRef:(id)a0;
- (long long)cellValueTypeForCell:(const struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; } *)a0;
- (struct TSCECellCoordSet { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x1; unsigned long long x2; } x0; } x1; })cellsModifiedInCurrentRecalcCycle;
- (id)cellsToInvalidateAfterRecalc;
- (unsigned short)columnIndexForColumnUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct TSKUIDStruct *x2; })columnUIDsForColumnIndexes:(id)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct TSKUIDStruct *x2; })columnUIDsForColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned int)columnWidthInBodyOfTable:(id)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })convertToRelativeAncestorUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 rowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)dirtyColumnOrderChanged;
- (struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })expandCellRangeToCoverMergedCells:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0;
- (id)filteredCellTractRef:(id)a0 hidingActionMask:(unsigned char)a1;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })firstUidFromUIDSet:(id)a0 isRows:(BOOL)a1;
- (struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 6; unsigned char x2 : 6; unsigned char x3 : 3; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; BOOL x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; })format:(id)a0 fromCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1;
- (id)formatAtBaseCellCoord:(const struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; } *)a0 formatIsExplicitOut:(BOOL *)a1;
- (id)formulaObjectForCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (unsigned char)getHidingAction:(id)a0 forRow:(BOOL)a1;
- (unsigned char)getNumberOfGroupByLevels;
- (id)getTableTranslator;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })groupByUUID;
- (unsigned char)groupLevelForGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })groupingColumnOrderPrecedent:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })groupingColumnsPrecedent:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })groupingColumnsPrecedentForCategoryRef:(id)a0;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })groupingRowOrderPrecedent:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 ignoreRecalc:(BOOL)a1;
- (BOOL)hasCellCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (long long)interactionTypeForCell:(const struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; } *)a0;
- (BOOL)isFooterCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (BOOL)isHeaderCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (struct vector<TSUModelCellRect, std::allocator<TSUModelCellRect>> { struct TSUModelCellRect *x0; struct TSUModelCellRect *x1; struct TSUModelCellRect *x2; })mergeRangesIntersectingCellRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })mergedRangeForBaseCellCoord:(const struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; } *)a0;
- (id)mutableColumnIndexesForUIDs:(const void *)a0;
- (id)mutableIndexesForUIDSet:(id)a0 isRows:(BOOL)a1 notFoundUIDs:(id)a2;
- (id)mutableIndexesForUIDs:(const void *)a0 isRows:(BOOL)a1;
- (id)mutableRowIndexesForUIDs:(const void *)a0;
- (struct unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>> { struct __hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>> { unsigned long long x0; } x1; } x0; struct __hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> { void *x0; } x1; unsigned long long x2; float x3; } x0; })ownerUIDsInterestedInGroupByChange:(id)a0;
- (struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })preMergeRangeFromUidTract:(id)a0;
- (BOOL)rangeIsWithinTable:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)rangeIsWithinTableInView:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)readValueForReference:(id)a0 fromCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 outValue:(id *)a2 readOptions:(unsigned short)a3;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })relativeAncestorGroupUid:(int)a0;
- (int)relativeLevelOfAncestorGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)resetAllFormulaDependenciesForCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 calcEngine:(id)a1;
- (void)resetDependenciesForCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 calcEngine:(id)a1;
- (id)resolveCategoryRefAtRowUid:(id)a0 rowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 containingTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })resolveRelativeAncestorUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 sourceRowUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })resolvedCellCoordForIntersection:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 hostCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1 useImplicitIntersection:(BOOL)a2;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })resolvedCellCoordForIntersectionRef:(id)a0 hostCell:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1 useImplicitIntersection:(BOOL)a2;
- (unsigned int)rowHeightInBodyOfTable:(id)a0;
- (unsigned int)rowIndexForRowUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct TSKUIDStruct *x2; })rowUIDsForRowIndexes:(id)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct TSKUIDStruct *x2; })rowUIDsForRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)solveGetPivotData:(id)a0 functionSpec:(id)a1 context:(id)a2;
- (id)spillingCellsPendingWrite;
- (id)textStyleForCalcEngineAtCellCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 outIsDefault:(BOOL *)a1;
- (id)unpersistedFormulaStorageForCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 withPrefix:(id)a1 withStyle:(id)a2 allowHeaderNames:(BOOL)a3;
- (void)upgradeStyleForFormulatextForCellCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (id)valueForCellCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 fetchRichTextAttributesIfPlainText:(BOOL)a1;
- (id)valueForCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 outGeometricPrecedent:(struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 fetchRichTextAttributesIfPlainText:(BOOL)a2;
- (id)valuesForViewTractRef:(id)a0 hidingActionMask:(unsigned char)a1 outError:(id *)a2 outGeometricPrecedents:(void *)a3 forceHidingOfPivotFiltered:(BOOL)a4;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct TSKUIDStruct *x2; })viewOrderedRowUids:(const void *)a0;
- (id)viewTractRefForCellTractRef:(id)a0;

@end
